                        ; --------------------------------------
                        ; zasm: assemble "LM80C-firmware-r314.asm"
                        ; date: 2020-12-30 15:24:35
                        ; --------------------------------------


                        ; ------------------------------------------------------------------------------
                        ; LM80C - FIRMWARE - R3.14
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. More info at
                        ; www DOT leonardomiliani DOT com
                        ; ------------------------------------------------------------------------------
                        ; Coding/Editing/Compiling:
                        ; Original init code for MC68B05 by Grant Searle
                        ; Original SIO/CTC/PIO init code by Mario Blunk
                        ; NASCOM BASIC originally modified by Gran Searle
                        ; Code modified and adapted for LM80C by Leonardo Miliani
                        ;
                        ; Edited with Atom Editor
                        ;
                        ; Compiled with ZASM assembler 4.2.4
                        ; https://k1.spdns.de/Develop/Projects/zasm-4.0/Distributions/
                        ; ------------------------------------------------------------------------------
                        ; Copyright notes:
                        ; Parts of the code (c) Grant Searle - free for non commercial use
                        ; Please include this advice and the note to the attribution of the original
                        ; version to Grant Searle if you intend to redistribuite it
                        ; http://searle.hostei.com/grant/index.html
                        ; eMail: home.micros01@btinternet.com
                        ;
                        ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        ; Parts of the code (c) Mario Blunk
                        ; http://www.trainÂ­z.de
                        ;
                        ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
                        ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
                        ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
                        ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
                        ; the original ROM code (checksum A934H). PA
                        ;
                        ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. Code and computer schematics are released under
                        ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
                        ; kind of warranty: you can use them at your own risk.
                        ; You are free to use them for any non-commercial use: you are only asked to
                        ; maintain the copyright notices, include this advice and the note to the 
                        ; attribution of the original version to Leonardo Miliani, if you intend to
                        ; redistribuite them.
                        ; https://www.leonardomiliani.com
                        ; 
                        ; Please support me by visiting the following links:
                        ; Main project page: https://www.leonardomiliani.com
                        ; Schematics and code: https://github.com/leomil72/LM80C
                        ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
                        ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
                        ; ------------------------------------------------------------------------------
                        
                        
                        ; ------------------------------------------------------------------------------
                        ; this line instructs the assembler to prepare a file for a ROM target
                        ; meaning that blank cells will be filled up with $FF
                        #target rom
                        
                        ; this line instructs the assembler to compile taking account that code
                        ; starts at $0000 (the address reached by Z80 upon reset)
0000:                   #code BOOT, $0000
                        
                        ; ------------------------------------------------------------------------------
                        ; include the latest version of the bootloader: this sets up the address aliases
                        ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
                        #include "../include/bootloader/bootloader-r314.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - BOOTLOADER - R3.14
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. Code and computer schematics are released under
                        ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
                        ; kind of warranty: you can use them at your own risk.
                        ; You are free to use them for any non-commercial use: you are only asked to
                        ; maintain the copyright notices, include this advice and the note to the 
                        ; attribution of the original version to Leonardo Miliani, if you intend to
                        ; redistribuite them.
                        ; https://www.leonardomiliani.com
                        ; 
                        ; Please support me by visiting the following links:
                        ; Main project page: https://www.leonardomiliani.com
                        ; Schematics and code: https://github.com/leomil72/LM80C
                        ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
                        ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
                        ; ------------------------------------------------------------------------------
                        
                        ; ADDRESS DECODING (bits A6/A5/A4)
                        ; 0000xxxx : PIO
                        ; 0001xxxx : CTC
                        ; 0010xxxx : SIO
                        ; 0011xxxx : VDP
                        ; 0100xxxx : PSG
                        
                        ; label defining for PIO (Parallel Input/Output)
0000:                   PIO_DA          equ %00000000
0001:                   PIO_DB          equ %00000001
0002:                   PIO_CA          equ %00000010
0003:                   PIO_CB          equ %00000011
                        
                        ; label defining for CTC (Counter Timer Circuit)
0010:                   CTC_CH0         equ %00010000
0011:                   CTC_CH1         equ %00010001
0012:                   CTC_CH2         equ %00010010
0013:                   CTC_CH3         equ %00010011
                        
                        ;label defining for SIO (Serial Input/Output)
0022:                   SIO_CA          equ %00100010
0023:                   SIO_CB          equ %00100011
0020:                   SIO_DA          equ %00100000
0021:                   SIO_DB          equ %00100001
                        
                        ;label defining for VDP (Video Display Processor)
0030:                   VDP_DAT         equ %00110000
0032:                   VDP_SET         equ %00110010
                        
                        ; label defining for PSG (Programmable Sound Generator)
0040:                   PSG_REG         equ %01000000
0041:                   PSG_DAT         equ %01000001
                        
                        ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
                        ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
                        ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
                        
0058:                   SER_BUFSIZE     equ     $58
0050:                   SER_FULLSIZE    equ     $50
0005:                   SER_EMPTYSIZE   equ     $05
                        
8000:                   SERBUF_START    equ     $8000           ; RAM starts here
8058:                   serInPtr        equ     SERBUF_START + SER_BUFSIZE
805A:                   serRdPtr        equ     serInPtr+2
805C:                   serBufUsed      equ     serRdPtr+2
805D:                   basicStarted    equ     serBufUsed+1
0058:                   bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
818D:                   TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
                        
                        ;------------------------------------------------------------------------------
                        ; BASE MEMORY - RESET LOCATION - $0000
                        ; the CPU jumps to 0000h after a reset
                                        org     $0000
0000: F3       [ 4]     RST00:          di                      ; be sure that INTs are disabled
0001: C35A02   [14]                     jp      INIT_HW         ; jump to system initialization
                        
                        ;------------------------------------------------------------------------------
                        ; send a character over serial
0004: FFFFFFFF                          org     $0008
0008: C3F701   [10]     RST08:          jp      TXA
                        
                        ;------------------------------------------------------------------------------
                        ; interrupt vector when SIO has a char available in its buffer
000B: FF                                org     $000C
000C: 0001                              defw    RX_CHA_AVAIL
                        
                        ;------------------------------------------------------------------------------
                        ; interrupt vector for SIO special conditions (i.e. buf overrun)
                                        org     $000E
000E: 9B01                              defw    SPEC_RX_CONDITON
                        
                        ;------------------------------------------------------------------------------
                        ; receive a character over serial
                                        org     $0010
0010: C3CD01   [10]     RST10:          jp      RXA
                        
                        ;------------------------------------------------------------------------------
                        ; check serial status
                        
0013: FFFFFFFF                          org     $0018
0017: FF                
0018: C32402   [10]     RST18:          jp      CKINCHAR
                        
                        ;------------------------------------------------------------------------------
                        ; interrupt vectors for CTC 
001B: FFFFFFFF                          org     $0040               ; for CH0 Timer - unused
001F: FF...             
0040: D281                              defw    CTC0IV
                                        
                                        org     $0042               ; for CH1 Timer - unused
0042: D581                              defw    CTC1IV
                                        
                                        org     $0044               ; for CH2 timer - unused
0044: D881                              defw    CTC2IV
                                        
                                        org     $0046               ; for CH3 Timer - used for 100ths/s counter
0046: DB81                              defw    CTC3IV
                        
                        ;------------------------------------------------------------------------------
                        ; interrupt routine for NMI
0048: FFFFFFFF                          org     $0066
004C: FF...             
0066: C36180   [20]                     jp      NMIUSR              ; jump to execute NMI service routine
                        
                        ;------------------------------------------------------------------------------
                        
0069: FFFFFFFF                          org     $0090
006D: FF...             
0090: 4C4D3830                          defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
0094: 4320434F          
0098: 4C4F5200                          defb    $4C,$4F,$52,$00,$00,$00,$00,$00
009C: 00000000          
00A0: 434F4D50                          defb    $43,$4F,$4D,$50,$55,$54,$45,$52
00A4: 55544552          
00A8: 20283230                          defb    $20,$28,$32,$30,$32,$30,$29,$00
00AC: 32302900          
00B0: 44657369                          defb    $44,$65,$73,$69,$67,$6E,$65,$64
00B4: 676E6564          
00B8: 20627900                          defb    $20,$62,$79,$00,$00,$00,$00,$00
00BC: 00000000          
00C0: 4C656F6E                          defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
00C4: 6172646F          
00C8: 204D696C                          defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
00CC: 69616E69          
00D0: 46572033          FWVER:          defm    'FW 3.14',$20,__date__,$20,__time__,$00
00D4: 2E313420          
00D8: 32303230          
00DC: 2D31322D          
00E0: 33302031          
00E4: 353A3234          
00E8: 3A333500          
                        ;------------------------------------------------------------------------------
                        ; interrupt driven routine to get chars from Z80 SIO
00EC: FFFFFFFF                          org     $0100
00F0: FF...             
0100: F5       [11]     RX_CHA_AVAIL:   push    AF              ; store A
0101: E5       [22]                     push    HL              ; and HL
0102: CD6501   [39]                     call    A_RTS_OFF       ; disable RTS line
0105: DB20     [50]                     in      A,(SIO_DA)      ; read char from RX buffer into A
0107: 322B82   [63]                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
010A: CD3601   [80]                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
010D: D23101   [90|90]                  jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
0110: 3A2B82   [103]                    ld      A,(TMPKEYBFR)   ; retrieve char
0113: 32EC81   [116]                    ld      (CHR4VID),A     ; write into buffer for video printing
0116: FE0D     [123]                    cp      CR              ; is it RETURN?
0118: CA2001   [133|133]                jp      Z,CNTRXCHA      ; yes, continue
011B: FE20     [140]                    cp      $20             ; is it another control char (code < 32)?
011D: DA3101   [150|150]                jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
0120: F5       [11]     CNTRXCHA:       push    AF              ; store char
0121: AF       [15]                     xor     A
0122: 322982   [28]                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
0125: 3AEB81   [41]                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
0128: FE01     [48]                     cp      $01             ; is the print on video on?
012A: CCC806   [58|65]                  call    Z,CHAR2VID      ; yes, print on screen
012D: F1       [68]                     pop     AF              ; retrieve char
012E: CDF701   [85]                     call    TXA             ; send back to serial
0131: E1       [10]     LVRXCHA:        pop     HL              ; retrieve HL
0132: F1       [20]                     pop     AF              ; and A
0133: FB       [24]                     ei                      ; re-enable interrupts
0134: ED4D     [38]                     reti                    ; and exit
                        
                        ; put a char into the input buffer, char is into A
                        ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
                        ; the RETURN key is pressed on the keyboard
0136: F5       [11]     CHARINTOBFR:    push    AF              ; store it
0137: 3A5C80   [24]                     ld      A,(serBufUsed)  ; load buffer size
013A: FE58     [31]                     cp      SER_BUFSIZE     ; if buffer is not full
013C: DA4101   [41|41]                  jp      C,NOTFULL       ; then store the char
013F: F1       [51]                     pop     AF              ; else drop it
0140: C9       [61]                     ret                     ; and exit
0141: 2A5880   [16]     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
0144: 23       [22]                     inc     HL              ; load pointer to find first free cell
0145: 7D       [26]                     ld      A,L             ; only check low byte because buffer<256
0146: FE58     [33]                     cp      bufWrap         ; check if the pointer is at the last cell
0148: 2003     [40|45]                  jr      NZ,NOTWRAP      ; if not then continue
014A: 210080   [50]                     ld      HL,SERBUF_START ; else load the address of the first cell
014D: 225880   [16]     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
0150: F1       [26]                     pop     AF              ; then recover the char
0151: 77       [33]                     ld      (HL),A          ; and store it in the appropriate cell
0152: 3A5C80   [46]                     ld      A,(serBufUsed)  ; load the size of the input buffer
0155: 3C       [50]                     inc     A               ; increment it
0156: 325C80   [63]                     ld      (serBufUsed),A  ; and store the new size
0159: FE50     [70]                     cp      SER_FULLSIZE    ; check if input buffer is full
015B: D8       [75|81]                  ret     C               ; exit if buffer is not full
015C: 3A2E82   [88]                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
015F: 1F       [92]                     rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
0160: DC6501   [102|109]                call    C,A_RTS_OFF     ; ...stop receiving further chars
0163: AF       [106]                    xor     A               ; clear Carry to set a buffer full condition
0164: C9       [116]                    ret
                        
                        ;-------------------------------------------------------------------------------
                        ; Z80 SIO MANAGEMENT
                        ;-------------------------------------------------------------------------------
                        ; disable RTS:
                        ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
0165: F5       [11]     A_RTS_OFF:      push    AF              ; store A
0166: 3E05     [18]                     ld      A,%00000101     ; write into WR0: select WR5
0168: D322     [29]                     out     (SIO_CA),A
016A: 3A2F82   [42]                     ld      A,(SERABITS)    ; load data bits
016D: F628     [49]                     or      %00101000       ; TX enable; RTS disable
016F: D322     [60]                     out     (SIO_CA),A      ; send setting
0171: F1       [70]                     pop     AF              ; retrieve A
0172: C9       [80]                     ret                     ; exit
                        
                        ; enable RTS
                        ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
0173: F5       [11]     A_RTS_ON:       push    AF              ; store A
0174: 3E05     [18]                     ld      A,%00000101     ; write into WR0: select WR5
0176: D322     [29]                     out     (SIO_CA),A
0178: 3A2F82   [42]                     ld      A,(SERABITS)    ; load data bits
017B: F62A     [49]                     or      %00101010       ; TX enable; RTS enable
017D: D322     [60]                     out     (SIO_CA),A      ; send setting
017F: F1       [70]                     pop     AF              ; retrieve A
0180: C9       [80]                     ret                     ; return
                        
                        ; disable SIO RX channel A
0181: F5       [11]     SIO_A_DI:       push    AF              ; store A
0182: 3E03     [18]                     ld      A,%00000011     ; write into WR0: select WR3
0184: D322     [29]                     out     (SIO_CA),A
0186: 3A2F82   [42]                     ld      A,(SERABITS)    ; load the serial bits; RX disabled; auto enable is OFF
0189: D322     [53]                     out     (SIO_CA),A
018B: F1       [63]                     pop     AF              ; retrieve A
018C: C9       [73]                     ret                     ; return
                        
                        ; enable SIO RX channel A
018D: F5       [11]     SIO_A_EI:       push    AF              ; store A
018E: 3E03     [18]                     ld      A,%00000011     ; write into WR0: select WR3
0190: D322     [29]                     out     (SIO_CA),A      ; select register
0192: 3A2F82   [42]                     ld      A,(SERABITS)    ; load the serial data bits
0195: CBC7     [50]                     set     0,A             ; set RX enabled; auto enable is OFF
0197: D322     [61]                     out     (SIO_CA),A      ; send setting to SIO
0199: F1       [71]                     pop     AF              ; retrieve A
019A: C9       [81]                     ret
                        
                        
                        ; special SIO condition (i.e., buffer overrun)
                        ; if buffer overruns then show an error, empty the RX buffer and send
                        ; a break char
019B:                   SPEC_RX_CONDITON:
019B: F5       [11]                     push    AF
019C: E5       [22]                     push    HL
019D: CD6501   [39]                     call    A_RTS_OFF       ; disable RTS
01A0: CD8101   [56]                     call    SIO_A_DI        ; disable RX on ch. A
01A3: 3A2E82   [69]                     ld      A,(SERIALS_EN)  ; load serial status
01A6: CB97     [77]                     res     2,A             ; disable RX on port 1
01A8: 322E82   [90]                     ld      (SERIALS_EN),A  ; store new serial status 
01AB: DB01     [101]                    in      A,(PIO_DB)      ; read status LEDs
01AD: CBE7     [109]                    set     4,A             ; set 5th pin ON
01AF: D301     [120]                    out     (PIO_DB),A      ; send new setting
01B1: 3E30     [127]                    ld      A,%00110000     ; write into WR0: error reset, select WR0
01B3: D322     [138]                    out     (SIO_CA),A      ; send command to SIO
01B5: 3E03     [145]                    ld      A,CTRLC
01B7: CD3601   [162]                    call    CHARINTOBFR     ; send CTRL-C to BASIC
01BA: AF       [ 4]     EMPTYCHABFR:    xor     A
01BB: D322     [15]                     out     (SIO_CA),A      ; write to WR0, select RR0
01BD: DB22     [26]                     in      A,(SIO_CA)      ; read RR0 register
01BF: E601     [33]                     and     $01             ; check if input buffer if empty
01C1: CAC801   [43|43]                  jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
01C4: DB20     [54]                     in      A,(SIO_DA)      ; read chars
01C6: 18F2     [66]                     jr      EMPTYCHABFR     ; repeat
01C8: E1       [10]     CHABFREMPTY:    pop     HL
01C9: F1       [20]                     pop     AF
01CA: FB       [24]                     ei                      ; re-enable interrupts
01CB: ED4D     [38]                     reti                    ; return from interrupt
                        
                        ;------------------------------------------------------------------------------
                        ; retrieve a char from the input buffer
01CD: 3A5C80   [13]     RXA:            ld      A,(serBufUsed)  ; load the buffer size
01D0: A7       [17]                     and     A               ; check if it's 0 (empty)
01D1: CACD01   [27|27]                  jp      Z,RXA           ; if it's empty, wait for a char
01D4: F3       [31]                     di                      ; disable interrupts
01D5: E5       [42]                     push    HL              ; store HL
01D6: 2A5A80   [58]                     ld      HL,(serRdPtr)   ; load pointer to first available char
01D9: 23       [64]                     inc     HL              ; increment it (go to the next char)
01DA: 7D       [68]                     ld      A,L             ; check if the end of the buffer has been reached
01DB: FE58     [75]                     cp      bufWrap         ; (only check low byte because buffer<256)
01DD: 2003     [82|87]                  jr      NZ,NOTRDWRAP    ; if not, jump straight
01DF: 210080   [92]                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
01E2: 225A80   [16]     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
01E5: 3A5C80   [29]                     ld      A,(serBufUsed)  ; load buffer size
01E8: 3D       [33]                     dec     A               ; decrement it
01E9: 325C80   [46]                     ld      (serBufUsed),A  ; and store the new size
01EC: FE05     [53]                     cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
01EE: 3003     [60|65]                  jr      NC,RXA_EXIT     ; if not empty yet, then exit
01F0: CD7301   [77]                     call    A_RTS_ON        ; else re-enable receiving chars
01F3: 7E       [ 7]     RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
01F4: E1       [17]                     pop     HL              ; retrieve HL
01F5: FB       [21]                     ei                      ; re-enable interrupts
01F6: C9       [31]                     ret                     ; return
                        
                        ;------------------------------------------------------------------------------
                        ; sends a char over the serial (trick for INTs from WikiTI)
                        ; char is into A
01F7: F5       [11]     TXA:            push    AF              ; store AF
01F8: C5       [22]                     push    BC              ; store BC
01F9: 47       [26]                     ld      B,A             ; store char
01FA: ED57     [35]                     ld      A,I             ; when loading I into A, P/V is set to the value of IFF (P/V is set if INTs enabled)
01FC: EA0102   [45|45]                  jp      PE,CNTTXA       ; if set, jump over
01FF: ED57     [54]                     ld      A,I             ; if not set, test again to fix "false negative" from interrupt occurring at first test
0201: F5       [11]     CNTTXA:         push    AF              ; store current P/V flag
0202: F3       [15]                     di                      ; disable INTs
0203: 3A2E82   [28]                     ld      A,(SERIALS_EN)  ; load serial status
0206: FE05     [35]                     cp      %00000101       ; check if serial 1 is open and RX/TX is enabled 
0208: 2006     [42|47]                  jr      NZ,TXA_EXIT     ; no, jump over
020A: 78       [46]                     ld      A,B             ; retrieve char
020B: D320     [57]                     out     (SIO_DA),A      ; send char to the SIO
020D: CD1802   [74]                     call    TX_EMP          ; wait for outgoing char to be sent
0210: F1       [10]     TXA_EXIT:       pop     AF              ; retrieve P/V flag
0211: E21502   [20|20]                  jp      PO,EXTXA        ; if P is reset, INTs were disabled so we can leave right now
0214: FB       [24]                     ei                      ; INTs were enabled, so re-enable interrupts
0215: C1       [10]     EXTXA:          pop     BC              ; retrieve BC
0216: F1       [20]                     pop     AF              ; retrieve AF
0217: C9       [30]                     ret                     ; return
                        
                        ;------------------------------------------------------------------------------
                        ; wait until outgoing serial has been sent
0218: 97       [ 4]     TX_EMP:         sub     A               ; set A to 0
0219: 3C       [ 8]                     inc     A               ; set A to 1
021A: D322     [19]                     out     (SIO_CA),A      ; write to WR0, select RR1
021C: DB22     [30]                     in      A,(SIO_CA)      ; read RR1 register
021E: CB47     [38]                     bit     0,A             ; check if all chars have been sent
0220: CA1802   [48|48]                  jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
0223: C9       [58]                     ret                     ; else exit
                        
                        
                        ;------------------------------------------------------------------------------
                        ; check if there is some chars into the buffer
0224: 3A5C80   [13]     CKINCHAR        ld      A,(serBufUsed)  ; load char in buffer
0227: A7       [17]                     and     A               ; compare to 0
0228: C9       [27]                     ret                     ; return
                        
                        ;------------------------------------------------------------------------------
                        ; print a text from memory, and terminate when $00 is found
0229: 7E       [ 7]     RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
022A: B7       [11]                     or      A               ; is it $00 (end string)?
022B: C8       [16|22]                  ret     Z               ; Yes, then return
022C: 32EC81   [29]                     ld      (CHR4VID),A     ; store char
022F: F3       [33]                     di
0230: CDC806   [50]                     call    CHAR2VID        ; and send it to screen
0233: FB       [54]                     ei
0234: 23       [60]                     inc     HL              ; and select the next one
0235: 18F2     [72]                     jr      RAWPRINT        ; repeat
                        
                        ;-------------------------------------------------
                        ; Interrupt service routine (ISR) for CH3 timer
                        ; this is used to increment the 100ths of a second counter and for cursor flashing
0237: F5       [11]     CH3_TIMER:      push    AF              ; save regs. A,
0238: C5       [22]                     push    BC              ; BC,
0239: D5       [33]                     push    DE              ; DE,
023A: E5       [44]                     push    HL              ; HL
023B: 21CE81   [54]                     ld      HL,TMRCNT       ; load starting address of the timer
023E: 0604     [61]                     ld      B,$04           ; 4 bytes to check
0240: 34       [11]     INCTMR3:        inc     (HL)            ; increment timer
0241: 2003     [18|23]                  jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
0243: 23       [24]                     inc     HL              ; if yes, there was an overflow, so increment next byte
0244: 10FA     [32|37]                  djnz    INCTMR3         ; repeat for 4 bytes
0246: CD6907   [17]     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
0249: CD230C   [34]                     call    MNGSNDS         ; call the tone managemenet
024C: 3ACE81   [47]                     ld      A,(TMRCNT)      ; check for keyboard management
024F: 1F       [51]                     rra                     ; bit 0 = 1 ?
0250: D4880C   [61|68]                  call    NC,KEYBOARD     ; no, so read the keyboard inputs
0253: E1       [71]                     pop     HL              ; retrieve HL,
0254: D1       [81]                     pop     DE              ; DE,
0255: C1       [91]                     pop     BC              ; BC,
0256: F1       [101]                    pop     AF              ; and A
0257: FB       [105]                    ei                      ; re-enable interrupts
0258: ED4D     [119]                    reti                    ; exit from ISR
                        
                        ;------------------------------------------------------------------------------
                        ;------------------------------------------------------------------------------
                        ; HARDWARE INITIALISATION
                        ; first run - setup HW & SW
                        ;
025A: 218D81   [10]     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
025D: F9       [16]                     ld      SP,HL           ; set stack to temp stack pointer
025E: 210080   [26]                     ld      HL,SERBUF_START ; set beginning of input buffer
0261: 225880   [42]                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
0264: 225A80   [58]                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
0267: AF       [62]                     xor     A               ; reset A
0268: 325C80   [75]                     ld      (serBufUsed),A  ; actual buffer size is 0
026B: 322E82   [88]                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
026E: CDDF02   [105]                    call    HELLOWRLD       ; little serial blink with LEDs
0271: CD0403   [122]                    call    initCTC         ; configure CTC, then...
0274: CDC10B   [139]                    call    initPSG         ; ...configure PSG
0277: CDA104   [156]                    call    SHOW_LOGO       ; show computer logo
027A: 1E01     [163]                    ld      E,$01           ; E chooses the video mode: 1:graphics 1
027C: CD7E03   [180]                    call    initVDP         ; set video display
027F: AF       [184]                    xor     A
0280: ED47     [193]                    ld      I,A             ; set high byte of interrupt vectors to point to page 0
0282: ED5E     [201]                    im      2               ; interrupt mode 2
0284: FB       [205]                    ei                      ; enable interrupts
                                        ; print system messages
0285: AF       [209]                    xor     A               ; A=0 so...
0286: 322982   [222]                    ld      (KBDNPT),A      ; ...inputs don't come from keyboard
0289: 3C       [226]                    inc     A               ; A=1...
028A: 32EB81   [239]                    ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
028D: 213A03   [249]                    ld      HL,MSGTXT1      ; sign-on message
0290: CD2902   [266]                    call    RAWPRINT        ; print message
0293: CD5A08   [283]                    call    CURSOR_ON       ; enable cursor
0296: 3A5D80   [296]                    ld      A,(basicStarted); check if BASIC is already started
0299: FE59     [303]                    cp      'Y'             ; to see if this is a power-up
029B: 2016     [310|315]                jr      NZ,COLDSTART    ; if not, then do a COLD start
029D: 216403   [320]                    ld      HL,MSGTXT2      ; message to choose kind of start
02A0: CD2902   [337]                    call    RAWPRINT        ; print message
02A3: AF       [341]                    xor     A
02A4: 32EB81   [354]                    ld      (PRNTVIDEO),A   ; disable print-on-video
02A7: CDCD01   [17]     CORW:           call    RXA             ; look for a pressed key
02AA: E6DF     [24]                     and     %11011111       ; only UPPERCASE char
02AC: FE43     [31]                     cp      'C'             ; cold start?
02AE: 200B     [38|43]                  jr      NZ,CHECKWARM    ; no, let's check for warm start
02B0: CDC502   [55]                     call    ECHO_CHAR       ; echoes the char
02B3: 3E59     [ 7]     COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
02B5: 325D80   [20]                     ld      (basicStarted),A
02B8: C3F20E   [30]                     jp      COLD            ; start BASIC COLD
02BB: FE57     [ 7]     CHECKWARM:      cp      'W'
02BD: 20E8     [14|19]                  jr      NZ,CORW         ; char not recognized, wait again
02BF: CDC502   [31]                     call    ECHO_CHAR       ; echoes the char
02C2: C3F50E   [41]                     jp      WARM            ; start BASIC WARM
                        
                        ;-------------------------------------------------------------------------------
02C5: 32EC81   [13]     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
02C8: AF       [17]                     xor     A
02C9: 322982   [30]                     ld      (KBDNPT),A      ; input is not from keyboard
02CC: F3       [34]                     di                      ; disable INTs
02CD: CDC806   [51]                     call    CHAR2VID        ; echoes back the pressed key,
02D0: 3E0D     [58]                     ld      A,CR            ; then set a CR
02D2: 32EC81   [71]                     ld      (CHR4VID),A     ; set char for video printing
02D5: CDC806   [88]                     call    CHAR2VID        ; and send it to screen
02D8: FB       [92]                     ei                      ; re-enable INTs
02D9: 3E01     [99]                     ld      A,$01
02DB: 32EB81   [112]                    ld      (PRNTVIDEO),A   ; re-enable video printing
02DE: C9       [122]                    ret                     ; return to caller
                                        
                        ;-------------------------------------------------------------------------------
                        ; little serial blink with LEDs
02DF: 0E09     [ 7]     HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
02E1: 3ECF     [14]                     ld      A,%11001111     ; set mode 3 (mode control)
02E3: D303     [25]                     out     (PIO_CB),A      ; for PIO port B
02E5: AF       [29]                     xor     A               ; set pins to OUTPUT
02E6: D303     [40]                     out     (PIO_CB),A      ; for port B
02E8: 3C       [44]                     inc     A               ; LSB on
02E9: D301     [11]     LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
02EB: 1E20     [18]                     ld      E,$20           ; little delay
02ED: 0600     [ 7]     DEC_E:          ld      B,$00           ; count to 256
02EF: 10FE     [ 8|13]  COUNTER:        djnz    COUNTER         ; decrement inner counter
02F1: 1D       [12]                     dec     E               ; decrement outer counter
02F2: 20F9     [19|24]                  jr      NZ,DEC_E        ; finish delay
02F4: CB27     [27]                     sla     A               ; shift reg.A to left 1 bit
02F6: 0D       [31]                     dec     C               ; next LED
02F7: 20F0     [38|43]                  jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
02F9: C9       [48]                     ret                     ; return to caller
                        
                        ;-------------------------------------------------------------------------------
                        ; Z80 SIO default settings for channel A
02FA: 30                SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
02FB: 18                                defb    %00011000       ; write into WR0: channel reset
02FC: 04                                defb    %00000100       ; write into WR0: select WR4
02FD: 44                                defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
02FE: 05                                defb    %00000101       ; write into WR0: select WR5
02FF: E8                                defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
0300: 01                SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
0301: 04                                defb    %00000100       ; write into WR1: status affects interrupt vectors
0302: 02                                defb    %00000010       ; write into WR0: select WR2
0303: 00                                defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
                                                                ; will be affected by the channel & condition that raised the interrupt
                                                                ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
                                                                ; for special conditions
                        ;------------------------------------------------------------------------------
                        ; Z80 CTC setting up
0304:                   initCTC:
0304: 212E03   [10]                     ld      HL,CTCCONF      ; CTC configuration
0307: 11D281   [20]                     ld      DE,CTC0IV       ; CTC interrupt vector table
030A: 010C00   [30]                     ld      BC,$000C        ; 12 bytes
030D: EDB0     [46|21]                  ldir                    ; copy data
                        ;CH0, CH1, & CH2 disabled
030F: 3E03     [53]                     ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
                                                                ; start timer on loading constant, no time constant follows, software reset, command word
0311: D310     [64]                     out     (CTC_CH0),A     ; set CH0
0313: D311     [75]                     out     (CTC_CH1),A     ; set CH1
0315: D312     [86]                     out     (CTC_CH2),A     ; set CH2
                        
                        ;init CH3
                        ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
                        ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
0317: 3EA7     [93]                     ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
                                                                ; time constant follows; cont. operation; command word
0319: D313     [104]                    out     (CTC_CH3),A     ; send to CH3
031B: 3E90     [111]                    ld      A,$90           ; time constant - 90$ (144d)
031D: D313     [122]                    out     (CTC_CH3),A     ; send to CH3
031F: 3E40     [129]                    ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
                                                                ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
                                                                ; so int vector is 01000xx00
0321: D310     [140]                    out     (CTC_CH0),A     ; send to CTC
                                        ; reset cells of 100ths of a second counter
0323: AF       [144]                    xor     A               ; reset A
0324: 21CE81   [154]                    ld      HL,TMRCNT       ; load TMR pointer
0327: 0604     [161]                    ld      B,$04           ; 4 memory cells
0329: 77       [ 7]     RESTMR:         ld      (HL),A          ; reset n-cell of TMR
032A: 23       [13]                     inc     HL              ; next cell
032B: 10FC     [21|26]                  djnz    RESTMR          ; repeat for 4 cells
032D: C9       [31]                     ret
                        
032E: FBED4D            CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
0331: FBED4D                            defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
0334: FBED4D                            defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
0337: C33702   [10]                     jp      CH3_TIMER       ; CTC3 interrupt vector (sys tick timer)
                        ;------------------------------------------------------------------------------
033A: 4C4D3830          MSGTXT1:        defm    "LM80C by Leonardo Miliani",CR
033E: 43206279          
0342: 204C656F          
0346: 6E617264          
034A: 6F204D69          
034E: 6C69616E          
0352: 690D              
0354: 4669726D                          defm    "Firmware R3.14",CR,0
0358: 77617265          
035C: 2052332E          
0360: 31340D00          
0364: 0D                MSGTXT2:        defb    CR
0365: 3C433E6F                          defm    "<C>old or <W>arm start? ",0
0369: 6C64206F          
036D: 72203C57          
0371: 3E61726D          
0375: 20737461          
0379: 72743F20          
037D: 00                
                        
                        ; incude the latest version of the VDP module
                        #include "../include/vdp/vdp-r314.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - VDP ROUTINES - R3.14
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. Code and computer schematics are released under
                        ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
                        ; kind of warranty: you can use them at your own risk.
                        ; You are free to use them for any non-commercial use: you are only asked to
                        ; maintain the copyright notices, include this advice and the note to the 
                        ; attribution of the original version to Leonardo Miliani, if you intend to
                        ; redistribuite them.
                        ; https://www.leonardomiliani.com
                        ; 
                        ; Please support me by visiting the following links:
                        ; Main project page: https://www.leonardomiliani.com
                        ; Schematics and code: https://github.com/leomil72/LM80C
                        ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
                        ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
                        ; ------------------------------------------------------------------------------
                        ;
                        ;------------------------------------------------------------------------------
                        ; VDP INITIALISATION
                        ; initialize VDP for a specific graphics mode
                        ; INPUT: E -> contains the graphics mode:
                        ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
037E: D5       [11]     initVDP:        push    DE              ; store E
037F: CDFD09   [28]                     call    EMPTY_VRAM      ; reset VRAM
0382: CD1C0A   [45]                     call    SET_GFX_MODE    ; load register settings
0385: CD110A   [62]                     call    CLR_RAM_REG     ; reset RAM registers
0388: D1       [72]                     pop     DE              ; restore reg. E
0389: AF       [76]                     xor     A               ; reset A
038A: 47       [80]                     ld      B,A             ; reset B (will be used later)
038B: 7B       [84]                     ld      A,E             ; move E into A
038C: 32E081   [97]                     ld      (SCR_MODE),A    ; store screen mode
038F: FE01     [104]                    cp      $01             ; is it graphics 1 (A=1)?
0391: CACD03   [114|114]                jp      Z,G1MD          ; yes, jump over
0394: FE02     [121]                    cp      $02             ; is it graphics 2 (A=2)?
0396: CA0E04   [131|131]                jp      Z,G2MD          ; yes, jump over
0399: FE03     [138]                    cp      $03             ; is it multicolor (A=3)?
039B: CA3004   [148|148]                jp      Z,MCMD          ; yes, jump over
039E: FE04     [155]                    cp      $04             ; is it extended graphics 2 (A=4)?
03A0: CA5304   [165|165]                jp      Z,EXG2MD        ; yes, jump over; otherwise, it must be $00 so we assume that it's text mode
                        
                                        ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
                                        ; TEXT MODE (G0)
03A3:                   TXTMD:          ; load charset
03A3: 60       [ 4]                     ld      H,B
03A4: 68       [ 8]                     ld      L,B             ; HL=first pattern cell $0000
03A5: CD380A   [25]                     call    LOADCHARSET     ; load patterns into VRAM
                                        ; set cursor & video overlay
03A8: AF       [29]                     xor     A               ; reset A
03A9: 32E481   [42]                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
03AC: 32E581   [55]                     ld      (SCR_CURS_Y),A  ; and Y=0
03AF: 3E05     [62]                     ld      A,$05           ; light blue
03B1: 32EE81   [75]                     ld      (BKGNDCLR),A    ; set background/border color
03B4: 3E28     [82]                     ld      A,$28
03B6: 32DE81   [95]                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
03B9: 3E18     [102]                    ld      A,$18
03BB: 32DF81   [115]                    ld      (SCR_SIZE_H),A  ; screen height = 24 rows
03BE: 3E1E     [122]                    ld      A,$1E
03C0: 32A380   [135]                    ld      (COMMAN),A      ; width for commas (4 columns)
03C3: 110008   [145]                    ld      DE,$0800
03C6: ED53E281 [165]                    ld      (SCR_NAM_TB),DE ; set name table address
03CA: C39604   [175]                    jp      ENDVDPSET       ; execute the rest of the video setting
                        
                                        ; GRAPHICS 1 MODE (G1)
03CD:                   G1MD:           ; load pattern table
03CD: 68       [ 4]                     ld      L,B
03CE: 60       [ 8]                     ld      H,B             ; HL=first pattern cell $0000
03CF: CD380A   [25]                     call    LOADCHARSET     ; load patterns into VRAM
                                        ; set cursor & video overlay
03D2: AF       [29]                     xor     A               ; position cursor
03D3: 32E481   [42]                     ld      (SCR_CURS_X),A  ; at X=0
03D6: 32E581   [55]                     ld      (SCR_CURS_Y),A  ; and Y=0
03D9: 3E20     [62]                     ld      A,$20
03DB: 32DE81   [75]                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
03DE: 3E18     [82]                     ld      A,$18
03E0: 32DF81   [95]                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
03E3: 3E14     [102]                    ld      A,$14
03E5: 32A380   [115]                    ld      (COMMAN),A      ; width for commas (3 columns)
03E8: 110018   [125]                    ld      DE,$1800
03EB: ED53E281 [145]                    ld      (SCR_NAM_TB),DE ; set name table address
                                        ; load color table
03EF: 210020   [155]                    ld      HL,$2000        ; color table start: $2000
03F2: CDF905   [172]                    call    SETVDPADRS
03F5: 3E01     [179]                    ld      A,$01           ; foreground color...
03F7: 32ED81   [192]                    ld      (FRGNDCLR),A    ; ...set to black
03FA: 3E0F     [199]                    ld      A,$0F           ; background color...
03FC: 32EE81   [212]                    ld      (BKGNDCLR),A    ; ...set to white
03FF: 3E1F     [219]                    ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
0401: 0620     [226]                    ld      B,$20           ; 32 bytes of colors
0403: 0E30     [233]                    ld      C,VDP_DAT       ; VDP data mode
0405: ED79     [12]     LDCLRTBMD1:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
0407: 00       [16]                     nop
0408: 00       [20]                     nop
0409: 10FA     [28|33]                  djnz    LDCLRTBMD1      ; repeat for 32 bytes
040B: C39604   [38]                     jp      ENDVDPSET       ; execute the rest of the video setting
                        
                                        ; GRAPHICS 2 MODE (G2)
040E: AF       [ 4]     G2MD:           xor     A               ; position cursor
040F: 32E481   [17]                     ld      (SCR_CURS_X),A  ; at X=0
0412: 32E581   [30]                     ld      (SCR_CURS_Y),A  ; and Y=0
0415: 32DE81   [43]                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
0418: 3C       [47]                     inc     A               ; black on...
0419: 32ED81   [60]                     ld      (FRGNDCLR),A    ; ...foreground
041C: 3E0F     [67]                     ld      A,$0F           ; white on...
041E: 32EE81   [80]                     ld      (BKGNDCLR),A    ; ...background
0421: 3EC0     [87]                     ld      A,$C0
0423: 32DF81   [100]                    ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
0426: 110018   [110]                    ld      DE,$1800
0429: ED53E281 [130]                    ld      (SCR_NAM_TB),DE ; set name table address
042D: C39604   [140]                    jp      ENDVDPSET       ; execute the rest of the video setting
                        
                                        ; MULTICOLOR MODE (G3)
0430: AF       [ 4]     MCMD:           xor     A               ; position cursor
0431: 32E481   [17]                     ld      (SCR_CURS_X),A  ; at X=0
0434: 32E581   [30]                     ld      (SCR_CURS_Y),A  ; and Y=0
0437: 3E0F     [37]                     ld      A,$0F           ; white color for...
0439: 32EE81   [50]                     ld      (BKGNDCLR),A    ; ...background and...
043C: 32ED81   [63]                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
043F: 3E40     [70]                     ld      A,$40
0441: 32DE81   [83]                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
0444: 3E30     [90]                     ld      A,$30
0446: 32DF81   [103]                    ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
0449: 110008   [113]                    ld      DE,$0800
044C: ED53E281 [133]                    ld      (SCR_NAM_TB),DE ; set name table address
0450: C39604   [143]                    jp      ENDVDPSET       ; execute the rest of the video setting
                        
                                        ; EXTENDED GRAPHICS 2 (G4)
0453:                   EXG2MD:         ; load pattern table
0453: 60       [ 4]                     ld      H,B
0454: 68       [ 8]                     ld      L,B             ; HL=first pattern cell $0000
0455: CD380A   [25]                     call    LOADCHARSET     ; load patterns into VRAM
                                        ; set cursor & video overlay
0458: AF       [29]                     xor     A               ; position cursor
0459: 32E481   [42]                     ld      (SCR_CURS_X),A  ; at X=0
045C: 32E581   [55]                     ld      (SCR_CURS_Y),A  ; and Y=0
045F: 3E20     [62]                     ld      A,$20
0461: 32DE81   [75]                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
0464: 3E18     [82]                     ld      A,$18
0466: 32DF81   [95]                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
0469: 3E14     [102]                    ld      A,$14
046B: 32A380   [115]                    ld      (COMMAN),A      ; width for commas (3 columns)
046E: 110038   [125]                    ld      DE,$3800
0471: ED53E281 [145]                    ld      (SCR_NAM_TB),DE ; set name table address
                                         ; load color table
0475: 210020   [155]                    ld      HL,$2000        ; color table start: $2000
0478: CDF905   [172]                    call    SETVDPADRS
047B: 3E01     [179]                    ld      A,$01           ; foreground color is...
047D: 32ED81   [192]                    ld      (FRGNDCLR),A    ; ...set to black
0480: 3E0F     [199]                    ld      A,$0F           ; whitefor...
0482: 32EE81   [212]                    ld      (BKGNDCLR),A    ; ...background
0485: 3E1F     [219]                    ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
0487: 1608     [226]                    ld      D,$08           ; 8 pages of 
0489: 0600     [233]                    ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
048B: 0E30     [240]                    ld      C,VDP_DAT       ; VDP data mode
048D: ED79     [12]     LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
048F: 00       [16]                     nop
0490: 00       [20]                     nop
0491: 10FA     [28|33]                  djnz    LDCLRTBEX2      ; repeat for 256 bytes
0493: 15       [32]                     dec     D               ; did we fill up all the cells?
0494: 20F7     [39|44]                  jr      NZ,LDCLRTBEX2   ; no, repeat
                                        ; LAST VDP SETTINGS
0496: CD7008   [17]     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
0499: CD6705   [34]                     call    EMPTYVIDBUF     ; empty video buffer
049C: AF       [38]                     xor     A
049D: 32E881   [51]                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
04A0: C9       [61]                     ret                     ; return to caller
                        
                        
                        ; show initial logo
04A1: CDFD09   [17]     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
                                        ; set VDP for G2 mode
04A4: 0607     [24]                     ld      B,$07           ; set only the first 7 registers
04A6: 111000   [34]                     ld      DE,$0010        ; load settings for G2 mode
04A9: CD240A   [51]                     call    SET_GFX_MODE2   ; load register settings
04AC: 1601     [58]                     ld      D,$01           ; backdrop color set to black
04AE: ED51     [70]                     out     (C),D           ; send data to VDP
04B0: ED79     [82]                     out     (C),A           ; indicate the register to send data to
                                        ; set name table 
04B2: 210018   [92]                     ld      HL,$1800        ; name table address
04B5: CDE605   [109]                    call    SETNAMETABLE    ; set name table (load names into table)
04B8: CD1505   [126]                    call    ERASECLRTBL     ; erase color table (set foreground & background to black)
                                        ; set colors for logo
04BB: 210028   [136]                    ld      HL,$2800        ; 2nd page of color table
04BE: CDF905   [153]                    call    SETVDPADRS
04C1: 0605     [160]                    ld      B,5             ; 5 bands
04C3: 216205   [170]                    ld      HL,CLRTABLE
04C6: 0E30     [177]                    ld      C,VDP_DAT
04C8: 1E08     [184]                    ld      E,$08           ; 8 pixels each pattern        
04CA: 1640     [ 7]     RPT101:         ld      D,$40           ; 64 chars each band
04CC: 7E       [14]                     ld      A,(HL)
04CD: ED79     [12]     RPT102:         out     (C),A
04CF: 00       [16]                     nop
04D0: 1D       [20]                     dec     E
04D1: 20FA     [27|32]                  jr      NZ,RPT102
04D3: 1E08     [34]                     ld      E,$08
04D5: 15       [38]                     dec     D
04D6: 20F5     [45|50]                  jr      NZ,RPT102
04D8: 23       [51]                     inc     HL
04D9: 10EF     [59|64]                  djnz    RPT101
                                        ; set pattern table
04DB: 210008   [69]                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
04DE: 11810A   [79]                     ld      DE,LM80CLOGO    ; pointer to logo pattern
04E1: 0600     [86]                     ld      B,$00           ; 256 bytes, 8 rows
04E3: CD4105   [17]     RPT103:         call    LOADLOGOCHRS
04E6: 13       [23]                     inc     DE              ; next logo pattern
04E7: 10FA     [31|36]                  djnz    RPT103
04E9: 0620     [38]                     ld      B,$20           ; repeat for another 2 rows
04EB: CD4105   [17]     RPT104:         call    LOADLOGOCHRS
04EE: 13       [23]                     inc     DE              ; next logo pattern
04EF: 10FA     [31|36]                  djnz    RPT104
                                        ; show logo/message, play a beep and wait a while
04F1: 0602     [38]                     ld      B,$02
04F3: AF       [42]                     xor     A
04F4: 57       [46]                     ld      D,A             ; 256 times
04F5: 5F       [50]                     ld      E,A             ; x 256 times
04F6: 32EF81   [63]                     ld      (TMPBFR1),A     ; sound flag set to 0
04F9: 00       [ 4]     DEC_D:          nop                     ; does nothing...
04FA: 00       [ 8]                     nop
04FB: 00       [12]                     nop
04FC: 00       [16]                     nop
04FD: 00       [20]                     nop
04FE: 00       [24]                     nop
04FF: 1D       [28]                     dec     E               ; decrement E
0500: 20F7     [35|40]                  jr      NZ,DEC_D        ; repeat until $00
0502: 7A       [39]                     ld      A,D
0503: FE40     [46]                     cp      $40             ; ...equal to 64
0505: CC2D05   [56|63]                  call    Z,SETBEEP       ; if yes, start sound
0508: 15       [60]                     dec     D
0509: 20EE     [67|72]                  jr      NZ,DEC_D        ; repeat
050B: 3AEF81   [80]                     ld      A,(TMPBFR1)
050E: FE02     [87]                     cp      $02
0510: C43905   [97|104]                 call    NZ,BEEPOFF
0513: 10E4     [105|110]                djnz    DEC_D
0515:                   ERASECLRTBL:    ; erase color table
0515: 3E11     [ 7]                     ld      A,$11           ; foreground and background set to black
0517: 160A     [14]                     ld      D,$0A           ; 10 pages
0519: 0600     [21]                     ld      B,$00           ; 256 color cells per page
051B: 210028   [31]                     ld      HL,$2800        ; first cell of 2nd color table
051E: CDF905   [48]                     call    SETVDPADRS      ; send address
0521: 0E30     [55]                     ld      C,VDP_DAT       ; VDP address for passing data
0523: ED79     [12]     RPT100:         out     (C),A           ; send data
0525: 00       [16]                     nop
0526: 00       [20]                     nop                     ; little delay
0527: 10FA     [28|33]                  djnz    RPT100          ; repeat for entire page
0529: 15       [32]                     dec     D
052A: 20F7     [39|44]                  jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
052C: C9       [49]                     ret                     ; return to caller
                        
                        ; play a beep
052D: 3AEF81   [13]     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag?
0530: B7       [17]                     or      A               ; is it 0?
0531: C0       [22|28]                  ret     NZ              ; no, exit
0532: 3C       [26]                     inc     A               ; flag to 1
0533: 32EF81   [39]                     ld      (TMPBFR1),A     ; set sound
0536: C3EF0B   [49]                     jp      WLCMBEEP        ; play a beep & return
                        
                        ; beep off
0539: 3E02     [ 7]     BEEPOFF:        ld      A,$02           ; flag for sound off
053B: 32EF81   [20]                     ld      (TMPBFR1),A     ; set flag
053E: C3F50B   [30]                     jp      NOBEEP          ; stop beep and return
                        
                        
                        ; used to load the chars that will compose the logo of the splash screen
0541: 1A       [ 7]     LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
0542: 87       [11]                     add     A,A
0543: 87       [15]                     add     A,A
0544: 87       [19]                     add     A,A             ; multiply times 8 to get the offset
0545: C5       [30]                     push    BC
0546: D5       [41]                     push    DE              ; store BC and DE
0547: E5       [52]                     push    HL              ; store VRAM address to write to
0548: 21284E   [62]                     ld      HL,LOGOFONT     ; start of logo font data
054B: 5F       [66]                     ld      E,A
054C: 1600     [73]                     ld      D,$00           ; put offset (A) into DE
054E: 19       [84]                     add     HL,DE           ; get address of pattern data
054F: EB       [88]                     ex      DE,HL           ; move address into DE
0550: E1       [98]                     pop     HL              ; retrieve VRAM address
0551: 0608     [105]                    ld      B,$08           ; 8 bytes per pattern
0553: CDF905   [122]                    call    SETVDPADRS      ; set VDP address
0556: 0E30     [129]                    ld      C,VDP_DAT
0558: 1A       [ 7]     SNDLOGPT:       ld      A,(DE)          ; load data from RAM
0559: ED79     [19]                     out     (C),A           ; and send to VRAM
055B: 13       [25]                     inc     DE              ; next byte into RAM
055C: 23       [31]                     inc     HL              ; next byte into VRAM (used in future iterations)
055D: 10F9     [39|44]                  djnz    SNDLOGPT        ; repeat 8 times
055F: D1       [49]                     pop     DE
0560: C1       [59]                     pop     BC              ; retrieve BC & DE
0561: C9       [69]                     ret                     ; return to caller
                        
0562:                   CLRTABLE:       equ $
0562: 181B1314                          defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
0566: 1D                
                                        
                        ; empty video buffer
0567: 3AE081   [13]     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
056A: FE02     [20]                     cp      $02             ; is it G2 mode?
056C: CA9005   [30|30]                  jp      Z,EMPTYG2       ; yes, jump over
056F: FE03     [37]                     cp      $03             ; is it MC mode?
0571: CAC105   [47|47]                  jp      Z,EMPTYMC       ; yes, jump over
0574: 3ADF81   [60]                     ld      A,(SCR_SIZE_H)  ; load height of screen
0577: 47       [64]                     ld      B,A             ; move rows into B
0578: AF       [68]                     xor     A               ; filling char is $00
0579: 2AE281   [84]                     ld      HL,(SCR_NAM_TB) ; load the name table address
057C: CDF905   [101]                    call    SETVDPADRS      ; send address to VDP
057F: 0E30     [108]                    ld      C,VDP_DAT       ; VDP address for passing data
0581: 5F       [ 4]     LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
0582: 3ADE81   [17]                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
0585: 57       [21]                     ld      D,A             ; move A into D
0586: 7B       [25]                     ld      A,E             ; recover filling char
0587: ED79     [12]     RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
0589: 00       [16]                     nop
058A: 15       [20]                     dec     D               ; decr. D
058B: 20FA     [27|32]                  jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
058D: 10F2     [35|40]                  djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
058F: C9       [45]                     ret                     ; return to caller
0590: 2AE281   [16]     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
0593: CDE605   [33]                     call    SETNAMETABLE    ; set name table
0596: 210000   [43]                     ld      HL,$0000        ; set pattern table
0599: CDF905   [60]                     call    SETVDPADRS      ; send address to VDP
059C: AF       [64]                     xor     A               ; empty pattern
059D: 1618     [71]                     ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
059F: 47       [75]                     ld      B,A             ; 256 bytes for page
05A0: 0E30     [82]                     ld      C,VDP_DAT       ; VDP data mode
05A2: ED79     [12]     CLRG2PTNTBL:    out     (C),A           ; clear pattern
05A4: 00       [16]                     nop                     ; little delay
05A5: 00       [20]                     nop
05A6: 10FA     [28|33]                  djnz    CLRG2PTNTBL     ; repeat for 1 page
05A8: 15       [32]                     dec     D               ; next page
05A9: 20F7     [39|44]                  jr      NZ,CLRG2PTNTBL  ; repeat
05AB: 210020   [49]                     ld      HL,$2000        ; load the color table address
05AE: CDF905   [66]                     call    SETVDPADRS      ; send address to VDP
05B1: 3AED81   [79]                     ld      A,(FRGNDCLR)    ; load foreground
05B4: 87       [83]                     add     A,A
05B5: 87       [87]                     add     A,A
05B6: 87       [91]                     add     A,A
05B7: 87       [95]                     add     A,A             ; move to high nibble
05B8: 57       [99]                     ld      D,A             ; store into D
05B9: 3AEE81   [112]                    ld      A,(BKGNDCLR)    ; load background color
05BC: B2       [116]                    or      D               ; combine with background color
05BD: 1618     [123]                    ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
05BF: 1817     [135]                    jr      STARTEMPTY
05C1: 210008   [10]     EMPTYMC:        ld      HL,$0800        ; MC name table
05C4: CDE605   [27]                     call    SETNAMETABLE    ; set name table
05C7: 210000   [37]                     ld      HL,$0000        ; color table address
05CA: CDF905   [54]                     call    SETVDPADRS      ; send address to VDP
05CD: 3AEE81   [67]                     ld      A,(BKGNDCLR)    ; load background
05D0: 57       [71]                     ld      D,A             ; store into D
05D1: 87       [75]                     add     A,A
05D2: 87       [79]                     add     A,A
05D3: 87       [83]                     add     A,A
05D4: 87       [87]                     add     A,A             ; move to high nibble
05D5: B2       [91]                     or      D               ; set background color for high and low nibble
05D6: 1608     [98]                     ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
05D8: 0E30     [ 7]     STARTEMPTY:     ld      C,VDP_DAT       ; VDP address for passing data
05DA: 0600     [14]                     ld      B,$00           ; 256 bytes each page ($00=256)
05DC: ED79     [12]     SNDCLRSET:      out     (C),A           ; send color setting
05DE: 00       [16]                     nop                     ; wait a while
05DF: 00       [20]                     nop
05E0: 10FA     [28|33]                  djnz    SNDCLRSET       ; repeat for 1 page
05E2: 15       [32]                     dec     D               ; have we filled all the pages?
05E3: 20F7     [39|44]                  jr      NZ,SNDCLRSET    ; no, repeat
05E5: C9       [49]                     ret                     ; return to caller
                        
                        ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
05E6: CDF905   [17]     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
05E9: 0E30     [24]                     ld      C,VDP_DAT       ; VDP address for passing data
05EB: 1603     [31]                     ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
05ED: AF       [35]                     xor     A               ; starting char name #0 (chars go from 0 to 255)
05EE: 47       [39]                     ld      B,A             ; reset B
05EF: ED79     [12]     RPTFLL1:        out     (C),A           ; send name to VRAM
05F1: 00       [16]                     nop
05F2: 3C       [20]                     inc     A               ; increment # of name
05F3: 10FA     [28|33]                  djnz    RPTFLL1         ; repeat for 256 cells (1 page)
05F5: 15       [32]                     dec     D               ; did we fill all the pages?
05F6: 20F7     [39|44]                  jr      NZ,RPTFLL1      ; no, continue
05F8: C9       [49]                     ret                     ; return to caller
                        
                        ; set an address into VRAM: address is in HL
05F9: 0E32     [ 7]     SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
05FB: CBF4     [15]                     set     6,H             ; set bit #6 of address, to write to VRAM
05FD: ED69     [27]                     out     (C),L           ; send low and...
05FF: ED61     [39]                     out     (C),H           ; ...high byte of the first cell
0601: C9       [49]                     ret                     ; return to caller
                        
                        ; clear the video buffer and position the cursor at 0,0
0602: CD6705   [17]     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
0605: AF       [21]                     xor     A               ; reset A
0606: 32E481   [34]                     ld      (SCR_CURS_X),A  ; cursor X to 0
0609: 32E581   [47]                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
060C: C35506   [57]                     jp      POS_CURSOR      ; position cursor & return to caller
                        
                        ; HOME: position the cursor at coords. 0,0 
060F: AF       [ 4]     ATHOME:         xor     A               ; position cursor at 0,0 by storing...
0610: 32E781   [17]                     ld      (SCR_CUR_NY),A  ; ...new Y...
0613: 32E681   [30]                     ld      (SCR_CUR_NX),A  ; ...and new X
0616: C35F06   [40]                     jp      MOVCRS          ; move cursor to new location & return to caller
                        
                        ; load the char or byte at the VRAM position set by HL
                        ; value is returned into A
0619: C5       [11]     READ_VIDEO_LOC: push    BC              ; store BC
061A: 0E32     [18]                     ld      C,VDP_SET       ; VDP setting mode
061C: 44       [22]                     ld      B,H
061D: CBB8     [30]                     res     7,B
061F: CBB0     [38]                     res     6,B
0621: ED69     [50]                     out     (C),L           ; low byte then...
0623: ED41     [62]                     out     (C),B           ; high byte
0625: 0E30     [69]                     ld      C,VDP_DAT       ; VDP data mode
0627: 00       [73]                     nop                     ; wait...
0628: 00       [77]                     nop                     ; ...a while
0629: 00       [81]                     nop
062A: ED78     [93]                     in      A,(C)           ; read byte at current VRAM location
062C: C1       [103]                    pop     BC              ; restore BC
062D: C9       [113]                    ret                     ; return to caller
                        
                        ; write a byte at the VRAM position pointed by HL
                        ; value is in A
062E: C5       [11]     WRITE_VIDEO_LOC:push    BC              ; store BC
062F: 0E32     [18]                     ld      C,VDP_SET       ; VDP setting mode
0631: 44       [22]                     ld      B,H             ; copy H into B
0632: CBB8     [30]                     res     7,B
0634: CBF0     [38]                     set     6,B             ; write to VRAM
0636: ED69     [50]                     out     (C),L           ; low byte then...
0638: ED41     [62]                     out     (C),B           ; high byte of VRAM address
063A: 0E30     [69]                     ld      C,VDP_DAT       ; VDP data mode
063C: 00       [73]                     nop                     ; wait...
063D: 00       [77]                     nop                     ; ...a while
063E: 00       [81]                     nop
063F: ED79     [93]                     out     (C),A           ; write byte into VRAM
0641: C1       [103]                    pop     BC              ; restore BC
0642: C9       [113]                    ret                     ; return to caller
                        
                        ; write a value into a specific VDP register
                        ; value is in E, register is in A
0643: C5       [11]     WRITE_VREG:     push    BC              ; store BC
0644: C680     [18]                     add     A,$80           ; set VDP to write to registers
0646: 0E32     [25]                     ld      C,VDP_SET       ; VDP setting mode
0648: ED59     [37]                     out     (C),E           ; send data to VDP
064A: ED79     [49]                     out     (C),A           ; select the destination register
064C: C1       [59]                     pop     BC              ; restore BC
064D: C9       [69]                     ret                     ; return to caller
                        
                        ; read VDP status register and return value into A
064E: C5       [11]     READ_VSTAT:     push    BC              ; store BC
064F: 0E32     [18]                     ld      C,VDP_SET       ; VDP register access
0651: ED78     [30]                     in      A,(C)           ; read status register
0653: C1       [40]                     pop     BC              ; restore BC
0654: C9       [50]                     ret                     ; return to caller
                        
                        ; position the cursor at the current coordinates, preserving underlying char
0655: CD9306   [17]     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
0658: CD1906   [34]                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
065B: 32E881   [47]                     ld      (SCR_ORG_CHR),A ; store the current char
065E: C9       [57]                     ret
                        
                        ; move cursor to new X,Y coordinates
065F: CD8A06   [17]     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
0662: CD7506   [34]                     call    NEWCRSRCOORD    ; set new cursor's coordinates
0665: CD5506   [17]     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
0668: 3AEF81   [30]                     ld      A,(TMPBFR1)     ; load status of cursor flashing
066B: E620     [37]                     and     $20             ; check cursor state
066D: 32EA81   [50]                     ld      (LSTCSRSTA),A   ; store the last cursor state
0670: 3EFF     [57]                     ld      A,$FF           ; set cursor visible after moved it
0672: C32E06   [67]                     jp      WRITE_VIDEO_LOC ; write into video cell
                        
                        
                        ; set new cursor's coordinates:
0675: 3AE681   [13]     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
0678: 32E481   [26]                     ld      (SCR_CURS_X),A  ; write new X
067B: 3AE781   [39]                     ld      A,(SCR_CUR_NY)  ; load new Y
067E: 32E581   [52]                     ld      (SCR_CURS_Y),A  ; write new Y
0681: 3EFF     [59]                     ld      A,$FF           ; delete new values
0683: 32E681   [72]                     ld      (SCR_CUR_NX),A  ; of X
0686: 32E781   [85]                     ld      (SCR_CUR_NY),A  ; and Y
0689: C9       [95]                     ret
                        
                        ; recover char under the cursor and prints it onto the screen
068A: CD9306   [17]     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
068D: 3AE881   [30]                     ld      A,(SCR_ORG_CHR) ; recover old char
0690: C32E06   [40]                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
                        
                        ; retrieve cursor position from either current coordinates or next place
                        ; return address position into HL
0693: 3AE581   [13]     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
0696: 6F       [17]                     ld      L,A             ; move it into reg.L
0697: AF       [21]                     xor     A               ; reset A
0698: 67       [25]                     ld      H,A             ; reset H
0699: 47       [29]                     ld      B,A             ; reset B
069A: 29       [40]                     add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
069B: 11CD09   [50]                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
069E: 3ADE81   [63]                     ld      A,(SCR_SIZE_W)  ; load screen width
06A1: FE28     [70]                     cp      $28             ; is it 40 cols?
06A3: 2803     [77|82]                  jr      Z,CONT_POS_CURS ; yes, jump over
06A5: 119D09   [87]                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
06A8: 19       [11]     CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
06A9: 5E23562B [37]                     ld      DE,(HL)         ; load starting address of the required row into DE
06AD: 2AE281   [53]                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
06B0: 19       [64]                     add     HL,DE           ; starting address of the current row into name table
06B1: 3AE481   [77]                     ld      A,(SCR_CURS_X)  ; load cursor X
06B4: 4F       [81]                     ld      C,A             ; transfer A into C
06B5: 09       [92]                     add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
06B6: C9       [102]                    ret
                        
                        ; find X,Y coordinates of a screen address pointed in VRAM by HL
                        ; return them into L,A for X,Y
06B7: D5       [11]     HL2XY:          push    DE              ; store DE
06B8: ED5BE281 [31]                     ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
06BC: AF       [35]                     xor     A               ; clear Carry
06BD: ED52     [50]                     sbc     HL,DE           ; find position relative to screen (from 0,0)
06BF: D1       [60]                     pop     DE
06C0: 3ADE81   [73]                     ld      A,(SCR_SIZE_W)  ; load screen width
06C3: 4F       [77]                     ld      C,A             ; move it into C
06C4: CD043E   [94]                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
06C7: C9       [104]                    ret                     ; return to caller
                        
                        ;-------------------------------------------------------------------------------
                        ; send current char to video buffer
06C8: F5       [11]     CHAR2VID:       push    AF              ; store AF
06C9: C5       [22]                     push    BC              ; store BC
06CA: D5       [33]                     push    DE              ; store DE
06CB: E5       [44]                     push    HL              ; store HL
06CC: 3AE981   [57]                     ld      A,(CRSR_STATE)  ; store cursor state...
06CF: F5       [68]                     push    AF              ; into stack
06D0: CD7008   [85]                     call    CURSOR_OFF      ; cursor off
06D3: 3AEC81   [98]                     ld      A,(CHR4VID)     ; recover char
06D6: FE19     [105]                    cp      HOME            ; is it HOME char ($19)?
06D8: 2006     [112|117]                jr      NZ,CHKCS        ; no, check over
06DA: CD0F06   [129]                    call    ATHOME          ; yes, move the cursor to 0,0
06DD: C35B07   [139]                    jp      EXITCHAR2VID    ; exit
06E0: FE0C     [ 7]     CHKCS:          cp      CS              ; is it the CLEAR char ($0C)?
06E2: 2005     [14|19]                  jr      NZ,CHKCR        ; no, check over
06E4: CD0206   [31]                     call    CLEARVIDBUF     ; yes, clear video buffer and position cursor at 0,0
06E7: 1872     [43]                     jr      EXITCHAR2VID    ; exit
06E9: FE0D     [ 7]     CHKCR:          cp      CR              ; is it a carriage return ($0D)?
06EB: 2005     [14|19]                  jr      NZ,CHKBKSP      ; no, jump over
06ED: CDF208   [31]                     call    CRGRETURN       ; yes, go to the beginning of the next line
06F0: 1869     [43]                     jr      EXITCHAR2VID    ; exit
06F2: FE08     [ 7]     CHKBKSP:        cp      BKSP            ; is it the backspace ($08)?
06F4: 2005     [14|19]                  jr      NZ,CHKCRSLFT    ; no, jump over
06F6: CD8D07   [31]                     call    BACKSPACE       ; move cursor left 1 position
06F9: 1860     [43]                     jr      EXITCHAR2VID    ; exit
06FB: FE1C     [ 7]     CHKCRSLFT:      cp      CRSLFT          ; is it cursor left?
06FD: 2005     [14|19]                  jr      NZ,CHKCRSUP     ; no, jump over
06FF: CDA007   [31]                     call    CURSORLEFT      ; move cursor left...
0702: 1857     [43]                     jr      EXITCHAR2VID    ; ...and exit
0704: FE1E     [ 7]     CHKCRSUP:       cp      CRSUP           ; is it cursor up?
0706: 2005     [14|19]                  jr      NZ,CHKCRSRGT    ; no, jump over
0708: CDEC07   [31]                     call    CURSORUP        ; move cursor up...
070B: 184E     [43]                     jr      EXITCHAR2VID    ; ...and exit
070D: FE1D     [ 7]     CHKCRSRGT:      cp      CRSRGT          ; is it cursor right?
070F: 2005     [14|19]                  jr      NZ,CHKCRSDWN    ; no, jump over
0711: CD0508   [31]                     call    CURSORRIGHT     ; move cursor right...
0714: 1845     [43]                     jr      EXITCHAR2VID    ; ...and exit
0716: FE1F     [ 7]     CHKCRSDWN:      cp      CRSDN           ; is it cursor down?
0718: 2005     [14|19]                  jr      NZ,CHKLF        ; no, jump over
071A: CD3A08   [31]                     call    CURSORDOWN      ; move cursor up...
071D: 183C     [43]                     jr      EXITCHAR2VID    ; ...and exit
071F: FE0A     [ 7]     CHKLF:          cp      LF              ; is it a line feed ($0A)?
0721: 2838     [14|19]                  jr      Z,EXITCHAR2VID  ; CURRENTLY WE DON'T PRINT LF, WE JUST USE CR TO SUBSTITUTE CR+LF COMBINATION
0723: CD9306   [31]                     call    LOAD_CRSR_POS   ; recover position of cursor
0726: 3AEC81   [44]                     ld      A,(CHR4VID)     ; recover char to print
0729: CD2E06   [61]                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
072C: 3AE581   [74]                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
072F: 5F       [78]                     ld      E,A             ; store cursor Y into E
0730: 3AE481   [91]                     ld      A,(SCR_CURS_X)  ; load cursor X
0733: 3C       [95]                     inc     A               ; move 1 step to right
0734: 21DE81   [105]                    ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
0737: BE       [112]                    cp      (HL)            ; have we reached the most right position?
0738: 200F     [119|124]                jr      NZ,SETCSRCOORDS ; no, go over
073A: 1C       [123]                    inc     E               ; yes, increment cursor Y (go to next line)
073B: 7B       [127]                    ld      A,E             ; move cursor Y into A
073C: 21DF81   [137]                    ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
073F: BE       [144]                    cp      (HL)            ; have we reached the bottom of the screen?
0740: 2006     [151|156]                jr      NZ,SETCRSRY     ; no, jump over
0742: D5       [162]                    push    DE
0743: CD7708   [179]                    call    SCROLLUP        ; scroll screen up
0746: D1       [189]                    pop     DE
0747: 1D       [193]                    dec     E               ; decrement 1 row, to set cursor Y on the last line
0748: AF       [ 4]     SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
0749: 32E481   [13]     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
074C: 7B       [17]                     ld      A,E             ; recover Y
074D: 32E581   [30]                     ld      (SCR_CURS_Y),A  ; store current cursor Y
0750: CD5506   [47]                     call    POS_CURSOR      ; position cursor into new location
0753: 3AEF81   [60]                     ld      A,(TMPBFR1)     ; load status of cursor flashing
0756: E620     [67]                     and     $20             ; check cursor state
0758: 32EA81   [80]                     ld      (LSTCSRSTA),A   ; store the last cursor state
075B: AF       [ 4]     EXITCHAR2VID:   xor     A               ; reset char
075C: 32EC81   [17]                     ld      (CHR4VID),A     ; to be sent to screen
075F: F1       [27]                     pop     AF              ; recover cursor state
0760: A7       [31]                     and     A               ; was it off (A=0)?
0761: C45A08   [41|48]                  call    NZ,CURSOR_ON    ; no, set cursor on
0764: E1       [51]                     pop     HL              ; restore HL
0765: D1       [61]                     pop     DE              ; restore DE
0766: C1       [71]                     pop     BC              ; restore BC
0767: F1       [81]                     pop     AF              ; restore AF
0768: C9       [91]                     ret                     ; return to caller
                        
                        ; flash the cursor at the current position
                        ; (this sub-routine is called by CH3 timer ISR)
0769: 3AE981   [13]     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
076C: A7       [17]                     and     A               ; cursor off (A=0)?
076D: C8       [22|28]                  ret     Z               ; yes, return
076E: 3ACE81   [35]                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
0771: E620     [42]                     and     $20             ; check if it's time to flash the cursor (check bit #6)
0773: 21EA81   [52]                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
0776: 46       [59]                     ld      B,(HL)          ; load last state
0777: B8       [63]                     cp      B               ; compare current state with last state
0778: C8       [68|74]                  ret     Z               ; same state, no change required - exit
0779: 77       [75]                     ld      (HL),A          ; save new state
077A: F5       [86]                     push    AF              ; store A (keep state for later use)
077B: CD9306   [103]                    call    LOAD_CRSR_POS   ; load current cursor position into HL
077E: F1       [113]                    pop     AF              ; recover current state
077F: 06FF     [120]                    ld      B,$FF           ; cursor char
0781: FE20     [127]                    cp      $20             ; is the cursor on video (A == $20)?
0783: 2804     [134|139]                jr      Z,PUTCRSCHR     ; yes, jump over
0785: 3AE881   [147]                    ld      A,(SCR_ORG_CHR) ; no, load the original char
0788: 47       [151]                    ld      B,A             ; move char into B
0789: 78       [ 4]     PUTCRSCHR:      ld      A,B             ; recover char from B
078A: C32E06   [14]                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
                        
                        
                        ; delete the char at the left of the cursor
078D: CDC907   [17]     BACKSPACE:      call    MVCRS2LFT       ; prepare to move cursor to left
0790: CD8A06   [34]                     call    RSTCHRCRS       ; restore char under the cursor
0793: CD7506   [51]                     call    NEWCRSRCOORD    ; set new cursor's coordinates
0796: CD9306   [68]                     call    LOAD_CRSR_POS   ; find address of new video cell
0799: AF       [72]                     xor     A               ; null char
079A: CD2E06   [89]                     call    WRITE_VIDEO_LOC ; write into video cell
079D: C36506   [99]                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
                        
                        
                        ; move cursor to left
07A0: F5       [11]     CURSORLEFT:     push    AF              ; store A
07A1: 3AE481   [24]                     ld      A,(SCR_CURS_X)  ; load cursor X into A
07A4: A7       [28]                     and     A               ; is it at the most left of the screen (X=0)?
07A5: 280C     [35|40]                  jr      Z,CHCKYPOS      ; yes, check Y position
07A7: 3D       [39]                     dec     A               ; no, decrement X
07A8: 32E681   [52]                     ld      (SCR_CUR_NX),A  ; store new X
07AB: 3AE581   [65]                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
07AE: 32E781   [78]                     ld      (SCR_CUR_NY),A  ; no move over Y axis
07B1: 1811     [90]                     jr      CONTCRSLFT      ; go on moving cursor
07B3: 3AE581   [13]     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
07B6: A7       [17]                     and     A               ; is it at the most top of the screen (Y=0)?
07B7: 280E     [24|29]                  jr      Z,EXITCURSORLEFT; yes, exit doing nothing
07B9: 3D       [28]                     dec     A               ; no, decrement Y
07BA: 32E781   [41]                     ld      (SCR_CUR_NY),A  ; store new Y
07BD: 3ADE81   [54]                     ld      A,(SCR_SIZE_W)  ; load current screen width
07C0: 3D       [58]                     dec     A               ; cursor to the most right position (width-0)
07C1: 32E681   [71]                     ld      (SCR_CUR_NX),A  ; set new cursor X
07C4: CD5F06   [17]     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
07C7: F1       [10]     EXITCURSORLEFT: pop     AF              ; restore A
07C8: C9       [20]                     ret                     ; return to caller
                        
                        ; move cursor 1 position to the left
07C9: 3AE481   [13]     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
07CC: A7       [17]                     and     A               ; is it at the most left of the screen (X=0)?
07CD: 280B     [24|29]                  jr      Z,CHKYPOS       ; yes, check Y position
07CF: 3D       [28]                     dec     A               ; no, decrement X
07D0: 32E681   [41]                     ld      (SCR_CUR_NX),A  ; store new X
07D3: 3AE581   [54]                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
07D6: 32E781   [67]                     ld      (SCR_CUR_NY),A  ; no move over Y axis
07D9: C9       [77]                     ret                     ; go on moving cursor
07DA: 3AE581   [13]     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
07DD: A7       [17]                     and     A               ; is it at the most top of the screen (Y=0)?
07DE: 28E7     [24|29]                  jr      Z,EXITCURSORLEFT; yes, exit doing nothing
07E0: 3D       [28]                     dec     A               ; no, decrement Y
07E1: 32E781   [41]                     ld      (SCR_CUR_NY),A  ; store new Y
07E4: 3ADE81   [54]                     ld      A,(SCR_SIZE_W)  ; load current screen width
07E7: 3D       [58]                     dec     A               ; cursor to the most right position (width-1)
07E8: 32E681   [71]                     ld      (SCR_CUR_NX),A  ; set new cursor X
07EB: C9       [81]                     ret                     ; return to caller
                        
                        ; move cursor up
07EC: F5       [11]     CURSORUP:       push    AF              ; store A
07ED: 3AE581   [24]                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
07F0: A7       [28]                     and     A               ; is it at the most top of the screen (Y=0)?
07F1: 2810     [35|40]                  jr      Z,EXITCURSORUP  ; yes, exit doing nothing
07F3: 3D       [39]                     dec     A               ; no, decrement Y
07F4: 32E781   [52]                     ld      (SCR_CUR_NY),A  ; store new Y
07F7: 3AE481   [65]                     ld      A,(SCR_CURS_X)  ; load current cursor X
07FA: 32E681   [78]                     ld      (SCR_CUR_NX),A  ; set new cursor X
07FD: CD8A06   [95]                     call    RSTCHRCRS       ; restore char under the cursor and print it
0800: CD5F06   [112]                    call    MOVCRS          ; move cursor into new position
0803: F1       [10]     EXITCURSORUP:   pop     AF              ; restore A
0804: C9       [20]                     ret                     ; return to caller
                        
                        
                        ; move cursor to right
0805: F5       [11]     CURSORRIGHT:    push    AF              ; store A
0806: C5       [22]                     push    BC              ; store B
0807: 3ADE81   [35]                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
080A: 3D       [39]                     dec     A               ; decrement it (most right can only be 31 or 39)
080B: 47       [43]                     ld      B,A             ; move A into B
080C: 3AE481   [56]                     ld      A,(SCR_CURS_X)  ; load cursor X into A    
080F: B8       [60]                     cp      B               ; is cursor at the most right position on the screen?
0810: 300C     [67|72]                  jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
0812: 3C       [71]                     inc     A               ; no, so increment X
0813: 32E681   [84]                     ld      (SCR_CUR_NX),A  ; store new X
0816: 3AE581   [97]                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
0819: 32E781   [110]                    ld      (SCR_CUR_NY),A  ; no move over Y axis
081C: 1813     [122]                    jr      CONTCRSRGT      ; go on moving cursor
081E: 3ADF81   [13]     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
0821: 3D       [17]                     dec     A               ; decrement it (last row can only be 23)
0822: 47       [21]                     ld      B,A             ; move bottom into B
0823: 3AE581   [34]                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
0826: B8       [38]                     cp      B               ; is the cursor at the bottom of the screen?
0827: 300E     [45|50]                  jr      NC,EXITCURSORRGHT; yes, exit doing nothing
0829: 3C       [49]                     inc     A               ; no, increment Y
082A: 32E781   [62]                     ld      (SCR_CUR_NY),A  ; store new Y
082D: AF       [66]                     xor     A               ; move cursor to top left
082E: 32E681   [79]                     ld      (SCR_CUR_NX),A  ; store new X
0831: CD8A06   [17]     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
0834: CD5F06   [34]                     call    MOVCRS          ; move cursor into new position
0837: C1       [10]     EXITCURSORRGHT: pop     BC              ; retrieve BC
0838: F1       [20]                     pop     AF              ; restore A
0839: C9       [30]                     ret                     ; return to caller
                        
                        
                        ; move cursor down
083A: F5       [11]     CURSORDOWN:     push    AF              ; store A
083B: C5       [22]                     push    BC              ; store B
083C: 3ADF81   [35]                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
083F: 3D       [39]                     dec     A               ; decrement it (positions can only vary between 0 and 23)
0840: 47       [43]                     ld      B,A             ; move X into B
0841: 3AE581   [56]                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A             
0844: B8       [60]                     cp      B               ; is current cursor position < 23?
0845: 3010     [67|72]                  jr      NC,EXITCURSORDOWN; no, exit doing nothing
0847: 3C       [71]                     inc     A               ; yes, increment Y
0848: 32E781   [84]                     ld      (SCR_CUR_NY),A  ; store new Y
084B: 3AE481   [97]                     ld      A,(SCR_CURS_X)  ; load current cursor X
084E: 32E681   [110]                    ld      (SCR_CUR_NX),A  ; set new cursor X
0851: CD8A06   [127]                    call    RSTCHRCRS       ; restore char under the cursor and print it
0854: CD5F06   [144]                    call    MOVCRS          ; move cursor into new position
0857: C1       [10]     EXITCURSORDOWN: pop     BC              ; retrieve BC
0858: F1       [20]                     pop     AF              ; retrieve A
0859: C9       [30]                     ret                     ; return to caller
                        
                        
                        ; set cursor on (visible on screen)
085A: F5       [11]     CURSOR_ON:      push    AF              ; store AF
085B: 3AE981   [24]                     ld      A,(CRSR_STATE)  ; load cursor state
085E: FE01     [31]                     cp      $01             ; is it on?
0860: 280C     [38|43]                  jr      Z,EXITCURSOR_ON ; yes, so nothing to do
0862: 3ADF81   [51]                     ld      A,(SCR_SIZE_H)  ; check the video mode
0865: FE30     [58]                     cp      $30             ; graphics 2 or 3 (if value>=48)?
0867: 3005     [65|70]                  jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
0869: 3E01     [72]                     ld      A,$01           ; cursor state ON
086B: 32E981   [85]                     ld      (CRSR_STATE),A  ; set state
086E: F1       [10]     EXITCURSOR_ON:  pop     AF              ; restore AF
086F: C9       [20]                     ret                     ; return to caller
                        
                        ; set cursor off (invisible on screen)
0870: F5       [11]     CURSOR_OFF:     push    AF              ; store AF
0871: AF       [15]                     xor     A               ; cursor state OFF
0872: 32E981   [28]                     ld      (CRSR_STATE),A  ; set state
0875: F1       [38]                     pop     AF              ; restore AF
0876: C9       [48]                     ret
                        
                        ; scroll the screen 1 row up
0877: AF       [ 4]     SCROLLUP:       xor     A
0878: 32EB81   [17]                     ld      (PRNTVIDEO),A
087B: 2AE281   [33]                     ld      HL,(SCR_NAM_TB) ; start address of the name table
087E: 221F82   [49]                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
0881: 3ADE81   [62]                     ld      A,(SCR_SIZE_W)  ; load the screen width
0884: 5F       [66]                     ld      E,A             ; move width into E
0885: 1600     [73]                     ld      D,$00           ; reset D
0887: 19       [84]                     add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
0888: 222182   [100]                    ld      (VIDTMP2),HL    ; store address of source row
088B: 3ADF81   [113]                    ld      A,(SCR_SIZE_H)  ; load the screen height
088E: 3D       [117]                    dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
088F: 47       [121]                    ld      B,A             ; move # of rows into B
0890: 3ADE81   [13]     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
0893: 5F       [17]                     ld      E,A             ; move width into E
0894: 2A2182   [33]                     ld      HL,(VIDTMP2)    ; load source address
0897: 0E32     [40]                     ld      C,VDP_SET       ; VDP setting mode
0899: ED69     [52]                     out     (C),L           ; low byte of source
089B: ED61     [64]                     out     (C),H           ; high byte of source
089D: 21F781   [74]                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
08A0: 0E30     [81]                     ld      C,VDP_DAT       ; VDP data mode
08A2: ED78     [12]     LOADNEXTCOL:    in      A,(C)           ; load char
08A4: 77       [19]                     ld      (HL),A          ; store char
08A5: 23       [25]                     inc     HL              ; next cell of the buffer
08A6: 1D       [29]                     dec     E               ; count the chars to be read
08A7: 20F9     [36|41]                  jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
08A9: 3ADE81   [49]                     ld      A,(SCR_SIZE_W)  ; reload the screen width
08AC: 5F       [53]                     ld      E,A             ; move # of rows into E
08AD: 1600     [60]                     ld      D,$00           ; reset D
08AF: 2A1F82   [76]                     ld      HL,(VIDTMP1)    ; load address of destination row
08B2: E5       [87]                     push    HL              ; store HL
08B3: 2A2182   [103]                    ld      HL,(VIDTMP2)    ; current source will be..
08B6: 221F82   [119]                    ld      (VIDTMP1),HL    ; ..new destination
08B9: 19       [130]                    add     HL,DE           ; address of new
08BA: 222182   [146]                    ld      (VIDTMP2),HL    ; source row
08BD: E1       [156]                    pop     HL              ; restore address of current destination row
08BE: CBF4     [164]                    set     6,H             ; writing mode
08C0: 0E32     [171]                    ld      C,VDP_SET       ; VDP setting mode
08C2: ED69     [183]                    out     (C),L           ; low byte
08C4: ED61     [195]                    out     (C),H           ; high byte of address
08C6: 21F781   [205]                    ld      HL,VIDEOBUFF    ; video buffer address
08C9: 0E30     [212]                    ld      C,VDP_DAT       ; VDP data mode
08CB: 7E       [ 7]     WRITEBUF:       ld      A,(HL)          ; load char
08CC: ED79     [19]                     out     (C),A           ; send char
08CE: 23       [25]                     inc     HL              ; increment buffer index
08CF: 1D       [29]                     dec     E               ; next row
08D0: 20F9     [36|41]                  jr      NZ,WRITEBUF     ; repeat until 0
08D2: 10BC     [44|49]                  djnz    SCROLLNXTRW     ; repeat for the entire screen
08D4: 3ADE81   [57]                     ld      A,(SCR_SIZE_W)  ; reload screen width
08D7: 47       [61]                     ld      B,A             ; cells to empty into B
08D8: AF       [65]                     xor     A               ; null char
08D9: 0E32     [72]                     ld      C,VDP_SET       ; VDP set mode
08DB: 2A1F82   [88]                     ld      HL,(VIDTMP1)    ; load address of the last row
08DE: CBF4     [96]                     set     6,H             ; writing mode
08E0: ED69     [108]                    out     (C),L           ; low byte then..
08E2: ED61     [120]                    out     (C),H           ; high byte of address
08E4: 0E30     [127]                    ld      C,VDP_DAT       ; VDP data mode
08E6: ED79     [12]     RPTEMPTYROW:    out     (C),A           ; empty cell
08E8: 00       [16]                     nop                     ; delay
08E9: 00       [20]                     nop
08EA: 10FA     [28|33]                  djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
08EC: 3E01     [35]                     ld      A,$01
08EE: 32EB81   [48]                     ld      (PRNTVIDEO),A   ; set print-on-video on
08F1: C9       [58]                     ret                     ; return to caller
                        
                        ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
                        ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
                        ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
                        ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
81EF:                   CUR_POS         equ     TMPBFR1         ; cursor position
81F1:                   SRTTXT          equ     TMPBFR2         ; start of text line
81F3:                   ENDTXT          equ     TMPBFR3         ; end of text line
08F2:                   CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
08F2: 3AE981   [13]                     ld      A,(CRSR_STATE)  ; recover cursor state
08F5: 32F581   [26]                     ld      (TMPBFR4),A     ; store status
08F8: A7       [30]                     and     A               ; is cursor on?
08F9: C47008   [40|47]                  call    NZ,CURSOR_OFF   ; yes, so set cursor off
08FC: CD8A06   [57]                     call    RSTCHRCRS       ; restore char under it
                                        ; first, check if cursor if off, so that we just interpret return as a new line command
08FF: 3A2982   [70]                     ld      A,(KBDNPT)      ; check if input from keyboad
0902: A7       [74]                     and     A               ; if 0, input is not from keyboard...
0903: CA7C09   [84|84]                  jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
                                        ; first part: look for the beginning of the text line on screen
0906: CD9306   [101]                    call    LOAD_CRSR_POS   ; load cursor position into HL
0909: 22EF81   [117]                    ld      (CUR_POS),HL    ; store it
090C: ED5BE281 [137]                    ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
0910: E5       [11]     RPTNLLSRC:      push    HL
0911: CDC53D   [28]                     call    CMP16           ; check if at "home"
0914: E1       [38]                     pop     HL
0915: CA2009   [48|48]                  jp      Z,CNTNULL       ; yes, exit because there is nothing before
0918: 2B       [54]                     dec     HL              ; go 1 step back
0919: CD1906   [71]                     call    READ_VIDEO_LOC  ; read char of current position
091C: A7       [75]                     and     A               ; is it $00 (null char)?
091D: 20F1     [82|87]                  jr      NZ,RPTNLLSRC    ; no, continue searching
091F: 23       [88]                     inc     HL              ; move 1 step forward to go back to the last cell with something in
                                        ; second part: look for the ending of the text on screen
0920: 22F181   [16]     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
0923: 3ADF81   [29]                     ld      A,(SCR_SIZE_H)
0926: 5F       [33]                     ld      E,A             ; load screen height into DE
0927: 3ADE81   [46]                     ld      A,(SCR_SIZE_W)
092A: 6F       [50]                     ld      L,A             ; load screen width into HL
092B: AF       [54]                     xor     A
092C: 67       [58]                     ld      H,A
092D: 57       [62]                     ld      D,A
092E: CDD03D   [79]                     call    MUL16           ; multiply HL times DE to get the screen size
0931: ED5BE281 [99]                     ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
0935: 19       [110]                    add     HL,DE           ; get the address...
0936: 2B       [116]                    dec     HL              ; ...of the "last" video cell
0937: EB       [120]                    ex      DE,HL           ; store address into DE
0938: 2AEF81   [136]                    ld      HL,(CUR_POS)    ; retrieve original cursor position
093B: E5       [11]     RPTNLLSRC2:     push    HL
093C: CDC53D   [28]                     call    CMP16           ; check if at last position on screen (bottom right corner)
093F: E1       [38]                     pop     HL
0940: CA4A09   [48|48]                  jp      Z,CNTNULL2      ; if yes, exit because these is nothing after
0943: 23       [54]                     inc     HL              ; 1 more step forward
0944: CD1906   [71]                     call    READ_VIDEO_LOC  ; read char of current position
0947: A7       [75]                     and     A               ; is it $00 (null char)?
0948: 20F1     [82|87]                  jr      NZ,RPTNLLSRC2   ; no, continue searching
094A: 22F381   [16]     CNTNULL2:       ld      (ENDTXT),HL     ; store ending of text line
094D: ED5BF181 [36]                     ld      DE,(SRTTXT)     ; load beginning of text line
0951: A7       [40]                     and     A               ; clear Carry
0952: ED52     [55]                     sbc     HL,DE           ; how many chars?
0954: 2826     [62|67]                  jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
                                        ;---    central part: send the text on the screen to the interpreter
0956: 2AF181   [78]                     ld      HL,(SRTTXT)     ; load beginning of text line
0959: ED5BF381 [98]                     ld      DE,(ENDTXT)     ; load ending of text line
095D: CD1906   [17]     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
0960: E5       [28]                     push    HL
0961: CD3601   [45]                     call    CHARINTOBFR     ; send char to buffer
0964: E1       [55]                     pop     HL
0965: 23       [61]                     inc     HL              ; go to next char
0966: E5       [72]                     push    HL              ; store HL
0967: CDC53D   [89]                     call    CMP16           ; check if DE=HL (finish chars)
096A: E1       [99]                     pop     HL
096B: 20F0     [106|111]                jr      NZ,SNDCHRTOBFR  ; no, repeat
096D: 3E0D     [113]                    ld      A,CR            ; yes, so now send carriage return
096F: CD3601   [130]                    call    CHARINTOBFR     ; send to buffer
0972: 2AF381   [146]                    ld      HL,(ENDTXT)     ; recover address of last char of input text
0975: CDB706   [163]                    call    HL2XY           ; retrieve X,Y from address
0978: 7D       [167]                    ld      A,L             ; move Y into A (we don't need X anymore)
0979: 32E581   [180]                    ld      (SCR_CURS_Y),A  ; store new Y
                                        ;---    final part: go at the beginning of a new line on the screen
097C: AF       [ 4]     PRNTRETURN:     xor     A               ; move to col 0
097D: 32E481   [17]                     ld      (SCR_CURS_X),A  ; store new X
0980: 3AE581   [30]                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
0983: 3C       [34]                     inc     A               ; new row
0984: 21DF81   [44]                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
0987: BE       [51]                     cp      (HL)            ; is the cursor over the bottom of the screen?
0988: 3806     [58|63]                  jr      C,ADDNEWLINE    ; no, jump over
098A: 3D       [62]                     dec     A               ; yes, so come back 1 row, then...
098B: F5       [73]                     push    AF              ; (store A)
098C: CD7708   [90]                     call    SCROLLUP        ; ...scroll the screen before to...
098F: F1       [100]                    pop     AF              ; (retrieve A)
0990: 32E581   [13]     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
0993: 3AF581   [26]                     ld      A,(TMPBFR4)     ; retrieve cursor state
0996: A7       [30]                     and     A               ; was it off (A=0)?
0997: C45A08   [40|47]                  call    NZ,CURSOR_ON    ; no, set cursor on
099A: C35506   [50]                     jp      POS_CURSOR      ; position cursor to new location & return to caller
                        
                        ; ------------------------------------------------------------------------------
                                        ; this table contains the values of the offsets to be added to
                                        ; the starting address of the name table to find the correct
                                        ; value of the first cell of the corresponding row
                                        ; (by doing so, it's faster than doing a multipication)
                                        ; table for graphics 1 text mode: 32 cols
099D: 00002000          POS_TB_CRS_32   defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
09A1: 40006000          
09A5: 8000A000          
09A9: C000E000          
09AD: 00012001                          defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
09B1: 40016001          
09B5: 8001A001          
09B9: C001E001          
09BD: 00022002                          defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
09C1: 40026002          
09C5: 8002A002          
09C9: C002E002          
                                        ; table for pure text mode: 40 cols
09CD: 00002800          POS_TB_CRS_40   defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
09D1: 50007800          
09D5: A000C800          
09D9: F0001801          
09DD: 40016801                          defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
09E1: 9001B801          
09E5: E0010802          
09E9: 30025802          
09ED: 8002A802                          defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
09F1: D002F802          
09F5: 20034803          
09F9: 70039803          
                        
                        ; ------------------------------------------------------------------------------
                        ; reset VRAM
09FD: AF       [ 4]     EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
09FE: 67       [ 8]                     ld      H,A
09FF: 6F       [12]                     ld      L,A             ; reset HL
0A00: CDF905   [29]                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
0A03: 0640     [36]                     ld      B,$40           ; $40 pages of RAM...
0A05: 57       [40]                     ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
0A06: 0E30     [47]                     ld      C,VDP_DAT       ; VDP data mode
0A08: ED79     [12]     EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
0A0A: 14       [16]                     inc     D               ; next cell
0A0B: 00       [20]                     nop
0A0C: 20FA     [27|32]                  jr      NZ,EMPTVRM      ; repeat until page is fully cleared
0A0E: 10F8     [35|40]                  djnz    EMPTVRM         ; repeat for $40 pages
0A10: C9       [45]                     ret                     ; return to caller
                        
                        ; clear video registers in SRAM
0A11: 21DE81   [10]     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
0A14: AF       [14]                     xor     A               ; $00 to clean the registers
0A15: 0645     [21]                     ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
0A17: 77       [ 7]     RSTVDPRAMREG:   ld      (HL),A          ; reset register
0A18: 23       [13]                     inc     HL              ; next register
0A19: 10FC     [21|26]                  djnz    RSTVDPRAMREG    ; repeat
0A1B: C9       [31]                     ret                     ; return to caller
                        
                        ; ------------------------------------------------------------------------------
                        ; set a specific graphics mode, passed into reg. E
0A1C: 0608     [ 7]     SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
0A1E: CB23     [15]                     sla     E               ; multiply E by 8..
0A20: CB23     [23]                     sla     E               ; so that reg. E can point..
0A22: CB23     [31]                     sla     E               ; to the correct settings
0A24: 1600     [ 7]     SET_GFX_MODE2:  ld      D,$00           ; reset D
0A26: 21590A   [17]                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
0A29: 19       [28]                     add     HL,DE           ; add offset to get the correct set of values for the required mode
0A2A: 3E80     [35]                     ld      A,$80           ; start with REG0 ($80+register number)
0A2C: 0E32     [42]                     ld      C,VDP_SET       ; VDP set
0A2E: 56       [ 7]     LDREGVLS:       ld      D,(HL)          ; load register's value
0A2F: ED51     [19]                     out     (C),D           ; send data to VDP
0A31: ED79     [31]                     out     (C),A           ; indicate the register to send data to
0A33: 3C       [35]                     inc     A               ; next register
0A34: 23       [41]                     inc     HL              ; next value
0A35: 10F7     [49|54]                  djnz    LDREGVLS        ; repeat for 8 registers
0A37: C9       [59]                     ret
                        
                        ; ------------------------------------------------------------------------------
0A38:                   LOADCHARSET:    ; reg. A contains the video mode
                                        ; reg. HL contains address of pattern table into VRAM
0A38: 0600     [ 7]                     ld      B,$00           ; 0=256 chars to load (complete charset)
0A3A: CBF4     [15]                     set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
0A3C: 0E32     [22]                     ld      C,VDP_SET       ; load VDP address into C
0A3E: ED69     [34]                     out     (C),L           ; send low byte of address
0A40: ED61     [46]                     out     (C),H           ; send high byte
0A42: 21283E   [56]                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
0A45: A7       [60]                     and     A               ; is it text mode (A=0)?
0A46: 2803     [67|72]                  jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
0A48: 212846   [77]                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
0A4B: 1608     [ 7]     NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
0A4D: 0E30     [14]                     ld      C,VDP_DAT       ; VDP data mode
0A4F: 7E       [ 7]     SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
0A50: ED79     [19]                     out     (C),A           ; write byte into VRAM
0A52: 23       [25]                     inc     HL              ; inc byte pointer
0A53: 15       [29]                     dec     D               ; 8 bytes sents (0 char)?
0A54: 20F9     [36|41]                  jr      NZ,SENDCHRPTRNS ; no, continue
0A56: 10F3     [44|49]                  djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
0A58: C9       [54]                     ret                     ; return to caller
                        
                        ;------------------------------------------------------------------------------
                        ; NAME TABLE:       buffer video - contains the chars to be shown on video
                        ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
                        ; COLOR TABLE:      color settings for chars/tiles
                        
                                        ; VDP register settings for a text display
0A59: 00                VDPMODESET      defb    %00000000       ; reg.0: external video off
0A5A: D0                                defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
0A5B: 02                                defb    $02             ; reg.2: name table set to $0800 ($02x$400)
0A5C: 00                                defb    $00             ; reg.3: not used in text mode
0A5D: 00                                defb    $00             ; reg.4: pattern table set to $0000
0A5E: 00                                defb    $00             ; reg.5: not used in text mode
0A5F: 00                                defb    $00             ; reg.6: not used in text mode
0A60: F5                                defb    $f5             ; reg.7: white text on light blue background
                        
0A61:                   VDPMODESET1     ; VDP register settings for a graphics 1 mode
0A61: 00                                defb    %00000000       ; reg.0: ext. video off
0A62: C0                                defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
0A63: 06                                defb    $06             ; reg.2: name table address: $1800
0A64: 80                                defb    $80             ; reg.3: color table address: $2000
0A65: 00                                defb    $00             ; reg.4: pattern table address: $0000
0A66: 36                                defb    $36             ; reg.5: sprite attr. table address: $1B00
0A67: 07                                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A68: 05                                defb    $05             ; reg.7: backdrop color (light blue)
                        
0A69:                   VDPMODESET2     ; VDP register settings for a graphics 2 mode
0A69: 02                                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A6A: C0                                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A6B: 06                                defb    $06             ; reg.2: name table addr.: $1800
0A6C: FF                                defb    $FF             ; reg.3: color table addr.: $2000
0A6D: 03                                defb    $03             ; reg.4: pattern table addr.: $0000
0A6E: 36                                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A6F: 07                                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A70: 05                                defb    $05             ; reg.7: backdrop color: light blue
                        
0A71:                   VDPMODESETMC    ; VDP register settings for a multicolor mode
0A71: 00                                defb    %00000000       ; reg.0: ext. video dis.
0A72: CB                                defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
0A73: 02                                defb    $02             ; reg.2: name table addr.: $0800
0A74: 00                                defb    $00             ; reg.3: don't care
0A75: 00                                defb    $00             ; reg.4: pattern table addr.: $0000
0A76: 36                                defb    $36             ; reg.5: sprite attr. table addr.: $1B00
0A77: 07                                defb    $07             ; reg.6: sprite pattern table addr.: $3800
0A78: 0F                                defb    $0F             ; reg.7: backdrop color (white)
                        
0A79:                   VDPMODESETEX2   ; VDP register settings for an extended graphics 2 mode
0A79: 02                                defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
0A7A: C0                                defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
0A7B: 0E                                defb    $0E             ; reg.2: name table addr.: $3800
0A7C: 9F                                defb    $9F             ; reg.3: color table addr.: $2000
0A7D: 00                                defb    $00             ; reg.4: pattern table addr.: $0000
0A7E: 76                                defb    $76             ; reg.5: sprite attr. table addr.: $3B00
0A7F: 03                                defb    $03             ; reg.6: sprite pattern table addr.: $1800
0A80: 05                                defb    $05             ; reg.7: backdrop color: light blue
                        
0A81:                   LM80CLOGO       ; patterns to compose the splash screen logo
0A81: 00000000                          defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0A85: 00...             
0AA1: 00000F0A                          defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0AA5: 0B100000          
0AA9: 00000000          
0AAD: 00...             
0AC1: 00000D17                          defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
0AC5: 000C0000          
0AC9: 00010000          
0ACD: 00140000          
0AD1: 06050615          
0AD5: 16070615          
0AD9: 16070601          
0ADD: 01070000          
0AE1: 00000D00                          defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0AE5: 000C0000          
0AE9: 00010000          
0AED: 00011406          
0AF1: 01050305          
0AF5: 03050305          
0AF9: 03050305          
0AFD: 03050000          
0B01: 00000D00                          defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
0B05: 000C0000          
0B09: 00010000          
0B0D: 00010101          
0B11: 01050914          
0B15: 13080305          
0B19: 13050305          
0B1D: 00000000          
0B21: 00000D00                          defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
0B25: 000C0000          
0B29: 00010000          
0B2D: 00010008          
0B31: 03050615          
0B35: 16070301          
0B39: 16050305          
0B3D: 00000000          
0B41: 00000D00                          defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
0B45: 000C0000          
0B49: 00010000          
0B4D: 00010000          
0B51: 03050305          
0B55: 03050305          
0B59: 03050305          
0B5D: 03050000          
0B61: 00000D00                          defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
0B65: 000C0000          
0B69: 00010404          
0B6D: 00010000          
0B71: 03050914          
0B75: 13080914          
0B79: 13080901          
0B7D: 01080000          
0B81: 00000E12                          defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0B85: 12110000          
0B89: 00000000          
0B8D: 00...             
0BA1: 00000000                          defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0BA5: 00...             
                        
                        ; incude the latest version of the PSG module
                        #include "../include/psg/psg-r314.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - PSG ROUTINES - R3.14
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. Code and computer schematics are released under
                        ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
                        ; kind of warranty: you can use them at your own risk.
                        ; You are free to use them for any non-commercial use: you are only asked to
                        ; maintain the copyright notices, include this advice and the note to the 
                        ; attribution of the original version to Leonardo Miliani, if you intend to
                        ; redistribuite them.
                        ; https://www.leonardomiliani.com
                        ; 
                        ; Please support me by visiting the following links:
                        ; Main project page: https://www.leonardomiliani.com
                        ; Schematics and code: https://github.com/leomil72/LM80C
                        ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
                        ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
                        ; ------------------------------------------------------------------------------
                        ;
                        ; ------------------------------------------------------------------------------
                        
                        ;------------------------------------------------------------------------------
                        ; configure the PSG
0BC1: 212382   [10]     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
0BC4: 060B     [17]                     ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
0BC6: AF       [21]                     xor     A               ; reset A
0BC7: 77       [ 7]     EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
0BC8: 23       [13]                     inc     HL              ; next register
0BC9: 10FC     [21|26]                  djnz    EMPTSNDBFR      ; repeat
0BCB: 0610     [ 7]     CLRPSGREGS:     ld      B,$10           ; 16 registers to set
0BCD: 21DF0B   [17]                     ld      HL,SNDREGCFG    ; starting address of register settings
0BD0: 1600     [24]                     ld      D,$00           ; first register
0BD2: 7A       [ 4]     RSTPSG:         ld      A,D             ; register value
0BD3: CD190C   [21]                     call    SETSNDREG       ; select register
0BD6: 7E       [28]                     ld      A,(HL)          ; load value
0BD7: CD1E0C   [45]                     call    WRTSNDREG       ; write to register
0BDA: 14       [49]                     inc     D               ; next register
0BDB: 23       [55]                     inc     HL              ; next value
0BDC: 10F4     [63|68]                  djnz    RSTPSG          ; repeat for each register
0BDE: C9       [73]                     ret                     ; return to caller
                        
0BDF: 00000000          SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
0BE3: 000000BF          
0BE7: 00000000                          defb $00,$00,$00,$00,$00,$00,$ff,$ff
0BEB: 0000FFFF          
                                        ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
                        
                        
                        ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
0BEF: 21090C   [10]     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
0BF2: C3F80B   [20]                     jp      SENDSND
0BF5: 21110C   [10]     NOBEEP:         ld      HL,NOBPDAT      ; data address
0BF8: C5       [11]     SENDSND:        push    BC
0BF9: 0604     [18]                     ld      B,$04           ; 4 pairs
0BFB: 7E       [ 7]     RPTWLCMBP:      ld      A,(HL)          ; read register #
0BFC: CD190C   [24]                     call    SETSNDREG
0BFF: 23       [30]                     inc     HL              ; next cell
0C00: 7E       [37]                     ld      A,(HL)          ; read value
0C01: CD1E0C   [54]                     call    WRTSNDREG
0C04: 23       [60]                     inc     HL
0C05: 10F4     [68|73]                  djnz    RPTWLCMBP       ; repeat
0C07: C1       [78]                     pop     BC
0C08: C9       [88]                     ret                     ; return to caller
                        
0C09: 077B0456          WLCBPDAT:       defb    $07,%01111011,$04,$56,$05,$00,$0A,$0F
0C0D: 05000A0F          
0C11: 04000500          NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%01111111
0C15: 0A00077F          
                        
                        
                        ; select register on PSG
0C19: 0E40     [ 7]     SETSNDREG:      ld      C,PSG_REG       ; PSG register port
0C1B: ED79     [19]                     out     (C),A           ; set register
0C1D: C9       [29]                     ret                     ; return to caller
                        
                        ; send data to PSG
0C1E: 0E41     [ 7]     WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
0C20: ED79     [19]                     out     (C),A           ; send data
0C22: C9       [29]                     ret                     ; return to caller
                        
                        ; manage the sounds' duration: each time this subroutine is called, it
                        ; decrements the single sound durations (measured in ms) and eventually
                        ; shut off the audio channel whose counter has reached 0.
                        ; (this sub-routine is called by CH3 timer ISR)
0C23: DDE5     [15]     MNGSNDS:        push    IX              ; store IX
0C25: DD212382 [29]                     ld      IX,CHASNDDTN    ; starting address of tones duration
0C29: 0603     [36]                     ld      B,$03           ; 3 channels to check
0C2B: 2601     [43]                     ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
0C2D: DD5E00   [19]     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
0C30: DD5601   [38]                     ld      D,(IX+1)        ; load MSB into D
0C33: 7B       [42]                     ld      A,E             ; load E into A
0C34: B2       [46]                     or      D               ; check that DE=0
0C35: 2831     [53|58]                  jr      Z,CNTCHKSND     ; yes, jump over
0C37: 1B       [59]                     dec     DE              ; no, so decrement DE
0C38: 7B       [63]                     ld      A,E             ; reload E into A...
0C39: DD7300   [82]                     ld      (IX+0),E        ; store new...
0C3C: DD7201   [101]                    ld      (IX+1),D        ; ...duration and...
0C3F: B2       [105]                    or      D               ; ...do another check to see if DE=0
0C40: 2026     [112|117]                jr      NZ,CNTCHKSND    ; no, so jump over
                                                                ; if yes, let's shut down the corresponding channel
                                                                ; to shut down a tone we disable it into the mixer
                                                                ; then set 0 into its tone registers
0C42: 1607     [119]                    ld      D,$07           ; mixer register
0C44: 0E40     [126]                    ld      C,PSG_REG       ; PSG register selector port
0C46: ED51     [138]                    out     (C),D           ; set mixer register
0C48: ED78     [150]                    in      A,(C)           ; load current value
0C4A: B4       [154]                    or      H               ; set off the channel into the mixer (remember that 1=OFF)
0C4B: ED51     [166]                    out     (C),D           ; select mixer register
0C4D: 0E41     [173]                    ld      C,PSG_DAT       ; PSG data port
0C4F: ED79     [185]                    out     (C),A           ; send new value for the mixer
0C51: 3E03     [192]                    ld      A,$03           ; three channels
0C53: 90       [196]                    sub     B               ; find current channel (0->A, 1->B, 2->C)
0C54: 87       [200]                    add     A,A             ; and find first register (A=>0, B=>2, C=>4)
0C55: 0E40     [207]                    ld      C,PSG_REG       ; PSG register selector port
0C57: ED79     [219]                    out     (C),A           ; select first tone register of channel
0C59: 2E00     [226]                    ld      L,$00           ; value 0 into L
0C5B: 0E41     [233]                    ld      C,PSG_DAT       ; PSG data selector port
0C5D: ED69     [245]                    out     (C),L           ; write 0 into register
0C5F: 0E40     [252]                    ld      C,PSG_REG       ; PSG register selector port
0C61: 3C       [256]                    inc     A               ; next tone register
0C62: ED79     [268]                    out     (C),A           ; select second tone register of channel
0C64: 0E41     [275]                    ld      C,PSG_DAT       ; PSG data selector port
0C66: ED69     [287]                    out     (C),L           ; write 0 into register
0C68: DD23     [10]     CNTCHKSND:      inc     IX              ; set for...
0C6A: DD23     [20]                     inc     IX              ; ...next channel...
0C6C: CB24     [28]                     sla     H               ; shift left H 1 bit
0C6E: 10BD     [36|41]                  djnz    CHKSNDCH        ; repeat for 3 channels
0C70: DDE1     [50]                     pop     IX              ; restore IX
0C72: C9       [60]                     ret                     ; return to caller
                        
                        ; read a specific row of the keyboard matrix, set by A
                        ; return read into A
0C73: C5       [11]     READKBLN:       push    BC              ; store BC
0C74: 060F     [18]                     ld      B,$0F           ; reg #15
0C76: 0E40     [25]                     ld      C,PSG_REG       ; PSG register port
0C78: ED41     [37]                     out     (C),B           ; select reg #15
0C7A: 0E41     [44]                     ld      C,PSG_DAT       ; PSG data port
0C7C: ED79     [56]                     out     (C),A           ; activate the row
0C7E: 060E     [63]                     ld      B,$0E           ; register #14 (port B)
0C80: 0E40     [70]                     ld      C,PSG_REG       ; PSG register port
0C82: ED41     [82]                     out     (C),B           ; select reg. 14 (port B)
0C84: ED78     [94]                     in      A,(C)           ; read register #14
0C86: C1       [104]                    pop     BC              ; retrieve BC
0C87: C9       [114]                    ret
                        
                        ; read the keyboard matrix to look for a key pressure
0C88: 0E40     [ 7]     KEYBOARD:       ld      C,PSG_REG       ; PSG register port
0C8A: 0607     [14]                     ld      B,$07           ; set register #7...
0C8C: ED41     [26]                     out     (C),B           ; ...to work with
0C8E: ED78     [38]                     in      A,(C)           ; read register #7
0C90: CBFF     [46]                     set     7,A             ; port A set to output
0C92: CBB7     [54]                     res     6,A             ; port B set to input
0C94: ED41     [66]                     out     (C),B           ; set register #7
0C96: 0E41     [73]                     ld      C,PSG_DAT       ; PSG data port
0C98: ED79     [85]                     out     (C),A           ; set I/O ports w/o altering the rest of the mixer
                                        ; check special keys (SHIFT/ALT/CTRL)
0C9A: 3EFD     [92]                     ld      A,%11111101     ; select SHIFT row
0C9C: CD730C   [109]                    call    READKBLN        ; read row
0C9F: CB5F     [117]                    bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
0CA1: 2005     [124|129]                jr      NZ,CHECKALT     ; no, so go on
0CA3: 212D82   [134]                    ld      HL,CONTROLKEYS  ; control key flags
0CA6: 3601     [144]                    ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
0CA8: 3EFE     [ 7]     CHECKALT:       ld      A,%11111110     ; select ALT row
0CAA: CD730C   [24]                     call    READKBLN        ; read ALT row
0CAD: CB6F     [32]                     bit     5,A             ; test if ALT key is pressed (5th bit is reset)
0CAF: 2005     [39|44]                  jr      NZ,CHECKCTRL    ; no, so go on
0CB1: 212D82   [49]                     ld      HL,CONTROLKEYS  ; control key flags
0CB4: 3604     [59]                     ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
0CB6: 3EFE     [ 7]     CHECKCTRL:      ld      A,%11111110     ; select CTRL row
0CB8: CD730C   [24]                     call    READKBLN        ; read CTRL row
0CBB: CB57     [32]                     bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
0CBD: 2005     [39|44]                  jr      NZ,CHECKKBD     ; no, so make a normal reading
0CBF: 212D82   [49]                     ld      HL,CONTROLKEYS  ; control key flags
0CC2: 3602     [59]                     ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
0CC4: 0608     [ 7]     CHECKKBD:       ld      B,$08           ; 8 lines
0CC6: 3E7F     [14]                     ld      A,%01111111     ; start from the last line of the matrix
0CC8: 160F     [ 7]     RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
0CCA: 0E40     [14]                     ld      C,PSG_REG       ; PSG register port
0CCC: ED51     [26]                     out     (C),D           ; select reg. #15
0CCE: 0E41     [33]                     ld      C,PSG_DAT       ; PSG data port
0CD0: ED79     [45]                     out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
0CD2: 5F       [49]                     ld      E,A             ; save current line into E
0CD3: 160E     [56]                     ld      D,$0E           ; register #14 (port A)
0CD5: 0E40     [63]                     ld      C,PSG_REG       ; PSG register port
0CD7: ED51     [75]                     out     (C),D           ; select reg. 14 (port A)
0CD9: 00       [79]                     nop
0CDA: ED78     [91]                     in      A,(C)           ; read register #14
0CDC: FEFF     [98]                     cp      $FF             ; is there any line set to 0?
0CDE: 282E     [105|110]                jr      Z,NOKEYPRSD     ; no, go to the next row
                                        ; check control keys
0CE0: 322A82   [118]                    ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
0CE3: 78       [122]                    ld      A,B             ; copy current row (B) into A
0CE4: FE02     [129]                    cp      $02             ; is it the row of the SHIFT?
0CE6: 200F     [136|141]                jr      NZ,TESTALT      ; no, continue checking the other control keys
0CE8: 3A2A82   [149]                    ld      A,(KBTMP)       ; yes, retrieve current row data
0CEB: CB5F     [157]                    bit     3,A             ; check SHIFT bit line
0CED: 202E     [164|169]                jr      NZ,FINDKEY      ; no SHIFT, continue checking
0CEF: CBDF     [172]                    set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
0CF1: FEFF     [179]                    cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
0CF3: 2028     [186|191]                jr      NZ,FINDKEY      ; yes, go to check which one
0CF5: 1817     [198]                    jr      NOKEYPRSD       ; no, go to next row        
0CF7: FE01     [ 7]     TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
0CF9: 3A2A82   [20]                     ld      A,(KBTMP)       ; retrieve current row data
0CFC: 201F     [27|32]                  jr      NZ,FINDKEY      ; no, continue
0CFE: CB6F     [35]                     bit     5,A             ; yes, check ALT bit line
0D00: 2002     [42|47]                  jr      NZ,TESTCTRL     ; no ALT, continue checking
0D02: CBEF     [50]                     set     5,A             ; yes, it's the ALT. So remove ALT bit
0D04: CB57     [ 8]     TESTCTRL:       bit     2,A             ; check CTRL bit line
0D06: 2002     [15|20]                  jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
0D08: CBD7     [23]                     set     2,A             ; delete CTRL bit flag
0D0A: FEFF     [ 7]     ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
0D0C: 200F     [14|19]                  jr      NZ,FINDKEY      ; yes, go to check which one
0D0E: 7B       [ 4]     NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
0D0F: 0F       [ 8]                     rrca                    ; rotate right by 1
0D10: 10B6     [16|21]                  djnz    RPTKBDRD        ; repeat for 8 lines
0D12: AF       [20]                     xor     A               ; if exit from here, no key has been pressed...
0D13: 322C82   [33]                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
0D16: 322D82   [46]                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
0D19: 322982   [59]                     ld      (KBDNPT),A      ; ...no input from keyboard...
0D1C: C9       [69]                     ret                     ; ...and leave
0D1D: 1EFF     [ 7]     FINDKEY:        ld      E,$FF           ; counter
0D1F: 1C       [ 4]     CHKLN:          inc     E               ; E goes from 0 to 7
0D20: CB3F     [12]                     srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
0D22: 38FB     [19|24]                  jr      C,CHKLN         ; no, check next bit
0D24: 3A2D82   [32]                     ld      A,(CONTROLKEYS) ; load control key flags
0D27: 21F20D   [42]                     ld      HL,KBMAP        ; normal keymap
0D2A: FE01     [49]                     cp      $01             ; SHIFT flag?
0D2C: 2005     [56|61]                  jr      NZ,CHKCTRL      ; no, jump over
0D2E: 21320E   [66]                     ld      HL,KBMAP_SFT    ; SHIFT keymap
0D31: 1810     [78]                     jr      LOADMAP         ; and load it
0D33: FE02     [ 7]     CHKCTRL:        cp      $02             ; CTRL flag?
0D35: 2005     [14|19]                  jr      NZ,CHKALT       ; no, jump over
0D37: 21B20E   [24]                     ld      HL,KBMAP_CTRL   ; CTRL map
0D3A: 1807     [36]                     jr      LOADMAP         ; and load it
0D3C: FE04     [ 7]     CHKALT:         cp      $04             ; ALT flag?
0D3E: 2003     [14|19]                  jr      NZ,LOADMAP      ; no, check over
0D40: 21720E   [24]                     ld      HL,KBMAP_ALT    ; ALT map
0D43: 05       [ 4]     LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
0D44: 48       [ 8]                     ld      C,B             ; move B into C and...
0D45: CB21     [16]                     sla     C               ; ...multiply it...
0D47: CB21     [24]                     sla     C               ; ...by 8 to find...
0D49: CB21     [32]                     sla     C               ; ...the current row into the matrix
0D4B: 0600     [39]                     ld      B,$00           ; reset B
0D4D: 09       [50]                     add     HL,BC           ; find the address of the current row
0D4E: 50       [54]                     ld      D,B             ; reset D
0D4F: 19       [65]                     add     HL,DE           ; find the current column
0D50: 3A2C82   [78]                     ld      A,(LASTKEYPRSD) ; load the last key pressed
0D53: BE       [85]                     cp      (HL)            ; is it the same key?
0D54: 2847     [92|97]                  jr      Z,LVKBRDCHK     ; yes, so do nothing
0D56: 7E       [99]                     ld      A,(HL)          ; no, load it...
0D57: 322C82   [112]                    ld      (LASTKEYPRSD),A ; ...store it...
0D5A: 322B82   [125]                    ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
0D5D: 32EC81   [138]                    ld      (CHR4VID),A     ; ...and store char for video
0D60: FE03     [145]                    cp      CTRLC           ; is it RUN/STOP?
0D62: 2005     [152|157]                jr      NZ,CNTKBCK      ; no, jump over
0D64: CD3601   [169]                    call    CHARINTOBFR     ; yes, send directly to buffer and...
0D67: 1830     [181]                    jr      LVKBRDCHK2      ; ...leave
0D69: 010008   [10]     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
0D6C: 21EA0D   [20]                     ld      HL,FNKEYSORD    ; FN keys codes
0D6F: BE       [ 7]     CHKFNK:         cp      (HL)            ; is it an FN key?
0D70: CA9E0D   [17|17]                  jp      Z,PRNTFNKEY     ; yes, jump over
0D73: 0C       [21]                     inc     C               ; next FN key
0D74: 23       [27]                     inc     HL              ; next FN key code
0D75: 10F8     [35|40]                  djnz    CHKFNK          ; continue for 8 FN keys
0D77: 3E01     [ 7]     SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
0D79: 322982   [20]                     ld      (KBDNPT),A      ; to keyboard
0D7C: 3AEB81   [33]                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
0D7F: B7       [37]                     or      A               ; is the print-on-video disabled?
0D80: CA890D   [47|47]                  jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
0D83: 3AE981   [60]                     ld      A,(CRSR_STATE)  ; check cursor state
0D86: B7       [64]                     or      A               ; is it 0 (cursor OFF)?
0D87: 200D     [71|76]                  jr      NZ,PNT2VD       ; no, print on screen
0D89: AF       [ 4]     PUTCHRBUF:      xor     A
0D8A: 322982   [17]                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
0D8D: 3A2B82   [30]                     ld      A,(TMPKEYBFR)   ; retrieve char
0D90: CD3601   [47]                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
0D93: C3990D   [57]                     jp      LVKBRDCHK2      ; ...and leave
0D96: CDC806   [17]     PNT2VD:         call    CHAR2VID        ; send char to video
0D99: AF       [ 4]     LVKBRDCHK2:     xor     A
0D9A: 322D82   [17]                     ld      (CONTROLKEYS),A ; reset control key flags
0D9D: C9       [10]     LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR    
                                        ; manage FN keys          
0D9E: 57       [ 4]     PRNTFNKEY:      ld      D,A             ; copy A into D
0D9F: 2AAF80   [20]                     ld      HL,(LINEAT)     ; Get current line number
0DA2: 23       [26]                     inc     HL              ; -1 means direct statement
0DA3: 7C       [30]                     ld      A,H
0DA4: B5       [34]                     or      L
0DA5: 7A       [38]                     ld      A,D             ; retrieve char
0DA6: 20CF     [45|50]                  jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
0DA8: 79       [49]                     ld      A,C             ; direct mode, so print text - first, get FN key number
0DA9: 87       [53]                     add     A,A
0DAA: 87       [57]                     add     A,A
0DAB: 87       [61]                     add     A,A
0DAC: 87       [65]                     add     A,A             ; FN key number * 16
0DAD: 4F       [69]                     ld      C,A             ; move it into C
0DAE: 0600     [76]                     ld      B,$00           ; reset B, to get offset
0DB0: 21B380   [86]                     ld      HL,FNKEYS       ; load address of FN keys texts
0DB3: 09       [97]                     add     HL,BC           ; get correct text address
0DB4: 0610     [104]                    ld      B,$10           ; 16 chars
0DB6: 7E       [ 7]     LDFNKEYCHR:     ld      A,(HL)          ; load char
0DB7: A7       [11]                     and     A               ; null char?
0DB8: CA990D   [21|21]                  jp      Z,LVKBRDCHK2    ; yes, so leave
0DBB: 57       [25]                     ld      D,A             ; pass char into D
0DBC: 3AEB81   [38]                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
0DBF: B7       [42]                     or      A               ; is the print-on-video disabled?
0DC0: CAD00D   [52|52]                  jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
0DC3: 3AE981   [65]                     ld      A,(CRSR_STATE)  ; check cursor state
0DC6: B7       [69]                     or      A               ; is it 0 (cursor OFF)?
0DC7: C4DD0D   [79|86]                  call    NZ,PRNTFNK      ; no, print on screen
0DCA: 23       [ 6]     CNTFNK:         inc     HL              ; next char
0DCB: 10E9     [14|19]                  djnz    LDFNKEYCHR      ; repeat for max. 16 chars
0DCD: C3990D   [24]                     jp      LVKBRDCHK2      ; leave
0DD0: AF       [ 4]     PUTCHRBUF1:     xor     A               ; if send to input buffer,... 
0DD1: 322982   [17]                     ld      (KBDNPT),A      ; ...set input as from BASIC
0DD4: 7A       [21]                     ld      A,D             ; retrieve char
0DD5: E5       [32]                     push    HL              ; store HL
0DD6: CD3601   [49]                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
0DD9: E1       [59]                     pop     HL              ; retrieve HL
0DDA: C3CA0D   [69]                     jp      CNTFNK          ; repeat
0DDD: 7A       [ 4]     PRNTFNK:        ld      A,D             ; recover char
0DDE: 32EC81   [17]                     ld      (CHR4VID),A     ; store char for printing
0DE1: 3E01     [24]                     ld      A,$01           ; normal key - set input flag
0DE3: 322982   [37]                     ld      (KBDNPT),A      ; to keyboard
0DE6: CDC806   [54]                     call    CHAR2VID        ; print on screen
0DE9: C9       [64]                     ret                     ; return to caller
                        
                        
                        ;-----------------------------------------------------------------------
0DEA: 01020405          FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
0DEE: 06161718          
                        ;-----------------------------------------------------------------------
                        ; key codes
0DF2: 31190E03          KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
0DF6: 20107132          
0DFA: 33776114                          defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
0DFE: 7A736534          
0E02: 35726478                          defb '5','r','d','x','c','f','t','6'
0E06: 63667436          
0E0A: 37796776                          defb '7','y','g','v','b','h','u','8'
0E0E: 62687538          
0E12: 39696A6E                          defb '9','i','j','n','m','k','o','0'
0E16: 6D6B6F30          
0E1A: 1F706C2C                          defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
0E1E: 2E3A2D1E          
0E22: 1C2A3B2F                          defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0E26: 1B3D2B1D          
0E2A: 080DFC40                          defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
0E2E: 01020418          
                        
                        ; shifted codes - not all the keys have the shifted version
0E32: 210C0E03          KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
0E36: 20105122          
0E3A: 23574114                          defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
0E3E: 5A534524          
0E42: 25524458                          defb '%','R','D','X','C','F','T','&'
0E46: 43465426          
0E4A: 27594756                          defb 39,'Y','G','V','B','H','U','('     ; 39='
0E4E: 42485528          
0E52: 29494A4E                          defb ')','I','J','N','M','K','O',94     ; 94=^
0E56: 4D4B4F5E          
0E5A: 1F504C3C                          defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
0E5E: 3E5B5F1E          
0E62: 1C2A5D3F                          defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
0E66: 1BC62B1D          
0E6A: 080DD340                          defb 8,13,211,'@',5,6,22,23             ; 211=â¬  5=F4  6=F5  22=F6  23=F7
0E6E: 05061617          
                        
                        ; ALT (C=) codes - not all the keys have the alt-ed version
0E72: 310C0E03          KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
0E76: 2010DEC4          
0E7A: 33DD8514                          defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
0E7E: 8382A534          
0E82: 35A2A684                          defb '5',162,166,132,157,163,168,'6'
0E86: 9DA3A836          
0E8A: 37ABA9A1                          defb '7',171,169,161,158,172,213,'8'    ;
0E8E: 9EACD538          
0E92: 39D6D89F                          defb '9',214,216,159,160,215,135,195    ;
0E96: A0D787C3          
0E9A: 1F888AC1                          defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
0E9E: C07B901E          
0EA2: 1C8F7DFE                          defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
0EA6: 1BD1941D          
0EAA: 080DE089                          defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
0EAE: 05061617          
                        
                        ; CTRL codes - not all the keys have the control-ed version
0EB2: 31190E03          KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
0EB6: 20109A32          
0EBA: 339C9514                          defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
0EBE: 98969934          
0EC2: 359BB097                          defb '5',155,176,151,177,175,165,'6'
0EC6: B1AFA536          
0ECA: 37A6A8B2                          defb '7',166,168,178,179,169,167,'8'
0ECE: B3A9A738          
0ED2: 39B8AAAC                          defb '9',184,170,172,171,181,164,'0'
0ED6: ABB5A430          
0EDA: 1FA3AD2C                          defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
0EDE: 2E3ABA1E          
0EE2: 1CE13B2F                          defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
0EE6: 1BD4B91D          
0EEA: 080DBDA2                          defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
0EEE: 01020418          
                        
                        ; include the latest version of the NASCOM BASIC interpreter
                        #include "../include/basic/basic32k-r314.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C BASIC - R3.14
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. Code and computer schematics are released under
                        ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
                        ; kind of warranty: you can use them at your own risk.
                        ; You are free to use them for any non-commercial use: you are only asked to
                        ; maintain the copyright notices, include this advice and the note to the 
                        ; attribution of the original version to Leonardo Miliani, if you intend to
                        ; redistribuite them.
                        ; https://www.leonardomiliani.com
                        ; 
                        ; Please support me by visiting the following links:
                        ; Main project page: https://www.leonardomiliani.com
                        ; Schematics and code: https://github.com/leomil72/LM80C
                        ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
                        ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
                        ; ------------------------------------------------------------------------------
                        ; NASCOM BASIC versions:
                        ; 4.7  - original version by NASCOM
                        ; 4.7b - modified version by Grant Searle (additional commands & functions)
                        ; 4.8  - modified by Leonardo Miliani (new commands/functions)
                        
                        
                        ;------------------------------------------------------------------------------
                        ;  B A S I C
                        ;------------------------------------------------------------------------------
                        
                        ; GENERAL EQUATES
                        
0000:                   NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
0003:                   CTRLC           equ     $03             ; Control "C"
0007:                   CTRLG           equ     $07             ; Control "G"
0008:                   BKSP            equ     $08             ; Back space
000A:                   LF              equ     $0A             ; Line feed
000C:                   CS              equ     $0C             ; Clear screen
000D:                   CR              equ     $0D             ; Carriage return
000F:                   CTRLO           equ     $0F             ; Control "O"
0011:                   CTRLQ           equ     $11             ; Control "Q"
0012:                   CTRLR           equ     $12             ; Control "R"
0013:                   CTRLS           equ     $13             ; Control "S"
0015:                   CTRLU           equ     $15             ; Control "U"
0019:                   HOME            equ     $19             ; Home (cursor at 0,0)
001B:                   ESC             equ     $1B             ; Escape
0020:                   SPC             equ     $20             ; Space
007F:                   DEL             equ     $7F             ; Delete
                        ; cursor ASCII codes
001C:                   CRSLFT          equ     $1C             ; cursor left
001D:                   CRSRGT          equ     $1D             ; cursor right
001E:                   CRSUP           equ     $1E             ; cursor up
001F:                   CRSDN           equ     $1F             ; cursor down
                        
                        
                        ; BASIC WORK SPACE LOCATIONS
                        ; BY STARTING FROM $805E THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
                        ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
                        ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
                        ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
805E:                   WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
8061:                   NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
8064:                   USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in $8065/8066 the user can store the address of a specific machine language routine
8067:                   OUTSUB          equ     USR+$03         ; (1) "out p,n"
8068:                   OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
806A:                   DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
806B:                   DIV1            equ     DIVSUP+$01      ; (4) <- Values
806F:                   DIV2            equ     DIV1+$04        ; (4) <-   to
8073:                   DIV3            equ     DIV2+$04        ; (3) <-   be
8076:                   DIV4            equ     DIV3+$03        ; (2) <-inserted
8078:                   SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
809B:                   LSTRND          equ     SEED+$23        ; (4) Last random number
809F:                   INPSUB          equ     LSTRND+$04      ; (1) #INP (x)" Routine
80A0:                   INPORT          equ     INPSUB+$01      ; (2) PORT (x)
80A2:                   LWIDTH          equ     INPORT+$02      ; (1) Terminal width
80A3:                   COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
80A4:                   NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
80A5:                   CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
80A6:                   CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
80A8:                   NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
80A9:                   BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
80AA:                   RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
80AD:                   STRSPC          equ     RINPUT+$03      ; (2) Bottom of string space
80AF:                   LINEAT          equ     STRSPC+$02      ; (2) Current line number
80B1:                   HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
80B3:                   FNKEYS          equ     HLPLN+$02       ; (128) text of FN keys
8133:                   BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of program   <-- actually this is the last value pre-filled by the firmware at startup
8136:                   BUFFER          equ     BASTXT+$03      ; (5) Input buffer
813B:                   STACK           equ     BUFFER+$05      ; (85) Initial stack
8190:                   CURPOS          equ     STACK+$55       ; (1) Character position on line
8191:                   LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag
8192:                   TYPE            equ     LCRFLG+$01      ; (1) Data type flag
8193:                   DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
8194:                   LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM
8196:                   TMSTPT          equ     LSTRAM+$02      ; (2) Temporary string pointer
8198:                   TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
81A4:                   TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
81A8:                   STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
81AA:                   CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
81AC:                   LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
81AE:                   DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
81B0:                   FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
81B1:                   LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
81B2:                   READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
81B3:                   BRKLIN          equ     READFG+$01      ; (2) Line of break
81B5:                   NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
81B7:                   ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
81B9:                   CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
81BB:                   PROGND          equ     CONTAD+$02      ; (2) End of program
81BD:                   VAREND          equ     PROGND+$02      ; (2) End of variables
81BF:                   ARREND          equ     VAREND+$02      ; (2) End of arrays
81C1:                   NXTDAT          equ     ARREND+$02      ; (2) Next data item
81C3:                   FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
81C5:                   FNARG           equ     FNRGNM+$02      ; (4) FN argument value
81C9:                   FPREG           equ     FNARG+$04       ; (3) Floating point register
81CC:                   FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
81CD:                   SGNRES          equ     FPEXP+$01       ; (1) Sign of result
81CE:                   TMRCNT          equ     SGNRES+$01      ; (4) TMR counter for 1/100 seconds
81D2:                   CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
81D5:                   CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
81D8:                   CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
81DB:                   CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
                        ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
81DE:                   SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
81DF:                   SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
81E0:                   SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
81E2:                   SCR_NAM_TB      equ     SCR_MODE+$02    ; (2) video name table address
81E4:                   SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
81E5:                   SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
81E6:                   SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
81E7:                   SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
81E8:                   SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
81E9:                   CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
81EA:                   LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
81EB:                   PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
81EC:                   CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
81ED:                   FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
81EE:                   BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
81EF:                   TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F1:                   TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F3:                   TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F5:                   TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
81F7:                   VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
821F:                   VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
8221:                   VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
                        ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
                                                                ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
                        ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
8223:                   CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (1/100s)
8225:                   CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (1/100s)
8227:                   CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (1/100s)
8229:                   KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
822A:                   KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
822B:                   TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
822C:                   LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
822D:                   CONTROLKEYS     equ     LASTKEYPRSD+$01 ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
                        ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
                                                                ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
822E:                   SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1(A), bit 1 for Port2(B): 0=OFF, 1=ON
822F:                   SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
8230:                   PBUFF           equ     SERABITS+$01    ; (13) Number print buffer
823D:                   MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
8240:                   PROGST          equ     MULVAL+$03      ; (100) Start of program text area
82A4:                   STLOOK          equ     PROGST+$64      ; Start of memory test
                        
                        ; BASIC ERROR CODE VALUES
                        ; These values act as an offset to point to the error message into the error table
                        ; must be incremented by 2 because they point to a word address jump
0000:                   NF              equ     $00             ; NEXT without FOR
0002:                   SN              equ     $02             ; Syntax error
0004:                   RG              equ     $04             ; RETURN without GOSUB
0006:                   OD              equ     $06             ; Out of DATA
0008:                   FC              equ     $08             ; Function call error
000A:                   OV              equ     $0A             ; Overflow
000C:                   OM              equ     $0C             ; Out of memory
000E:                   UL              equ     $0E             ; Undefined line number
0010:                   BS              equ     $10             ; Bad subscript
0012:                   DD              equ     $12             ; Re-Dimensioned array
0014:                   DZ              equ     $14             ; Division by zero (/0)
0016:                   ID              equ     $16             ; Illegal direct
0018:                   TM              equ     $18             ; Type mis-match
001A:                   OS              equ     $1A             ; Out of string space
001C:                   LS              equ     $1C             ; String too long
001E:                   ST              equ     $1E             ; String formula too complex
0020:                   CN              equ     $20             ; Can't continue
0022:                   UF              equ     $22             ; Undefined FN function
0024:                   MO              equ     $24             ; Missing operand
0026:                   HX              equ     $26             ; HEX error
0028:                   BN              equ     $28             ; BIN error
002A:                   GM              equ     $2A             ; No Graphics Mode
002C:                   SC              equ     $2C             ; Serial configuration
002E:                   SA              equ     $2E             ; Serial port already open
0030:                   HP              equ     $30             ; HELP call
                        
0EF2: C3F80E   [10]     COLD:   jp      STARTB          ; Jump for cold start
0EF5: C3900F   [10]     WARM:   jp      WARMST          ; Jump for warm start
                        
0EF8: C3FF0E   [10]     STARTB: jp      CSTART          ; Jump to initialise
0EFB: 201B                      defw    DEINT           ; Get integer -32768 to 32767
0EFD: C922                      defw    ABPASS          ; Return integer in AB
0EFF: 215E80   [10]     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
0F02: F9       [16]             ld      SP,HL           ; Set up a temporary stack
0F03: C3B03D   [26]             jp      INITST          ; Go to initialise
                        
0F06: 210014   [10]     INIT:   ld      HL,INITAB       ; Initialise workspace
0F09: 01DA00   [20]             ld      BC,INITBE-INITAB+3; Bytes to copy
0F0C: 115E80   [30]             ld      DE,WRKSPC       ; Into workspace RAM
0F0F: EDB0     [46|21]          ldir                    ; Copy data
0F11: EB       [50]             ex      DE,HL           ; Copy DE into HL
0F12: F9       [56]             ld      SP,HL           ; Temporary stack
0F13: CDB116   [73]             call    CLREG           ; Clear registers and stack
0F16: CD231D   [90]             call    PRNTCRLF        ; Output CRLF
0F19: 328F81   [103]            ld      (BUFFER+88+1),A ; Mark end of buffer
0F1C: 324082   [116]            ld      (PROGST),A      ; Initialise program area
0F1F: 1810     [128]            jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
0F21: 21DA0F   [10]     MSIZE:  ld      HL,MEMMSG       ; Point to message
0F24: CDE723   [27]             call    PRS             ; Output "Memory size"
0F27: CDCE16   [44]             call    PROMPT          ; Get input with '?'
0F2A: CD6A1A   [61]             call    GETCHR          ; Get next character
0F2D: B7       [65]             or      A               ; Set flags
0F2E: C2460F   [75|75]          jp      NZ,TSTMEM       ; If number - Test if RAM there
0F31: 21A482   [10]     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
0F34: 23       [ 6]     MLOOP:  inc     HL              ; Next byte
0F35: 7C       [10]             ld      A,H             ; Above address FFFF ?
0F36: B5       [14]             or      L
0F37: CA580F   [24|24]          jp      Z,SETTOP        ; Yes - 64K RAM
0F3A: 7E       [31]             ld      A,(HL)          ; Get contents
0F3B: 47       [35]             ld      B,A             ; Save it
0F3C: 2F       [39]             cpl                     ; Flip all bits
0F3D: 77       [46]             ld      (HL),A          ; Put it back
0F3E: BE       [53]             cp      (HL)            ; RAM there if same
0F3F: 70       [60]             ld      (HL),B          ; Restore old contents
0F40: CA340F   [70|70]          jp      Z,MLOOP         ; If RAM - test next byte
0F43: C3580F   [80]             jp      SETTOP          ; Top of RAM found
                        
0F46: CD3A1B   [17]     TSTMEM: call    ATOH            ; Get high memory into DE
0F49: B7       [21]             or      A               ; Set flags on last byte
0F4A: C26515   [31|31]          jp      NZ,SNERR        ; ?SN Error if bad character
0F4D: EB       [35]             ex      DE,HL           ; Address into HL
0F4E: 2B       [41]             dec     HL              ; Back one byte
0F4F: 3ED9     [48]             ld      A,%11011001     ; Test byte
0F51: 46       [55]             ld      B,(HL)          ; Get old contents
0F52: 77       [62]             ld      (HL),A          ; Load test byte
0F53: BE       [69]             cp      (HL)            ; RAM there if same
0F54: 70       [76]             ld      (HL),B          ; Restore old contents
0F55: C2210F   [86|86]          jp      NZ,MSIZE        ; Ask again if no RAM
                        
0F58: 2B       [ 6]     SETTOP: dec     HL              ; Back one byte
0F59: 11A382   [16]             ld      DE,STLOOK-1     ; See if enough RAM
0F5C: CD4118   [33]             call    CPDEHL          ; Compare DE with HL
0F5F: DA210F   [43|43]          jp      C,MSIZE         ; Ask again if not enough RAM
0F62: 119CFF   [53]             ld      DE,0-100        ; 100 Bytes string space
0F65: 229481   [69]             ld      (LSTRAM),HL     ; Save last available RAM
0F68: 19       [80]             add     HL,DE           ; Allocate string space
0F69: 22AD80   [96]             ld      (STRSPC),HL     ; Save string space
0F6C: CD8C16   [113]            call    CLRPTR          ; Clear program area
0F6F: 2AAD80   [129]            ld      HL,(STRSPC)     ; Get end of memory
0F72: 11EFFF   [139]            ld      DE,0-17         ; Offset for free bytes
0F75: 19       [150]            add     HL,DE           ; Adjust HL
0F76: 114082   [160]            ld      DE,PROGST       ; Start of program text
0F79: 7D       [164]            ld      A,L             ; Get LSB
0F7A: 93       [168]            sub     E               ; Adjust it
0F7B: 6F       [172]            ld      L,A             ; Re-save
0F7C: 7C       [176]            ld      A,H             ; Get MSB
0F7D: 9A       [180]            sbc     A,D             ; Adjust it
0F7E: 67       [184]            ld      H,A             ; Re-save
0F7F: E5       [195]            push    HL              ; Save bytes free
0F80: 21A90F   [205]            ld      HL,SIGNON       ; Sign-on message
0F83: CDE723   [222]            call    PRS             ; Output string
0F86: E1       [232]            pop     HL              ; Get bytes free back
0F87: CD872E   [249]            call    PRNTHL          ; Output amount of free memory
0F8A: 219C0F   [259]            ld      HL,BFREE        ; " Bytes free" message
0F8D: CDE723   [276]            call    PRS             ; Output string
                        
0F90: 313B81   [10]     WARMST: ld      SP,STACK        ; Temporary stack
0F93: CDB116   [17]     BRKRET: call    CLREG           ; Clear registers and stack
0F96: CD5A08   [34]             call    CURSOR_ON       ; enable cursor
0F99: C3BF15   [44]             jp      PRNTOK          ; Go to get command line
                        
0F9C: 20427974          BFREE:  defb    " Bytes free",CR,0
0FA0: 65732066          
0FA4: 7265650D          
0FA8: 00                
                        
0FA9: 5A383020          SIGNON: defb    "Z80 BASIC Ver 4.8",CR
0FAD: 42415349          
0FB1: 43205665          
0FB5: 7220342E          
0FB9: 380D              
0FBB: 436F7079                  defb    "Copyright ",251," 1978"
0FBF: 72696768          
0FC3: 7420FB20          
0FC7: 31393738          
0FCB: 20627920                  defb    " by Microsoft",CR,0
0FCF: 4D696372          
0FD3: 6F736F66          
0FD7: 740D00            
                        
0FDA: 4D656D6F          MEMMSG: defb    "Memory top",0
0FDE: 72792074          
0FE2: 6F7000            
                        
                        ; The following list reports all the functions supported by the interpreter.
                        ; To add a custom function, the user must first insert the reserved word here,
                        ; then into the list of the reserved words below, and finally must increment the
                        ; ZSGN token value and all the following ones after ZSGN by 1 for every added
                        ; function.
                        
                        ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
                        ; this list must be coherent with the tokens' functions list. This means that every
                        ; entry here must have the corresponding entry in the tokens list.
0FE5: FC2C              FNCTAB: defw    SGN
0FE7: 9122                      defw    TMR         ; added by Leonardo Miliani
0FE9: C02D                      defw    INT
0FEB: 122D                      defw    ABS
0FED: 6480                      defw    USR
0FEF: A722                      defw    FRE
0FF1: 2227                      defw    INP
0FF3: D522                      defw    POS
0FF5: 862F                      defw    SQR
0FF7: 6530                      defw    RND
0FF9: 502B                      defw    LOG
0FFB: D42F                      defw    EXP
0FFD: DA30                      defw    COS
0FFF: E030                      defw    SIN
1001: 4131                      defw    TAN
1003: 5631                      defw    ATN
1005: FE27                      defw    PEEK
1007: C131                      defw    DEEK
1009: 0528                      defw    VPEEK       ; added by Leonardo Miliani
100B: D529                      defw    VSTAT       ; added by Leonardo Miliani
100D: E029                      defw    SSTAT       ; added by Leonardo Miliani
100F: F429                      defw    INKEY       ; added by Leonardo Miliani
1011: 2935                      defw    POINT       ; added by Leonardo Miliani
1013: B925                      defw    INSTR       ; added by Leonardo Miliani
1015: 5925                      defw    LEN
1017: 7123                      defw    STR
1019: E926                      defw    VAL
101B: 6825                      defw    ASC
101D: 7925                      defw    CHR
101F: AB3C                      defw    HEX         ; added by Grant Searle
1021: 3C3D                      defw    BIN         ; added by Grant Searle
1023: 8925                      defw    LEFT
1025: AF26                      defw    RIGHT
1027: B926                      defw    MID
                        
                        ; RESERVED WORD LIST
                        ; Here are all the reserved words used by the interpreter
                        ; To add custom functions/commands, the user must insert the keyword
                        ; in this list, following the schematic
1029: C54E44            WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
102C: C64F52                    defb    'F'+$80,"OR"
102F: CE455854                  defb    'N'+$80,"EXT"
1033: C4415441                  defb    'D'+$80,"ATA"
1037: C94E5055                  defb    'I'+$80,"NPUT"
103B: 54                
103C: C4494D                    defb    'D'+$80,"IM"
103F: D2454144                  defb    'R'+$80,"EAD"
1043: CC4554                    defb    'L'+$80,"ET"
1046: C74F544F                  defb    'G'+$80,"OTO"
104A: D2554E                    defb    'R'+$80,"UN"
104D: C946                      defb    'I'+$80,"F"
104F: D2455354                  defb    'R'+$80,"ESTORE"
1053: 4F5245            
1056: C74F5355                  defb    'G'+$80,"OSUB"
105A: 42                
105B: D2455455                  defb    'R'+$80,"ETURN"
105F: 524E              
1061: D2454D                    defb    'R'+$80,"EM"
1064: D3544F50                  defb    'S'+$80,"TOP"
1068: CF5554                    defb    'O'+$80,"UT"
106B: CF4E                      defb    'O'+$80,"N"
106D: CE554C4C                  defb    'N'+$80,"ULL"
1071: D7414954                  defb    'W'+$80,"AIT"
1075: C44546                    defb    'D'+$80,"EF"
1078: D04F4B45                  defb    'P'+$80,"OKE"
107C: C44F4B45                  defb    'D'+$80,"OKE"
1080: D6504F4B                  defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
1084: 45                
1085: D3524547                  defb    'S'+$80,"REG"           ; added by Leonardo Miliani
1089: D6524547                  defb    'V'+$80,"REG"           ; added by Leonardo Miliani
108D: D3435245                  defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
1091: 454E              
1093: CC4F4341                  defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
1097: 5445              
1099: D34F554E                  defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
109D: 44                
109E: D64F4C55                  defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
10A2: 4D45              
10A4: D0415553                  defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
10A8: 45                
10A9: C34F4C4F                  defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
10AD: 52                
10AE: D04C4F54                  defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
10B2: C4524157                  defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
10B6: C3495243                  defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
10BA: 4C45              
10BC: D041494E                  defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
10C0: 54                
10C1: D3455249                  defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
10C5: 414C              
10C7: C8454C50                  defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
10CB: C34C53                    defb    'C'+$80,"LS"            ; restored command
10CE: CB4559                    defb    'K'+$80,"EY"            ; added by Leonardo Miliani
10D1: CE4D49                    defb    'N'+$80,"MI"            ; added by Leonardo Miliani
10D4: C7505249                  defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
10D8: 4E54              
10DA: D7494454                  defb    'W'+$80,"IDTH"
10DE: 48                
10DF: D35953                    defb    'S'+$80,"YS"            ; added by Leonardo Miliani
10E2: D2455345                  defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
10E6: 54                
10E7: D052494E                  defb    'P'+$80,"RINT"
10EB: 54                
10EC: C34F4E54                  defb    'C'+$80,"ONT"
10F0: CC495354                  defb    'L'+$80,"IST"
10F4: C34C4541                  defb    'C'+$80,"LEAR"
10F8: 52                
10F9: C34C4F41                  defb    'C'+$80,"LOAD"
10FD: 44                
10FE: C3534156                  defb    'C'+$80,"SAVE"
1102: 45                
1103: CE4557                    defb    'N'+$80,"EW"
1106: D4414228                  defb    'T'+$80,"AB("
110A: D44F                      defb    'T'+$80,"O"
110C: C64E                      defb    'F'+$80,"N"
110E: D3504328                  defb    'S'+$80,"PC("
1112: D448454E                  defb    'T'+$80,"HEN"
1116: CE4F54                    defb    'N'+$80,"OT"
1119: D3544550                  defb    'S'+$80,"TEP"
                                ; from here: operators
111D: AB                        defb    '+'+$80
111E: AD                        defb    '-'+$80
111F: AA                        defb    '*'+$80
1120: AF                        defb    '/'+$80
1121: A5                        defb    '%'+$80
1122: A3                        defb    '#'+$80
1123: DE                        defb    '^'+$80
1124: C14E44                    defb    'A'+$80,"ND"
1127: D84F52                    defb    'X'+$80,"OR"
112A: CF52                      defb    'O'+$80,"R"
112C: BE                        defb    '>'+$80
112D: BD                        defb    '='+$80
112E: BC                        defb    '<'+$80
                        
                                ; from here there are the tokens' FUNCTIONS list
                                ; this list must be coherent with the functions list above
112F: D3474E                    defb    'S'+$80,"GN"
1132: D44D52                    defb    'T'+$80,"MR"            ; added by Leonardo Miliani
1135: C94E54                    defb    'I'+$80,"NT"
1138: C14253                    defb    'A'+$80,"BS"
113B: D55352                    defb    'U'+$80,"SR"
113E: C65245                    defb    'F'+$80,"RE"
1141: C94E50                    defb    'I'+$80,"NP"
1144: D04F53                    defb    'P'+$80,"OS"
1147: D35152                    defb    'S'+$80,"QR"
114A: D24E44                    defb    'R'+$80,"ND"
114D: CC4F47                    defb    'L'+$80,"OG"
1150: C55850                    defb    'E'+$80,"XP"
1153: C34F53                    defb    'C'+$80,"OS"
1156: D3494E                    defb    'S'+$80,"IN"
1159: D4414E                    defb    'T'+$80,"AN"
115C: C1544E                    defb    'A'+$80,"TN"
115F: D045454B                  defb    'P'+$80,"EEK"
1163: C445454B                  defb    'D'+$80,"EEK"
1167: D6504545                  defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
116B: 4B                
116C: D6535441                  defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
1170: 54                
1171: D3535441                  defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
1175: 54                
1176: C94E4B45                  defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
117A: 59                
117B: D04F494E                  defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
117F: 54                
1180: C94E5354                  defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
1184: 52                
1185: CC454E                    defb    'L'+$80,"EN"
1188: D3545224                  defb    'S'+$80,"TR$"
118C: D6414C                    defb    'V'+$80,"AL"
118F: C15343                    defb    'A'+$80,"SC"
1192: C3485224                  defb    'C'+$80,"HR$"
1196: C8455824                  defb    'H'+$80,"EX$"           ; added by Grant Searle
119A: C2494E24                  defb    'B'+$80,"IN$"           ; added by Grant Searle
119E: CC454654                  defb    'L'+$80,"EFT$"
11A2: 24                
11A3: D2494748                  defb    'R'+$80,"IGHT$"
11A7: 5424              
11A9: CD494424                  defb    'M'+$80,"ID$"
11AD: 80                        defb    $80                     ; End-of-list marker
                        
                        ; KEYWORD ADDRESS TABLE
                        ; this list must be coherent with the commands'
                        ; tokens list above
11AE: B41A              WORDTB: defw    PEND
11B0: B119                      defw    FOR
11B2: 941E                      defw    NEXT
11B4: 0D1C                      defw    DATA
11B6: 991D                      defw    INPUT
11B8: E920                      defw    DIM
11BA: CB1D                      defw    READ
11BC: 241C                      defw    LET
11BE: CA1B                      defw    GOTO
11C0: A51B                      defw    RUN
11C2: 9C1C                      defw    IF
11C4: 7A1A                      defw    RESTOR
11C6: B91B                      defw    GOSUB
11C8: E81B                      defw    RETURN
11CA: 0F1C                      defw    REM
11CC: B21A                      defw    STOP
11CE: 2E27                      defw    POUT
11D0: 7E1C                      defw    ON
11D2: 0F1C                      defw    REM         ; removed - was NULL
11D4: 3427                      defw    WAIT
11D6: DD22                      defw    DEF
11D8: 2828                      defw    POKE
11DA: CC31                      defw    DOKE
11DC: 2D28                      defw    VPOKE       ; added by Leonardo Miliani
11DE: 6A28                      defw    SREG        ; added by Leonardo Miliani
11E0: B929                      defw    VREG        ; added by Leonardo Miliani
11E2: 0232                      defw    SCREEN      ; mod function: now it sets up a graphics mode (Leonardo Miliani)
11E4: 3828                      defw    LOCATE      ; added by Leonardo Miliani
11E6: C428                      defw    SOUND       ; added by Leonardo Miliani
11E8: 8B28                      defw    VOLUME      ; added by Leonardo Miliani
11EA: E331                      defw    PAUSE       ; added by Leonardo Miliani
11EC: 7D32                      defw    COLOR       ; added by Leonardo Miliani
11EE: 7C35                      defw    PLOT        ; added by Leonardo Miliani
11F0: 0F36                      defw    DRAW        ; added by Leonardo Miliani
11F2: 4537                      defw    CIRCLE      ; added by Leonardo Miliani
11F4: 2A34                      defw    PAINT       ; added by Leonardo Miliani
11F6: 4A39                      defw    SERIAL      ; added by Leonardo Miliani
11F8: 453B                      defw    HELP        ; changed by Leonardo Miliani - was LINES
11FA: A531                      defw    CLS
11FC: 603B                      defw    KEY         ; added by Leonardo Miliani
11FE: 7627                      defw    NMI         ; added by Leonardo Miliani
1200: 3933                      defw    GPRINT      ; added by Leonardo Miliani
1202: B931                      defw    WIDTH
1204: D027                      defw    SYS         ; added by Leonardo Miliani
1206: A13D                      defw    RESET       ; new behaviour: now it resets the system
1208: C01C                      defw    PRINT
120A: E61A                      defw    CONT
120C: A618                      defw    LIST
120E: 5F1B                      defw    CLEAR
1210: 0F1C                      defw    REM         ; not implemented (was CLOAD)
1212: 0F1C                      defw    REM         ; not implemented (was CSAVE)
1214: 8B16                      defw    NEW
                        
                        ; RESERVED WORD TOKEN VALUES
                        ; if you add a function or command you must increment by 1
                        ; the values below. Pay attention that you must increment only the
                        ; values AFTER the position where you entered the function/command word
                        ; in the "Reserver word list" above. I.E.: VPOKE has been added between
                        ; DOKE and SCREEN, and since REM is the reserved work listed below
                        ; that is before the point where VPOKE has been entered, every entry
                        ; after REM has been incremented.
                        ; Another example: when TMR has been added, since it's a function, every
                        ; entry after & included ZSGN must be checked (read below)
                        
0080:                   ZEND    equ     $80             ; END        <-- from here, there are the commands
0081:                   ZFOR    equ     $81             ; FOR
0083:                   ZDATA   equ     $83             ; DATA
0088:                   ZGOTO   equ     $88             ; GOTO
008C:                   ZGOSUB  equ     $8C             ; GOSUB
008E:                   ZREM    equ     $8E             ; REM
00AD:                   ZPRINT  equ     $AD             ; PRINT
00B3:                   ZNEW    equ     $B3             ; NEW
                        
00B4:                   ZTAB    equ     $B4             ; TAB
00B5:                   ZTO     equ     $B5             ; TO
00B6:                   ZFN     equ     $B6             ; FN
00B7:                   ZSPC    equ     $B7             ; SPC
00B8:                   ZTHEN   equ     $B8             ; THEN
00B9:                   ZNOT    equ     $B9             ; NOT
00BA:                   ZSTEP   equ     $BA             ; STEP
                        
00BB:                   ZPLUS   equ     $BB             ; +         <-- from here, there are the math operators
00BC:                   ZMINUS  equ     $BC             ; -
00BD:                   ZTIMES  equ     $BD             ; *
00BE:                   ZDIV    equ     $BE             ; /
00BF:                   ZMOD    equ     $BF             ; %
00C0:                   ZDINT   equ     $C0             ; #
00C4:                   ZOR     equ     $C4             ; OR
00C5:                   ZGTR    equ     $C5             ; >
00C6:                   ZEQUAL  equ     $C6             ; M
00C7:                   ZLTH    equ     $C7             ; <
                        
00C8:                   ZSGN    equ     $C8             ; SGN       <-- from here, there are the functions
00DE:                   ZPOINT  equ     $DE             ; ZPOINT    <-- if the user enters a custom function, between
                                                        ;               SGN and POINT, he/she must increment this pointer by 1
00DF:                   ZINSTR  equ     $DF             ; ZINSTR    <-- same here
00E7:                   ZLEFT   equ     $E7             ; LEFT$     <-- if the user enters a custom function anywhere,
                                                        ;               he/she must increment this pointer by 1
                        
                        ; ARITHMETIC PRECEDENCE TABLE
                        ; in the formulas below, <last> is a number stored into the stack that must be retrieved
                        ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
1216: 79                PRITAB: defb    $79             ; Precedence value
1217: 6E2E                      defw    PADD            ; FPREG = <last> + FPREG
                        
1219: 79                        defb    $79             ; Precedence value
121A: 512A                      defw    PSUB            ; FPREG = <last> - FPREG
                        
121C: 7C                        defb    $7C             ; Precedence value
121D: 8F2B                      defw    MULT            ; PPREG = <last> * FPREG
                        
121F: 7C                        defb    $7C             ; Precedence value
1220: 412C                      defw    DIV             ; FPREG = <last> / FPREG
                        
1222: 7C                        defb    $7C             ; Precedence value
1223: EC2B                      defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
                        
1225: 7C                        defb    $7C             ; precedence value
1226: E42B                      defw    DINT            ; FPREG = INT(<last> / FPREG )
                        
1228: 7F                        defb    $7F             ; Precedence value
1229: 8F2F                      defw    POWER           ; FPREG = <last> ^ FPREG
                        
122B: 50                        defb    $50             ; Precedence value
122C: 3220                      defw    PAND            ; FPREG = <last> AND FPREG
                        
122E: 4A                        defb    $4A             ; Precedence value
122F: 3A20                      defw    PXOR            ; FPREG = <last> XOR FPREG
                        
1231: 46                        defb    $46             ; Precedence value
1232: 3520                      defw    POR             ; FPREG = <last> OR FPREG
                        
                        ; BASIC ERROR CODE LIST
                        
1234:                   ERRORS  equ $
1234: 4E455854          NFMSG:  defb    "NEXT Without FOR",0
1238: 20576974          
123C: 686F7574          
1240: 20464F52          
1244: 00                
1245: 53796E74          SNMSG:  defb    "Syntax",0
1249: 617800            
124C: 52455455          RGMSG:  defb    "RETURN without GOSUB",0
1250: 524E2077          
1254: 6974686F          
1258: 75742047          
125C: 4F535542          
1260: 00                
1261: 4F757420          ODMSG:  defb    "Out of DATA",0
1265: 6F662044          
1269: 41544100          
126D: 496C6C65          FCMSG:  defb    "Illegal Function Call",0
1271: 67616C20          
1275: 46756E63          
1279: 74696F6E          
127D: 2043616C          
1281: 6C00              
1283: 4F766572          OVMSG:  defb    "Overflow",0
1287: 666C6F77          
128B: 00                
128C: 4F757420          OMMSG:  defb    "Out of Memory",0
1290: 6F66204D          
1294: 656D6F72          
1298: 7900              
129A: 556E6465          ULMSG:  defb    "Undefined Line",0
129E: 66696E65          
12A2: 64204C69          
12A6: 6E6500            
12A9: 42616420          BSMSG:  defb    "Bad Subscript",0
12AD: 53756273          
12B1: 63726970          
12B5: 7400              
12B7: 52652D44          DDMSG:  defb    "Re-Dimensioned Array",0
12BB: 696D656E          
12BF: 73696F6E          
12C3: 65642041          
12C7: 72726179          
12CB: 00                
12CC: 44697669          DZMSG:  defb    "Division by Zero",0
12D0: 73696F6E          
12D4: 20627920          
12D8: 5A65726F          
12DC: 00                
12DD: 496C6C65          IDMSG:  defb    "Illegal Direct",0
12E1: 67616C20          
12E5: 44697265          
12E9: 637400            
12EC: 54797065          TMMSG:  defb    "Type Mis-match",0
12F0: 204D6973          
12F4: 2D6D6174          
12F8: 636800            
12FB: 4F757420          OSMSG:  defb    "Out of String Space",0
12FF: 6F662053          
1303: 7472696E          
1307: 67205370          
130B: 61636500          
130F: 53747269          LSMSG:  defb    "String Too Long",0
1313: 6E672054          
1317: 6F6F204C          
131B: 6F6E6700          
131F: 53747269          STMSG:  defb    "String Formula Too Complex",0
1323: 6E672046          
1327: 6F726D75          
132B: 6C612054          
132F: 6F6F2043          
1333: 6F6D706C          
1337: 657800            
133A: 43616E27          CNMSG:  defb    "Can't Continue",0
133E: 7420436F          
1342: 6E74696E          
1346: 756500            
1349: 556E6465          UFMSG:  defb    "Undefined FN Function",0
134D: 66696E65          
1351: 6420464E          
1355: 2046756E          
1359: 6374696F          
135D: 6E00              
135F: 4D697373          MOMSG:  defb    "Missing Operand",0
1363: 696E6720          
1367: 4F706572          
136B: 616E6400          
136F: 48455820          HXMSG:  defb    "HEX Format",0
1373: 466F726D          
1377: 617400            
137A: 42494E20          BNMSG:  defb    "BIN Format",0
137E: 466F726D          
1382: 617400            
1385: 4E6F2047          GMMSG:  defb    "No Graphics Mode",0
1389: 72617068          
138D: 69637320          
1391: 4D6F6465          
1395: 00                
1396: 53657269          SCMSG:  defb    "Serial Configuration",0
139A: 616C2043          
139E: 6F6E6669          
13A2: 67757261          
13A6: 74696F6E          
13AA: 00                
13AB: 53657269          SAMSG:  defb    "Serial Port Already Open",0
13AF: 616C2050          
13B3: 6F727420          
13B7: 416C7265          
13BB: 61647920          
13BF: 4F70656E          
13C3: 00                
13C4: 48454C50          HPMSG:  defb    "HELP Call",0
13C8: 2043616C          
13CC: 6C00              
                        
13CE:                   ERRTBL  equ $
13CE: 3412              NFPTR   defw    NFMSG
13D0: 4512              SNPTR   defw    SNMSG
13D2: 4C12              RGPTR   defw    RGMSG
13D4: 6112              ODPTR   defw    ODMSG
13D6: 6D12              FCPTR   defw    FCMSG
13D8: 8312              OVPTR   defw    OVMSG
13DA: 8C12              OMPTR   defw    OMMSG
13DC: 9A12              ULPTR   defw    ULMSG
13DE: A912              BSPTR   defw    BSMSG
13E0: B712              DDPTR   defw    DDMSG
13E2: CC12              DZPTR   defw    DZMSG
13E4: DD12              IDPTR   defw    IDMSG
13E6: EC12              TMPTR   defw    TMMSG
13E8: FB12              OSPTR   defw    OSMSG
13EA: 0F13              LSPTR   defw    LSMSG
13EC: 1F13              STPTR   defw    STMSG
13EE: 3A13              CNPTR   defw    CNMSG
13F0: 4913              UFPTR   defw    UFMSG
13F2: 5F13              MOPTR   defw    MOMSG
13F4: 6F13              HXPTR   defw    HXMSG
13F6: 7A13              BNPTR   defw    BNMSG
13F8: 8513              GMPRT   defw    GMMSG
13FA: 9613              SCPTR   defw    SCMSG
13FC: AB13              SAPTR   defw    SAMSG
13FE: C413              HPPTR   defw    HPMSG
                        
                        ; INITIALISATION TABLE -------------------------------------------------------
                        ; these values are copied into RAM at startup
1400: C3900F   [10]     INITAB: jp      WARMST          ; Warm start jump
1403: ED4500                    defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
1406: C3351B   [20]             jp      FCERR           ; "USR (X)" jump (Set to Error)
1409: D300     [31]             out     (0),A           ; "out p,n" skeleton
140B: C9       [41]             ret
140C: D600     [48]             sub     $00             ; Division support routine
140E: 6F       [52]             ld      L,A
140F: 7C       [56]             ld      A,H
1410: DE00     [63]             sbc     A,$00
1412: 67       [67]             ld      H,A
1413: 78       [71]             ld      A,B
1414: DE00     [78]             sbc     A,$00
1416: 47       [82]             ld      B,A
1417: 3E00     [89]             ld      A,$00
1419: C9       [99]             ret
141A: 000000                    defb    $00,$00,$00     ; Random number seed table used by RND
141D: 354ACA99                  defb    $35,$4A,$CA,$99 ;-2.65145E+07
1421: 391C7698                  defb    $39,$1C,$76,$98 ; 1.61291E+07
1425: 2295B398                  defb    $22,$95,$B3,$98 ;-1.17691E+07
1429: 0ADD4798                  defb    $0A,$DD,$47,$98 ; 1.30983E+07
142D: 53D19999                  defb    $53,$D1,$99,$99 ;-2-01612E+07
1431: 0A1A9F98                  defb    $0A,$1A,$9F,$98 ;-1.04269E+07
1435: 65BCCD98                  defb    $65,$BC,$CD,$98 ;-1.34831E+07
1439: D6773E98                  defb    $D6,$77,$3E,$98 ; 1.24825E+07
143D: 52C74F80                  defb    $52,$C7,$4F,$80 ; Last random number
1441: DB00     [110]            in      A,($00)         ; INP (x) skeleton
1443: C9       [120]            ret
1444: FF                        defb    $FF             ; Terminal width (255 = no auto CRLF)
1445: 14                        defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
1446: 00                        defb    $00             ; No nulls after input bytes
1447: 00                        defb    $00             ; Output enabled (^O off)
1448: 0000                      defw    $00             ; Array load/save check sum
144A: 00                        defb    $00             ; Break not by NMI
144B: 00                        defb    $00             ; Break flag
144C: C3C717   [130]            jp      TTYLIN          ; Input reflection (set to TTY)
144F: A482                      defw    STLOOK          ; Temp string space
1451: FEFF                      defw    -2              ; Current line number (cold)
1453: FFFF                      defw    -1              ; Current line with errors (no errors)
1455: 4C495354          DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
1459: 0D000000          
145D: 00000000          
1461: 00000000          
1465: 52554E0D                  defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
1469: 00000000          
146D: 00...             
1475: 53435245                  defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
1479: 454E310D          
147D: 00000000          
1481: 00000000          
1485: 434F4C4F                  defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
1489: 52312C31          
148D: 352C350D          
1491: 00000000          
1495: 53455249                  defm    "SERIAL1,38400",13,0,0              ; KEY 5
1499: 414C312C          
149D: 33383430          
14A1: 300D0000          
14A5: 53435245                  defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
14A9: 454E320D          
14AD: 00000000          
14B1: 00000000          
14B5: 434F4E54                  defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
14B9: 0D000000          
14BD: 00000000          
14C1: 00000000          
14C5: 48454C50                  defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
14C9: 0D000000          
14CD: 00000000          
14D1: 00000000          
14D5: 4182                      defw    PROGST+1        ; Start of program text
14D7:                   INITBE:
                        
                        ; END OF INITIALISATION TABLE ---------------------------------------------------
                        
14D7: 20457272          ERRMSG: defb    " Error",0
14DB: 6F7200            
14DE: 20696E20          INMSG:  defb    " in ",0
14E2: 00                
14E2:                   ZERBYT  equ     $-1             ; A zero byte
14E3: 4F6B0D00          OKMSG:  defb    "Ok",CR,0,0
14E7: 00                
14E8: 42726561          BRKMSG: defb    "Break",0
14EC: 6B00              
                        
14EE: 210400   [10]     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
14F1: 39       [21]             add     HL,SP           ; same index as specified
14F2: 7E       [ 7]     LOKFOR: ld      A,(HL)          ; Get block ID
14F3: 23       [13]             inc     HL              ; Point to index address
14F4: FE81     [20]             cp      ZFOR            ; Is it a "FOR" token
14F6: C0       [25|31]          ret     NZ              ; No - exit
14F7: 4E       [32]             ld      C,(HL)          ; BC = Address of "FOR" index
14F8: 23       [38]             inc     HL
14F9: 46       [45]             ld      B,(HL)
14FA: 23       [51]             inc     HL              ; Point to sign of STEP
14FB: E5       [62]             push    HL              ; Save pointer to sign
14FC: 69       [66]             ld      L,C             ; HL = address of "FOR" index
14FD: 60       [70]             ld      H,B
14FE: 7A       [74]             ld      A,D             ; See if an index was specified
14FF: B3       [78]             or      E               ; DE = 0 if no index specified
1500: EB       [82]             ex      DE,HL           ; Specified index into HL
1501: CA0815   [92|92]          jp      Z,INDFND        ; Skip if no index given
1504: EB       [96]             ex      DE,HL           ; Index back into DE
1505: CD4118   [113]            call    CPDEHL          ; Compare index with one given
1508: 010D00   [10]     INDFND: ld      BC,16-3         ; Offset to next block
150B: E1       [20]             pop     HL              ; Restore pointer to sign
150C: C8       [25|31]          ret     Z               ; Return if block found
150D: 09       [36]             add     HL,BC           ; Point to next block
150E: C3F214   [46]             jp      LOKFOR          ; Keep on looking
                        
1511: CD2B15   [17]     MOVUP:  call    ENFMEM          ; See if enough memory
1514: C5       [11]     MOVSTR: push    BC              ; Save end of source
1515: E3       [30]             ex      (SP),HL         ; Swap source and dest" end
1516: C1       [40]             pop     BC              ; Get end of destination
1517: CD4118   [17]     MOVLP:  call    CPDEHL          ; See if list moved
151A: 7E       [24]             ld      A,(HL)          ; Get byte
151B: 02       [31]             ld      (BC),A          ; Move it
151C: C8       [36|42]          ret     Z               ; Exit if all done
151D: 0B       [42]             dec     BC              ; Next byte to move to
151E: 2B       [48]             dec     HL              ; Next byte to move
151F: C31715   [58]             jp      MOVLP           ; Loop until all bytes moved
                        
1522: E5       [11]     CHKSTK: push    HL              ; Save code string address
1523: 2ABF81   [27]             ld      HL,(ARREND)     ; Lowest free memory
1526: 0600     [34]             ld      B,$00           ; BC = Number of levels to test
1528: 09       [45]             add     HL,BC           ; 2 Bytes for each level
1529: 09       [56]             add     HL,BC
152A: 3E                        defb    $3E             ; Skip "push HL"
152B: E5       [11]     ENFMEM: push    HL              ; Save code string address
152C: 3ED0     [18]             ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
152E: 95       [22]             sub     L
152F: 6F       [26]             ld      L,A
1530: 3EFF     [33]             ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
1532: 9C       [37]             sbc     A,H
1533: DA3A15   [47|47]          jp      C,OMERR         ; Not enough - ?OM Error
1536: 67       [51]             ld      H,A
1537: 39       [62]             add     HL,SP           ; Test if stack is overflowed
1538: E1       [72]             pop     HL              ; Restore code string address
1539: D8       [77|83]          ret     C               ; Return if enough memory
153A: 1E0C     [ 7]     OMERR:  ld      E,OM            ; ?OM Error
153C: C37915   [17]             jp      ERROR
                        
                        
                        ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
153F: F5       [11]     EXITGM: push    AF              ; store AF
1540: 3AE081   [24]             ld      A,(SCR_MODE)    ; check screen mode
1543: FE02     [31]             cp      $02             ; G2?
1545: CA4C15   [41|41]          jp      Z,LDG1          ; yes, back to G1
1548: FE03     [48]             cp      $03             ; G3?
154A: 2011     [55|60]          jr      NZ,LDG1ND       ; no, so return
154C: E5       [11]     LDG1:   push    HL              ; store HL
154D: D5       [22]             push    DE              ; store DE
154E: 110100   [32]             ld      DE,$0001        ; sprites set to defaults, G1 mode
1551: F3       [36]             di                      ; disable INTs
1552: CD7E03   [53]             call    initVDP         ; initialize VDP with mode pointed by E
1555: FB       [57]             ei                      ; re-enable INTs
1556: 3E01     [64]             ld      A,$01           ; activate the...
1558: 32EB81   [77]             ld      (PRNTVIDEO),A   ; ...video buffer...
155B: D1       [87]             pop     DE              ; retrieve DE
155C: E1       [97]             pop     HL              ; retrieve HL
155D: F1       [10]     LDG1ND: pop     AF              ; retrieve AF
155E: C9       [20]             ret                     ; return to caller
                        
                        
155F: 2AAE81   [16]     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
1562: 22AF80   [32]             ld      (LINEAT),HL     ; Save as current line
1565: 1E02     [ 7]     SNERR:  ld      E,SN            ; ?SN Error
1567: 01                        defb    $01             ; Skip "ld E,DZ"
1568: 1E14     [ 7]     DZERR:  ld      E,DZ            ; ?/0 Error
156A: 01                        defb    $01             ; Skip "ld E,NF"
156B: 1E00     [ 7]     NFERR:  ld      E,NF            ; ?NF Error
156D: 01                        defb    $01             ; Skip "ld E,DD"
156E: 1E12     [ 7]     DDERR:  ld      E,DD            ; ?DD Error
1570: 01                        defb    $01             ; Skip "ld E,UF"
1571: 1E22     [ 7]     UFERR:  ld      E,UF            ; ?UF Error
1573: 01                        defb    $01             ; Skip "ld E,OV
1574: 1E0A     [ 7]     OVERR:  ld      E,OV            ; ?OV Error
1576: 01                        defb    $01             ; Skip "ld E,TM"
1577: 1E18     [ 7]     TMERR:  ld      E,TM            ; ?TM Error
                        
1579: CDB116   [17]     ERROR:  call    CLREG           ; Clear registers and stack
157C: CD3F15   [34]             call    EXITGM          ; exit from graphic modes
157F: 32A580   [47]             ld      (CTLOFG),A      ; Enable output (A is 0)
1582: CD5A08   [64]             call    CURSOR_ON       ; enable cursor
1585: CD111D   [81]             call    STTLIN          ; Start new line
1588: 21CE13   [91]             ld      HL,ERRTBL       ; Point to error codes
158B: 57       [95]             ld      D,A             ; D = 0 (A is 0)
158C: 3E3F     [102]            ld      A,'?'
158E: CD5218   [119]            call    OUTC            ; Output '?'
1591: 19       [130]            add     HL,DE           ; Offset to correct error code
1592: 5E       [137]            ld      E,(HL)          ; load pointer to error message
1593: 23       [143]            inc     HL              ; by loading LSB,
1594: 56       [150]            ld      D,(HL)          ; then MSB
1595: 626B     [158]            ld      HL,DE           ; load pointer to HL
1597: CDE723   [175]            call    PRS             ; Output error message
159A: 21D714   [185]            ld      HL,ERRMSG       ; "Error" message
159D: CDE723   [17]     ERRIN:  call    PRS             ; Output message
15A0: 2AAF80   [33]             ld      HL,(LINEAT)     ; Get line of error
15A3: 11FEFF   [43]             ld      DE,-2           ; Cold start error if -2
15A6: CD4118   [60]             call    CPDEHL          ; See if cold start error
15A9: CAFF0E   [70|70]          jp      Z,CSTART        ; Cold start error - Restart
15AC: 7C       [74]             ld      A,H             ; Was it a direct error?
15AD: A5       [78]             and     L               ; Line = -1 if direct error
15AE: 3C       [82]             inc     A
15AF: CABA15   [92|92]          jp      Z,PTLN          ; Yes, jump over
15B2: E5       [103]            push    HL              ; indirect mode - store HL
15B3: 2AAF80   [119]            ld      HL,(LINEAT)     ; copy current line number
15B6: 22B180   [135]            ld      (HLPLN),HL      ; save in HELP line register
15B9: E1       [145]            pop     HL              ; retrieve HL
15BA: C47F2E   [10|17]  PTLN:   call    NZ,LINEIN       ; No - output line of error
                        
15BD: 3E                        defb    $3E             ; Skip "pop BC"
15BE: C1       [10]     POPNOK: pop     BC              ; Drop address in input buffer
                        
                        ; run into direct mode: print OK and get command
15BF: AF       [ 4]     PRNTOK: xor     A               ; Output "Ok" and get command
15C0: 32A580   [17]             ld      (CTLOFG),A      ; Enable output
15C3: CD111D   [34]             call    STTLIN          ; Start new line
15C6: 21E314   [44]             ld      HL,OKMSG        ; "Ok" message
15C9: CDE723   [61]             call    PRS             ; Output "Ok"
15CC: CD5A08   [17]     GETCMD: call    CURSOR_ON       ; enable cursor
15CF: 21FFFF   [27]             ld      HL,-1           ; Flag direct mode
15D2: 22AF80   [43]             ld      (LINEAT),HL     ; Save as current line
15D5: CDC717   [60]             call    GETLIN          ; Get an input line
15D8: DACC15   [70|70]          jp      C,GETCMD        ; Get line again if break
15DB: CD6A1A   [87]             call    GETCHR          ; Get first character
15DE: 17       [91]             rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
15DF: DA6515   [101|101]        jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
15E2: 1F       [105]            rra                     ; recover original char and Carry
15E3: 3C       [109]            inc     A               ; Test if end of line
15E4: 3D       [113]            dec     A               ; Without affecting Carry
15E5: CACC15   [123|123]        jp      Z,GETCMD        ; Nothing entered - Get another
15E8: F5       [134]            push    AF              ; Save Carry status
15E9: CD7008   [151]            call    CURSOR_OFF      ; cursor disabled
15EC: CD3A1B   [168]            call    ATOH            ; Get line number into DE
15EF: D5       [179]            push    DE              ; Save line number
15F0: CDDE16   [196]            call    CRUNCH          ; Tokenise rest of line
15F3: 47       [200]            ld      B,A             ; Length of tokenised line
15F4: D1       [210]            pop     DE              ; Restore line number
15F5: F1       [220]            pop     AF              ; Restore Carry
15F6: D24A1A   [230|230]        jp      NC,EXCUTE       ; No line number - Direct mode
15F9: D5       [241]            push    DE              ; Save line number
15FA: C5       [252]            push    BC              ; Save length of tokenised line
15FB: AF       [256]            xor     A
15FC: 32B181   [269]            ld      (LSTBIN),A      ; Clear last byte input
15FF: CD6A1A   [286]            call    GETCHR          ; Get next character
1602: B7       [290]            or      A               ; Set flags
1603: F5       [301]            push    AF              ; And save them
1604: CD6B16   [318]            call    SRCHLN          ; Search for line number in DE
1607: DA1016   [328|328]        jp      C,LINFND        ; Jump if line found
160A: F1       [338]            pop     AF              ; Get status
160B: F5       [349]            push    AF              ; And re-save
160C: CAE31B   [359|359]        jp      Z,ULERR         ; Nothing after number - Error
160F: B7       [363]            or      A               ; Clear Carry
1610: C5       [11]     LINFND: push    BC              ; Save address of line in prog
1611: D22716   [21|21]          jp      NC,INEWLN       ; Line not found - Insert new
1614: EB       [25]             ex      DE,HL           ; Next line address in DE
1615: 2ABB81   [41]             ld      HL,(PROGND)     ; End of program
1618: 1A       [ 7]     SFTPRG: ld      A,(DE)          ; Shift rest of program down
1619: 02       [14]             ld      (BC),A
161A: 03       [20]             inc     BC              ; Next destination
161B: 13       [26]             inc     DE              ; Next source
161C: CD4118   [43]             call    CPDEHL          ; All done?
161F: C21816   [53|53]          jp      NZ,SFTPRG       ; More to do
1622: 60       [57]             ld      H,B             ; HL - New end of program
1623: 69       [61]             ld      L,C
1624: 22BB81   [77]             ld      (PROGND),HL     ; Update end of program
                        
1627: D1       [10]     INEWLN: pop     DE              ; Get address of line,
1628: F1       [20]             pop     AF              ; Get status
1629: CA4E16   [30|30]          jp      Z,SETPTR        ; No text - Set up pointers
162C: 2ABB81   [46]             ld      HL,(PROGND)     ; Get end of program
162F: E3       [65]             ex      (SP),HL         ; Get length of input line
1630: C1       [75]             pop     BC              ; End of program to BC
1631: 09       [86]             add     HL,BC           ; Find new end
1632: E5       [97]             push    HL              ; Save new end
1633: CD1115   [114]            call    MOVUP           ; Make space for line
1636: E1       [124]            pop     HL              ; Restore new end
1637: 22BB81   [140]            ld      (PROGND),HL     ; Update end of program pointer
163A: EB       [144]            ex      DE,HL           ; Get line to move up in HL
163B: 74       [151]            ld      (HL),H          ; Save MSB
163C: D1       [161]            pop     DE              ; Get new line number
163D: 23       [167]            inc     HL              ; Skip pointer
163E: 23       [173]            inc     HL
163F: 73       [180]            ld      (HL),E          ; Save LSB of line number
1640: 23       [186]            inc     HL
1641: 72       [193]            ld      (HL),D          ; Save MSB of line number
1642: 23       [199]            inc     HL              ; To first byte in line
1643: 113681   [209]            ld      DE,BUFFER       ; Copy buffer to program
1646: 1A       [ 7]     MOVBUF: ld      A,(DE)          ; Get source
1647: 77       [14]             ld      (HL),A          ; Save destinations
1648: 23       [20]             inc     HL              ; Next source
1649: 13       [26]             inc     DE              ; Next destination
164A: B7       [30]             or      A               ; Done?
164B: C24616   [40|40]          jp      NZ,MOVBUF       ; No - Repeat
164E: CD9716   [17]     SETPTR: call    RUNFST          ; Set line pointers
1651: 23       [23]             inc     HL              ; To LSB of pointer
1652: EB       [27]             ex      DE,HL           ; Address to DE
1653: 62       [ 4]     PTRLP:  ld      H,D             ; Address to HL
1654: 6B       [ 8]             ld      L,E
1655: 7E       [15]             ld      A,(HL)          ; Get LSB of pointer
1656: 23       [21]             inc     HL              ; To MSB of pointer
1657: B6       [28]             or      (HL)            ; Compare with MSB pointer
1658: CACC15   [38|38]          jp      Z,GETCMD        ; Get command line if end
165B: 23       [44]             inc     HL              ; To LSB of line number
165C: 23       [50]             inc     HL              ; Skip line number
165D: 23       [56]             inc     HL              ; Point to first byte in line
165E: AF       [60]             xor     A               ; Looking for 00 byte
165F: BE       [ 7]     FNDEND: cp      (HL)            ; Found end of line?
1660: 23       [13]             inc     HL              ; Move to next byte
1661: C25F16   [23|23]          jp      NZ,FNDEND       ; No - Keep looking
1664: EB       [27]             ex      DE,HL           ; Next line address to HL
1665: 73       [34]             ld      (HL),E          ; Save LSB of pointer
1666: 23       [40]             inc     HL
1667: 72       [47]             ld      (HL),D          ; Save MSB of pointer
1668: C35316   [57]             jp      PTRLP           ; Do next line
                        
166B: 2A3381   [16]     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
166E: 44       [ 4]     SRCHLP: ld      B,H             ; BC = Address to look at
166F: 4D       [ 8]             ld      C,L
1670: 7E       [15]             ld      A,(HL)          ; Get address of next line
1671: 23       [21]             inc     HL
1672: B6       [28]             or      (HL)            ; End of program found?
1673: 2B       [34]             dec     HL
1674: C8       [39|45]          ret     Z               ; Yes - Line not found
1675: 23       [45]             inc     HL
1676: 23       [51]             inc     HL
1677: 7E       [58]             ld      A,(HL)          ; Get LSB of line number
1678: 23       [64]             inc     HL
1679: 66       [71]             ld      H,(HL)          ; Get MSB of line number
167A: 6F       [75]             ld      L,A
167B: CD4118   [92]             call    CPDEHL          ; Compare with line in DE
167E: 60       [96]             ld      H,B             ; HL = Start of this line
167F: 69       [100]            ld      L,C
1680: 7E       [107]            ld      A,(HL)          ; Get LSB of next line address
1681: 23       [113]            inc     HL
1682: 66       [120]            ld      H,(HL)          ; Get MSB of next line address
1683: 6F       [124]            ld      L,A             ; Next line to HL
1684: 3F       [128]            ccf
1685: C8       [133|139]        ret     Z               ; Lines found - Exit
1686: 3F       [137]            ccf
1687: D0       [142|148]        ret     NC              ; Line not found,at line after
1688: C36E16   [152]            jp      SRCHLP          ; Keep looking
                        
168B: C0       [ 5|11]  NEW:    ret     NZ              ; Return if any more on line
168C: 2A3381   [16]     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
168F: AF       [20]             xor     A               ; Set program area to empty
1690: 77       [27]             ld      (HL),A          ; Save LSB = 00
1691: 23       [33]             inc     HL
1692: 77       [40]             ld      (HL),A          ; Save MSB = 00
1693: 23       [46]             inc     HL
1694: 22BB81   [62]             ld      (PROGND),HL     ; Set program end
                        
1697: 2A3381   [16]     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
169A: 2B       [22]             dec     HL
                        
169B: 22B381   [16]     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
169E: 2A9481   [32]             ld      HL,(LSTRAM)     ; Get end of RAM
16A1: 22A881   [48]             ld      (STRBOT),HL     ; Clear string space
16A4: AF       [52]             xor     A
16A5: CD7A1A   [69]             call    RESTOR          ; Reset DATA pointers
16A8: 2ABB81   [85]             ld      HL,(PROGND)     ; Get end of program
16AB: 22BD81   [101]            ld      (VAREND),HL     ; Clear variables
16AE: 22BF81   [117]            ld      (ARREND),HL     ; Clear arrays
                        
16B1: C1       [10]     CLREG:  pop     BC              ; Save return address
16B2: 2AAD80   [26]             ld      HL,(STRSPC)     ; Get end of working RAM
16B5: F9       [32]             ld      SP,HL           ; Set stack
16B6: 219881   [42]             ld      HL,TMSTPL       ; Temporary string pool
16B9: 229681   [58]             ld      (TMSTPT),HL     ; Reset temporary string ptr
16BC: AF       [62]             xor     A               ; A = 00
16BD: 6F       [66]             ld      L,A             ; HL = 0000
16BE: 67       [70]             ld      H,A
16BF: 22B981   [86]             ld      (CONTAD),HL     ; No CONTinue
16C2: 32B081   [99]             ld      (FORFLG),A      ; Clear FOR flag
16C5: 22C381   [115]            ld      (FNRGNM),HL     ; Clear FN argument
16C8: E5       [126]            push    HL              ; HL = 0000
16C9: C5       [137]            push    BC              ; Put back return
16CA: 2AB381   [16]     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
16CD: C9       [26]             ret                     ; Return to execution driver
                        
16CE: 3E3F     [ 7]     PROMPT: ld      A,'?'           ; '?'
16D0: CD5218   [24]             call    OUTC            ; Output character
16D3: 3E00     [31]             ld      A,NLLCR         ; null char
16D5: CD5218   [48]             call    OUTC            ; Output character
16D8: CD5A08   [65]             call    CURSOR_ON       ; enable cursor
16DB: C3AA80   [75]             jp      RINPUT          ; Get input line
                        
16DE: AF       [ 4]     CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
16DF: 329381   [17]             ld      (DATFLG),A      ; Reset literal flag
16E2: 0E05     [24]             ld      C,2+3           ; 2 byte number and 3 nulls
16E4: 113681   [34]             ld      DE,BUFFER       ; Start of input buffer
16E7: 7E       [ 7]     CRNCLP: ld      A,(HL)          ; Get byte
16E8: FE20     [14]             cp      SPC             ; Is it a space?
16EA: CA6617   [24|24]          jp      Z,MOVDIR        ; Yes - Copy direct
16ED: 47       [28]             ld      B,A             ; Save character
16EE: FE22     [35]             cp      22H             ; '"'             ; Is it a quote?
16F0: CA8617   [45|45]          jp      Z,CPYLIT        ; Yes - Copy literal string
16F3: B7       [49]             or      A               ; Is it end of buffer?
16F4: CA8D17   [59|59]          jp      Z,ENDBUF        ; Yes - End buffer
16F7: 3A9381   [72]             ld      A,(DATFLG)      ; Get data type
16FA: B7       [76]             or      A               ; Literal?
16FB: 7E       [83]             ld      A,(HL)          ; Get byte to copy
16FC: C26617   [93|93]          jp      NZ,MOVDIR       ; Literal - Copy direct
16FF: FE3F     [100]            cp      '?'             ; Is it '?' short for PRINT
1701: 3EAD     [107]            ld      A,ZPRINT        ; "PRINT" token
1703: CA6617   [117|117]        jp      Z,MOVDIR        ; Yes - replace it
1706: 7E       [124]            ld      A,(HL)          ; Get byte again
1707: FE30     [131]            cp      '0'             ; Is it less than '0'
1709: DA1117   [141|141]        jp      C,FNDWRD        ; Yes - Look for reserved words
170C: FE3C     [148]            cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
170E: DA6617   [158|158]        jp      C,MOVDIR        ; Yes - copy it direct
1711: D5       [11]     FNDWRD: push    DE              ; Look for reserved words
1712: 112810   [21]             ld      DE,WORDS-1      ; Point to table
1715: C5       [32]             push    BC              ; Save count
1716: 016217   [42]             ld      BC,RETNAD       ; Where to return to
1719: C5       [53]             push    BC              ; Save return address
171A: 067F     [60]             ld      B,ZEND-1        ; First token value -1
171C: 7E       [67]             ld      A,(HL)          ; Get byte
171D: FE61     [74]             cp      'a'             ; Less than 'a' ?
171F: DA2A17   [84|84]          jp      C,SEARCH        ; Yes - search for words
1722: FE7B     [91]             cp      'z'+1           ; Greater than 'z' ?
1724: D22A17   [101|101]        jp      NC,SEARCH       ; Yes - search for words
1727: E65F     [108]            and     %01011111       ; Force upper case
1729: 77       [115]            ld      (HL),A          ; Replace byte
172A: 4E       [ 7]     SEARCH: ld      C,(HL)          ; Search for a word
172B: EB       [11]             ex      DE,HL
172C: 23       [ 6]     GETNXT: inc     HL              ; Get next reserved word
172D: B6       [13]             or      (HL)            ; Start of word?
172E: F22C17   [23|23]          jp      P,GETNXT        ; No - move on
1731: 04       [27]             inc     B               ; Increment token value
1732: 7E       [34]             ld      A,(HL)          ; Get byte from table
1733: E67F     [41]             and     %01111111       ; Strip bit 7
1735: C8       [46|52]          ret     Z               ; Return if end of list
1736: B9       [50]             cp      C               ; Same character as in buffer?
1737: C22C17   [60|60]          jp      NZ,GETNXT       ; No - get next word
173A: EB       [64]             ex      DE,HL
173B: E5       [75]             push    HL              ; Save start of word
                        
173C: 13       [ 6]     NXTBYT: inc     DE              ; Look through rest of word
173D: 1A       [13]             ld      A,(DE)          ; Get byte from table
173E: B7       [17]             or      A               ; End of word ?
173F: FA5E17   [27|27]          jp      M,MATCH         ; Yes - Match found
1742: 4F       [31]             ld      C,A             ; Save it
1743: 78       [35]             ld      A,B             ; Get token value
1744: FE88     [42]             cp      ZGOTO           ; Is it "GOTO" token ?
1746: C24D17   [52|52]          jp      NZ,NOSPC        ; No - Don't allow spaces
1749: CD6A1A   [69]             call    GETCHR          ; Get next character
174C: 2B       [75]             dec     HL              ; Cancel increment from GETCHR
174D: 23       [ 6]     NOSPC:  inc     HL              ; Next byte
174E: 7E       [13]             ld      A,(HL)          ; Get byte
174F: FE61     [20]             cp      'a'             ; Less than 'a' ?
1751: DA5617   [30|30]          jp      C,NOCHNG        ; Yes - don't change
1754: E65F     [37]             and     %01011111       ; Make upper case
1756: B9       [ 4]     NOCHNG: cp      C               ; Same as in buffer ?
1757: CA3C17   [14|14]          jp      Z,NXTBYT        ; Yes - keep testing
175A: E1       [24]             pop     HL              ; Get back start of word
175B: C32A17   [34]             jp      SEARCH          ; Look at next word
                        
175E: 48       [ 4]     MATCH:  ld      C,B             ; Word found - Save token value
175F: F1       [14]             pop     AF              ; Throw away return
1760: EB       [18]             ex      DE,HL
1761: C9       [28]             ret                     ; Return to "RETNAD"
1762: EB       [ 4]     RETNAD: ex      DE,HL           ; Get address in string
1763: 79       [ 8]             ld      A,C             ; Get token value
1764: C1       [18]             pop     BC              ; Restore buffer length
1765: D1       [28]             pop     DE              ; Get destination address
1766: 23       [ 6]     MOVDIR: inc     HL              ; Next source in buffer
1767: 12       [13]             ld      (DE),A          ; Put byte in buffer
1768: 13       [19]             inc     DE              ; Move up buffer
1769: 0C       [23]             inc     C               ; Increment length of buffer
176A: D63A     [30]             sub     ':'             ; End of statement?
176C: CA7417   [40|40]          jp      Z,SETLIT        ; Jump if multi-statement line
176F: FE49     [47]             cp      ZDATA-$3A       ; Is it DATA statement ?
1771: C27717   [57|57]          jp      NZ,TSTREM       ; No - see if REM
1774: 329381   [13]     SETLIT: ld      (DATFLG),A      ; Set literal flag
1777: D654     [ 7]     TSTREM: sub     ZREM-$3A        ; Is it REM?
1779: C2E716   [17|17]          jp      NZ,CRNCLP       ; No - Leave flag
177C: 47       [21]             ld      B,A             ; Copy rest of buffer
177D: 7E       [ 7]     NXTCHR: ld      A,(HL)          ; Get byte
177E: B7       [11]             or      A               ; End of line ?
177F: CA8D17   [21|21]          jp      Z,ENDBUF        ; Yes - Terminate buffer
1782: B8       [25]             cp      B               ; End of statement ?
1783: CA6617   [35|35]          jp      Z,MOVDIR        ; Yes - Get next one
1786: 23       [ 6]     CPYLIT: inc     HL              ; Move up source string
1787: 12       [13]             ld      (DE),A          ; Save in destination
1788: 0C       [17]             inc     C               ; Increment length
1789: 13       [23]             inc     DE              ; Move up destination
178A: C37D17   [33]             jp      NXTCHR          ; Repeat
                        
178D: 213581   [10]     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1790: 12       [17]             ld      (DE),A          ; Mark end of buffer (A = 00)
1791: 13       [23]             inc     DE
1792: 12       [30]             ld      (DE),A          ; A = 00
1793: 13       [36]             inc     DE
1794: 12       [43]             ld      (DE),A          ; A = 00
1795: C9       [53]             ret
                        
1796: 3AA480   [13]     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1799: B7       [17]             or      A               ; Is it zero?
179A: 3E00     [24]             ld      A,$00           ; Zero A - Leave flags
179C: 32A480   [37]             ld      (NULFLG),A      ; Zero null flag
179F: C2AA17   [47|47]          jp      NZ,ECHDEL       ; Set - Echo it
17A2: 05       [51]             dec     B               ; Decrement length
17A3: CAC717   [61|61]          jp      Z,GETLIN        ; Get line again if empty
17A6: CD5218   [78]             call    OUTC            ; Output null character
17A9: 3E                        defb    $3E             ; Skip "dec B"
17AA: 05       [ 4]     ECHDEL: dec     B               ; Count bytes in buffer
17AB: 2B       [10]             dec     HL              ; Back space buffer
17AC: CABE17   [20|20]          jp      Z,OTKLN         ; No buffer - Try again
17AF: 7E       [27]             ld      A,(HL)          ; Get deleted byte
17B0: CD5218   [44]             call    OUTC            ; Echo it
17B3: C3D017   [54]             jp      MORINP          ; Get more input
                        
17B6: 05       [ 4]     DELCHR: dec     B               ; Count bytes in buffer
17B7: 2B       [10]             dec     HL              ; Back space buffer
17B8: CD5218   [27]             call    OUTC            ; Output character in A
17BB: C2D017   [37|37]          jp      NZ,MORINP       ; Not end - Get more
17BE: CD5218   [17]     OTKLN:  call    OUTC            ; Output character in A
17C1: CD231D   [17]     KILIN:  call    PRNTCRLF        ; Output CRLF
17C4: C3C717   [27]             jp      TTYLIN          ; Get line again
                        
17C7:                   GETLIN:
17C7: 213681   [10]     TTYLIN: ld      HL,BUFFER       ; Get a line by character
17CA: 0601     [17]             ld      B,$01           ; Set buffer as empty
17CC: AF       [21]             xor     A
17CD: 32A480   [34]             ld      (NULFLG),A      ; Clear null flag
17D0: CD9318   [17]     MORINP: call    CLOTST          ; Get character and test ^O
17D3: 4F       [21]             ld      C,A             ; Save character in C
17D4: FE7F     [28]             cp      DEL             ; Delete character?
17D6: CA9617   [38|38]          jp      Z,DODEL         ; Yes - Process it
17D9: 3AA480   [51]             ld      A,(NULFLG)      ; Get null flag
17DC: B7       [55]             or      A               ; Test null flag status
17DD: CAE917   [65|65]          jp      Z,PROCES        ; Reset - Process character
17E0: 3E00     [72]             ld      A,$00           ; Set a null
17E2: CD5218   [89]             call    OUTC            ; Output null
17E5: AF       [93]             xor     A               ; Clear A
17E6: 32A480   [106]            ld      (NULFLG),A      ; Reset null flag
17E9: 79       [ 4]     PROCES: ld      A,C             ; Get character
17EA: FE07     [11]             cp      CTRLG           ; Bell?
17EC: CA2918   [21|21]          jp      Z,PUTCTL        ; Yes - Save it
17EF: FE03     [28]             cp      CTRLC           ; Is it control "C"?
17F1: CC1E18   [38|45]          call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
17F4: 37       [42]             scf                     ; Flag break
17F5: C8       [47|53]          ret     Z               ; Return if control "C"
17F6: FE0D     [54]             cp      CR              ; Is it enter?
17F8: CA191D   [64|64]          jp      Z,ENDINP        ; Yes - Terminate input
17FB: FE15     [71]             cp      CTRLU           ; Is it control "U"?
17FD: CAC117   [81|81]          jp      Z,KILIN         ; Yes - Get another line
1800: FE08     [88]             cp      BKSP            ; Is it backspace?
1802: CAB617   [98|98]          jp      Z,DELCHR        ; Yes - Delete character
1805: FE12     [105]            cp      CTRLR           ; Is it control "R"?
1807: C22418   [115|115]        jp      NZ,PUTBUF       ; No - Put in buffer
180A: C5       [126]            push    BC              ; Save buffer length
180B: D5       [137]            push    DE              ; Save DE
180C: E5       [148]            push    HL              ; Save buffer address
180D: 3600     [158]            ld      (HL),$00        ; Mark end of buffer
180F: CDBF3D   [175]            call    OUTNCR          ; Output and do CRLF
1812: 213681   [185]            ld      HL,BUFFER       ; Point to buffer start
1815: CDE723   [202]            call    PRS             ; Output buffer
1818: E1       [212]            pop     HL              ; Restore buffer address
1819: D1       [222]            pop     DE              ; Restore DE
181A: C1       [232]            pop     BC              ; Restore buffer length
181B: C3D017   [242]            jp      MORINP          ; Get another character
181E: CD3F15   [17]     GMNCR:  call    EXITGM          ; exit from graphic mode
1821: C3231D   [27]             jp      PRNTCRLF        ; output CRLF
                        
1824: FE20     [ 7]     PUTBUF: cp      SPC             ; Is it a control code?
1826: DAD017   [17|17]          jp      C,MORINP        ; Yes - Ignore
1829: 78       [ 4]     PUTCTL: ld      A,B             ; Get number of bytes in buffer
182A: FE59     [11]             cp      $58+$01         ; Test for line overflow
182C: 3E08     [18]             ld      A,BKSP          ; Set a bell
182E: D23B18   [28|28]          jp      NC,OUTNBS       ; Ring bell if buffer full
1831: 79       [32]             ld      A,C             ; Get character
1832: 71       [39]             ld      (HL),C          ; Save in buffer
1833: 32B181   [52]             ld      (LSTBIN),A      ; Save last input byte
1836: 23       [58]             inc     HL              ; Move up buffer
1837: 04       [62]             inc     B               ; Increment length
1838: C3D017   [10]     OUTIT:  jp      MORINP          ; Get another character
                        
183B: CD5218   [17]     OUTNBS: call    OUTC            ; Output bell and back over it
                                ;ld      A,BKSP          ; send back space
                                ;call    OUTC            ;
183E: C33818   [27]             jp      OUTIT           ; get more chars
                        
1841: 7C       [ 4]     CPDEHL: ld      A,H             ; Get H
1842: 92       [ 8]             sub     D               ; Compare with D
1843: C0       [13|19]          ret     NZ              ; Different - Exit
1844: 7D       [17]             ld      A,L             ; Get L
1845: 93       [21]             sub     E               ; Compare with E
1846: C9       [31]             ret                     ; Return status
                        
1847: 7E       [ 7]     CHKSYN: ld      A,(HL)          ; Check syntax of character
1848: E3       [26]             ex      (SP),HL         ; Address of test byte
1849: BE       [33]             cp      (HL)            ; Same as in code string?
184A: 23       [39]             inc     HL              ; Return address
184B: E3       [58]             ex      (SP),HL         ; Put it back
184C: CA6A1A   [68|68]          jp      Z,GETCHR        ; Yes - Get next character
184F: C36515   [78]             jp      SNERR           ; Different - ?SN Error
                        
1852: F5       [11]     OUTC:   push    AF              ; Save character
1853: 3AA580   [24]             ld      A,(CTLOFG)      ; Get control "O" flag
1856: B7       [28]             or      A               ; Is it set?
1857: C21C24   [38|38]          jp      NZ,POPAF        ; Yes - don't output
185A: F1       [48]             pop     AF              ; Restore character
185B: C5       [59]             push    BC              ; Save buffer length
185C: F5       [70]             push    AF              ; Save character
185D: FE20     [77]             cp      SPC             ; Is it a control code?
185F: DA7618   [87|87]          jp      C,DINPOS        ; Yes - Don't inc POS(X)
1862: 3AA280   [100]            ld      A,(LWIDTH)      ; Get line width
1865: 47       [104]            ld      B,A             ; To B
1866: 3A9081   [117]            ld      A,(CURPOS)      ; Get cursor position
1869: 04       [121]            inc     B               ; Width 255?
186A: CA7218   [131|131]        jp      Z,INCLEN        ; Yes - No width limit
186D: 05       [135]            dec     B               ; Restore width
186E: B8       [139]            cp      B               ; At end of line?
186F: CC231D   [149|156]        call    Z,PRNTCRLF      ; Yes - output CRLF
1872: 3C       [ 4]     INCLEN: inc     A               ; Move on one character
1873: 329081   [17]             ld      (CURPOS),A      ; Save new position
1876: AF       [ 4]     DINPOS: xor     A
1877: 322982   [17]             ld      (KBDNPT),A      ; set flag for no char from keyboard
187A: F1       [27]             pop     AF              ; Restore character
187B: C1       [37]             pop     BC              ; Restore buffer length
187C: F5       [48]             push    AF
187D: CD8518   [65]             call    SND2VID         ; send char to video
1880: F1       [75]             pop     AF
1881: CD9E3D   [92]             call    MONOUT          ; send char to serial if enabled
1884: C9       [102]            ret
                        
                        ; print char to video if cursor is on
1885: 32EC81   [13]     SND2VID:ld      (CHR4VID),A     ; store A
1888: 3AEB81   [26]             ld      A,(PRNTVIDEO)   ; check print-on-video
188B: B7       [30]             or      A               ; is it off?
188C: C8       [35|41]          ret     Z               ; yes, so return
188D: F3       [39]             di                      ; disable INTs
188E: CDC806   [56]             call    CHAR2VID        ; cursor is on, so print char on screen
1891: FB       [60]             ei                      ; re-enable INTs
1892: C9       [70]             ret                     ; return to caller
                        
1893: CDA331   [17]     CLOTST: call    GETINP          ; Get input character
1896: FE0F     [24]             cp      CTRLO           ; Is it control "O"?
1898: C0       [29|35]          ret     NZ              ; No don't flip flag
1899: 3AA580   [42]             ld      A,(CTLOFG)      ; Get flag
189C: 2F       [46]             cpl                     ; Flip it
189D: 32A580   [59]             ld      (CTLOFG),A      ; Put it back
18A0: A7       [63]             and     A               ; is output enabled?
18A1: CC5A08   [73|80]          call    Z,CURSOR_ON     ; yes, so cursor on
18A4: AF       [77]             xor     A               ; Null character
18A5: C9       [87]             ret
                        
                        ; LIST: list the program stored into memory
18A6: C1       [10]     LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
18A7: 2B       [16]             dec     HL              ; dec 'cos GETCHR INCs
18A8: CD6A1A   [33]             call    GETCHR          ; Get next character
18AB: CAF718   [43|43]          jp      Z,LSTALL        ; list all if nothing follows
18AE: FEBC     [50]             cp      ZMINUS          ; is it '-'?
18B0: 2020     [57|62]          jr      NZ,LST01        ; no, look for a line number
18B2: 110000   [67]             ld      DE,$0000        ; yes, set search from 0
18B5: CD9219   [84]             call    SRCHLIN         ; find address of line number
18B8: ED43EF81 [104]            ld      (TMPBFR1),BC    ; store address of starting line
18BC: CD4718   [121]            call    CHKSYN          ; skip '-'
18BF: BC                        defb    ZMINUS
18C0: CD3A1B   [138]            call    ATOH            ; now, look for another number (ASCII number to DE)
18C3: CD9219   [155]            call    SRCHLIN         ; find address of line number
18C6: ED43F181 [175]            ld      (TMPBFR2),BC    ; store address of ending line
18CA: ED4BEF81 [195]            ld      BC,(TMPBFR1)    ; retrieve address of starting line
18CE: C5       [206]            push    BC              ; store address of line for later use
18CF: C32919   [216]            jp      LISTLP          ; go listing
18D2: CD3A1B   [17]     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
18D5: CD9219   [17]     LST01H: call    SRCHLIN         ; find address of line number
18D8: ED43EF81 [37]             ld      (TMPBFR1),BC    ; store address of starting line
18DC: ED43F181 [57]             ld      (TMPBFR2),BC    ; same address for ending line (we'll change later if needed)
18E0: 2B       [63]             dec     HL              ; dec 'cos GETCHR INCs
18E1: CD6A1A   [80]             call    GETCHR          ; Get next character
18E4: CAF318   [90|90]          jp      Z,LST06         ; nothing follows, so ending & starting lines are the same
18E7: FEBC     [97]             cp      ZMINUS          ; is it '-'?
18E9: CA0F19   [107|107]        jp      Z,LST03         ; yes, read ending line
18EC: CD9219   [17]     LST04:  call    SRCHLIN         ; find address of line number
18EF: ED43F181 [37]             ld      (TMPBFR2),BC    ; set address of ending line
18F3: C5       [11]     LST06:  push    BC              ; store address for later use
18F4: C32919   [21]             jp      LISTLP          ; jump to list
18F7: 11F9FF   [10]     LSTALL  ld      DE,65529        ; set ending line to max. allowed line number
18FA: CD9219   [27]             call    SRCHLIN         ; get address of last line
18FD: ED43F181 [47]             ld      (TMPBFR2),BC    ; store it
1901: 110000   [57]             ld      DE,$0000        ; set start to first line in memory
1904: CD9219   [74]             call    SRCHLIN         ; get address of first line
1907: ED43EF81 [94]             ld      (TMPBFR1),BC    ; store it
190B: C5       [105]            push    BC              ; store address of starting line for later use
190C: C32919   [115]            jp      LISTLP          ; start printing
190F: CD4718   [17]     LST03:  call    CHKSYN          ; skip '-'
1912: BC                        defb    ZMINUS
1913: CD3A1B   [34]             call    ATOH            ; look for another number (return into DE)
1916: 7A       [38]             ld      A,D
1917: B3       [42]             or      E               ; is line=0?
1918: 2003     [49|54]          jr      NZ,LST05        ; no, jump over
191A: 11F9FF   [59]             ld      DE,65529        ; yes set last valid line number
191D: CD9219   [17]     LST05:  call    SRCHLIN         ; find address of line number
1920: ED43F181 [37]             ld      (TMPBFR2),BC    ; store address of ending line
1924: ED4BEF81 [57]             ld      BC,(TMPBFR1)    ; retrieve address of starting line
1928: C5       [68]             push    BC              ; store it for later use
1929: E1       [10]     LISTLP: pop     HL              ; Restore address of line
192A: 4E       [17]             ld      C,(HL)          ; Get LSB of next line
192B: 23       [23]             inc     HL
192C: 46       [30]             ld      B,(HL)          ; Get MSB of next line
192D: 23       [36]             inc     HL
192E: 78       [40]             ld      A,B             ; BC = 0 (End of program)?
192F: B1       [44]             or      C
1930: CABF15   [54|54]          jp      Z,PRNTOK        ; Yes - Go to command mode
1933: CD951A   [71]             call    TSTBRK          ; Test for break key
1936: CD9819   [88]             call    TSTSPC          ; test for space
1939: C5       [99]             push    BC              ; Save address of next line
193A: 3AE481   [112]            ld      A,(SCR_CURS_X)  ; load current X pos of cursor
193D: A7       [116]            and     A               ; is it at the beginning of a new line?
193E: 200B     [123|128]        jr      NZ,LST08        ; No, jump over
1940: 3E0D     [130]            ld      A,CR            ; yes, so just send a CR
1942: CD9E3D   [147]            call    MONOUT          ; to serial if it's open
1945: AF       [151]            xor     A               ; then, set cursor
1946: 329081   [164]            ld      (CURPOS),A      ; to position 0
1949: 1803     [176]            jr      LST07           ; and continue
194B: CD231D   [17]     LST08:  call    PRNTCRLF        ; output CRLF
194E: 5E       [ 7]     LST07:  ld      E,(HL)          ; Get LSB of line number
194F: 23       [13]             inc     HL
1950: 56       [20]             ld      D,(HL)          ; Get MSB of line number
1951: 23       [26]             inc     HL
1952: E5       [37]             push    HL              ; Save address of line start
1953: EB       [41]             ex      DE,HL           ; Line number to HL
1954: CD872E   [58]             call    PRNTHL          ; Output line number in decimal
1957: 3E20     [65]             ld      A,SPC           ; Space after line number
1959: E1       [75]             pop     HL              ; Restore start of line address
195A: CD5218   [17]     LSTLP2: call    OUTC            ; Output character in A
195D: 7E       [ 7]     LSTLP3: ld      A,(HL)          ; Get next byte in line
195E: B7       [11]             or      A               ; End of line?
195F: 23       [17]             inc     HL              ; To next byte in line
1960: CA8419   [27|27]          jp      Z,NXTLN         ; Yes - check next line
1963: F25A19   [37|37]          jp      P,LSTLP2        ; No token - output it
1966: D67F     [44]             sub     ZEND-1          ; Find and output word
1968: 4F       [48]             ld      C,A             ; Token offset+1 to C
1969: 112910   [58]             ld      DE,WORDS        ; Reserved word list
196C: 1A       [ 7]     FNDTOK: ld      A,(DE)          ; Get character in list
196D: 13       [13]             inc     DE              ; Move on to next
196E: B7       [17]             or      A               ; Is it start of word?
196F: F26C19   [27|27]          jp      P,FNDTOK        ; No - Keep looking for word
1972: 0D       [31]             dec     C               ; Count words
1973: C26C19   [41|41]          jp      NZ,FNDTOK       ; Not there - keep looking
1976: E67F     [ 7]     OUTWRD: and     %01111111       ; Strip bit 7
1978: CD5218   [24]             call    OUTC            ; Output character
197B: 1A       [31]             ld      A,(DE)          ; Get next character
197C: 13       [37]             inc     DE              ; Move on to next
197D: B7       [41]             or      A               ; Is it end of word?
197E: F27619   [51|51]          jp      P,OUTWRD        ; No - output the rest
1981: C35D19   [61]             jp      LSTLP3          ; Next byte in line
1984: D1       [10]     NXTLN:  pop     DE              ; recover address of current line
1985: 2AF181   [26]             ld      HL,(TMPBFR2)    ; address of last line to print
1988: CDC53D   [43]             call    CMP16           ; check if current line is over last printable line
198B: DABF15   [53|53]          jp      C,PRNTOK        ; finish - leave & print OK
198E: D5       [64]             push    DE              ; store address of current line
198F: C32919   [74]             jp      LISTLP          ; continue listing
1992: E5       [11]     SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1993: CD6B16   [28]             call    SRCHLN          ; search for line number in DE
1996: E1       [38]             pop     HL              ; retrieve HL
1997: C9       [48]             ret                     ; return to caller
                        
                        ; during LISTing, check if PAUSE is pressed, then pause listing and
                        ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1998: 3A2B82   [13]     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
199B: FE20     [20]             cp      SPC             ; Is it SPACE?
199D: C0       [25|31]          ret     NZ              ; No, return
199E: CDA331   [17]     WTSPC   call    GETINP          ; Yes, stop listing and wait for another space or BREAK
19A1: FE20     [24]             cp      SPC             ; is it SPACE?
19A3: 2005     [31|36]          jr      NZ,CNTWTSP      ; no, continue
19A5: AF       [35]             xor     A
19A6: 322B82   [48]             ld      (TMPKEYBFR),A   ; reset key
19A9: C9       [58]             ret                     ; return to caller
19AA: FE03     [ 7]     CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
19AC: 20F0     [14|19]          jr      NZ,WTSPC        ; no, loop
19AE: C3930F   [24]             jp      BRKRET          ; exit and output "Ok"
                        
                        
19B1: 3E64     [ 7]     FOR:    ld      A,$64           ; Flag "FOR" assignment
19B3: 32B081   [20]             ld      (FORFLG),A      ; Save "FOR" flag
19B6: CD241C   [37]             call    LET             ; Set up initial index
19B9: C1       [47]             pop     BC              ; Drop RETurn address
19BA: E5       [58]             push    HL              ; Save code string address
19BB: CD0D1C   [75]             call    DATA            ; Get next statement address
19BE: 22AC81   [91]             ld      (LOOPST),HL     ; Save it for start of loop
19C1: 210200   [101]            ld      HL,$0002        ; Offset for "FOR" block
19C4: 39       [112]            add     HL,SP           ; Point to it
19C5: CDF214   [17]     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
19C8: D1       [27]             pop     DE              ; Get code string address
19C9: C2E119   [37|37]          jp      NZ,FORFND       ; No nesting found
19CC: 09       [48]             add     HL,BC           ; Move into "FOR" block
19CD: D5       [59]             push    DE              ; Save code string address
19CE: 2B       [65]             dec     HL
19CF: 56       [72]             ld      D,(HL)          ; Get MSB of loop statement
19D0: 2B       [78]             dec     HL
19D1: 5E       [85]             ld      E,(HL)          ; Get LSB of loop statement
19D2: 23       [91]             inc     HL
19D3: 23       [97]             inc     HL
19D4: E5       [108]            push    HL              ; Save block address
19D5: 2AAC81   [124]            ld      HL,(LOOPST)     ; Get address of loop statement
19D8: CD4118   [141]            call    CPDEHL          ; Compare the FOR loops
19DB: E1       [151]            pop     HL              ; Restore block address
19DC: C2C519   [161|161]        jp      NZ,FORSLP       ; Different FORs - Find another
19DF: D1       [171]            pop     DE              ; Restore code string address
19E0: F9       [177]            ld      SP,HL           ; Remove all nested loops
                        
19E1: EB       [ 4]     FORFND: ex      DE,HL           ; Code string address to HL
19E2: 0E08     [11]             ld      C,$08
19E4: CD2215   [28]             call    CHKSTK          ; Check for 8 levels of stack
19E7: E5       [39]             push    HL              ; Save code string address
19E8: 2AAC81   [55]             ld      HL,(LOOPST)     ; Get first statement of loop
19EB: E3       [74]             ex      (SP),HL         ; Save and restore code string
19EC: E5       [85]             push    HL              ; Re-save code string address
19ED: 2AAF80   [101]            ld      HL,(LINEAT)     ; Get current line number
19F0: E3       [120]            ex      (SP),HL         ; Save and restore code string
19F1: CDE21E   [137]            call    TSTNUM          ; Make sure it's a number
19F4: CD4718   [154]            call    CHKSYN          ; Make sure "TO" is next
19F7: B5                        defb    ZTO             ; "TO" token
19F8: CDDF1E   [171]            call    GETNUM          ; Get "TO" expression value
19FB: E5       [182]            push    HL              ; Save code string address
19FC: CD392D   [199]            call    BCDEFP          ; Move "TO" value to BCDE
19FF: E1       [209]            pop     HL              ; Restore code string address
1A00: C5       [220]            push    BC              ; Save "TO" value in block
1A01: D5       [231]            push    DE
1A02: 010081   [241]            ld      BC,$8100        ; BCDE - 1 (default STEP)
1A05: 51       [245]            ld      D,C             ; C=0
1A06: 5A       [249]            ld      E,D             ; D=0
1A07: 7E       [256]            ld      A,(HL)          ; Get next byte in code string
1A08: FEBA     [263]            cp      ZSTEP           ; See if "STEP" is stated
1A0A: 3E01     [270]            ld      A,$01           ; Sign of step = 1
1A0C: C21D1A   [280|280]        jp      NZ,SAVSTP       ; No STEP given - Default to 1
1A0F: CD6A1A   [297]            call    GETCHR          ; Jump over "STEP" token
1A12: CDDF1E   [314]            call    GETNUM          ; Get step value
1A15: E5       [325]            push    HL              ; Save code string address
1A16: CD392D   [342]            call    BCDEFP          ; Move STEP to BCDE
1A19: CDED2C   [359]            call    TSTSGN          ; Test sign of FPREG
1A1C: E1       [369]            pop     HL              ; Restore code string address
1A1D: C5       [11]     SAVSTP: push    BC              ; Save the STEP value in block
1A1E: D5       [22]             push    DE
1A1F: F5       [33]             push    AF              ; Save sign of STEP
1A20: 33       [39]             inc     SP              ; Don't save flags
1A21: E5       [50]             push    HL              ; Save code string address
1A22: 2AB381   [66]             ld      HL,(BRKLIN)     ; Get address of index variable
1A25: E3       [85]             ex      (SP),HL         ; Save and restore code string
1A26: 0681     [ 7]     PUTFID: ld      B,ZFOR          ; "FOR" block marker
1A28: C5       [18]             push    BC              ; Save it
1A29: 33       [24]             inc     SP              ; Don't save C
                        
1A2A: CD951A   [17]     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1A2D: 22B381   [33]             ld      (BRKLIN),HL     ; Save code address for break
1A30: 7E       [40]             ld      A,(HL)          ; Get next byte in code string
1A31: FE3A     [47]             cp      ':'             ; Multi statement line?
1A33: CA4A1A   [57|57]          jp      Z,EXCUTE        ; Yes - Execute it
1A36: B7       [61]             or      A               ; End of line?
1A37: C26515   [71|71]          jp      NZ,SNERR        ; No - Syntax error
1A3A: 23       [77]             inc     HL              ; Point to address of next line
1A3B: 7E       [84]             ld      A,(HL)          ; Get LSB of line pointer
1A3C: 23       [90]             inc     HL
1A3D: B6       [97]             or      (HL)            ; Is it zero (End of prog)?
1A3E: CABC1A   [107|107]        jp      Z,ENDPRG        ; Yes - Terminate execution
1A41: 23       [113]            inc     HL              ; Point to line number
1A42: 5E       [120]            ld      E,(HL)          ; Get LSB of line number
1A43: 23       [126]            inc     HL
1A44: 56       [133]            ld      D,(HL)          ; Get MSB of line number
1A45: EB       [137]            ex      DE,HL           ; Line number to HL
1A46: 22AF80   [153]            ld      (LINEAT),HL     ; Save as current line number
1A49: EB       [157]            ex      DE,HL           ; Line number back to DE
1A4A: CD6A1A   [17]     EXCUTE: call    GETCHR          ; Get key word
1A4D: 112A1A   [27]             ld      DE,RUNCNT       ; Where to RETurn to
1A50: D5       [38]             push    DE              ; Save for RETurn
1A51: C8       [ 5|11]  IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
                        
1A52: D680     [ 7]     ONJMP:  sub     ZEND            ; Is it a token?
1A54: DA241C   [17|17]          jp      C,LET           ; No - try to assign it
1A57: FE34     [24]             cp      ZNEW+1-ZEND     ; END to NEW ?
1A59: D26515   [34|34]          jp      NC,SNERR        ; Not a key word - ?SN Error
1A5C: 07       [38]             rlca                    ; Double it
1A5D: 4F       [42]             ld      C,A             ; BC = Offset into table
1A5E: 0600     [49]             ld      B,0
1A60: EB       [53]             ex      DE,HL           ; Save code string address
1A61: 21AE11   [63]             ld      HL,WORDTB       ; Keyword address table
1A64: 09       [74]             add     HL,BC           ; Point to routine address
1A65: 4E       [81]             ld      C,(HL)          ; Get LSB of routine address
1A66: 23       [87]             inc     HL
1A67: 46       [94]             ld      B,(HL)          ; Get MSB of routine address
1A68: C5       [105]            push    BC              ; Save routine address
1A69: EB       [109]            ex      DE,HL           ; Restore code string address
                        
                        ; get a char from input buffer: exit with NC if character found is
                        ; not a number; exit with Z if nothing found; char is into A
1A6A: 23       [ 6]     GETCHR: inc     HL              ; Point to next character
1A6B: 7E       [13]             ld      A,(HL)          ; Get next code string byte
1A6C: FE3A     [20]             cp      ':'             ; Z if ':'
1A6E: D0       [25|31]          ret     NC              ; NC if > "9"
1A6F: FE20     [32]             cp      SPC
1A71: CA6A1A   [42|42]          jp      Z,GETCHR        ; Skip over spaces
1A74: FE30     [49]             cp      '0'
1A76: 3F       [53]             ccf                     ; NC if < '0'
1A77: 3C       [57]             inc     A               ; Test for zero - Leave carry
1A78: 3D       [61]             dec     A               ; Z if Null
1A79: C9       [71]             ret
                        
1A7A: EB       [ 4]     RESTOR: ex      DE,HL           ; Save code string address
1A7B: 2A3381   [20]             ld      HL,(BASTXT)     ; Point to start of program
1A7E: CA8F1A   [30|30]          jp      Z,RESTNL        ; Just RESTORE - reset pointer
1A81: EB       [34]             ex      DE,HL           ; Restore code string address
1A82: CD3A1B   [51]             call    ATOH            ; Get line number to DE
1A85: E5       [62]             push    HL              ; Save code string address
1A86: CD6B16   [79]             call    SRCHLN          ; Search for line number in DE
1A89: 60       [83]             ld      H,B             ; HL = Address of line
1A8A: 69       [87]             ld      L,C
1A8B: D1       [97]             pop     DE              ; Restore code string address
1A8C: D2E31B   [107|107]        jp      NC,ULERR        ; ?UL Error if not found
1A8F: 2B       [ 6]     RESTNL: dec     HL              ; Byte before DATA statement
1A90: 22C181   [16]     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1A93: EB       [20]             ex      DE,HL           ; Restore code string address
1A94: C9       [30]             ret
                        
                        
1A95: DF       [11]     TSTBRK: rst     $18             ; Check input status
1A96: C8       [16|22]          ret     Z               ; No key, go back
1A97: D7       [27]             rst     $10             ; Get the key into A
1A98: FE1B     [34]             cp      ESC             ; Escape key?
1A9A: 2811     [41|46]          jr      Z,BRK           ; Yes, break
1A9C: FE03     [48]             cp      CTRLC           ; <Ctrl-C>
1A9E: 280D     [55|60]          jr      Z,BRK           ; Yes, break
1AA0: FE13     [62]             cp      CTRLS           ; Stop scrolling?
1AA2: C0       [67|73]          ret     NZ              ; Other key, ignore
                        
                        
1AA3: D7       [11]     STALL:  rst     $10             ; Wait for key
1AA4: FE11     [18]             cp      CTRLQ           ; Resume scrolling?
1AA6: C8       [23|29]          ret     Z               ; Release the chokehold
1AA7: FE03     [30]             cp      CTRLC           ; Second break?
1AA9: 2807     [37|42]          jr      Z,STOP          ; Break during hold exits prog
1AAB: 18F6     [49]             jr      STALL           ; Loop until <Ctrl-Q> or <brk>
                        
1AAD: 3EFF     [ 7]     BRK:    ld      A,$FF           ; Set BRKFLG
1AAF: 32A980   [20]             ld      (BRKFLG),A      ; Store it
                        
1AB2: C0       [ 5|11]  STOP:   ret     NZ              ; Exit if anything else
1AB3: F6                        defb    $F6             ; Flag "STOP"
1AB4: C0       [ 5|11]  PEND:   ret     NZ              ; Exit if anything else
1AB5: 22B381   [21]             ld      (BRKLIN),HL     ; Save point of break
1AB8: 21                        defb    $21             ; Skip "OR 11111111B"
1AB9: F6FF     [ 7]     INPBRK: or      %11111111       ; Flag "Break" wanted
1ABB: C1       [17]             pop     BC              ; Return not needed and more
1ABC: 2AAF80   [16]     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1ABF: F5       [27]             push    AF              ; Save STOP / END status
1AC0: 7D       [31]             ld      A,L             ; Is it direct break?
1AC1: A4       [35]             and     H
1AC2: 3C       [39]             inc     A               ; Line is -1 if direct break
1AC3: CACF1A   [49|49]          jp      Z,NOLIN         ; Yes - No line number
1AC6: 22B781   [65]             ld      (ERRLIN),HL     ; Save line of break
1AC9: 2AB381   [81]             ld      HL,(BRKLIN)     ; Get point of break
1ACC: 22B981   [97]             ld      (CONTAD),HL     ; Save point to CONTinue
1ACF: AF       [ 4]     NOLIN:  xor     A
1AD0: 32A580   [17]             ld      (CTLOFG),A      ; Enable output
1AD3: CD111D   [34]             call    STTLIN          ; Start a new line
1AD6: F1       [44]             pop     AF              ; Restore STOP / END status
1AD7: 21E814   [54]             ld      HL,BRKMSG       ; "Break" message
1ADA: C2E01A   [64|64]          jp      NZ,ERRINT       ; "in line" wanted?
1ADD: C3BF15   [74]             jp      PRNTOK          ; Go to command mode
1AE0: CD3F15   [17]     ERRINT: call    EXITGM          ; exit from graphics mode
1AE3: C39D15   [27]             jp      ERRIN           ; print message
                        
                        
1AE6: 21FFFF   [10]     CONT:   ld      HL,-1           ; reset...
1AE9: 22B180   [26]             ld      (HLPLN),HL      ; ...HELP line register
1AEC: 2AB981   [42]             ld      HL,(CONTAD)     ; Get CONTinue address
1AEF: 7C       [46]             ld      A,H             ; Is it zero?
1AF0: B5       [50]             or      L
1AF1: 1E20     [57]             ld      E,CN            ; ?CN Error
1AF3: CA7915   [67|67]          jp      Z,ERROR         ; Yes - output "?CN Error"
1AF6: EB       [71]             ex      DE,HL           ; Save code string address
1AF7: 2AB781   [87]             ld      HL,(ERRLIN)     ; Get line of last break
1AFA: 22AF80   [103]            ld      (LINEAT),HL     ; Set up current line number
1AFD: EB       [107]            ex      DE,HL           ; Restore code string address
1AFE: C9       [117]            ret                     ; CONTinue where left off
                        
1AFF: E5       [11]     ACCSUM: push    HL              ; Save address in array
1B00: 2AA680   [27]             ld      HL,(CHKSUM)     ; Get check sum
1B03: 0600     [34]             ld      B,$00           ; BC - Value of byte
1B05: 4F       [38]             ld      C,A
1B06: 09       [49]             add     HL,BC           ; Add byte to check sum
1B07: 22A680   [65]             ld      (CHKSUM),HL     ; Re-save check sum
1B0A: E1       [75]             pop     HL              ; Restore address in array
1B0B: C9       [85]             ret
                        
1B0C: 7E       [ 7]     CHKLTR: ld      A,(HL)          ; Get byte
1B0D: FE41     [14]             cp      'A'             ; < 'a' ?
1B0F: D8       [19|25]          ret     C               ; Carry set if not letter
1B10: FE5B     [26]             cp      'Z'+1           ; > 'z' ?
1B12: 3F       [30]             ccf
1B13: C9       [40]             ret                     ; Carry set if not letter
                        
1B14: CD6A1A   [17]     FPSINT: call    GETCHR          ; Get next character
1B17: CDDF1E   [17]     POSINT: call    GETNUM          ; Get integer 0 to 32767
1B1A: CDED2C   [17]     DEPINT: call    TSTSGN          ; Test sign of FPREG
1B1D: FA351B   [27|27]          jp      M,FCERR         ; Negative - ?FC Error
1B20: 3ACC81   [13]     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1B23: FE90     [20]             cp      $80+$10         ; Exponent in range (16 bits)?
1B25: DA952D   [30|30]          jp      C,FPINT         ; Yes - convert it
1B28: 018090   [40]             ld      BC,$9080        ; BCDE = -32768
1B2B: 110000   [50]             ld      DE,$0000
1B2E: E5       [61]             push    HL              ; Save code string address
1B2F: CD682D   [78]             call    CMPNUM          ; Compare FPREG with BCDE
1B32: E1       [88]             pop     HL              ; Restore code string address
1B33: 51       [92]             ld      D,C             ; MSB to D
1B34: C8       [97|103]         ret     Z               ; Return if in range
1B35: 1E08     [ 7]     FCERR:  ld      E,FC            ; ?FC Error
1B37: C37915   [17]             jp      ERROR           ; Output error-
                        
1B3A: 2B       [ 6]     ATOH:   dec     HL              ; ASCII number to DE binary
1B3B: 110000   [10]     GETLN:  ld      DE,$0000        ; Get number to DE
1B3E: CD6A1A   [17]     GTLNLP: call    GETCHR          ; Get next character
1B41: D0       [22|28]          ret     NC              ; Exit if not a digit
1B42: E5       [33]             push    HL              ; Save code string address
1B43: F5       [44]             push    AF              ; Save digit
1B44: 219819   [54]             ld      HL,65529/10     ; Largest number 65529
1B47: CD4118   [71]             call    CPDEHL          ; Number in range?
1B4A: DA6515   [81|81]          jp      C,SNERR         ; No - ?SN Error
1B4D: 62       [85]             ld      H,D             ; HL = Number
1B4E: 6B       [89]             ld      L,E
1B4F: 19       [100]            add     HL,DE           ; Times 2
1B50: 29       [111]            add     HL,HL           ; Times 4
1B51: 19       [122]            add     HL,DE           ; Times 5
1B52: 29       [133]            add     HL,HL           ; Times 10
1B53: F1       [143]            pop     AF              ; Restore digit
1B54: D630     [150]            sub     '0'             ; Make it 0 to 9
1B56: 5F       [154]            ld      E,A             ; DE = Value of digit
1B57: 1600     [161]            ld      D,0
1B59: 19       [172]            add     HL,DE           ; Add to number
1B5A: EB       [176]            ex      DE,HL           ; Number to DE
1B5B: E1       [186]            pop     HL              ; Restore code string address
1B5C: C33E1B   [196]            jp      GTLNLP          ; Go to next character
                        
1B5F: CA9B16   [10|10]  CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1B62: CD171B   [27]             call    POSINT          ; Get integer 0 to 32767 to DE
1B65: 2B       [33]             dec     HL              ; Cancel increment
1B66: CD6A1A   [50]             call    GETCHR          ; Get next character
1B69: E5       [61]             push    HL              ; Save code string address
1B6A: 2A9481   [77]             ld      HL,(LSTRAM)     ; Get end of RAM
1B6D: CA821B   [87|87]          jp      Z,STORED        ; No value given - Use stored
1B70: E1       [97]             pop     HL              ; Restore code string address
1B71: CD4718   [114]            call    CHKSYN          ; Check for comma
1B74: 2C                        defb    ','
1B75: D5       [125]            push    DE              ; Save number
1B76: CD171B   [142]            call    POSINT          ; Get integer 0 to 32767
1B79: 2B       [148]            dec     HL              ; Cancel increment
1B7A: CD6A1A   [165]            call    GETCHR          ; Get next character
1B7D: C26515   [175|175]        jp      NZ,SNERR        ; ?SN Error if more on line
1B80: E3       [194]            ex      (SP),HL         ; Save code string address
1B81: EB       [198]            ex      DE,HL           ; Number to DE
1B82: 7D       [ 4]     STORED: ld      A,L             ; Get LSB of new RAM top
1B83: 93       [ 8]             sub     E               ; Subtract LSB of string space
1B84: 5F       [12]             ld      E,A             ; Save LSB
1B85: 7C       [16]             ld      A,H             ; Get MSB of new RAM top
1B86: 9A       [20]             sbc     A,D             ; Subtract MSB of string space
1B87: 57       [24]             ld      D,A             ; Save MSB
1B88: DA3A15   [34|34]          jp      C,OMERR         ; ?OM Error if not enough mem
1B8B: E5       [45]             push    HL              ; Save RAM top
1B8C: 2ABB81   [61]             ld      HL,(PROGND)     ; Get program end
1B8F: 012800   [71]             ld      BC,$28          ; 40 Bytes minimum working RAM
1B92: 09       [82]             add     HL,BC           ; Get lowest address
1B93: CD4118   [99]             call    CPDEHL          ; Enough memory?
1B96: D23A15   [109|109]        jp      NC,OMERR        ; No - ?OM Error
1B99: EB       [113]            ex      DE,HL           ; RAM top to HL
1B9A: 22AD80   [129]            ld      (STRSPC),HL     ; Set new string space
1B9D: E1       [139]            pop     HL              ; End of memory to use
1B9E: 229481   [155]            ld      (LSTRAM),HL     ; Set new top of RAM
1BA1: E1       [165]            pop     HL              ; Restore code string address
1BA2: C39B16   [175]            jp      INTVAR          ; Initialise variables
                        
1BA5: E5       [11]     RUN:    push    HL              ; store HL
1BA6: 21FFFF   [21]             ld      HL,-1           ; reset...
1BA9: 22B180   [37]             ld      (HLPLN),HL      ; ...HELP line register
1BAC: E1       [47]             pop     HL              ; retrieve HL
1BAD: CA9716   [57|57]          jp      Z,RUNFST        ; RUN from start if just RUN
1BB0: CD9B16   [74]             call    INTVAR          ; Initialise variables
1BB3: 012A1A   [84]             ld      BC,RUNCNT       ; Execution driver loop
1BB6: C3C91B   [94]             jp      RUNLIN          ; RUN from line number
                        
1BB9: 0E03     [ 7]     GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1BBB: CD2215   [24]             call    CHKSTK          ; Check for 3 levels of stack
1BBE: C1       [34]             pop     BC              ; Get return address
1BBF: E5       [45]             push    HL              ; Save code string for RETURN
1BC0: E5       [56]             push    HL              ; And for GOSUB routine
1BC1: 2AAF80   [72]             ld      HL,(LINEAT)     ; Get current line
1BC4: E3       [91]             ex      (SP),HL         ; Into stack - Code string out
1BC5: 3E8C     [98]             ld      A,ZGOSUB        ; "GOSUB" token
1BC7: F5       [109]            push    AF              ; Save token
1BC8: 33       [115]            inc     SP              ; Don't save flags
                        
1BC9: C5       [11]     RUNLIN: push    BC              ; Save return address
1BCA: CD3A1B   [17]     GOTO:   call    ATOH            ; ASCII number to DE binary
1BCD: CD0F1C   [34]             call    REM             ; Get end of line
1BD0: E5       [45]             push    HL              ; Save end of line
1BD1: 2AAF80   [61]             ld      HL,(LINEAT)     ; Get current line
1BD4: CD4118   [78]             call    CPDEHL          ; Line after current?
1BD7: E1       [88]             pop     HL              ; Restore end of line
1BD8: 23       [94]             inc     HL              ; Start of next line
1BD9: DC6E16   [104|111]        call    C,SRCHLP        ; Line is after current line
1BDC: D46B16   [114|121]        call    NC,SRCHLN       ; Line is before current line
1BDF: 60       [118]            ld      H,B             ; Set up code string address
1BE0: 69       [122]            ld      L,C
1BE1: 2B       [128]            dec     HL              ; Incremented after
1BE2: D8       [133|139]        ret     C               ; Line found
1BE3: 1E0E     [ 7]     ULERR:  ld      E,UL            ; ?UL Error
1BE5: C37915   [17]             jp      ERROR           ; Output error message
                        
1BE8: C0       [ 5|11]  RETURN: ret     NZ              ; Return if not just RETURN
1BE9: 16FF     [12]             ld      D,-1            ; Flag "GOSUB" search
1BEB: CDEE14   [29]             call    BAKSTK          ; Look "GOSUB" block
1BEE: F9       [35]             ld      SP,HL           ; Kill all FORs in subroutine
1BEF: FE8C     [42]             cp      ZGOSUB          ; Test for "GOSUB" token
1BF1: 1E04     [49]             ld      E,RG            ; ?RG Error
1BF3: C27915   [59|59]          jp      NZ,ERROR        ; Error if no "GOSUB" found
1BF6: E1       [69]             pop     HL              ; Get RETURN line number
1BF7: 22AF80   [85]             ld      (LINEAT),HL     ; Save as current
1BFA: 23       [91]             inc     HL              ; Was it from direct statement?
1BFB: 7C       [95]             ld      A,H
1BFC: B5       [99]             or      L               ; Return to line
1BFD: C2071C   [109|109]        jp      NZ,RETLIN       ; No - Return to line
1C00: 3AB181   [122]            ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1C03: B7       [126]            or      A               ; If so buffer is corrupted
1C04: C2BE15   [136|136]        jp      NZ,POPNOK       ; Yes - Go to command mode
1C07: 212A1A   [10]     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1C0A: E3       [29]             ex      (SP),HL         ; Into stack - Code string out
1C0B: 3E                        defb    $3E             ; Skip "pop HL"
1C0C: E1       [10]     NXTDTA: pop     HL              ; Restore code string address
                        
1C0D: 013A              DATA:   defb    $01,$3A         ; ':' End of statement
1C0F: 0E00     [ 7]     REM:    ld      C,$00           ; 00  End of statement
1C11: 0600     [14]             ld      B,$00
1C13: 79       [ 4]     NXTSTL: ld      A,C             ; Statement and byte
1C14: 48       [ 8]             ld      C,B
1C15: 47       [12]             ld      B,A             ; Statement end byte
1C16: 7E       [ 7]     NXTSTT: ld      A,(HL)          ; Get byte
1C17: B7       [11]             or      A               ; End of line?
1C18: C8       [16|22]          ret     Z               ; Yes - Exit
1C19: B8       [20]             cp      B               ; End of statement?
1C1A: C8       [25|31]          ret     Z               ; Yes - Exit
1C1B: 23       [31]             inc     HL              ; Next byte
1C1C: FE22     [38]             cp      $22             ; '"'             ; Literal string?
1C1E: CA131C   [48|48]          jp      Z,NXTSTL        ; Yes - Look for another '"'
1C21: C3161C   [58]             jp      NXTSTT          ; Keep looking
                        
1C24: CDEE20   [17]     LET:    call    GETVAR          ; Get variable name
1C27: CD4718   [34]             call    CHKSYN          ; Make sure "=" follows
1C2A: C6                        defb    ZEQUAL          ; "=" token
1C2B: D5       [45]             push    DE              ; Save address of variable
1C2C: 3A9281   [58]             ld      A,(TYPE)        ; Get data type
1C2F: F5       [69]             push    AF              ; Save type
1C30: CDF11E   [86]             call    EVAL            ; Evaluate expression
1C33: F1       [96]             pop     AF              ; Restore type
1C34: E3       [115]            ex      (SP),HL         ; Save code - Get var addr
1C35: 22B381   [131]            ld      (BRKLIN),HL     ; Save address of variable
1C38: 1F       [135]            rra                     ; Adjust type
1C39: CDE41E   [152]            call    CHKTYP          ; Check types are the same
1C3C: CA771C   [162|162]        jp      Z,LETNUM        ; Numeric - Move value
1C3F: E5       [11]     LETSTR: push    HL              ; Save address of string var
1C40: 2AC981   [27]             ld      HL,(FPREG)      ; Pointer to string entry
1C43: E5       [38]             push    HL              ; Save it on stack
1C44: 23       [44]             inc     HL              ; Skip over length
1C45: 23       [50]             inc     HL
1C46: 5E       [57]             ld      E,(HL)          ; LSB of string address
1C47: 23       [63]             inc     HL
1C48: 56       [70]             ld      D,(HL)          ; MSB of string address
1C49: 2A3381   [86]             ld      HL,(BASTXT)     ; Point to start of program
1C4C: CD4118   [103]            call    CPDEHL          ; Is string before program?
1C4F: D2661C   [113|113]        jp      NC,CRESTR       ; Yes - Create string entry
1C52: 2AAD80   [129]            ld      HL,(STRSPC)     ; Point to string space
1C55: CD4118   [146]            call    CPDEHL          ; Is string literal in program?
1C58: D1       [156]            pop     DE              ; Restore address of string
1C59: D26E1C   [166|166]        jp      NC,MVSTPT       ; Yes - Set up pointer
1C5C: 21A481   [176]            ld      HL,TMPSTR       ; Temporary string pool
1C5F: CD4118   [193]            call    CPDEHL          ; Is string in temporary pool?
1C62: D26E1C   [203|203]        jp      NC,MVSTPT       ; No - Set up pointer
1C65: 3E                        defb    $3E             ; Skip "pop DE"
1C66: D1       [10]     CRESTR: pop     DE              ; Restore address of string
1C67: CD4825   [27]             call    BAKTMP          ; Back to last tmp-str entry
1C6A: EB       [31]             ex      DE,HL           ; Address of string entry
1C6B: CD8123   [48]             call    SAVSTR          ; Save string in string area
1C6E: CD4825   [17]     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1C71: E1       [27]             pop     HL              ; Get string pointer
1C72: CD482D   [44]             call    DETHL4          ; Move string pointer to var
1C75: E1       [54]             pop     HL              ; Restore code string address
1C76: C9       [64]             ret
                        
1C77: E5       [11]     LETNUM: push    HL              ; Save address of variable
1C78: CD452D   [28]             call    FPTHL           ; Move value to variable
1C7B: D1       [38]             pop     DE              ; Restore address of variable
1C7C: E1       [48]             pop     HL              ; Restore code string address
1C7D: C9       [58]             ret
                        
1C7E: CD6527   [17]     ON:     call    GETINT          ; Get integer 0-255
1C81: 7E       [24]             ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1C82: 47       [28]             ld      B,A             ; Save in B
1C83: FE8C     [35]             cp      ZGOSUB          ; "GOSUB" token?
1C85: CA8D1C   [45|45]          jp      Z,ONGO          ; Yes - Find line number
1C88: CD4718   [62]             call    CHKSYN          ; Make sure it's "GOTO"
1C8B: 88                        defb    ZGOTO           ; "GOTO" token
1C8C: 2B       [68]             dec     HL              ; Cancel increment
1C8D: 4B       [ 4]     ONGO:   ld      C,E             ; Integer of branch value
1C8E: 0D       [ 4]     ONGOLP: dec     C               ; Count branches
1C8F: 78       [ 8]             ld      A,B             ; Get "GOTO" or "GOSUB" token
1C90: CA521A   [18|18]          jp      Z,ONJMP         ; Go to that line if right one
1C93: CD3B1B   [35]             call    GETLN           ; Get line number to DE
1C96: FE2C     [42]             cp      ','             ; Another line number?
1C98: C0       [47|53]          ret     NZ              ; No - Drop through
1C99: C38E1C   [57]             jp      ONGOLP          ; Yes - loop
                        
1C9C: CDF11E   [17]     IF:     call    EVAL            ; Evaluate expression
1C9F: 7E       [24]             ld      A,(HL)          ; Get token
1CA0: FE88     [31]             cp      ZGOTO           ; "GOTO" token?
1CA2: CAAA1C   [41|41]          jp      Z,IFGO          ; Yes - Get line
1CA5: CD4718   [58]             call    CHKSYN          ; Make sure it's "THEN"
1CA8: B8                        defb    ZTHEN           ; "THEN" token
1CA9: 2B       [64]             dec     HL              ; Cancel increment
1CAA: CDE21E   [17]     IFGO:   call    TSTNUM          ; Make sure it's numeric
1CAD: CDED2C   [34]             call    TSTSGN          ; Test state of expression
1CB0: CA0F1C   [44|44]          jp      Z,REM           ; False - Drop through
1CB3: CD6A1A   [61]             call    GETCHR          ; Get next character
1CB6: DACA1B   [71|71]          jp      C,GOTO          ; Number - GOTO that line
1CB9: C3511A   [81]             jp      IFJMP           ; Otherwise do statement
                        
1CBC: 2B       [ 6]     MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1CBD: CD6A1A   [23]             call    GETCHR          ; Get next character
1CC0: CA231D   [10|10]  PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1CC3: C8       [ 5|11]  PRNTLP: ret     Z               ; End of list - Exit
1CC4: FEB4     [12]             cp      ZTAB            ; "TAB(" token?
1CC6: CA4B1D   [22|22]          jp      Z,DOTAB         ; Yes - Do TAB routine
1CC9: FEB7     [29]             cp      ZSPC            ; "SPC(" token?
1CCB: CA4B1D   [39|39]          jp      Z,DOTAB         ; Yes - Do SPC routine
1CCE: E5       [50]             push    HL              ; Save code string address
1CCF: FE2C     [57]             cp      ','             ; Comma?
1CD1: CA321D   [67|67]          jp      Z,DOCOM         ; Yes - Move to next zone
1CD4: FE3B     [74]             cp      ';'             ; Semi-colon?
1CD6: CA6F1D   [84|84]          jp      Z,NEXITM        ; Do semi-colon routine
1CD9: C1       [94]             pop     BC              ; Code string address to BC
1CDA: CDF11E   [111]            call    EVAL            ; Evaluate expression
1CDD: E5       [122]            push    HL              ; Save code string address
1CDE: 3A9281   [135]            ld      A,(TYPE)        ; Get variable type
1CE1: B7       [139]            or      A               ; Is it a string variable?
1CE2: C20A1D   [149|149]        jp      NZ,PRNTST       ; Yes - Output string contents
1CE5: CD922E   [166]            call    NUMASC          ; Convert number to text
1CE8: CDA523   [183]            call    CRTST           ; Create temporary string
1CEB: 3600     [193]            ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1CED: 2AC981   [209]            ld      HL,(FPREG)      ; Get length of output
1CF0: 34       [220]            inc     (HL)            ; Plus 1 for the space
1CF1: 2AC981   [236]            ld      HL,(FPREG)      ; < Not needed >
1CF4: 3AA280   [249]            ld      A,(LWIDTH)      ; Get width of line
1CF7: 47       [253]            ld      B,A             ; To B
1CF8: 04       [257]            inc     B               ; Width 255 (No limit)?
1CF9: CA061D   [267|267]        jp      Z,PRNTNB        ; Yes - Output number string
1CFC: 04       [271]            inc     B               ; Adjust it
1CFD: 3A9081   [284]            ld      A,(CURPOS)      ; Get cursor position
1D00: 86       [291]            add     A,(HL)          ; Add length of string
1D01: 3D       [295]            dec     A               ; Adjust it
1D02: B8       [299]            cp      B               ; Will output fit on this line?
1D03: D4231D   [309|316]        call    NC,PRNTCRLF     ; No - CRLF first
1D06: CDEA23   [17]     PRNTNB: call    PRS1            ; Output string at (HL)
1D09: AF       [21]             xor     A               ; Skip call by setting 'z' flag
1D0A: C4EA23   [10|17]  PRNTST: call    NZ,PRS1         ; Output string at (HL)
1D0D: E1       [20]             pop     HL              ; Restore code string address
1D0E: C3BC1C   [30]             jp      MRPRNT          ; See if more to PRINT
                        
1D11: 3A9081   [13]     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1D14: B7       [17]             or      A               ; Already at start?
1D15: C8       [22|28]          ret     Z               ; Yes - Do nothing
1D16: C3231D   [32]             jp      PRNTCRLF        ; Start a new line
                        
1D19: AF       [ 4]     ENDINP: xor     A
1D1A: 322982   [17]             ld      (KBDNPT),A      ; char is not from keyboard
1D1D: 77       [24]             ld      (HL),A          ; Mark end of buffer
1D1E: 213581   [34]             ld      HL,BUFFER-1     ; Point to buffer
1D21: 180A     [46]             jr      CNTEND
1D23: 3E0D     [ 7]     PRNTCRLF:ld     A,CR            ; Load a CR
1D25: CD5218   [24]             call    OUTC            ; Output character
1D28: 3E0A     [31]             ld      A,LF            ; Load a LF
1D2A: CD5218   [48]             call    OUTC            ; Output character
1D2D: AF       [ 4]     CNTEND: xor     A               ; Set to position 0
1D2E: 329081   [17]             ld      (CURPOS),A      ; Store it
1D31: C9       [27]             ret                     ; return to caller
                        
1D32: 3AA380   [13]     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1D35: 47       [17]             ld      B,A             ; Save in B
1D36: 3AE481   [30]             ld      A,(SCR_CURS_X)  ; Get current position
1D39: B8       [34]             cp      B               ; Within the limit?
1D3A: D4231D   [44|51]          call    NC,PRNTCRLF     ; No - output CRLF
1D3D: D26F1D   [54|54]          jp      NC,NEXITM       ; Get next item
1D40: D60A     [ 7]     ZONELP: sub     $0A             ; Next zone of 10 characters
1D42: D2401D   [17|17]          jp      NC,ZONELP       ; Repeat if more zones
1D45: 2F       [21]             cpl                     ; Number of null chars to output
1D46: 0E00     [28]             ld      C,NLLCR         ; null char
1D48: C3651D   [38]             jp      ASPCS           ; Output them
                        
1D4B: F5       [11]     DOTAB:  push    AF              ; Save token
1D4C: CD6227   [28]             call    FNDNUM          ; Evaluate expression
1D4F: CD4718   [45]             call    CHKSYN          ; Make sure ")" follows
1D52: 29                        defb    ')'
1D53: 2B       [51]             dec     HL              ; Back space on to ")"
1D54: F1       [61]             pop     AF              ; Restore token
1D55: 0E00     [68]             ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1D57: D6B7     [75]             sub     ZSPC            ; Was it "SPC(" ?
1D59: E5       [86]             push    HL              ; Save code string address
1D5A: CA601D   [96|96]          jp      Z,DOSPC         ; Yes - Do 'E' spaces
1D5D: 3AE481   [109]            ld      A,(SCR_CURS_X)  ; Get current X position
1D60: 2F       [ 4]     DOSPC:  cpl                     ; Number of spaces to print to
1D61: 83       [ 8]             add     A,E             ; Total number to print
1D62: D26F1D   [18|18]          jp      NC,NEXITM       ; TAB < Current POS(X)
1D65: 3C       [ 4]     ASPCS:  inc     A               ; Output A spaces
1D66: 47       [ 8]             ld      B,A             ; Save number to print
1D67: 79       [ 4]     SPCLP:  ld      A,C             ; char to print
1D68: CD5218   [21]             call    OUTC            ; Output character in A
1D6B: 05       [25]             dec     B               ; Count them
1D6C: C2671D   [35|35]          jp      NZ,SPCLP        ; Repeat if more
1D6F: E1       [10]     NEXITM: pop     HL              ; Restore code string address
1D70: CD6A1A   [27]             call    GETCHR          ; Get next character
1D73: C3C31C   [37]             jp      PRNTLP          ; More to print
                        
1D76: 3F526564          REDO:   defb    "?Redo from start",CR,0
1D7A: 6F206672          
1D7E: 6F6D2073          
1D82: 74617274          
1D86: 0D00              
                        
1D88: 3AB281   [13]     BADINP: ld      A,(READFG)      ; READ or INPUT?
1D8B: B7       [17]             or      A
1D8C: C25F15   [27|27]          jp      NZ,DATSNR       ; READ - ?SN Error
1D8F: C1       [37]             pop     BC              ; Throw away code string addr
1D90: 21761D   [47]             ld      HL,REDO         ; "Redo from start" message
1D93: CDE723   [64]             call    PRS             ; Output string
1D96: C3CA16   [74]             jp      DOAGN           ; Do last INPUT again
                        
1D99: CD5223   [17]     INPUT:  call    IDTEST          ; Test for illegal direct
1D9C: 7E       [24]             ld      A,(HL)          ; Get character after "INPUT"
1D9D: FE22     [31]             cp      $22             ; '"' ; Is there a prompt string?
1D9F: 3E00     [38]             ld      A,$00           ; Clear A and leave flags
1DA1: 32A580   [51]             ld      (CTLOFG),A      ; Enable output
1DA4: C2B31D   [61|61]          jp      NZ,NOPMPT       ; No prompt - get input
1DA7: CDA623   [78]             call    QTSTR           ; Get string terminated by '"'
1DAA: CD4718   [95]             call    CHKSYN          ; Check for ';' after prompt
1DAD: 3B                        defb    ";"
1DAE: E5       [106]            push    HL              ; Save code string address
1DAF: CDEA23   [123]            call    PRS1            ; Output prompt string
1DB2: 3E                        defb    $3E             ; Skip "push HL"
1DB3: E5       [11]     NOPMPT: push    HL              ; Save code string address
1DB4: CDCE16   [28]             call    PROMPT          ; Get input with "? " prompt
1DB7: C1       [38]             pop     BC              ; Restore code string address
1DB8: DAB91A   [48|48]          jp      C,INPBRK        ; Break pressed - Exit
1DBB: 23       [54]             inc     HL              ; Next byte
1DBC: 7E       [61]             ld      A,(HL)          ; Get it
1DBD: B7       [65]             or      A               ; End of line?
1DBE: 2B       [71]             dec     HL              ; Back again
1DBF: C5       [82]             push    BC              ; Re-save code string address
1DC0: CD7008   [99]             call    CURSOR_OFF      ; disable cursor
1DC3: CA0C1C   [109|109]        jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1DC6: 362C     [119]            ld      (HL),','        ; Store comma as separator
1DC8: C3D01D   [129]            jp      NXTITM          ; Get next item
                        
1DCB: E5       [11]     READ:   push    HL              ; Save code string address
1DCC: 2AC181   [27]             ld      HL,(NXTDAT)     ; Next DATA statement
1DCF: F6                        defb    $F6             ; Flag "READ"
1DD0: AF       [ 4]     NXTITM: xor     A               ; Flag "INPUT"
1DD1: 32B281   [17]             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1DD4: E3       [36]             ex      (SP),HL         ; Get code str' , Save pointer
1DD5: C3DC1D   [46]             jp      GTVLUS          ; Get values
                        
1DD8: CD4718   [17]     NEDMOR: call    CHKSYN          ; Check for comma between items
1DDB: 2C                        defb    ','
1DDC: CDEE20   [17]     GTVLUS: call    GETVAR          ; Get variable name
1DDF: E3       [36]             ex      (SP),HL         ; Save code str" , Get pointer
1DE0: D5       [47]             push    DE              ; Save variable address
1DE1: 7E       [54]             ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
1DE2: FE2C     [61]             cp      ','             ; Comma?
1DE4: CA041E   [71|71]          jp      Z,ANTVLU        ; Yes - Get another value
1DE7: 3AB281   [84]             ld      A,(READFG)      ; Is it READ?
1DEA: B7       [88]             or      A
1DEB: C2701E   [98|98]          jp      NZ,FDTLP        ; Yes - Find next DATA stmt
1DEE: 3E3F     [105]            ld      A,'?'           ; More INPUT needed
1DF0: CD5218   [122]            call    OUTC            ; Output character
1DF3: CDCE16   [139]            call    PROMPT          ; Get INPUT with prompt
1DF6: D1       [149]            pop     DE              ; Variable address
1DF7: C1       [159]            pop     BC              ; Code string address
1DF8: DAB91A   [169|169]        jp      C,INPBRK        ; Break pressed
1DFB: 23       [175]            inc     HL              ; Point to next DATA byte
1DFC: 7E       [182]            ld      A,(HL)          ; Get byte
1DFD: B7       [186]            or      A               ; Is it zero (No input) ?
1DFE: 2B       [192]            dec     HL              ; Back space INPUT pointer
1DFF: C5       [203]            push    BC              ; Save code string address
1E00: CA0C1C   [213|213]        jp      Z,NXTDTA        ; Find end of buffer
1E03: D5       [224]            push    DE              ; Save variable address
1E04: 3A9281   [13]     ANTVLU: ld      A,(TYPE)        ; Check data type
1E07: B7       [17]             or      A               ; Is it numeric?
1E08: CA2E1E   [27|27]          jp      Z,INPBIN        ; Yes - Convert to binary
1E0B: CD6A1A   [44]             call    GETCHR          ; Get next character
1E0E: 57       [48]             ld      D,A             ; Save input character
1E0F: 47       [52]             ld      B,A             ; Again
1E10: FE22     [59]             cp      $22             ; '"'     ; Start of literal sting?
1E12: CA221E   [69|69]          jp      Z,STRENT        ; Yes - Create string entry
1E15: 3AB281   [82]             ld      A,(READFG)      ; "READ" or "INPUT" ?
1E18: B7       [86]             or      A
1E19: 57       [90]             ld      D,A             ; Save 00 if "INPUT"
1E1A: CA1F1E   [100|100]        jp      Z,ITMSEP        ; "INPUT" - End with 00
1E1D: 163A     [107]            ld      D,':'           ; "DATA" - End with 00 or ':'
1E1F: 062C     [ 7]     ITMSEP: ld      B,','           ; Item separator
1E21: 2B       [13]             dec     HL              ; Back space for DTSTR
1E22: CDA923   [17]     STRENT: call    DTSTR           ; Get string terminated by D
1E25: EB       [21]             ex      DE,HL           ; String address to DE
1E26: 21391E   [31]             ld      HL,LTSTND       ; Where to go after LETSTR
1E29: E3       [50]             ex      (SP),HL         ; Save HL , get input pointer
1E2A: D5       [61]             push    DE              ; Save address of string
1E2B: C33F1C   [71]             jp      LETSTR          ; Assign string to variable
                        
1E2E: CD6A1A   [17]     INPBIN: call    GETCHR          ; Get next character
1E31: CDF42D   [34]             call    ASCTFP          ; Convert ASCII to FP number
1E34: E3       [53]             ex      (SP),HL         ; Save input ptr, Get var addr
1E35: CD452D   [70]             call    FPTHL           ; Move FPREG to variable
1E38: E1       [80]             pop     HL              ; Restore input pointer
1E39: 2B       [ 6]     LTSTND: dec     HL              ; dec 'cos GETCHR INCs
1E3A: CD6A1A   [23]             call    GETCHR          ; Get next character
1E3D: CA451E   [33|33]          jp      Z,MORDT         ; End of line - More needed?
1E40: FE2C     [40]             cp      ','             ; Another value?
1E42: C2881D   [50|50]          jp      NZ,BADINP       ; No - Bad input
1E45: E3       [19]     MORDT:  ex      (SP),HL         ; Get code string address
1E46: 2B       [25]             dec     HL              ; dec 'cos GETCHR INCs
1E47: CD6A1A   [42]             call    GETCHR          ; Get next character
1E4A: C2D81D   [52|52]          jp      NZ,NEDMOR       ; More needed - Get it
1E4D: D1       [62]             pop     DE              ; Restore DATA pointer
1E4E: 3AB281   [75]             ld      A,(READFG)      ; "READ" or "INPUT" ?
1E51: B7       [79]             or      A
1E52: EB       [83]             ex      DE,HL           ; DATA pointer to HL
1E53: C2901A   [93|93]          jp      NZ,UPDATA       ; Update DATA pointer if "READ"
1E56: D5       [104]            push    DE              ; Save code string address
1E57: B6       [111]            or      (HL)            ; More input given?
1E58: 21601E   [121]            ld      HL,EXTIG        ; "?Extra ignored" message
1E5B: C4E723   [131|138]        call    NZ,PRS          ; Output string if extra given
1E5E: E1       [141]            pop     HL              ; Restore code string address
1E5F: C9       [151]            ret
                        
1E60: 3F457874          EXTIG:  defb    "?Extra ignored",CR,0
1E64: 72612069          
1E68: 676E6F72          
1E6C: 65640D00          
                        
1E70: CD0D1C   [17]     FDTLP:  call    DATA            ; Get next statement
1E73: B7       [21]             or      A               ; End of line?
1E74: C2891E   [31|31]          jp      NZ,FANDT        ; No - See if DATA statement
1E77: 23       [37]             inc     HL
1E78: 7E       [44]             ld      A,(HL)          ; End of program?
1E79: 23       [50]             inc     HL
1E7A: B6       [57]             or      (HL)            ; 00 00 Ends program
1E7B: 1E06     [64]             ld      E,OD            ; ?OD Error
1E7D: CA7915   [74|74]          jp      Z,ERROR         ; Yes - Out of DATA
1E80: 23       [80]             inc     HL
1E81: 5E       [87]             ld      E,(HL)          ; LSB of line number
1E82: 23       [93]             inc     HL
1E83: 56       [100]            ld      D,(HL)          ; MSB of line number
1E84: EB       [104]            ex      DE,HL
1E85: 22AE81   [120]            ld      (DATLIN),HL     ; Set line of current DATA item
1E88: EB       [124]            ex      DE,HL
1E89: CD6A1A   [17]     FANDT:  call    GETCHR          ; Get next character
1E8C: FE83     [24]             cp      ZDATA           ; "DATA" token
1E8E: C2701E   [34|34]          jp      NZ,FDTLP        ; No "DATA" - Keep looking
1E91: C3041E   [44]             jp      ANTVLU          ; Found - Convert input
                        
1E94: 110000   [10]     NEXT:   ld      DE,$0000        ; In case no index given
1E97: C4EE20   [10|17]  NEXT1:  call    NZ,GETVAR       ; Get index address
1E9A: 22B381   [26]             ld      (BRKLIN),HL     ; Save code string address
1E9D: CDEE14   [43]             call    BAKSTK          ; Look for "FOR" block
1EA0: C26B15   [53|53]          jp      NZ,NFERR        ; No "FOR" - ?NF Error
1EA3: F9       [59]             ld      SP,HL           ; Clear nested loops
1EA4: D5       [70]             push    DE              ; Save index address
1EA5: 7E       [77]             ld      A,(HL)          ; Get sign of STEP
1EA6: 23       [83]             inc     HL
1EA7: F5       [94]             push    AF              ; Save sign of STEP
1EA8: D5       [105]            push    DE              ; Save index address
1EA9: CD2B2D   [122]            call    PHLTFP          ; Move index value to FPREG
1EAC: E3       [141]            ex      (SP),HL         ; Save address of TO value
1EAD: E5       [152]            push    HL              ; Save address of index
1EAE: CD472A   [169]            call    ADDPHL          ; Add STEP to index value
1EB1: E1       [179]            pop     HL              ; Restore address of index
1EB2: CD452D   [196]            call    FPTHL           ; Move value to index variable
1EB5: E1       [206]            pop     HL              ; Restore address of TO value
1EB6: CD3C2D   [223]            call    LOADFP          ; Move TO value to BCDE
1EB9: E5       [234]            push    HL              ; Save address of line of FOR
1EBA: CD682D   [251]            call    CMPNUM          ; Compare index with TO value
1EBD: E1       [261]            pop     HL              ; Restore address of line num
1EBE: C1       [271]            pop     BC              ; Address of sign of STEP
1EBF: 90       [275]            sub     B               ; Compare with expected sign
1EC0: CD3C2D   [292]            call    LOADFP          ; BC = Loop stmt,DE = Line num
1EC3: CACF1E   [302|302]        jp      Z,KILFOR        ; Loop finished - Terminate it
1EC6: EB       [306]            ex      DE,HL           ; Loop statement line number
1EC7: 22AF80   [322]            ld      (LINEAT),HL     ; Set loop line number
1ECA: 69       [326]            ld      L,C             ; Set code string to loop
1ECB: 60       [330]            ld      H,B
1ECC: C3261A   [340]            jp      PUTFID          ; Put back "FOR" and continue
                        
1ECF: F9       [ 6]     KILFOR: ld      SP,HL           ; Remove "FOR" block
1ED0: 2AB381   [22]             ld      HL,(BRKLIN)     ; Code string after "NEXT"
1ED3: 7E       [29]             ld      A,(HL)          ; Get next byte in code string
1ED4: FE2C     [36]             cp      ','             ; More NEXTs ?
1ED6: C22A1A   [46|46]          jp      NZ,RUNCNT       ; No - Do next statement
1ED9: CD6A1A   [63]             call    GETCHR          ; Position to index name
1EDC: CD971E   [80]             call    NEXT1           ; Re-enter NEXT routine
                        ; < will not RETurn to here , Exit to RUNCNT or Loop >
                        
1EDF: CDF11E   [17]     GETNUM: call    EVAL            ; Get a numeric expression
1EE2: F6                TSTNUM: defb    $F6             ; Clear carry (numeric)
1EE3: 37       [ 4]     TSTSTR: scf                     ; Set carry (string)
1EE4: 3A9281   [13]     CHKTYP: ld      A,(TYPE)        ; Check types match
1EE7: 8F       [17]             adc     A,A             ; Expected + actual
1EE8: B7       [21]             or      A               ; Clear carry , set parity
1EE9: E8       [26|32]          ret     PE              ; Even parity - Types match
1EEA: C37715   [36]             jp      TMERR           ; Different types - Error
                        
1EED: CD4718   [17]     OPNPAR: call    CHKSYN          ; Make sure "(" follows
1EF0: 28                        defb    '('
1EF1: 2B       [ 6]     EVAL:   dec     HL              ; Evaluate expression & save
1EF2: 1600     [13]             ld      D,$00           ; Precedence value
1EF4: D5       [11]     EVAL1:  push    DE              ; Save precedence
1EF5: 0E01     [18]             ld      C,$01
1EF7: CD2215   [35]             call    CHKSTK          ; Check for 1 level of stack
1EFA: CD681F   [52]             call    OPRND           ; Get next expression value
1EFD: 22B581   [16]     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
1F00: 2AB581   [16]     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
1F03: C1       [26]             pop     BC              ; Precedence value and operator
1F04: 78       [30]             ld      A,B             ; Get precedence value
1F05: FE78     [37]             cp      $78             ; "AND", "OR", or "XOR" ?
1F07: D4E21E   [47|54]          call    NC,TSTNUM       ; No - Make sure it's a number
1F0A: 7E       [54]             ld      A,(HL)          ; Get next operator / function
1F0B: 1600     [61]             ld      D,$00           ; Clear Last relation
1F0D: D6C5     [ 7]     RLTLP:  sub     ZGTR            ; ">" Token
1F0F: DA291F   [17|17]          jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
1F12: FE03     [24]             cp      ZLTH+1-ZGTR     ; < = >
1F14: D2291F   [34|34]          jp      NC,FOPRND       ; Function - Call it
1F17: FE01     [41]             cp      ZEQUAL-ZGTR     ; "="
1F19: 17       [45]             rla                     ; <- Test for legal
1F1A: AA       [49]             xor     D               ; <- combinations of < = >
1F1B: BA       [53]             cp      D               ; <- by combining last token
1F1C: 57       [57]             ld      D,A             ; <- with current one
1F1D: DA6515   [67|67]          jp      C,SNERR         ; Error if "<<' '==" or ">>"
1F20: 22AA81   [83]             ld      (CUROPR),HL     ; Save address of current token
1F23: CD6A1A   [100]            call    GETCHR          ; Get next character
1F26: C30D1F   [110]            jp      RLTLP           ; Treat the two as one
                        
1F29: 7A       [ 4]     FOPRND: ld      A,D             ; < = > found ?
1F2A: B7       [ 8]             or      A
1F2B: C26920   [18|18]          jp      NZ,TSTRED       ; Yes - Test for reduction
1F2E: 7E       [25]             ld      A,(HL)          ; Get operator token
1F2F: 22AA81   [41]             ld      (CUROPR),HL     ; Save operator address
1F32: D6BB     [48]             sub     ZPLUS           ; Operator or function?
1F34: D8       [53|59]          ret     C               ; Neither - Exit
1F35: FE0A     [60]             cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
1F37: D0       [65|71]          ret     NC              ; No - Exit
1F38: 5F       [69]             ld      E,A             ; Coded operator
1F39: 3A9281   [82]             ld      A,(TYPE)        ; Get data type
1F3C: 3D       [86]             dec     A               ; FF = numeric , 00 = string
1F3D: B3       [90]             or      E               ; Combine with coded operator
1F3E: 7B       [94]             ld      A,E             ; Get coded operator
1F3F: CADD24   [104|104]        jp      Z,CONCAT        ; String concatenation
1F42: 07       [108]            rlca                    ; Times 2
1F43: 83       [112]            add     A,E             ; Times 3
1F44: 5F       [116]            ld      E,A             ; To DE (D is 0)
1F45: 211612   [126]            ld      HL,PRITAB       ; Precedence table
1F48: 19       [137]            add     HL,DE           ; To the operator concerned
1F49: 78       [141]            ld      A,B             ; Last operator precedence
1F4A: 56       [148]            ld      D,(HL)          ; Get evaluation precedence
1F4B: BA       [152]            cp      D               ; Compare with eval precedence
1F4C: D0       [157|163]        ret     NC              ; Exit if higher precedence
1F4D: 23       [163]            inc     HL              ; Point to routine address
1F4E: CDE21E   [180]            call    TSTNUM          ; Make sure it's a number
                        
1F51: C5       [11]     STKTHS: push    BC              ; Save last precedence & token
1F52: 01001F   [21]             ld      BC,EVAL3        ; Where to go on prec' break
1F55: C5       [32]             push    BC              ; Save on stack for return
1F56: 43       [36]             ld      B,E             ; Save operator
1F57: 4A       [40]             ld      C,D             ; Save precedence
1F58: CD1E2D   [57]             call    STAKFP          ; Move value to stack
1F5B: 58       [61]             ld      E,B             ; Restore operator
1F5C: 51       [65]             ld      D,C             ; Restore precedence
1F5D: 4E       [72]             ld      C,(HL)          ; Get LSB of routine address
1F5E: 23       [78]             inc     HL
1F5F: 46       [85]             ld      B,(HL)          ; Get MSB of routine address
1F60: 23       [91]             inc     HL
1F61: C5       [102]            push    BC              ; Save routine address
1F62: 2AAA81   [118]            ld      HL,(CUROPR)     ; Address of current operator
1F65: C3F41E   [128]            jp      EVAL1           ; Loop until prec' break
                        
1F68: AF       [ 4]     OPRND:  xor     A               ; Get operand routine
1F69: 329281   [17]             ld      (TYPE),A        ; Set numeric expected
1F6C: CD6A1A   [34]             call    GETCHR          ; Get next character
1F6F: 1E24     [41]             ld      E,MO            ; ?MO Error
1F71: CA7915   [51|51]          jp      Z,ERROR         ; No operand - Error
1F74: DAF42D   [61|61]          jp      C,ASCTFP        ; Number - Get value
1F77: CD0C1B   [78]             call    CHKLTR          ; See if a letter
1F7A: D2CF1F   [88|88]          jp      NC,CONVAR       ; Letter - Find variable
1F7D: FE26     [95]             cp      '&'             ; &H = HEX, &B = BINARY
1F7F: 2012     [102|107]        jr      NZ,NOTAMP
1F81: CD6A1A   [119]            call    GETCHR          ; Get next character
1F84: FE48     [126]            cp      'H'             ; Hex number indicated? [function added]
1F86: CAFE3C   [136|136]        jp      Z,HEXTFP        ; Convert Hex to FPREG
1F89: FE42     [143]            cp      'B'             ; Binary number indicated? [function added]
1F8B: CA6E3D   [153|153]        jp      Z,BINTFP        ; Convert Bin to FPREG
1F8E: 1E02     [160]            ld      E,SN            ; If neither then a ?SN Error
1F90: CA7915   [170|170]        jp      Z,ERROR         ;
1F93: FEBB     [ 7]     NOTAMP: cp      ZPLUS           ; '+' Token ?
1F95: CA681F   [17|17]          jp      Z,OPRND         ; Yes - Look for operand
1F98: FE2E     [24]             cp      '.'             ; '.' ?
1F9A: CAF42D   [34|34]          jp      Z,ASCTFP        ; Yes - Create FP number
1F9D: FEBC     [41]             cp      ZMINUS          ; '-' Token ?
1F9F: CABE1F   [51|51]          jp      Z,MINUS         ; Yes - Do minus
1FA2: FE22     [58]             cp      $22             ; '"'             ; Literal string ?
1FA4: CAA623   [68|68]          jp      Z,QTSTR         ; Get string terminated by '"'
1FA7: FEB9     [75]             cp      ZNOT            ; "NOT" Token ?
1FA9: CAC920   [85|85]          jp      Z,EVNOT         ; Yes - Eval NOT expression
1FAC: FEB6     [92]             cp      ZFN             ; "FN" Token ?
1FAE: CA0A23   [102|102]        jp      Z,DOFN          ; Yes - Do FN routine
1FB1: D6C8     [109]            sub     ZSGN            ; Is it a function?
1FB3: D2E01F   [119|119]        jp      NC,FNOFST       ; Yes - Evaluate function
1FB6: CDED1E   [17]     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
1FB9: CD4718   [34]             call    CHKSYN          ; Make sure ")" follows
1FBC: 29                        defb    ')'
1FBD: C9       [44]             ret
                        
1FBE: 167D     [ 7]     MINUS:  ld      D,$7D           ; '-' precedence
1FC0: CDF41E   [24]             call    EVAL1           ; Evaluate until prec' break
1FC3: 2AB581   [40]             ld      HL,(NXTOPR)     ; Get next operator address
1FC6: E5       [51]             push    HL              ; Save next operator address
1FC7: CD162D   [68]             call    INVSGN          ; Negate value
1FCA: CDE21E   [17]     RETNUM: call    TSTNUM          ; Make sure it's a number
1FCD: E1       [27]             pop     HL              ; Restore next operator address
1FCE: C9       [37]             ret
                        
1FCF: CDEE20   [17]     CONVAR: call    GETVAR          ; Get variable address to DE
1FD2: E5       [11]     FRMEVL: push    HL              ; Save code string address
1FD3: EB       [15]             ex      DE,HL           ; Variable address to HL
1FD4: 22C981   [31]             ld      (FPREG),HL      ; Save address of variable
1FD7: 3A9281   [44]             ld      A,(TYPE)        ; Get type
1FDA: B7       [48]             or      A               ; Numeric?
1FDB: CC2B2D   [58|65]          call    Z,PHLTFP        ; Yes - Move contents to FPREG
1FDE: E1       [68]             pop     HL              ; Restore code string address
1FDF: C9       [78]             ret
                        
1FE0: 0600     [ 7]     FNOFST: ld      B,$00           ; Get address of function
1FE2: 07       [11]             rlca                    ; Double function offset
1FE3: 4F       [15]             ld      C,A             ; BC = Offset in function table
1FE4: C5       [26]             push    BC              ; Save adjusted token value
1FE5: CD6A1A   [43]             call    GETCHR          ; Get next character
1FE8: 79       [47]             ld      A,C             ; Get adjusted token value
1FE9: FE2C     [54]             cp      2*(ZPOINT-ZSGN) ; "POINT" token?
1FEB: CA2935   [64|64]          jp      Z,POINT         ; Yes, do "POINT"
1FEE: FE2E     [71]             cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
1FF0: CAB925   [81|81]          jp      Z,INSTR         ; Yes, do "INSTR"
1FF3: FE3D     [88]             cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
1FF5: DA1120   [98|98]          jp      C,FNVAL         ; No - Do function
1FF8: CDED1E   [115]            call    OPNPAR          ; Evaluate expression  (X,...
1FFB: CD4718   [132]            call    CHKSYN          ; Make sure ',' follows
1FFE: 2C                        defb    ','
1FFF: CDE31E   [149]            call    TSTSTR          ; Make sure it's a string
2002: EB       [153]            ex      DE,HL           ; Save code string address
2003: 2AC981   [169]            ld      HL,(FPREG)      ; Get address of string
2006: E3       [188]            ex      (SP),HL         ; Save address of string
2007: E5       [199]            push    HL              ; Save adjusted token value
2008: EB       [203]            ex      DE,HL           ; Restore code string address
2009: CD6527   [220]            call    GETINT          ; Get integer 0-255
200C: EB       [224]            ex      DE,HL           ; Save code string address
200D: E3       [243]            ex      (SP),HL         ; Save integer,HL = adj' token
200E: C31920   [253]            jp      GOFUNC          ; Jump to string function
                        
2011: CDB61F   [17]     FNVAL:  call    EVLPAR          ; Evaluate expression
2014: E3       [36]             ex      (SP),HL         ; HL = Adjusted token value
2015: 11CA1F   [46]             ld      DE,RETNUM       ; Return number from function
2018: D5       [57]             push    DE              ; Save on stack
2019: 01E50F   [10]     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
201C: 09       [21]             add     HL,BC           ; Point to right address
201D: 4E       [28]             ld      C,(HL)          ; Get LSB of address
201E: 23       [34]             inc     HL              ;
201F: 66       [41]             ld      H,(HL)          ; Get MSB of address
2020: 69       [45]             ld      L,C             ; Address to HL
2021: E9       [49]             jp      (HL)            ; Jump to function
                        
2022: 15       [ 4]     SGNEXP: dec     D               ; Dee to flag negative exponent
2023: FEBC     [11]             cp      ZMINUS          ; '-' token ?
2025: C8       [16|22]          ret     Z               ; Yes - Return
2026: FE2D     [23]             cp      '-'             ; '-' ASCII ?
2028: C8       [28|34]          ret     Z               ; Yes - Return
2029: 14       [32]             inc     D               ; Inc to flag positive exponent
202A: FE2B     [39]             cp      '+'             ; '+' ASCII ?
202C: C8       [44|50]          ret     Z               ; Yes - Return
202D: FEBB     [51]             cp      ZPLUS           ; '+' token ?
202F: C8       [56|62]          ret     Z               ; Yes - Return
2030: 2B       [62]             dec     HL              ; dec 'cos GETCHR INCs
2031: C9       [72]             ret                     ; Return "NZ"
                        
                        ; execute OR, AND, and XOR operations
2032: AF       [ 4]     PAND:   xor     A               ; for AND, Z=1
2033: 1807     [16]             jr      CNTLGC          
2035: AF       [ 4]     POR     xor     A               ; for OR, Z=0, S=1
2036: D601     [11]             sub     $01
2038: 1802     [23]             jr      CNTLGC
203A: AF       [ 4]     PXOR:   xor     A               ; for XOR, Z=0, S=0
203B: 3C       [ 8]             inc     A
203C: F5       [11]     CNTLGC: push    AF              ; store operand's flags
203D: CDE21E   [28]             call    TSTNUM          ; Make sure it's a number
2040: CD201B   [45]             call    DEINT           ; Get integer -32768 to 32767
2043: F1       [55]             pop     AF              ; retrieve operand's flags
2044: EB       [59]             ex      DE,HL           ; <- Get last
2045: C1       [69]             pop     BC              ; <-  value
2046: E3       [88]             ex      (SP),HL         ; <-  from
2047: EB       [92]             ex      DE,HL           ; <-  stack
2048: CD2E2D   [109]            call    FPBCDE          ; Move last value to FPREG
204B: F5       [120]            push    AF              ; store operand's flags
204C: CD201B   [137]            call    DEINT           ; Get integer -32768 to 32767
204F: F1       [147]            pop     AF              ; retrieve operand's flags
2050: C1       [157]            pop     BC              ; Get value
2051: 79       [161]            ld      A,C             ; Get LSB
2052: 21C822   [171]            ld      HL,ACPASS       ; Address of save AC as current
2055: 2005     [178|183]        jr      NZ,POR1         ; if X/OR, jump over
2057: A3       [ 4]     PAND1:  and     E               ; "AND" LSBs
2058: 4F       [ 8]             ld      C,A             ; Save LSB
2059: 78       [12]             ld      A,B             ; Get MSB
205A: A2       [16]             and     D               ; "AND" MSBs
205B: E9       [20]             jp      (HL)            ; Save AC as current (ACPASS)
205C: F26420   [10|10]  POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
205F: B3       [14]             or      E               ; "OR" LSBs
2060: 4F       [18]             ld      C,A             ; Save LSB
2061: 78       [22]             ld      A,B             ; Get MSB
2062: B2       [26]             or      D               ; "OR" MSBs
2063: E9       [30]             jp      (HL)            ; Save AC as current (ACPASS)
2064: AB       [ 4]     PXOR1:  xor     E               ; "XOR" LSBs
2065: 4F       [ 8]             ld      C,A             ; Save LSB
2066: 78       [12]             ld      A,B             ; Get MSB
2067: AA       [16]             xor     D               ; "XOR" MSBs
2068: E9       [20]             jp      (HL)            ; Save AC as current (ACPASS) 
                        
2069: 217B20   [10]     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
206C: 3A9281   [23]             ld      A,(TYPE)        ; Get data type
206F: 1F       [27]             rra                     ; Carry set = string
2070: 7A       [31]             ld      A,D             ; Get last precedence value
2071: 17       [35]             rla                     ; Times 2 plus carry
2072: 5F       [39]             ld      E,A             ; To E
2073: 1664     [46]             ld      D,$64           ; Relational precedence
2075: 78       [50]             ld      A,B             ; Get current precedence
2076: BA       [54]             cp      D               ; Compare with last
2077: D0       [59|65]          ret     NC              ; Eval if last was rel' or log'
2078: C3511F   [69]             jp      STKTHS          ; Stack this one and get next
                        
207B: 7D20              CMPLOG: defw    CMPLG1          ; Compare two values / strings
207D: 79       [ 4]     CMPLG1: ld      A,C             ; Get data type
207E: B7       [ 8]             or      A
207F: 1F       [12]             rra
2080: C1       [22]             pop     BC              ; Get last expression to BCDE
2081: D1       [32]             pop     DE
2082: F5       [43]             push    AF              ; Save status
2083: CDE41E   [60]             call    CHKTYP          ; Check that types match
2086: 21BF20   [70]             ld      HL,CMPRES       ; Result to comparison
2089: E5       [81]             push    HL              ; Save for RETurn
208A: CA682D   [91|91]          jp      Z,CMPNUM        ; Compare values if numeric
208D: AF       [95]             xor     A               ; Compare two strings
208E: 329281   [108]            ld      (TYPE),A        ; Set type to numeric
2091: D5       [119]            push    DE              ; Save string name
2092: CD2A25   [136]            call    GSTRCU          ; Get current string
2095: 7E       [143]            ld      A,(HL)          ; Get length of string
2096: 23       [149]            inc     HL
2097: 23       [155]            inc     HL
2098: 4E       [162]            ld      C,(HL)          ; Get LSB of address
2099: 23       [168]            inc     HL
209A: 46       [175]            ld      B,(HL)          ; Get MSB of address
209B: D1       [185]            pop     DE              ; Restore string name
209C: C5       [196]            push    BC              ; Save address of string
209D: F5       [207]            push    AF              ; Save length of string
209E: CD2E25   [224]            call    GSTRDE          ; Get second string
20A1: CD3C2D   [241]            call    LOADFP          ; Get address of second string
20A4: F1       [251]            pop     AF              ; Restore length of string 1
20A5: 57       [255]            ld      D,A             ; Length to D
20A6: E1       [265]            pop     HL              ; Restore address of string 1
20A7: 7B       [ 4]     CMPSTR: ld      A,E             ; Bytes of string 2 to do
20A8: B2       [ 8]             or      D               ; Bytes of string 1 to do
20A9: C8       [13|19]          ret     Z               ; Exit if all bytes compared
20AA: 7A       [17]             ld      A,D             ; Get bytes of string 1 to do
20AB: D601     [24]             sub     $01
20AD: D8       [29|35]          ret     C               ; Exit if end of string 1
20AE: AF       [33]             xor     A
20AF: BB       [37]             cp      E               ; Bytes of string 2 to do
20B0: 3C       [41]             inc     A
20B1: D0       [46|52]          ret     NC              ; Exit if end of string 2
20B2: 15       [50]             dec     D               ; Count bytes in string 1
20B3: 1D       [54]             dec     E               ; Count bytes in string 2
20B4: 0A       [61]             ld      A,(BC)          ; Byte in string 2
20B5: BE       [68]             cp      (HL)            ; Compare to byte in string 1
20B6: 23       [74]             inc     HL              ; Move up string 1
20B7: 03       [80]             inc     BC              ; Move up string 2
20B8: CAA720   [90|90]          jp      Z,CMPSTR        ; Same - Try next bytes
20BB: 3F       [94]             ccf                     ; Flag difference (">" or "<")
20BC: C3F82C   [104]            jp      FLGDIF          ; "<" gives -1 , ">" gives +1
                        
20BF: 3C       [ 4]     CMPRES: inc     A               ; Increment current value
20C0: 8F       [ 8]             adc     A,A             ; Double plus carry
20C1: C1       [18]             pop     BC              ; Get other value
20C2: A0       [22]             and     B               ; Combine them
20C3: C6FF     [29]             add     A,-1            ; Carry set if different
20C5: 9F       [33]             sbc     A,A             ; 00 - Equal , FF - Different
20C6: C3FF2C   [43]             jp      FLGREL          ; Set current value & continue
                        
20C9: 165A     [ 7]     EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
20CB: CDF41E   [24]             call    EVAL1           ; Eval until precedence break
20CE: CDE21E   [41]             call    TSTNUM          ; Make sure it's a number
20D1: CD201B   [58]             call    DEINT           ; Get integer -32768 - 32767
20D4: 7B       [62]             ld      A,E             ; Get LSB
20D5: 2F       [66]             cpl                     ; Invert LSB
20D6: 4F       [70]             ld      C,A             ; Save "NOT" of LSB
20D7: 7A       [74]             ld      A,D             ; Get MSB
20D8: 2F       [78]             cpl                     ; Invert MSB
20D9: CDC822   [95]             call    ACPASS          ; Save AC as current
20DC: C1       [105]            pop     BC              ; Clean up stack
20DD: C3001F   [115]            jp      EVAL3           ; Continue evaluation
                        
20E0: 2B       [ 6]     DIMRET: dec     HL              ; dec 'cos GETCHR INCs
20E1: CD6A1A   [23]             call    GETCHR          ; Get next character
20E4: C8       [28|34]          ret     Z               ; End of DIM statement
20E5: CD4718   [45]             call    CHKSYN          ; Make sure ',' follows
20E8: 2C                        defb    ','
20E9: 01E020   [10]     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
20EC: C5       [21]             push    BC              ; Save on stack
20ED: F6                        defb    $F6             ; Flag "Create" variable
20EE: AF       [ 4]     GETVAR: xor     A               ; Find variable address,to DE
20EF: 329181   [17]             ld      (LCRFLG),A      ; Set locate / create flag
20F2: 46       [24]             ld      B,(HL)          ; Get First byte of name
20F3: CD0C1B   [17]     GTFNAM: call    CHKLTR          ; See if a letter
20F6: DA6515   [27|27]          jp      C,SNERR         ; ?SN Error if not a letter
20F9: AF       [31]             xor     A
20FA: 4F       [35]             ld      C,A             ; Clear second byte of name
20FB: 329281   [48]             ld      (TYPE),A        ; Set type to numeric
20FE: CD6A1A   [65]             call    GETCHR          ; Get next character
2101: DA0A21   [75|75]          jp      C,SVNAM2        ; Numeric - Save in name
2104: CD0C1B   [92]             call    CHKLTR          ; See if a letter
2107: DA1721   [102|102]        jp      C,CHARTY        ; Not a letter - Check type
210A: 4F       [ 4]     SVNAM2: ld      C,A             ; Save second byte of name
210B: CD6A1A   [17]     ENDNAM: call    GETCHR          ; Get next character
210E: DA0B21   [27|27]          jp      C,ENDNAM        ; Numeric - Get another
2111: CD0C1B   [44]             call    CHKLTR          ; See if a letter
2114: D20B21   [54|54]          jp      NC,ENDNAM       ; Letter - Get another
2117: D624     [ 7]     CHARTY: sub     '$'             ; String variable?
2119: C22621   [17|17]          jp      NZ,NOTSTR       ; No - Numeric variable
211C: 3C       [21]             inc     A               ; A = 1 (string type)
211D: 329281   [34]             ld      (TYPE),A        ; Set type to string
2120: 0F       [38]             rrca                    ; A = 80H , Flag for string
2121: 81       [42]             add     A,C             ; 2nd byte of name has bit 7 on
2122: 4F       [46]             ld      C,A             ; Resave second byte on name
2123: CD6A1A   [63]             call    GETCHR          ; Get next character
2126: 3AB081   [13]     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2129: 3D       [17]             dec     A
212A: CAD321   [27|27]          jp      Z,ARLDSV        ; Yes - Get array name
212D: F23621   [37|37]          jp      P,NSCFOR        ; No array with "FOR" or "FN"
2130: 7E       [44]             ld      A,(HL)          ; Get byte again
2131: D628     [51]             sub     '('             ; Subscripted variable?
2133: CAAB21   [61|61]          jp      Z,SBSCPT        ; Yes - Sort out subscript
                        
2136: AF       [ 4]     NSCFOR: xor     A               ; Simple variable
2137: 32B081   [17]             ld      (FORFLG),A      ; Clear "FOR" flag
213A: E5       [28]             push    HL              ; Save code string address
213B: 50       [32]             ld      D,B             ; DE = Variable name to find
213C: 59       [36]             ld      E,C
213D: 2AC381   [52]             ld      HL,(FNRGNM)     ; FN argument name
2140: CD4118   [69]             call    CPDEHL          ; Is it the FN argument?
2143: 11C581   [79]             ld      DE,FNARG        ; Point to argument value
2146: CADD2B   [89|89]          jp      Z,POPHRT        ; Yes - Return FN argument value
2149: 2ABD81   [105]            ld      HL,(VAREND)     ; End of variables
214C: EB       [109]            ex      DE,HL           ; Address of end of search
214D: 2ABB81   [125]            ld      HL,(PROGND)     ; Start of variables address
2150: CD4118   [17]     FNDVAR: call    CPDEHL          ; End of variable list table?
2153: CA6921   [27|27]          jp      Z,CFEVAL        ; Yes - Called from EVAL?
2156: 79       [31]             ld      A,C             ; Get second byte of name
2157: 96       [38]             sub     (HL)            ; Compare with name in list
2158: 23       [44]             inc     HL              ; Move on to first byte
2159: C25E21   [54|54]          jp      NZ,FNTHR        ; Different - Find another
215C: 78       [58]             ld      A,B             ; Get first byte of name
215D: 96       [65]             sub     (HL)            ; Compare with name in list
215E: 23       [ 6]     FNTHR:  inc     HL              ; Move on to LSB of value
215F: CA9D21   [16|16]          jp      Z,RETADR        ; Found - Return address
2162: 23       [22]             inc     HL              ; <- Skip
2163: 23       [28]             inc     HL              ; <- over
2164: 23       [34]             inc     HL              ; <- F.P.
2165: 23       [40]             inc     HL              ; <- value
2166: C35021   [50]             jp      FNDVAR          ; Keep looking
                        
2169: E1       [10]     CFEVAL: pop     HL              ; Restore code string address
216A: E3       [29]             ex      (SP),HL         ; Get return address
216B: D5       [40]             push    DE              ; Save address of variable
216C: 11D21F   [50]             ld      DE,FRMEVL       ; Return address in EVAL
216F: CD4118   [67]             call    CPDEHL          ; Called from EVAL ?
2172: D1       [77]             pop     DE              ; Restore address of variable
2173: CAA021   [87|87]          jp      Z,RETNUL        ; Yes - Return null variable
2176: E3       [106]            ex      (SP),HL         ; Put back return
2177: E5       [117]            push    HL              ; Save code string address
2178: C5       [128]            push    BC              ; Save variable name
2179: 010600   [138]            ld      BC,$0006        ; 2 byte name plus 4 byte data
217C: 2ABF81   [154]            ld      HL,(ARREND)     ; End of arrays
217F: E5       [165]            push    HL              ; Save end of arrays
2180: 09       [176]            add     HL,BC           ; Move up 6 bytes
2181: C1       [186]            pop     BC              ; Source address in BC
2182: E5       [197]            push    HL              ; Save new end address
2183: CD1115   [214]            call    MOVUP           ; Move arrays up
2186: E1       [224]            pop     HL              ; Restore new end address
2187: 22BF81   [240]            ld      (ARREND),HL     ; Set new end address
218A: 60       [244]            ld      H,B             ; End of variables to HL
218B: 69       [248]            ld      L,C
218C: 22BD81   [264]            ld      (VAREND),HL     ; Set new end address
                        
218F: 2B       [ 6]     ZEROLP: dec     HL              ; Back through to zero variable
2190: 3600     [16]             ld      (HL),$00        ; Zero byte in variable
2192: CD4118   [33]             call    CPDEHL          ; Done them all?
2195: C28F21   [43|43]          jp      NZ,ZEROLP       ; No - Keep on going
2198: D1       [53]             pop     DE              ; Get variable name
2199: 73       [60]             ld      (HL),E          ; Store second character
219A: 23       [66]             inc     HL
219B: 72       [73]             ld      (HL),D          ; Store first character
219C: 23       [79]             inc     HL
219D: EB       [ 4]     RETADR: ex      DE,HL           ; Address of variable in DE
219E: E1       [14]             pop     HL              ; Restore code string address
219F: C9       [24]             ret
                        
21A0: 32CC81   [13]     RETNUL: ld      (FPEXP),A       ; Set result to zero
21A3: 21E214   [23]             ld      HL,ZERBYT       ; Also set a null string
21A6: 22C981   [39]             ld      (FPREG),HL      ; Save for EVAL
21A9: E1       [49]             pop     HL              ; Restore code string address
21AA: C9       [59]             ret
                        
21AB: E5       [11]     SBSCPT: push    HL              ; Save code string address
21AC: 2A9181   [27]             ld      HL,(LCRFLG)     ; Locate/Create and Type
21AF: E3       [46]             ex      (SP),HL         ; Save and get code string
21B0: 57       [50]             ld      D,A             ; Zero number of dimensions
21B1: D5       [11]     SCPTLP: push    DE              ; Save number of dimensions
21B2: C5       [22]             push    BC              ; Save array name
21B3: CD141B   [39]             call    FPSINT          ; Get subscript (0-32767)
21B6: C1       [49]             pop     BC              ; Restore array name
21B7: F1       [59]             pop     AF              ; Get number of dimensions
21B8: EB       [63]             ex      DE,HL
21B9: E3       [82]             ex      (SP),HL         ; Save subscript value
21BA: E5       [93]             push    HL              ; Save LCRFLG and TYPE
21BB: EB       [97]             ex      DE,HL
21BC: 3C       [101]            inc     A               ; Count dimensions
21BD: 57       [105]            ld      D,A             ; Save in D
21BE: 7E       [112]            ld      A,(HL)          ; Get next byte in code string
21BF: FE2C     [119]            cp      ','             ; Comma (more to come)?
21C1: CAB121   [129|129]        jp      Z,SCPTLP        ; Yes - More subscripts
21C4: CD4718   [146]            call    CHKSYN          ; Make sure ")" follows
21C7: 29                        defb    ')'
21C8: 22B581   [162]            ld      (NXTOPR),HL     ; Save code string address
21CB: E1       [172]            pop     HL              ; Get LCRFLG and TYPE
21CC: 229181   [188]            ld      (LCRFLG),HL     ; Restore Locate/create & type
21CF: 1E00     [195]            ld      E,$00           ; Flag not CSAVE* or CLOAD*
21D1: D5       [206]            push    DE              ; Save number of dimensions (D)
21D2: 11                        defb    $11             ; Skip "push HL" and "push AF'
                        
21D3: E5       [11]     ARLDSV: push    HL              ; Save code string address
21D4: F5       [22]             push    AF              ; A = 00 , Flags set = Z,N
21D5: 2ABD81   [38]             ld      HL,(VAREND)     ; Start of arrays
21D8: 3E                        defb    $3E             ; Skip "add HL,DE"
21D9: 19       [11]     FNDARY: add     HL,DE           ; Move to next array start
21DA: EB       [15]             ex      DE,HL
21DB: 2ABF81   [31]             ld      HL,(ARREND)     ; End of arrays
21DE: EB       [35]             ex      DE,HL           ; Current array pointer
21DF: CD4118   [52]             call    CPDEHL          ; End of arrays found?
21E2: CA0B22   [62|62]          jp      Z,CREARY        ; Yes - Create array
21E5: 7E       [69]             ld      A,(HL)          ; Get second byte of name
21E6: B9       [73]             cp      C               ; Compare with name given
21E7: 23       [79]             inc     HL              ; Move on
21E8: C2ED21   [89|89]          jp      NZ,NXTARY       ; Different - Find next array
21EB: 7E       [96]             ld      A,(HL)          ; Get first byte of name
21EC: B8       [100]            cp      B               ; Compare with name given
21ED: 23       [ 6]     NXTARY: inc     HL              ; Move on
21EE: 5E       [13]             ld      E,(HL)          ; Get LSB of next array address
21EF: 23       [19]             inc     HL
21F0: 56       [26]             ld      D,(HL)          ; Get MSB of next array address
21F1: 23       [32]             inc     HL
21F2: C2D921   [42|42]          jp      NZ,FNDARY       ; Not found - Keep looking
21F5: 3A9181   [55]             ld      A,(LCRFLG)      ; Found Locate or Create it?
21F8: B7       [59]             or      A
21F9: C26E15   [69|69]          jp      NZ,DDERR        ; Create - ?DD Error
21FC: F1       [79]             pop     AF              ; Locate - Get number of dim'ns
21FD: 44       [83]             ld      B,H             ; BC Points to array dim'ns
21FE: 4D       [87]             ld      C,L
21FF: CADD2B   [97|97]          jp      Z,POPHRT        ; Jump if array load/save
2202: 96       [104]            sub     (HL)            ; Same number of dimensions?
2203: CA6922   [114|114]        jp      Z,FINDEL        ; Yes - Find element
2206: 1E10     [ 7]     BSERR:  ld      E,BS            ; ?BS Error
2208: C37915   [17]             jp      ERROR           ; Output error
                        
220B: 110400   [10]     CREARY: ld      DE,$0004        ; 4 Bytes per entry
220E: F1       [20]             pop     AF              ; Array to save or 0 dim'ns?
220F: CA351B   [30|30]          jp      Z,FCERR         ; Yes - ?FC Error
2212: 71       [37]             ld      (HL),C          ; Save second byte of name
2213: 23       [43]             inc     HL
2214: 70       [50]             ld      (HL),B          ; Save first byte of name
2215: 23       [56]             inc     HL
2216: 4F       [60]             ld      C,A             ; Number of dimensions to C
2217: CD2215   [77]             call    CHKSTK          ; Check if enough memory
221A: 23       [83]             inc     HL              ; Point to number of dimensions
221B: 23       [89]             inc     HL
221C: 22AA81   [105]            ld      (CUROPR),HL     ; Save address of pointer
221F: 71       [112]            ld      (HL),C          ; Set number of dimensions
2220: 23       [118]            inc     HL
2221: 3A9181   [131]            ld      A,(LCRFLG)      ; Locate of Create?
2224: 17       [135]            rla                     ; Carry set = Create
2225: 79       [139]            ld      A,C             ; Get number of dimensions
2226: 010B00   [10]     CRARLP: ld      BC,10+1         ; Default dimension size 10
2229: D22E22   [20|20]          jp      NC,DEFSIZ       ; Locate - Set default size
222C: C1       [30]             pop     BC              ; Get specified dimension size
222D: 03       [36]             inc     BC              ; Include zero element
222E: 71       [ 7]     DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
222F: 23       [13]             inc     HL
2230: 70       [20]             ld      (HL),B          ; Save MSB of dimension size
2231: 23       [26]             inc     HL
2232: F5       [37]             push    AF              ; Save num' of dim'ns an status
2233: E5       [48]             push    HL              ; Save address of dim'n size
2234: CDD92D   [65]             call    MLDEBC          ; Multiply DE by BC to find
2237: EB       [69]             ex      DE,HL           ; amount of mem needed (to DE)
2238: E1       [79]             pop     HL              ; Restore address of dimension
2239: F1       [89]             pop     AF              ; Restore number of dimensions
223A: 3D       [93]             dec     A               ; Count them
223B: C22622   [103|103]        jp      NZ,CRARLP       ; Do next dimension if more
223E: F5       [114]            push    AF              ; Save locate/create flag
223F: 42       [118]            ld      B,D             ; MSB of memory needed
2240: 4B       [122]            ld      C,E             ; LSB of memory needed
2241: EB       [126]            ex      DE,HL
2242: 19       [137]            add     HL,DE           ; Add bytes to array start
2243: DA3A15   [147|147]        jp      C,OMERR         ; Too big - Error
2246: CD2B15   [164]            call    ENFMEM          ; See if enough memory
2249: 22BF81   [180]            ld      (ARREND),HL     ; Save new end of array
                        
224C: 2B       [ 6]     ZERARY: dec     HL              ; Back through array data
224D: 3600     [16]             ld      (HL),$00        ; Set array element to zero
224F: CD4118   [33]             call    CPDEHL          ; All elements zeroed?
2252: C24C22   [43|43]          jp      NZ,ZERARY       ; No - Keep on going
2255: 03       [49]             inc     BC              ; Number of bytes + 1
2256: 57       [53]             ld      D,A             ; A=0
2257: 2AAA81   [69]             ld      HL,(CUROPR)     ; Get address of array
225A: 5E       [76]             ld      E,(HL)          ; Number of dimensions
225B: EB       [80]             ex      DE,HL           ; To HL
225C: 29       [91]             add     HL,HL           ; Two bytes per dimension size
225D: 09       [102]            add     HL,BC           ; Add number of bytes
225E: EB       [106]            ex      DE,HL           ; Bytes needed to DE
225F: 2B       [112]            dec     HL
2260: 2B       [118]            dec     HL
2261: 73       [125]            ld      (HL),E          ; Save LSB of bytes needed
2262: 23       [131]            inc     HL
2263: 72       [138]            ld      (HL),D          ; Save MSB of bytes needed
2264: 23       [144]            inc     HL
2265: F1       [154]            pop     AF              ; Locate / Create?
2266: DA8D22   [164|164]        jp      C,ENDDIM        ; A is 0 , End if create
2269: 47       [ 4]     FINDEL: ld      B,A             ; Find array element
226A: 4F       [ 8]             ld      C,A
226B: 7E       [15]             ld      A,(HL)          ; Number of dimensions
226C: 23       [21]             inc     HL
226D: 16                        defb    $16             ; Skip "pop HL"
226E: E1       [10]     FNDELP: pop     HL              ; Address of next dim' size
226F: 5E       [17]             ld      E,(HL)          ; Get LSB of dim'n size
2270: 23       [23]             inc     HL
2271: 56       [30]             ld      D,(HL)          ; Get MSB of dim'n size
2272: 23       [36]             inc     HL
2273: E3       [55]             ex      (SP),HL         ; Save address - Get index
2274: F5       [66]             push    AF              ; Save number of dim'ns
2275: CD4118   [83]             call    CPDEHL          ; Dimension too large?
2278: D20622   [93|93]          jp      NC,BSERR        ; Yes - ?BS Error
227B: E5       [104]            push    HL              ; Save index
227C: CDD92D   [121]            call    MLDEBC          ; Multiply previous by size
227F: D1       [131]            pop     DE              ; Index supplied to DE
2280: 19       [142]            add     HL,DE           ; Add index to pointer
2281: F1       [152]            pop     AF              ; Number of dimensions
2282: 3D       [156]            dec     A               ; Count them
2283: 44       [160]            ld      B,H             ; MSB of pointer
2284: 4D       [164]            ld      C,L             ; LSB of pointer
2285: C26E22   [174|174]        jp      NZ,FNDELP       ; More - Keep going
2288: 29       [185]            add     HL,HL           ; 4 Bytes per element
2289: 29       [196]            add     HL,HL
228A: C1       [206]            pop     BC              ; Start of array
228B: 09       [217]            add     HL,BC           ; Point to element
228C: EB       [221]            ex      DE,HL           ; Address of element to DE
228D: 2AB581   [16]     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2290: C9       [26]             ret
                        
                        
                        ; returns the value of the 32-bit system tick counter as
                        ; two 16-bit words
2291: CDE21E   [17]     TMR:    call    TSTNUM          ; Make sure it's a number
2294: CD201B   [34]             call    DEINT           ; Get integer (-32768 to 32767)
2297: 2ACE81   [50]             ld      HL,(TMRCNT)     ; load the LSBytes of timer
229A: 7B       [54]             ld      A,E
229B: B2       [58]             or      D               ; is it 0?
229C: CAA222   [68|68]          jp      Z,ENDTMR        ; yes, jump over
229F: 2AD081   [84]             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
22A2: 45       [ 4]     ENDTMR: ld      B,L             ; move bytes...
22A3: 7C       [ 8]             ld      A,H             ; ...into AB
22A4: C3C922   [18]             jp      ABPASS          ; return word into AB
                        
                        
                        ; returns the free space for BASIC or into the string pool
22A7: 2ABF81   [16]     FRE:    ld      HL,(ARREND)     ; Start of free memory
22AA: EB       [20]             ex      DE,HL           ; To DE
22AB: 210000   [30]             ld      HL,$0000        ; End of free memory
22AE: 39       [41]             add     HL,SP           ; Current stack value
22AF: 3A9281   [54]             ld      A,(TYPE)        ; Dummy argument type
22B2: B7       [58]             or      A
22B3: CAC322   [68|68]          jp      Z,FRENUM        ; Numeric - Free variable space
22B6: CD2A25   [85]             call    GSTRCU          ; Current string to pool
22B9: CD2A24   [102]            call    GARBGE          ; Garbage collection
22BC: 2AAD80   [118]            ld      HL,(STRSPC)     ; Bottom of string space in use
22BF: EB       [122]            ex      DE,HL           ; To DE
22C0: 2AA881   [138]            ld      HL,(STRBOT)     ; Bottom of string space
22C3: 7D       [ 4]     FRENUM: ld      A,L             ; Get LSB of end
22C4: 93       [ 8]             sub     E               ; Subtract LSB of beginning
22C5: 4F       [12]             ld      C,A             ; Save difference if C
22C6: 7C       [16]             ld      A,H             ; Get MSB of end
22C7: 9A       [20]             sbc     A,D             ; Subtract MSB of beginning
22C8: 41       [ 4]     ACPASS: ld      B,C             ; Return integer AC
22C9: 50       [ 4]     ABPASS: ld      D,B             ; Return integer AB
22CA: 1E00     [11]             ld      E,$00
22CC: 219281   [21]             ld      HL,TYPE         ; Point to type
22CF: 73       [28]             ld      (HL),E          ; Set type to numeric
22D0: 0690     [35]             ld      B,$80+$10       ; 16 bit integer
22D2: C3042D   [45]             jp      RETINT          ; Return the integer
                        
                        ; returns the X position of the cursor during a print
22D5: 3A9081   [13]     POS:    ld      A,(CURPOS)      ; Get cursor position
22D8: 47       [ 4]     PASSA:  ld      B,A             ; Put A into AB
22D9: AF       [ 8]             xor     A               ; Zero A
22DA: C3C922   [18]             jp      ABPASS          ; Return integer AB
                        
22DD: CD6023   [17]     DEF:    call    CHEKFN          ; Get "FN" and name
22E0: CD5223   [34]             call    IDTEST          ; Test for illegal direct
22E3: 010D1C   [44]             ld      BC,DATA         ; To get next statement
22E6: C5       [55]             push    BC              ; Save address for RETurn
22E7: D5       [66]             push    DE              ; Save address of function ptr
22E8: CD4718   [83]             call    CHKSYN          ; Make sure "(" follows
22EB: 28                        defb    '('
22EC: CDEE20   [100]            call    GETVAR          ; Get argument variable name
22EF: E5       [111]            push    HL              ; Save code string address
22F0: EB       [115]            ex      DE,HL           ; Argument address to HL
22F1: 2B       [121]            dec     HL
22F2: 56       [128]            ld      D,(HL)          ; Get first byte of arg name
22F3: 2B       [134]            dec     HL
22F4: 5E       [141]            ld      E,(HL)          ; Get second byte of arg name
22F5: E1       [151]            pop     HL              ; Restore code string address
22F6: CDE21E   [168]            call    TSTNUM          ; Make sure numeric argument
22F9: CD4718   [185]            call    CHKSYN          ; Make sure ")" follows
22FC: 29                        defb    ')'
22FD: CD4718   [202]            call    CHKSYN          ; Make sure "=" follows
2300: C6                        defb    ZEQUAL          ; "=" token
2301: 44       [206]            ld      B,H             ; Code string address to BC
2302: 4D       [210]            ld      C,L
2303: E3       [229]            ex      (SP),HL         ; Save code str , Get FN ptr
2304: 71       [236]            ld      (HL),C          ; Save LSB of FN code string
2305: 23       [242]            inc     HL
2306: 70       [249]            ld      (HL),B          ; Save MSB of FN code string
2307: C39F23   [259]            jp      SVSTAD          ; Save address and do function
                        
230A: CD6023   [17]     DOFN:   call    CHEKFN          ; Make sure FN follows
230D: D5       [28]             push    DE              ; Save function pointer address
230E: CDB61F   [45]             call    EVLPAR          ; Evaluate expression in "()"
2311: CDE21E   [62]             call    TSTNUM          ; Make sure numeric result
2314: E3       [81]             ex      (SP),HL         ; Save code str , Get FN ptr
2315: 5E       [88]             ld      E,(HL)          ; Get LSB of FN code string
2316: 23       [94]             inc     HL
2317: 56       [101]            ld      D,(HL)          ; Get MSB of FN code string
2318: 23       [107]            inc     HL
2319: 7A       [111]            ld      A,D             ; And function DEFined?
231A: B3       [115]            or      E
231B: CA7115   [125|125]        jp      Z,UFERR         ; No - ?UF Error
231E: 7E       [132]            ld      A,(HL)          ; Get LSB of argument address
231F: 23       [138]            inc     HL
2320: 66       [145]            ld      H,(HL)          ; Get MSB of argument address
2321: 6F       [149]            ld      L,A             ; HL = Arg variable address
2322: E5       [160]            push    HL              ; Save it
2323: 2AC381   [176]            ld      HL,(FNRGNM)     ; Get old argument name
2326: E3       [195]            ex      (SP),HL         ; Save old , Get new
2327: 22C381   [211]            ld      (FNRGNM),HL     ; Set new argument name
232A: 2AC781   [227]            ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
232D: E5       [238]            push    HL              ; Save it
232E: 2AC581   [254]            ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2331: E5       [265]            push    HL              ; Save it
2332: 21C581   [275]            ld      HL,FNARG        ; HL = Value of argument
2335: D5       [286]            push    DE              ; Save FN code string address
2336: CD452D   [303]            call    FPTHL           ; Move FPREG to argument
2339: E1       [313]            pop     HL              ; Get FN code string address
233A: CDDF1E   [330]            call    GETNUM          ; Get value from function
233D: 2B       [336]            dec     HL              ; dec 'cos GETCHR INCs
233E: CD6A1A   [353]            call    GETCHR          ; Get next character
2341: C26515   [363|363]        jp      NZ,SNERR        ; Bad character in FN - Error
2344: E1       [373]            pop     HL              ; Get MSB,EXP of old arg
2345: 22C581   [389]            ld      (FNARG),HL      ; Restore it
2348: E1       [399]            pop     HL              ; Get LSB,NLSB of old arg
2349: 22C781   [415]            ld      (FNARG+2),HL    ; Restore it
234C: E1       [425]            pop     HL              ; Get name of old arg
234D: 22C381   [441]            ld      (FNRGNM),HL     ; Restore it
2350: E1       [451]            pop     HL              ; Restore code string address
2351: C9       [461]            ret
                        
2352: E5       [11]     IDTEST: push    HL              ; Save code string address
2353: 2AAF80   [27]             ld      HL,(LINEAT)     ; Get current line number
2356: 23       [33]             inc     HL              ; -1 means direct statement
2357: 7C       [37]             ld      A,H
2358: B5       [41]             or      L
2359: E1       [51]             pop     HL              ; Restore code string address
235A: C0       [56|62]          ret     NZ              ; Return if in program
235B: 1E16     [63]             ld      E,ID            ; ?ID Error
235D: C37915   [73]             jp      ERROR
                        
2360: CD4718   [17]     CHEKFN: call    CHKSYN          ; Make sure FN follows
2363: B6                        defb    ZFN             ; "FN" token
2364: 3E80     [24]             ld      A,$80
2366: 32B081   [37]             ld      (FORFLG),A      ; Flag FN name to find
2369: B6       [44]             or      (HL)            ; FN name has bit 7 set
236A: 47       [48]             ld      B,A             ; in first byte of name
236B: CDF320   [65]             call    GTFNAM          ; Get FN name
236E: C3E21E   [75]             jp      TSTNUM          ; Make sure numeric function
                        
2371: CDE21E   [17]     STR:    call    TSTNUM          ; Make sure it's a number
2374: CD922E   [34]             call    NUMASC          ; Turn number into text
2377: CDA523   [17]     STR1:   call    CRTST           ; Create string entry for it
237A: CD2A25   [34]             call    GSTRCU          ; Current string to pool
237D: 018525   [44]             ld      BC,TOPOOL       ; Save in string pool
2380: C5       [55]             push    BC              ; Save address on stack
                        
2381: 7E       [ 7]     SAVSTR: ld      A,(HL)          ; Get string length
2382: 23       [13]             inc     HL
2383: 23       [19]             inc     HL
2384: E5       [30]             push    HL              ; Save pointer to string
2385: CD0024   [47]             call    TESTR           ; See if enough string space
2388: E1       [57]             pop     HL              ; Restore pointer to string
2389: 4E       [64]             ld      C,(HL)          ; Get LSB of address
238A: 23       [70]             inc     HL
238B: 46       [77]             ld      B,(HL)          ; Get MSB of address
238C: CD9923   [94]             call    CRTMST          ; Create string entry
238F: E5       [105]            push    HL              ; Save pointer to MSB of addr
2390: 6F       [109]            ld      L,A             ; Length of string
2391: CD1D25   [126]            call    TOSTRA          ; Move to string area
2394: D1       [136]            pop     DE              ; Restore pointer to MSB
2395: C9       [146]            ret
                        
2396: CD0024   [17]     MKTMST: call    TESTR           ; See if enough string space
2399: 21A481   [10]     CRTMST: ld      HL,TMPSTR       ; Temporary string
239C: E5       [21]             push    HL              ; Save it
239D: 77       [28]             ld      (HL),A          ; Save length of string
239E: 23       [34]             inc     HL
239F: 23       [ 6]     SVSTAD: inc     HL
23A0: 73       [13]             ld      (HL),E          ; Save LSB of address
23A1: 23       [19]             inc     HL
23A2: 72       [26]             ld      (HL),D          ; Save MSB of address
23A3: E1       [36]             pop     HL              ; Restore pointer
23A4: C9       [46]             ret
                        
23A5: 2B       [ 6]     CRTST:  dec     HL              ; dec - INCed after
23A6: 0622     [ 7]     QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
23A8: 50       [11]             ld      D,B             ; Quote to D
23A9: E5       [11]     DTSTR:  push    HL              ; Save start
23AA: 0EFF     [18]             ld      C,-1            ; Set counter to -1
23AC: 23       [ 6]     QTSTLP: inc     HL              ; Move on
23AD: 7E       [13]             ld      A,(HL)          ; Get byte
23AE: 0C       [17]             inc     C               ; Count bytes
23AF: B7       [21]             or      A               ; End of line?
23B0: CABB23   [31|31]          jp      Z,CRTSTE        ; Yes - Create string entry
23B3: BA       [35]             cp      D               ; Terminator D found?
23B4: CABB23   [45|45]          jp      Z,CRTSTE        ; Yes - Create string entry
23B7: B8       [49]             cp      B               ; Terminator B found?
23B8: C2AC23   [59|59]          jp      NZ,QTSTLP       ; No - Keep looking
23BB: FE22     [ 7]     CRTSTE: cp      $22             ; '"'             ; End with '"'?
23BD: CC6A1A   [17|24]          call    Z,GETCHR        ; Yes - Get next character
23C0: E3       [36]             ex      (SP),HL         ; Starting quote
23C1: 23       [42]             inc     HL              ; First byte of string
23C2: EB       [46]             ex      DE,HL           ; To DE
23C3: 79       [50]             ld      A,C             ; Get length
23C4: CD9923   [67]             call    CRTMST          ; Create string entry
23C7: 11A481   [10]     TSTOPL: ld      DE,TMPSTR       ; Temporary string
23CA: 2A9681   [26]             ld      HL,(TMSTPT)     ; Temporary string pool pointer
23CD: 22C981   [42]             ld      (FPREG),HL      ; Save address of string ptr
23D0: 3E01     [49]             ld      A,$01
23D2: 329281   [62]             ld      (TYPE),A        ; Set type to string
23D5: CD482D   [79]             call    DETHL4          ; Move string to pool
23D8: CD4118   [96]             call    CPDEHL          ; Out of string pool?
23DB: 229681   [112]            ld      (TMSTPT),HL     ; Save new pointer
23DE: E1       [122]            pop     HL              ; Restore code string address
23DF: 7E       [129]            ld      A,(HL)          ; Get next code byte
23E0: C0       [134|140]        ret     NZ              ; Return if pool OK
23E1: 1E1E     [141]            ld      E,ST            ; ?ST Error
23E3: C37915   [151]            jp      ERROR           ; String pool overflow
                        
23E6: 23       [ 6]     PRNUMS: inc     HL              ; Skip leading space
23E7: CDA523   [17]     PRS:    call    CRTST           ; Create string entry for it
23EA: CD2A25   [17]     PRS1:   call    GSTRCU          ; Current string to pool
23ED: CD3C2D   [34]             call    LOADFP          ; Move string block to BCDE
23F0: 1C       [38]             inc     E               ; Length + 1
23F1: 1D       [ 4]     PRSLP:  dec     E               ; Count characters
23F2: C8       [ 9|15]          ret     Z               ; End of string
23F3: 0A       [16]             ld      A,(BC)          ; Get byte to output
23F4: CD5218   [33]             call    OUTC            ; Output character in A
23F7: FE0D     [40]             cp      CR              ; Return?
23F9: CC2D1D   [50|57]          call    Z,CNTEND        ; Yes - Position cursor to 0
23FC: 03       [56]             inc     BC              ; Next byte in string
23FD: C3F123   [66]             jp      PRSLP           ; More characters to output
                        
2400: B7       [ 4]     TESTR:  or      A               ; Test if enough room
2401: 0E                        defb    $0E             ; No garbage collection done
2402: F1       [10]     GRBDON: pop     AF              ; Garbage collection done
2403: F5       [21]             push    AF              ; Save status
2404: 2AAD80   [37]             ld      HL,(STRSPC)     ; Bottom of string space in use
2407: EB       [41]             ex      DE,HL           ; To DE
2408: 2AA881   [57]             ld      HL,(STRBOT)     ; Bottom of string area
240B: 2F       [61]             cpl                     ; Negate length (Top down)
240C: 4F       [65]             ld      C,A             ; -Length to BC
240D: 06FF     [72]             ld      B,-1            ; BC = -ve length of string
240F: 09       [83]             add     HL,BC           ; Add to bottom of space in use
2410: 23       [89]             inc     HL              ; Plus one for 2's complement
2411: CD4118   [106]            call    CPDEHL          ; Below string RAM area?
2414: DA1E24   [116|116]        jp      C,TESTOS        ; Tidy up if not done else err
2417: 22A881   [132]            ld      (STRBOT),HL     ; Save new bottom of area
241A: 23       [138]            inc     HL              ; Point to first byte of string
241B: EB       [142]            ex      DE,HL           ; Address to DE
241C: F1       [10]     POPAF:  pop     AF              ; Throw away status push
241D: C9       [20]             ret
                        
241E: F1       [10]     TESTOS: pop     AF              ; Garbage collect been done?
241F: 1E1A     [17]             ld      E,OS            ; ?OS Error
2421: CA7915   [27|27]          jp      Z,ERROR         ; Yes - Not enough string space
2424: BF       [31]             cp      A               ; Flag garbage collect done
2425: F5       [42]             push    AF              ; Save status
2426: 010224   [52]             ld      BC,GRBDON       ; Garbage collection done
2429: C5       [63]             push    BC              ; Save for RETurn
242A: 2A9481   [16]     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
242D: 22A881   [16]     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2430: 210000   [26]             ld      HL,$0000
2433: E5       [37]             push    HL              ; Flag no string found
2434: 2AAD80   [53]             ld      HL,(STRSPC)     ; Get bottom of string space
2437: E5       [64]             push    HL              ; Save bottom of string space
2438: 219881   [74]             ld      HL,TMSTPL       ; Temporary string pool
243B: EB       [ 4]     GRBLP:  ex      DE,HL
243C: 2A9681   [20]             ld      HL,(TMSTPT)     ; Temporary string pool pointer
243F: EB       [24]             ex      DE,HL
2440: CD4118   [41]             call    CPDEHL          ; Temporary string pool done?
2443: 013B24   [51]             ld      BC,GRBLP        ; Loop until string pool done
2446: C28F24   [61|61]          jp      NZ,STPOOL       ; No - See if in string area
2449: 2ABB81   [77]             ld      HL,(PROGND)     ; Start of simple variables
244C: EB       [ 4]     SMPVAR: ex      DE,HL
244D: 2ABD81   [20]             ld      HL,(VAREND)     ; End of simple variables
2450: EB       [24]             ex      DE,HL
2451: CD4118   [41]             call    CPDEHL          ; All simple strings done?
2454: CA6224   [51|51]          jp      Z,ARRLP         ; Yes - Do string arrays
2457: 7E       [58]             ld      A,(HL)          ; Get type of variable
2458: 23       [64]             inc     HL
2459: 23       [70]             inc     HL
245A: B7       [74]             or      A               ; "S" flag set if string
245B: CD9224   [91]             call    STRADD          ; See if string in string area
245E: C34C24   [101]            jp      SMPVAR          ; Loop until simple ones done
                        
2461: C1       [10]     GNXARY: pop     BC              ; Scrap address of this array
2462: EB       [ 4]     ARRLP:  ex      DE,HL
2463: 2ABF81   [20]             ld      HL,(ARREND)     ; End of string arrays
2466: EB       [24]             ex      DE,HL
2467: CD4118   [41]             call    CPDEHL          ; All string arrays done?
246A: CAB824   [51|51]          jp      Z,SCNEND        ; Yes - Move string if found
246D: CD3C2D   [68]             call    LOADFP          ; Get array name to BCDE
2470: 7B       [72]             ld      A,E             ; Get type of array
2471: E5       [83]             push    HL              ; Save address of num of dim'ns
2472: 09       [94]             add     HL,BC           ; Start of next array
2473: B7       [98]             or      A               ; Test type of array
2474: F26124   [108|108]        jp      P,GNXARY        ; Numeric array - Ignore it
2477: 22AA81   [124]            ld      (CUROPR),HL     ; Save address of next array
247A: E1       [134]            pop     HL              ; Get address of num of dim'ns
247B: 4E       [141]            ld      C,(HL)          ; BC = Number of dimensions
247C: 0600     [148]            ld      B,$00
247E: 09       [159]            add     HL,BC           ; Two bytes per dimension size
247F: 09       [170]            add     HL,BC
2480: 23       [176]            inc     HL              ; Plus one for number of dim'ns
2481: EB       [ 4]     GRBARY: ex      DE,HL
2482: 2AAA81   [20]             ld      HL,(CUROPR)     ; Get address of next array
2485: EB       [24]             ex      DE,HL
2486: CD4118   [41]             call    CPDEHL          ; Is this array finished?
2489: CA6224   [51|51]          jp      Z,ARRLP         ; Yes - Get next one
248C: 018124   [61]             ld      BC,GRBARY       ; Loop until array all done
248F: C5       [11]     STPOOL: push    BC              ; Save return address
2490: F680     [18]             or      $80             ; Flag string type
2492: 7E       [ 7]     STRADD: ld      A,(HL)          ; Get string length
2493: 23       [13]             inc     HL
2494: 23       [19]             inc     HL
2495: 5E       [26]             ld      E,(HL)          ; Get LSB of string address
2496: 23       [32]             inc     HL
2497: 56       [39]             ld      D,(HL)          ; Get MSB of string address
2498: 23       [45]             inc     HL
2499: F0       [50|56]          ret     P               ; Not a string - Return
249A: B7       [54]             or      A               ; Set flags on string length
249B: C8       [59|65]          ret     Z               ; Null string - Return
249C: 44       [63]             ld      B,H             ; Save variable pointer
249D: 4D       [67]             ld      C,L
249E: 2AA881   [83]             ld      HL,(STRBOT)     ; Bottom of new area
24A1: CD4118   [100]            call    CPDEHL          ; String been done?
24A4: 60       [104]            ld      H,B             ; Restore variable pointer
24A5: 69       [108]            ld      L,C
24A6: D8       [113|119]        ret     C               ; String done - Ignore
24A7: E1       [123]            pop     HL              ; Return address
24A8: E3       [142]            ex      (SP),HL         ; Lowest available string area
24A9: CD4118   [159]            call    CPDEHL          ; String within string area?
24AC: E3       [178]            ex      (SP),HL         ; Lowest available string area
24AD: E5       [189]            push    HL              ; Re-save return address
24AE: 60       [193]            ld      H,B             ; Restore variable pointer
24AF: 69       [197]            ld      L,C
24B0: D0       [202|208]        ret     NC              ; Outside string area - Ignore
24B1: C1       [212]            pop     BC              ; Get return , Throw 2 away
24B2: F1       [222]            pop     AF              ;
24B3: F1       [232]            pop     AF              ;
24B4: E5       [243]            push    HL              ; Save variable pointer
24B5: D5       [254]            push    DE              ; Save address of current
24B6: C5       [265]            push    BC              ; Put back return address
24B7: C9       [275]            ret                     ; Go to it
                        
24B8: D1       [10]     SCNEND: pop     DE              ; Addresses of strings
24B9: E1       [20]             pop     HL              ;
24BA: 7D       [24]             ld      A,L             ; HL = 0 if no more to do
24BB: B4       [28]             or      H
24BC: C8       [33|39]          ret     Z               ; No more to do - Return
24BD: 2B       [39]             dec     HL
24BE: 46       [46]             ld      B,(HL)          ; MSB of address of string
24BF: 2B       [52]             dec     HL
24C0: 4E       [59]             ld      C,(HL)          ; LSB of address of string
24C1: E5       [70]             push    HL              ; Save variable address
24C2: 2B       [76]             dec     HL
24C3: 2B       [82]             dec     HL
24C4: 6E       [89]             ld      L,(HL)          ; HL = Length of string
24C5: 2600     [96]             ld      H,$00
24C7: 09       [107]            add     HL,BC           ; Address of end of string+1
24C8: 50       [111]            ld      D,B             ; String address to DE
24C9: 59       [115]            ld      E,C
24CA: 2B       [121]            dec     HL              ; Last byte in string
24CB: 44       [125]            ld      B,H             ; Address to BC
24CC: 4D       [129]            ld      C,L
24CD: 2AA881   [145]            ld      HL,(STRBOT)     ; Current bottom of string area
24D0: CD1415   [162]            call    MOVSTR          ; Move string to new address
24D3: E1       [172]            pop     HL              ; Restore variable address
24D4: 71       [179]            ld      (HL),C          ; Save new LSB of address
24D5: 23       [185]            inc     HL
24D6: 70       [192]            ld      (HL),B          ; Save new MSB of address
24D7: 69       [196]            ld      L,C             ; Next string area+1 to HL
24D8: 60       [200]            ld      H,B
24D9: 2B       [206]            dec     HL              ; Next string area address
24DA: C32D24   [216]            jp      GARBLP          ; Look for more strings
                        
24DD: C5       [11]     CONCAT: push    BC              ; Save prec' opr & code string
24DE: E5       [22]             push    HL              ;
24DF: 2AC981   [38]             ld      HL,(FPREG)      ; Get first string
24E2: E3       [57]             ex      (SP),HL         ; Save first string
24E3: CD681F   [74]             call    OPRND           ; Get second string
24E6: E3       [93]             ex      (SP),HL         ; Restore first string
24E7: CDE31E   [110]            call    TSTSTR          ; Make sure it's a string
24EA: 7E       [117]            ld      A,(HL)          ; Get length of second string
24EB: E5       [128]            push    HL              ; Save first string
24EC: 2AC981   [144]            ld      HL,(FPREG)      ; Get second string
24EF: E5       [155]            push    HL              ; Save second string
24F0: 86       [162]            add     A,(HL)          ; Add length of second string
24F1: 1E1C     [169]            ld      E,LS            ; ?LS Error
24F3: DA7915   [179|179]        jp      C,ERROR         ; String too long - Error
24F6: CD9623   [196]            call    MKTMST          ; Make temporary string
24F9: D1       [206]            pop     DE              ; Get second string to DE
24FA: CD2E25   [223]            call    GSTRDE          ; Move to string pool if needed
24FD: E3       [242]            ex      (SP),HL         ; Get first string
24FE: CD2D25   [259]            call    GSTRHL          ; Move to string pool if needed
2501: E5       [270]            push    HL              ; Save first string
2502: 2AA681   [286]            ld      HL,(TMPSTR+2)   ; Temporary string address
2505: EB       [290]            ex      DE,HL           ; To DE
2506: CD1425   [307]            call    SSTSA           ; First string to string area
2509: CD1425   [324]            call    SSTSA           ; Second string to string area
250C: 21FD1E   [334]            ld      HL,EVAL2        ; Return to evaluation loop
250F: E3       [353]            ex      (SP),HL         ; Save return,get code string
2510: E5       [364]            push    HL              ; Save code string address
2511: C3C723   [374]            jp      TSTOPL          ; To temporary string to pool
                        
2514: E1       [10]     SSTSA:  pop     HL              ; Return address
2515: E3       [29]             ex      (SP),HL         ; Get string block,save return
2516: 7E       [36]             ld      A,(HL)          ; Get length of string
2517: 23       [42]             inc     HL
2518: 23       [48]             inc     HL
2519: 4E       [55]             ld      C,(HL)          ; Get LSB of string address
251A: 23       [61]             inc     HL
251B: 46       [68]             ld      B,(HL)          ; Get MSB of string address
251C: 6F       [72]             ld      L,A             ; Length to L
251D: 2C       [ 4]     TOSTRA: inc     L               ; inc - DECed after
251E: 2D       [ 4]     TSALP:  dec     L               ; Count bytes moved
251F: C8       [ 9|15]          ret     Z               ; End of string - Return
2520: 0A       [16]             ld      A,(BC)          ; Get source
2521: 12       [23]             ld      (DE),A          ; Save destination
2522: 03       [29]             inc     BC              ; Next source
2523: 13       [35]             inc     DE              ; Next destination
2524: C31E25   [45]             jp      TSALP           ; Loop until string moved
                        
2527: CDE31E   [17]     GETSTR: call    TSTSTR          ; Make sure it's a string
252A: 2AC981   [16]     GSTRCU: ld      HL,(FPREG)      ; Get current string
252D: EB       [ 4]     GSTRHL: ex      DE,HL           ; Save DE
252E: CD4825   [17]     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
2531: EB       [21]             ex      DE,HL           ; Restore DE
2532: C0       [26|32]          ret     NZ              ; No - Return
2533: D5       [37]             push    DE              ; Save string
2534: 50       [41]             ld      D,B             ; String block address to DE
2535: 59       [45]             ld      E,C
2536: 1B       [51]             dec     DE              ; Point to length
2537: 4E       [58]             ld      C,(HL)          ; Get string length
2538: 2AA881   [74]             ld      HL,(STRBOT)     ; Current bottom of string area
253B: CD4118   [91]             call    CPDEHL          ; Last one in string area?
253E: C24625   [101|101]        jp      NZ,POPHL        ; No - Return
2541: 47       [105]            ld      B,A             ; Clear B (A=0)
2542: 09       [116]            add     HL,BC           ; Remove string from str' area
2543: 22A881   [132]            ld      (STRBOT),HL     ; Save new bottom of str' area
2546: E1       [10]     POPHL:  pop     HL              ; Restore string
2547: C9       [20]             ret
                        
2548: 2A9681   [16]     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
254B: 2B       [22]             dec     HL              ; Back
254C: 46       [29]             ld      B,(HL)          ; Get MSB of address
254D: 2B       [35]             dec     HL              ; Back
254E: 4E       [42]             ld      C,(HL)          ; Get LSB of address
254F: 2B       [48]             dec     HL              ; Back
2550: 2B       [54]             dec     HL              ; Back
2551: CD4118   [71]             call    CPDEHL          ; String last in string pool?
2554: C0       [76|82]          ret     NZ              ; Yes - Leave it
2555: 229681   [92]             ld      (TMSTPT),HL     ; Save new string pool top
2558: C9       [102]            ret
                        
2559: 01D822   [10]     LEN:    ld      BC,PASSA        ; To return integer A
255C: C5       [21]             push    BC              ; Save address
255D: CD2725   [17]     GETLEN: call    GETSTR          ; Get string and its length
2560: AF       [21]             xor     A
2561: 57       [25]             ld      D,A             ; Clear D
2562: 329281   [38]             ld      (TYPE),A        ; Set type to numeric
2565: 7E       [45]             ld      A,(HL)          ; Get length of string
2566: B7       [49]             or      A               ; Set status flags
2567: C9       [59]             ret
                        
2568: 01D822   [10]     ASC:    ld      BC,PASSA        ; To return integer A
256B: C5       [21]             push    BC              ; Save address
256C: CD5D25   [17]     GTFLNM: call    GETLEN          ; Get length of string
256F: CA351B   [27|27]          jp      Z,FCERR         ; Null string - Error
2572: 23       [33]             inc     HL
2573: 23       [39]             inc     HL
2574: 5E       [46]             ld      E,(HL)          ; Get LSB of address
2575: 23       [52]             inc     HL
2576: 56       [59]             ld      D,(HL)          ; Get MSB of address
2577: 1A       [66]             ld      A,(DE)          ; Get first byte of string
2578: C9       [76]             ret
                        
2579: 3E01     [ 7]     CHR:    ld      A,$01           ; One character string
257B: CD9623   [24]             call    MKTMST          ; Make a temporary string
257E: CD6827   [41]             call    MAKINT          ; Make it integer A
2581: 2AA681   [57]             ld      HL,(TMPSTR+2)   ; Get address of string
2584: 73       [64]             ld      (HL),E          ; Save character
2585: C1       [10]     TOPOOL: pop     BC              ; Clean up stack
2586: C3C723   [20]             jp      TSTOPL          ; Temporary string to pool
                        
2589: CD1827   [17]     LEFT:   call    LFRGNM          ; Get number and ending ")"
258C: AF       [21]             xor     A               ; Start at first byte in string
258D: E3       [19]     RIGHT1: ex      (SP),HL         ; Save code string,Get string
258E: 4F       [23]             ld      C,A             ; Starting position in string
258F: E5       [11]     MID1:   push    HL              ; Save string block address
2590: 7E       [18]             ld      A,(HL)          ; Get length of string
2591: B8       [22]             cp      B               ; Compare with number given
2592: DA9725   [32|32]          jp      C,ALLFOL        ; All following bytes required
2595: 78       [36]             ld      A,B             ; Get new length
2596: 11                        defb    $11             ; Skip "ld C,0"
2597: 0E00     [ 7]     ALLFOL: ld      C,$00           ; First byte of string
2599: C5       [18]             push    BC              ; Save position in string
259A: CD0024   [35]             call    TESTR           ; See if enough string space
259D: C1       [45]             pop     BC              ; Get position in string
259E: E1       [55]             pop     HL              ; Restore string block address
259F: E5       [66]             push    HL              ; And re-save it
25A0: 23       [72]             inc     HL
25A1: 23       [78]             inc     HL
25A2: 46       [85]             ld      B,(HL)          ; Get LSB of address
25A3: 23       [91]             inc     HL
25A4: 66       [98]             ld      H,(HL)          ; Get MSB of address
25A5: 68       [102]            ld      L,B             ; HL = address of string
25A6: 0600     [109]            ld      B,$00           ; BC = starting address
25A8: 09       [120]            add     HL,BC           ; Point to that byte
25A9: 44       [124]            ld      B,H             ; BC = source string
25AA: 4D       [128]            ld      C,L
25AB: CD9923   [145]            call    CRTMST          ; Create a string entry
25AE: 6F       [149]            ld      L,A             ; Length of new string
25AF: CD1D25   [166]            call    TOSTRA          ; Move string to string area
25B2: D1       [176]            pop     DE              ; Clear stack
25B3: CD2E25   [193]            call    GSTRDE          ; Move to string pool if needed
25B6: C3C723   [203]            jp      TSTOPL          ; Temporary string to pool
                        
                        
                        ; INSTR statement - look for a string inside another string
                        ; usage: INSTR(A$,B$) -> search for B$ into A$
                        ; return 0 if B$ is not contained into A$ or LEN(A$)<LEN(B$)
                        ; return 1~255 to indicate the starting position of B$ into A$
                        ; ex.: INSTR("HELLO","LO") returns 4
                        ;PT=0
                        ;DO
                        ;  TF=0:TP=0
                        ;  IF S1(PT)=S2(0) THEN
                        ;    TF=1:TP=PT:PT1=PT:PT2=0
                        ;    DO
                        ;      IF S1(PT1)<>S2(PT2) THEN TF=0:EXIT
                        ;      PT1=PT1+1
                        ;      PT2=PT2+1
                        ;    LOOP UNTIL PT2=LEN(S2)
                        ;  IF TF<>0 THEN EXIT
                        ;  PT=PT+1
                        ;LOOP UNTIL PT>=LEN(S1)-LEN(S2)
                        ;IF TF=0 THEN RETURN 0 ELSE RETURN TP
81EF:                   LNS1    equ     TMPBFR1
81F1:                   ADRS1   equ     TMPBFR2
81F3:                   LNS2    equ     TMPBFR3
81F5:                   ADRS2   equ     TMPBFR4
81F7:                   PT      equ     VIDEOBUFF
81F9:                   PT1     equ     VIDEOBUFF+2
81FB:                   PT2     equ     VIDEOBUFF+4
81FD:                   TP      equ     VIDEOBUFF+6
81FF:                   TF      equ     VIDEOBUFF+8
25B9: CD4718   [17]     INSTR:  call    CHKSYN          ; make sure "(" follows
25BC: 28                        defb    '('
25BD: 2B       [23]             dec     HL              ; dec 'cause GETCHR increments
25BE: CD6A1A   [40]             call    GETCHR          ; check if something follows
25C1: CA6515   [50|50]          jp      Z,SNERR         ; if nothing else, raise a syntax error
25C4: CDF11E   [67]             call    EVAL            ; Evaluate expression
25C7: CDE31E   [84]             call    TSTSTR          ; Make sure it's a string
25CA: 22F781   [100]            ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
25CD: CD2A25   [117]            call    GSTRCU          ; check that a string follows
25D0: CD3C2D   [134]            call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
25D3: ED53EF81 [154]            ld      (LNS1),DE       ; store values into
25D7: ED43F181 [174]            ld      (ADRS1),BC      ; temp buffers
25DB: 2AF781   [190]            ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
25DE: CD4718   [207]            call    CHKSYN          ; Make sure ',' follows
25E1: 2C                        defb    ','
25E2: 2B       [213]            dec     HL              ; dec 'cause GETCHR increments
25E3: CD6A1A   [230]            call    GETCHR          ; check if something follows
25E6: CA6515   [240|240]        jp      Z,SNERR         ; if nothing else, raise a syntax error
25E9: CDF11E   [257]            call    EVAL            ; Evaluate expression
25EC: CDE31E   [274]            call    TSTSTR          ; Make sure it's a string
25EF: 22F781   [290]            ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
25F2: CD2A25   [307]            call    GSTRCU          ; check that a string follows
25F5: CD3C2D   [324]            call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
25F8: ED53F381 [344]            ld      (LNS2),DE       ; store values into
25FC: ED43F581 [364]            ld      (ADRS2),BC      ; temp buffers
2600: 2AF781   [380]            ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
2603: CD4718   [397]            call    CHKSYN          ; make sure ")" follows
2606: 29                        defb    ')'
2607: E5       [408]            push    HL              ; store current code string pointer (the point after the ")" ) ...
2608: FDE1     [422]            pop     IY              ; ...into IY
260A: AF       [426]            xor     A               ; reset 10 RAM cells
260B: 060A     [433]            ld      B,$0A           ; (INSTR registers)
260D: 21F781   [443]            ld      HL,PT           ; first cell
2610: 77       [ 7]     EMPTINS:ld      (HL),A          ; reset cell
2611: 23       [13]             inc     HL              ; next cell
2612: 10FC     [21|26]          djnz    EMPTINS         ; repeat
2614: ED5BF381 [41]             ld      DE,(LNS2)       ; load len(S2) into DE
2618: 2AEF81   [57]             ld      HL,(LNS1)       ; load len(S1) into HL
261B: CDC53D   [74]             call    CMP16           ; check that len(S1)>=len(S2)
261E: DA9326   [84|84]          jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
2621: AF       [ 4]     RPTINST:xor     A               ; reset...
2622: 32FD81   [17]             ld      (TP),A          ; ...TP...
2625: 32FF81   [30]             ld      (TF),A          ; ...and TF
2628: ED4BF781 [50]             ld      BC,(PT)         ; pointer to S1
262C: 2AF181   [66]             ld      HL,(ADRS1)      ; first cell of S1
262F: 09       [77]             add     HL,BC           ; get current position into RAM
2630: 7E       [84]             ld      A,(HL)          ; load S1(PT)
2631: 2AF581   [100]            ld      HL,(ADRS2)      ; pointer to first char of S2
2634: BE       [107]            cp      (HL)            ; is S1(PT)=S2(0)?
2635: 203A     [114|119]        jr      NZ,CNT1INS      ; no, continue
2637: 3AF781   [127]            ld      A,(PT)          ; load current PT
263A: 32FD81   [140]            ld      (TP),A          ; TP=PT
263D: 32F981   [153]            ld      (PT1),A         ; P1=PT
2640: AF       [157]            xor     A               ; set...
2641: 32FB81   [170]            ld      (PT2),A         ; ...PT2=0
2644: 3C       [174]            inc     A               ;
2645: 32FF81   [187]            ld      (TF),A          ; set TF=1
2648: ED4BF981 [20]     RP2INST:ld      BC,(PT1)        ; load pointer PT1
264C: 2AF181   [36]             ld      HL,(ADRS1)      ; load address of S1
264F: 09       [47]             add     HL,BC           ; find char of S1 pointed by PT1
2650: 7E       [54]             ld      A,(HL)          ; load S1(PT1)
2651: ED4BFB81 [74]             ld      BC,(PT2)        ; load pointer PT2
2655: 2AF581   [90]             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
2658: 09       [101]            add     HL,BC           ; find S2(PT2)
2659: BE       [108]            cp      (HL)            ; is S1(PT1)=S2(PT2)?
265A: 204C     [115|120]        jr      NZ,CNTZIN       ; no, exit inner loop
265C: 21F981   [125]            ld      HL,PT1
265F: 34       [136]            inc     (HL)            ; increment PT1
2660: 3AFB81   [149]            ld      A,(PT2)
2663: 3C       [153]            inc     A               ; increment PT2
2664: 32FB81   [166]            ld      (PT2),A
2667: CA7126   [176|176]        jp      Z,CNT1INS       ; if PT2>255 then exit
266A: 21F381   [186]            ld      HL,LNS2         ; len(S2)
266D: BE       [193]            cp      (HL)            ; PT2=len(S2)?
266E: DA4826   [203|203]        jp      C,RP2INST       ; no (PT2<len(S2) - repeat
2671: 3AFF81   [13]     CNT1INS:ld      A,(TF)          ; check TF
2674: A7       [17]             and     A               ; TF=0? (clears also Carry for next SBC)
2675: 201C     [24|29]          jr      NZ,RZINSTR      ; no, exit
2677: 2AEF81   [40]             ld      HL,(LNS1)       ; load len(S1)
267A: ED4BF381 [60]             ld      BC,(LNS2)       ; load len(S2)
267E: ED42     [75]             sbc     HL,BC           ; HL=len(S1)-len(S2)
2680: ED5BF781 [95]             ld      DE,(PT)         ; load pointer
2684: 1C       [99]             inc     E               ; PT=PT+1
2685: ED53F781 [119]            ld      (PT),DE         ; store new value
2689: EB       [123]            ex      DE,HL           ; invert registers
268A: CDC53D   [140]            call    CMP16           ; check if PT>len(S1)-len(S2)
268D: DA2126   [150|150]        jp      C,RPTINST       ; repeat if <
2690: CA2126   [160|160]        jp      Z,RPTINST       ; repeat if =
2693: 3AFF81   [13]     RZINSTR:ld      A,(TF)          ; current value of TF
2696: A7       [17]             and     A               ; is it 0?
2697: CA9E26   [27|27]          jp      Z,LVINSTR       ; yes, return 0
269A: 3AFD81   [40]             ld      A,(TP)          ; return TP...
269D: 3C       [44]             inc     A               ; ...incremented by 1
269E: E1       [10]     LVINSTR:pop     HL              ; drop original return point
269F: FDE5     [25]             push    IY              ; load current string address from IY into stack
26A1: 11CA1F   [35]             ld      DE,RETNUM       ; Address of Return number from function...
26A4: D5       [46]             push    DE              ; ...saved on stack
26A5: C3D822   [56]             jp      PASSA           ; return TP
26A8: AF       [ 4]     CNTZIN: xor     A               ; set...
26A9: 32FF81   [17]             ld      (TF),A          ; TF=0
26AC: C37126   [27]             jp      CNT1INS         ; continue
                        
                        
26AF: CD1827   [17]     RIGHT:  call    LFRGNM          ; Get number and ending ")"
26B2: D1       [27]             pop     DE              ; Get string length
26B3: D5       [38]             push    DE              ; And re-save
26B4: 1A       [45]             ld      A,(DE)          ; Get length
26B5: 90       [49]             sub     B               ; Move back N bytes
26B6: C38D25   [59]             jp      RIGHT1          ; Go and get sub-string
                        
26B9: EB       [ 4]     MID:    ex      DE,HL           ; Get code string address
26BA: 7E       [11]             ld      A,(HL)          ; Get next byte ',' or ")"
26BB: CD1D27   [28]             call    MIDNUM          ; Get number supplied
26BE: 04       [32]             inc     B               ; Is it character zero?
26BF: 05       [36]             dec     B
26C0: CA351B   [46|46]          jp      Z,FCERR         ; Yes - Error
26C3: C5       [57]             push    BC              ; Save starting position
26C4: 1EFF     [64]             ld      E,$FF           ; All of string
26C6: FE29     [71]             cp      ')'             ; Any length given?
26C8: CAD226   [81|81]          jp      Z,RSTSTR        ; No - Rest of string
26CB: CD4718   [98]             call    CHKSYN          ; Make sure ',' follows
26CE: 2C                        defb    ','
26CF: CD6527   [115]            call    GETINT          ; Get integer 0-255
26D2: CD4718   [17]     RSTSTR: call    CHKSYN          ; Make sure ")" follows
26D5: 29                        defb    ')'
26D6: F1       [27]             pop     AF              ; Restore starting position
26D7: E3       [46]             ex      (SP),HL         ; Get string,save code string
26D8: 018F25   [56]             ld      BC,MID1         ; Continuation of MID$ routine
26DB: C5       [67]             push    BC              ; Save for return
26DC: 3D       [71]             dec     A               ; Starting position-1
26DD: BE       [78]             cp      (HL)            ; Compare with length
26DE: 0600     [85]             ld      B,$00           ; Zero bytes length
26E0: D0       [90|96]          ret     NC              ; Null string if start past end
26E1: 4F       [94]             ld      C,A             ; Save starting position-1
26E2: 7E       [101]            ld      A,(HL)          ; Get length of string
26E3: 91       [105]            sub     C               ; Subtract start
26E4: BB       [109]            cp      E               ; Enough string for it?
26E5: 47       [113]            ld      B,A             ; Save maximum length available
26E6: D8       [118|124]        ret     C               ; Truncate string if needed
26E7: 43       [122]            ld      B,E             ; Set specified length
26E8: C9       [132]            ret                     ; Go and create string
                        
26E9: CD5D25   [17]     VAL:    call    GETLEN          ; Get length of string
26EC: CABC2A   [27|27]          jp      Z,RESZER        ; Result zero
26EF: 5F       [31]             ld      E,A             ; Save length
26F0: 23       [37]             inc     HL
26F1: 23       [43]             inc     HL
26F2: 7E       [50]             ld      A,(HL)          ; Get LSB of address
26F3: 23       [56]             inc     HL
26F4: 66       [63]             ld      H,(HL)          ; Get MSB of address
26F5: 6F       [67]             ld      L,A             ; HL = String address
26F6: E5       [78]             push    HL              ; Save string address
26F7: 19       [89]             add     HL,DE
26F8: 46       [96]             ld      B,(HL)          ; Get end of string+1 byte
26F9: 72       [103]            ld      (HL),D          ; Zero it to terminate
26FA: E3       [122]            ex      (SP),HL         ; Save string end,get start
26FB: C5       [133]            push    BC              ; Save end+1 byte
26FC: 7E       [140]            ld      A,(HL)          ; Get starting byte
26FD: FE24     [147]            cp      '$'             ; Hex number indicated? [function added]
26FF: C20727   [157|157]        jp      NZ,VAL1
2702: CDFE3C   [174]            call    HEXTFP          ; Convert Hex to FPREG
2705: 180D     [186]            jr      VAL3
2707: FE25     [ 7]     VAL1:   cp      '%'             ; Binary number indicated? [function added]
2709: C21127   [17|17]          jp      NZ,VAL2
270C: CD6E3D   [34]             call    BINTFP          ; Convert Bin to FPREG
270F: 1803     [46]             jr      VAL3
2711: CDF42D   [17]     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
2714: C1       [10]     VAL3:   pop     BC              ; Restore end+1 byte
2715: E1       [20]             pop     HL              ; Restore end+1 address
2716: 70       [27]             ld      (HL),B          ; Put back original byte
2717: C9       [37]             ret
                        
2718: EB       [ 4]     LFRGNM: ex      DE,HL           ; Code string address to HL
2719: CD4718   [21]             call    CHKSYN          ; Make sure ")" follows
271C: 29                        defb    ')'
271D: C1       [10]     MIDNUM: pop     BC              ; Get return address
271E: D1       [20]             pop     DE              ; Get number supplied
271F: C5       [31]             push    BC              ; Re-save return address
2720: 43       [35]             ld      B,E             ; Number to B
2721: C9       [45]             ret
                        
2722: CD6827   [17]     INP:    call    MAKINT          ; Make it integer A
2725: 32A080   [30]             ld      (INPORT),A      ; Set input port
2728: CD9F80   [47]             call    INPSUB          ; Get input from port
272B: C3D822   [57]             jp      PASSA           ; Return integer A
                        
272E: CD5227   [17]     POUT:   call    SETIO           ; Set up port number
2731: C36780   [27]             jp      OUTSUB          ; Output data and return
                        
2734: CD5227   [17]     WAIT:   call    SETIO           ; Set up port number
2737: F5       [28]             push    AF              ; Save AND mask
2738: 1E00     [35]             ld      E,$00           ; Assume zero if none given
273A: 2B       [41]             dec     HL              ; dec 'cos GETCHR INCs
273B: CD6A1A   [58]             call    GETCHR          ; Get next character
273E: CA4827   [68|68]          jp      Z,NOXOR         ; No XOR byte given
2741: CD4718   [85]             call    CHKSYN          ; Make sure ',' follows
2744: 2C                        defb    ','
2745: CD6527   [102]            call    GETINT          ; Get integer 0-255 to XOR with
2748: C1       [10]     NOXOR:  pop     BC              ; Restore AND mask
2749: CD9F80   [17]     WAITLP: call    INPSUB          ; Get input
274C: AB       [21]             xor     E               ; Flip selected bits
274D: A0       [25]             and     B               ; Result non-zero?
274E: CA4927   [35|35]          jp      Z,WAITLP        ; No = keep waiting
2751: C9       [45]             ret
                        
2752: CD6527   [17]     SETIO:  call    GETINT          ; Get integer 0-255
2755: 32A080   [30]             ld      (INPORT),A      ; Set input port
2758: 326880   [43]             ld      (OTPORT),A      ; Set output port
275B: CD4718   [60]             call    CHKSYN          ; Make sure ',' follows
275E: 2C                        defb    ','
275F: C36527   [70]             jp      GETINT          ; Get integer 0-255 and return
                        
2762: CD6A1A   [17]     FNDNUM: call    GETCHR          ; Get next character
2765: CDDF1E   [17]     GETINT: call    GETNUM          ; Get a number from 0 to 255
2768: CD1A1B   [17]     MAKINT: call    DEPINT          ; Make sure value 0 - 255
276B: 7A       [21]             ld      A,D             ; Get MSB of number
276C: B7       [25]             or      A               ; Zero?
276D: C2351B   [35|35]          jp      NZ,FCERR        ; No - Error
2770: 2B       [41]             dec     HL              ; dec 'cos GETCHR INCs
2771: CD6A1A   [58]             call    GETCHR          ; Get next character
2774: 7B       [62]             ld      A,E             ; Get number to A
2775: C9       [72]             ret
                        
                        
                        ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
2776: CDDF1E   [17]     NMI:    call    GETNUM          ; Get memory address
2779: CD201B   [34]             call    DEINT           ; get integer -32768 to 32767
277C: 7B       [38]             ld      A,E             ; check if address is 0
277D: B2       [42]             or      D
277E: 2011     [49|54]          jr      NZ,NM1          ; no, so jump over
2780: F3       [ 4]     DISNMI: di                      ; disable INTs
2781: CDAD27   [21]             call    NMIDINT         ; disable VDP INT
2784: E5       [32]             push    HL              ; store HL
2785: 21ED45   [42]             ld      HL,$45ED        ; these are the op-codes for "RETN"
2788: 226180   [58]             ld      (NMIUSR),HL     ; store RETN
278B: AF       [62]             xor     A
278C: 326380   [75]             ld      (NMIUSR+2),A    ; "NOP"
278F: 1811     [87]             jr      NMI2            ; execute the last part of code
2791: E5       [11]     NM1:    push    HL              ; store current HL
2792: EB       [15]             ex      DE,HL           ; move address argument into HL
2793: F3       [19]             di                      ; disable INTs
2794: CDAD27   [36]             call    NMIDINT         ; disable VDP INT, if enabled
2797: 3EC3     [43]             ld      A,$C3           ; "jp" instruction
2799: 326180   [56]             ld      (NMIUSR),A      ; store it
279C: 226280   [72]             ld      (NMIUSR+1),HL   ; store address
279F: CDA627   [89]             call    NMIEINT         ; re-enable VDP INT
27A2: FB       [ 4]     NMI2:   ei                      ; re-enable INTS
27A3: 00       [ 8]             nop                     ; wait for INTs
27A4: E1       [18]             pop    HL               ; retrieve HL
27A5: C9       [28]             ret                     ; return to caller
                        ; enable VDP INT
27A6: CDBC27   [17]     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
27A9: F620     [24]             or      %00100000       ; enable VDP INT
27AB: 1803     [36]             jr      NMIINT          ; rest of code is shared
                        ; disable VDP INT
27AD: CDBC27   [17]     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
27B0: D5       [11]     NMIINT: push    DE              ; store DE
27B1: 5F       [15]             ld      E,A             ; move value into E
27B2: 3E01     [22]             ld      A,$01           ; VREG #1
27B4: F3       [26]             di                      ; disable INTs
27B5: CD4306   [43]             call    WRITE_VREG      ; disable VDP INT
27B8: FB       [47]             ei                      ; re-enable INTs
27B9: 00       [51]             nop                     ; wait for INTs being enabled
27BA: D1       [61]             pop     DE              ; retrieve DE
27BB: C9       [71]             ret                     ; return to caller
                        
                        ; load VREG #1 setting for current screen mode and return it into A
27BC: E5       [11]     NMIVR1: push    HL              ; store HL
27BD: D5       [22]             push    DE              ; store DE
27BE: 3AE081   [35]             ld      A,(SCR_MODE)    ; check screen mode
27C1: 87       [39]             add     A,A             ; multiply A by 8...
27C2: 87       [43]             add     A,A             ; ...so that reg. A can points..
27C3: 87       [47]             add     A,A             ; to the correct settings
27C4: 3C       [51]             inc     A               ; need to change VREG 1
27C5: 5F       [55]             ld      E,A             ; copy A into E
27C6: 1600     [62]             ld      D,$00           ; reset D
27C8: 21590A   [72]             ld      HL,VDPMODESET   ; pointer to register #1 setting...
27CB: 19       [83]             add     HL,DE           ; ...for current screen mode
27CC: 7E       [90]             ld      A,(HL)          ; load current setting
27CD: D1       [100]            pop     DE              ; retrieve DE
27CE: E1       [110]            pop     HL              ; retrieve HL
27CF: C9       [120]            ret                     ; return to caller
                        
                        ; execute a machine language routine, eventually passing a param into A
27D0: CDDF1E   [17]     SYS:    call    GETNUM          ; Get memory address
27D3: CD201B   [34]             call    DEINT           ; Get integer -32768 to 32767
27D6: ED53F181 [54]             ld      (TMPBFR2),DE    ; store user routine's address
27DA: AF       [58]             xor     A               ; reset A
27DB: 32EF81   [71]             ld      (TMPBFR1),A     ; store into temp buffer
27DE: 2B       [77]             dec     HL              ; dec 'cos GETCHR INCs
27DF: CD6A1A   [94]             call    GETCHR          ; check next character
27E2: 280A     [101|106]        jr      Z,NOSYSPR       ; jump if nothing follows
27E4: CD4718   [118]            call    CHKSYN          ; Make sure ',' follows
27E7: 2C                        defb    ','
27E8: CD6527   [135]            call    GETINT          ; get byte value (0~255) if something follows
27EB: 32EF81   [148]            ld      (TMPBFR1),A     ; store into temp buffer
27EE: 3AEF81   [13]     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
27F1: ED5BF181 [33]             ld      DE,(TMPBFR2)    ; recover user routine's address
27F5: E5       [44]             push    HL              ; save code string address
27F6: EB       [48]             ex      DE,HL           ; move user routine's address into HL
27F7: 11FC27   [58]             ld      DE,SYSRET       ; set point of return after the user routine
27FA: D5       [69]             push    DE              ; store into stack
27FB: E9       [73]             jp      (HL)            ; call user routine
27FC: E1       [10]     SYSRET: pop     HL              ; retrieve code string address
27FD: C9       [20]             ret                     ; return to caller
                        
                        
                        ; read the contents of a byte from RAM
27FE: CD201B   [17]     PEEK:   call    DEINT           ; Get memory address into DE
2801: 1A       [24]             ld      A,(DE)          ; Read value of memory cell
2802: C3D822   [34]             jp      PASSA           ; Return into A
                        
                        ; read the contents of a byte from VRAM
2805: CD201B   [17]     VPEEK:  call    DEINT           ; Get VRAM address into DE
2808: EB       [21]             ex      DE,HL           ; Copy param into HL
2809: F3       [25]             di                      ; Disable interrupts
280A: CD1906   [42]             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
280D: FB       [46]             ei                      ; Re-enable interrupts
280E: EB       [50]             ex      DE,HL           ; Restore HL
280F: C3D822   [60]             jp      PASSA           ; Return value into A
                        
                        ; recover params for POKE/VPOKE commands
                        ; returns address into DE and byte to be written into A
2812: CDDF1E   [17]     PKEPRMS:call    GETNUM          ; Get memory address
2815: CD201B   [34]             call    DEINT           ; Get integer -32768 to 32767
2818: ED53EF81 [54]             ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
281C: CD4718   [71]             call    CHKSYN          ; Make sure ',' follows
281F: 2C                        defb    ','
2820: CD6527   [88]             call    GETINT          ; Get integer 0-255
2823: ED5BEF81 [108]            ld      DE,(TMPBFR1)    ; Restore memory address
2827: C9       [118]            ret                     ; Return to caller
                        
                        ; write a byte into SRAM
2828: CD1228   [17]     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
282B: 12       [24]             ld      (DE),A          ; Load it into memory
282C: C9       [34]             ret
                        
                        ; write a byte into VRAM
282D: CD1228   [17]     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
2830: EB       [21]             ex      DE,HL           ; Copy address into HL
2831: F3       [25]             di                      ; Disable interrupts
2832: CD2E06   [42]             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
2835: FB       [46]             ei                      ; Re-enable interrupts
2836: EB       [50]             ex      DE,HL           ; Restore HL
2837: C9       [60]             ret                     ; Return to caller
                        
                        ; position the cursor at a specific X,Y location onto screen
2838: CD6527   [17]     LOCATE: call    GETINT          ; get the first param into A
283B: E5       [28]             push    HL              ; store HL
283C: 21DE81   [38]             ld      HL,SCR_SIZE_W   ; load address of screen width
283F: 5E       [45]             ld      E,(HL)          ; load screen width into E
2840: E1       [55]             pop     HL              ; restore HL
2841: BB       [59]             cp      E               ; compare witdh with param
2842: D2351B   [69|69]          jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
2845: 32EF81   [82]             ld      (TMPBFR1),A     ; Store X into a temp. buffer
2848: CD4718   [99]             call    CHKSYN          ; Make sure ',' follows
284B: 2C                        defb    ','
284C: CD6527   [116]            call    GETINT          ; Get the second param into A
284F: E5       [127]            push    HL              ; store HL
2850: 21DF81   [137]            ld      HL,SCR_SIZE_H   ; load address of screen width
2853: 5E       [144]            ld      E,(HL)          ; load screen width into A
2854: E1       [154]            pop     HL              ; restore HL
2855: BB       [158]            cp      E               ; compare witdh with param
2856: D2351B   [168|168]        jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
2859: 32E781   [181]            ld      (SCR_CUR_NY),A  ; store new Y
285C: 3AEF81   [194]            ld      A,(TMPBFR1)     ; recover the new X
285F: 32E681   [207]            ld      (SCR_CUR_NX),A  ; store new X
2862: E5       [218]            push    HL              ; store HL
2863: F3       [222]            di                      ; disable INTs
2864: CD5F06   [239]            call    MOVCRS          ; move cursor to new location
2867: FB       [243]            ei                      ; re-enable INTs
2868: E1       [253]            pop     HL              ; restore HL
2869: C9       [263]            ret                     ; return to caller
                        
                        ; write a byte into one of the PSG registers
286A: CD6527   [17]     SREG:   call    GETINT          ; Get register number back into A
286D: FE10     [24]             cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
286F: D2351B   [34|34]          jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
2872: 32EF81   [47]             ld      (TMPBFR1),A     ; Store A into a temp. buffer
2875: CD4718   [64]             call    CHKSYN          ; Make sure ',' follows
2878: 2C                        defb    ','
2879: CD6527   [81]             call    GETINT          ; get second value (0-255), returned into A
287C: 5F       [85]             ld      E,A             ; store value into E
287D: 3AEF81   [98]             ld      A,(TMPBFR1)     ; recover VDP register and store into D
2880: F3       [102]            di                      ; disable INTs
2881: 0E40     [109]            ld      C,PSG_REG       ; output port to access PSG registers
2883: ED79     [121]            out     (C),A           ; send register # to PSG
2885: 0E41     [128]            ld      C,PSG_DAT       ; output port to send data to PSG
2887: ED59     [140]            out     (C),E           ; send byte to write into selected register
2889: FB       [144]            ei                      ; re-enable INTs
288A: C9       [154]            ret                     ; return to caller
                        
                        ; VOLUME ch,vol
                        ; set the volume for the audio channels
                        ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
288B: CD6527   [17]     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
288E: FE04     [24]             cp      $04             ; check if it's in the range 0~3
2890: D2351B   [34|34]          jp      NC,FCERR        ; if not, exit with Illegal function call error
2893: 32EF81   [47]             ld      (TMPBFR1),A     ; Store A into a temp. buffer
2896: CD4718   [64]             call    CHKSYN          ; Make sure ',' follows
2899: 2C                        defb    ','
289A: CD6527   [81]             call    GETINT          ; get integer 0-255 (recover channel)
289D: FE10     [88]             cp      $10             ; check if it's in the range 0~15
289F: D2351B   [98|98]          jp      NC,FCERR        ; if not, exit with Illegal funcion call
28A2: 57       [102]            ld      D,A             ; store volume into D
28A3: 3AEF81   [115]            ld      A,(TMPBFR1)     ; retrieve channel
28A6: A7       [119]            and     A               ; is it 0? (0=every channel)
28A7: 2010     [126|131]        jr      NZ,VOLCH        ; no, jump over
28A9: 0603     [133]            ld      B,$03           ; yes, set every channel
28AB: 1E08     [140]            ld      E,$08           ; register volume of first channel
28AD: 0E40     [ 7]     RPVOLCG:ld      C,PSG_REG       ; PSG register port
28AF: ED59     [19]             out     (C),E           ; set register #
28B1: 0E41     [26]             ld      C,PSG_DAT       ; PSG data port
28B3: ED51     [38]             out     (C),D           ; send volume
28B5: 1C       [42]             inc     E               ; next register
28B6: 10F5     [50|55]          djnz    RPVOLCG         ; repeat for each channel
28B8: C9       [60]             ret                     ; return to caller
28B9: 0E40     [ 7]     VOLCH:  ld      C,PSG_REG       ; PSG register port
28BB: C607     [14]             add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
28BD: ED79     [26]             out     (C),A           ; set register
28BF: 0E41     [33]             ld      C,PSG_DAT       ; PSG data port
28C1: ED51     [45]             out     (C),D           ; send volume level
28C3: C9       [55]             ret                     ; return to caller
                        
                        ; SOUND ch,tone,dur
                        ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
                        ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
                        ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
28C4: CD6527   [17]     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
28C7: A7       [21]             and     A               ; is it zero?
28C8: 2008     [28|33]          jr      NZ,CTSNDC       ; no, continue with checking of params
28CA: E5       [39]             push    HL              ; store HL
28CB: F3       [43]             di                      ; disable INTs
28CC: CDCB0B   [60]             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
28CF: FB       [64]             ei                      ; re-enable INTs
28D0: E1       [74]             pop     HL              ; retrieve HL
28D1: C9       [84]             ret                     ; return to caller
28D2: 32EF81   [13]     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
28D5: FE04     [20]             cp      $04             ; is channel >3?
28D7: D25729   [30|30]          jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
28DA: CD4718   [47]             call    CHKSYN          ; No, continue checking by making sure ',' follows
28DD: 2C                        defb    ','
28DE: CDDF1E   [64]             call    GETNUM          ; Get tone frequency
28E1: CD201B   [81]             call    DEINT           ; Get integer -32768 to 32767
28E4: ED53F181 [101]            ld      (TMPBFR2),DE    ; Store frequency
28E8: CD4718   [118]            call    CHKSYN          ; Make sure ',' follows
28EB: 2C                        defb    ','
28EC: CDDF1E   [135]            call    GETNUM          ; Get duration
28EF: CD201B   [152]            call    DEINT           ; Get integer -32768 to 32767
28F2: ED53F381 [172]            ld      (TMPBFR3),DE    ; Store duration
                                                        ; CHECK CHANNEL
28F6: 3AEF81   [185]            ld      A,(TMPBFR1)     ; recover channel
28F9: FE01     [192]            cp      $01             ; is channel <1?
28FB: DA351B   [202|202]        jp      C,FCERR         ; Yes - Illegal function call error
                                                        ; CHECK FREQUENCY
28FE: ED5BF181 [222]            ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
2902: 7A       [226]            ld      A,D             ; move D into A and check if it is in the range 0~4095...
2903: FE10     [233]            cp      $10             ; ...so D must not be greater than $0F (15)
2905: D2351B   [243|243]        jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
                                                        ; CHECK DURATION
2908: ED5BF381 [263]            ld      DE,(TMPBFR3)    ; restore duration from temp buffer
290C: 7A       [267]            ld      A,D             ; check if it is in the range 0~16383...
290D: E6C0     [274]            and     $C0             ; ...(15th & 14th bits must not be set)
290F: C2351B   [284|284]        jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
                                                        ;
                                                        ; SET TONE:
                                                        ; let's start by setting up the channel
2912: 3AEF81   [297]            ld      A,(TMPBFR1)     ; restore channel value
2915: FE03     [304]            cp      $03             ; is it 3?
2917: 2002     [311|316]        jr      NZ,SND1         ; no, jump over
2919: 3E04     [318]            ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
291B: 2F       [ 4]     SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
291C: CDA429   [21]             call    WRTSND          ; enable line into mixer of channel stored in A
                                                        ; SET FREQUENCY
                                                        ; we simply get frequency and subtract from 4096. The result
                                                        ; is put into register pair of the corresponding freq tone channel
291F: ED5BF181 [41]             ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
2923: E5       [52]             push    HL              ; store HL (it will be used by the subroutine)
2924: 210010   [62]             ld      HL,$1000        ; load 4096 into HL
2927: A7       [66]             and     A               ; reset C flag
2928: ED52     [81]             sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
292A: 3AEF81   [94]             ld      A,(TMPBFR1)     ; restore channel value
292D: 3D       [98]             dec     A               ; set A into the range 0~2
292E: 87       [102]            add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
292F: 0E40     [109]            ld      C,PSG_REG       ; PSG register port
2931: ED79     [121]            out     (C),A           ; select first register of the pair
2933: 0E41     [128]            ld      C,PSG_DAT       ; PSG data port
2935: ED69     [140]            out     (C),L           ; send high byte
2937: 0E40     [147]            ld      C,PSG_REG       ; PSG register support
2939: 3C       [151]            inc     A               ; second register of the pair
293A: ED79     [163]            out     (C),A           ; select register
293C: 0E41     [170]            ld      C,PSG_DAT       ; PSG data port
293E: ED61     [182]            out     (C),H           ; send low byte
2940: ED5BF381 [202]            ld      DE,(TMPBFR3)    ; recover duration
2944: 3AEF81   [215]            ld      A,(TMPBFR1)     ; recover channel value
2947: 3D       [219]            dec     A               ; set channel into the range 0~2
2948: 87       [223]            add     A,A             ; double A to find the correct offset
2949: 212382   [233]            ld      HL,CHASNDDTN    ; set duration into...
294C: 85       [237]            add     A,L             ; ...the proper...
294D: 3001     [244|249]        jr      NC,SNDOVR       ; (is there a rest? no, jump over
294F: 24       [248]            inc     H               ; yes, increment H)
2950: 6F       [ 4]     SNDOVR: ld      L,A             ; ...register pair...
2951: 7323722B [30]             ld      (HL),DE         ; ...and store the value
2955: E1       [40]             pop     HL              ; retrieve HL
2956: C9       [50]             ret                     ; Return to caller
2957: FE07     [ 7]     NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
2959: D2351B   [17|17]          jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
295C: CD4718   [34]             call    CHKSYN          ; yes, continue checking by making sure ',' follows
295F: 2C                        defb    ','
2960: CD6527   [51]             call    GETINT          ; get integer 0-255 (frequency)
2963: FE20     [58]             cp      $20             ; make sure it's in range 0~31
2965: D2351B   [68|68]          jp      NC,FCERR        ; no, so Illegal function call
2968: 32F181   [81]             ld      (TMPBFR2),A     ; store freq.
296B: 2B       [87]             dec     HL              ; dec 'cos GETCHR INCs
296C: CD6A1A   [104]            call    GETCHR          ; check that nothing follows
296F: C26515   [114|114]        jp      NZ,SNERR        ; error if no empty line
2972: 3AF181   [127]            ld      A,(TMPBFR2)     ; retrieve freq.
2975: 5F       [131]            ld      E,A             ; store freq into E
2976: 3AEF81   [144]            ld      A,(TMPBFR1)     ; retrieve channel
2979: D603     [151]            sub     $03             ; subtract 3 to get channel in range 1~3
297B: FE03     [158]            cp      $03             ; is it 3?
297D: 2002     [165|170]        jr      NZ,NOS1         ; no, jump over
297F: 3E04     [172]            ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
2981: 87       [ 4]     NOS1:   add     A,A
2982: 87       [ 8]             add     A,A
2983: 87       [12]             add     A,A             ; let's move A 3 bits to left
2984: 47       [16]             ld      B,A             ; store channel into B
2985: 7B       [20]             ld      A,E             ; check if
2986: A7       [24]             and     A               ; freq is 0 (means that noise reproduction must be halted)
2987: F3       [28]             di                      ; disable INts
2988: 200A     [35|40]          jr      NZ,NOS2         ; no, so jump over
298A: 3E07     [42]             ld      A,$07           ; mixer register
298C: CD190C   [59]             call    SETSNDREG       ; set mixer register
298F: ED78     [71]             in      A,(C)           ; load current mixer value
2991: B0       [75]             or      B               ; disable noise
2992: 1819     [87]             jr      NOS3            ; continue over
2994: 78       [ 4]     NOS2:   ld      A,B             ; recover channel
2995: 2F       [ 8]             cpl                     ; complement of A - this is used to set on the channel into the mixer
2996: CDA429   [25]             call    WRTSND          ; enable line into mixer of channel stored in A
2999: 3E06     [32]             ld      A,$06           ; write into noise register
299B: CD190C   [49]             call    SETSNDREG       ; set register into PSG
299E: 7B       [53]             ld      A,E             ; load value for noise frequency
299F: CD1E0C   [70]             call    WRTSNDREG       ; write data into register $06
29A2: FB       [74]             ei                      ; re-enable INTs
29A3: C9       [84]             ret
                                ; enable line into mixer of channel stored in A
29A4: 47       [ 4]     WRTSND: ld      B,A             ; move channel into B
29A5: 3E07     [11]             ld      A,$07           ; mixer register
29A7: CD190C   [28]             call    SETSNDREG       ; set mixer register
29AA: ED78     [40]             in      A,(C)           ; load current value
29AC: A0       [44]             and     B               ; set on the channel into the mixer (remember that 0=ON)
                                                        ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
                                                        ; the register is still unchanged after reset) is 11111111 and
                                                        ; 11111111 AND 11111110 is equal to 11111110
                                                        ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
29AD: 47       [ 4]     NOS3:   ld      B,A             ; store new mixer value into B
29AE: 3E07     [11]             ld      A,$07           ; mixer address
29B0: CD190C   [28]             call    SETSNDREG       ; set register
29B3: 78       [32]             ld      A,B             ; retrieve new mixer value from B
29B4: CD1E0C   [49]             call    WRTSNDREG       ; send new value for the mixer
29B7: FB       [53]             ei                      ; re-enable INTs
29B8: C9       [63]             ret                     ; return to caller
                        
                        ; write a byte into one of the VDP registers
29B9: CD6527   [17]     VREG:   call    GETINT          ; Get register number back into A
29BC: FE08     [24]             cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
29BE: D2351B   [34|34]          jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
29C1: 32EF81   [47]             ld      (TMPBFR1),A     ; Store A into a temp. buffer
29C4: CD4718   [64]             call    CHKSYN          ; Make sure ',' follows
29C7: 2C                        defb    ','
29C8: CD6527   [81]             call    GETINT          ; get value (0-255)
29CB: 5F       [85]             ld      E,A             ; store value into E
29CC: 3AEF81   [98]             ld      A,(TMPBFR1)     ; recover VDP register and store into A
29CF: F3       [102]            di                      ; disable INTs
29D0: CD4306   [119]            call    WRITE_VREG      ; write value into VDP register
29D3: FB       [123]            ei                      ; re-enable INTs
29D4: C9       [133]            ret                     ; return to caller
                        
                        ; read the VDP status register and return it into A
29D5: CD201B   [17]     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
29D8: F3       [21]             di                      ; disable INTs
29D9: CD4E06   [38]             call    READ_VSTAT      ; read VDP register status
29DC: FB       [42]             ei                      ; re-enable INTs
29DD: C3D822   [52]             jp      PASSA           ; Return integer A
                        
                        ; read from PSG register and return it into A
29E0: CD201B   [17]     SSTAT:  call    DEINT           ; get integer -32768 to 32767
29E3: 7B       [21]             ld      A,E             ; consider LSB
29E4: FE10     [28]             cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
29E6: D2351B   [38|38]          jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
29E9: F3       [42]             di                      ; disable INts
29EA: 0E40     [49]             ld      C,PSG_REG       ; output port to set PSG register
29EC: ED79     [61]             out     (C),A           ; send register to read from
29EE: ED78     [73]             in      A,(C)           ; read register's contents and store into A
29F0: FB       [77]             ei                      ; re-enable INTs
29F1: C3D822   [87]             jp      PASSA           ; return A
                        
                        ; read the temp key buffer and return the value of the current key being pressed
                        ; can wait for the number of 100thds of second before to return
29F4: CD5223   [17]     INKEY:  call    IDTEST          ; Test for illegal direct
29F7: CD201B   [34]             call    DEINT           ; get number param (100thds of second to wait) into DE
29FA: C5       [45]             push    BC              ; store BC
29FB: 3ACE81   [58]             ld      A,(TMRCNT)      ; Load current value of system timer
29FE: 47       [62]             ld      B,A             ; move it into B
29FF: 3ACE81   [13]     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
2A02: B8       [17]             cp      B               ; ...to let the sniffer collect...
2A03: 20FA     [24|29]          jr      NZ,CMP_A        ; ...at least 1 char before to continue
2A05: 7A       [28]             ld      A,D             ; check the param
2A06: B3       [32]             or      E               ; if DE<>0 then...
2A07: 2005     [39|44]          jr      NZ,INKEY2       ; ...jump over...
2A09: 3A2B82   [52]             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
2A0C: 182A     [64]             jr      ENDINK          ; ...return it
2A0E: 7A       [ 4]     INKEY2: ld      A,D             ; check if param>1023
2A0F: FE04     [11]             cp      $04             ; to do this we check if MSB>3
2A11: D2351B   [21|21]          jp      NC,FCERR        ; if MSB >=4 then error
2A14: E5       [32]             push    HL              ; store HL
2A15: 210900   [42]             ld      HL,$0009        ; check if value
2A18: CDC53D   [59]             call    CMP16           ; is < 10
2A1B: E1       [69]             pop     HL              ; retrieve HL
2A1C: DA222A   [79|79]          jp      C,SRTINK        ; if value >= 10 then jump over
2A1F: 110A00   [89]             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
2A22: 3ACE81   [13]     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
2A25: 47       [17]             ld      B,A             ; move it into B
2A26: 3A2B82   [13]     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
2A29: A7       [17]             and     A               ; is it 0?
2A2A: 200C     [24|29]          jr      NZ,ENDINK       ; no, so we can return it
2A2C: 3ACE81   [37]             ld      A,(TMRCNT)      ; load the first byte of the system timer
2A2F: B8       [41]             cp      B               ; is it the same value?
2A30: 28F4     [48|53]          jr      Z,CHKINK        ; yes, so read again
2A32: 47       [52]             ld      B,A             ; store new value
2A33: 1B       [58]             dec     DE              ; no, decrement timer
2A34: 7A       [62]             ld      A,D             ; check if zero reached
2A35: B3       [66]             or      E               ; by ORing D and E
2A36: 20EE     [73|78]          jr      NZ,CHKINK       ; if not 0, repeat
2A38: C1       [10]     ENDINK: pop     BC              ; restore BC
2A39: F5       [21]             push    AF              ; store A
2A3A: F3       [25]             di                      ; disable INTs
2A3B: AF       [29]             xor     A               ; clear the...
2A3C: 322B82   [42]             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
2A3F: FB       [46]             ei                      ; re-enable INTs
2A40: F1       [56]             pop     AF              ; retrieve A
2A41: C3D822   [10]     ENDINK2:jp      PASSA           ; return A as ASCII value
                        
2A44: 216B2F   [10]     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
2A47: CD3C2D   [17]     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
2A4A: C3562A   [27]             jp      FPADD           ; Add BCDE to FPREG
                        
2A4D: CD3C2D   [17]     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
2A50: 21                        defb    $21             ; Skip "pop BC" and "pop DE"
2A51: C1       [10]     PSUB:   pop     BC              ; Get FP number from stack
2A52: D1       [20]             pop     DE
2A53: CD162D   [17]     SUBCDE: call    INVSGN          ; Negate FPREG
2A56: 78       [ 4]     FPADD:  ld      A,B             ; Get FP exponent
2A57: B7       [ 8]             or      A               ; Is number zero?
2A58: C8       [13|19]          ret     Z               ; Yes - Nothing to add
2A59: 3ACC81   [26]             ld      A,(FPEXP)       ; Get FPREG exponent
2A5C: B7       [30]             or      A               ; Is this number zero?
2A5D: CA2E2D   [40|40]          jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
2A60: 90       [44]             sub     B               ; BCDE number larger?
2A61: D2702A   [54|54]          jp      NC,NOSWAP       ; No - Don't swap them
2A64: 2F       [58]             cpl                     ; Two's complement
2A65: 3C       [62]             inc     A               ;  FP exponent
2A66: EB       [66]             ex      DE,HL
2A67: CD1E2D   [83]             call    STAKFP          ; Put FPREG on stack
2A6A: EB       [87]             ex      DE,HL
2A6B: CD2E2D   [104]            call    FPBCDE          ; Move BCDE to FPREG
2A6E: C1       [114]            pop     BC              ; Restore number from stack
2A6F: D1       [124]            pop     DE
2A70: FE19     [ 7]     NOSWAP: cp      24+1            ; Second number insignificant?
2A72: D0       [12|18]          ret     NC              ; Yes - First number is result
2A73: F5       [23]             push    AF              ; Save number of bits to scale
2A74: CD532D   [40]             call    SIGNS           ; Set MSBs & sign of result
2A77: 67       [44]             ld      H,A             ; Save sign of result
2A78: F1       [54]             pop     AF              ; Restore scaling factor
2A79: CD1B2B   [71]             call    SCALE           ; Scale BCDE to same exponent
2A7C: B4       [75]             or      H               ; Result to be positive?
2A7D: 21C981   [85]             ld      HL,FPREG        ; Point to FPREG
2A80: F2962A   [95|95]          jp      P,MINCDE        ; No - Subtract FPREG from CDE
2A83: CDFB2A   [112]            call    PLUCDE          ; Add FPREG to CDE
2A86: D2DC2A   [122|122]        jp      NC,RONDUP       ; No overflow - Round it up
2A89: 23       [128]            inc     HL              ; Point to exponent
2A8A: 34       [139]            inc     (HL)            ; Increment it
2A8B: CA7415   [149|149]        jp      Z,OVERR         ; Number overflowed - Error
2A8E: 2E01     [156]            ld      L,$01           ; 1 bit to shift right
2A90: CD312B   [173]            call    SHRT1           ; Shift result right
2A93: C3DC2A   [183]            jp      RONDUP          ; Round it up
                        
2A96: AF       [ 4]     MINCDE: xor     A               ; Clear A and carry
2A97: 90       [ 8]             sub     B               ; Negate exponent
2A98: 47       [12]             ld      B,A             ; Re-save exponent
2A99: 7E       [19]             ld      A,(HL)          ; Get LSB of FPREG
2A9A: 9B       [23]             sbc     A, E            ; Subtract LSB of BCDE
2A9B: 5F       [27]             ld      E,A             ; Save LSB of BCDE
2A9C: 23       [33]             inc     HL
2A9D: 7E       [40]             ld      A,(HL)          ; Get NMSB of FPREG
2A9E: 9A       [44]             sbc     A,D             ; Subtract NMSB of BCDE
2A9F: 57       [48]             ld      D,A             ; Save NMSB of BCDE
2AA0: 23       [54]             inc     HL
2AA1: 7E       [61]             ld      A,(HL)          ; Get MSB of FPREG
2AA2: 99       [65]             sbc     A,C             ; Subtract MSB of BCDE
2AA3: 4F       [69]             ld      C,A             ; Save MSB of BCDE
2AA4: DC072B   [10|17]  CONPOS: call    C,COMPL         ; Overflow - Make it positive
                        
2AA7: 68       [ 4]     BNORM:  ld      L,B             ; L = Exponent
2AA8: 63       [ 8]             ld      H,E             ; H = LSB
2AA9: AF       [12]             xor     A
2AAA: 47       [ 4]     BNRMLP: ld      B,A             ; Save bit count
2AAB: 79       [ 8]             ld      A,C             ; Get MSB
2AAC: B7       [12]             or      A               ; Is it zero?
2AAD: C2C92A   [22|22]          jp      NZ,PNORM        ; No - Do it bit at a time
2AB0: 4A       [26]             ld      C,D             ; MSB = NMSB
2AB1: 54       [30]             ld      D,H             ; NMSB= LSB
2AB2: 65       [34]             ld      H,L             ; LSB = VLSB
2AB3: 6F       [38]             ld      L,A             ; VLSB= 0
2AB4: 78       [42]             ld      A,B             ; Get exponent
2AB5: D608     [49]             sub     $08             ; Count 8 bits
2AB7: FEE0     [56]             cp      -24-8           ; Was number zero?
2AB9: C2AA2A   [66|66]          jp      NZ,BNRMLP       ; No - Keep normalising
2ABC: AF       [ 4]     RESZER: xor     A               ; Result is zero
2ABD: 32CC81   [13]     SAVEXP: ld      (FPEXP),A       ; Save result as zero
2AC0: C9       [23]             ret
                        
2AC1: 05       [ 4]     NORMAL: dec     B               ; Count bits
2AC2: 29       [15]             add     HL,HL           ; Shift HL left
2AC3: 7A       [19]             ld      A,D             ; Get NMSB
2AC4: 17       [23]             rla                     ; Shift left with last bit
2AC5: 57       [27]             ld      D,A             ; Save NMSB
2AC6: 79       [31]             ld      A,C             ; Get MSB
2AC7: 8F       [35]             adc     A,A             ; Shift left with last bit
2AC8: 4F       [39]             ld      C,A             ; Save MSB
2AC9: F2C12A   [10|10]  PNORM:  jp      P,NORMAL        ; Not done - Keep going
2ACC: 78       [14]             ld      A,B             ; Number of bits shifted
2ACD: 5C       [18]             ld      E,H             ; Save HL in EB
2ACE: 45       [22]             ld      B,L
2ACF: B7       [26]             or      A               ; Any shifting done?
2AD0: CADC2A   [36|36]          jp      Z,RONDUP        ; No - Round it up
2AD3: 21CC81   [46]             ld      HL,FPEXP        ; Point to exponent
2AD6: 86       [53]             add     A,(HL)          ; Add shifted bits
2AD7: 77       [60]             ld      (HL),A          ; Re-save exponent
2AD8: D2BC2A   [70|70]          jp      NC,RESZER       ; Underflow - Result is zero
2ADB: C8       [75|81]          ret     Z               ; Result is zero
2ADC: 78       [ 4]     RONDUP: ld      A,B             ; Get VLSB of number
2ADD: 21CC81   [10]     RONDB:  ld      HL,FPEXP        ; Point to exponent
2AE0: B7       [14]             or      A               ; Any rounding?
2AE1: FCEE2A   [24|31]          call    M,FPROND        ; Yes - Round number up
2AE4: 46       [31]             ld      B,(HL)          ; B = Exponent
2AE5: 23       [37]             inc     HL
2AE6: 7E       [44]             ld      A,(HL)          ; Get sign of result
2AE7: E680     [51]             and     %10000000       ; Only bit 7 needed
2AE9: A9       [55]             xor     C               ; Set correct sign
2AEA: 4F       [59]             ld      C,A             ; Save correct sign in number
2AEB: C32E2D   [69]             jp      FPBCDE          ; Move BCDE to FPREG
                        
2AEE: 1C       [ 4]     FPROND: inc     E               ; Round LSB
2AEF: C0       [ 9|15]          ret     NZ              ; Return if ok
2AF0: 14       [13]             inc     D               ; Round NMSB
2AF1: C0       [18|24]          ret     NZ              ; Return if ok
2AF2: 0C       [22]             inc     C               ; Round MSB
2AF3: C0       [27|33]          ret     NZ              ; Return if ok
2AF4: 0E80     [34]             ld      C,$80           ; Set normal value
2AF6: 34       [45]             inc     (HL)            ; Increment exponent
2AF7: C0       [50|56]          ret     NZ              ; Return if ok
2AF8: C37415   [60]             jp      OVERR           ; Overflow error
                        
2AFB: 7E       [ 7]     PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
2AFC: 83       [11]             add     A,E             ; Add LSB of BCDE
2AFD: 5F       [15]             ld      E,A             ; Save LSB of BCDE
2AFE: 23       [21]             inc     HL
2AFF: 7E       [28]             ld      A,(HL)          ; Get NMSB of FPREG
2B00: 8A       [32]             adc     A,D             ; Add NMSB of BCDE
2B01: 57       [36]             ld      D,A             ; Save NMSB of BCDE
2B02: 23       [42]             inc     HL
2B03: 7E       [49]             ld      A,(HL)          ; Get MSB of FPREG
2B04: 89       [53]             adc     A,C             ; Add MSB of BCDE
2B05: 4F       [57]             ld      C,A             ; Save MSB of BCDE
2B06: C9       [67]             ret
                        
2B07: 21CD81   [10]     COMPL:  ld      HL,SGNRES       ; Sign of result
2B0A: 7E       [17]             ld      A,(HL)          ; Get sign of result
2B0B: 2F       [21]             cpl                     ; Negate it
2B0C: 77       [28]             ld      (HL),A          ; Put it back
2B0D: AF       [32]             xor     A
2B0E: 6F       [36]             ld      L,A             ; Set L to zero
2B0F: 90       [40]             sub     B               ; Negate exponent,set carry
2B10: 47       [44]             ld      B,A             ; Re-save exponent
2B11: 7D       [48]             ld      A,L             ; Load zero
2B12: 9B       [52]             sbc     A,E             ; Negate LSB
2B13: 5F       [56]             ld      E,A             ; Re-save LSB
2B14: 7D       [60]             ld      A,L             ; Load zero
2B15: 9A       [64]             sbc     A,D             ; Negate NMSB
2B16: 57       [68]             ld      D,A             ; Re-save NMSB
2B17: 7D       [72]             ld      A,L             ; Load zero
2B18: 99       [76]             sbc     A,C             ; Negate MSB
2B19: 4F       [80]             ld      C,A             ; Re-save MSB
2B1A: C9       [90]             ret
                        
2B1B: 0600     [ 7]     SCALE:  ld      B,$00           ; Clear underflow
2B1D: D608     [ 7]     SCALLP: sub     $08             ; 8 bits (a whole byte)?
2B1F: DA2A2B   [17|17]          jp      C,SHRITE        ; No - Shift right A bits
2B22: 43       [21]             ld      B,E             ; <- Shift
2B23: 5A       [25]             ld      E,D             ; <- right
2B24: 51       [29]             ld      D,C             ; <- eight
2B25: 0E00     [36]             ld      C,$00           ; <- bits
2B27: C31D2B   [46]             jp      SCALLP          ; More bits to shift
                        
2B2A: C609     [ 7]     SHRITE: add     A,8+1           ; Adjust count
2B2C: 6F       [11]             ld      L,A             ; Save bits to shift
2B2D: AF       [ 4]     SHRLP:  xor     A               ; Flag for all done
2B2E: 2D       [ 8]             dec     L               ; All shifting done?
2B2F: C8       [13|19]          ret     Z               ; Yes - Return
2B30: 79       [17]             ld      A,C             ; Get MSB
2B31: 1F       [ 4]     SHRT1:  rra                     ; Shift it right
2B32: 4F       [ 8]             ld      C,A             ; Re-save
2B33: 7A       [12]             ld      A,D             ; Get NMSB
2B34: 1F       [16]             rra                     ; Shift right with last bit
2B35: 57       [20]             ld      D,A             ; Re-save it
2B36: 7B       [24]             ld      A,E             ; Get LSB
2B37: 1F       [28]             rra                     ; Shift right with last bit
2B38: 5F       [32]             ld      E,A             ; Re-save it
2B39: 78       [36]             ld      A,B             ; Get underflow
2B3A: 1F       [40]             rra                     ; Shift right with last bit
2B3B: 47       [44]             ld      B,A             ; Re-save underflow
2B3C: C32D2B   [54]             jp      SHRLP           ; More bits to do
                        
2B3F: 00000081          UNITY:  defb    $00,$00,$00,$81 ; 1.00000
                        
2B43: 03                LOGTAB: defb    $03             ; Table used by LOG
2B44: AA561980                  defb    $AA,$56,$19,$80 ; 0.59898
2B48: F1227680                  defb    $F1,$22,$76,$80 ; 0.96147
2B4C: 45AA3882                  defb    $45,$AA,$38,$82 ; 2.88539
                        
2B50: CDED2C   [17]     LOG:    call    TSTSGN          ; Test sign of value
2B53: B7       [21]             or      A
2B54: EA351B   [31|31]          jp      PE,FCERR        ; ?FC Error if <= zero
2B57: 21CC81   [41]             ld      HL,FPEXP        ; Point to exponent
2B5A: 7E       [48]             ld      A,(HL)          ; Get exponent
2B5B: 013580   [58]             ld      BC,$8035        ; BCDE = SQR(1/2)
2B5E: 11F304   [68]             ld      DE,$04F3
2B61: 90       [72]             sub     B               ; Scale value to be < 1
2B62: F5       [83]             push    AF              ; Save scale factor
2B63: 70       [90]             ld      (HL),B          ; Save new exponent
2B64: D5       [101]            push    DE              ; Save SQR(1/2)
2B65: C5       [112]            push    BC
2B66: CD562A   [129]            call    FPADD           ; Add SQR(1/2) to value
2B69: C1       [139]            pop     BC              ; Restore SQR(1/2)
2B6A: D1       [149]            pop     DE
2B6B: 04       [153]            inc     B               ; Make it SQR(2)
2B6C: CD432C   [170]            call    DVBCDE          ; Divide by SQR(2)
2B6F: 213F2B   [180]            ld      HL,UNITY        ; Point to 1.
2B72: CD4D2A   [197]            call    SUBPHL          ; Subtract FPREG from 1
2B75: 21432B   [207]            ld      HL,LOGTAB       ; Coefficient table
2B78: CD3530   [224]            call    SUMSER          ; Evaluate sum of series
2B7B: 018080   [234]            ld      BC,$8080        ; BCDE = -0.5
2B7E: 110000   [244]            ld      DE,$0000
2B81: CD562A   [261]            call    FPADD           ; Subtract 0.5 from FPREG
2B84: F1       [271]            pop     AF              ; Restore scale factor
2B85: CD682E   [288]            call    RSCALE          ; Re-scale number
2B88: 013180   [10]     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
2B8B: 111872   [20]             ld      DE,$7218
2B8E: 21                        defb    $21             ; Skip "pop BC" and "pop DE"
                        
2B8F: C1       [10]     MULT:   pop     BC              ; Get number from stack
2B90: D1       [20]             pop     DE
2B91: CDED2C   [17]     FPMULT: call    TSTSGN          ; Test sign of FPREG
2B94: C8       [22|28]          ret     Z               ; Return zero if zero
2B95: 2E00     [29]             ld      L,$00           ; Flag add exponents
2B97: CDAB2C   [46]             call    ADDEXP          ; Add exponents
2B9A: 79       [50]             ld      A,C             ; Get MSB of multiplier
2B9B: 323D82   [63]             ld      (MULVAL),A      ; Save MSB of multiplier
2B9E: EB       [67]             ex      DE,HL
2B9F: 223E82   [83]             ld      (MULVAL+1),HL   ; Save rest of multiplier
2BA2: 010000   [93]             ld      BC,$0000        ; Partial product (BCDE) = zero
2BA5: 50       [97]             ld      D,B
2BA6: 58       [101]            ld      E,B
2BA7: 21A72A   [111]            ld      HL,BNORM        ; Address of normalise
2BAA: E5       [122]            push    HL              ; Save for return
2BAB: 21B32B   [132]            ld      HL,MULT8        ; Address of 8 bit multiply
2BAE: E5       [143]            push    HL              ; Save for NMSB,MSB
2BAF: E5       [154]            push    HL              ;
2BB0: 21C981   [164]            ld      HL,FPREG        ; Point to number
2BB3: 7E       [ 7]     MULT8:  ld      A,(HL)          ; Get LSB of number
2BB4: 23       [13]             inc     HL              ; Point to NMSB
2BB5: B7       [17]             or      A               ; Test LSB
2BB6: CADF2B   [27|27]          jp      Z,BYTSFT        ; Zero - shift to next byte
2BB9: E5       [38]             push    HL              ; Save address of number
2BBA: 2E08     [45]             ld      L,$08           ; 8 bits to multiply by
2BBC: 1F       [ 4]     MUL8LP: rra                     ; Shift LSB right
2BBD: 67       [ 8]             ld      H,A             ; Save LSB
2BBE: 79       [12]             ld      A,C             ; Get MSB
2BBF: D2CD2B   [22|22]          jp      NC,NOMADD       ; Bit was zero - Don't add
2BC2: E5       [33]             push    HL              ; Save LSB and count
2BC3: 2A3E82   [49]             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
2BC6: 19       [60]             add     HL,DE           ; Add NMSB and LSB
2BC7: EB       [64]             ex      DE,HL           ; Leave sum in DE
2BC8: E1       [74]             pop     HL              ; Restore MSB and count
2BC9: 3A3D82   [87]             ld      A,(MULVAL)      ; Get MSB of multiplier
2BCC: 89       [91]             adc     A,C             ; Add MSB
2BCD: 1F       [ 4]     NOMADD: rra                     ; Shift MSB right
2BCE: 4F       [ 8]             ld      C,A             ; Re-save MSB
2BCF: 7A       [12]             ld      A,D             ; Get NMSB
2BD0: 1F       [16]             rra                     ; Shift NMSB right
2BD1: 57       [20]             ld      D,A             ; Re-save NMSB
2BD2: 7B       [24]             ld      A,E             ; Get LSB
2BD3: 1F       [28]             rra                     ; Shift LSB right
2BD4: 5F       [32]             ld      E,A             ; Re-save LSB
2BD5: 78       [36]             ld      A,B             ; Get VLSB
2BD6: 1F       [40]             rra                     ; Shift VLSB right
2BD7: 47       [44]             ld      B,A             ; Re-save VLSB
2BD8: 2D       [48]             dec     L               ; Count bits multiplied
2BD9: 7C       [52]             ld      A,H             ; Get LSB of multiplier
2BDA: C2BC2B   [62|62]          jp      NZ,MUL8LP       ; More - Do it
2BDD: E1       [10]     POPHRT: pop     HL              ; Restore address of number
2BDE: C9       [20]             ret
                        
2BDF: 43       [ 4]     BYTSFT: ld      B,E             ; Shift partial product left
2BE0: 5A       [ 8]             ld      E,D
2BE1: 51       [12]             ld      D,C
2BE2: 4F       [16]             ld      C,A
2BE3: C9       [26]             ret
                        
                        
                        ; WORKING ââ
2BE4: C1       [10]     DINT:   pop     BC              ; Get number from stack
2BE5: D1       [20]             pop     DE
2BE6: CD432C   [37]             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
2BE9: C3C02D   [47]             jp      INT             ; return INT(FPREG)
                        
                        
                        ; A MODULO B - return remainder of the integer division A/B where:
                        ; A is in stack; B is in FPREG
                        ; math is:
                        ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
2BEC: CDC02D   [17]     MOD:    call    INT             ; B=INT(B)
2BEF: CD392D   [34]             call    BCDEFP          ; copy B (from FPREG) into BCDE
2BF2: ED53F381 [54]             ld      (TMPBFR3),DE    ; store B into...
2BF6: ED43F581 [74]             ld      (TMPBFR4),BC    ; ...a temp buffer
2BFA: C1       [84]             pop     BC              ; recover A...
2BFB: D1       [94]             pop     DE              ; ...from stack
2BFC: CD2E2D   [111]            call    FPBCDE          ; store A into FPREG
2BFF: CDC02D   [128]            call    INT             ; get integer part: A=INT(A)
2C02: CD392D   [145]            call    BCDEFP          ; copy A (from FPREG) into BCDE
2C05: ED53EF81 [165]            ld      (TMPBFR1),DE    ; store A into...
2C09: ED43F181 [185]            ld      (TMPBFR2),BC    ; ...a temp buffer
                                                        ; begin calculation
2C0D: 2AF381   [201]            ld      HL,(TMPBFR3)    ; move B...
2C10: 22C981   [217]            ld      (FPREG),HL      ; ...from...
2C13: 2AF581   [233]            ld      HL,(TMPBFR4)    ; ...temp buffer...
2C16: 22CB81   [249]            ld      (FPREG+2),HL    ; ...into FPREG
2C19: CD432C   [266]            call    DVBCDE          ; compute A/B and store into FPREG
2C1C: CDC02D   [283]            call    INT             ; get integer part of result: now FPREG = INT(A/B)
2C1F: ED5BF381 [303]            ld      DE,(TMPBFR3)    ; load B...
2C23: ED4BF581 [323]            ld      BC,(TMPBFR4)    ; ...into BCDE
2C27: CD912B   [340]            call    FPMULT          ; get B*INT(A/B) and store into FPREG
2C2A: ED5BEF81 [360]            ld      DE,(TMPBFR1)    ; retrieve A from...
2C2E: ED4BF181 [380]            ld      BC,(TMPBFR2)    ; ...temp buffer
2C32: C3532A   [390]            jp      SUBCDE          ; return result of A-(B*INT(A/B))
                        
                        
2C35: CD1E2D   [17]     DIV10:  call    STAKFP          ; Save FPREG on stack
2C38: 012084   [27]             ld      BC,$8420        ; BCDE = 10.
2C3B: 110000   [37]             ld      DE,$0000
2C3E: CD2E2D   [54]             call    FPBCDE          ; Move 10 to FPREG
                        
2C41: C1       [10]     DIV:    pop     BC              ; Get number from stack
2C42: D1       [20]             pop     DE
2C43: CDED2C   [17]     DVBCDE: call    TSTSGN          ; Test sign of FPREG
2C46: CA6815   [27|27]          jp      Z,DZERR         ; Error if division by zero
2C49: 2EFF     [34]             ld      L,-1            ; Flag subtract exponents
2C4B: CDAB2C   [51]             call    ADDEXP          ; Subtract exponents
2C4E: 34       [62]             inc     (HL)            ; Add 2 to exponent to adjust
2C4F: 34       [73]             inc     (HL)
2C50: 2B       [79]             dec     HL              ; Point to MSB
2C51: 7E       [86]             ld      A,(HL)          ; Get MSB of dividend
2C52: 327380   [99]             ld      (DIV3),A        ; Save for subtraction
2C55: 2B       [105]            dec     HL
2C56: 7E       [112]            ld      A,(HL)          ; Get NMSB of dividend
2C57: 326F80   [125]            ld      (DIV2),A        ; Save for subtraction
2C5A: 2B       [131]            dec     HL
2C5B: 7E       [138]            ld      A,(HL)          ; Get MSB of dividend
2C5C: 326B80   [151]            ld      (DIV1),A        ; Save for subtraction
2C5F: 41       [155]            ld      B,C             ; Get MSB
2C60: EB       [159]            ex      DE,HL           ; NMSB,LSB to HL
2C61: AF       [163]            xor     A
2C62: 4F       [167]            ld      C,A             ; Clear MSB of quotient
2C63: 57       [171]            ld      D,A             ; Clear NMSB of quotient
2C64: 5F       [175]            ld      E,A             ; Clear LSB of quotient
2C65: 327680   [188]            ld      (DIV4),A        ; Clear overflow count
2C68: E5       [11]     DIVLP:  push    HL              ; Save divisor
2C69: C5       [22]             push    BC
2C6A: 7D       [26]             ld      A,L             ; Get LSB of number
2C6B: CD6A80   [43]             call    DIVSUP          ; Subt' divisor from dividend
2C6E: DE00     [50]             sbc     A,$00           ; Count for overflows
2C70: 3F       [54]             ccf
2C71: D27B2C   [64|64]          jp      NC,RESDIV       ; Restore divisor if borrow
2C74: 327680   [77]             ld      (DIV4),A        ; Re-save overflow count
2C77: F1       [87]             pop     AF              ; Scrap divisor
2C78: F1       [97]             pop     AF
2C79: 37       [101]            scf                     ; Set carry to
2C7A: D2                        defb    $D2             ; Skip "pop BC" and "pop HL"
                        
2C7B: C1       [10]     RESDIV: pop     BC              ; Restore divisor
2C7C: E1       [20]             pop     HL
2C7D: 79       [24]             ld      A,C             ; Get MSB of quotient
2C7E: 3C       [28]             inc     A
2C7F: 3D       [32]             dec     A
2C80: 1F       [36]             rra                     ; Bit 0 to bit 7
2C81: FADD2A   [46|46]          jp      M,RONDB         ; Done - Normalise result
2C84: 17       [50]             rla                     ; Restore carry
2C85: 7B       [54]             ld      A,E             ; Get LSB of quotient
2C86: 17       [58]             rla                     ; Double it
2C87: 5F       [62]             ld      E,A             ; Put it back
2C88: 7A       [66]             ld      A,D             ; Get NMSB of quotient
2C89: 17       [70]             rla                     ; Double it
2C8A: 57       [74]             ld      D,A             ; Put it back
2C8B: 79       [78]             ld      A,C             ; Get MSB of quotient
2C8C: 17       [82]             rla                     ; Double it
2C8D: 4F       [86]             ld      C,A             ; Put it back
2C8E: 29       [97]             add     HL,HL           ; Double NMSB,LSB of divisor
2C8F: 78       [101]            ld      A,B             ; Get MSB of divisor
2C90: 17       [105]            rla                     ; Double it
2C91: 47       [109]            ld      B,A             ; Put it back
2C92: 3A7680   [122]            ld      A,(DIV4)        ; Get VLSB of quotient
2C95: 17       [126]            rla                     ; Double it
2C96: 327680   [139]            ld      (DIV4),A        ; Put it back
2C99: 79       [143]            ld      A,C             ; Get MSB of quotient
2C9A: B2       [147]            or      D               ; Merge NMSB
2C9B: B3       [151]            or      E               ; Merge LSB
2C9C: C2682C   [161|161]        jp      NZ,DIVLP        ; Not done - Keep dividing
2C9F: E5       [172]            push    HL              ; Save divisor
2CA0: 21CC81   [182]            ld      HL,FPEXP        ; Point to exponent
2CA3: 35       [193]            dec     (HL)            ; Divide by 2
2CA4: E1       [203]            pop     HL              ; Restore divisor
2CA5: C2682C   [213|213]        jp      NZ,DIVLP        ; Ok - Keep going
2CA8: C37415   [223]            jp      OVERR           ; Overflow error
                        
                        
2CAB: 78       [ 4]     ADDEXP: ld      A,B             ; Get exponent of dividend
2CAC: B7       [ 8]             or      A               ; Test it
2CAD: CACF2C   [18|18]          jp      Z,OVTST3        ; Zero - Result zero
2CB0: 7D       [22]             ld      A,L             ; Get add/subtract flag
2CB1: 21CC81   [32]             ld      HL,FPEXP        ; Point to exponent
2CB4: AE       [39]             xor     (HL)            ; Add or subtract it
2CB5: 80       [43]             add     A,B             ; Add the other exponent
2CB6: 47       [47]             ld      B,A             ; Save new exponent
2CB7: 1F       [51]             rra                     ; Test exponent for overflow
2CB8: A8       [55]             xor     B
2CB9: 78       [59]             ld      A,B             ; Get exponent
2CBA: F2CE2C   [69|69]          jp      P,OVTST2        ; Positive - Test for overflow
2CBD: C680     [76]             add     A,$80           ; Add excess 128
2CBF: 77       [83]             ld      (HL),A          ; Save new exponent
2CC0: CADD2B   [93|93]          jp      Z,POPHRT        ; Zero - Result zero
2CC3: CD532D   [110]            call    SIGNS           ; Set MSBs and sign of result
2CC6: 77       [117]            ld      (HL),A          ; Save new exponent
2CC7: 2B       [123]            dec     HL              ; Point to MSB
2CC8: C9       [133]            ret
                        
2CC9: CDED2C   [17]     OVTST1: call    TSTSGN          ; Test sign of FPREG
2CCC: 2F       [21]             cpl                     ; Invert sign
2CCD: E1       [31]             pop     HL              ; Clean up stack
2CCE: B7       [ 4]     OVTST2: or      A               ; Test if new exponent zero
2CCF: E1       [10]     OVTST3: pop     HL              ; Clear off return address
2CD0: F2BC2A   [20|20]          jp      P,RESZER        ; Result zero
2CD3: C37415   [30]             jp      OVERR           ; Overflow error
                        
2CD6: CD392D   [17]     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
2CD9: 78       [21]             ld      A,B             ; Get exponent
2CDA: B7       [25]             or      A               ; Is it zero?
2CDB: C8       [30|36]          ret     Z               ; Yes - Result is zero
2CDC: C602     [37]             add     A,$02           ; Multiply by 4
2CDE: DA7415   [47|47]          jp      C,OVERR         ; Overflow - ?OV Error
2CE1: 47       [51]             ld      B,A             ; Re-save exponent
2CE2: CD562A   [68]             call    FPADD           ; Add BCDE to FPREG (Times 5)
2CE5: 21CC81   [78]             ld      HL,FPEXP        ; Point to exponent
2CE8: 34       [89]             inc     (HL)            ; Double number (Times 10)
2CE9: C0       [94|100]         ret     NZ              ; Ok - Return
2CEA: C37415   [104]            jp      OVERR           ; Overflow error
                        
2CED: 3ACC81   [13]     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
2CF0: B7       [17]             or      A
2CF1: C8       [22|28]          ret     Z               ; RETurn if number is zero
2CF2: 3ACB81   [35]             ld      A,(FPREG+2)     ; Get MSB of FPREG
2CF5: FE                        defb    0FEH            ; Test sign
2CF6: 2F       [ 4]     RETREL: cpl                     ; Invert sign
2CF7: 17       [ 8]             rla                     ; Sign bit to carry
2CF8: 9F       [ 4]     FLGDIF: sbc     A,A             ; Carry to all bits of A
2CF9: C0       [ 9|15]          ret     NZ              ; Return -1 if negative
2CFA: 3C       [13]             inc     A               ; Bump to +1
2CFB: C9       [23]             ret                     ; Positive - Return +1
                        
2CFC: CDED2C   [17]     SGN:    call    TSTSGN          ; Test sign of FPREG
2CFF: 0688     [ 7]     FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
2D01: 110000   [17]             ld      DE,0            ; Zero NMSB and LSB
2D04: 21CC81   [10]     RETINT: ld      HL,FPEXP        ; Point to exponent
2D07: 4F       [14]             ld      C,A             ; CDE = MSB,NMSB and LSB
2D08: 70       [21]             ld      (HL),B          ; Save exponent
2D09: 0600     [28]             ld      B,0             ; CDE = integer to normalise
2D0B: 23       [34]             inc     HL              ; Point to sign of result
2D0C: 3680     [44]             ld      (HL),$80        ; Set sign of result
2D0E: 17       [48]             rla                     ; Carry = sign of integer
2D0F: C3A42A   [58]             jp      CONPOS          ; Set sign of result
                        
2D12: CDED2C   [17]     ABS:    call    TSTSGN          ; Test sign of FPREG
2D15: F0       [22|28]          ret     P               ; Return if positive
2D16: 21CB81   [10]     INVSGN: ld      HL,FPREG+2      ; Point to MSB
2D19: 7E       [17]             ld      A,(HL)          ; Get sign of mantissa
2D1A: EE80     [24]             xor     $80             ; Invert sign of mantissa
2D1C: 77       [31]             ld      (HL),A          ; Re-save sign of mantissa
2D1D: C9       [41]             ret
                        
2D1E: EB       [ 4]     STAKFP: ex      DE,HL           ; Save code string address
2D1F: 2AC981   [20]             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
2D22: E3       [39]             ex      (SP),HL         ; Stack them,get return
2D23: E5       [50]             push    HL              ; Re-save return
2D24: 2ACB81   [66]             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
2D27: E3       [85]             ex      (SP),HL         ; Stack them,get return
2D28: E5       [96]             push    HL              ; Re-save return
2D29: EB       [100]            ex      DE,HL           ; Restore code string address
2D2A: C9       [110]            ret
                        
                        ; store F.P. number from BCDE into FPREG
2D2B: CD3C2D   [17]     PHLTFP: call    LOADFP          ; Number at HL to BCDE
2D2E: EB       [ 4]     FPBCDE: ex      DE,HL           ; Save code string address
2D2F: 22C981   [20]             ld      (FPREG),HL      ; Save LSB,NLSB of number
2D32: 60       [24]             ld      H,B             ; Exponent of number
2D33: 69       [28]             ld      L,C             ; MSB of number
2D34: 22CB81   [44]             ld      (FPREG+2),HL    ; Save MSB and exponent
2D37: EB       [48]             ex      DE,HL           ; Restore code string address
2D38: C9       [58]             ret
                        
                        ; load F.P. number from FPREG into BCDE
2D39: 21C981   [10]     BCDEFP: ld      HL,FPREG        ; Point to FPREG
2D3C: 5E       [ 7]     LOADFP: ld      E,(HL)          ; Get LSB of number
2D3D: 23       [13]             inc     HL
2D3E: 56       [20]             ld      D,(HL)          ; Get NMSB of number
2D3F: 23       [26]             inc     HL
2D40: 4E       [33]             ld      C,(HL)          ; Get MSB of number
2D41: 23       [39]             inc     HL
2D42: 46       [46]             ld      B,(HL)          ; Get exponent of number
2D43: 23       [ 6]     INCHL:  inc     HL              ; Used for conditional "inc HL"
2D44: C9       [16]             ret
                        
2D45: 11C981   [10]     FPTHL:  ld      DE,FPREG        ; Point to FPREG
2D48: 0604     [ 7]     DETHL4: ld      B,$04           ; 4 bytes to move
2D4A: 1A       [ 7]     DETHLB: ld      A,(DE)          ; Get source
2D4B: 77       [14]             ld      (HL),A          ; Save destination
2D4C: 13       [20]             inc     DE              ; Next source
2D4D: 23       [26]             inc     HL              ; Next destination
2D4E: 05       [30]             dec     B               ; Count bytes
2D4F: C24A2D   [40|40]          jp      NZ,DETHLB       ; Loop if more
2D52: C9       [50]             ret
                        
2D53: 21CB81   [10]     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
2D56: 7E       [17]             ld      A,(HL)          ; Get MSB
2D57: 07       [21]             rlca                    ; Old sign to carry
2D58: 37       [25]             scf                     ; Set MSBit
2D59: 1F       [29]             rra                     ; Set MSBit of MSB
2D5A: 77       [36]             ld      (HL),A          ; Save new MSB
2D5B: 3F       [40]             ccf                     ; Complement sign
2D5C: 1F       [44]             rra                     ; Old sign to carry
2D5D: 23       [50]             inc     HL
2D5E: 23       [56]             inc     HL
2D5F: 77       [63]             ld      (HL),A          ; Set sign of result
2D60: 79       [67]             ld      A,C             ; Get MSB
2D61: 07       [71]             rlca                    ; Old sign to carry
2D62: 37       [75]             scf                     ; Set MSBit
2D63: 1F       [79]             rra                     ; Set MSBit of MSB
2D64: 4F       [83]             ld      C,A             ; Save MSB
2D65: 1F       [87]             rra
2D66: AE       [94]             xor     (HL)            ; New sign of result
2D67: C9       [104]            ret
                        
2D68: 78       [ 4]     CMPNUM: ld      A,B             ; Get exponent of number
2D69: B7       [ 8]             or      A
2D6A: CAED2C   [18|18]          jp      Z,TSTSGN        ; Zero - Test sign of FPREG
2D6D: 21F62C   [28]             ld      HL,RETREL       ; Return relation routine
2D70: E5       [39]             push    HL              ; Save for return
2D71: CDED2C   [56]             call    TSTSGN          ; Test sign of FPREG
2D74: 79       [60]             ld      A,C             ; Get MSB of number
2D75: C8       [65|71]          ret     Z               ; FPREG zero - Number's MSB
2D76: 21CB81   [75]             ld      HL,FPREG+2      ; MSB of FPREG
2D79: AE       [82]             xor     (HL)            ; Combine signs
2D7A: 79       [86]             ld      A,C             ; Get MSB of number
2D7B: F8       [91|97]          ret     M               ; Exit if signs different
2D7C: CD822D   [108]            call    CMPFP           ; Compare FP numbers
2D7F: 1F       [112]            rra                     ; Get carry to sign
2D80: A9       [116]            xor     C               ; Combine with MSB of number
2D81: C9       [126]            ret
                        
2D82: 23       [ 6]     CMPFP:  inc     HL              ; Point to exponent
2D83: 78       [10]             ld      A,B             ; Get exponent
2D84: BE       [17]             cp      (HL)            ; Compare exponents
2D85: C0       [22|28]          ret     NZ              ; Different
2D86: 2B       [28]             dec     HL              ; Point to MBS
2D87: 79       [32]             ld      A,C             ; Get MSB
2D88: BE       [39]             cp      (HL)            ; Compare MSBs
2D89: C0       [44|50]          ret     NZ              ; Different
2D8A: 2B       [50]             dec     HL              ; Point to NMSB
2D8B: 7A       [54]             ld      A,D             ; Get NMSB
2D8C: BE       [61]             cp      (HL)            ; Compare NMSBs
2D8D: C0       [66|72]          ret     NZ              ; Different
2D8E: 2B       [72]             dec     HL              ; Point to LSB
2D8F: 7B       [76]             ld      A,E             ; Get LSB
2D90: 96       [83]             sub     (HL)            ; Compare LSBs
2D91: C0       [88|94]          ret     NZ              ; Different
2D92: E1       [98]             pop     HL              ; Drop RETurn
2D93: E1       [108]            pop     HL              ; Drop another RETurn
2D94: C9       [118]            ret
                        
2D95: 47       [ 4]     FPINT:  ld      B,A             ; <- Move
2D96: 4F       [ 8]             ld      C,A             ; <- exponent
2D97: 57       [12]             ld      D,A             ; <- to all
2D98: 5F       [16]             ld      E,A             ; <- bits
2D99: B7       [20]             or      A               ; Test exponent
2D9A: C8       [25|31]          ret     Z               ; Zero - Return zero
2D9B: E5       [36]             push    HL              ; Save pointer to number
2D9C: CD392D   [53]             call    BCDEFP          ; Move FPREG to BCDE
2D9F: CD532D   [70]             call    SIGNS           ; Set MSBs & sign of result
2DA2: AE       [77]             xor     (HL)            ; Combine with sign of FPREG
2DA3: 67       [81]             ld      H,A             ; Save combined signs
2DA4: FCB92D   [91|98]          call    M,DCBCDE        ; Negative - Decrement BCDE
2DA7: 3E98     [98]             ld      A,$80+24        ; 24 bits
2DA9: 90       [102]            sub     B               ; Bits to shift
2DAA: CD1B2B   [119]            call    SCALE           ; Shift BCDE
2DAD: 7C       [123]            ld      A,H             ; Get combined sign
2DAE: 17       [127]            rla                     ; Sign to carry
2DAF: DCEE2A   [137|144]        call    C,FPROND        ; Negative - Round number up
2DB2: 0600     [144]            ld      B,$00           ; Zero exponent
2DB4: DC072B   [154|161]        call    C,COMPL         ; If negative make positive
2DB7: E1       [164]            pop     HL              ; Restore pointer to number
2DB8: C9       [174]            ret
                        
2DB9: 1B       [ 6]     DCBCDE: dec     DE              ; Decrement BCDE
2DBA: 7A       [10]             ld      A,D             ; Test LSBs
2DBB: A3       [14]             and     E
2DBC: 3C       [18]             inc     A
2DBD: C0       [23|29]          ret     NZ              ; Exit if LSBs not FFFF
2DBE: 0B       [29]             dec     BC              ; Decrement MSBs
2DBF: C9       [39]             ret
                        
2DC0: 21CC81   [10]     INT:    ld      HL,FPEXP        ; Point to exponent
2DC3: 7E       [17]             ld      A,(HL)          ; Get exponent
2DC4: FE98     [24]             cp      $80+24          ; Integer accuracy only?
2DC6: 3AC981   [37]             ld      A,(FPREG)       ; Get LSB
2DC9: D0       [42|48]          ret     NC              ; Yes - Already integer
2DCA: 7E       [49]             ld      A,(HL)          ; Get exponent
2DCB: CD952D   [66]             call    FPINT           ; F.P to integer
2DCE: 3698     [76]             ld      (HL),$80+24     ; Save 24 bit integer
2DD0: 7B       [80]             ld      A,E             ; Get LSB of number
2DD1: F5       [91]             push    AF              ; Save LSB
2DD2: 79       [95]             ld      A,C             ; Get MSB of number
2DD3: 17       [99]             rla                     ; Sign to carry
2DD4: CDA42A   [116]            call    CONPOS          ; Set sign of result
2DD7: F1       [126]            pop     AF              ; Restore LSB of number
2DD8: C9       [136]            ret
                        
2DD9: 210000   [10]     MLDEBC: ld      HL,$0000        ; Clear partial product
2DDC: 78       [14]             ld      A,B             ; Test multiplier
2DDD: B1       [18]             or      C
2DDE: C8       [23|29]          ret     Z               ; Return zero if zero
2DDF: 3E10     [30]             ld      A,$10           ; 16 bits
2DE1: 29       [11]     MLDBLP: add     HL,HL           ; Shift P.P left
2DE2: DA0622   [21|21]          jp      C,BSERR         ; ?BS Error if overflow
2DE5: EB       [25]             ex      DE,HL
2DE6: 29       [36]             add     HL,HL           ; Shift multiplier left
2DE7: EB       [40]             ex      DE,HL
2DE8: D2EF2D   [50|50]          jp      NC,NOMLAD       ; Bit was zero - No add
2DEB: 09       [61]             add     HL,BC           ; Add multiplicand
2DEC: DA0622   [71|71]          jp      C,BSERR         ; ?BS Error if overflow
2DEF: 3D       [ 4]     NOMLAD: dec     A               ; Count bits
2DF0: C2E12D   [14|14]          jp      NZ,MLDBLP       ; More
2DF3: C9       [24]             ret
                        
2DF4: FE2D     [ 7]     ASCTFP: cp      '-'             ; Negative?
2DF6: F5       [18]             push    AF              ; Save it and flags
2DF7: CA002E   [28|28]          jp      Z,CNVNUM        ; Yes - Convert number
2DFA: FE2B     [35]             cp      '+'             ; Positive?
2DFC: CA002E   [45|45]          jp      Z,CNVNUM        ; Yes - Convert number
2DFF: 2B       [51]             dec     HL              ; dec 'cos GETCHR INCs
2E00: CDBC2A   [17]     CNVNUM: call    RESZER          ; Set result to zero
2E03: 47       [21]             ld      B,A             ; Digits after point counter
2E04: 57       [25]             ld      D,A             ; Sign of exponent
2E05: 5F       [29]             ld      E,A             ; Exponent of ten
2E06: 2F       [33]             cpl
2E07: 4F       [37]             ld      C,A             ; Before or after point flag
2E08: CD6A1A   [17]     MANLP:  call    GETCHR          ; Get next character
2E0B: DA512E   [27|27]          jp      C,ADDIG         ; Digit - Add to number
2E0E: FE2E     [34]             cp      '.'
2E10: CA2C2E   [44|44]          jp      Z,DPOINT        ; '.' - Flag point
2E13: FE45     [51]             cp      'E'
2E15: C2302E   [61|61]          jp      NZ,CONEXP       ; Not 'E' - Scale number
2E18: CD6A1A   [78]             call    GETCHR          ; Get next character
2E1B: CD2220   [95]             call    SGNEXP          ; Get sign of exponent
2E1E: CD6A1A   [17]     EXPLP:  call    GETCHR          ; Get next character
2E21: DA732E   [27|27]          jp      C,EDIGIT        ; Digit - Add to exponent
2E24: 14       [31]             inc     D               ; Is sign negative?
2E25: C2302E   [41|41]          jp      NZ,CONEXP       ; No - Scale number
2E28: AF       [45]             xor     A
2E29: 93       [49]             sub     E               ; Negate exponent
2E2A: 5F       [53]             ld      E,A             ; And re-save it
2E2B: 0C       [57]             inc     C               ; Flag end of number
2E2C: 0C       [ 4]     DPOINT: inc     C               ; Flag point passed
2E2D: CA082E   [14|14]          jp      Z,MANLP         ; Zero - Get another digit
2E30: E5       [11]     CONEXP: push    HL              ; Save code string address
2E31: 7B       [15]             ld      A,E             ; Get exponent
2E32: 90       [19]             sub     B               ; Subtract digits after point
2E33: F4492E   [10|17]  SCALMI: call    P,SCALPL        ; Positive - Multiply number
2E36: F23F2E   [20|20]          jp      P,ENDCON        ; Positive - All done
2E39: F5       [31]             push    AF              ; Save number of times to /10
2E3A: CD352C   [48]             call    DIV10           ; Divide by 10
2E3D: F1       [58]             pop     AF              ; Restore count
2E3E: 3C       [62]             inc     A               ; Count divides
                        
2E3F: C2332E   [10|10]  ENDCON: jp      NZ,SCALMI       ; More to do
2E42: D1       [20]             pop     DE              ; Restore code string address
2E43: F1       [30]             pop     AF              ; Restore sign of number
2E44: CC162D   [40|47]          call    Z,INVSGN        ; Negative - Negate number
2E47: EB       [44]             ex      DE,HL           ; Code string address to HL
2E48: C9       [54]             ret
                        
2E49: C8       [ 5|11]  SCALPL: ret     Z               ; Exit if no scaling needed
2E4A: F5       [11]     MULTEN: push    AF              ; Save count
2E4B: CDD62C   [28]             call    MLSP10          ; Multiply number by 10
2E4E: F1       [38]             pop     AF              ; Restore count
2E4F: 3D       [42]             dec     A               ; Count multiplies
2E50: C9       [52]             ret
                        
2E51: D5       [11]     ADDIG:  push    DE              ; Save sign of exponent
2E52: 57       [15]             ld      D,A             ; Save digit
2E53: 78       [19]             ld      A,B             ; Get digits after point
2E54: 89       [23]             adc     A,C             ; Add one if after point
2E55: 47       [27]             ld      B,A             ; Re-save counter
2E56: C5       [38]             push    BC              ; Save point flags
2E57: E5       [49]             push    HL              ; Save code string address
2E58: D5       [60]             push    DE              ; Save digit
2E59: CDD62C   [77]             call    MLSP10          ; Multiply number by 10
2E5C: F1       [87]             pop     AF              ; Restore digit
2E5D: D630     [94]             sub     '0'             ; Make it absolute
2E5F: CD682E   [111]            call    RSCALE          ; Re-scale number
2E62: E1       [121]            pop     HL              ; Restore code string address
2E63: C1       [131]            pop     BC              ; Restore point flags
2E64: D1       [141]            pop     DE              ; Restore sign of exponent
2E65: C3082E   [151]            jp      MANLP           ; Get another digit
                        
2E68: CD1E2D   [17]     RSCALE: call    STAKFP          ; Put number on stack
2E6B: CDFF2C   [34]             call    FLGREL          ; Digit to add to FPREG
2E6E: C1       [10]     PADD:   pop     BC              ; Restore number
2E6F: D1       [20]             pop     DE
2E70: C3562A   [30]             jp      FPADD           ; Add BCDE to FPREG and return
                        
2E73: 7B       [ 4]     EDIGIT: ld      A,E             ; Get digit
2E74: 07       [ 8]             rlca                    ; Times 2
2E75: 07       [12]             rlca                    ; Times 4
2E76: 83       [16]             add     A,E             ; Times 5
2E77: 07       [20]             rlca                    ; Times 10
2E78: 86       [27]             add     A,(HL)          ; Add next digit
2E79: D630     [34]             sub     '0'             ; Make it absolute
2E7B: 5F       [38]             ld      E,A             ; Save new digit
2E7C: C31E2E   [48]             jp      EXPLP           ; Look for another digit
                        
2E7F: E5       [11]     LINEIN: push    HL              ; Save code string address
2E80: 21DE14   [21]             ld      HL,INMSG        ; Output " in "
2E83: CDE723   [38]             call    PRS             ; Output string at HL
2E86: E1       [48]             pop     HL              ; Restore code string address
2E87: EB       [ 4]     PRNTHL: ex      DE,HL           ; Code string address to DE
2E88: AF       [ 8]             xor     A
2E89: 0698     [15]             ld      B,$80+24        ; 24 bits
2E8B: CD042D   [32]             call    RETINT          ; Return the integer
2E8E: 21E623   [42]             ld      HL,PRNUMS       ; Print number string
2E91: E5       [53]             push    HL              ; Save for return
2E92: 213082   [10]     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
2E95: E5       [21]             push    HL              ; Save for return
2E96: CDED2C   [38]             call    TSTSGN          ; Test sign of FPREG
2E99: 3620     [48]             ld      (HL),SPC        ; Space at start
2E9B: F2A02E   [58|58]          jp      P,SPCFST        ; Positive - Space to start
2E9E: 362D     [68]             ld      (HL),'-'        ; '-' sign at start
2EA0: 23       [ 6]     SPCFST: inc     HL              ; First byte of number
2EA1: 3630     [16]             ld      (HL),'0'        ; '0' if zero
2EA3: CA562F   [26|26]          jp      Z,JSTZER        ; Return '0' if zero
2EA6: E5       [37]             push    HL              ; Save buffer address
2EA7: FC162D   [47|54]          call    M,INVSGN        ; Negate FPREG if negative
2EAA: AF       [51]             xor     A               ; Zero A
2EAB: F5       [62]             push    AF              ; Save it
2EAC: CD5C2F   [79]             call    RNGTST          ; Test number is in range
2EAF: 014391   [10]     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
2EB2: 11F84F   [20]             ld      DE,$4FF8
2EB5: CD682D   [37]             call    CMPNUM          ; Compare numbers
2EB8: B7       [41]             or      A
2EB9: E2CD2E   [51|51]          jp      PO,INRNG        ; > 99999.9 - Sort it out
2EBC: F1       [61]             pop     AF              ; Restore count
2EBD: CD4A2E   [78]             call    MULTEN          ; Multiply by ten
2EC0: F5       [89]             push    AF              ; Re-save count
2EC1: C3AF2E   [99]             jp      SIXDIG          ; Test it again
                        
2EC4: CD352C   [17]     GTSIXD: call    DIV10           ; Divide by 10
2EC7: F1       [27]             pop     AF              ; Get count
2EC8: 3C       [31]             inc     A               ; Count divides
2EC9: F5       [42]             push    AF              ; Re-save count
2ECA: CD5C2F   [59]             call    RNGTST          ; Test number is in range
2ECD: CD442A   [17]     INRNG:  call    ROUND           ; Add 0.5 to FPREG
2ED0: 3C       [21]             inc     A
2ED1: CD952D   [38]             call    FPINT           ; F.P to integer
2ED4: CD2E2D   [55]             call    FPBCDE          ; Move BCDE to FPREG
2ED7: 010603   [65]             ld      BC,$0306        ; 1E+06 to 1E-03 range
2EDA: F1       [75]             pop     AF              ; Restore count
2EDB: 81       [79]             add     A,C             ; 6 digits before point
2EDC: 3C       [83]             inc     A               ; Add one
2EDD: FAE92E   [93|93]          jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
2EE0: FE08     [100]            cp      6+1+1           ; More than 999999 ?
2EE2: D2E92E   [110|110]        jp      NC,MAKNUM       ; Yes - Do it in 'E' form
2EE5: 3C       [114]            inc     A               ; Adjust for exponent
2EE6: 47       [118]            ld      B,A             ; Exponent of number
2EE7: 3E02     [125]            ld      A,2             ; Make it zero after
                        
2EE9: 3D       [ 4]     MAKNUM: dec     A               ; Adjust for digits to do
2EEA: 3D       [ 8]             dec     A
2EEB: E1       [18]             pop     HL              ; Restore buffer address
2EEC: F5       [29]             push    AF              ; Save count
2EED: 116F2F   [39]             ld      DE,POWERS       ; Powers of ten
2EF0: 05       [43]             dec     B               ; Count digits before point
2EF1: C2FA2E   [53|53]          jp      NZ,DIGTXT       ; Not zero - Do number
2EF4: 362E     [63]             ld      (HL),'.'        ; Save point
2EF6: 23       [69]             inc     HL              ; Move on
2EF7: 3630     [79]             ld      (HL),'0'        ; Save zero
2EF9: 23       [85]             inc     HL              ; Move on
2EFA: 05       [ 4]     DIGTXT: dec     B               ; Count digits before point
2EFB: 362E     [14]             ld      (HL),'.'        ; Save point in case
2EFD: CC432D   [24|31]          call    Z,INCHL         ; Last digit - move on
2F00: C5       [35]             push    BC              ; Save digits before point
2F01: E5       [46]             push    HL              ; Save buffer address
2F02: D5       [57]             push    DE              ; Save powers of ten
2F03: CD392D   [74]             call    BCDEFP          ; Move FPREG to BCDE
2F06: E1       [84]             pop     HL              ; Powers of ten table
2F07: 062F     [91]             ld      B,'0'-1         ; ASCII '0' - 1
2F09: 04       [ 4]     TRYAGN: inc     B               ; Count subtractions
2F0A: 7B       [ 8]             ld      A,E             ; Get LSB
2F0B: 96       [15]             sub     (HL)            ; Subtract LSB
2F0C: 5F       [19]             ld      E,A             ; Save LSB
2F0D: 23       [25]             inc     HL
2F0E: 7A       [29]             ld      A,D             ; Get NMSB
2F0F: 9E       [36]             sbc     A,(HL)          ; Subtract NMSB
2F10: 57       [40]             ld      D,A             ; Save NMSB
2F11: 23       [46]             inc     HL
2F12: 79       [50]             ld      A,C             ; Get MSB
2F13: 9E       [57]             sbc     A,(HL)          ; Subtract MSB
2F14: 4F       [61]             ld      C,A             ; Save MSB
2F15: 2B       [67]             dec     HL              ; Point back to start
2F16: 2B       [73]             dec     HL
2F17: D2092F   [83|83]          jp      NC,TRYAGN       ; No overflow - Try again
2F1A: CDFB2A   [100]            call    PLUCDE          ; Restore number
2F1D: 23       [106]            inc     HL              ; Start of next number
2F1E: CD2E2D   [123]            call    FPBCDE          ; Move BCDE to FPREG
2F21: EB       [127]            ex      DE,HL           ; Save point in table
2F22: E1       [137]            pop     HL              ; Restore buffer address
2F23: 70       [144]            ld      (HL),B          ; Save digit in buffer
2F24: 23       [150]            inc     HL              ; And move on
2F25: C1       [160]            pop     BC              ; Restore digit count
2F26: 0D       [164]            dec     C               ; Count digits
2F27: C2FA2E   [174|174]        jp      NZ,DIGTXT       ; More - Do them
2F2A: 05       [178]            dec     B               ; Any decimal part?
2F2B: CA3A2F   [188|188]        jp      Z,DOEBIT        ; No - Do 'E' bit
2F2E: 2B       [ 6]     SUPTLZ: dec     HL              ; Move back through buffer
2F2F: 7E       [13]             ld      A,(HL)          ; Get character
2F30: FE30     [20]             cp      '0'             ; '0' character?
2F32: CA2E2F   [30|30]          jp      Z,SUPTLZ        ; Yes - Look back for more
2F35: FE2E     [37]             cp      '.'             ; A decimal point?
2F37: C4432D   [47|54]          call    NZ,INCHL        ; Move back over digit
                        
2F3A: F1       [10]     DOEBIT: pop     AF              ; Get 'E' flag
2F3B: CA592F   [20|20]          jp      Z,NOENED        ; No 'E' needed - End buffer
2F3E: 3645     [30]             ld      (HL),'E'        ; Put 'E' in buffer
2F40: 23       [36]             inc     HL              ; And move on
2F41: 362B     [46]             ld      (HL),'+'        ; Put '+' in buffer
2F43: F24A2F   [56|56]          jp      P,OUTEXP        ; Positive - Output exponent
2F46: 362D     [66]             ld      (HL),'-'        ; Put '-' in buffer
2F48: 2F       [70]             cpl                     ; Negate exponent
2F49: 3C       [74]             inc     A
2F4A: 062F     [ 7]     OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
2F4C: 04       [ 4]     EXPTEN: inc     B               ; Count subtractions
2F4D: D60A     [11]             sub     $0A             ; Tens digit
2F4F: D24C2F   [21|21]          jp      NC,EXPTEN       ; More to do
2F52: C63A     [28]             add     A,'0'+10        ; Restore and make ASCII
2F54: 23       [34]             inc     HL              ; Move on
2F55: 70       [41]             ld      (HL),B          ; Save MSB of exponent
2F56: 23       [ 6]     JSTZER: inc     HL              ;
2F57: 77       [13]             ld      (HL),A          ; Save LSB of exponent
2F58: 23       [19]             inc     HL
2F59: 71       [ 7]     NOENED: ld      (HL),C          ; Mark end of buffer
2F5A: E1       [17]             pop     HL              ; Restore code string address
2F5B: C9       [27]             ret
                        
2F5C: 017494   [10]     RNGTST: ld      BC,$9474        ; BCDE = 999999.
2F5F: 11F723   [20]             ld      DE,$23F7
2F62: CD682D   [37]             call    CMPNUM          ; Compare numbers
2F65: B7       [41]             or      A
2F66: E1       [51]             pop     HL              ; Return address to HL
2F67: E2C42E   [61|61]          jp      PO,GTSIXD       ; Too big - Divide by ten
2F6A: E9       [65]             jp      (HL)            ; Otherwise return to caller
                        
2F6B: 00000080          HALF:   defb    $00,$00,$00,$80 ; 0.5
                        
2F6F: A08601            POWERS: defb    $A0,$86,$01  ; 100000
2F72: 102700                    defb    $10,$27,$00  ;  10000
2F75: E80300                    defb    $E8,$03,$00  ;   1000
2F78: 640000                    defb    $64,$00,$00  ;    100
2F7B: 0A0000                    defb    $0A,$00,$00  ;     10
2F7E: 010000                    defb    $01,$00,$00  ;      1
                        
2F81: 21162D   [10]     NEGAFT: ld      HL,INVSGN       ; Negate result
2F84: E3       [29]             ex      (SP),HL         ; To be done after caller
2F85: E9       [33]             jp      (HL)            ; Return to caller
                        
2F86: CD1E2D   [17]     SQR:    call    STAKFP          ; Put value on stack
2F89: 216B2F   [27]             ld      HL,HALF         ; Set power to 1/2
2F8C: CD2B2D   [44]             call    PHLTFP          ; Move 1/2 to FPREG
                        
2F8F: C1       [10]     POWER:  pop     BC              ; Get base
2F90: D1       [20]             pop     DE
2F91: CDED2C   [37]             call    TSTSGN          ; Test sign of power
2F94: 78       [41]             ld      A,B             ; Get exponent of base
2F95: CAD42F   [51|51]          jp      Z,EXP           ; Make result 1 if zero
2F98: F29F2F   [61|61]          jp      P,POWER1        ; Positive base - Ok
2F9B: B7       [65]             or      A               ; Zero to negative power?
2F9C: CA6815   [75|75]          jp      Z,DZERR         ; Yes - ?/0 Error
2F9F: B7       [ 4]     POWER1: or      A               ; Base zero?
2FA0: CABD2A   [14|14]          jp      Z,SAVEXP        ; Yes - Return zero
2FA3: D5       [25]             push    DE              ; Save base
2FA4: C5       [36]             push    BC
2FA5: 79       [40]             ld      A,C             ; Get MSB of base
2FA6: F67F     [47]             or      %01111111       ; Get sign status
2FA8: CD392D   [64]             call    BCDEFP          ; Move power to BCDE
2FAB: F2BC2F   [74|74]          jp      P,POWER2        ; Positive base - Ok
2FAE: D5       [85]             push    DE              ; Save power
2FAF: C5       [96]             push    BC
2FB0: CDC02D   [113]            call    INT             ; Get integer of power
2FB3: C1       [123]            pop     BC              ; Restore power
2FB4: D1       [133]            pop     DE
2FB5: F5       [144]            push    AF              ; MSB of base
2FB6: CD682D   [161]            call    CMPNUM          ; Power an integer?
2FB9: E1       [171]            pop     HL              ; Restore MSB of base
2FBA: 7C       [175]            ld      A,H             ; but don't affect flags
2FBB: 1F       [179]            rra                     ; Exponent odd or even?
2FBC: E1       [10]     POWER2: pop     HL              ; Restore MSB and exponent
2FBD: 22CB81   [26]             ld      (FPREG+2),HL    ; Save base in FPREG
2FC0: E1       [36]             pop     HL              ; LSBs of base
2FC1: 22C981   [52]             ld      (FPREG),HL      ; Save in FPREG
2FC4: DC812F   [62|69]          call    C,NEGAFT        ; Odd power - Negate result
2FC7: CC162D   [72|79]          call    Z,INVSGN        ; Negative base - Negate it
2FCA: D5       [83]             push    DE              ; Save power
2FCB: C5       [94]             push    BC
2FCC: CD502B   [111]            call    LOG             ; Get LOG of base
2FCF: C1       [121]            pop     BC              ; Restore power
2FD0: D1       [131]            pop     DE
2FD1: CD912B   [148]            call    FPMULT          ; Multiply LOG by power
                        
2FD4: CD1E2D   [17]     EXP:    call    STAKFP          ; Put value on stack
2FD7: 013881   [27]             ld      BC,$8138        ; BCDE = 1/Ln(2)
2FDA: 113BAA   [37]             ld      DE,$AA3B
2FDD: CD912B   [54]             call    FPMULT          ; Multiply value by 1/LN(2)
2FE0: 3ACC81   [67]             ld      A,(FPEXP)       ; Get exponent
2FE3: FE88     [74]             cp      $80+8           ; Is it in range?
2FE5: D2C92C   [84|84]          jp      NC,OVTST1       ; No - Test for overflow
2FE8: CDC02D   [101]            call    INT             ; Get INT of FPREG
2FEB: C680     [108]            add     A,$80           ; For excess 128
2FED: C602     [115]            add     A,$02           ; Exponent > 126?
2FEF: DAC92C   [125|125]        jp      C,OVTST1        ; Yes - Test for overflow
2FF2: F5       [136]            push    AF              ; Save scaling factor
2FF3: 213F2B   [146]            ld      HL,UNITY        ; Point to 1.
2FF6: CD472A   [163]            call    ADDPHL          ; Add 1 to FPREG
2FF9: CD882B   [180]            call    MULLN2          ; Multiply by LN(2)
2FFC: F1       [190]            pop     AF              ; Restore scaling factor
2FFD: C1       [200]            pop     BC              ; Restore exponent
2FFE: D1       [210]            pop     DE
2FFF: F5       [221]            push    AF              ; Save scaling factor
3000: CD532A   [238]            call    SUBCDE          ; Subtract exponent from FPREG
3003: CD162D   [255]            call    INVSGN          ; Negate result
3006: 211430   [265]            ld      HL,EXPTAB       ; Coefficient table
3009: CD4430   [282]            call    SMSER1          ; Sum the series
300C: 110000   [292]            ld      DE,$0000        ; Zero LSBs
300F: C1       [302]            pop     BC              ; Scaling factor
3010: 4A       [306]            ld      C,D             ; Zero MSB
3011: C3912B   [316]            jp      FPMULT          ; Scale result to correct value
                        
3014: 08                EXPTAB: defb    $08             ; Table used by EXP
3015: 402E9474                  defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
3019: 704F2E77                  defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
301D: 6E02887A                  defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
3021: E6A02A7C                  defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
3025: 50AAAA7E                  defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
3029: FFFF7F7F                  defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
302D: 00008081                  defb    $00,$00,$80,$81 ; -1/1! (-1/1)
3031: 00000081                  defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
                        
3035: CD1E2D   [17]     SUMSER: call    STAKFP          ; Put FPREG on stack
3038: 118F2B   [27]             ld      DE,MULT         ; Multiply by "X"
303B: D5       [38]             push    DE              ; To be done after
303C: E5       [49]             push    HL              ; Save address of table
303D: CD392D   [66]             call    BCDEFP          ; Move FPREG to BCDE
3040: CD912B   [83]             call    FPMULT          ; Square the value
3043: E1       [93]             pop     HL              ; Restore address of table
3044: CD1E2D   [17]     SMSER1: call    STAKFP          ; Put value on stack
3047: 7E       [24]             ld      A,(HL)          ; Get number of coefficients
3048: 23       [30]             inc     HL              ; Point to start of table
3049: CD2B2D   [47]             call    PHLTFP          ; Move coefficient to FPREG
304C: 06                        defb    06H             ; Skip "pop AF"
304D: F1       [10]     SUMLP:  pop     AF              ; Restore count
304E: C1       [20]             pop     BC              ; Restore number
304F: D1       [30]             pop     DE
3050: 3D       [34]             dec     A               ; Cont coefficients
3051: C8       [39|45]          ret     Z               ; All done
3052: D5       [50]             push    DE              ; Save number
3053: C5       [61]             push    BC
3054: F5       [72]             push    AF              ; Save count
3055: E5       [83]             push    HL              ; Save address in table
3056: CD912B   [100]            call    FPMULT          ; Multiply FPREG by BCDE
3059: E1       [110]            pop     HL              ; Restore address in table
305A: CD3C2D   [127]            call    LOADFP          ; Number at HL to BCDE
305D: E5       [138]            push    HL              ; Save address in table
305E: CD562A   [155]            call    FPADD           ; Add coefficient to FPREG
3061: E1       [165]            pop     HL              ; Restore address in table
3062: C34D30   [175]            jp      SUMLP           ; More coefficients
                        
3065: CDED2C   [17]     RND:    call    TSTSGN          ; Test sign of FPREG
3068: 217A80   [27]             ld      HL,SEED+2       ; Random number seed
306B: FAC630   [37|37]          jp      M,RESEED        ; Negative - Re-seed
306E: 219B80   [47]             ld      HL,LSTRND       ; Last random number
3071: CD2B2D   [64]             call    PHLTFP          ; Move last RND to FPREG
3074: 217A80   [74]             ld      HL,SEED+2       ; Random number seed
3077: C8       [79|85]          ret     Z               ; Return if RND(0)
3078: 86       [86]             add     A,(HL)          ; Add (SEED)+2)
3079: E607     [93]             and     %00000111       ; 0 to 7
307B: 0600     [100]            ld      B,$00
307D: 77       [107]            ld      (HL),A          ; Re-save seed
307E: 23       [113]            inc     HL              ; Move to coefficient table
307F: 87       [117]            add     A,A             ; 4 bytes
3080: 87       [121]            add     A,A             ; per entry
3081: 4F       [125]            ld      C,A             ; BC = Offset into table
3082: 09       [136]            add     HL,BC           ; Point to coefficient
3083: CD3C2D   [153]            call    LOADFP          ; Coefficient to BCDE
3086: CD912B   [170]            call    FPMULT  ;       ; Multiply FPREG by coefficient
3089: 3A7980   [183]            ld      A,(SEED+1)      ; Get (SEED+1)
308C: 3C       [187]            inc     A               ; Add 1
308D: E603     [194]            and     %00000011       ; 0 to 3
308F: 0600     [201]            ld      B,$00
3091: FE01     [208]            cp      $01             ; Is it zero?
3093: 88       [212]            adc     A,B             ; Yes - Make it 1
3094: 327980   [225]            ld      (SEED+1),A      ; Re-save seed
3097: 21CA30   [235]            ld      HL,RNDTAB-4     ; Addition table
309A: 87       [239]            add     A,A             ; 4 bytes
309B: 87       [243]            add     A,A             ; per entry
309C: 4F       [247]            ld      C,A             ; BC = Offset into table
309D: 09       [258]            add     HL,BC           ; Point to value
309E: CD472A   [275]            call    ADDPHL          ; Add value to FPREG
30A1: CD392D   [17]     RND1:   call    BCDEFP          ; Move FPREG to BCDE
30A4: 7B       [21]             ld      A,E             ; Get LSB
30A5: 59       [25]             ld      E,C             ; LSB = MSB
30A6: EE4F     [32]             xor     %01001111       ; Fiddle around
30A8: 4F       [36]             ld      C,A             ; New MSB
30A9: 3680     [46]             ld      (HL),$80        ; Set exponent
30AB: 2B       [52]             dec     HL              ; Point to MSB
30AC: 46       [59]             ld      B,(HL)          ; Get MSB
30AD: 3680     [69]             ld      (HL),$80        ; Make value -0.5
30AF: 217880   [79]             ld      HL,SEED         ; Random number seed
30B2: 34       [90]             inc     (HL)            ; Count seed
30B3: 7E       [97]             ld      A,(HL)          ; Get seed
30B4: D6AB     [104]            sub     $AB             ; Do it modulo 171
30B6: C2BD30   [114|114]        jp      NZ,RND2         ; Non-zero - Ok
30B9: 77       [121]            ld      (HL),A          ; Zero seed
30BA: 0C       [125]            inc     C               ; Fillde about
30BB: 15       [129]            dec     D               ; with the
30BC: 1C       [133]            inc     E               ; number
30BD: CDA72A   [17]     RND2:   call    BNORM           ; Normalise number
30C0: 219B80   [27]             ld      HL,LSTRND       ; Save random number
30C3: C3452D   [37]             jp      FPTHL           ; Move FPREG to last and return
                        
30C6: 77       [ 7]     RESEED: ld      (HL),A          ; Re-seed random numbers
30C7: 2B       [13]             dec     HL
30C8: 77       [20]             ld      (HL),A
30C9: 2B       [26]             dec     HL
30CA: 77       [33]             ld      (HL),A
30CB: C3A130   [43]             jp      RND1            ; Return RND seed
                        
30CE: 68B14668          RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
30D2: 99E99269                  defb    $99,$E9,$92,$69
30D6: 10D17568                  defb    $10,$D1,$75,$68
                        
30DA: 212431   [10]     COS:    ld      HL,HALFPI       ; Point to PI/2
30DD: CD472A   [27]             call    ADDPHL          ; Add it to PPREG
30E0: CD1E2D   [17]     SIN:    call    STAKFP          ; Put angle on stack
30E3: 014983   [27]             ld      BC,$8349        ; BCDE = 2 PI
30E6: 11DB0F   [37]             ld      DE,$0FDB
30E9: CD2E2D   [54]             call    FPBCDE          ; Move 2 PI to FPREG
30EC: C1       [64]             pop     BC              ; Restore angle
30ED: D1       [74]             pop     DE
30EE: CD432C   [91]             call    DVBCDE          ; Divide angle by 2 PI
30F1: CD1E2D   [108]            call    STAKFP          ; Put it on stack
30F4: CDC02D   [125]            call    INT             ; Get INT of result
30F7: C1       [135]            pop     BC              ; Restore number
30F8: D1       [145]            pop     DE
30F9: CD532A   [162]            call    SUBCDE          ; Make it 0 <= value < 1
30FC: 212831   [172]            ld      HL,QUARTR       ; Point to 0.25
30FF: CD4D2A   [189]            call    SUBPHL          ; Subtract value from 0.25
3102: CDED2C   [206]            call    TSTSGN          ; Test sign of value
3105: 37       [210]            scf                     ; Flag positive
3106: F21031   [220|220]        jp      P,SIN1          ; Positive - Ok
3109: CD442A   [237]            call    ROUND           ; Add 0.5 to value
310C: CDED2C   [254]            call    TSTSGN          ; Test sign of value
310F: B7       [258]            or      A               ; Flag negative
3110: F5       [11]     SIN1:   push    AF              ; Save sign
3111: F4162D   [21|28]          call    P,INVSGN        ; Negate value if positive
3114: 212831   [31]             ld      HL,QUARTR       ; Point to 0.25
3117: CD472A   [48]             call    ADDPHL          ; Add 0.25 to value
311A: F1       [58]             pop     AF              ; Restore sign
311B: D4162D   [68|75]          call    NC,INVSGN       ; Negative - Make positive
311E: 212C31   [78]             ld      HL,SINTAB       ; Coefficient table
3121: C33530   [88]             jp      SUMSER          ; Evaluate sum of series
                        
3124: DB0F4981          HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
                        
3128: 0000007F          QUARTR: defb    $00,$00,$00,$7F ; 0.25
                        
312C: 05                SINTAB: defb    $05             ; Table used by SIN
312D: BAD71E86                  defb    $BA,$D7,$1E,$86 ; 39.711
3131: 64269987                  defb    $64,$26,$99,$87 ;-76.575
3135: 58342387                  defb    $58,$34,$23,$87 ; 81.602
3139: E05DA586                  defb    $E0,$5D,$A5,$86 ;-41.342
313D: DA0F4983                  defb    $DA,$0F,$49,$83 ;  6.2832
                        
3141: CD1E2D   [17]     TAN:    call    STAKFP          ; Put angle on stack
3144: CDE030   [34]             call    SIN             ; Get SIN of angle
3147: C1       [44]             pop     BC              ; Restore angle
3148: E1       [54]             pop     HL
3149: CD1E2D   [71]             call    STAKFP          ; Save SIN of angle
314C: EB       [75]             ex      DE,HL           ; BCDE = Angle
314D: CD2E2D   [92]             call    FPBCDE          ; Angle to FPREG
3150: CDDA30   [109]            call    COS             ; Get COS of angle
3153: C3412C   [119]            jp      DIV             ; TAN = SIN / COS
                        
3156: CDED2C   [17]     ATN:    call    TSTSGN          ; Test sign of value
3159: FC812F   [27|34]          call    M,NEGAFT        ; Negate result after if -ve
315C: FC162D   [37|44]          call    M,INVSGN        ; Negate value if -ve
315F: 3ACC81   [50]             ld      A,(FPEXP)       ; Get exponent
3162: FE81     [57]             cp      81H             ; Number less than 1?
3164: DA7331   [67|67]          jp      C,ATN1          ; Yes - Get arc tangnt
3167: 010081   [77]             ld      BC,$8100        ; BCDE = 1
316A: 51       [81]             ld      D,C
316B: 59       [85]             ld      E,C
316C: CD432C   [102]            call    DVBCDE          ; Get reciprocal of number
316F: 214D2A   [112]            ld      HL,SUBPHL       ; Sub angle from PI/2
3172: E5       [123]            push    HL              ; Save for angle > 1
3173: 217D31   [10]     ATN1:   ld      HL,ATNTAB       ; Coefficient table
3176: CD3530   [27]             call    SUMSER          ; Evaluate sum of series
3179: 212431   [37]             ld      HL,HALFPI       ; PI/2 - angle in case > 1
317C: C9       [47]             ret                     ; Number > 1 - Sub from PI/2
                        
317D: 09                ATNTAB: defb    $09             ; Table used by ATN
317E: 4AD73B78                  defb    $4A,$D7,$3B,$78 ; 1/17
3182: 026E847B                  defb    $02,$6E,$84,$7B ;-1/15
3186: FEC12F7C                  defb    $FE,$C1,$2F,$7C ; 1/13
318A: 74319A7D                  defb    $74,$31,$9A,$7D ;-1/11
318E: 843D5A7D                  defb    $84,$3D,$5A,$7D ; 1/9
3192: C87F917E                  defb    $C8,$7F,$91,$7E ;-1/7
3196: E4BB4C7E                  defb    $E4,$BB,$4C,$7E ; 1/5
319A: 6CAAAA7F                  defb    $6C,$AA,$AA,$7F ;-1/3
319E: 00000081                  defb    $00,$00,$00,$81 ; 1/1
                        
                        
31A2: C9       [10]     ARET:   ret                     ; A RETurn instruction
                        
31A3: D7       [11]     GETINP: rst     $10             ; input a character
31A4: C9       [21]             ret
                        
31A5: E5       [11]     CLS:    push    HL
31A6: D5       [22]             push    DE
31A7: 3AE081   [35]             ld      A,(SCR_MODE)    ; check screen mode
31AA: FE02     [42]             cp      $02             ; G2 mode?
31AC: CC6705   [52|59]          call    Z,EMPTYVIDBUF   ; yes, reset video buffer
31AF: D1       [62]             pop     DE
31B0: E1       [72]             pop     HL
31B1: 3E0C     [79]             ld      A,CS            ; ASCII Clear screen
31B3: CD8518   [96]             call    SND2VID         ; send to screen
31B6: C39E3D   [106]            jp      MONOUT          ; Output character
                        
31B9: CD6527   [17]     WIDTH:  call    GETINT          ; Get integer 0-255
31BC: 7B       [21]             ld      A,E             ; Width to A
31BD: 32A280   [34]             ld      (LWIDTH),A      ; Set width
31C0: C9       [44]             ret
                        
                        
31C1: CD201B   [17]     DEEK:   call    DEINT           ; Get integer -32768 to 32767
31C4: D5       [28]             push    DE              ; Save number
31C5: E1       [38]             pop     HL              ; Number to HL
31C6: 46       [ 7]     RECWRD: ld      B,(HL)          ; Get LSB of contents
31C7: 23       [13]             inc     HL
31C8: 7E       [20]             ld      A,(HL)          ; Get MSB of contents
31C9: C3C922   [30]             jp      ABPASS          ; Return integer AB
                        
31CC: CDDF1E   [17]     DOKE:   call    GETNUM          ; Get a number
31CF: CD201B   [34]             call    DEINT           ; Get integer -32768 to 32767
31D2: D5       [45]             push    DE              ; Save address
31D3: CD4718   [62]             call    CHKSYN          ; Make sure ',' follows
31D6: 2C                        defb    ','
31D7: CDDF1E   [79]             call    GETNUM          ; Get a number
31DA: CD201B   [96]             call    DEINT           ; Get integer -32768 to 32767
31DD: E3       [115]            ex      (SP),HL         ; Save value,get address
31DE: 73       [122]            ld      (HL),E          ; Save LSB of value
31DF: 23       [128]            inc     HL
31E0: 72       [135]            ld      (HL),D          ; Save MSB of value
31E1: E1       [145]            pop     HL              ; Restore code string address
31E2: C9       [155]            ret
                        
                        ; stop the execution of code for a certain bit of time. The pause
                        ; is between $0000 and $FFFF 100ths of second (0~655.5 secs)
31E3: CDDF1E   [17]     PAUSE:  call    GETNUM          ; Get a number
31E6: CD201B   [34]             call    DEINT           ; Get integer -32768 to 32767
31E9: 7A       [38]             ld      A,D             ; load D into A
31EA: B3       [42]             or      E               ; are D & E equal to $00?
31EB: C8       [47|53]          ret     Z               ; if yes, then return
31EC: C5       [11]     DIR_PAU:push    BC              ; store BC
31ED: 3ACE81   [24]             ld      A,(TMRCNT)      ; Load current value of system timer
31F0: 47       [28]             ld      B,A             ; move it into B
31F1: CD951A   [17]     RPTPS:  call    TSTBRK          ; Test for break key
31F4: 3ACE81   [30]             ld      A,(TMRCNT)      ; Load current value of system timer
31F7: B8       [34]             cp      B               ; is it the same value?
31F8: 28F7     [41|46]          jr      Z,RPTPS         ; yes, so read again
31FA: 47       [45]             ld      B,A             ; no, so store the new value
31FB: 1B       [51]             dec     DE              ; decrement interval
31FC: 7A       [55]             ld      A,D             ; load D into A
31FD: B3       [59]             or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
31FE: 20F1     [66|71]          jr      NZ,RPTPS        ; no, repeat
3200: C1       [76]             pop     BC              ; yes, recover BC and continue
3201: C9       [86]             ret
                        
                        ; change the screen mode. Usage: SCREEN X[,Y][,Z]
                        ; where X is: 0=text mode (40x24),
                        ; 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
                        ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
                        ; Y is: 0=8x8 sprites, 1=16x16 sprites
                        ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
                        ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
3202: AF       [ 4]     SCREEN: xor     A
3203: 32F181   [17]             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
3206: CD6527   [34]             call    GETINT          ; Get integer 0-255
3209: FE05     [41]             cp      $05             ; is it a valid mode (0~4)?
320B: D2351B   [51|51]          jp      NC,FCERR        ; No - Illegal function call Error
320E: 32EF81   [64]             ld      (TMPBFR1),A     ; store graphic mode
3211: A7       [68]             and     A               ; is it 0 (text mode)?
3212: CA2E32   [78|78]          jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
3215: CD6D32   [17]     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
3218: DA2032   [27|27]          jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
321B: 3E02     [34]             ld      A,$02           ; no, so set sprite size
321D: 32F181   [47]             ld      (TMPBFR2),A     ; ...to 16x16
3220: CD6D32   [17]     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
3223: DA2E32   [27|27]          jp      C,SCVDP         ; no (set to 0 or missing), so jump over
3226: 3AF181   [40]             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
3229: F601     [47]             or      $01             ; ...set sprite magnification to 2x...
322B: 32F181   [60]             ld      (TMPBFR2),A     ; ...and save flags again
322E: F3       [ 4]     SCVDP:  di                      ; disable INTs
322F: D5       [15]             push    DE              ; store DE
3230: E5       [26]             push    HL              ; store HL
3231: 3AEF81   [39]             ld      A,(TMPBFR1)     ; recover graphic mode
3234: 5F       [43]             ld      E,A             ; and store it into E
3235: 3AF181   [56]             ld      A,(TMPBFR2)     ; recover sprite flags
3238: 57       [60]             ld      D,A             ; and store them into D
3239: D5       [71]             push    DE              ; store D & E
323A: CD7E03   [88]             call    initVDP         ; initialize VDP with mode pointed by E
323D: D1       [98]             pop     DE              ; retrieve D & E
323E: 7B       [102]            ld      A,E             ; move graphic mode into A
323F: 87       [106]            add     A,A
3240: 87       [110]            add     A,A
3241: 87       [114]            add     A,A             ; multiply A times 8 to get offset of graphic mode
3242: 5F       [118]            ld      E,A             ; and pass it into E
3243: D5       [129]            push    DE              ; store sprite flags in E
3244: 1600     [136]            ld      D,$00           ; reset D
3246: 215A0A   [146]            ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
3249: 19       [157]            add     HL,DE           ; load correct reg#1 setting
324A: D1       [167]            pop     DE              ; retrieve sprite flags from E
324B: 7E       [174]            ld      A,(HL)          ; load reg#1 setting
324C: E6FC     [181]            and     %11111100       ; reset size & magn. bits
324E: B2       [185]            or      D               ; set size & magn. bits
324F: 5F       [189]            ld      E,A             ; value into E
3250: 3E01     [196]            ld      A,$01           ; reg #1
3252: CD4306   [213]            call    WRITE_VREG      ; send setting to reg #1
3255: 2AAF80   [229]            ld      HL,(LINEAT)     ; Get current line number
3258: 23       [235]            inc     HL              ; -1 means direct statement
3259: 7C       [239]            ld      A,H
325A: B5       [243]            or      L
325B: CC5A08   [253|260]        call    Z,CURSOR_ON     ; enable cursor if not in program mode
325E: FB       [257]            ei                      ; re-enable interrupts
325F: E1       [267]            pop     HL              ; restore HL
3260: D1       [277]            pop     DE              ; restore DE
3261: 3ADF81   [290]            ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
3264: FE30     [297]            cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
3266: D0       [302|308]        ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
3267: 3E01     [309]            ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
3269: 32EB81   [322]            ld      (PRNTVIDEO),A   ; ...video buffer...
326C: C9       [332]            ret                     ; ...and return to caller
                        
                        ; check an additional argument for SCREEN
326D: 2B       [ 6]     CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
326E: CD6A1A   [23]             call    GETCHR          ; Get next character
3271: 37       [27]             scf                     ; set carry flag
3272: C8       [32|38]          ret     Z               ; return if nothing follows with Carry=1
3273: CD4718   [49]             call    CHKSYN          ; Make sure ',' follows
3276: 2C                        defb    ','
3277: CD6527   [66]             call    GETINT          ; get value
327A: 1F       [70]             rra                     ; Carry=bit #0
327B: 3F       [74]             ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
327C: C9       [84]             ret                     ; return
                        
                        
                        ; change the colors of the screen - Syntax is COLOR a,b,c where:
                        ; a=foreground color / b=background color / c=border color
                        ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
327D: CD6527   [17]     COLOR:  call    GETINT          ; get first value
3280: CD2633   [34]             call    CHKCLR1         ; check if it's in range 1~15
3283: 32EF81   [47]             ld      (TMPBFR1),A     ; store it
3286: 3AE081   [60]             ld      A,(SCR_MODE)    ; check screen mode
3289: FE03     [67]             cp      $03             ; is it multicolor mode?
328B: 200D     [74|79]          jr      NZ,CNTCKCL      ; no, continue
328D: 3E0F     [81]             ld      A,$0F           ; white for...
328F: 32ED81   [94]             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
3292: 3AEF81   [107]            ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
3295: 32F381   [120]            ld      (TMPBFR3),A     ; move color into temp buffer 3
3298: 1831     [132]            jr      CLRMC           ; jump to set color
329A: CD4718   [17]     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
329D: 2C                        defb    ','
329E: CD6527   [34]             call    GETINT          ; get second value
32A1: CD2633   [51]             call    CHKCLR1         ; check if it's in range 1~15
32A4: 32F181   [64]             ld      (TMPBFR2),A     ; store it
32A7: 3AE081   [77]             ld      A,(SCR_MODE)    ; check screen mode
32AA: A7       [81]             and     A               ; is it text mode?
32AB: 281B     [88|93]          jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
32AD: CD4718   [105]            call    CHKSYN          ; Make sure ',' follows
32B0: 2C                        defb    ','
32B1: CD6527   [122]            call    GETINT          ; get third value
32B4: CD2633   [139]            call    CHKCLR1         ; check if it's in range 1~15
32B7: 32F381   [152]            ld      (TMPBFR3),A     ; store it
32BA: D5       [163]            push    DE              ; store DE
32BB: 3AE081   [176]            ld      A,(SCR_MODE)    ; check screen mode
32BE: FE01     [183]            cp      $01             ; is it G1 mode?
32C0: 2810     [190|195]        jr      Z,CLRG1         ; yes, jump over
32C2: FE02     [197]            cp      $02             ; is it G2 mode?
32C4: 2815     [204|209]        jr      Z,CLRG2         ; yes, jump over
32C6: 181C     [216]            jr      CLREX2          ; last case can only be ExG2
32C8: CD1933   [17]     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
32CB: 32F381   [13]     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
32CE: D5       [24]             push    DE              ; store DE
32CF: F3       [28]             di                      ; disable INTs
32D0: 182E     [40]             jr      SETBRCL         ; set colors and exit
32D2: CD1933   [17]     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
32D5: 1601     [24]             ld      D,$01           ; repeat 1 time
32D7: 0620     [31]             ld      B,$20           ; 32 bytes of colors
32D9: 1810     [43]             jr      LOADCLR         ; load colors
32DB: CD1933   [17]     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
32DE: 1618     [24]             ld      D,$18           ; 18 pages of...
32E0: 0600     [31]             ld      B,$00           ; ...256 bytes each
32E2: 1807     [43]             jr      LOADCLR         ; load colors
32E4: CD1933   [17]     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
32E7: 1608     [24]             ld      D,$08           ; 8 pages of...
32E9: 0600     [31]             ld      B,$00           ; ...256 bytes each
32EB: E5       [11]     LOADCLR:push    HL              ; store HL
32EC: 210020   [21]             ld      HL,$2000        ; color table start: $2000
32EF: F3       [25]             di                      ; disable INTs
32F0: CDF905   [42]             call    SETVDPADRS
32F3: 0E30     [49]             ld      C,VDP_DAT       ; VDP data mode
32F5: ED79     [12]     RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
32F7: 00       [16]             nop
32F8: 00       [20]             nop
32F9: 10FA     [28|33]          djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
32FB: 15       [32]             dec     D               ; did we fill up all the pages?
32FC: 20F7     [39|44]          jr      NZ,RPTLDCL      ; no, repeat
32FE: FB       [43]             ei
32FF: E1       [53]             pop     HL              ; retrieve HL
3300: 3AEF81   [13]     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
3303: 32ED81   [26]             ld      (FRGNDCLR),A    ; store it
3306: 3AF181   [39]             ld      A,(TMPBFR2)     ; retrieve background color
3309: 32EE81   [52]             ld      (BKGNDCLR),A    ; store it
330C: 3AF381   [65]             ld      A,(TMPBFR3)     ; recover border color
330F: 5F       [69]             ld      E,A             ; move it into E
3310: 3E07     [76]             ld      A,$07           ; set VDP register 7
3312: F3       [80]             di
3313: CD4306   [97]             call    WRITE_VREG      ; send value to VDP: set border color
3316: FB       [101]            ei                      ; re-enable INTs
3317: D1       [111]            pop     DE              ; retrieve DE
3318: C9       [121]            ret                     ; return to caller
                        
                        
                        ; mix 2 color nibbles in 1 byte
3319: 3AF181   [13]     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
331C: 47       [17]             ld      B,A             ; move it into B
331D: 3AEF81   [30]             ld      A,(TMPBFR1)     ; retrieve foreground color
3320: 87       [34]             add     A,A             ; move foreground color into the high nibble of A
3321: 87       [38]             add     A,A
3322: 87       [42]             add     A,A
3323: 87       [46]             add     A,A
3324: B0       [50]             or      B               ; put background color into the low nibble of A
3325: C9       [60]             ret                     ; return to caller
                        
                        
                        ; check if the color is not 0 and into the range 1~15
3326: A7       [ 4]     CHKCLR1:and     A               ; is it 0?
3327: CA6515   [14|14]          jp      Z,SNERR         ; yes, raise a SN error
332A: FE10     [ 7]     CHKCLR0:cp      $10             ; is it in range 0~15?
332C: D26515   [17|17]          jp      NC,SNERR        ; no, raise a SN error
332F: C9       [27]             ret                     ; param is OK, can return
                        
                        
                        ; check if in graphics 2 mode
3330: 3AE081   [13]     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
3333: FE02     [20]             cp      $02             ; actually, we can paint only in G2
3335: C24539   [30|30]          jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
3338: C9       [40]             ret                     ; return to caller
                        
                        
                        ; print a text in screen 2
                        ; GPRINT text,x,y[,fc[,bc]]
                        ; where "text" is an expression that can be converted into a sequence of ASCII chars,
                        ; x & y are the coordinates (0<=x<=32, 0<=y<=23), fc & bc are foreground and background
                        ; colors (1~15), resp.
                        ; (portions of code are from nippur72)
81F3:                   GX      equ     TMPBFR3
81F5:                   GY      equ     TMPBFR4
81F1:                   TMPCLR  equ     TMPBFR2
81EF:                   MIXCOL  equ     TMPBFR1
81F7:                   TMPADR  equ     VIDEOBUFF
81F9:                   CHRPNT  equ     VIDEOBUFF+$02
81FB:                   NUMCHR  equ     VIDEOBUFF+$04
81FD:                   TMPHL   equ     VIDEOBUFF+$06
3339: CD3033   [17]     GPRINT: call    CHKG2M          ; check if in graphic mode 2
333C: 2B       [23]             dec     HL              ; dec 'cos GETCHR INCs
333D: CD6A1A   [40]             call    GETCHR          ; check if something follows
3340: CA6515   [50|50]          jp      Z,SNERR         ; if nothing else, raise a syntax error
3343: 22F781   [66]             ld      (VIDEOBUFF),HL  ; save current code string pointer
3346: CDF11E   [83]             call    EVAL            ; Evaluate expression
3349: CDE31E   [100]            call    TSTSTR          ; Make sure it's a string
334C: 22FD81   [116]            ld      (TMPHL),HL      ; store code string pointer
334F: CD2A25   [133]            call    GSTRCU          ; Current string to pool
3352: CD3C2D   [150]            call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3355: ED43F981 [170]            ld      (CHRPNT),BC     ; store string pointer
3359: ED53FB81 [190]            ld      (NUMCHR),DE     ; store string lenght
335D: 2AFD81   [206]            ld      HL,(TMPHL)      ; store code string pointer
3360: CD4718   [223]            call    CHKSYN          ; Make sure ',' follows
3363: 2C                        defb    ','
3364: CD6527   [240]            call    GETINT          ; get X coord.
3367: FE20     [247]            cp      $20             ; is it in rage 0~31?
3369: D2351B   [257|257]        jp      NC,FCERR        ; Illegal function call error
336C: 32F381   [270]            ld      (GX),A          ; store into temp. buffer
336F: CD4718   [287]            call    CHKSYN          ; Make sure ',' follows
3372: 2C                        defb    ','
3373: CD6527   [304]            call    GETINT          ; get Y coord.
3376: FE18     [311]            cp      $18             ; is it in range 0~23?
3378: D2351B   [321|321]        jp      NC,FCERR        ; Illegal function call error
337B: 32F581   [334]            ld      (GY),A          ; store into temp. buffer
337E: 11F181   [344]            ld      DE,TMPCLR
3381: 3AEE81   [357]            ld      A,(BKGNDCLR)    ; load background color
3384: 12       [364]            ld      (DE),A          ; store into temp buff
3385: 3AED81   [377]            ld      A,(FRGNDCLR)    ; load foreground color
3388: 1B       [383]            dec     DE
3389: 1B       [389]            dec     DE
338A: 12       [396]            ld      (DE),A          ; store into temp buff
338B: CD1734   [413]            call    CKCOL           ; check color
338E: CA9633   [423|423]        jp      Z,CNTGPT2       ; if anything follows, jump over
3391: 13       [429]            inc     DE
3392: 13       [435]            inc     DE
3393: CD1734   [452]            call    CKCOL           ; check background color
3396: CD1933   [17]     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
3399: 32EF81   [30]             ld      (MIXCOL),A      ; store mixed colors
339C: E5       [41]             push    HL              ; store code string address
339D: ED4BF981 [61]             ld      BC,(CHRPNT)     ; retrieve string pointer
33A1: ED5BFB81 [81]             ld      DE,(NUMCHR)     ; retrieve string lenght
33A5: 1C       [85]             inc     E               ; Length + 1
33A6: CDAB33   [102]            call    GPNT            ; print on G2
33A9: E1       [112]            pop     HL              ; recover HL
33AA: C9       [122]            ret                     ; return to caller
33AB: D5       [11]     GPNT:   push    DE              ; store string lenght (E)
                                ; calculate VRAM address of first char
33AC: 3AF381   [24]             LD      A,(GX)          ; load X
33AF: 6F       [28]             ld      L,A             ;
33B0: 2600     [35]             ld      H,0             ; HL = X
33B2: 29       [46]             add     HL,HL           ;
33B3: 29       [57]             add     HL,HL           ;
33B4: 29       [68]             add     HL,HL           ; X=X*8
33B5: 3AF581   [81]             ld      A,(GY)          ; load Y
33B8: 57       [85]             ld      D,A             ; move it into D
33B9: 1E00     [92]             ld      E,0             ; DE =Y*256
33BB: 19       [103]            add     HL,DE           ; address = X*8 + Y*256
33BC: 22F781   [119]            ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
33BF: D1       [129]            pop     DE              ; retrieve # of chars to be printed yet (E)
33C0: 1D       [ 4]     RPGPNT: dec     E               ; Count characters
33C1: C8       [ 9|15]          ret     Z               ; End of string - return
33C2: D5       [20]             push    DE              ; store chars counter
                                ; calculate dest address in color vram
33C3: 2AF781   [36]             ld      HL,(TMPADR)     ; recover VRAM address 
33C6: 110020   [46]             ld      DE,$2000        ; color map address
33C9: 19       [57]             add     HL,DE           ; HL = $2000 + XY address
33CA: F3       [61]             di                      ; disable INTs
                                ; send color settings
33CB: CDF905   [17]     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
33CE: 3AEF81   [30]             ld      A,(MIXCOL)      ; load color settings
33D1: 0608     [37]             ld      B,$08           ; repeat for 8 rows
33D3: 0E30     [44]             ld      C,VDP_DAT       ; VDP data mode
33D5: ED79     [12]     GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
33D7: 00       [16]             nop                     ; wait...
33D8: 00       [20]             nop                     ; ...a...
33D9: 00       [24]             nop                     ; ...while
33DA: 10F9     [32|37]          djnz    GPNTCO1         ; repeat for 8 cells
                                ; calculate source address
33DC: 2AF981   [48]             ld      HL,(CHRPNT)     ; load char pointer
33DF: 7E       [55]             ld      A,(HL)          ; get char
33E0: 23       [61]             inc     HL              ; increment char pointer
33E1: 22F981   [77]             ld      (CHRPNT),HL     ; store char pointer
33E4: 6F       [81]             ld      L,A             ;
33E5: 2600     [88]             ld      H,0             ; char into HL
33E7: 29       [99]             add     HL,HL           ;
33E8: 29       [110]            add     HL,HL           ;
33E9: 29       [121]            add     HL,HL           ; get offset of char into ROM (charcode * 8)
33EA: 112846   [131]            ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
33ED: 19       [142]            add     HL,DE           ; HL = start of characters in ROM
33EE: EB       [146]            ex      DE,HL           ; store address into DE
33EF: 2AF781   [16]     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
33F2: CDF905   [33]             call    SETVDPADRS      ; send it to VDP
33F5: EB       [37]             ex      DE,HL           ; restore address into HL
33F6: 0608     [44]             ld      B,$08           ; repeat for 8 rows
33F8: 0E30     [51]             ld      C,VDP_DAT       ; VDP data mode
33FA: EDA3     [16]     GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
33FC: 00       [20]             nop                     ; wait...
33FD: 00       [24]             nop                     ; ...a...
33FE: 00       [28]             nop                     ; ...while
33FF: 20F9     [35|40]          jr      NZ,GPCPCH1      ; repeat for 8 chars
3401: FB       [39]             ei                      ; re-enable INTs
3402: 110800   [49]             ld      DE,$0008        ; 8 bytes to go to the next video ell
3405: 2AF781   [65]             ld      HL,(TMPADR)     ; load VRAM address
3408: 19       [76]             add     HL,DE           ; get address of next VRAM cell
3409: 22F781   [92]             ld      (TMPADR),HL     ; store new VRAM address
340C: 110018   [102]            ld      DE,$1800        ; forbidden address
340F: CDC53D   [119]            call    CMP16           ; check if the printing has gone out of the screen
3412: D1       [129]            pop     DE              ; retrieve number of chars to be printed
3413: D0       [134|140]        ret     NC              ; if HL>=$1800 then leave
3414: C3C033   [144]            jp      RPGPNT          ; otherwise, check if more chars to output
                                
3417: 2B       [ 6]     CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
3418: CD6A1A   [23]             call    GETCHR          ; Get next character
341B: C8       [28|34]          ret     Z               ; return if nothing follows
341C: CD4718   [45]             call    CHKSYN          ; Make sure ',' follows
341F: 2C                        defb    ','
3420: D5       [56]             push    DE              ; store DE
3421: CD6527   [73]             call    GETINT          ; get value
3424: CD2633   [90]             call    CHKCLR1         ; check if color is in range 1~15
3427: D1       [100]            pop     DE              ; retrieve DE
3428: 12       [107]            ld      (DE),A          ; store color into temp buffer
3429: C9       [117]            ret                     ; return to caller
                                
                        
                        ; paint X,Y[,C]: in graphics mode, fills an area starting
                        ; at point X,Y, using default color or, if used, with
                        ; color set by C
                        ; TMPBFR1       X
                        ; TMPBFR2       Y
                        ; TMPBFR3       COLOR
81F7:                   PNT     equ     VIDEOBUFF
81F9:                   SPA     equ     VIDEOBUFF+$02
81FA:                   SPB     equ     VIDEOBUFF+$03
81FB:                   ORGSP   equ     VIDEOBUFF+$04
342A: CD3033   [17]     PAINT:  call    CHKG2M          ; check if in graphic mode 2
342D: CD6527   [34]             call    GETINT          ; get X
3430: 32EF81   [47]             ld      (TMPBFR1),A     ; store X
3433: CD4718   [64]             call    CHKSYN          ; Make sure ',' follows
3436: 2C                        defb    ','
3437: CD6527   [81]             call    GETINT          ; get Y coords,
343A: FEC0     [88]             cp      $C0             ; check if Y is in range 0~191
343C: D2351B   [98|98]          jp      NC,FCERR        ; no, raise an FC error
343F: 32F181   [111]            ld      (TMPBFR2),A     ; store Y
3442: CD2C39   [128]            call    CLRPRM          ; check if color has been passed
3445: 3AF381   [141]            ld      A,(TMPBFR3)     ; load color
3448: A7       [145]            and     A               ; check if 0
3449: CA351B   [155|155]        jp      Z,FCERR         ; yes, raise an error
344C: E5       [166]            push    HL              ; store HL
344D: C5       [177]            push    BC              ; store BC
344E: D5       [188]            push    DE              ; store DE
                                ; start algorithm
344F: CD7135   [205]            call    PNTRTN          ; check if pixel is already set
3452: C21735   [215|215]        jp      NZ,EXITPA2      ; if yes, then leave PAINT
3455: ED73FB81 [235]            ld      (ORGSP),SP      ; no, store current Stack Pointer
3459: 210100   [245]            ld      HL,$0001        ; HL=1
345C: 22F781   [261]            ld      (PNT),HL        ; set PNT
345F: 3AEF81   [274]            ld      A,(TMPBFR1)     ; load starting X...
3462: 47       [278]            ld      B,A             ; ...into B
3463: 3AF181   [291]            ld      A,(TMPBFR2)     ; load starting Y...
3466: 4F       [295]            ld      C,A             ; ...into C
3467: C5       [306]            push    BC              ; store starting X,Y into stack
                                ; main loop
3468: 2AF781   [16]     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
346B: 7C       [20]             ld      A,H             ; check if PNT=0
346C: B5       [24]             or      L
346D: CA1335   [34|34]          jp      Z,EXITPAI       ; yes, no more points to process - exit
3470: 2B       [40]             dec     HL              ; no, so decrement PNT...
3471: 22F781   [56]             ld      (PNT),HL        ; ...and store it
3474: C1       [66]             pop     BC              ; retrieve pixel coordinates X,Y into BC
3475: CD1B35   [17]     PAINT0: call    CHECKPA         ; check if pixel is set/reset
3478: 2007     [24|29]          jr      NZ,PAINT11      ; pixel is set, so jump over
347A: 78       [28]             ld      A,B             ; pixel is reset, check if X1=0
347B: A7       [32]             and     A               ; (reached the limit of the screen)
347C: 2804     [39|44]          jr      Z,PAINT1        ; yes, jump over
347E: 05       [43]             dec     B               ; no, decrement X1...
347F: 18F4     [55]             jr      PAINT0          ; ...and repeat
3481: 04       [ 4]     PAINT11:inc     B               ; if found a pixel on, the re-increment X1
3482: AF       [ 4]     PAINT1: xor     A               ; reset A
3483: 32F981   [17]             ld      (SPA),A         ; set SA=0
3486: 32FA81   [30]             ld      (SPB),A         ; set SB=0
3489: CD1B35   [17]     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
348C: 20DA     [24|29]          jr      NZ,NXTLOOP      ; it's set, so goto next loop
348E: 78       [28]             ld      A,B             ; copy X1
348F: 32EF81   [41]             ld      (TMPBFR1),A     ; into buffer
3492: 79       [45]             ld      A,C             ; copy Y
3493: 32F181   [58]             ld      (TMPBFR2),A     ; into buffer
3496: CD9735   [75]             call    CNTPLOT         ; plot pixel X1,Y
3499: 3AF981   [88]             ld      A,(SPA)
349C: A7       [92]             and     A               ; SA=0?
349D: 201D     [99|104]         jr      NZ,PAINT2       ; no, jump over
349F: 79       [103]            ld      A,C             ; load Y
34A0: FE01     [110]            cp      $01             ; Y>0?
34A2: 3818     [117|122]        jr      C,PAINT2        ; no, jump over
34A4: 3D       [121]            dec     A               ; yes, Y=Y-1
34A5: CD1C35   [138]            call    CHECKPY         ; check pixel X1,Y-1
34A8: 2012     [145|150]        jr      NZ,PAINT2       ; it's set, so jump over
34AA: 0D       [149]            dec     C               ; Y=Y-1
34AB: C5       [160]            push    BC              ; insert pixel(X1,Y-1) into stack
34AC: 0C       [164]            inc     C               ; retrieve original Y
34AD: 2AF781   [180]            ld      HL,(PNT)        ; load PNT
34B0: 23       [186]            inc     HL              ; increment PNT
34B1: 22F781   [202]            ld      (PNT),HL        ; store new PNT
34B4: 3E01     [209]            ld      A,$01           ; set SA=1...
34B6: 32F981   [222]            ld      (SPA),A         ; ...into memory
34B9: C3D234   [232]            jp      PAINT3          ; jump over
34BC: 3AF981   [13]     PAINT2: ld      A,(SPA)
34BF: 1F       [17]             rra                     ; check if SA=1
34C0: 3010     [24|29]          jr      NC,PAINT3       ; no, jump over
34C2: 79       [28]             ld      A,C             ; load Y
34C3: FE01     [35]             cp      $01             ; Y>0?
34C5: 380B     [42|47]          jr      C,PAINT3        ; no, jump over
34C7: 3D       [46]             dec     A               ; Y=Y-1
34C8: CD1C35   [63]             call    CHECKPY         ; check pixel X1,Y-1
34CB: CAD234   [73|73]          jp      Z,PAINT3        ; if pixel is off, jump over
34CE: AF       [77]             xor     A               ; pixel is on, so...
34CF: 32F981   [90]             ld      (SPA),A         ; ...set SA=0
34D2: 3AFA81   [13]     PAINT3: ld      A,(SPB)         ; check if
34D5: A7       [17]             and     A               ; B=0
34D6: 201D     [24|29]          jr      NZ,PAINT4       ; no, jump over
34D8: 79       [28]             ld      A,C             ; load Y
34D9: FEBF     [35]             cp      $BF             ; Y<191?
34DB: 3018     [42|47]          jr      NC,PAINT4       ; no, jump over
34DD: 3C       [46]             inc     A               ; Y=Y+1
34DE: CD1C35   [63]             call    CHECKPY         ; check pixel X1,Y+1
34E1: 2012     [70|75]          jr      NZ,PAINT4       ; pixel is on, so jump over
34E3: 0C       [74]             inc     C               ; Y=Y+1
34E4: C5       [85]             push    BC              ; insert pixel(X1,Y+1) into stack
34E5: 0D       [89]             dec     C               ; retrieve original Y
34E6: 2AF781   [105]            ld      HL,(PNT)        ; PNT
34E9: 23       [111]            inc     HL              ; PNT=PNT+1
34EA: 22F781   [127]            ld      (PNT),HL        ; store PNT
34ED: 3E01     [134]            ld      A,$01           ; SB=1
34EF: 32FA81   [147]            ld      (SPB),A         ; set SB
34F2: C30C35   [157]            jp      PAINT5          ; jump over
34F5: 3AFA81   [13]     PAINT4: ld      A,(SPB)         ; load SB
34F8: 1F       [17]             rra                     ; check if SB=1
34F9: D20C35   [27|27]          jp      NC,PAINT5       ; no, jump over
34FC: 79       [31]             ld      A,C             ; load Y
34FD: FEBF     [38]             cp      $BF             ; Y<191?
34FF: 300B     [45|50]          jr      NC,PAINT5       ; no, jump over
3501: 3C       [49]             inc     A               ; Y=Y+1
3502: CD1C35   [66]             call    CHECKPY         ; check pixel X1,Y+1
3505: CA0C35   [76|76]          jp      Z,PAINT5        ; if pixel is off, jump over
3508: AF       [80]             xor     A               ; pixel is on, so...
3509: 32FA81   [93]             ld      (SPB),A         ; ...set SB=0
350C: 04       [ 4]     PAINT5: inc     B               ; X1=X1+1
350D: CA6834   [14|14]          jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
3510: C38934   [24]             jp      MNPAINT         ; otherwise, repeat for next X
3513: ED7BFB81 [20]     EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
3517: D1       [10]     EXITPA2:pop     DE              ; retrieve DE
3518: C1       [20]             pop     BC              ; retrieve BC
3519: E1       [30]             pop     HL              ; retrieve HL
351A: C9       [40]             ret                     ; return to caller
351B: 79       [ 4]     CHECKPA:ld      A,C             ; copy Y into A
351C: 32F181   [13]     CHECKPY:ld      (TMPBFR2),A     ; store Y
351F: 78       [17]             ld      A,B             ; copy X1 into A
3520: 32EF81   [30]             ld      (TMPBFR1),A     ; store X1
3523: C5       [41]             push    BC              ; save X1,Y
3524: CD7135   [58]             call    PNTRTN          ; check if pixel is set/reset
3527: C1       [68]             pop     BC              ; retrieve X1,Y
3528: C9       [78]             ret                     ; return to caller
                        
                        
                        ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
3529: CD3033   [17]     POINT:  call    CHKG2M          ; check if in graphic mode 2
352C: CD4718   [34]             call    CHKSYN          ; make sure "(" follows
352F: 28                        defb    '('
3530: CD6527   [51]             call    GETINT          ; get X coords.
3533: 32EF81   [64]             ld      (TMPBFR1),A     ; store it into a temp buffer
3536: CD4718   [81]             call    CHKSYN          ; Make sure ',' follows
3539: 2C                        defb    ','
353A: CD6527   [98]             call    GETINT          ; get Y coords,
353D: FEC0     [105]            cp      $C0             ; check if Y is in range 0~191
353F: D2351B   [115|115]        jp      NC,FCERR        ; no, raise an FC error
3542: 32F181   [128]            ld      (TMPBFR2),A     ; store into a temp buffer
3545: CD4718   [145]            call    CHKSYN          ; make sure ")" follows
3548: 29                        defb    ')'
3549: E5       [156]            push    HL              ; store current string address - the point after the ")" - ...
354A: FDE1     [170]            pop     IY              ; ...into IY
354C: CD7135   [187]            call    PNTRTN          ; check if pixel is set or reset
354F: 200C     [194|199]        jr      NZ,CTPOINT      ; it's ON, jump over
3551: AF       [198]            xor     A               ; no, it's OFF. make sure to reset A...
3552: 47       [202]            ld      B,A             ; ...and B
3553: E1       [10]     PNTEND: pop     HL              ; drop original return point
3554: FDE5     [25]             push    IY              ; load current string address from IY into stack
3556: 11CA1F   [35]             ld      DE,RETNUM       ; Address of Return number from function...
3559: D5       [46]             push    DE              ; ...saved on stack
355A: C3C922   [56]             jp      ABPASS          ; return AB
355D: CBEC     [ 8]     CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
355F: F3       [12]             di
3560: CD1906   [29]             call    READ_VIDEO_LOC  ; load original colors of pixel
3563: FB       [33]             ei
3564: CB3F     [41]             srl     A               ; shift A...
3566: CB3F     [49]             srl     A               ; ...4 times...
3568: CB3F     [57]             srl     A               ; ...to move foreground color...
356A: CB3F     [65]             srl     A               ; ...into lowest nibble
356C: 47       [69]             ld      B,A             ; color into B
356D: AF       [73]             xor     A               ; reset MSB
356E: C35335   [83]             jp      PNTEND          ; return AB
3571: CDE435   [17]     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
3574: 57       [21]             ld      D,A             ; store pixel index
3575: F3       [25]             di                      ; disable INTs
3576: CD1906   [42]             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
3579: FB       [46]             ei                      ; re-enable INTs
357A: A2       [50]             and     D               ; is the pixel ON or OFF? (will be checked later)
357B: C9       [60]             ret                     ; return to caller
                        
                        
                        ; PLOT X,Y[,color]
                        ; plot a pixel in graphic mode 2
357C: CD3033   [17]     PLOT:   call    CHKG2M          ; check if in G2 mode
357F: CD6527   [34]             call    GETINT          ; get X coords.
3582: 32EF81   [47]             ld      (TMPBFR1),A     ; store it into a temp buffer
3585: CD4718   [64]             call    CHKSYN          ; Make sure ',' follows
3588: 2C                        defb    ','
3589: CD6527   [81]             call    GETINT          ; get Y coords,
358C: FEC0     [88]             cp      $C0             ; check if Y is in range 0~191
358E: D2351B   [98|98]          jp      NC,FCERR        ; no, raise an FC error
3591: 32F181   [111]            ld      (TMPBFR2),A     ; store into a temp buffer
3594: CD2C39   [128]            call    CLRPRM          ; check if param "color" has been passed
3597: E5       [11]     CNTPLOT:push    HL              ; store HL
3598: C5       [22]             push    BC              ; store BC
3599: D5       [33]             push    DE              ; store DE
359A: CDE435   [50]             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
359D: D2D835   [60|60]          jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
35A0: 57       [64]             ld      D,A             ; move pixel value into D
35A1: 3AF381   [77]             ld      A,(TMPBFR3)     ; retrieve color
35A4: A7       [81]             and     A               ; is it 0? (background, or reset pixel)
35A5: 2011     [88|93]          jr      NZ,CNTPLT1      ; no, continue
35A7: F3       [92]             di                      ; yes - so, disable INTs
35A8: CD1906   [109]            call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
35AB: FB       [113]            ei                      ; re-enable INTs
35AC: 5F       [117]            ld      E,A             ; store value of cell
35AD: 7A       [121]            ld      A,D             ; retrieve pixel
35AE: 2F       [125]            cpl                     ; revert bits
35AF: A3       [129]            and     E               ; set video pixel to off
35B0: F3       [133]            di                      ; disable INTs
35B1: CD2E06   [150]            call    WRITE_VIDEO_LOC ; write new value into VRAM cell
35B4: FB       [154]            ei                      ; re-enable INTs
35B5: C3D835   [164]            jp      NOGD            ; leave
35B8: 87       [ 4]     CNTPLT1:add     A,A             ; now we move low nibble
35B9: 87       [ 8]             add     A,A             ; in the high nibble
35BA: 87       [12]             add     A,A             ; by adding A to itself
35BB: 87       [16]             add     A,A             ; 4 times (this is a shift left 4)
35BC: 5F       [20]             ld      E,A             ; move it into E
35BD: F3       [24]             di                      ; disable INTs
35BE: CD1906   [41]             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
35C1: FB       [45]             ei
35C2: B2       [49]             or      D               ; plot new pixel preserving original pattern
35C3: F3       [53]             di
35C4: CD2E06   [70]             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
35C7: FB       [74]             ei
35C8: CBEC     [82]             set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
35CA: F3       [86]             di
35CB: CD1906   [103]            call    READ_VIDEO_LOC  ; load original colors of pixel
35CE: FB       [107]            ei
35CF: E60F     [114]            and     %00001111       ; reset high nibble (the foreground color)
35D1: B3       [118]            or      E               ; set new foreground color
35D2: F3       [122]            di
35D3: CD2E06   [139]            call    WRITE_VIDEO_LOC ; write new color settings
35D6: FB       [143]            ei                      ; re-enable INTs
35D7: 00       [147]            nop                     ; wait for INTs to be enabled again
35D8: D1       [10]     NOGD:   pop     DE              ; retrieve DE
35D9: C1       [20]             pop     BC              ; retrieve BC
35DA: E1       [30]             pop     HL              ; retrieve HL
35DB: C9       [40]             ret                     ; return to caller
35DC: 80402010          PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
35E0: 08040201          
                                ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
                        
                        
                        ; compute the VRAM address of the byte containing the pixel
                        ; being pointed by X,Y (TMPBFR1,TMPBFR1)
                        ; byte address is returned into HL
                        ; pixel is returned into A
35E4:                   XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
                                ; where R(Y/8) is the remainder of (Y/8)
                                ; the pixel to be set is given by R(X/8), and data is taken from the array
35E4: 3AF181   [13]             ld      A,(TMPBFR2)     ; retrieve Y
35E7: FEC0     [20]             cp      $C0             ; Y>=192?
35E9: D0       [25|31]          ret     NC              ; yes, so leave
35EA: 1E08     [32]             ld      E,$08           ; load E with divisor
35EC: 57       [36]             ld      D,A             ; and store into D (dividend)
35ED: CDF43D   [53]             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
35F0: 4F       [57]             ld      C,A             ; store remainder into C
35F1: 42       [61]             ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
35F2: 6069     [69]             ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
35F4: 3AEF81   [82]             ld      A,(TMPBFR1)     ; retrieve X
35F7: 57       [86]             ld      D,A             ; and move it into D (dividend)
35F8: CDF43D   [103]            call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
35FB: 4F       [107]            ld      C,A             ; store remainder into C
35FC: 7A       [111]            ld      A,D             ; move quotient into A
35FD: 87       [115]            add     A,A
35FE: 87       [119]            add     A,A
35FF: 87       [123]            add     A,A             ; multiply quotient by 8
3600: 5F       [127]            ld      E,A             ; store result into E
3601: 1600     [134]            ld      D,$00           ; reset D
3603: 19       [145]            add     HL,DE           ; add DE to HL, getting the final VRAM address
3604: EB       [149]            ex      DE,HL           ; move VRAM address into DE
3605: 21DC35   [159]            ld      HL,PXLSET       ; starting address of table for pixel to draw
3608: 0600     [166]            ld      B,$00           ; reset B
360A: 09       [177]            add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
360B: 7E       [184]            ld      A,(HL)          ; load pixel data
360C: EB       [188]            ex      DE,HL           ; retrieve VRAM pattern address into HL
360D: 37       [192]            scf                     ; set Carry for normal exit
360E: C9       [202]            ret                     ; return to caller
                        
                        
                        ; DRAW X1,Y1,X2,Y2[,color]
                        ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
                        ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
                        ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
                        ; the values. If color is not specified, the foreground color set
                        ; with COLOR will be used 
81EF:                   X1      equ     TMPBFR1
81F1:                   Y1      equ     TMPBFR2
81F7:                   X2      equ     VIDEOBUFF
81F9:                   Y2      equ     VIDEOBUFF+$02
81FB:                   ER      equ     VIDEOBUFF+$04
81FD:                   E2      equ     VIDEOBUFF+$06
81FF:                   SX      equ     VIDEOBUFF+$08
8201:                   SY      equ     VIDEOBUFF+$0A
8203:                   DX      equ     VIDEOBUFF+$0C
8205:                   DY      equ     VIDEOBUFF+$0E
360F: CD3033   [17]     DRAW:   call    CHKG2M          ; check if in G2 mode
3612: CD1439   [34]             call    CLRVDBF         ; clear VIDEOBUFF
3615: CD6527   [51]             call    GETINT          ; get X1 coords.
3618: 32EF81   [64]             ld      (X1),A          ; store it into a temp buffer
361B: CD4718   [81]             call    CHKSYN          ; Make sure ',' follows
361E: 2C                        defb    ','
361F: CD6527   [98]             call    GETINT          ; get Y1 coords.
3622: FEC0     [105]            cp      $C0             ; check if Y1 is in range 0~191
3624: D2351B   [115|115]        jp      NC,FCERR        ; no, raise an FC error
3627: 32F181   [128]            ld      (Y1),A          ; store into a temp buffer
362A: CD4718   [145]            call    CHKSYN          ; Make sure ',' follows
362D: 2C                        defb    ','
362E: CD6527   [162]            call    GETINT          ; get X2 coords.
3631: 32F781   [175]            ld      (X2),A          ; store it into a temp buffer
3634: CD4718   [192]            call    CHKSYN          ; Make sure ',' follows
3637: 2C                        defb    ','
3638: CD6527   [209]            call    GETINT          ; get Y2 coords
363B: FEC0     [216]            cp      $C0             ; check if Y2 is in range 0~191
363D: D2351B   [226|226]        jp      NC,FCERR        ; no, raise an FC error
3640: 32F981   [239]            ld      (Y2),A          ; store it into a temp buffer
3643: CD2C39   [256]            call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
3646: E5       [267]            push    HL              ; store register we'll use
3647: D5       [278]            push    DE              
3648: C5       [289]            push    BC
3649: ED5BEF81 [309]            ld      DE,(X1)         ; load X1 and
364D: 2AF781   [325]            ld      HL,(X2)         ; X2
3650: B7       [329]            or      A               ; clear CARRY
3651: ED52     [344]            sbc     HL,DE           ; DX=X2-X1
3653: CDEA3D   [361]            call    absHL           ; DX=ABS(DX)
3656: 220382   [377]            ld      (DX),HL         ; store DX
3659: 01FFFF   [387]            ld      BC,$FFFF        ; SX=-1
365C: 2AEF81   [403]            ld      HL,(X1)
365F: ED5BF781 [423]            ld      DE,(X2)
3663: CDC53D   [440]            call    CMP16           ; X1<X2?
3666: CA6F36   [450|450]        jp      Z,X1GR          ; no, X1=X2
3669: F26F36   [460|460]        jp      P,X1GR          ; no, X1>X2
366C: 010100   [470]            ld      BC,$0001        ; yes, so set SX=1
366F: ED43FF81 [20]     X1GR:   ld      (SX),BC         ; store SX
3673: ED5BF181 [40]             ld      DE,(Y1)
3677: 2AF981   [56]             ld      HL,(Y2)
367A: B7       [60]             or      A               ; clear Carry
367B: ED52     [75]             sbc     HL,DE           ; DY=Y2-Y1
367D: CDEA3D   [92]             call    absHL           ; DY=ABS(DY)
3680: 220582   [108]            ld      (DY),HL         ; store DY
3683: 01FFFF   [118]            ld      BC,$FFFF        ; SY=-1
3686: 2AF181   [134]            ld      HL,(Y1)
3689: ED5BF981 [154]            ld      DE,(Y2)
368D: CDC53D   [171]            call    CMP16           ; is Y1<Y2?
3690: CA9936   [181|181]        jp      Z,Y1GR          ; no, Y1=Y2
3693: F29936   [191|191]        jp      P,Y1GR          ; no, Y1>Y2 - jump over
3696: 010100   [201]            ld      BC,$0001        ; yes, so set SY=1
3699: ED430182 [20]     Y1GR:   ld      (SY),BC         ; store SY
369D: 2A0582   [36]             ld      HL,(DY)         ; ER=DY
36A0: CDED3D   [53]             call    negHL           ; ER=-DY
36A3: 22FB81   [69]             ld      (ER),HL         ; store ER
36A6: 2A0382   [85]             ld      HL,(DX)
36A9: ED5B0582 [105]            ld      DE,(DY)
36AD: CDC53D   [122]            call    CMP16           ; DX>DY?
36B0: CABC36   [132|132]        jp      Z,ER2           ; no, DX=DY
36B3: FABC36   [142|142]        jp      M,ER2           ; no, DX<DY
36B6: 2A0382   [158]            ld      HL,(DX)         ; reload DX
36B9: 22FB81   [174]            ld      (ER),HL         ; yes: DX>DY, so ER=DX
36BC: 2AFB81   [16]     ER2:    ld      HL,(ER)         ; load ER
36BF: CB2C     [24]             sra     H               ; right shift (and preserve sign)...
36C1: CB1D     [32]             rr      L               ; ...of HL, so ER=INT(ER/2)
36C3: CB7C     [40]             bit     7,H             ; is the number negative?
36C5: CAC936   [50|50]          jp      Z,STRE2         ; no, jump over
36C8: 23       [56]             inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
36C9: 22FB81   [16]     STRE2:  ld      (ER),HL         ; store ER
36CC: CD9735   [17]     RPTDRW: call    CNTPLOT         ; plot first pixel
36CF: 2AEF81   [33]             ld      HL,(X1)
36D2: ED5BF781 [53]             ld      DE,(X2)
36D6: CDC53D   [70]             call    CMP16           ; X1=X2?
36D9: 200D     [77|82]          jr      NZ,CNTDRW       ; no, continue drawing
36DB: 2AF181   [93]             ld      HL,(Y1)         ; yes, so check
36DE: ED5BF981 [113]            ld      DE,(Y2)         ; also Y
36E2: CDC53D   [130]            call    CMP16           ; Y1=Y2?
36E5: CA4137   [140|140]        jp      Z,ENDDRAW       ; yes, finished drawing: exit
36E8: ED5BFB81 [20]     CNTDRW: ld      DE,(ER)
36EC: ED53FD81 [40]             ld      (E2),DE         ; E2=ER
36F0: 2A0382   [56]             ld      HL,(DX)
36F3: CDED3D   [73]             call    negHL           ; DX=-DX
36F6: EB       [77]             ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
36F7: CDC53D   [94]             call    CMP16           ; E2>-DX?
36FA: CA1837   [104|104]        jp      Z,DXGR          ; no, E2=-DX: jump
36FD: FA1837   [114|114]        jp      M,DXGR          ; no, E2<-DX: jump
3700: 2AFB81   [130]            ld      HL,(ER)         ; yes
3703: ED5B0582 [150]            ld      DE,(DY)
3707: B7       [154]            or      A               ; clear CARRY
3708: ED52     [169]            sbc     HL,DE           ; ER=ER-DY
370A: 22FB81   [185]            ld      (ER),HL
370D: 2AEF81   [201]            ld      HL,(X1)
3710: ED5BFF81 [221]            ld      DE,(SX)
3714: 19       [232]            add     HL,DE           ; X1=X1+SX (increment X1)
3715: 22EF81   [248]            ld      (X1),HL
3718: 2AFD81   [16]     DXGR:   ld      HL,(E2)
371B: ED5B0582 [36]             ld      DE,(DY)
371F: CDC53D   [53]             call    CMP16           ; E2<DY?
3722: CACC36   [63|63]          jp      Z,RPTDRW        ; no, E2=DY: jump
3725: F2CC36   [73|73]          jp      P,RPTDRW        ; no, E2>DY: jump
3728: 2AFB81   [89]             ld      HL,(ER)         ; yes
372B: ED5B0382 [109]            ld      DE,(DX)
372F: 19       [120]            add     HL,DE           ; ER=ER+DX
3730: 22FB81   [136]            ld      (ER),HL
3733: 2AF181   [152]            ld      HL,(Y1)
3736: ED5B0182 [172]            ld      DE,(SY)
373A: 19       [183]            add     HL,DE           ; Y1=Y1+SY (increment Y1)
373B: 22F181   [199]            ld      (Y1),HL
373E: C3CC36   [209]            jp      RPTDRW          ; repeat
3741: C1       [10]     ENDDRAW:pop     BC              ; retrieve BC
3742: D1       [20]             pop     DE              ; retrieve DE
3743: E1       [30]             pop     HL              ; retrieve HL
3744: C9       [40]             ret                     ; return to caller
                        
                        
                        ; CIRCLE X,Y,R[,C]
                        ; Draw a circle using Bresenham's circle algorithm with center in X,Y
                        ; and radius R, with optional color C. If color is not specified, the
                        ; foreground color set with COLOR will be used 
81F7:                   XC      equ     VIDEOBUFF
81F9:                   YC      equ     VIDEOBUFF+$02
81FB:                   RADIUS  equ     VIDEOBUFF+$04
81FD:                   XI      equ     VIDEOBUFF+$06
81FF:                   YI      equ     VIDEOBUFF+$08
8201:                   DC      equ     VIDEOBUFF+$0A
3745: CD3033   [17]     CIRCLE: call    CHKG2M          ; check if in G2 mode
3748: CD1439   [34]             call    CLRVDBF         ; clear VIDEOBUFF
374B: CD6527   [51]             call    GETINT          ; get X coords.
374E: 32F781   [64]             ld      (XC),A          ; store it into a temp buffer
3751: CD4718   [81]             call    CHKSYN          ; Make sure ',' follows
3754: 2C                        defb    ','
3755: CD6527   [98]             call    GETINT          ; get Y coords,
3758: 32F981   [111]            ld      (YC),A          ; store it into a temp buffer
375B: CD4718   [128]            call    CHKSYN          ; Make sure ',' follows
375E: 2C                        defb    ','
375F: CD6527   [145]            call    GETINT          ; get radius
3762: 32FB81   [158]            ld      (RADIUS),A      ; store it into a temp buffer
3765: CD2C39   [175]            call    CLRPRM          ; check if param "color" has been passed
3768: C5       [186]            push    BC              ; store BC
3769: D5       [197]            push    DE              ; store DE
376A: E5       [208]            push    HL              ; store HL
376B: AF       [212]            xor     A               ; clear A,
376C: 47       [216]            ld      B,A             ; B,
376D: 4F       [220]            ld      C,A             ; C,
376E: 57       [224]            ld      D,A             ; D,
376F: 67       [228]            ld      H,A             ; and H
3770: ED43FD81 [248]            ld      (XI),BC         ; clear XI
3774: 3AFB81   [261]            ld      A,(RADIUS)      ; load RADIUS into A
3777: 6F       [265]            ld      L,A             ; HL now contains R
3778: 22FF81   [281]            ld      (YI),HL         ; YI=RADIUS
377B: 29       [292]            add     HL,HL           ; R*2
377C: EB       [296]            ex      DE,HL           ; put HL into DE
377D: 210300   [306]            ld      HL,$0003        ; now HL is 3
3780: AF       [310]            xor     A               ; clear Carry
3781: ED52     [325]            sbc     HL,DE           ; HL=>D=3-(2*R)
3783: 220182   [341]            ld      (DC),HL         ; store D
3786: CDE537   [358]            call    DRWCRL          ; draw initial point
3789: ED5BFD81 [20]     RPTCRL: ld      DE,(XI)         ; load XI
378D: 2AFF81   [36]             ld      HL,(YI)         ; load YI
3790: CDC53D   [53]             call    CMP16           ; is YI<DI?
3793: CA9C37   [63|63]          jp      Z,RPTCL1        ; no, YI=XI
3796: F29C37   [73|73]          jp      P,RPTCL1        ; no, YI>XI
3799: C3E137   [83]             jp      ENDCRL          ; yes, so we've finished
379C: 21FD81   [10]     RPTCL1: ld      HL,XI
379F: 34       [21]             inc     (HL)            ; XI=XI+1
37A0: 2A0182   [37]             ld      HL,(DC)         ; load D
37A3: 7C       [41]             ld      A,H
37A4: B5       [45]             or      L               ; is D=0? Yes, jump over
37A5: CAC937   [55|55]          jp      Z,DLSZ
37A8: CB7C     [63]             bit     7,H             ; is D<0?
37AA: 201D     [70|75]          jr      NZ,DLSZ         ; yes, jump over
37AC: ED5BFF81 [90]             ld      DE,(YI)         ; D>0
37B0: 1B       [96]             dec     DE              ; so, YI=YI-1
37B1: ED53FF81 [116]            ld      (YI),DE         ; store YI
37B5: AF       [120]            xor     A               ; clear Carry
37B6: 2AFD81   [136]            ld      HL,(XI)
37B9: ED52     [151]            sbc     HL,DE           ; HL=XI-YI
37BB: 29       [162]            add     HL,HL
37BC: 29       [173]            add     HL,HL           ; HL=HL*4
37BD: 110A00   [183]            ld      DE,10
37C0: 19       [194]            add     HL,DE           ; HL=HL+10
37C1: ED5B0182 [214]            ld      DE,(DC)         ; load D
37C5: EB       [218]            ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
37C6: 19       [229]            add     HL,DE           ; D=D+4*(XI-YI)+10
37C7: 180F     [241]            jr      PLTCRL          ; plot next pixel
37C9: 2AFD81   [16]     DLSZ:   ld      HL,(XI)         ; load XI
37CC: 29       [27]             add     HL,HL
37CD: 29       [38]             add     HL,HL           ; XI=XI*4
37CE: 110600   [48]             ld      DE,$0006
37D1: 19       [59]             add     HL,DE
37D2: ED5B0182 [79]             ld      DE,(DC)
37D6: EB       [83]             ex      DE,HL           ; HL=D and DE=4*XI+6
37D7: 19       [94]             add     HL,DE           ; D=D+4*XI+6
37D8: 220182   [16]     PLTCRL: ld      (DC),HL         ; store new D
37DB: CDE537   [33]             call    DRWCRL          ; plot pixel
37DE: C38937   [43]             jp      RPTCRL          ; repeat
37E1: E1       [10]     ENDCRL: pop     HL
37E2: D1       [20]             pop     DE
37E3: C1       [30]             pop     BC
37E4: C9       [40]             ret                     ; return to caller
37E5: 2AF781   [16]     DRWCRL: ld      HL,(XC)
37E8: ED5BFD81 [36]             ld      DE,(XI)
37EC: 19       [47]             add     HL,DE           ; X=XC+XI
37ED: 22EF81   [63]             ld      (X1),HL         ; store X
37F0: CD0439   [80]             call    VALIDX          ; check if X is valid (0~255)
37F3: DA0738   [90|90]          jp      C,CNTCL1        ; if Carry is set, X is not valid
37F6: 2AF981   [106]            ld      HL,(YC)
37F9: ED5BFF81 [126]            ld      DE,(YI)
37FD: 19       [137]            add     HL,DE           ; Y=YC+YI
37FE: 22F181   [153]            ld      (Y1),HL         ; store Y
3801: CD0939   [170]            call    VALIDY          ; check if Y is valid (0~191)
3804: D49735   [180|187]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3807: AF       [ 4]     CNTCL1: xor     A               ; clear Carry
3808: 2AF781   [20]             ld      HL,(XC)
380B: ED5BFD81 [40]             ld      DE,(XI)
380F: ED52     [55]             sbc     HL,DE           ; X=XC-XI
3811: 22EF81   [71]             ld      (X1),HL         ; store X
3814: CD0439   [88]             call    VALIDX          ; check if X is valid (0~255)
3817: DA2B38   [98|98]          jp      C,CNTCL2        ; if Carry is set, X is not valid
381A: 2AF981   [114]            ld      HL,(YC)
381D: ED5BFF81 [134]            ld      DE,(YI)
3821: 19       [145]            add     HL,DE           ; Y=YC+YI
3822: 22F181   [161]            ld      (Y1),HL         ; store Y
3825: CD0939   [178]            call    VALIDY          ; check if Y is valid (0~191)
3828: D49735   [188|195]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
382B: 2AF781   [16]     CNTCL2: ld      HL,(XC)
382E: ED5BFD81 [36]             ld      DE,(XI)
3832: 19       [47]             add     HL,DE           ; X=XC+XI
3833: 22EF81   [63]             ld      (X1),HL         ; store X
3836: CD0439   [80]             call    VALIDX          ; check if X is valid (0~255)
3839: DA4F38   [90|90]          jp      C,CNTCL3        ; if Carry is set, X is not valid
383C: AF       [94]             xor     A               ; clear Carry
383D: 2AF981   [110]            ld      HL,(YC)
3840: ED5BFF81 [130]            ld      DE,(YI)
3844: ED52     [145]            sbc     HL,DE           ; Y=YC-YI
3846: 22F181   [161]            ld      (Y1),HL         ; store Y
3849: CD0939   [178]            call    VALIDY          ; check if Y is valid (0~191)
384C: D49735   [188|195]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
384F: AF       [ 4]     CNTCL3: xor     A               ; clear Carry
3850: 2AF781   [20]             ld      HL,(XC)
3853: ED5BFD81 [40]             ld      DE,(XI)
3857: ED52     [55]             sbc     HL,DE           ; X=XC-XI
3859: 22EF81   [71]             ld      (X1),HL         ; store X
385C: CD0439   [88]             call    VALIDX          ; check if X is valid (0~255)
385F: DA7538   [98|98]          jp      C,CNTCL4        ; if Carry is set, X is not valid
3862: AF       [102]            xor     A               ; clear Carry
3863: 2AF981   [118]            ld      HL,(YC)
3866: ED5BFF81 [138]            ld      DE,(YI)
386A: ED52     [153]            sbc     HL,DE           ; Y=YC-YI
386C: 22F181   [169]            ld      (Y1),HL         ; store Y
386F: CD0939   [186]            call    VALIDY          ; check if Y is valid (0~191)
3872: D49735   [196|203]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3875: 2AF781   [16]     CNTCL4: ld      HL,(XC)
3878: ED5BFF81 [36]             ld      DE,(YI)
387C: 19       [47]             add     HL,DE           ; X=XC+YI
387D: 22EF81   [63]             ld      (X1),HL         ; store X
3880: CD0439   [80]             call    VALIDX          ; check if X is valid (0~255)
3883: DA9738   [90|90]          jp      C,CNTCL5        ; if Carry is set, X is not valid
3886: 2AF981   [106]            ld      HL,(YC)
3889: ED5BFD81 [126]            ld      DE,(XI)
388D: 19       [137]            add     HL,DE           ; Y=YC+XI
388E: 22F181   [153]            ld      (Y1),HL         ; store Y
3891: CD0939   [170]            call    VALIDY          ; check if Y is valid (0~191)
3894: D49735   [180|187]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3897: AF       [ 4]     CNTCL5: xor     A               ; clear Carry
3898: 2AF781   [20]             ld      HL,(XC)
389B: ED5BFF81 [40]             ld      DE,(YI)
389F: ED52     [55]             sbc     HL,DE           ; X=XC-YI
38A1: 22EF81   [71]             ld      (X1),HL         ; store X
38A4: CD0439   [88]             call    VALIDX          ; check if X is valid (0~255)
38A7: DABB38   [98|98]          jp      C,CNTCL6        ; if Carry is set, X is not valid
38AA: 2AF981   [114]            ld      HL,(YC)
38AD: ED5BFD81 [134]            ld      DE,(XI)
38B1: 19       [145]            add     HL,DE           ; Y=YC+XI
38B2: 22F181   [161]            ld      (Y1),HL         ; store Y
38B5: CD0939   [178]            call    VALIDY          ; check if Y is valid (0~191)
38B8: D49735   [188|195]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
38BB: 2AF781   [16]     CNTCL6: ld      HL,(XC)
38BE: ED5BFF81 [36]             ld      DE,(YI)
38C2: 19       [47]             add     HL,DE           ; X=XC+YI
38C3: 22EF81   [63]             ld      (X1),HL         ; store X
38C6: CD0439   [80]             call    VALIDX          ; check if X is valid (0~255)
38C9: DADF38   [90|90]          jp      C,CNTCL7        ; if Carry is set, X is not valid
38CC: AF       [94]             xor     A               ; clear Carry
38CD: 2AF981   [110]            ld      HL,(YC)
38D0: ED5BFD81 [130]            ld      DE,(XI)
38D4: ED52     [145]            sbc     HL,DE           ; Y=YC-XI
38D6: 22F181   [161]            ld      (Y1),HL         ; store Y
38D9: CD0939   [178]            call    VALIDY          ; check if Y is valid (0~191)
38DC: D49735   [188|195]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
38DF: AF       [ 4]     CNTCL7: xor     A               ; clear Carry
38E0: 2AF781   [20]             ld      HL,(XC)
38E3: ED5BFF81 [40]             ld      DE,(YI)
38E7: ED52     [55]             sbc     HL,DE           ; X=XC-YI
38E9: 22EF81   [71]             ld      (X1),HL         ; store X
38EC: CD0439   [88]             call    VALIDX          ; check if X is valid (0~255)
38EF: D8       [93|99]          ret     C               ; if Carry is set, X is not valid
38F0: AF       [97]             xor     A               ; clear Carry
38F1: 2AF981   [113]            ld      HL,(YC)
38F4: ED5BFD81 [133]            ld      DE,(XI)
38F8: ED52     [148]            sbc     HL,DE           ; Y=YC-XI
38FA: 22F181   [164]            ld      (Y1),HL         ; store Y
38FD: CD0939   [181]            call    VALIDY          ; check if Y is valid (0~191)
3900: D49735   [191|198]        call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
3903: C9       [201]            ret                     ; return to caller
                        
                        ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
                        ; input: HL (value to check), can be negative
                        ; output: CARRY flag: reset => VALID  //  set => NOT VALID
                        ; destroys: A
3904: AF       [ 4]     VALIDX: xor     A               ; reset A
3905: B4       [ 8]             or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
3906: C8       [13|19]          ret     Z               ; yes, we can return (C is clear)
3907: 37       [17]             scf                     ; set Carry flag to raise error
3908: C9       [27]             ret                     ; return to caller
                        
3909: AF       [ 4]     VALIDY: xor     A               ; reset A
390A: B4       [ 8]             or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
390B: 2802     [15|20]          jr      Z,CNTVALY       ; yes, continue checking
390D: 37       [19]             scf                     ; no, raise error by setting Carry flag
390E: C9       [29]             ret                     ; return to caller
390F: 7D       [ 4]     CNTVALY:ld      A,L
3910: FEC0     [11]             cp      $C0             ; is Y<192? Carry is set if Y<192
3912: 3F       [15]             ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
3913: C9       [25]             ret                     ; return to caller
                        
                        
                        ; clear VIDEOBUFF before using it as temp buffer
3914: AF       [ 4]     CLRVDBF:xor     A               ; clear A
3915: C5       [15]             push    BC              ; store BC
3916: E5       [26]             push    HL              ; store HL
3917: 21EF81   [36]             ld      HL,TMPBFR1      ; address of 1st cell
391A: 0606     [43]             ld      B,$06           ; 6 cells
391C: 77       [ 7]     RPTCVB1:ld      (HL),A          ; clear cell
391D: 23       [13]             inc     HL              ; next cell
391E: 10FC     [21|26]          djnz    RPTCVB1         ; repeat
3920: 0628     [28]             ld      B,$28           ; 40 cells
3922: 21F781   [38]             ld      HL,VIDEOBUFF    ; address of 1st cell
3925: 77       [ 7]     RPTCVB2:ld      (HL),A          ; clear cell
3926: 23       [13]             inc     HL              ; next cell
3927: 10FC     [21|26]          djnz    RPTCVB2         ; repeat
3929: E1       [31]             pop     HL              ; retrieve HL
392A: C1       [41]             pop     BC              ; retrieve BC
392B: C9       [51]             ret                     ; return to caller
                        
                        
                        ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
                        ; commands. If not present, the default foreground color will be used
392C: 3AED81   [13]     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
392F: 32F381   [26]             ld      (TMPBFR3),A     ; store into temp buffer
3932: 2B       [32]             dec     HL              ; dec 'cos GETCHR INCs
3933: CD6A1A   [49]             call    GETCHR          ; Get next character
3936: C8       [54|60]          ret     Z               ; return foreground color if nothing follows
3937: CD4718   [71]             call    CHKSYN          ; Make sure ',' follows
393A: 2C                        defb    ','
393B: CD6527   [88]             call    GETINT          ; get value
393E: CD2A33   [105]            call    CHKCLR0         ; check if color is in range 0~15
3941: 32F381   [118]            ld      (TMPBFR3),A     ; store color into temp buffer
3944: C9       [128]            ret                     ; return to caller
                        
                        
                        ; no graphics mode error: raised when a graphics command is invoked
                        ; out of graphic 2 mode.
3945: 1E2A     [ 7]     GMERR:  ld      E,GM            ; load Graphics Mode Error flag
3947: C37915   [17]             jp      ERROR           ; print error
                        
                        
                        ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
                        ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
                        ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
                        ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
                        ; PORT 1 acts as a char device; PORT 2 acts as a block device
                        ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
                        ; they are assumed to be 8,0,1 resp.
81F7:                   PRTNUM  equ     VIDEOBUFF
81F8:                   BPS     equ     VIDEOBUFF+$01
81FA:                   DATABT  equ     BPS+$02
81FB:                   PARBT   equ     DATABT+$01
81FC:                   STPBT   equ     PARBT+$01
81FD:                   SIOBFR  equ     STPBT+$01
394A: CD6527   [17]     SERIAL: call    GETINT          ; get port #
394D: A7       [21]             and     A               ; is it zero?
394E: CA351B   [31|31]          jp      Z,FCERR         ; yes, error
3951: FE03     [38]             cp      $03             ; is it 1 or 2?
3953: D2343B   [48|48]          jp      NC,SCERR        ; no, error
3956: 32F781   [61]             ld      (PRTNUM),A      ; store port number into a temp buffer
3959: CD4718   [78]             call    CHKSYN          ; Make sure ',' follows
395C: 2C                        defb    ','
395D: CD3A1B   [95]             call    ATOH            ; get bps (returned into DE)
3960: 7A       [99]             ld      A,D             ; move MSB into A
3961: B3       [103]            or      E               ; LSB OR MSB, to check if bps=0
3962: 203A     [110|115]        jr      NZ,CNTSER       ; no, continue checking
                                ; if baud rate is 0, then close the serial comm.
3964: 3AF781   [13]     RSTSER1:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
3967: 3D       [17]             dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
3968: C622     [24]             add     SIO_CA          ; find correct channel
396A: 4F       [28]             ld      C,A             ; store serial channel
396B: F3       [32]             di                      ; disable INTs
396C: AF       [36]             xor     A               ; reset A
396D: 1601     [43]             ld      D,$01           ; start from WR1
396F: 0605     [50]             ld      B,$05           ; 5 registers
3971: ED51     [12]     RPTRSSR:out     (C),D           ; select register
3973: ED79     [24]             out     (C),A           ; reset register
3975: 14       [28]             inc     D               ; next register
3976: 10F9     [36|41]          djnz    RPTRSSR         ; repeat
3978: 3E30     [43]             ld      A,%00110000     ; write into WR0: error reset, select WR0
397A: ED79     [55]             out     (C),A           ; send command to serial channel
397C: 3E18     [62]             ld      A,%00011000     ; write into WR0: channel reset
397E: ED79     [74]             out     (C),A           ; send command to serial channel
3980: FB       [78]             ei                      ; re-enable INTs
3981: E5       [89]             push    HL              ; store HL
3982: 212E82   [99]             ld      HL,SERIALS_EN   ; serials enabled status byte
3985: DB01     [110]            in      A,(PIO_DB)      ; read status LEDs
3987: CB41     [118]            bit     0,C             ; check serial port
3989: 2009     [125|130]        jr      NZ,SRPT2        ; if bit is set, jump to port 2
398B: CBB7     [133]            res     6,A             ; it's port 1
398D: CBA7     [141]            res     4,A             ; remove possible error LED
398F: CB86     [156]            res     0,(HL)          ; disable port 1
3991: C39A39   [166]            jp      SERLED          ; jump over
3994: CBBF     [ 8]     SRPT2:  res     7,A             ; it's port 2
3996: CBAF     [16]             res     5,A             ; remove possible error LED
3998: CB8E     [31]             res     1,(HL)          ; disable port 2
399A: D301     [11]     SERLED: out     (PIO_DB),A      ; send new configuration
399C: E1       [21]             pop     HL              ; retrieve HL
399D: C9       [31]             ret                     ; return to caller
                                ; check if bps=1, meaning reactivate RX on serial
399E: 7A       [ 4]     CNTSER: ld      A,D
399F: B2       [ 8]             or      D               ; check if bps<>1 by first checking D=0
39A0: 203B     [15|20]          jr      NZ,CNTSER2      ; if not, jump over
39A2: 7B       [19]             ld      A,E             ; then by checking that
39A3: FE01     [26]             cp      $01             ; E=1
39A5: 2036     [33|38]          jr      NZ,CNTSER2      ; if not, jump over
39A7: 3AF781   [46]             ld      A,(PRTNUM)      ; load port number
39AA: FE01     [53]             cp      $01             ; is it port 1? (currently do NOT support on port 2)
39AC: C2343B   [63|63]          jp      NZ,SCERR        ; no, raise error and exit 
39AF: 57       [67]             ld      D,A             ; store port on D
39B0: 3A2E82   [80]             ld      A,(SERIALS_EN)  ; load address of serial status cell
39B3: A2       [84]             and     D               ; check status
39B4: CA343B   [94|94]          jp      Z,SCERR         ; port not open, raise error
39B7: F3       [98]             di                      ; disable INTs
39B8: 7A       [102]            ld      A,D             ; move port # into A
39B9: 5F       [106]            ld      E,A             ; store original A into E
39BA: 87       [110]            add     A
39BB: 87       [114]            add     A               ; move A to left times 2
39BC: 57       [118]            ld      D,A             ; move value into D
39BD: 3A2E82   [131]            ld      A,(SERIALS_EN)  ; load serial status byte
39C0: B2       [135]            or      D               ; re-enable RX
39C1: 322E82   [148]            ld      (SERIALS_EN),A  ; store new serial status
39C4: 7B       [152]            ld      A,E             ; recover port #
39C5: 3D       [156]            dec     A               ; check port
39C6: 200A     [163|168]        jr      NZ,CNTRX2       ; port is #2
39C8: CD8D01   [180]            call    SIO_A_EI        ; re-enable RX on port 1
39CB: DB01     [191]            in      A,(PIO_DB)      ; load status LEDs
39CD: CBA7     [199]            res     4,A             ; remove error LED
39CF: C3D939   [209]            jp      RXEND           ; terminate setting
39D2: CD8D01   [17]     CNTRX2: call    SIO_A_EI        ; re-enable RX on port 2 -> CURRENTLY only port 1 is supported
39D5: DB01     [28]             in      A,(PIO_DB)      ; load status LEDs
39D7: CBAF     [36]             res     5,A             ; remove error LED
39D9: D301     [11]     RXEND:  out     (PIO_DB),A      ; set new status for LEDs
39DB: FB       [15]             ei                      ; re-enable INTs
39DC: C9       [25]             ret                     ; return to caller
                                ; set serial port comm.
39DD: D5       [11]     CNTSER2:push    DE              ; store BPS
39DE: 3AF781   [24]             ld      A,(PRTNUM)      ; load port number
39E1: 57       [28]             ld      D,A             ; move port # into D
39E2: 3A2E82   [41]             ld      A,(SERIALS_EN)  ; check if serial port is already open
39E5: A2       [45]             and     D               ; by ANDing A with D
39E6: D1       [55]             pop     DE              ; retrieve BPS
39E7: CAEF39   [65|65]          jp      Z,CNTSER3       ; not open, continue
39EA: 1E2E     [72]             ld      E,SA            ; already open, so raise a "Serial Port Already Error"
39EC: C37915   [82]             jp      ERROR           ; and leave
39EF: E5       [11]     CNTSER3:push    HL              ; store HL   
39F0: 2100E1   [21]             ld      HL,$E100        ; check bps. start with HL=57,600
39F3: CDC53D   [38]             call    CMP16           ; is bps<=57,600?
39F6: E1       [48]             pop     HL              ; but first, recover HL
39F7: DA343B   [58|58]          jp      C,SCERR         ; no (bps>57,600) then error
39FA: ED53F881 [78]             ld      (BPS),DE        ; store bps
39FE: 2B       [84]             dec     HL              ; dec 'cos GETCHR INCs
39FF: CD6A1A   [101]            call    GETCHR          ; Get next character
3A02: CA393A   [111|111]        jp      Z,DEFSER        ; defaults if nothing follows
3A05: CD4718   [128]            call    CHKSYN          ; Make sure ',' follows
3A08: 2C                        defb    ','
3A09: CD6527   [145]            call    GETINT          ; get data bits
3A0C: FE05     [152]            cp      $05             ; is it <5?
3A0E: DA343B   [162|162]        jp      C,SCERR         ; yes, error
3A11: FE09     [169]            cp      $09             ; is it >=9?
3A13: D2351B   [179|179]        jp      NC,FCERR        ; no, error
3A16: 32FA81   [192]            ld      (DATABT),A      ; store data bits
3A19: CD4718   [209]            call    CHKSYN          ; Make sure ',' follows
3A1C: 2C                        defb    ','
3A1D: CD6527   [226]            call    GETINT          ; get parity bits
3A20: FE03     [233]            cp      A,$03           ; check if parity is in range 0~2
3A22: D2343B   [243|243]        jp      NC,SCERR        ; no, error
3A25: 32FB81   [256]            ld      (PARBT),A       ; store parity
3A28: CD4718   [273]            call    CHKSYN          ; Make sure ',' follows
3A2B: 2C                        defb    ','
3A2C: CD6527   [290]            call    GETINT          ; get stop bits
3A2F: FE03     [297]            cp      $03             ; is it >=3?
3A31: D2343B   [307|307]        jp      NC,SCERR        ; yes, error
3A34: 32FC81   [320]            ld      (STPBT),A       ; store stop bits
3A37: 180D     [332]            jr      SETSER          ; jump to set serial
3A39: 3E08     [ 7]     DEFSER: ld      A,$08           ; 8 bits for data
3A3B: 32FA81   [20]             ld      (DATABT),A
3A3E: AF       [24]             xor     A               ; no parity bit
3A3F: 32FB81   [37]             ld      (PARBT),A
3A42: 3C       [41]             inc     A               ; 1 bit for stop
3A43: 32FC81   [54]             ld      (STPBT),A
                                ; check if bps are legal
3A46: E5       [11]     SETSER: push    HL              ; store HL 
3A47: D5       [22]             push    DE              ; store DE
3A48: DDE5     [37]             push    IX              ; store IX
3A4A: DD210F3B [51]             ld      IX,SUP_BPS      ; allowed BPSs
3A4E: 060B     [58]             ld      B,$0B           ; 11 items
3A50: 0E00     [65]             ld      C,$00           ; reset pointer
3A52: 2AF881   [16]     CKBPS:  ld      HL,(BPS)        ; load BPS
3A55: DD5E00   [35]             ld      E,(IX+0)        ; load LSB of item
3A58: DD5601   [54]             ld      D,(IX+1)        ; load MSB of item
3A5B: CDC53D   [71]             call    CMP16           ; is it equal?
3A5E: CA6B3A   [81|81]          jp      Z,FNDBPS        ; yes, found correspondance
3A61: DD23     [91]             inc     IX
3A63: DD23     [101]            inc     IX              ; no, go to next entry
3A65: 0C       [105]            inc     C               ; increment pointer
3A66: 10EA     [113|118]        djnz    CKBPS           ; repeat for 10 entries
3A68: C3303B   [123]            jp      SCERR1          ; if nothing found, raise an error
3A6B: 3AF781   [13]     FNDBPS: ld      A,(PRTNUM)      ; check serial port
3A6E: 3D       [17]             dec     A               ; is it port 1?
3A6F: CA753A   [27|27]          jp      Z,SET_P1        ; yes, set port 1
3A72: C3303B   [37]             jp      SCERR1          ; at the moment, only port 1 can be configured
3A75:                   SET_P1: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
                                ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
                                ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
                                ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
3A75: F3       [ 4]             di                      ; disable INTs
3A76: 0600     [11]             ld      B,$00           ; reset B
3A78: 21253B   [21]             ld      HL,CTC_CFG      ; address of first CTC divider
3A7B: 09       [32]             add     HL,BC           ; adjust for correct CTC divider
3A7C: 3E47     [39]             ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
                                                        ; start upon loading time constant, time constant follows, sw reset, command word
3A7E: D310     [50]             out     (CTC_CH0),A     ; configure CTC channel 0
3A80: 7E       [57]             ld      A,(HL)          ; load CTC divider
3A81: D310     [68]             out     (CTC_CH0),A     ; send divider
                                ; configure SIO
3A83: 21FA02   [78]             ld      HL,SIO_A_SETS   ; load default settings for SIO
3A86: 11FD81   [88]             ld      DE,SIOBFR       ; into a temp buffer
3A89: 010A00   [98]             ld      BC,$000A        ; 10 items to copy
3A8C: EDB0     [114|21]         ldir                    ; copy SIO settings into TEMP buffer
3A8E: 3A0282   [127]            ld      A,(SIOBFR+5)    ; load WR5 setting
3A91: 47       [131]            ld      B,A             ; move it into B
3A92: 3AFA81   [144]            ld      A,(DATABT)      ; load DATA bits
3A95: FE05     [151]            cp      $05             ; is it 5 bits?
3A97: 2006     [158|163]        jr      NZ,BITS6        ; no, jump over
3A99: CBB0     [166]            res     6,B
3A9B: CBA8     [174]            res     5,B             ; set D6 & D5 to 0
3A9D: 1819     [186]            jr      SETPAR          ; jump to set parity
3A9F: FE06     [ 7]     BITS6:  cp      $06             ; is it 6 bits?
3AA1: 2006     [14|19]          jr      NZ,BITS7        ; no, jump over
3AA3: CBF0     [22]             set     6,B
3AA5: CBA8     [30]             res     5,B             ; set D6 & D5 to 1,0
3AA7: 180F     [42]             jr      SETPAR          ; jump to set parity
3AA9: FE07     [ 7]     BITS7:  cp      $07             ; is it 7 bits?
3AAB: 2007     [14|19]          jr      NZ,BITS8        ; no, jump over
3AAD: CBB0     [22]             res     6,B
3AAF: CBE8     [30]             set     5,B             ; set D6 & D5 to 0,1
3AB1: C3B83A   [40]             jp      SETPAR          ; jump to set parity
3AB4: CBF0     [ 8]     BITS8:  set     6,B
3AB6: CBE8     [16]             set     5,B             ; set D6 & D5 to 1,1
3AB8: 78       [ 4]     SETPAR: ld      A,B
3AB9: 320282   [17]             ld      (SIOBFR+5),A    ; save DATA bits
3ABC: E660     [24]             and     %01100000       ; filter only D5&D6 bits
3ABE: 87       [28]             add     A,A             ; shift left times 1
3ABF: 322F82   [41]             ld      (SERABITS),A    ; store for SIO_A_EI & SIO_A_DI functions
3AC2: 3AFC81   [54]             ld      A,(STPBT)       ; load STOP bits
3AC5: 87       [58]             add     A,A
3AC6: 87       [62]             add     A,A             ; 2 left shifts
3AC7: 47       [66]             ld      B,A             ; move forming byte into B
3AC8: 3AFB81   [79]             ld      A,(PARBT)       ; load PARITY setting
3ACB: A7       [83]             and     A               ; is it 0?
3ACC: CAD73A   [93|93]          jp      Z,STRPAR        ; yes, jump over
3ACF: CBC0     [101]            set     0,B             ; set PARITY on
3AD1: 3D       [105]            dec     A               ; is parity ODD?
3AD2: CAD73A   [115|115]        jp      Z,STRPAR        ; yes, so jump over
3AD5: CBC8     [123]            set     1,B             ; no, it's EVEN so set the corresponding bit
3AD7: 3A0082   [13]     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
3ADA: E6F0     [20]             and     %11110000       ; reset STOP & PARITY bits
3ADC: B0       [24]             or      B               ; set new STOP & PARITY bits
3ADD: 320082   [37]             ld      (SIOBFR+3),A    ; store new value
                                ;set up TX and RX:
                                ; the followings are settings for channel A
3AE0: 21FD81   [47]             ld      HL,SIOBFR       ; settings for SIO ch. A
3AE3: 0606     [54]             ld      B,$06           ; 6 bytes to send
3AE5: 0E22     [61]             ld      C,SIO_CA        ; I/O address of SIO ch.A
3AE7: EDB3     [77|21]          otir                    ; send bytes to SIO
                                ; the following are settings for channel B (don't need to load HL since settings are contigous)
3AE9: 0604     [84]             ld      B,$04           ; other 4 bytes to send
3AEB: 0E23     [91]             ld      C,SIO_CB        ; I/O address of SIO ch.B
3AED: EDB3     [107|21]         otir                    ; send bytes to SIO
                                ; the following are settings for channel A
3AEF: 3E01     [114]            ld      A,$01           ; write into WR0: select WR1
3AF1: D322     [125]            out     (SIO_CA),A
3AF3: 3E18     [132]            ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
                                                        ; buffer overrun is special condition
3AF5: D322     [143]            out     (SIO_CA),A
3AF7: CD8D01   [160]            call    SIO_A_EI        ; enable RX on SIO channel A
3AFA: 212E82   [10]     EXITSER:ld      HL,SERIALS_EN
3AFD: CBC6     [25]             set     0,(HL)          ; set serial port 1 status ON
3AFF: CBD6     [40]             set     2,(HL)          ; set serial port 1 RX ON
                                ; back to normal running
3B01: FB       [44]             ei                      ; re-enable INTs
3B02: DB01     [55]             in      A,(PIO_DB)      ; load status LEDs
3B04: CBF7     [63]             set     6,A             ; set status LED on
3B06: CBA7     [71]             res     4,A             ; set error LED off
3B08: D301     [82]             out     (PIO_DB),A      ; send new configuration
3B0A: DDE1     [96]             pop     IX              ; retrieve IX
3B0C: D1       [106]            pop     DE              ; retrieve DE
3B0D: E1       [116]            pop     HL              ; retrieve HL
3B0E: C9       [126]            ret                     ; return to caller
                        
                        ; allowed bps (Bauds per second)
3B0F: 00E10096          SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
3B13: 8070004B          
3B17: 40388025          
3B1B: C012100E          
3B1F: 6009B004          
3B23: 5802              
                        ; corresponding CTC divider
3B25: 02030406          CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
3B29: 080C1820          
3B2D: 3060C0            
                        
                        ; serial configuration error
3B30: DDE1     [14]     SCERR1: pop     IX              ; retrieve IX
3B32: D1       [24]             pop     DE              ; retrieve DE
3B33: E1       [34]             pop     HL              ; retrieve HL
3B34: 1E2C     [ 7]     SCERR:  ld      E,SC            ; Serial Configuration Error
3B36: C37915   [17]             jp      ERROR           ; print error
                        
                        ; check for direct mode
3B39: E5       [11]     DIRMOD: push    HL              ; Save code string address
3B3A: 2AAF80   [27]             ld      HL,(LINEAT)     ; Get current line number
3B3D: 23       [33]             inc     HL              ; -1 means direct statement
3B3E: 7C       [37]             ld      A,H
3B3F: B5       [41]             or      L
3B40: E1       [51]             pop     HL              ; Restore code string address
3B41: C25B3B   [61|61]          jp      NZ,HLPERR       ; raise error if in indirect mode
3B44: C9       [71]             ret
                        
                        
                        ; HELP lists the line program where an error was found
3B45: CD393B   [17]     HELP:   call    DIRMOD          ; check if in direct mode
3B48: E5       [28]             push    HL              ; store HL
3B49: 2AB180   [44]             ld      HL,(HLPLN)      ; load HELP line
3B4C: 23       [50]             inc     HL              ; increment HL
3B4D: 7C       [54]             ld      A,H
3B4E: B5       [58]             or      L               ; check if there is a line into the HELP reg.
3B4F: E1       [68]             pop     HL
3B50: CA5B3B   [78|78]          jp      Z,HLPERR        ; no line found, raise error
3B53: ED5BB180 [98]             ld      DE,(HLPLN)      ; recover line
3B57: C1       [108]            pop     BC              ; remove BC from stack since it's not needed anymore for LIST
3B58: C3D518   [118]            jp      LST01H          ; jump to list line
3B5B: 1E30     [ 7]     HLPERR: ld      E,HP            ; HELP call error
3B5D: C37915   [17]             jp      ERROR           ; raise error
                        
                        
                        ; KEY command to list/modify function keys
3B60: 2B       [ 6]     KEY:    dec     HL              ; dec 'cos GETCHR INCs
3B61: CD6A1A   [23]             call    GETCHR          ; Get next character
3B64: CAE43B   [33|33]          jp      Z,LSTKEYS       ; jump if nothing follows
                                                        ; change FN keys
3B67: CD6527   [50]             call    GETINT          ; get a number
3B6A: A7       [54]             and     A               ; is it 0?
3B6B: 2010     [61|66]          jr      NZ,KEYCH        ; no, jump over         
3B6D: E5       [72]             push    HL              ; yes - reset FN keys to defaults
3B6E: D5       [83]             push    DE              ; store HL & DE
3B6F: 215514   [93]             ld      HL,DEFFNKS      ; pointer to default FN keys texts
3B72: 11B380   [103]            ld      DE,FNKEYS       ; pointer to destination
3B75: 018000   [113]            ld      BC,$0080        ; 128 chars to be copied
3B78: EDB0     [129|21]         ldir                    ; restore default texts
3B7A: D1       [139]            pop     DE              ; retrieve DE
3B7B: E1       [149]            pop     HL              ; retrieve HL
3B7C: C9       [159]            ret                     ; return to caller
3B7D: FE09     [ 7]     KEYCH:  cp      $09             ; is it >= 9?
3B7F: D26515   [17|17]          jp      NC,SNERR        ; yes - syntax error
3B82: 3D       [21]             dec     A               ; FN key in range 0~7
3B83: 87       [25]             add     A,A             ; multiply A...
3B84: 87       [29]             add     A,A             ; ... times 4...
3B85: 87       [33]             add     A,A             ; ... to get the correct...
3B86: 87       [37]             add     A,A             ; ... offset fo FN key text
3B87: 32EF81   [50]             ld      (TMPBFR1),A     ; store FN key offset...
3B8A: AF       [54]             xor     A               ; ...in a...
3B8B: 32F081   [67]             ld      (TMPBFR1+1),A   ; ...16-bit register
3B8E: CD4718   [84]             call    CHKSYN          ; Make sure ',' follows
3B91: 2C                        defb    ','
3B92: 444D     [92]             ld      BC,HL           ; copy address into BC
3B94: CDF11E   [109]            call    EVAL            ; Evaluate expression (in E there is the length)
3B97: E5       [120]            push    HL              ; store string pointer
3B98: 3A9281   [133]            ld      A,(TYPE)        ; Get variable type
3B9B: B7       [137]            or      A               ; Is it a string variable?
3B9C: CA6515   [147|147]        jp      Z,SNERR         ; no - syntax error
3B9F: CD2A25   [164]            call    GSTRCU          ; Current string to pool
3BA2: CD3C2D   [181]            call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
3BA5: 7B       [185]            ld      A,E             ; copy length into A
3BA6: FE11     [192]            cp      $11             ; is length > 16?
3BA8: DAAD3B   [202|202]        jp      C,DECLN1        ; no, jump over
3BAB: 1E10     [209]            ld      E,$10           ; yes, so set length to 16
3BAD: 3E10     [ 7]     DECLN1: ld      A,$10           ; calculate how many...
3BAF: 93       [11]             sub     E               ; ...null chars needed to fill up...
3BB0: 57       [15]             ld      D,A             ; ...the FN key text
3BB1: C5       [26]             push    BC              ; store address of string 
3BB2: ED4BEF81 [46]             ld      BC,(TMPBFR1)    ; load FN key offset
3BB6: 21B380   [56]             ld      HL,FNKEYS       ; load address of FN keys texts
3BB9: 09       [67]             add     HL,BC           ; get corrected address
3BBA: C1       [77]             pop     BC              ; retrieve address of string chars
3BBB: 0A       [ 7]     CPKEY:  ld      A,(BC)          ; load char from string
3BBC: FE0D     [14]             cp      CR              ; return?
3BBE: CACB3B   [24|24]          jp      Z,CPKEY2        ; yes, store char
3BC1: FE7B     [31]             cp      $7B             ; if char > "z" ?
3BC3: D26515   [41|41]          jp      NC,SNERR        ; yes - syntax error
3BC6: FE20     [48]             cp      $20             ; is char < space?
3BC8: DA6515   [58|58]          jp      C,SNERR         ; yes - syntax error
3BCB: FE61     [ 7]     CPKEY2: cp      $61             ; is it >= 'a'?
3BCD: DAD23B   [17|17]          jp      C,CPKEY3        ; no, continue
3BD0: E65F     [24]             and     %01011111       ; set letters to uppercase
3BD2: 77       [ 7]     CPKEY3: ld      (HL),A          ; store char
3BD3: 23       [13]             inc     HL              ; next string char
3BD4: 03       [19]             inc     BC              ; next free cell
3BD5: 1D       [23]             dec     E               ; decrement E
3BD6: 20E3     [30|35]          jr      NZ,CPKEY        ; repeat until 0
3BD8: AF       [34]             xor     A               ; null char
3BD9: 14       [38]             inc     D               ; +1 to decrement below
3BDA: 15       [ 4]     CPKEY1: dec     D               ; how many null chars to insert?
3BDB: CAE23B   [14|14]          jp      Z,CPKYEND       ; no more nulls, so exit
3BDE: 77       [21]             ld      (HL),A          ; store it
3BDF: 23       [27]             inc     HL              ; next cell
3BE0: 18F8     [39]             jr      CPKEY1          ; repeat
3BE2: E1       [10]     CPKYEND:pop     HL              ; retrieve pointer to string
3BE3: C9       [20]             ret                     ; return to caller
                                                        ; list FN keys
3BE4: E5       [11]     LSTKEYS:push    HL              ; Save code string address
3BE5: 2AAF80   [27]             ld      HL,(LINEAT)     ; Get current line number
3BE8: 23       [33]             inc     HL              ; -1 means direct statement
3BE9: 7C       [37]             ld      A,H
3BEA: B5       [41]             or      L
3BEB: E1       [51]             pop     HL              ; Restore code string address
3BEC: C26515   [61|61]          jp      NZ,SNERR        ; raise error if in indirect mode
3BEF: E5       [72]             push    HL              ; store HL
3BF0: D5       [83]             push    DE              ; store DE
3BF1: 21B380   [93]             ld      HL,FNKEYS       ; load starting address of FN keys text
3BF4: 0E01     [100]            ld      C,$01           ; 8 function keys
3BF6: 0610     [ 7]     PRTK4:  ld      B,$10           ; 16 chars each
3BF8: 11973C   [10]     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
3BFB: CD883C   [27]             call    PRTCKEY         ; print it
3BFE: 79       [31]             ld      A,C             ; load FN key
3BFF: C630     [38]             add     $30             ; get number in ASCI code
3C01: CD5218   [55]             call    OUTC            ; print it
3C04: 119C3C   [65]             ld      DE,CHKEY2       ; message ": ""
3C07: CD883C   [82]             call    PRTCKEY         ; print it
3C0A: 3E01     [89]             ld      A,$01           ; " opened
3C0C: 32EF81   [102]            ld      (TMPBFR1),A
3C0F: 7E       [ 7]     LDKEY:  ld      A,(HL)          ; retrieve char
3C10: A7       [11]             and     A               ; is it zero?
3C11: CA243C   [21|21]          jp      Z,CNTLTK        ; yes, go next char
3C14: CD703C   [38]             call    OPNQT           ; check if quotes are opened
3C17: FE22     [45]             cp      $22             ; check if char is "?
3C19: CA393C   [55|55]          jp      Z,PRTCHR        ; yes, print "chr$("
3C1C: FE0D     [62]             cp      CR              ; is it a CR?
3C1E: CA393C   [72|72]          jp      Z,PRTCHR        ; yes, print "chr$("
3C21: CD5218   [17]     PRTK3:  call    OUTC            ; no, just print it
3C24: 23       [ 6]     CNTLTK: inc     HL              ; next char
3C25: 10E8     [14|19]          djnz    LDKEY           ; continue until finished
3C27: CD5E3C   [31]             call    CLSQT           ; check if quotes are still open
3C2A: 3E0D     [38]             ld      A,CR            ; go next line
3C2C: CD5218   [55]             call    OUTC            ; print it
3C2F: 0C       [59]             inc     C               ; next FN key
3C30: 79       [63]             ld      A,C             ; check if...
3C31: FE09     [70]             cp      $09             ; finished keys?
3C33: DAF63B   [80|80]          jp      C,PRTK4         ; no, repeat 1 more time
3C36: D1       [90]             pop     DE              ; retrieve DE
3C37: E1       [100]            pop     HL              ; retrieve HL
3C38: C9       [110]            ret                     ; return to caller
                        
3C39: E5       [11]     PRTCHR: push    HL              ; store HL
3C3A: CD5E3C   [28]             call    CLSQT           ; check if quotes are closed
3C3D: 3E2B     [35]             ld      A,'+'           ; '+' char
3C3F: CD5218   [52]             call    OUTC            ; print it
3C42: 119F3C   [62]             ld      DE,CHKEY3       ; address of "CHR$("
3C45: CD883C   [79]             call    PRTCKEY         ; print it
3C48: E1       [89]             pop     HL              ; recover HL
3C49: 23       [95]             inc     HL              ; next char
3C4A: 05       [99]             dec     B               ; increment char counter
3C4B: 11A53C   [109]            ld      DE,CHKEY4       ; load address of RETURN
3C4E: 7E       [116]            ld      A,(HL)          ; load char
3C4F: FE0D     [123]            cp      CR              ; is it a RETURN?
3C51: 2003     [130|135]        jr      NZ,PTCHR1       ; no, jump over
3C53: 11A83C   [140]            ld      DE,CHKEY5       ; yes, load address of "
3C56: CD883C   [17]     PTCHR1: call    PRTCKEY         ; print it
3C59: 3E29     [24]             ld      A,')'           ; char )
3C5B: C3213C   [34]             jp      PRTK3           ; continue
                        
3C5E: F5       [11]     CLSQT:  push    AF              ; store A
3C5F: 3AEF81   [24]             ld      A,(TMPBFR1)     ; quote status
3C62: A7       [28]             and     A               ; are they closed?
3C63: 2809     [35|40]          jr      Z,CLSQT1        ; if yes, return
3C65: 3E22     [42]             ld      A,$22           ; no, so close them
3C67: CD5218   [59]             call    OUTC            ; print "
3C6A: AF       [63]             xor     A               ; set quotes
3C6B: 32EF81   [76]             ld      (TMPBFR1),A     ; as closed
3C6E: F1       [10]     CLSQT1: pop     AF              ; retrieve A
3C6F: C9       [20]             ret                     ; return to caller
                        
3C70: F5       [11]     OPNQT:  push    AF              ; store A
3C71: 3AEF81   [24]             ld      A,(TMPBFR1)     ; quote status
3C74: A7       [28]             and     A               ; are they open?
3C75: 200F     [35|40]          jr      NZ,OPNQT1       ; if yes, return
3C77: 3E2B     [42]             ld      A,'+'           ; no, so add '+
3C79: CD5218   [59]             call    OUTC            ; print it
3C7C: 3E22     [66]             ld      A,$22           ; and then open quotes
3C7E: CD5218   [83]             call    OUTC            ; print them
3C81: 3E01     [90]             ld      A,$01           ; set quotes
3C83: 32EF81   [103]            ld      (TMPBFR1),A     ; as opened
3C86: F1       [10]     OPNQT1: pop     AF              ; retrieve A
3C87: C9       [20]             ret                     ; return to caller
                        
3C88: F5       [11]     PRTCKEY:push    AF              ; store original char
3C89: 1A       [ 7]     PRTK1:  ld      A,(DE)          ; load char
3C8A: A7       [11]             and     A               ; is it 0?
3C8B: CA953C   [21|21]          jp      Z,PRTEND        ; yes, finished printing
3C8E: CD5218   [38]             call    OUTC            ; no, print char
3C91: 13       [44]             inc     DE              ; next char
3C92: C3893C   [54]             jp      PRTK1           ; repeat
3C95: F1       [10]     PRTEND: pop     AF              ; retrieve AF
3C96: C9       [20]             ret                     ; return to caller
                        
3C97: 4B455920          CHKEY1: defb    "KEY ",0
3C9B: 00                
3C9C: 3A2200            CHKEY2: defb    ":",34,0
3C9F: 63687224          CHKEY3: defb    "chr$(",0
3CA3: 2800              
3CA5: 313300            CHKEY4: defb    "13",0
3CA8: 333400            CHKEY5: defb    "34",0
                        
                        
                        ; HEX$(nn) Convert 16 bit number to Hexadecimal string
3CAB: CDE21E   [17]     HEX: 	call	TSTNUM          ; Verify it's a number
3CAE: CD201B   [34]             call	DEINT           ; Get integer -32768 to 32767
3CB1: C5       [45]             push	BC              ; Save contents of BC
3CB2: 213082   [55]             ld      HL,PBUFF        ; load address of PBUFF into HL
3CB5: 7A       [59]             ld      A,D             ; Get MSB into A
3CB6: B7       [63]             or      A               ; OR with LSB to see if param=0
3CB7: 280C     [70|75]          jr      Z,HEX2          ; Skip output if both high digits are zero
3CB9: CDE13C   [87]             call    BYT2ASC         ; Convert D to ASCII
3CBC: 78       [91]             ld      A,B             ; cechk if B
3CBD: FE30     [98]             cp      '0'             ; is 0
3CBF: 2802     [105|110]        jr      Z,HEX1          ; Don't store high digit if zero
3CC1: 70       [112]            ld      (HL),B          ; Store it to PBUFF
3CC2: 23       [118]            inc     HL              ; Next location
3CC3: 71       [ 7]     HEX1:   ld      (HL),C          ; Store C to PBUFF+1
3CC4: 23       [13]             inc     HL              ; Next location
3CC5: 7B       [ 4]     HEX2:   ld      A,E             ; Get lower byte
3CC6: CDE13C   [21]             call    BYT2ASC         ; Convert E to ASCII
3CC9: 7A       [25]             ld      A,D
3CCA: B7       [29]             or      A
3CCB: 2005     [36|41]          jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
3CCD: 78       [40]             ld      A,B
3CCE: FE30     [47]             cp      '0'             ; If high digit of lower byte is zero then don't print
3CD0: 2802     [54|59]          jr      Z,HEX4
3CD2: 70       [ 7]     HEX3:   ld      (HL),B          ; to PBUFF+2
3CD3: 23       [13]             inc     HL              ; Next location
3CD4: 71       [ 7]     HEX4:   ld      (HL),C          ; to PBUFF+3
3CD5: 23       [13]             inc     HL              ; PBUFF+4 to zero
3CD6: AF       [17]             xor     A               ; Terminating character
3CD7: 77       [24]             ld      (HL),A          ; Store zero to terminate
3CD8: 23       [30]             inc     HL              ; Make sure PBUFF is terminated
3CD9: 77       [37]             ld      (HL),A          ; Store the double zero there
3CDA: C1       [47]             pop     BC              ; Get BC back
3CDB: 213082   [57]             ld      HL,PBUFF        ; Reset to start of PBUFF
3CDE: C37723   [67]             jp      STR1            ; Convert the PBUFF to a string and return it
3CE1: 47       [ 4]     BYT2ASC	ld      B,A             ; Save original value
3CE2: E60F     [11]             and     $0F             ; Strip off upper nybble
3CE4: FE0A     [18]             cp      $0A             ; 0-9?
3CE6: 3802     [25|30]          jr      C,ADD30         ; If A-F, add 7 more
3CE8: C607     [32]             add     A,$07           ; Bring value up to ASCII A-F
3CEA: C630     [ 7]     ADD30	add     A,$30           ; And make ASCII
3CEC: 4F       [11]             ld      C,A             ; Save converted char to C
3CED: 78       [15]             ld      A,B             ; Retrieve original value
3CEE: 0F       [19]             rrca                    ; and Rotate it right
3CEF: 0F       [23]             rrca
3CF0: 0F       [27]             rrca
3CF1: 0F       [31]             rrca
3CF2: E60F     [38]             and     $0F             ; Mask off upper nybble
3CF4: FE0A     [45]             cp      $0A             ; 0-9? < A hex?
3CF6: 3802     [52|57]          jr      C,ADD301        ; Skip Add 7
3CF8: C607     [59]             add     A,$07           ; Bring it up to ASCII A-F
3CFA: C630     [ 7]     ADD301	add     A,$30           ; And make it full ASCII
3CFC: 47       [11]             ld      B,A             ; Store high order byte
3CFD: C9       [21]             ret
                        
                        ; Convert "&Hnnnn" to FPREG
                        ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
                        ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
3CFE: EB       [ 4]     HEXTFP  ex      DE,HL           ; Move code string pointer to DE
3CFF: 210000   [14]             ld      HL,$0000        ; Zero out the value
3D02: CD173D   [31]             call    GETHEX          ; Check the number for valid hex
3D05: DA373D   [41|41]          jp      C,HXERR         ; First value wasn't hex, HX error
3D08: 1805     [53]             jr      HEXLP1          ; Convert first character
3D0A: CD173D   [17]     HEXLP   call    GETHEX          ; Get second and addtional characters
3D0D: 381F     [24|29]          jr      C,HEXIT         ; Exit if not a hex character
3D0F: 29       [11]     HEXLP1  add     HL,HL           ; Rotate 4 bits to the left
3D10: 29       [22]             add     HL,HL
3D11: 29       [33]             add     HL,HL
3D12: 29       [44]             add     HL,HL
3D13: B5       [48]             or      L               ; Add in D0-D3 into L
3D14: 6F       [52]             ld      L,A             ; Save new value
3D15: 18F3     [64]             jr      HEXLP           ; And continue until all hex characters are in
                        
3D17: 13       [ 6]     GETHEX  inc     DE              ; Next location
3D18: 1A       [13]             ld      A,(DE)          ; Load character at pointer
3D19: FE20     [20]             cp      SPC
3D1B: CA173D   [30|30]          jp      Z,GETHEX        ; Skip spaces
3D1E: D630     [37]             sub     $30             ; Get absolute value
3D20: D8       [42|48]          ret     C               ; < "0", error
3D21: FE0A     [49]             cp      $0A
3D23: 3805     [56|61]          jr      C,NOSUB7        ; Is already in the range 0-9
3D25: D607     [63]             sub     $07             ; Reduce to A-F
3D27: FE0A     [70]             cp      $0A             ; Value should be $0A-$0F at this point
3D29: D8       [75|81]          ret     C               ; CY set if was :            ; < = > ? @
3D2A: FE10     [ 7]     NOSUB7  cp      $10             ; > Greater than "F"?
3D2C: 3F       [11]             ccf
3D2D: C9       [21]             ret                     ; CY set if it wasn't valid hex
                        
3D2E: EB       [ 4]     HEXIT   ex      DE,HL           ; Value into DE, Code string into HL
3D2F: 7A       [ 8]             ld      A,D             ; Load DE into AC
3D30: 4B       [12]             ld      C,E             ; For prep to
3D31: E5       [23]             push    HL
3D32: CDC822   [40]             call    ACPASS          ; ACPASS to set AC as integer into FPREG
3D35: E1       [50]             pop     HL
3D36: C9       [60]             ret
                        
3D37: 1E26     [ 7]     HXERR:  ld      E,HX            ; ?HEX Error
3D39: C37915   [17]             jp      ERROR
                        
                        ; BIN$(NN) Convert integer to a 1-16 char binary string
3D3C: CDE21E   [17]     BIN:    call    TSTNUM          ; Verify it's a number
3D3F: CD201B   [34]             call    DEINT           ; Get integer -32768 to 32767
3D42: C5       [11]     BIN2:   push    BC              ; Save contents of BC
3D43: 213082   [21]             ld      HL,PBUFF
3D46: 0611     [28]             ld      B,$11           ; One higher than max char count (16+1)
3D48:                   ZEROSUP:                        ; Suppress leading zeros
3D48: 05       [ 4]             dec     B               ; Max 16 chars
3D49: 78       [ 8]             ld      A,B
3D4A: FE01     [15]             cp      $01
3D4C: 2808     [22|27]          jr      Z,BITOUT        ; Always output at least one character
3D4E: CB13     [30]             rl      E
3D50: CB12     [38]             rl      D
3D52: 30F4     [45|50]          jr      NC,ZEROSUP
3D54: 1804     [57]             jr      BITOUT2
3D56: CB13     [ 8]     BITOUT: rl      E
3D58: CB12     [16]             rl      D               ; Top bit now in carry
3D5A: 3E30     [ 7]     BITOUT2:ld      A,'0'           ; Char for '0'
3D5C: CE00     [14]             adc     A,$00           ; If carry set then '0' --> '1'
3D5E: 77       [21]             ld      (HL),A
3D5F: 23       [27]             inc     HL
3D60: 05       [31]             dec     B
3D61: 20F3     [38|43]          jr      NZ,BITOUT
3D63: AF       [42]             xor     A               ; Terminating character
3D64: 77       [49]             ld      (HL),A          ; Store zero to terminate
3D65: 23       [55]             inc     HL              ; Make sure PBUFF is terminated
3D66: 77       [62]             ld      (HL),A          ; Store the double zero there
3D67: C1       [72]             pop     BC
3D68: 213082   [82]             ld      HL,PBUFF
3D6B: C37723   [92]             jp      STR1
                        
                        ; Convert "&Bnnnn" to FPREG
                        ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
3D6E: EB       [ 4]     BINTFP: ex      DE,HL           ; Move code string pointer to DE
3D6F: 210000   [14]             ld      HL,$0000        ; Zero out the value
3D72: CD8B3D   [31]             call    CHKBIN          ; Check the number for valid bin
3D75: DA993D   [41|41]          jp      C,BINERR        ; First value wasn't bin, HX error
3D78: D630     [ 7]     BINIT:  sub     '0'
3D7A: 29       [18]             add     HL,HL           ; Rotate HL left
3D7B: B5       [22]             or      L
3D7C: 6F       [26]             ld      L,A
3D7D: CD8B3D   [43]             call    CHKBIN          ; Get second and addtional characters
3D80: 30F6     [50|55]          jr      NC,BINIT        ; Process if a bin character
3D82: EB       [54]             ex      DE,HL           ; Value into DE, Code string into HL
3D83: 7A       [58]             ld      A,D             ; Load DE into AC
3D84: 4B       [62]             ld      C,E             ; For prep to
3D85: E5       [73]             push    HL
3D86: CDC822   [90]             call    ACPASS          ; ACPASS to set AC as integer into FPREG
3D89: E1       [100]            pop     HL
3D8A: C9       [110]            ret
                        
                        ; Char is in A, NC if char is 0 or 1
3D8B: 13       [ 6]     CHKBIN: inc     DE
3D8C: 1A       [13]             ld      A,(DE)
3D8D: FE20     [20]             cp      SPC
3D8F: CA8B3D   [30|30]          jp      Z,CHKBIN        ; Skip spaces
3D92: FE30     [37]             cp      '0'             ; Set C if < '0'
3D94: D8       [42|48]          ret     C
3D95: FE32     [49]             cp      '2'
3D97: 3F       [53]             ccf                     ; Set C if > '1'
3D98: C9       [63]             ret
                        
3D99: 1E28     [ 7]     BINERR: ld      E,BN            ; ?BIN Error
3D9B: C37915   [17]             jp      ERROR
                        
                        
3D9E: C30800   [10]     MONOUT: jp      $0008           ; output a char
                        
                        
3DA1: 3A2E82   [13]     RESET:  ld      A,(SERIALS_EN)
3DA4: E601     [20]             and     $01             ; is serial port #1 open?
3DA6: C46439   [30|37]          call    NZ,RSTSER1      ; yes, reset serial 1
3DA9: CD8027   [47]             call    DISNMI          ; disable NMI vector
3DAC: F3       [51]             di                      ; disable INTs
3DAD: C30000   [61]             jp      $0000           ; Restart
                        
                        
3DB0: 3E00     [ 7]     INITST: ld      A,$00           ; Clear break flag
3DB2: 32A980   [20]             ld      (BRKFLG),A
3DB5: C3060F   [30]             jp      INIT
                        
                        
3DB8: F5       [11]     TSTBIT: push    AF              ; Save bit mask
3DB9: A0       [15]             and     B               ; Get common bits
3DBA: C1       [25]             pop     BC              ; Restore bit mask
3DBB: B8       [29]             cp      B               ; Same bit set?
3DBC: 3E00     [36]             ld      A,$00           ; Return 0 in A
3DBE: C9       [46]             ret
                        
3DBF: CD5218   [17]     OUTNCR: call    OUTC            ; Output character in A
3DC2: C3231D   [27]             jp      PRNTCRLF        ; Output CRLF
                        
                        ; include utils
                        #include "../include/utils/utils-r11.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - UTILITY ROUTINES - R1.1
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. More info at
                        ; www DOT leonardomiliani DOT com
                        ;
                        ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
                        ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
                        ;
                        ; * WKT are routines from WikiTI:
                        ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
                        ;
                        ; * LAC are routines from Learn@Cemetch
                        ; https://learn.cemetech.net/index.php/Main_Page
                        ;
                        ; ------------------------------------------------------------------------------
                        ; Code Revision:
                        ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
                        ; R1.1 - 20200413 - Second release: added ABS(HL) 
                        ;
                        ; ------------------------------------------------------------------------------
                        
                        ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
                        ; values can be both signed or unsigned words
                        ; inputs: HL, DE
                        ; destroys: A,F,HL
                        ;
                        ; returns: Z=1 if HL = DE
                        ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
                        ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
                        ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
                        ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
                        ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
                        ; Source: ALS
                        
3DC5: B7       [ 4]     CMP16:  or      A           ; clear CARRY
3DC6: ED52     [19]             sbc     HL,DE       ; subtract DE from HL
3DC8: E0       [24|30]          ret     PO          ; return if no overflow
3DC9: 7C       [28]             ld      A,H         ; overflow - invert SIGN flag
3DCA: 1F       [32]             rra                 ; save CARRY flag in bit 7
3DCB: EE40     [39]             xor     %01000000   ; complement bit 6 (SIGN bit)
3DCD: 37       [43]             scf                 ; ensure a Non-Zero result
3DCE: 8F       [47]             adc     A,A         ; restore CARRY, complemented SIGN
                                                    ; ZERO flag = 0 for sure
3DCF: C9       [57]             ret                 ; return
                        
                        ; ----------------------------------------------------------------------
                        
                        ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
                        ; signed/unsigned product
                        ; inputs: HL (multiplicand); DE (multiplier)
                        ; destroys: A,F
                        ; returns: HL (product)
                        ; Source: ALS
                        
                        ; initialize partial product, bit count
3DD0: C5       [11]     MUL16:  push    BC
3DD1: 4D       [15]             ld      C,L         ; BC = multiplier
3DD2: 44       [19]             ld      B,H
3DD3: 210000   [29]             ld      HL,0        ; product = 0
3DD6: 3E0F     [36]             ld      A,$0F       ; count = bit lenght - 1 (16-1)
                                ; shift-and-add algorithm
                                ; if MSB of multiplier is 1, add multiplicand to partial product
                                ; shift partial product, multiplier left 1 bit
3DD8: CB23     [ 8]     MLP:    sla     E           ; shift multiplier left 1 bit
3DDA: CB12     [16]             rl      D
3DDC: 3001     [23|28]          jr      NC,MLP1     ; jump if MSB of multiplier = 0
3DDE: 09       [34]             add     HL,BC       ; add multiplicand to partial product
3DDF: 29       [11]     MLP1:   add     HL,HL       ; shift partial product left
3DE0: 3D       [15]             dec     A
3DE1: 20F5     [22|27]          jr      NZ,MLP      ; continue until count = 0
                                ; add multiplicand one last time if MSB of multiplier is 1
3DE3: B2       [26]             or      D           ; sign flag = MSB of multiplier
3DE4: F2E83D   [36|36]          jp      P,EXMUL16   ; exit if MSB of multiplier is 0
3DE7: 09       [47]             add     HL,BC       ; add multiplicand to product
3DE8: C1       [10]     EXMUL16:pop     BC
3DE9: C9       [20]             ret
                        
                        ; ----------------------------------------------------------------------
                        ; absolute value of HL (same applies to other 16-bit register pairs)
                        ; also, invert value of HL (or any other 16-bit register, just adjust the code)
                        ;
                        ; inputs: HL
                        ; destroys: A
                        ; operation: ABS(HL)
                        ; returns: HL with no sign or negated
                        ; Source: WKT
                        
3DEA: CB7C     [ 8]     absHL:  bit     7,H
3DEC: C8       [13|19]          ret     Z
3DED: AF       [ 4]     negHL:  xor     A
3DEE: 95       [ 8]             sub     L
3DEF: 6F       [12]             ld      L,A
3DF0: 9F       [16]             sbc     A,A
3DF1: 94       [20]             sub     H
3DF2: 67       [24]             ld      H,A
3DF3: C9       [34]             ret
                        
                        ; ------------------------------------------------------------------------------
                        
                        ; 8/8 division
                        ; INPUT: D (dividend), E (divisor)
                        ; OPERATION: D/E
                        ; OUTPUT: D (quotient), A (remainder)
3DF4: AF       [ 4]     DIV_8_8:    xor     A
3DF5: C5       [15]                 push    BC
3DF6: 0608     [22]                 ld      B,08h
3DF8: CB22     [ 8]     DIV_8_8LOOP:sla     D
3DFA: 17       [12]                 rla
3DFB: BB       [16]                 cp      E
3DFC: 3802     [23|28]              jr      C,$+4
3DFE: 93       [27]                 sub     E
3DFF: 14       [31]                 inc     D
3E00: 10F6     [39|44]              djnz    DIV_8_8LOOP
3E02: C1       [49]                 pop     BC
3E03: C9       [59]                 ret
                        
                        ; ----------------------------------------------------------------------
                        ; divide a 16-bit number by an 8-bit number
                        ; (16/8 division)
                        ;
                        ; inputs: HL (Dividend), C (divisor)
                        ; destroys: A
                        ; OPERATION: HL/C
                        ; returns: HL (quotient), A (remainder)
                        ; source: WKT
                        
3E04: AF       [ 4]     DIV_16_8:   xor     A
3E05: 0610     [11]                 ld      B,16
3E07: 29       [11]     DIV_16_8LP: add     HL,HL
3E08: 17       [15]                 rla
3E09: 3803     [22|27]              jr      C,$+5
3E0B: B9       [26]                 cp      C
3E0C: 3802     [33|38]              jr      C,$+4
3E0E: 91       [37]                 sub     C
3E0F: 2C       [41]                 inc     L
3E10: 10F5     [49|54]              djnz    DIV_16_8LP
3E12: C9       [59]                 ret
                                
                        ; ----------------------------------------------------------------------
                        ; divide a 16-bit number by a 16-bit number
                        ; (16/16 division)
                        ;
                        ; inputs: AC (Dividend), DE (divisor)
                        ; destroys: HL,A,C
                        ; OPERATION: AC/DE
                        ; returns: AC (quotient), HL (remainder)
                        ; source: WKT
3E13: 210000   [10]     DIV_16_16:  ld      HL, 0
3E16: 0610     [17]                 ld      B, 16
3E18: CB21     [ 8]     DV16_16_LP: sla     C
3E1A: CBC1     [16]                 set     0,C         ; this simulates the SLL undocumented instruction
3E1C: 17       [20]                 rla
3E1D: ED6A     [35]                 adc     HL,HL
3E1F: ED52     [50]                 sbc     HL,DE
3E21: 3002     [57|62]              jr      NC, $+4
3E23: 19       [68]                 add     HL,DE
3E24: 0D       [72]                 dec     C
3E25: 10F1     [80|85]              djnz    DV16_16_LP
3E27: C9       [90]                 ret
                        
                        ; include the latest version of the font sets
                        #include "../include/vdp/6x8fonts-r16.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - 6x8 CHARSET - R1.6
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. More info at
                        ; www DOT leonardomiliani DOT com
                        ; ------------------------------------------------------------------------------
                        ; Code Revision:
                        ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
                        ; R1.1 - 20190521 - Expanded to 255 chars
                        ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
                        ; R1.3 - 20191226 - Added extended char codes (128-255)
                        ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
                        ; R1.5 - 20200524 - New style for char #252
                        ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
                        ; ------------------------------------------------------------------------------
                        ;
                        ;-------------------------------------------------------------------------------
                        ;
                        ;               6 x 8    C  H  A  R  S  E  T
                        ;
                        ;-------------------------------------------------------------------------------
                        ;
                        ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
                        ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
                        
3E28:                   CHRST68 equ $
3E28: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
3E2C: 00000000          
3E30: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
3E34: 00000000          
3E38: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
3E3C: 00000000          
3E40: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
3E44: 00000000          
3E48: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
3E4C: 00000000          
3E50: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
3E54: 00000000          
3E58: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
3E5C: 00000000          
3E60: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
3E64: 00000000          
3E68: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
3E6C: 00000000          
3E70: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
3E74: 00000000          
3E78: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
3E7C: 00000000          
3E80: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
3E84: 00000000          
3E88: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
3E8C: 00000000          
3E90: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
3E94: 00000000          
3E98: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
3E9C: 00000000          
3EA0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
3EA4: 00000000          
3EA8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
3EAC: 00000000          
3EB0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
3EB4: 00000000          
3EB8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
3EBC: 00000000          
3EC0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
3EC4: 00000000          
3EC8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
3ECC: 00000000          
3ED0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
3ED4: 00000000          
3ED8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
3EDC: 00000000          
3EE0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
3EE4: 00000000          
3EE8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
3EEC: 00000000          
3EF0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
3EF4: 00000000          
3EF8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
3EFC: 00000000          
3F00: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
3F04: 00000000          
3F08: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
3F0C: 00000000          
3F10: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
3F14: 00000000          
3F18: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
3F1C: 00000000          
3F20: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
3F24: 00000000          
3F28: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
3F2C: 00000000          
3F30: 20202020                  defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
3F34: 20002000          
3F38: 50500000                  defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
3F3C: 00000000          
3F40: 5050F850                  defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
3F44: F8505000          
3F48: 2078A070                  defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
3F4C: 28F02000          
3F50: C0C81020                  defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
3F54: 40981800          
3F58: 6090A040                  defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
3F5C: A8906800          
3F60: 60204000                  defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
3F64: 00000000          
3F68: 10204040                  defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
3F6C: 40201000          
3F70: 40201010                  defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
3F74: 10204000          
3F78: 0020A870                  defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
3F7C: A8200000          
3F80: 002020F8                  defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
3F84: 20200000          
3F88: 00000000                  defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
3F8C: 60204000          
3F90: 000000F8                  defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
3F94: 00000000          
3F98: 00000000                  defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
3F9C: 00606000          
3FA0: 00081020                  defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
3FA4: 40800000          
3FA8: 708898A8                  defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
3FAC: C8887000          
3FB0: 20602020                  defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
3FB4: 20207000          
3FB8: 70880810                  defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
3FBC: 2040F800          
3FC0: F8102010                  defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
3FC4: 08887000          
3FC8: 10305090                  defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
3FCC: F8101000          
3FD0: F880F008                  defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
3FD4: 08887000          
3FD8: 304080F0                  defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
3FDC: 88887000          
3FE0: F8081020                  defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
3FE4: 40404000          
3FE8: 70888870                  defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
3FEC: 88887000          
3FF0: 70888878                  defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
3FF4: 08106000          
3FF8: 00303000                  defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
3FFC: 30300000          
4000: 00303000                  defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
4004: 30102000          
4008: 10204080                  defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
400C: 40201000          
4010: 0000F800                  defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
4014: F8000000          
4018: 40201008                  defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
401C: 10204000          
4020: 70880810                  defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
4024: 20002000          
4028: 70880868                  defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
402C: A8A87000          
4030: 70888888                  defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
4034: F8888800          
4038: F08888F0                  defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
403C: 8888F000          
4040: 70888080                  defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
4044: 80887000          
4048: E0908888                  defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
404C: 8890E000          
4050: F88080F0                  defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
4054: 8080F800          
4058: F88080F0                  defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
405C: 80808000          
4060: 708880B8                  defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
4064: 88887800          
4068: 888888F8                  defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
406C: 88888800          
4070: 70202020                  defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
4074: 20207000          
4078: 38101010                  defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
407C: 10906000          
4080: 8890A0C0                  defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
4084: A0908800          
4088: 80808080                  defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
408C: 8080F800          
4090: 88D8A8A8                  defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
4094: 88888800          
4098: 88C8A898                  defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
409C: 88888800          
40A0: 70888888                  defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
40A4: 88887000          
40A8: F08888F0                  defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
40AC: 80808000          
40B0: 70888888                  defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
40B4: A8906800          
40B8: F08888F0                  defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
40BC: A0908800          
40C0: 78808070                  defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
40C4: 0808F000          
40C8: F8202020                  defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
40CC: 20202000          
40D0: 88888888                  defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
40D4: 88887000          
40D8: 88888888                  defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
40DC: 88502000          
40E0: 88888888                  defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
40E4: A8A85000          
40E8: 88885020                  defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
40EC: 50888800          
40F0: 88888850                  defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
40F4: 20202000          
40F8: F8081020                  defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
40FC: 4080F800          
4100: 70404040                  defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
4104: 40407000          
4108: 00804020                  defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
410C: 10080000          
4110: 70101010                  defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
4114: 10107000          
4118: 20508800                  defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
411C: 00000000          
4120: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
4124: 000000FC          
4128: 40201000                  defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
412C: 00000000          
4130: 00007008                  defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
4134: 78887800          
4138: 808080B0                  defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
413C: C888F000          
4140: 00007080                  defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
4144: 80887000          
4148: 08080868                  defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
414C: 98887800          
4150: 00007088                  defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
4154: F8807000          
4158: 304840E0                  defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
415C: 40404000          
4160: 00007888                  defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
4164: 78087000          
4168: 8080B0C8                  defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
416C: 88888800          
4170: 20002020                  defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
4174: 20202000          
4178: 08001808                  defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
417C: 08887000          
4180: 808090A0                  defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
4184: C0A09000          
4188: 60202020                  defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
418C: 20207000          
4190: 0000D0A8                  defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
4194: A8888800          
4198: 0000B0C8                  defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
419C: 88888800          
41A0: 00007088                  defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
41A4: 88887000          
41A8: 0000F088                  defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
41AC: F0808000          
41B0: 00007888                  defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
41B4: 78080800          
41B8: 0000B0C8                  defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
41BC: 80808000          
41C0: 00007080                  defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
41C4: 7008F000          
41C8: 4040E040                  defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
41CC: 40483000          
41D0: 00008888                  defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
41D4: 88986800          
41D8: 00008888                  defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
41DC: 88502000          
41E0: 00008888                  defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
41E4: A8A85000          
41E8: 00008850                  defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
41EC: 20508800          
41F0: 00008898                  defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
41F4: 68087000          
41F8: 0000F810                  defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
41FC: 2040F800          
4200: 10202040                  defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
4204: 20201000          
4208: 20202020                  defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
420C: 20202000          
4210: 20101008                  defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
4214: 10102000          
4218: 00285000                  defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
421C: 00000000          
4220: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
4224: 00000000          
4228: 7884CC84                  defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
422C: B4847800          
4230: 78FCB4FC                  defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
4234: B4CC7800          
4238: 48FCFCFC                  defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
423C: FC783000          
4240: 002070F8                  defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
4244: F8702000          
4248: 7020A8F8                  defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
424C: A8207000          
4250: 2070F8F8                  defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
4254: A8207000          
4258: 303030FC                  defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134 
425C: FC303030          
4260: 0000003C                  defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135 
4264: 3C303030          
4268: 000000F0                  defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136 
426C: F0303030          
4270: 303030F0                  defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137 
4274: F0000000          
4278: 3030303C                  defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138 
427C: 3C000000          
4280: 303030FC                  defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139 
4284: FC000000          
4288: 3030303C                  defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140 
428C: 3C303030          
4290: 000000FC                  defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141 
4294: FC303030          
4298: 303030F0                  defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142 
429C: F0303030          
42A0: 000000FC                  defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143 
42A4: FC000000          
42A8: 30303030                  defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144 
42AC: 30303030          
42B0: 0C1C1838                  defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145 
42B4: 7060E0C0          
42B8: C0E06070                  defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146 
42BC: 38181C0C          
42C0: CCCC7830                  defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147 
42C4: 3078CCCC          
42C8: 202020FC                  defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148 
42CC: 20202020          
42D0: 0000003C                  defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149 
42D4: 20202020          
42D8: 000000E0                  defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150 
42DC: 20202020          
42E0: 202020E0                  defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151 
42E4: 00000000          
42E8: 2020203C                  defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152 
42EC: 00000000          
42F0: 202020FC                  defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153 
42F4: 00000000          
42F8: 2020203C                  defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154 
42FC: 20202020          
4300: 000000FC                  defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155 
4304: 20202020          
4308: 202020E0                  defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156 
430C: 20202020          
4310: 000000FC                  defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157 
4314: 00000000          
4318: 20202020                  defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158 
431C: 20202020          
4320: 04080810                  defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159 
4324: 20404080          
4328: 80404020                  defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160 
432C: 10080804          
4330: 84484830                  defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161 
4334: 30484884          
4338: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162 
433C: 0000FCFC          
4340: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163 
4344: FCFCFCFC          
4348: 0000FCFC                  defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164 
434C: FCFCFCFC          
4350: FCFC0000                  defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165 
4354: 00000000          
4358: FCFCFCFC                  defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166 
435C: 00000000          
4360: FCFCFCFC                  defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167 
4364: FCFC0000          
4368: 80808080                  defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168 
436C: 80808080          
4370: E0E0E0E0                  defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169 
4374: E0E0E0E0          
4378: F8F8F8F8                  defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170 
437C: F8F8F8F8          
4380: 04040404                  defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171 
4384: 04040404          
4388: 1C1C1C1C                  defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172 
438C: 1C1C1C1C          
4390: 7C7C7C7C                  defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173 
4394: 7C7C7C7C          
4398: FC848484                  defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174 
439C: 848484FC          
43A0: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175 
43A4: E0E0E0E0          
43A8: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176 
43AC: 1C1C1C1C          
43B0: 1C1C1C1C                  defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177 
43B4: 00000000          
43B8: E0E0E0E0                  defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178 
43BC: 00000000          
43C0: E0E0E0E0                  defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179 
43C4: 1C1C1C1C          
43C8: 1C1C1C1C                  defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180 
43CC: E0E0E0E0          
43D0: 78787878                  defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181 
43D4: 78787878          
43D8: CCCCCCCC                  defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182 
43DC: CCCCCCCC          
43E0: FCFC0000                  defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183 
43E4: 0000FCFC          
43E8: 0000FCFC                  defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184 
43EC: FCFC0000          
43F0: 3030CCCC                  defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185 
43F4: 3030CCCC          
43F8: 54A854A8                  defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186 
43FC: 54A854A8          
4400: 643098CC                  defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187 
4404: 643098CC          
4408: CC643098                  defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188 
440C: CC643098          
4410: 3098CC64                  defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189 
4414: 3098CC64          
4418: 64CC9830                  defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190 
441C: 64CC9830          
4420: 2020F820                  defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
4424: 2000F800          
4428: C0300830                  defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
442C: C000F800          
4430: 18608060                  defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
4434: 1800F800          
4438: 3C202020                  defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
443C: A0602000          
4440: 30484830                  defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
4444: 00000000          
4448: 60103040                  defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
444C: 70000000          
4450: 000054A8                  defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
4454: 00FC0000          
4458: 0054A800                  defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
445C: 54A80000          
4460: 0080C0E0                  defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
4464: E0C08000          
4468: FC783000                  defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
446C: 00000000          
4470: 00040C1C                  defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
4474: 1C0C0400          
4478: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202 
447C: 003078FC          
4480: 2070F820                  defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
4484: 20202000          
4488: 3C1C1C24                  defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
448C: 40800000          
4490: 001018FC                  defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
4494: 18100000          
4498: 00008040                  defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
449C: 241C1C3C          
44A0: 00202020                  defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
44A4: 20F87020          
44A8: 00000408                  defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
44AC: 90E0E0F0          
44B0: 002060FC                  defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
44B4: 60200000          
44B8: F0E0E090                  defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
44BC: 08040000          
44C0: 3844F040                  defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
44C4: F0443800          
44C8: 000478A8                  defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
44CC: 28282800          
44D0: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
44D4: 1C202020          
44D8: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
44DC: E0101010          
44E0: 101010E0                  defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
44E4: 00000000          
44E8: 2020201C                  defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
44EC: 00000000          
44F0: 0000001C                  defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
44F4: 3C303030          
44F8: 000000E0                  defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
44FC: F0303030          
4500: 303030F0                  defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
4504: E0000000          
4508: 3030303C                  defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
450C: 1C000000          
4510: 00304848                  defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
4514: 48300000          
4518: 00307878                  defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
451C: 78300000          
4520: 003078FC                  defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
4524: FC783000          
4528: FCF8F0E0                  defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
452C: E0C08080          
4530: FC7C3C1C                  defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
4534: 1C0C0404          
4538: 04040C1C                  defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
453C: 1C3C7CFC          
4540: 8080C0E0                  defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
4544: E0F0F8FC          
4548: 00040CD8                  defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
454C: F0E0C000          
4550: 00CC7830                  defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
4554: 78CC0000          
4558: 70888888                  defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
455C: 70207020          
4560: 001C0C74                  defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
4564: 90906000          
4568: F8848484                  defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
456C: 848484FC          
4570: 00F0FC84                  defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
4574: 848484FC          
4578: 3078FC48                  defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
457C: 48484878          
4580: FC848484                  defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
4584: FCB4B4FC          
4588: 0000D4D8                  defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
458C: D4D40000          
4590: 3078FC78                  defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
4594: 78484848          
4598: 7884A4A4                  defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
459C: B4847800          
45A0: 000008F4                  defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
45A4: A8800000          
45A8: 203078B0                  defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
45AC: A0887000          
45B0: 00FCCCB4                  defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
45B4: 8484FC00          
45B8: 609090F0                  defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
45BC: F0F0F000          
45C0: 081414F0                  defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
45C4: F0F0F000          
45C8: FCFC84B4                  defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
45CC: 949484FC          
45D0: 00043858                  defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
45D4: 68708000          
45D8: 78848484                  defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
45DC: 6C180800          
45E0: 30282828                  defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
45E4: 2060E040          
45E8: 2068E4E4                  defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
45EC: E4682000          
45F0: 2060E0E0                  defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
45F4: E0602000          
45F8: 80C0E0F0                  defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
45FC: F8FCF090          
4600: 7884B4A4                  defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
4604: B4847800          
4608: 304840E0                  defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
460C: 4048B000          
4610: 7884F048                  defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
4614: 483C8478          
4618: 00002000                  defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
461C: F8002000          
4620: FCFCFCFC                  defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
4624: FCFCFCFC          
                                ; here ends the ASCII table
                        #include "../include/vdp/8x8fonts-r18.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - 8x8 CHARSET - R1.8
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. More info at
                        ; www DOT leonardomiliani DOT com
                        ; ------------------------------------------------------------------------------
                        ; Code Revision:
                        ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
                        ; R1.1 - 20190616 - Converted to 8x8 pixels
                        ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
                        ; R1.3 - 20191015 - More graphic chars
                        ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
                        ; R1.5 - 20191210 - Changed several graphic chars
                        ; R1.6 - 20200125 - Removed double chars, changed with new ones
                        ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
                        ; R1.8 - 20200524 - New style for char #252
                        ; ------------------------------------------------------------------------------
                        ;
                        ;-------------------------------------------------------------------------------
                        ;
                        ;               8 x 8    C  H  A  R  S  E  T
                        ;
                        ;-------------------------------------------------------------------------------
                        ;
                        ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
                        
4628:                   CHRST88 equ $
4628: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
462C: 00000000          
4630: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
4634: 00000000          
4638: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
463C: 00000000          
4640: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
4644: 00000000          
4648: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
464C: 00000000          
4650: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
4654: 00000000          
4658: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
465C: 00000000          
4660: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
4664: 00000000          
4668: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
466C: 00000000          
4670: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
4674: 00000000          
4678: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
467C: 00000000          
4680: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 
4684: 00000000          
4688: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
468C: 00000000          
4690: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
4694: 00000000          
4698: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
469C: 00000000          
46A0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
46A4: 00000000          
46A8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
46AC: 00000000          
46B0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
46B4: 00000000          
46B8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
46BC: 00000000          
46C0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
46C4: 00000000          
46C8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
46CC: 00000000          
46D0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
46D4: 00000000          
46D8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
46DC: 00000000          
46E0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
46E4: 00000000          
46E8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
46EC: 00000000          
46F0: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
46F4: 00000000          
46F8: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
46FC: 00000000          
4700: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
4704: 00000000          
4708: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
470C: 00000000          
4710: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
4714: 00000000          
4718: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
471C: 00000000          
4720: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
4724: 00000000          
4728: 00000000                  defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 - space
472C: 00000000          
4730: 10101010                  defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
4734: 10001000          
4738: 28282800                  defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
473C: 00000000          
4740: 2828FE28                  defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
4744: FE282800          
4748: 103C5038                  defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
474C: 14781000          
4750: 00626408                  defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
4754: 10264600          
4758: 00304830                  defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
475C: 4A443A00          
4760: 08102000                  defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
4764: 00000000          
4768: 08102020                  defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
476C: 20100800          
4770: 20100808                  defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
4774: 08102000          
4778: 00105438                  defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
477C: 38541000          
4780: 0010107C                  defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
4784: 10100000          
4788: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
478C: 00180810          
4790: 0000007C                  defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
4794: 00000000          
4798: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
479C: 00181800          
47A0: 00020408                  defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
47A4: 10204000          
47A8: 38444C54                  defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
47AC: 64443800          
47B0: 10305010                  defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
47B4: 10107C00          
47B8: 38440408                  defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
47BC: 10207C00          
47C0: 7C081008                  defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
47C4: 04443800          
47C8: 08182848                  defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
47CC: 7C080800          
47D0: 7C407804                  defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
47D4: 04443800          
47D8: 38444078                  defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
47DC: 44443800          
47E0: 7C040810                  defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
47E4: 20202000          
47E8: 38444438                  defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
47EC: 44443800          
47F0: 3844443C                  defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
47F4: 04443800          
47F8: 00181800                  defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
47FC: 18180000          
4800: 00181800                  defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
4804: 18081000          
4808: 04081020                  defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
480C: 10080400          
4810: 00007E00                  defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
4814: 7E000000          
4818: 20100804                  defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
481C: 08102000          
4820: 38440408                  defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
4824: 10001000          
4828: 7884BCAC                  defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
482C: B8808478          
4830: 38444444                  defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
4834: 7C444400          
4838: 78444478                  defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
483C: 44447800          
4840: 38444040                  defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
4844: 40443800          
4848: 78444444                  defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
484C: 44447800          
4850: 7C404070                  defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
4854: 40407C00          
4858: 7C404070                  defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
485C: 40404000          
4860: 38444040                  defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
4864: 5C443800          
4868: 4444447C                  defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
486C: 44444400          
4870: 38101010                  defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
4874: 10103800          
4878: 3C040404                  defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
487C: 04443800          
4880: 44444870                  defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
4884: 48444400          
4888: 40404040                  defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
488C: 40407C00          
4890: 42665A42                  defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
4894: 42424200          
4898: 4464544C                  defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
489C: 44444400          
48A0: 38444444                  defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
48A4: 44443800          
48A8: 78444444                  defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
48AC: 78404000          
48B0: 38444444                  defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
48B4: 54483400          
48B8: 78444444                  defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
48BC: 78484400          
48C0: 3C404038                  defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
48C4: 04047800          
48C8: 7C101010                  defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
48CC: 10101000          
48D0: 44444444                  defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
48D4: 44443800          
48D8: 44444444                  defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
48DC: 44281000          
48E0: 42424242                  defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
48E4: 5A5A2400          
48E8: 44442810                  defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
48EC: 28444400          
48F0: 44444428                  defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
48F4: 10101000          
48F8: 7C040810                  defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
48FC: 20407C00          
4900: 38202020                  defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
4904: 20203800          
4908: 00402010                  defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
490C: 08040200          
4910: 38080808                  defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
4914: 08083800          
4918: 10284400                  defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
491C: 00000000          
4920: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
4924: 00007E00          
4928: 20100800                  defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
492C: 00000000          
4930: 00003804                  defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
4934: 3C443C00          
4938: 40404078                  defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
493C: 44447800          
4940: 00003840                  defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
4944: 40443800          
4948: 0404043C                  defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
494C: 44443C00          
4950: 00003844                  defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
4954: 7C403800          
4958: 18242070                  defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
495C: 20202000          
4960: 00003C44                  defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
4964: 443C0438          
4968: 40405864                  defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
496C: 44444400          
4970: 00100010                  defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
4974: 10101000          
4978: 08001808                  defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
497C: 08084830          
4980: 40404850                  defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
4984: 60504800          
4988: 30101010                  defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
498C: 10103800          
4990: 0000546A                  defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
4994: 4A424200          
4998: 00005864                  defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
499C: 44444400          
49A0: 00003844                  defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
49A4: 44443800          
49A8: 00007844                  defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
49AC: 44784040          
49B0: 00003C44                  defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
49B4: 443C0404          
49B8: 00005864                  defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
49BC: 40404000          
49C0: 00003840                  defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
49C4: 38047800          
49C8: 20207020                  defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
49CC: 20241800          
49D0: 00004444                  defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
49D4: 444C3400          
49D8: 00004444                  defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
49DC: 44281000          
49E0: 00004444                  defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
49E4: 54542800          
49E8: 00004428                  defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
49EC: 10284400          
49F0: 00004444                  defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
49F4: 4C340438          
49F8: 00007C08                  defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
49FC: 10207C00          
4A00: 18202040                  defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
4A04: 20201800          
4A08: 10101010                  defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
4A0C: 10101000          
4A10: 30080804                  defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
4A14: 08083000          
4A18: 20540800                  defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
4A1C: 00000000          
4A20: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
4A24: 00000000          
4A28: 3C42A581                  defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
4A2C: A599423C          
4A30: 3C7EDBFF                  defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
4A34: DBE77E3C          
4A38: 6CFEFEFE                  defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
4A3C: 7C381000          
4A40: 10387CFE                  defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
4A44: 7C381000          
4A48: 103854FE                  defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
4A4C: 54107C00          
4A50: 10387CFE                  defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
4A54: D6107C00          
4A58: 181818FF                  defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
4A5C: FF181818          
4A60: 0000001F                  defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
4A64: 1F181818          
4A68: 000000F8                  defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
4A6C: F8181818          
4A70: 181818F8                  defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
4A74: F8000000          
4A78: 1818181F                  defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
4A7C: 1F000000          
4A80: 181818FF                  defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
4A84: FF000000          
4A88: 1818181F                  defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
4A8C: 1F181818          
4A90: 000000FF                  defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
4A94: FF181818          
4A98: 181818F8                  defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
4A9C: F8181818          
4AA0: 000000FF                  defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
4AA4: FF000000          
4AA8: 18181818                  defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
4AAC: 18181818          
4AB0: 03070E1C                  defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
4AB4: 3870E0C0          
4AB8: C0E07038                  defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
4ABC: 1C0E0703          
4AC0: C3E77E3C                  defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
4AC4: 3C7EE7C3          
4AC8: 101010FF                  defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
4ACC: 10101010          
4AD0: 0000001F                  defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
4AD4: 10101010          
4AD8: 000000F0                  defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
4ADC: 10101010          
4AE0: 101010F0                  defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
4AE4: 00000000          
4AE8: 1010101F                  defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
4AEC: 00000000          
4AF0: 101010FF                  defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
4AF4: 00000000          
4AF8: 1010101F                  defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
4AFC: 10101010          
4B00: 000000FF                  defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
4B04: 10101010          
4B08: 101010F0                  defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
4B0C: 10101010          
4B10: 000000FF                  defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
4B14: 00000000          
4B18: 10101010                  defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
4B1C: 10101010          
4B20: 01020408                  defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
4B24: 10204080          
4B28: 80402010                  defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
4B2C: 08040201          
4B30: 81422418                  defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
4B34: 18244281          
4B38: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
4B3C: 0000FFFF          
4B40: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
4B44: FFFFFFFF          
4B48: 0000FFFF                  defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
4B4C: FFFFFFFF          
4B50: FFFF0000                  defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
4B54: 00000000          
4B58: FFFFFFFF                  defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
4B5C: 00000000          
4B60: FFFFFFFF                  defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
4B64: FFFF0000          
4B68: C0C0C0C0                  defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
4B6C: C0C0C0C0          
4B70: F0F0F0F0                  defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
4B74: F0F0F0F0          
4B78: FCFCFCFC                  defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
4B7C: FCFCFCFC          
4B80: 03030303                  defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
4B84: 03030303          
4B88: 0F0F0F0F                  defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
4B8C: 0F0F0F0F          
4B90: 3F3F3F3F                  defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
4B94: 3F3F3F3F          
4B98: FF818181                  defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
4B9C: 818181FF          
4BA0: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
4BA4: F0F0F0F0          
4BA8: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
4BAC: 0F0F0F0F          
4BB0: 0F0F0F0F                  defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
4BB4: 00000000          
4BB8: F0F0F0F0                  defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
4BBC: 00000000          
4BC0: F0F0F0F0                  defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
4BC4: 0F0F0F0F          
4BC8: 0F0F0F0F                  defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
4BCC: F0F0F0F0          
4BD0: 3C3C3C3C                  defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
4BD4: 3C3C3C3C          
4BD8: C3C3C3C3                  defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
4BDC: C3C3C3C3          
4BE0: FFFF0000                  defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
4BE4: 0000FFFF          
4BE8: 0000FFFF                  defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
4BEC: FFFF0000          
4BF0: 3333CCCC                  defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
4BF4: 3333CCCC          
4BF8: 55AA55AA                  defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
4BFC: 55AA55AA          
4C00: 663399CC                  defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
4C04: 663399CC          
4C08: CC993366                  defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
4C0C: CC993366          
4C10: 3399CC66                  defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
4C14: 3399CC66          
4C18: 66CC9933                  defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
4C1C: 66CC9933          
4C20: 10107C10                  defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
4C24: 10007C00          
4C28: 60180618                  defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
4C2C: 60007E00          
4C30: 06186018                  defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
4C34: 06007E00          
4C38: 3E202020                  defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
4C3C: A0602000          
4C40: 30484830                  defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
4C44: 00000000          
4C48: 60103040                  defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
4C4C: 70000000          
4C50: 00002A54                  defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197 
4C54: 007E0000          
4C58: 0054A800                  defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
4C5C: 54A80000          
4C60: 80C0E0F0                  defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
4C64: E0C08000          
4C68: FE7C3810                  defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
4C6C: 00000000          
4C70: 0103070F                  defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
4C74: 07030100          
4C78: 00000000                  defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
4C7C: 10387CFE          
4C80: 10387C10                  defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
4C84: 10101000          
4C88: 1E0E0E12                  defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
4C8C: 20400000          
4C90: 00080CFE                  defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
4C94: 0C080000          
4C98: 00402012                  defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
4C9C: 0E0E1E00          
4CA0: 10101010                  defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
4CA4: 7C381000          
4CA8: 00040890                  defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
4CAC: E0E0F000          
4CB0: 002060FE                  defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
4CB4: 60200000          
4CB8: F0E0E090                  defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
4CBC: 08040000          
4CC0: 3844F040                  defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
4CC4: F0443800          
4CC8: 00027CA8                  defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
4CCC: 28282800          
4CD0: 00000007                  defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
4CD4: 08101010          
4CD8: 000000C0                  defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
4CDC: 20101010          
4CE0: 101020C0                  defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
4CE4: 00000000          
4CE8: 10100807                  defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
4CEC: 00000000          
4CF0: 00000007                  defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
4CF4: 0F1C1818          
4CF8: 000000E0                  defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
4CFC: F0381818          
4D00: 181838F0                  defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
4D04: E0000000          
4D08: 18181C0F                  defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
4D0C: 07000000          
4D10: 003C4242                  defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
4D14: 42423C00          
4D18: 003C7E7E                  defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
4D1C: 7E7E3C00          
4D20: 00183C7E                  defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
4D24: 7E3C1800          
4D28: FFFEFCF8                  defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
4D2C: F0E0C080          
4D30: FF7F3F1F                  defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
4D34: 0F070301          
4D38: 0103070F                  defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
4D3C: 1F3F7FFF          
4D40: 80C0E0F0                  defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
4D44: F8FCFEFF          
4D48: 0002066C                  defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
4D4C: 78706000          
4D50: 00663C18                  defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
4D54: 3C660000          
4D58: 38444444                  defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
4D5C: 38103810          
4D60: 07033D44                  defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
4D64: 44443800          
4D68: 78444242                  defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
4D6C: 4242427E          
4D70: 00F8FF81                  defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
4D74: 818181FF          
4D78: 107CFE54                  defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
4D7C: 5454547C          
4D80: FF818181                  defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
4D84: BDADADFF          
4D88: 00EAAAAC                  defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
4D8C: ACAAEA00          
4D90: 187EFF7E                  defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
4D94: 7E666666          
4D98: 3C429191                  defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
4D9C: 9D81423C          
4DA0: 000205FD                  defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
4DA4: A5A20000          
4DA8: 080C3E4C                  defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
4DAC: 4842423C          
4DB0: 00FFC3A5                  defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
4DB4: 9981FF00          
4DB8: 3844447C                  defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
4DBC: 7C7C7C00          
4DC0: 060909F8                  defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
4DC4: F8F8F800          
4DC8: FFFF81AD                  defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
4DCC: A5A581FF          
4DD0: 011A244A                  defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
4DD4: 52245880          
4DD8: 7E818181                  defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
4DDC: 81760C04          
4DE0: 0C0A0A0A                  defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
4DE4: 08183810          
4DE8: 1231F5F5                  defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
4DEC: F5F53112          
4DF0: 1030F0F0                  defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
4DF4: F0F03010          
4DF8: 40607078                  defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
4DFC: 7C7E7848          
4E00: 3C4299A1                  defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
4E04: A199423C          
4E08: 18242078                  defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
4E0C: 20225C00          
4E10: 3C427824                  defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
4E14: 241E423C          
4E18: 00001000                  defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
4E1C: 7C001000          
4E20: FFFFFFFF                  defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
4E24: FFFFFFFF          
                        
                        #include "../include/vdp/logo-fonts.asm"
                        ; ------------------------------------------------------------------------------
                        ; LM80C - LOGO CHARSET - R1.1
                        ; ------------------------------------------------------------------------------
                        ; The following code is intended to be used with LM80C Z80-based computer
                        ; designed by Leonardo Miliani. More info at
                        ; www DOT leonardomiliani DOT com
                        ; ------------------------------------------------------------------------------
                        ; Code Revision:
                        ; R1.0 - 20200124 - First revision: logo chars
                        ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
                        ; ------------------------------------------------------------------------------
                        
4E28:                   LOGOFONT:   equ $
4E28: 00000000                      defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
4E2C: 00000000          
4E30: FFFFFFFF                      defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
4E34: FFFFFFFF          
4E38: FFFFFFFF                      defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
4E3C: 00000000          
4E40: 0F0F0F0F                      defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
4E44: 0F0F0F0F          
4E48: 00000000                      defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
4E4C: FFFFFFFF          
4E50: F0F0F0F0                      defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
4E54: F0F0F0F0          
4E58: 00000000                      defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
4E5C: 0F0F0F0F          
4E60: 00000000                      defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
4E64: F0F0F0F0          
4E68: F0F0F0F0                      defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
4E6C: 00000000          
4E70: 0F0F0F0F                      defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
4E74: 00000000          
4E78: 000000FC                      defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
4E7C: FF070300          
4E80: 0000003F                      defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
4E84: FFE0C000          
4E88: 18181F19                      defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
4E8C: 191F1818          
4E90: 1818F898                      defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
4E94: 98F81818          
4E98: 18181C1F                      defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
4E9C: 0F000000          
4EA0: 0000000F                      defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
4EA4: 1F1C1818          
4EA8: 000000F0                      defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
4EAC: F8381818          
4EB0: 181838F8                      defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
4EB4: F0000000          
4EB8: 000000FF                      defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
4EBC: FF000000          
4EC0: 0F0F0F0F                      defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
4EC4: FFFFFFFF          
4EC8: F0F0F0F0                      defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
4ECC: FFFFFFFF          
4ED0: FFFFFFFF                      defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
4ED4: F0F0F0F0          
4ED8: FFFFFFFF                      defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
4EDC: 0F0F0F0F          
4EE0: 00307878                      defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
4EE4: 30000000          
                                    
                        
                        ; END OF ASSEMBLY SOURCE
                        #end
                        
                        ;-------------------------------------------------------------------------------


; +++ segments +++

#CODE BOOT     = $0000 =     0,  size = $4EE8 = 20200

; +++ global symbols +++

ABPASS           = $22C9 =  8905  BOOT    basic32k-r314.asm:2724
ABS              = $2D12 = 11538  BOOT    basic32k-r314.asm:4325
ACCSUM           = $1AFF =  6911  BOOT    basic32k-r314.asm:1592 (unused)
ACPASS           = $22C8 =  8904  BOOT    basic32k-r314.asm:2723
ADD30            = $3CEA = 15594  BOOT    basic32k-r314.asm:6548
ADD301           = $3CFA = 15610  BOOT    basic32k-r314.asm:6559
ADDEXP           = $2CAB = 11435  BOOT    basic32k-r314.asm:4260
ADDIG            = $2E51 = 11857  BOOT    basic32k-r314.asm:4550
ADDNEWLINE       = $0990 =  2448  BOOT    vdp-r314.asm:911
ADDPHL           = $2A47 = 10823  BOOT    basic32k-r314.asm:3868
ADRS1            = $81F1 = 33265  BOOT    basic32k-r314.asm:3216
ADRS2            = $81F5 = 33269  BOOT    basic32k-r314.asm:3218
ALLFOL           = $2597 =  9623  BOOT    basic32k-r314.asm:3172
ANTVLU           = $1E04 =  7684  BOOT    basic32k-r314.asm:2002
ARET             = $31A2 = 12706  BOOT    basic32k-r314.asm:4990 (unused)
ARLDSV           = $21D3 =  8659  BOOT    basic32k-r314.asm:2563
ARREND           = $81BF = 33215  BOOT    basic32k-r314.asm:110
ARRLP            = $2462 =  9314  BOOT    basic32k-r314.asm:2963
ASC              = $2568 =  9576  BOOT    basic32k-r314.asm:3142
ASCTFP           = $2DF4 = 11764  BOOT    basic32k-r314.asm:4496
ASPCS            = $1D65 =  7525  BOOT    basic32k-r314.asm:1924
ATHOME           = $060F =  1551  BOOT    vdp-r314.asm:393
ATN              = $3156 = 12630  BOOT    basic32k-r314.asm:4961
ATN1             = $3173 = 12659  BOOT    basic32k-r314.asm:4973
ATNTAB           = $317D = 12669  BOOT    basic32k-r314.asm:4978
ATOH             = $1B3A =  6970  BOOT    basic32k-r314.asm:1625
A_RTS_OFF        = $0165 =   357  BOOT    bootloader-r314.asm:197
A_RTS_ON         = $0173 =   371  BOOT    bootloader-r314.asm:208
BACKSPACE        = $078D =  1933  BOOT    vdp-r314.asm:622
BADINP           = $1D88 =  7560  BOOT    basic32k-r314.asm:1936
BAKSTK           = $14EE =  5358  BOOT    basic32k-r314.asm:697
BAKTMP           = $2548 =  9544  BOOT    basic32k-r314.asm:3120
BASTXT           = $8133 = 33075  BOOT    basic32k-r314.asm:86
BCDEFP           = $2D39 = 11577  BOOT    basic32k-r314.asm:4354
BEEPOFF          = $0539 =  1337  BOOT    vdp-r314.asm:260
BFREE            = $0F9C =  3996  BOOT    basic32k-r314.asm:279
BIN              = $3D3C = 15676  BOOT    basic32k-r314.asm:6608
BIN2             = $3D42 = 15682  BOOT    basic32k-r314.asm:6610 (unused)
BINERR           = $3D99 = 15769  BOOT    basic32k-r314.asm:6669
BINIT            = $3D78 = 15736  BOOT    basic32k-r314.asm:6644
BINTFP           = $3D6E = 15726  BOOT    basic32k-r314.asm:6640
BITOUT           = $3D56 = 15702  BOOT    basic32k-r314.asm:6622
BITOUT2          = $3D5A = 15706  BOOT    basic32k-r314.asm:6624
BITS6            = $3A9F = 15007  BOOT    basic32k-r314.asm:6230
BITS7            = $3AA9 = 15017  BOOT    basic32k-r314.asm:6235
BITS8            = $3AB4 = 15028  BOOT    basic32k-r314.asm:6240
BKGNDCLR         = $81EE = 33262  BOOT    basic32k-r314.asm:137
BKSP             = $0008 =     8  BOOT    basic32k-r314.asm:35
BN               = $0028 =    40  BOOT    basic32k-r314.asm:188
BNMSG            = $137A =  4986  BOOT    basic32k-r314.asm:605
BNORM            = $2AA7 = 10919  BOOT    basic32k-r314.asm:3927
BNPTR            = $13F6 =  5110  BOOT    basic32k-r314.asm:632 (unused)
BNRMLP           = $2AAA = 10922  BOOT    basic32k-r314.asm:3930
BOOT             = $0000 =     0  BOOT    :63 (unused)
BOOT_end         = $4EE8 = 20200  BOOT    :63 (unused)
BOOT_size        = $4EE8 = 20200  BOOT    :63 (unused)
BPS              = $81F8 = 33272  BOOT    basic32k-r314.asm:6051
BRK              = $1AAD =  6829  BOOT    basic32k-r314.asm:1549
BRKFLG           = $80A9 = 32937  BOOT    basic32k-r314.asm:80
BRKLIN           = $81B3 = 33203  BOOT    basic32k-r314.asm:104
BRKMSG           = $14E8 =  5352  BOOT    basic32k-r314.asm:695
BRKRET           = $0F93 =  3987  BOOT    basic32k-r314.asm:275
BS               = $0010 =    16  BOOT    basic32k-r314.asm:176
BSERR            = $2206 =  8710  BOOT    basic32k-r314.asm:2594
BSMSG            = $12A9 =  4777  BOOT    basic32k-r314.asm:593
BSPTR            = $13DE =  5086  BOOT    basic32k-r314.asm:620 (unused)
BUFFER           = $8136 = 33078  BOOT    basic32k-r314.asm:87
BYT2ASC          = $3CE1 = 15585  BOOT    basic32k-r314.asm:6543
BYTSFT           = $2BDF = 11231  BOOT    basic32k-r314.asm:4138
CFEVAL           = $2169 =  8553  BOOT    basic32k-r314.asm:2494
CH3_TIMER        = $0237 =   567  BOOT    bootloader-r314.asm:348
CHABFREMPTY      = $01C8 =   456  BOOT    bootloader-r314.asm:262
CHAR2VID         = $06C8 =  1736  BOOT    vdp-r314.asm:517
CHARINTOBFR      = $0136 =   310  BOOT    bootloader-r314.asm:166
CHARTY           = $2117 =  8471  BOOT    basic32k-r314.asm:2450
CHASNDDTN        = $8223 = 33315  BOOT    basic32k-r314.asm:148
CHBSNDDTN        = $8225 = 33317  BOOT    basic32k-r314.asm:149
CHCKYPOS         = $07B3 =  1971  BOOT    vdp-r314.asm:641
CHCKYPOS2        = $081E =  2078  BOOT    vdp-r314.asm:701
CHCSNDDTN        = $8227 = 33319  BOOT    basic32k-r314.asm:150
CHECKALT         = $0CA8 =  3240  BOOT    psg-r314.asm:160
CHECKCTRL        = $0CB6 =  3254  BOOT    psg-r314.asm:166
CHECKKBD         = $0CC4 =  3268  BOOT    psg-r314.asm:172
CHECKPA          = $351B = 13595  BOOT    basic32k-r314.asm:5506
CHECKPY          = $351C = 13596  BOOT    basic32k-r314.asm:5507
CHECKWARM        = $02BB =   699  BOOT    bootloader-r314.asm:416
CHEKFN           = $2360 =  9056  BOOT    basic32k-r314.asm:2816
CHKALT           = $0D3C =  3388  BOOT    psg-r314.asm:232
CHKBIN           = $3D8B = 15755  BOOT    basic32k-r314.asm:6659
CHKBKSP          = $06F2 =  1778  BOOT    vdp-r314.asm:537
CHKCLR0          = $332A = 13098  BOOT    basic32k-r314.asm:5226
CHKCLR1          = $3326 = 13094  BOOT    basic32k-r314.asm:5224
CHKCR            = $06E9 =  1769  BOOT    vdp-r314.asm:533
CHKCRSDWN        = $0716 =  1814  BOOT    vdp-r314.asm:553
CHKCRSLFT        = $06FB =  1787  BOOT    vdp-r314.asm:541
CHKCRSR          = $0246 =   582  BOOT    bootloader-r314.asm:358
CHKCRSRGT        = $070D =  1805  BOOT    vdp-r314.asm:549
CHKCRSUP         = $0704 =  1796  BOOT    vdp-r314.asm:545
CHKCS            = $06E0 =  1760  BOOT    vdp-r314.asm:529
CHKCTRL          = $0D33 =  3379  BOOT    psg-r314.asm:228
CHKEY1           = $3C97 = 15511  BOOT    basic32k-r314.asm:6501
CHKEY2           = $3C9C = 15516  BOOT    basic32k-r314.asm:6502
CHKEY3           = $3C9F = 15519  BOOT    basic32k-r314.asm:6503
CHKEY4           = $3CA5 = 15525  BOOT    basic32k-r314.asm:6504
CHKEY5           = $3CA8 = 15528  BOOT    basic32k-r314.asm:6505
CHKFNK           = $0D6F =  3439  BOOT    psg-r314.asm:257
CHKG2M           = $3330 = 13104  BOOT    basic32k-r314.asm:5232
CHKINK           = $2A26 = 10790  BOOT    basic32k-r314.asm:3847
CHKLF            = $071F =  1823  BOOT    vdp-r314.asm:557
CHKLN            = $0D1F =  3359  BOOT    psg-r314.asm:219
CHKLTR           = $1B0C =  6924  BOOT    basic32k-r314.asm:1601
CHKSCAR          = $326D = 12909  BOOT    basic32k-r314.asm:5122
CHKSNDCH         = $0C2D =  3117  BOOT    psg-r314.asm:86
CHKSTK           = $1522 =  5410  BOOT    basic32k-r314.asm:734
CHKSUM           = $80A6 = 32934  BOOT    basic32k-r314.asm:78
CHKSYN           = $1847 =  6215  BOOT    basic32k-r314.asm:1204
CHKTYP           = $1EE4 =  7908  BOOT    basic32k-r314.asm:2117
CHKYPOS          = $07DA =  2010  BOOT    vdp-r314.asm:662
CHR              = $2579 =  9593  BOOT    basic32k-r314.asm:3154
CHR4VID          = $81EC = 33260  BOOT    basic32k-r314.asm:135
CHRPNT           = $81F9 = 33273  BOOT    basic32k-r314.asm:5249
CHRST68          = $3E28 = 15912  BOOT    6x8fonts-r16.asm:27
CHRST88          = $4628 = 17960  BOOT    8x8fonts-r18.asm:28
CIRCLE           = $3745 = 14149  BOOT    basic32k-r314.asm:5801
CKBPS            = $3A52 = 14930  BOOT    basic32k-r314.asm:6190
CKCOL            = $3417 = 13335  BOOT    basic32k-r314.asm:5364
CKINCHAR         = $0224 =   548  BOOT    bootloader-r314.asm:329
CKMAGN           = $3220 = 12832  BOOT    basic32k-r314.asm:5075
CLEAR            = $1B5F =  7007  BOOT    basic32k-r314.asm:1649
CLEARVIDBUF      = $0602 =  1538  BOOT    vdp-r314.asm:386
CLOTST           = $1893 =  6291  BOOT    basic32k-r314.asm:1251
CLREG            = $16B1 =  5809  BOOT    basic32k-r314.asm:977
CLREX2           = $32E4 = 13028  BOOT    basic32k-r314.asm:5181
CLRG1            = $32D2 = 13010  BOOT    basic32k-r314.asm:5173
CLRG2            = $32DB = 13019  BOOT    basic32k-r314.asm:5177
CLRG2PTNTBL      = $05A2 =  1442  BOOT    vdp-r314.asm:324
CLRMC            = $32CB = 13003  BOOT    basic32k-r314.asm:5169
CLRPRM           = $392C = 14636  BOOT    basic32k-r314.asm:6024
CLRPSGREGS       = $0BCB =  3019  BOOT    psg-r314.asm:31
CLRPTR           = $168C =  5772  BOOT    basic32k-r314.asm:957
CLRTABLE         = $0562 =  1378  BOOT    vdp-r314.asm:291
CLRTXT           = $32C8 = 13000  BOOT    basic32k-r314.asm:5168
CLRVDBF          = $3914 = 14612  BOOT    basic32k-r314.asm:6004
CLR_RAM_REG      = $0A11 =  2577  BOOT    vdp-r314.asm:948
CLS              = $31A5 = 12709  BOOT    basic32k-r314.asm:4995
CLSQT            = $3C5E = 15454  BOOT    basic32k-r314.asm:6467
CLSQT1           = $3C6E = 15470  BOOT    basic32k-r314.asm:6475
CMP16            = $3DC5 = 15813  BOOT    utils-r11.asm:37
CMPFP            = $2D82 = 11650  BOOT    basic32k-r314.asm:4412
CMPLG1           = $207D =  8317  BOOT    basic32k-r314.asm:2356
CMPLOG           = $207B =  8315  BOOT    basic32k-r314.asm:2355
CMPNUM           = $2D68 = 11624  BOOT    basic32k-r314.asm:4395
CMPRES           = $20BF =  8383  BOOT    basic32k-r314.asm:2404
CMPSTR           = $20A7 =  8359  BOOT    basic32k-r314.asm:2384
CMP_A            = $29FF = 10751  BOOT    basic32k-r314.asm:3828
CN               = $0020 =    32  BOOT    basic32k-r314.asm:184
CNMSG            = $133A =  4922  BOOT    basic32k-r314.asm:601
CNPTR            = $13EE =  5102  BOOT    basic32k-r314.asm:628 (unused)
CNT1INS          = $2671 =  9841  BOOT    basic32k-r314.asm:3299
CNTCHKSND        = $0C68 =  3176  BOOT    psg-r314.asm:121
CNTCKCL          = $329A = 12954  BOOT    basic32k-r314.asm:5148
CNTCL1           = $3807 = 14343  BOOT    basic32k-r314.asm:5888
CNTCL2           = $382B = 14379  BOOT    basic32k-r314.asm:5901
CNTCL3           = $384F = 14415  BOOT    basic32k-r314.asm:5914
CNTCL4           = $3875 = 14453  BOOT    basic32k-r314.asm:5928
CNTCL5           = $3897 = 14487  BOOT    basic32k-r314.asm:5940
CNTCL6           = $38BB = 14523  BOOT    basic32k-r314.asm:5953
CNTCL7           = $38DF = 14559  BOOT    basic32k-r314.asm:5966
CNTDRW           = $36E8 = 14056  BOOT    basic32k-r314.asm:5754
CNTEND           = $1D2D =  7469  BOOT    basic32k-r314.asm:1894
CNTFNK           = $0DCA =  3530  BOOT    psg-r314.asm:307
CNTGPT2          = $3396 = 13206  BOOT    basic32k-r314.asm:5289
CNTKBCK          = $0D69 =  3433  BOOT    psg-r314.asm:255
CNTLGC           = $203C =  8252  BOOT    basic32k-r314.asm:2310
CNTLTK           = $3C24 = 15396  BOOT    basic32k-r314.asm:6436
CNTNULL          = $0920 =  2336  BOOT    vdp-r314.asm:854
CNTNULL2         = $094A =  2378  BOOT    vdp-r314.asm:876
CNTPLOT          = $3597 = 13719  BOOT    basic32k-r314.asm:5573
CNTPLT1          = $35B8 = 13752  BOOT    basic32k-r314.asm:5593
CNTRX2           = $39D2 = 14802  BOOT    basic32k-r314.asm:6131
CNTRXCHA         = $0120 =   288  BOOT    bootloader-r314.asm:150
CNTSER           = $399E = 14750  BOOT    basic32k-r314.asm:6102
CNTSER2          = $39DD = 14813  BOOT    basic32k-r314.asm:6138
CNTSER3          = $39EF = 14831  BOOT    basic32k-r314.asm:6147
CNTTXA           = $0201 =   513  BOOT    bootloader-r314.asm:301
CNTVALY          = $390F = 14607  BOOT    basic32k-r314.asm:5997
CNTWTSP          = $19AA =  6570  BOOT    basic32k-r314.asm:1385
CNTZIN           = $26A8 =  9896  BOOT    basic32k-r314.asm:3322
CNVNUM           = $2E00 = 11776  BOOT    basic32k-r314.asm:4502
COLD             = $0EF2 =  3826  BOOT    basic32k-r314.asm:194
COLDSTART        = $02B3 =   691  BOOT    bootloader-r314.asm:413
COLOR            = $327D = 12925  BOOT    basic32k-r314.asm:5137
COMMAN           = $80A3 = 32931  BOOT    basic32k-r314.asm:75
COMPL            = $2B07 = 11015  BOOT    basic32k-r314.asm:4001
CONCAT           = $24DD =  9437  BOOT    basic32k-r314.asm:3053
CONEXP           = $2E30 = 11824  BOOT    basic32k-r314.asm:4526
CONPOS           = $2AA4 = 10916  BOOT    basic32k-r314.asm:3925
CONT             = $1AE6 =  6886  BOOT    basic32k-r314.asm:1579
CONTAD           = $81B9 = 33209  BOOT    basic32k-r314.asm:107
CONTCRSLFT       = $07C4 =  1988  BOOT    vdp-r314.asm:649
CONTCRSRGT       = $0831 =  2097  BOOT    vdp-r314.asm:711
CONTROLKEYS      = $822D = 33325  BOOT    basic32k-r314.asm:155
CONT_POS_CURS    = $06A8 =  1704  BOOT    vdp-r314.asm:494
CONVAR           = $1FCF =  8143  BOOT    basic32k-r314.asm:2241
CORW             = $02A7 =   679  BOOT    bootloader-r314.asm:408
COS              = $30DA = 12506  BOOT    basic32k-r314.asm:4909
COUNTER          = $02EF =   751  BOOT    bootloader-r314.asm:446
CPDEHL           = $1841 =  6209  BOOT    basic32k-r314.asm:1197
CPKEY            = $3BBB = 15291  BOOT    basic32k-r314.asm:6381
CPKEY1           = $3BDA = 15322  BOOT    basic32k-r314.asm:6398
CPKEY2           = $3BCB = 15307  BOOT    basic32k-r314.asm:6388
CPKEY3           = $3BD2 = 15314  BOOT    basic32k-r314.asm:6391
CPKYEND          = $3BE2 = 15330  BOOT    basic32k-r314.asm:6403
CPYLIT           = $1786 =  6022  BOOT    basic32k-r314.asm:1096
CR               = $000D =    13  BOOT    basic32k-r314.asm:38
CRARLP           = $2226 =  8742  BOOT    basic32k-r314.asm:2614
CREARY           = $220B =  8715  BOOT    basic32k-r314.asm:2597
CRESTR           = $1C66 =  7270  BOOT    basic32k-r314.asm:1792
CRGRETURN        = $08F2 =  2290  BOOT    vdp-r314.asm:830
CRNCLP           = $16E7 =  5863  BOOT    basic32k-r314.asm:1004
CRSDN            = $001F =    31  BOOT    basic32k-r314.asm:52
CRSLFT           = $001C =    28  BOOT    basic32k-r314.asm:49
CRSRGT           = $001D =    29  BOOT    basic32k-r314.asm:50
CRSR_STATE       = $81E9 = 33257  BOOT    basic32k-r314.asm:132
CRSUP            = $001E =    30  BOOT    basic32k-r314.asm:51
CRTMST           = $2399 =  9113  BOOT    basic32k-r314.asm:2849
CRTST            = $23A5 =  9125  BOOT    basic32k-r314.asm:2860
CRTSTE           = $23BB =  9147  BOOT    basic32k-r314.asm:2874
CRUNCH           = $16DE =  5854  BOOT    basic32k-r314.asm:1000
CS               = $000C =    12  BOOT    basic32k-r314.asm:37
CSTART           = $0EFF =  3839  BOOT    basic32k-r314.asm:200
CTC0IV           = $81D2 = 33234  BOOT    basic32k-r314.asm:118
CTC1IV           = $81D5 = 33237  BOOT    basic32k-r314.asm:119
CTC2IV           = $81D8 = 33240  BOOT    basic32k-r314.asm:120
CTC3IV           = $81DB = 33243  BOOT    basic32k-r314.asm:121
CTCCONF          = $032E =   814  BOOT    bootloader-r314.asm:504
CTC_CFG          = $3B25 = 15141  BOOT    basic32k-r314.asm:6296
CTC_CH0          = $0010 =    16  BOOT    bootloader-r314.asm:35
CTC_CH1          = $0011 =    17  BOOT    bootloader-r314.asm:36
CTC_CH2          = $0012 =    18  BOOT    bootloader-r314.asm:37
CTC_CH3          = $0013 =    19  BOOT    bootloader-r314.asm:38
CTLOFG           = $80A5 = 32933  BOOT    basic32k-r314.asm:77
CTPOINT          = $355D = 13661  BOOT    basic32k-r314.asm:5541
CTRLC            = $0003 =     3  BOOT    basic32k-r314.asm:33
CTRLG            = $0007 =     7  BOOT    basic32k-r314.asm:34
CTRLO            = $000F =    15  BOOT    basic32k-r314.asm:39
CTRLQ            = $0011 =    17  BOOT    basic32k-r314.asm:40
CTRLR            = $0012 =    18  BOOT    basic32k-r314.asm:41
CTRLS            = $0013 =    19  BOOT    basic32k-r314.asm:42
CTRLU            = $0015 =    21  BOOT    basic32k-r314.asm:43
CTSNDC           = $28D2 = 10450  BOOT    basic32k-r314.asm:3661
CUROPR           = $81AA = 33194  BOOT    basic32k-r314.asm:98
CURPOS           = $8190 = 33168  BOOT    basic32k-r314.asm:89
CURSORDOWN       = $083A =  2106  BOOT    vdp-r314.asm:719
CURSORLEFT       = $07A0 =  1952  BOOT    vdp-r314.asm:632
CURSORRIGHT      = $0805 =  2053  BOOT    vdp-r314.asm:688
CURSORUP         = $07EC =  2028  BOOT    vdp-r314.asm:673
CURSOR_OFF       = $0870 =  2160  BOOT    vdp-r314.asm:752
CURSOR_ON        = $085A =  2138  BOOT    vdp-r314.asm:739
CUR_POS          = $81EF = 33263  BOOT    vdp-r314.asm:827
DATA             = $1C0D =  7181  BOOT    basic32k-r314.asm:1744
DATABT           = $81FA = 33274  BOOT    basic32k-r314.asm:6052
DATFLG           = $8193 = 33171  BOOT    basic32k-r314.asm:92
DATLIN           = $81AE = 33198  BOOT    basic32k-r314.asm:100
DATSNR           = $155F =  5471  BOOT    basic32k-r314.asm:776
DC               = $8201 = 33281  BOOT    basic32k-r314.asm:5800
DCBCDE           = $2DB9 = 11705  BOOT    basic32k-r314.asm:4455
DD               = $0012 =    18  BOOT    basic32k-r314.asm:177
DDERR            = $156E =  5486  BOOT    basic32k-r314.asm:784
DDMSG            = $12B7 =  4791  BOOT    basic32k-r314.asm:594
DDPTR            = $13E0 =  5088  BOOT    basic32k-r314.asm:621 (unused)
DECLN1           = $3BAD = 15277  BOOT    basic32k-r314.asm:6373
DEC_D            = $04F9 =  1273  BOOT    vdp-r314.asm:219
DEC_E            = $02ED =   749  BOOT    bootloader-r314.asm:445
DEEK             = $31C1 = 12737  BOOT    basic32k-r314.asm:5012
DEF              = $22DD =  8925  BOOT    basic32k-r314.asm:2737
DEFFNKS          = $1455 =  5205  BOOT    basic32k-r314.asm:678
DEFSER           = $3A39 = 14905  BOOT    basic32k-r314.asm:6177
DEFSIZ           = $222E =  8750  BOOT    basic32k-r314.asm:2618
DEINT            = $1B20 =  6944  BOOT    basic32k-r314.asm:1612
DEL              = $007F =   127  BOOT    basic32k-r314.asm:47
DELCHR           = $17B6 =  6070  BOOT    basic32k-r314.asm:1126
DEPINT           = $1B1A =  6938  BOOT    basic32k-r314.asm:1610
DETHL4           = $2D48 = 11592  BOOT    basic32k-r314.asm:4366
DETHLB           = $2D4A = 11594  BOOT    basic32k-r314.asm:4367
DIGTXT           = $2EFA = 12026  BOOT    basic32k-r314.asm:4648
DIM              = $20E9 =  8425  BOOT    basic32k-r314.asm:2430
DIMRET           = $20E0 =  8416  BOOT    basic32k-r314.asm:2425
DINPOS           = $1876 =  6262  BOOT    basic32k-r314.asm:1231
DINT             = $2BE4 = 11236  BOOT    basic32k-r314.asm:4146
DIRMOD           = $3B39 = 15161  BOOT    basic32k-r314.asm:6306
DIR_PAU          = $31EC = 12780  BOOT    basic32k-r314.asm:5041 (unused)
DISNMI           = $2780 = 10112  BOOT    basic32k-r314.asm:3454
DIV              = $2C41 = 11329  BOOT    basic32k-r314.asm:4187
DIV1             = $806B = 32875  BOOT    basic32k-r314.asm:66
DIV10            = $2C35 = 11317  BOOT    basic32k-r314.asm:4182
DIV2             = $806F = 32879  BOOT    basic32k-r314.asm:67
DIV3             = $8073 = 32883  BOOT    basic32k-r314.asm:68
DIV4             = $8076 = 32886  BOOT    basic32k-r314.asm:69
DIVLP            = $2C68 = 11368  BOOT    basic32k-r314.asm:4211
DIVSUP           = $806A = 32874  BOOT    basic32k-r314.asm:65
DIV_16_16        = $3E13 = 15891  BOOT    utils-r11.asm:150 (unused)
DIV_16_8         = $3E04 = 15876  BOOT    utils-r11.asm:129
DIV_16_8LP       = $3E07 = 15879  BOOT    utils-r11.asm:131
DIV_8_8          = $3DF4 = 15860  BOOT    utils-r11.asm:106
DIV_8_8LOOP      = $3DF8 = 15864  BOOT    utils-r11.asm:109
DLSZ             = $37C9 = 14281  BOOT    basic32k-r314.asm:5861
DOAGN            = $16CA =  5834  BOOT    basic32k-r314.asm:990
DOCOM            = $1D32 =  7474  BOOT    basic32k-r314.asm:1898
DODEL            = $1796 =  6038  BOOT    basic32k-r314.asm:1110
DOEBIT           = $2F3A = 12090  BOOT    basic32k-r314.asm:4691
DOFN             = $230A =  8970  BOOT    basic32k-r314.asm:2765
DOKE             = $31CC = 12748  BOOT    basic32k-r314.asm:5020
DOSPC            = $1D60 =  7520  BOOT    basic32k-r314.asm:1921
DOTAB            = $1D4B =  7499  BOOT    basic32k-r314.asm:1910
DPOINT           = $2E2C = 11820  BOOT    basic32k-r314.asm:4524
DRAW             = $360F = 13839  BOOT    basic32k-r314.asm:5676
DRWCRL           = $37E5 = 14309  BOOT    basic32k-r314.asm:5876
DTSTR            = $23A9 =  9129  BOOT    basic32k-r314.asm:2863
DV16_16_LP       = $3E18 = 15896  BOOT    utils-r11.asm:152
DVBCDE           = $2C43 = 11331  BOOT    basic32k-r314.asm:4189
DX               = $8203 = 33283  BOOT    basic32k-r314.asm:5674
DXGR             = $3718 = 14104  BOOT    basic32k-r314.asm:5771
DY               = $8205 = 33285  BOOT    basic32k-r314.asm:5675
DZ               = $0014 =    20  BOOT    basic32k-r314.asm:178
DZERR            = $1568 =  5480  BOOT    basic32k-r314.asm:780
DZMSG            = $12CC =  4812  BOOT    basic32k-r314.asm:595
DZPTR            = $13E2 =  5090  BOOT    basic32k-r314.asm:622 (unused)
E2               = $81FD = 33277  BOOT    basic32k-r314.asm:5671
ECHDEL           = $17AA =  6058  BOOT    basic32k-r314.asm:1119
ECHO_CHAR        = $02C5 =   709  BOOT    bootloader-r314.asm:422
EDIGIT           = $2E73 = 11891  BOOT    basic32k-r314.asm:4573
EMPTINS          = $2610 =  9744  BOOT    basic32k-r314.asm:3257
EMPTSNDBFR       = $0BC7 =  3015  BOOT    psg-r314.asm:28
EMPTVRM          = $0A08 =  2568  BOOT    vdp-r314.asm:940
EMPTYCHABFR      = $01BA =   442  BOOT    bootloader-r314.asm:255
EMPTYG2          = $0590 =  1424  BOOT    vdp-r314.asm:316
EMPTYMC          = $05C1 =  1473  BOOT    vdp-r314.asm:342
EMPTYVIDBUF      = $0567 =  1383  BOOT    vdp-r314.asm:295
EMPTY_VRAM       = $09FD =  2557  BOOT    vdp-r314.asm:933
ENDBUF           = $178D =  6029  BOOT    basic32k-r314.asm:1102
ENDCON           = $2E3F = 11839  BOOT    basic32k-r314.asm:4536
ENDCRL           = $37E1 = 14305  BOOT    basic32k-r314.asm:5872
ENDCTRLCK        = $0D0A =  3338  BOOT    psg-r314.asm:208
ENDDIM           = $228D =  8845  BOOT    basic32k-r314.asm:2687
ENDDRAW          = $3741 = 14145  BOOT    basic32k-r314.asm:5785
ENDINK           = $2A38 = 10808  BOOT    basic32k-r314.asm:3858
ENDINK2          = $2A41 = 10817  BOOT    basic32k-r314.asm:3865 (unused)
ENDINP           = $1D19 =  7449  BOOT    basic32k-r314.asm:1885
ENDNAM           = $210B =  8459  BOOT    basic32k-r314.asm:2446
ENDPRG           = $1ABC =  6844  BOOT    basic32k-r314.asm:1559
ENDTMR           = $22A2 =  8866  BOOT    basic32k-r314.asm:2700
ENDTXT           = $81F3 = 33267  BOOT    vdp-r314.asm:829
ENDVDPSET        = $0496 =  1174  BOOT    vdp-r314.asm:164
ENFMEM           = $152B =  5419  BOOT    basic32k-r314.asm:740
ER               = $81FB = 33275  BOOT    basic32k-r314.asm:5670
ER2              = $36BC = 14012  BOOT    basic32k-r314.asm:5738
ERASECLRTBL      = $0515 =  1301  BOOT    vdp-r314.asm:236
ERRIN            = $159D =  5533  BOOT    basic32k-r314.asm:808
ERRINT           = $1AE0 =  6880  BOOT    basic32k-r314.asm:1575
ERRLIN           = $81B7 = 33207  BOOT    basic32k-r314.asm:106
ERRMSG           = $14D7 =  5335  BOOT    basic32k-r314.asm:691
ERROR            = $1579 =  5497  BOOT    basic32k-r314.asm:792
ERRORS           = $1234 =  4660  BOOT    basic32k-r314.asm:584 (unused)
ERRTBL           = $13CE =  5070  BOOT    basic32k-r314.asm:611
ESC              = $001B =    27  BOOT    basic32k-r314.asm:45
EVAL             = $1EF1 =  7921  BOOT    basic32k-r314.asm:2125
EVAL1            = $1EF4 =  7924  BOOT    basic32k-r314.asm:2127
EVAL2            = $1EFD =  7933  BOOT    basic32k-r314.asm:2131
EVAL3            = $1F00 =  7936  BOOT    basic32k-r314.asm:2132
EVLPAR           = $1FB6 =  8118  BOOT    basic32k-r314.asm:2227
EVNOT            = $20C9 =  8393  BOOT    basic32k-r314.asm:2412
EXCUTE           = $1A4A =  6730  BOOT    basic32k-r314.asm:1479
EXG2MD           = $0453 =  1107  BOOT    vdp-r314.asm:130
EXITCHAR2VID     = $075B =  1883  BOOT    vdp-r314.asm:586
EXITCURSORDOWN   = $0857 =  2135  BOOT    vdp-r314.asm:733
EXITCURSORLEFT   = $07C7 =  1991  BOOT    vdp-r314.asm:650
EXITCURSORRGHT   = $0837 =  2103  BOOT    vdp-r314.asm:713
EXITCURSORUP     = $0803 =  2051  BOOT    vdp-r314.asm:683
EXITCURSOR_ON    = $086E =  2158  BOOT    vdp-r314.asm:748
EXITGM           = $153F =  5439  BOOT    basic32k-r314.asm:756
EXITPA2          = $3517 = 13591  BOOT    basic32k-r314.asm:5502
EXITPAI          = $3513 = 13587  BOOT    basic32k-r314.asm:5501
EXITSER          = $3AFA = 15098  BOOT    basic32k-r314.asm:6279 (unused)
EXMUL16          = $3DE8 = 15848  BOOT    utils-r11.asm:77
EXP              = $2FD4 = 12244  BOOT    basic32k-r314.asm:4778
EXPLP            = $2E1E = 11806  BOOT    basic32k-r314.asm:4516
EXPTAB           = $3014 = 12308  BOOT    basic32k-r314.asm:4806
EXPTEN           = $2F4C = 12108  BOOT    basic32k-r314.asm:4701
EXTIG            = $1E60 =  7776  BOOT    basic32k-r314.asm:2050
EXTXA            = $0215 =   533  BOOT    bootloader-r314.asm:312
FANDT            = $1E89 =  7817  BOOT    basic32k-r314.asm:2068
FC               = $0008 =     8  BOOT    basic32k-r314.asm:172
FCERR            = $1B35 =  6965  BOOT    basic32k-r314.asm:1622
FCMSG            = $126D =  4717  BOOT    basic32k-r314.asm:589
FCPTR            = $13D6 =  5078  BOOT    basic32k-r314.asm:616 (unused)
FDTLP            = $1E70 =  7792  BOOT    basic32k-r314.asm:2052
FINDEL           = $2269 =  8809  BOOT    basic32k-r314.asm:2659
FINDKEY          = $0D1D =  3357  BOOT    psg-r314.asm:218
FLASHCURSOR      = $0769 =  1897  BOOT    vdp-r314.asm:599
FLGDIF           = $2CF8 = 11512  BOOT    basic32k-r314.asm:4308
FLGREL           = $2CFF = 11519  BOOT    basic32k-r314.asm:4314
FNARG            = $81C5 = 33221  BOOT    basic32k-r314.asm:113
FNCTAB           = $0FE5 =  4069  BOOT    basic32k-r314.asm:296
FNDARY           = $21D9 =  8665  BOOT    basic32k-r314.asm:2567
FNDBPS           = $3A6B = 14955  BOOT    basic32k-r314.asm:6200
FNDELP           = $226E =  8814  BOOT    basic32k-r314.asm:2664
FNDEND           = $165F =  5727  BOOT    basic32k-r314.asm:920
FNDNUM           = $2762 = 10082  BOOT    basic32k-r314.asm:3436
FNDTOK           = $196C =  6508  BOOT    basic32k-r314.asm:1350
FNDVAR           = $2150 =  8528  BOOT    basic32k-r314.asm:2478
FNDWRD           = $1711 =  5905  BOOT    basic32k-r314.asm:1024
FNKEYS           = $80B3 = 32947  BOOT    basic32k-r314.asm:85
FNKEYSORD        = $0DEA =  3562  BOOT    psg-r314.asm:326
FNOFST           = $1FE0 =  8160  BOOT    basic32k-r314.asm:2251
FNRGNM           = $81C3 = 33219  BOOT    basic32k-r314.asm:112
FNTHR            = $215E =  8542  BOOT    basic32k-r314.asm:2486
FNVAL            = $2011 =  8209  BOOT    basic32k-r314.asm:2277
FOPRND           = $1F29 =  7977  BOOT    basic32k-r314.asm:2153
FOR              = $19B1 =  6577  BOOT    basic32k-r314.asm:1390
FORFLG           = $81B0 = 33200  BOOT    basic32k-r314.asm:101
FORFND           = $19E1 =  6625  BOOT    basic32k-r314.asm:1418
FORSLP           = $19C5 =  6597  BOOT    basic32k-r314.asm:1399
FPADD            = $2A56 = 10838  BOOT    basic32k-r314.asm:3876
FPBCDE           = $2D2E = 11566  BOOT    basic32k-r314.asm:4345
FPEXP            = $81CC = 33228  BOOT    basic32k-r314.asm:115
FPINT            = $2D95 = 11669  BOOT    basic32k-r314.asm:4432
FPMULT           = $2B91 = 11153  BOOT    basic32k-r314.asm:4087
FPREG            = $81C9 = 33225  BOOT    basic32k-r314.asm:114
FPROND           = $2AEE = 10990  BOOT    basic32k-r314.asm:3977
FPSINT           = $1B14 =  6932  BOOT    basic32k-r314.asm:1608
FPTHL            = $2D45 = 11589  BOOT    basic32k-r314.asm:4365
FRE              = $22A7 =  8871  BOOT    basic32k-r314.asm:2706
FRENUM           = $22C3 =  8899  BOOT    basic32k-r314.asm:2718
FRGNDCLR         = $81ED = 33261  BOOT    basic32k-r314.asm:136
FRMEVL           = $1FD2 =  8146  BOOT    basic32k-r314.asm:2242
FWVER            = $00D0 =   208  BOOT    bootloader-r314.asm:133 (unused)
G1MD             = $03CD =   973  BOOT    vdp-r314.asm:67
G2MD             = $040E =  1038  BOOT    vdp-r314.asm:100
GARBGE           = $242A =  9258  BOOT    basic32k-r314.asm:2936
GARBLP           = $242D =  9261  BOOT    basic32k-r314.asm:2937
GETCHR           = $1A6A =  6762  BOOT    basic32k-r314.asm:1502
GETCMD           = $15CC =  5580  BOOT    basic32k-r314.asm:832
GETHEX           = $3D17 = 15639  BOOT    basic32k-r314.asm:6581
GETINP           = $31A3 = 12707  BOOT    basic32k-r314.asm:4992
GETINT           = $2765 = 10085  BOOT    basic32k-r314.asm:3437
GETLEN           = $255D =  9565  BOOT    basic32k-r314.asm:3134
GETLIN           = $17C7 =  6087  BOOT    basic32k-r314.asm:1134
GETLN            = $1B3B =  6971  BOOT    basic32k-r314.asm:1626
GETNUM           = $1EDF =  7903  BOOT    basic32k-r314.asm:2114
GETNXT           = $172C =  5932  BOOT    basic32k-r314.asm:1039
GETSTR           = $2527 =  9511  BOOT    basic32k-r314.asm:3100
GETVAR           = $20EE =  8430  BOOT    basic32k-r314.asm:2433
GM               = $002A =    42  BOOT    basic32k-r314.asm:189
GMERR            = $3945 = 14661  BOOT    basic32k-r314.asm:6039
GMMSG            = $1385 =  4997  BOOT    basic32k-r314.asm:606
GMNCR            = $181E =  6174  BOOT    basic32k-r314.asm:1176
GMPRT            = $13F8 =  5112  BOOT    basic32k-r314.asm:633 (unused)
GNXARY           = $2461 =  9313  BOOT    basic32k-r314.asm:2962
GOFUNC           = $2019 =  8217  BOOT    basic32k-r314.asm:2281
GOSUB            = $1BB9 =  7097  BOOT    basic32k-r314.asm:1695
GOTO             = $1BCA =  7114  BOOT    basic32k-r314.asm:1707
GPCPCH1          = $33FA = 13306  BOOT    basic32k-r314.asm:5348
GPCPCHR          = $33EF = 13295  BOOT    basic32k-r314.asm:5343 (unused)
GPNT             = $33AB = 13227  BOOT    basic32k-r314.asm:5298
GPNTCO1          = $33D5 = 13269  BOOT    basic32k-r314.asm:5325
GPNTCOL          = $33CB = 13259  BOOT    basic32k-r314.asm:5321 (unused)
GPRINT           = $3339 = 13113  BOOT    basic32k-r314.asm:5252
GRBARY           = $2481 =  9345  BOOT    basic32k-r314.asm:2981
GRBDON           = $2402 =  9218  BOOT    basic32k-r314.asm:2911
GRBLP            = $243B =  9275  BOOT    basic32k-r314.asm:2943
GSTRCU           = $252A =  9514  BOOT    basic32k-r314.asm:3101
GSTRDE           = $252E =  9518  BOOT    basic32k-r314.asm:3103
GSTRHL           = $252D =  9517  BOOT    basic32k-r314.asm:3102
GTFLNM           = $256C =  9580  BOOT    basic32k-r314.asm:3144 (unused)
GTFNAM           = $20F3 =  8435  BOOT    basic32k-r314.asm:2436
GTLNLP           = $1B3E =  6974  BOOT    basic32k-r314.asm:1627
GTSIXD           = $2EC4 = 11972  BOOT    basic32k-r314.asm:4617
GTVLUS           = $1DDC =  7644  BOOT    basic32k-r314.asm:1980
GX               = $81F3 = 33267  BOOT    basic32k-r314.asm:5244
GY               = $81F5 = 33269  BOOT    basic32k-r314.asm:5245
HALF             = $2F6B = 12139  BOOT    basic32k-r314.asm:4722
HALFPI           = $3124 = 12580  BOOT    basic32k-r314.asm:4940
HELLOWRLD        = $02DF =   735  BOOT    bootloader-r314.asm:437
HELP             = $3B45 = 15173  BOOT    basic32k-r314.asm:6317
HEX              = $3CAB = 15531  BOOT    basic32k-r314.asm:6509
HEX1             = $3CC3 = 15555  BOOT    basic32k-r314.asm:6522
HEX2             = $3CC5 = 15557  BOOT    basic32k-r314.asm:6524
HEX3             = $3CD2 = 15570  BOOT    basic32k-r314.asm:6532
HEX4             = $3CD4 = 15572  BOOT    basic32k-r314.asm:6534
HEXIT            = $3D2E = 15662  BOOT    basic32k-r314.asm:6596
HEXLP            = $3D0A = 15626  BOOT    basic32k-r314.asm:6571
HEXLP1           = $3D0F = 15631  BOOT    basic32k-r314.asm:6573
HEXTFP           = $3CFE = 15614  BOOT    basic32k-r314.asm:6566
HL2XY            = $06B7 =  1719  BOOT    vdp-r314.asm:505
HLPERR           = $3B5B = 15195  BOOT    basic32k-r314.asm:6328
HLPLN            = $80B1 = 32945  BOOT    basic32k-r314.asm:84
HOME             = $0019 =    25  BOOT    basic32k-r314.asm:44
HP               = $0030 =    48  BOOT    basic32k-r314.asm:192
HPMSG            = $13C4 =  5060  BOOT    basic32k-r314.asm:609
HPPTR            = $13FE =  5118  BOOT    basic32k-r314.asm:636 (unused)
HX               = $0026 =    38  BOOT    basic32k-r314.asm:187
HXERR            = $3D37 = 15671  BOOT    basic32k-r314.asm:6604
HXMSG            = $136F =  4975  BOOT    basic32k-r314.asm:604
HXPTR            = $13F4 =  5108  BOOT    basic32k-r314.asm:631 (unused)
ID               = $0016 =    22  BOOT    basic32k-r314.asm:179
IDMSG            = $12DD =  4829  BOOT    basic32k-r314.asm:596
IDPTR            = $13E4 =  5092  BOOT    basic32k-r314.asm:623 (unused)
IDTEST           = $2352 =  9042  BOOT    basic32k-r314.asm:2806
IF               = $1C9C =  7324  BOOT    basic32k-r314.asm:1825
IFGO             = $1CAA =  7338  BOOT    basic32k-r314.asm:1832
IFJMP            = $1A51 =  6737  BOOT    basic32k-r314.asm:1482
INCHL            = $2D43 = 11587  BOOT    basic32k-r314.asm:4362
INCLEN           = $1872 =  6258  BOOT    basic32k-r314.asm:1229
INCTMR3          = $0240 =   576  BOOT    bootloader-r314.asm:354
INDFND           = $1508 =  5384  BOOT    basic32k-r314.asm:716
INEWLN           = $1627 =  5671  BOOT    basic32k-r314.asm:880
INIT             = $0F06 =  3846  BOOT    basic32k-r314.asm:204
INITAB           = $1400 =  5120  BOOT    basic32k-r314.asm:640
INITBE           = $14D7 =  5335  BOOT    basic32k-r314.asm:687
INITST           = $3DB0 = 15792  BOOT    basic32k-r314.asm:6684
INIT_HW          = $025A =   602  BOOT    bootloader-r314.asm:375
INKEY            = $29F4 = 10740  BOOT    basic32k-r314.asm:3823
INKEY2           = $2A0E = 10766  BOOT    basic32k-r314.asm:3836
INMSG            = $14DE =  5342  BOOT    basic32k-r314.asm:692
INP              = $2722 = 10018  BOOT    basic32k-r314.asm:3405
INPBIN           = $1E2E =  7726  BOOT    basic32k-r314.asm:2024
INPBRK           = $1AB9 =  6841  BOOT    basic32k-r314.asm:1557
INPORT           = $80A0 = 32928  BOOT    basic32k-r314.asm:73
INPSUB           = $809F = 32927  BOOT    basic32k-r314.asm:72
INPUT            = $1D99 =  7577  BOOT    basic32k-r314.asm:1944
INRNG            = $2ECD = 11981  BOOT    basic32k-r314.asm:4622
INSTR            = $25B9 =  9657  BOOT    basic32k-r314.asm:3224
INT              = $2DC0 = 11712  BOOT    basic32k-r314.asm:4463
INTVAR           = $169B =  5787  BOOT    basic32k-r314.asm:968
INVSGN           = $2D16 = 11542  BOOT    basic32k-r314.asm:4327
ITMSEP           = $1E1F =  7711  BOOT    basic32k-r314.asm:2015
JSTZER           = $2F56 = 12118  BOOT    basic32k-r314.asm:4707
KBDNPT           = $8229 = 33321  BOOT    basic32k-r314.asm:151
KBMAP            = $0DF2 =  3570  BOOT    psg-r314.asm:329
KBMAP_ALT        = $0E72 =  3698  BOOT    psg-r314.asm:349
KBMAP_CTRL       = $0EB2 =  3762  BOOT    psg-r314.asm:359
KBMAP_SFT        = $0E32 =  3634  BOOT    psg-r314.asm:339
KBTMP            = $822A = 33322  BOOT    basic32k-r314.asm:152
KEY              = $3B60 = 15200  BOOT    basic32k-r314.asm:6333
KEYBOARD         = $0C88 =  3208  BOOT    psg-r314.asm:144
KEYCH            = $3B7D = 15229  BOOT    basic32k-r314.asm:6349
KILFOR           = $1ECF =  7887  BOOT    basic32k-r314.asm:2105
KILIN            = $17C1 =  6081  BOOT    basic32k-r314.asm:1131
LASTKEYPRSD      = $822C = 33324  BOOT    basic32k-r314.asm:154
LCRFLG           = $8191 = 33169  BOOT    basic32k-r314.asm:90
LDCLRTBEX2       = $048D =  1165  BOOT    vdp-r314.asm:157
LDCLRTBMD1       = $0405 =  1029  BOOT    vdp-r314.asm:93
LDCOLSTOEMPTY    = $0581 =  1409  BOOT    vdp-r314.asm:306
LDFNKEYCHR       = $0DB6 =  3510  BOOT    psg-r314.asm:297
LDG1             = $154C =  5452  BOOT    basic32k-r314.asm:762
LDG1ND           = $155D =  5469  BOOT    basic32k-r314.asm:772
LDKEY            = $3C0F = 15375  BOOT    basic32k-r314.asm:6427
LDREGVLS         = $0A2E =  2606  BOOT    vdp-r314.asm:967
LEDLIGHT         = $02E9 =   745  BOOT    bootloader-r314.asm:443
LEFT             = $2589 =  9609  BOOT    basic32k-r314.asm:3162
LEN              = $2559 =  9561  BOOT    basic32k-r314.asm:3132
LET              = $1C24 =  7204  BOOT    basic32k-r314.asm:1760
LETNUM           = $1C77 =  7287  BOOT    basic32k-r314.asm:1802
LETSTR           = $1C3F =  7231  BOOT    basic32k-r314.asm:1773
LF               = $000A =    10  BOOT    basic32k-r314.asm:36
LFRGNM           = $2718 = 10008  BOOT    basic32k-r314.asm:3396
LINEAT           = $80AF = 32943  BOOT    basic32k-r314.asm:83
LINEIN           = $2E7F = 11903  BOOT    basic32k-r314.asm:4583
LINFND           = $1610 =  5648  BOOT    basic32k-r314.asm:866
LIST             = $18A6 =  6310  BOOT    basic32k-r314.asm:1263
LISTLP           = $1929 =  6441  BOOT    basic32k-r314.asm:1312
LM80CLOGO        = $0A81 =  2689  BOOT    vdp-r314.asm:1052
LNS1             = $81EF = 33263  BOOT    basic32k-r314.asm:3215
LNS2             = $81F3 = 33267  BOOT    basic32k-r314.asm:3217
LOADCHARSET      = $0A38 =  2616  BOOT    vdp-r314.asm:976
LOADCLR          = $32EB = 13035  BOOT    basic32k-r314.asm:5184
LOADFP           = $2D3C = 11580  BOOT    basic32k-r314.asm:4355
LOADLOGOCHRS     = $0541 =  1345  BOOT    vdp-r314.asm:266
LOADMAP          = $0D43 =  3395  BOOT    psg-r314.asm:235
LOADNEXTCOL      = $08A2 =  2210  BOOT    vdp-r314.asm:779
LOAD_CRSR_POS    = $0693 =  1683  BOOT    vdp-r314.asm:483
LOCATE           = $2838 = 10296  BOOT    basic32k-r314.asm:3571
LOG              = $2B50 = 11088  BOOT    basic32k-r314.asm:4055
LOGOFONT         = $4E28 = 20008  BOOT    logo-fonts.asm:13
LOGTAB           = $2B43 = 11075  BOOT    basic32k-r314.asm:4050
LOKFOR           = $14F2 =  5362  BOOT    basic32k-r314.asm:699
LOOPST           = $81AC = 33196  BOOT    basic32k-r314.asm:99
LS               = $001C =    28  BOOT    basic32k-r314.asm:182
LSMSG            = $130F =  4879  BOOT    basic32k-r314.asm:599
LSPTR            = $13EA =  5098  BOOT    basic32k-r314.asm:626 (unused)
LST01            = $18D2 =  6354  BOOT    basic32k-r314.asm:1280
LST01H           = $18D5 =  6357  BOOT    basic32k-r314.asm:1281
LST03            = $190F =  6415  BOOT    basic32k-r314.asm:1301
LST04            = $18EC =  6380  BOOT    basic32k-r314.asm:1289 (unused)
LST05            = $191D =  6429  BOOT    basic32k-r314.asm:1308
LST06            = $18F3 =  6387  BOOT    basic32k-r314.asm:1291
LST07            = $194E =  6478  BOOT    basic32k-r314.asm:1332
LST08            = $194B =  6475  BOOT    basic32k-r314.asm:1331
LSTALL           = $18F7 =  6391  BOOT    basic32k-r314.asm:1293
LSTBIN           = $81B1 = 33201  BOOT    basic32k-r314.asm:102
LSTCSRSTA        = $81EA = 33258  BOOT    basic32k-r314.asm:133
LSTKEYS          = $3BE4 = 15332  BOOT    basic32k-r314.asm:6406
LSTLP2           = $195A =  6490  BOOT    basic32k-r314.asm:1341
LSTLP3           = $195D =  6493  BOOT    basic32k-r314.asm:1342
LSTRAM           = $8194 = 33172  BOOT    basic32k-r314.asm:93
LSTRND           = $809B = 32923  BOOT    basic32k-r314.asm:71
LTSTND           = $1E39 =  7737  BOOT    basic32k-r314.asm:2029
LVINSTR          = $269E =  9886  BOOT    basic32k-r314.asm:3317
LVKBRDCHK        = $0D9D =  3485  BOOT    psg-r314.asm:278
LVKBRDCHK2       = $0D99 =  3481  BOOT    psg-r314.asm:276
LVRXCHA          = $0131 =   305  BOOT    bootloader-r314.asm:158
LWIDTH           = $80A2 = 32930  BOOT    basic32k-r314.asm:74
MAKINT           = $2768 = 10088  BOOT    basic32k-r314.asm:3438
MAKNUM           = $2EE9 = 12009  BOOT    basic32k-r314.asm:4637
MANLP            = $2E08 = 11784  BOOT    basic32k-r314.asm:4508
MATCH            = $175E =  5982  BOOT    basic32k-r314.asm:1071
MCMD             = $0430 =  1072  BOOT    vdp-r314.asm:115
MEMMSG           = $0FDA =  4058  BOOT    basic32k-r314.asm:285
MID              = $26B9 =  9913  BOOT    basic32k-r314.asm:3334
MID1             = $258F =  9615  BOOT    basic32k-r314.asm:3166
MIDNUM           = $271D = 10013  BOOT    basic32k-r314.asm:3399
MINCDE           = $2A96 = 10902  BOOT    basic32k-r314.asm:3911
MINUS            = $1FBE =  8126  BOOT    basic32k-r314.asm:2232
MIXCLRS          = $3319 = 13081  BOOT    basic32k-r314.asm:5212
MIXCOL           = $81EF = 33263  BOOT    basic32k-r314.asm:5247
MKTMST           = $2396 =  9110  BOOT    basic32k-r314.asm:2848
MLDBLP           = $2DE1 = 11745  BOOT    basic32k-r314.asm:4484
MLDEBC           = $2DD9 = 11737  BOOT    basic32k-r314.asm:4479
MLOOP            = $0F34 =  3892  BOOT    basic32k-r314.asm:222
MLP              = $3DD8 = 15832  BOOT    utils-r11.asm:66
MLP1             = $3DDF = 15839  BOOT    utils-r11.asm:70
MLSP10           = $2CD6 = 11478  BOOT    basic32k-r314.asm:4288
MNGSNDS          = $0C23 =  3107  BOOT    psg-r314.asm:82
MNOASK           = $0F31 =  3889  BOOT    basic32k-r314.asm:221
MNPAINT          = $3489 = 13449  BOOT    basic32k-r314.asm:5433
MO               = $0024 =    36  BOOT    basic32k-r314.asm:186
MOD              = $2BEC = 11244  BOOT    basic32k-r314.asm:4156
MOMSG            = $135F =  4959  BOOT    basic32k-r314.asm:603
MONOUT           = $3D9E = 15774  BOOT    basic32k-r314.asm:6673
MOPTR            = $13F2 =  5106  BOOT    basic32k-r314.asm:630 (unused)
MORDT            = $1E45 =  7749  BOOT    basic32k-r314.asm:2034
MORINP           = $17D0 =  6096  BOOT    basic32k-r314.asm:1139
MOVBUF           = $1646 =  5702  BOOT    basic32k-r314.asm:901
MOVCRS           = $065F =  1631  BOOT    vdp-r314.asm:456
MOVDIR           = $1766 =  5990  BOOT    basic32k-r314.asm:1079
MOVLP            = $1517 =  5399  BOOT    basic32k-r314.asm:726
MOVSHOWCRS       = $0665 =  1637  BOOT    vdp-r314.asm:458
MOVSTR           = $1514 =  5396  BOOT    basic32k-r314.asm:723
MOVUP            = $1511 =  5393  BOOT    basic32k-r314.asm:722
MRPRNT           = $1CBC =  7356  BOOT    basic32k-r314.asm:1839
MSGTXT1          = $033A =   826  BOOT    bootloader-r314.asm:509
MSGTXT2          = $0364 =   868  BOOT    bootloader-r314.asm:511
MSIZE            = $0F21 =  3873  BOOT    basic32k-r314.asm:215
MUL16            = $3DD0 = 15824  BOOT    utils-r11.asm:58
MUL8LP           = $2BBC = 11196  BOOT    basic32k-r314.asm:4110
MULLN2           = $2B88 = 11144  BOOT    basic32k-r314.asm:4081
MULT             = $2B8F = 11151  BOOT    basic32k-r314.asm:4085
MULT8            = $2BB3 = 11187  BOOT    basic32k-r314.asm:4104
MULTEN           = $2E4A = 11850  BOOT    basic32k-r314.asm:4544
MULVAL           = $823D = 33341  BOOT    basic32k-r314.asm:161
MVCRS2LFT        = $07C9 =  1993  BOOT    vdp-r314.asm:654
MVSTPT           = $1C6E =  7278  BOOT    basic32k-r314.asm:1796
NEDMOR           = $1DD8 =  7640  BOOT    basic32k-r314.asm:1978
NEGAFT           = $2F81 = 12161  BOOT    basic32k-r314.asm:4731
NEW              = $168B =  5771  BOOT    basic32k-r314.asm:956
NEWCRSRCOORD     = $0675 =  1653  BOOT    vdp-r314.asm:467
NEXITM           = $1D6F =  7535  BOOT    basic32k-r314.asm:1930
NEXT             = $1E94 =  7828  BOOT    basic32k-r314.asm:2073
NEXT1            = $1E97 =  7831  BOOT    basic32k-r314.asm:2074
NF               = $0000 =     0  BOOT    basic32k-r314.asm:168
NFERR            = $156B =  5483  BOOT    basic32k-r314.asm:782
NFMSG            = $1234 =  4660  BOOT    basic32k-r314.asm:585
NFPTR            = $13CE =  5070  BOOT    basic32k-r314.asm:612 (unused)
NLLCR            = $0000 =     0  BOOT    basic32k-r314.asm:32
NM1              = $2791 = 10129  BOOT    basic32k-r314.asm:3462
NMI              = $2776 = 10102  BOOT    basic32k-r314.asm:3449
NMI2             = $27A2 = 10146  BOOT    basic32k-r314.asm:3470
NMIDINT          = $27AD = 10157  BOOT    basic32k-r314.asm:3479
NMIEINT          = $27A6 = 10150  BOOT    basic32k-r314.asm:3475
NMIFLG           = $80A8 = 32936  BOOT    basic32k-r314.asm:79
NMIINT           = $27B0 = 10160  BOOT    basic32k-r314.asm:3480
NMIUSR           = $8061 = 32865  BOOT    basic32k-r314.asm:61
NMIVR1           = $27BC = 10172  BOOT    basic32k-r314.asm:3491
NOBEEP           = $0BF5 =  3061  BOOT    psg-r314.asm:51
NOBPDAT          = $0C11 =  3089  BOOT    psg-r314.asm:65
NOCHNG           = $1756 =  5974  BOOT    basic32k-r314.asm:1066
NOENED           = $2F59 = 12121  BOOT    basic32k-r314.asm:4710
NOGD             = $35D8 = 13784  BOOT    basic32k-r314.asm:5615
NOISUP           = $2957 = 10583  BOOT    basic32k-r314.asm:3729
NOKEYPRSD        = $0D0E =  3342  BOOT    psg-r314.asm:210
NOLIN            = $1ACF =  6863  BOOT    basic32k-r314.asm:1568
NOMADD           = $2BCD = 11213  BOOT    basic32k-r314.asm:4121
NOMLAD           = $2DEF = 11759  BOOT    basic32k-r314.asm:4492
NOPMPT           = $1DB3 =  7603  BOOT    basic32k-r314.asm:1956
NORMAL           = $2AC1 = 10945  BOOT    basic32k-r314.asm:3946
NOS1             = $2981 = 10625  BOOT    basic32k-r314.asm:3747
NOS2             = $2994 = 10644  BOOT    basic32k-r314.asm:3760
NOS3             = $29AD = 10669  BOOT    basic32k-r314.asm:3779
NOSPC            = $174D =  5965  BOOT    basic32k-r314.asm:1061
NOSUB7           = $3D2A = 15658  BOOT    basic32k-r314.asm:6592
NOSWAP           = $2A70 = 10864  BOOT    basic32k-r314.asm:3892
NOSYSPR          = $27EE = 10222  BOOT    basic32k-r314.asm:3520
NOTAMP           = $1F93 =  8083  BOOT    basic32k-r314.asm:2213
NOTFULL          = $0141 =   321  BOOT    bootloader-r314.asm:172
NOTRDWRAP        = $01E2 =   482  BOOT    bootloader-r314.asm:280
NOTSTR           = $2126 =  8486  BOOT    basic32k-r314.asm:2458
NOTWRAP          = $014D =   333  BOOT    bootloader-r314.asm:178
NOXOR            = $2748 = 10056  BOOT    basic32k-r314.asm:3422
NSCFOR           = $2136 =  8502  BOOT    basic32k-r314.asm:2466
NULFLG           = $80A4 = 32932  BOOT    basic32k-r314.asm:76
NUMASC           = $2E92 = 11922  BOOT    basic32k-r314.asm:4593
NUMCHR           = $81FB = 33275  BOOT    basic32k-r314.asm:5250
NXTARY           = $21ED =  8685  BOOT    basic32k-r314.asm:2579
NXTBYT           = $173C =  5948  BOOT    basic32k-r314.asm:1051
NXTCHAR          = $0A4B =  2635  BOOT    vdp-r314.asm:987
NXTCHR           = $177D =  6013  BOOT    basic32k-r314.asm:1091
NXTDAT           = $81C1 = 33217  BOOT    basic32k-r314.asm:111
NXTDTA           = $1C0C =  7180  BOOT    basic32k-r314.asm:1742
NXTITM           = $1DD0 =  7632  BOOT    basic32k-r314.asm:1973
NXTLN            = $1984 =  6532  BOOT    basic32k-r314.asm:1363
NXTLOOP          = $3468 = 13416  BOOT    basic32k-r314.asm:5415
NXTOPR           = $81B5 = 33205  BOOT    basic32k-r314.asm:105
NXTSTL           = $1C13 =  7187  BOOT    basic32k-r314.asm:1747
NXTSTT           = $1C16 =  7190  BOOT    basic32k-r314.asm:1750
OD               = $0006 =     6  BOOT    basic32k-r314.asm:171
ODMSG            = $1261 =  4705  BOOT    basic32k-r314.asm:588
ODPTR            = $13D4 =  5076  BOOT    basic32k-r314.asm:615 (unused)
OKMSG            = $14E3 =  5347  BOOT    basic32k-r314.asm:694
OM               = $000C =    12  BOOT    basic32k-r314.asm:174
OMERR            = $153A =  5434  BOOT    basic32k-r314.asm:751
OMMSG            = $128C =  4748  BOOT    basic32k-r314.asm:591
OMPTR            = $13DA =  5082  BOOT    basic32k-r314.asm:618 (unused)
ON               = $1C7E =  7294  BOOT    basic32k-r314.asm:1808
ONGO             = $1C8D =  7309  BOOT    basic32k-r314.asm:1816
ONGOLP           = $1C8E =  7310  BOOT    basic32k-r314.asm:1817
ONJMP            = $1A52 =  6738  BOOT    basic32k-r314.asm:1484
OPNPAR           = $1EED =  7917  BOOT    basic32k-r314.asm:2123
OPNQT            = $3C70 = 15472  BOOT    basic32k-r314.asm:6478
OPNQT1           = $3C86 = 15494  BOOT    basic32k-r314.asm:6488
OPRND            = $1F68 =  8040  BOOT    basic32k-r314.asm:2196
ORGSP            = $81FB = 33275  BOOT    basic32k-r314.asm:5386
OS               = $001A =    26  BOOT    basic32k-r314.asm:181
OSMSG            = $12FB =  4859  BOOT    basic32k-r314.asm:598
OSPTR            = $13E8 =  5096  BOOT    basic32k-r314.asm:625 (unused)
OTKLN            = $17BE =  6078  BOOT    basic32k-r314.asm:1130
OTPORT           = $8068 = 32872  BOOT    basic32k-r314.asm:64
OUTC             = $1852 =  6226  BOOT    basic32k-r314.asm:1212
OUTEXP           = $2F4A = 12106  BOOT    basic32k-r314.asm:4700
OUTIT            = $1838 =  6200  BOOT    basic32k-r314.asm:1190
OUTNBS           = $183B =  6203  BOOT    basic32k-r314.asm:1192
OUTNCR           = $3DBF = 15807  BOOT    basic32k-r314.asm:6696
OUTSUB           = $8067 = 32871  BOOT    basic32k-r314.asm:63
OUTWRD           = $1976 =  6518  BOOT    basic32k-r314.asm:1356
OV               = $000A =    10  BOOT    basic32k-r314.asm:173
OVERR            = $1574 =  5492  BOOT    basic32k-r314.asm:788
OVMSG            = $1283 =  4739  BOOT    basic32k-r314.asm:590
OVPTR            = $13D8 =  5080  BOOT    basic32k-r314.asm:617 (unused)
OVTST1           = $2CC9 = 11465  BOOT    basic32k-r314.asm:4280
OVTST2           = $2CCE = 11470  BOOT    basic32k-r314.asm:4283
OVTST3           = $2CCF = 11471  BOOT    basic32k-r314.asm:4284
PADD             = $2E6E = 11886  BOOT    basic32k-r314.asm:4569
PAINT            = $342A = 13354  BOOT    basic32k-r314.asm:5387
PAINT0           = $3475 = 13429  BOOT    basic32k-r314.asm:5422
PAINT1           = $3482 = 13442  BOOT    basic32k-r314.asm:5430
PAINT11          = $3481 = 13441  BOOT    basic32k-r314.asm:5429
PAINT2           = $34BC = 13500  BOOT    basic32k-r314.asm:5458
PAINT3           = $34D2 = 13522  BOOT    basic32k-r314.asm:5469
PAINT4           = $34F5 = 13557  BOOT    basic32k-r314.asm:5487
PAINT5           = $350C = 13580  BOOT    basic32k-r314.asm:5498
PAND             = $2032 =  8242  BOOT    basic32k-r314.asm:2303
PAND1            = $2057 =  8279  BOOT    basic32k-r314.asm:2326 (unused)
PARBT            = $81FB = 33275  BOOT    basic32k-r314.asm:6053
PASSA            = $22D8 =  8920  BOOT    basic32k-r314.asm:2733
PAUSE            = $31E3 = 12771  BOOT    basic32k-r314.asm:5036
PBUFF            = $8230 = 33328  BOOT    basic32k-r314.asm:160
PEEK             = $27FE = 10238  BOOT    basic32k-r314.asm:3532
PEND             = $1AB4 =  6836  BOOT    basic32k-r314.asm:1554
PHLTFP           = $2D2B = 11563  BOOT    basic32k-r314.asm:4344
PIO_CA           = $0002 =     2  BOOT    bootloader-r314.asm:31 (unused)
PIO_CB           = $0003 =     3  BOOT    bootloader-r314.asm:32
PIO_DA           = $0000 =     0  BOOT    bootloader-r314.asm:29 (unused)
PIO_DB           = $0001 =     1  BOOT    bootloader-r314.asm:30
PKEPRMS          = $2812 = 10258  BOOT    basic32k-r314.asm:3547
PLOT             = $357C = 13692  BOOT    basic32k-r314.asm:5563
PLTCRL           = $37D8 = 14296  BOOT    basic32k-r314.asm:5869
PLUCDE           = $2AFB = 11003  BOOT    basic32k-r314.asm:3988
PNORM            = $2AC9 = 10953  BOOT    basic32k-r314.asm:3954
PNT              = $81F7 = 33271  BOOT    basic32k-r314.asm:5383
PNT2VD           = $0D96 =  3478  BOOT    psg-r314.asm:275
PNTEND           = $3553 = 13651  BOOT    basic32k-r314.asm:5536
PNTRTN           = $3571 = 13681  BOOT    basic32k-r314.asm:5552
POINT            = $3529 = 13609  BOOT    basic32k-r314.asm:5517
POKE             = $2828 = 10280  BOOT    basic32k-r314.asm:3557
POPAF            = $241C =  9244  BOOT    basic32k-r314.asm:2926
POPHL            = $2546 =  9542  BOOT    basic32k-r314.asm:3117
POPHRT           = $2BDD = 11229  BOOT    basic32k-r314.asm:4135
POPNOK           = $15BE =  5566  BOOT    basic32k-r314.asm:824
POR              = $2035 =  8245  BOOT    basic32k-r314.asm:2305
POR1             = $205C =  8284  BOOT    basic32k-r314.asm:2331
POS              = $22D5 =  8917  BOOT    basic32k-r314.asm:2732
POSINT           = $1B17 =  6935  BOOT    basic32k-r314.asm:1609
POS_CURSOR       = $0655 =  1621  BOOT    vdp-r314.asm:450
POS_TB_CRS_32    = $099D =  2461  BOOT    vdp-r314.asm:923
POS_TB_CRS_40    = $09CD =  2509  BOOT    vdp-r314.asm:927
POUT             = $272E = 10030  BOOT    basic32k-r314.asm:3410
POWER            = $2F8F = 12175  BOOT    basic32k-r314.asm:4739
POWER1           = $2F9F = 12191  BOOT    basic32k-r314.asm:4747
POWER2           = $2FBC = 12220  BOOT    basic32k-r314.asm:4765
POWERS           = $2F6F = 12143  BOOT    basic32k-r314.asm:4724
PRINT            = $1CC0 =  7360  BOOT    basic32k-r314.asm:1841
PRITAB           = $1216 =  4630  BOOT    basic32k-r314.asm:552
PRNTCRLF         = $1D23 =  7459  BOOT    basic32k-r314.asm:1890
PRNTFNK          = $0DDD =  3549  BOOT    psg-r314.asm:317
PRNTFNKEY        = $0D9E =  3486  BOOT    psg-r314.asm:280
PRNTHL           = $2E87 = 11911  BOOT    basic32k-r314.asm:4587
PRNTLP           = $1CC3 =  7363  BOOT    basic32k-r314.asm:1842
PRNTNB           = $1D06 =  7430  BOOT    basic32k-r314.asm:1874
PRNTOK           = $15BF =  5567  BOOT    basic32k-r314.asm:827
PRNTRETURN       = $097C =  2428  BOOT    vdp-r314.asm:900
PRNTST           = $1D0A =  7434  BOOT    basic32k-r314.asm:1876
PRNTVIDEO        = $81EB = 33259  BOOT    basic32k-r314.asm:134
PRNUMS           = $23E6 =  9190  BOOT    basic32k-r314.asm:2895
PROCES           = $17E9 =  6121  BOOT    basic32k-r314.asm:1150
PROGND           = $81BB = 33211  BOOT    basic32k-r314.asm:108
PROGST           = $8240 = 33344  BOOT    basic32k-r314.asm:162
PROMPT           = $16CE =  5838  BOOT    basic32k-r314.asm:993
PRS              = $23E7 =  9191  BOOT    basic32k-r314.asm:2896
PRS1             = $23EA =  9194  BOOT    basic32k-r314.asm:2897
PRSLP            = $23F1 =  9201  BOOT    basic32k-r314.asm:2900
PRTCHR           = $3C39 = 15417  BOOT    basic32k-r314.asm:6449
PRTCKEY          = $3C88 = 15496  BOOT    basic32k-r314.asm:6491
PRTEND           = $3C95 = 15509  BOOT    basic32k-r314.asm:6498
PRTK1            = $3C89 = 15497  BOOT    basic32k-r314.asm:6492
PRTK2            = $3BF8 = 15352  BOOT    basic32k-r314.asm:6418 (unused)
PRTK3            = $3C21 = 15393  BOOT    basic32k-r314.asm:6435
PRTK4            = $3BF6 = 15350  BOOT    basic32k-r314.asm:6417
PRTNUM           = $81F7 = 33271  BOOT    basic32k-r314.asm:6050
PSG_DAT          = $0041 =    65  BOOT    bootloader-r314.asm:52
PSG_REG          = $0040 =    64  BOOT    bootloader-r314.asm:51
PSUB             = $2A51 = 10833  BOOT    basic32k-r314.asm:3873
PT               = $81F7 = 33271  BOOT    basic32k-r314.asm:3219
PT1              = $81F9 = 33273  BOOT    basic32k-r314.asm:3220
PT2              = $81FB = 33275  BOOT    basic32k-r314.asm:3221
PTCHR1           = $3C56 = 15446  BOOT    basic32k-r314.asm:6463
PTLN             = $15BA =  5562  BOOT    basic32k-r314.asm:821
PTRLP            = $1653 =  5715  BOOT    basic32k-r314.asm:910
PUTBUF           = $1824 =  6180  BOOT    basic32k-r314.asm:1179
PUTCHRBUF        = $0D89 =  3465  BOOT    psg-r314.asm:270
PUTCHRBUF1       = $0DD0 =  3536  BOOT    psg-r314.asm:310
PUTCRSCHR        = $0789 =  1929  BOOT    vdp-r314.asm:617
PUTCTL           = $1829 =  6185  BOOT    basic32k-r314.asm:1181
PUTFID           = $1A26 =  6694  BOOT    basic32k-r314.asm:1456
PXLSET           = $35DC = 13788  BOOT    basic32k-r314.asm:5619
PXOR             = $203A =  8250  BOOT    basic32k-r314.asm:2308
PXOR1            = $2064 =  8292  BOOT    basic32k-r314.asm:2337
QTSTLP           = $23AC =  9132  BOOT    basic32k-r314.asm:2865
QTSTR            = $23A6 =  9126  BOOT    basic32k-r314.asm:2861
QUARTR           = $3128 = 12584  BOOT    basic32k-r314.asm:4942
RADIUS           = $81FB = 33275  BOOT    basic32k-r314.asm:5797
RAWPRINT         = $0229 =   553  BOOT    bootloader-r314.asm:335
READ             = $1DCB =  7627  BOOT    basic32k-r314.asm:1970
READFG           = $81B2 = 33202  BOOT    basic32k-r314.asm:103
READKBLN         = $0C73 =  3187  BOOT    psg-r314.asm:130
READ_VIDEO_LOC   = $0619 =  1561  BOOT    vdp-r314.asm:400
READ_VSTAT       = $064E =  1614  BOOT    vdp-r314.asm:443
RECWRD           = $31C6 = 12742  BOOT    basic32k-r314.asm:5015 (unused)
REDO             = $1D76 =  7542  BOOT    basic32k-r314.asm:1934
REM              = $1C0F =  7183  BOOT    basic32k-r314.asm:1745
RESDIV           = $2C7B = 11387  BOOT    basic32k-r314.asm:4224
RESEED           = $30C6 = 12486  BOOT    basic32k-r314.asm:4898
RESET            = $3DA1 = 15777  BOOT    basic32k-r314.asm:6676
RESTMR           = $0329 =   809  BOOT    bootloader-r314.asm:499
RESTNL           = $1A8F =  6799  BOOT    basic32k-r314.asm:1525
RESTOR           = $1A7A =  6778  BOOT    basic32k-r314.asm:1514
RESZER           = $2ABC = 10940  BOOT    basic32k-r314.asm:3942
RETADR           = $219D =  8605  BOOT    basic32k-r314.asm:2526
RETINT           = $2D04 = 11524  BOOT    basic32k-r314.asm:4316
RETLIN           = $1C07 =  7175  BOOT    basic32k-r314.asm:1739
RETNAD           = $1762 =  5986  BOOT    basic32k-r314.asm:1075
RETNUL           = $21A0 =  8608  BOOT    basic32k-r314.asm:2530
RETNUM           = $1FCA =  8138  BOOT    basic32k-r314.asm:2237
RETREL           = $2CF6 = 11510  BOOT    basic32k-r314.asm:4306
RETURN           = $1BE8 =  7144  BOOT    basic32k-r314.asm:1723
RG               = $0004 =     4  BOOT    basic32k-r314.asm:170
RGMSG            = $124C =  4684  BOOT    basic32k-r314.asm:587
RGPTR            = $13D2 =  5074  BOOT    basic32k-r314.asm:614 (unused)
RIGHT            = $26AF =  9903  BOOT    basic32k-r314.asm:3327
RIGHT1           = $258D =  9613  BOOT    basic32k-r314.asm:3164
RINPUT           = $80AA = 32938  BOOT    basic32k-r314.asm:81
RLTLP            = $1F0D =  7949  BOOT    basic32k-r314.asm:2139
RND              = $3065 = 12389  BOOT    basic32k-r314.asm:4845
RND1             = $30A1 = 12449  BOOT    basic32k-r314.asm:4876
RND2             = $30BD = 12477  BOOT    basic32k-r314.asm:4894
RNDTAB           = $30CE = 12494  BOOT    basic32k-r314.asm:4905
RNGTST           = $2F5C = 12124  BOOT    basic32k-r314.asm:4714
RONDB            = $2ADD = 10973  BOOT    basic32k-r314.asm:3966
RONDUP           = $2ADC = 10972  BOOT    basic32k-r314.asm:3965
ROUND            = $2A44 = 10820  BOOT    basic32k-r314.asm:3867
RP2INST          = $2648 =  9800  BOOT    basic32k-r314.asm:3281
RPGPNT           = $33C0 = 13248  BOOT    basic32k-r314.asm:5312
RPT100           = $0523 =  1315  BOOT    vdp-r314.asm:243
RPT101           = $04CA =  1226  BOOT    vdp-r314.asm:191
RPT102           = $04CD =  1229  BOOT    vdp-r314.asm:193
RPT103           = $04E3 =  1251  BOOT    vdp-r314.asm:206
RPT104           = $04EB =  1259  BOOT    vdp-r314.asm:210
RPTCL1           = $379C = 14236  BOOT    basic32k-r314.asm:5839
RPTCRL           = $3789 = 14217  BOOT    basic32k-r314.asm:5833
RPTCVB1          = $391C = 14620  BOOT    basic32k-r314.asm:6009
RPTCVB2          = $3925 = 14629  BOOT    basic32k-r314.asm:6014
RPTDRW           = $36CC = 14028  BOOT    basic32k-r314.asm:5745
RPTEMPTYBUF      = $0587 =  1415  BOOT    vdp-r314.asm:310
RPTEMPTYROW      = $08E6 =  2278  BOOT    vdp-r314.asm:815
RPTFLL1          = $05EF =  1519  BOOT    vdp-r314.asm:370
RPTINST          = $2621 =  9761  BOOT    basic32k-r314.asm:3264
RPTKBDRD         = $0CC8 =  3272  BOOT    psg-r314.asm:174
RPTLDCL          = $32F5 = 13045  BOOT    basic32k-r314.asm:5189
RPTNLLSRC        = $0910 =  2320  BOOT    vdp-r314.asm:844
RPTNLLSRC2       = $093B =  2363  BOOT    vdp-r314.asm:868
RPTPS            = $31F1 = 12785  BOOT    basic32k-r314.asm:5044
RPTRSSR          = $3971 = 14705  BOOT    basic32k-r314.asm:6077
RPTWLCMBP        = $0BFB =  3067  BOOT    psg-r314.asm:54
RPVOLCG          = $28AD = 10413  BOOT    basic32k-r314.asm:3634
RSCALE           = $2E68 = 11880  BOOT    basic32k-r314.asm:4567
RST00            = $0000 =     0  BOOT    bootloader-r314.asm:74 (unused)
RST08            = $0008 =     8  BOOT    bootloader-r314.asm:80 (unused)
RST10            = $0010 =    16  BOOT    bootloader-r314.asm:95 (unused)
RST18            = $0018 =    24  BOOT    bootloader-r314.asm:101 (unused)
RSTCHRCRS        = $068A =  1674  BOOT    vdp-r314.asm:477
RSTPSG           = $0BD2 =  3026  BOOT    psg-r314.asm:34
RSTSER1          = $3964 = 14692  BOOT    basic32k-r314.asm:6069
RSTSTR           = $26D2 =  9938  BOOT    basic32k-r314.asm:3347
RSTVDPRAMREG     = $0A17 =  2583  BOOT    vdp-r314.asm:951
RUN              = $1BA5 =  7077  BOOT    basic32k-r314.asm:1686
RUNCNT           = $1A2A =  6698  BOOT    basic32k-r314.asm:1460
RUNFST           = $1697 =  5783  BOOT    basic32k-r314.asm:965
RUNLIN           = $1BC9 =  7113  BOOT    basic32k-r314.asm:1706
RXA              = $01CD =   461  BOOT    bootloader-r314.asm:269
RXA_EXIT         = $01F3 =   499  BOOT    bootloader-r314.asm:287
RXEND            = $39D9 = 14809  BOOT    basic32k-r314.asm:6134
RX_CHA_AVAIL     = $0100 =   256  BOOT    bootloader-r314.asm:137
RZINSTR          = $2693 =  9875  BOOT    basic32k-r314.asm:3312
SA               = $002E =    46  BOOT    basic32k-r314.asm:191
SAMSG            = $13AB =  5035  BOOT    basic32k-r314.asm:608
SAPTR            = $13FC =  5116  BOOT    basic32k-r314.asm:635 (unused)
SAVEXP           = $2ABD = 10941  BOOT    basic32k-r314.asm:3943
SAVSTP           = $1A1D =  6685  BOOT    basic32k-r314.asm:1449
SAVSTR           = $2381 =  9089  BOOT    basic32k-r314.asm:2832
SBSCPT           = $21AB =  8619  BOOT    basic32k-r314.asm:2536
SC               = $002C =    44  BOOT    basic32k-r314.asm:190
SCALE            = $2B1B = 11035  BOOT    basic32k-r314.asm:4020
SCALLP           = $2B1D = 11037  BOOT    basic32k-r314.asm:4021
SCALMI           = $2E33 = 11827  BOOT    basic32k-r314.asm:4529
SCALPL           = $2E49 = 11849  BOOT    basic32k-r314.asm:4543
SCERR            = $3B34 = 15156  BOOT    basic32k-r314.asm:6302
SCERR1           = $3B30 = 15152  BOOT    basic32k-r314.asm:6299
SCMSG            = $1396 =  5014  BOOT    basic32k-r314.asm:607
SCNEND           = $24B8 =  9400  BOOT    basic32k-r314.asm:3022
SCPTLP           = $21B1 =  8625  BOOT    basic32k-r314.asm:2540
SCPTR            = $13FA =  5114  BOOT    basic32k-r314.asm:634 (unused)
SCREEN           = $3202 = 12802  BOOT    basic32k-r314.asm:5063
SCROLLNXTRW      = $0890 =  2192  BOOT    vdp-r314.asm:771
SCROLLUP         = $0877 =  2167  BOOT    vdp-r314.asm:759
SCR_CURS_X       = $81E4 = 33252  BOOT    basic32k-r314.asm:127
SCR_CURS_Y       = $81E5 = 33253  BOOT    basic32k-r314.asm:128
SCR_CUR_NX       = $81E6 = 33254  BOOT    basic32k-r314.asm:129
SCR_CUR_NY       = $81E7 = 33255  BOOT    basic32k-r314.asm:130
SCR_MODE         = $81E0 = 33248  BOOT    basic32k-r314.asm:125
SCR_NAM_TB       = $81E2 = 33250  BOOT    basic32k-r314.asm:126
SCR_ORG_CHR      = $81E8 = 33256  BOOT    basic32k-r314.asm:131
SCR_SIZE_H       = $81DF = 33247  BOOT    basic32k-r314.asm:124
SCR_SIZE_W       = $81DE = 33246  BOOT    basic32k-r314.asm:123
SCVDP            = $322E = 12846  BOOT    basic32k-r314.asm:5080
SEARCH           = $172A =  5930  BOOT    basic32k-r314.asm:1037
SEED             = $8078 = 32888  BOOT    basic32k-r314.asm:70
SENDCHRPTRNS     = $0A4F =  2639  BOOT    vdp-r314.asm:989
SENDSND          = $0BF8 =  3064  BOOT    psg-r314.asm:52
SERABITS         = $822F = 33327  BOOT    basic32k-r314.asm:159
SERBUF_START     = $8000 = 32768  BOOT    bootloader-r314.asm:62
SERIAL           = $394A = 14666  BOOT    basic32k-r314.asm:6056
SERIALS_EN       = $822E = 33326  BOOT    basic32k-r314.asm:158
SERLED           = $399A = 14746  BOOT    basic32k-r314.asm:6098
SER_BUFSIZE      = $0058 =    88  BOOT    bootloader-r314.asm:58
SER_EMPTYSIZE    = $0005 =     5  BOOT    bootloader-r314.asm:60
SER_FULLSIZE     = $0050 =    80  BOOT    bootloader-r314.asm:59
SETBEEP          = $052D =  1325  BOOT    vdp-r314.asm:252
SETBRCL          = $3300 = 13056  BOOT    basic32k-r314.asm:5197
SETCRSRY         = $0748 =  1864  BOOT    vdp-r314.asm:578
SETCSRCOORDS     = $0749 =  1865  BOOT    vdp-r314.asm:579
SETIO            = $2752 = 10066  BOOT    basic32k-r314.asm:3429
SETLIT           = $1774 =  6004  BOOT    basic32k-r314.asm:1087
SETNAMETABLE     = $05E6 =  1510  BOOT    vdp-r314.asm:365
SETPAR           = $3AB8 = 15032  BOOT    basic32k-r314.asm:6242
SETPTR           = $164E =  5710  BOOT    basic32k-r314.asm:907
SETSER           = $3A46 = 14918  BOOT    basic32k-r314.asm:6184
SETSNDREG        = $0C19 =  3097  BOOT    psg-r314.asm:69
SETTOP           = $0F58 =  3928  BOOT    basic32k-r314.asm:247
SETVDP           = $3215 = 12821  BOOT    basic32k-r314.asm:5071 (unused)
SETVDPADRS       = $05F9 =  1529  BOOT    vdp-r314.asm:379
SET_GFX_MODE     = $0A1C =  2588  BOOT    vdp-r314.asm:958
SET_GFX_MODE2    = $0A24 =  2596  BOOT    vdp-r314.asm:962
SET_P1           = $3A75 = 14965  BOOT    basic32k-r314.asm:6204
SFTPRG           = $1618 =  5656  BOOT    basic32k-r314.asm:870
SGN              = $2CFC = 11516  BOOT    basic32k-r314.asm:4313
SGNEXP           = $2022 =  8226  BOOT    basic32k-r314.asm:2289
SGNRES           = $81CD = 33229  BOOT    basic32k-r314.asm:116
SHOW_LOGO        = $04A1 =  1185  BOOT    vdp-r314.asm:172
SHRITE           = $2B2A = 11050  BOOT    basic32k-r314.asm:4029
SHRLP            = $2B2D = 11053  BOOT    basic32k-r314.asm:4031
SHRT1            = $2B31 = 11057  BOOT    basic32k-r314.asm:4035
SIGNON           = $0FA9 =  4009  BOOT    basic32k-r314.asm:281
SIGNS            = $2D53 = 11603  BOOT    basic32k-r314.asm:4375
SIN              = $30E0 = 12512  BOOT    basic32k-r314.asm:4911
SIN1             = $3110 = 12560  BOOT    basic32k-r314.asm:4931
SINTAB           = $312C = 12588  BOOT    basic32k-r314.asm:4944
SIOBFR           = $81FD = 33277  BOOT    basic32k-r314.asm:6055
SIO_A_DI         = $0181 =   385  BOOT    bootloader-r314.asm:218
SIO_A_EI         = $018D =   397  BOOT    bootloader-r314.asm:227
SIO_A_SETS       = $02FA =   762  BOOT    bootloader-r314.asm:456
SIO_B_SETS       = $0300 =   768  BOOT    bootloader-r314.asm:462 (unused)
SIO_CA           = $0022 =    34  BOOT    bootloader-r314.asm:41
SIO_CB           = $0023 =    35  BOOT    bootloader-r314.asm:42
SIO_DA           = $0020 =    32  BOOT    bootloader-r314.asm:43
SIO_DB           = $0021 =    33  BOOT    bootloader-r314.asm:44 (unused)
SIXDIG           = $2EAF = 11951  BOOT    basic32k-r314.asm:4607
SMPVAR           = $244C =  9292  BOOT    basic32k-r314.asm:2950
SMSER1           = $3044 = 12356  BOOT    basic32k-r314.asm:4823
SN               = $0002 =     2  BOOT    basic32k-r314.asm:169
SND1             = $291B = 10523  BOOT    basic32k-r314.asm:3695
SND2VID          = $1885 =  6277  BOOT    basic32k-r314.asm:1242
SNDCHRTOBFR      = $095D =  2397  BOOT    vdp-r314.asm:884
SNDCLRSET        = $05DC =  1500  BOOT    vdp-r314.asm:356
SNDKEYTOBFR      = $0D77 =  3447  BOOT    psg-r314.asm:262
SNDLOGPT         = $0558 =  1368  BOOT    vdp-r314.asm:282
SNDOVR           = $2950 = 10576  BOOT    basic32k-r314.asm:3725
SNDREGCFG        = $0BDF =  3039  BOOT    psg-r314.asm:43
SNERR            = $1565 =  5477  BOOT    basic32k-r314.asm:778
SNMSG            = $1245 =  4677  BOOT    basic32k-r314.asm:586
SNPTR            = $13D0 =  5072  BOOT    basic32k-r314.asm:613 (unused)
SOUND            = $28C4 = 10436  BOOT    basic32k-r314.asm:3652
SPA              = $81F9 = 33273  BOOT    basic32k-r314.asm:5384
SPB              = $81FA = 33274  BOOT    basic32k-r314.asm:5385
SPC              = $0020 =    32  BOOT    basic32k-r314.asm:46
SPCFST           = $2EA0 = 11936  BOOT    basic32k-r314.asm:4599
SPCLP            = $1D67 =  7527  BOOT    basic32k-r314.asm:1926
SPEC_RX_CONDITON = $019B =   411  BOOT    bootloader-r314.asm:240
SQR              = $2F86 = 12166  BOOT    basic32k-r314.asm:4735
SRCHLIN          = $1992 =  6546  BOOT    basic32k-r314.asm:1369
SRCHLN           = $166B =  5739  BOOT    basic32k-r314.asm:929
SRCHLP           = $166E =  5742  BOOT    basic32k-r314.asm:930
SREG             = $286A = 10346  BOOT    basic32k-r314.asm:3599
SRPT2            = $3994 = 14740  BOOT    basic32k-r314.asm:6095
SRTINK           = $2A22 = 10786  BOOT    basic32k-r314.asm:3845
SRTTXT           = $81F1 = 33265  BOOT    vdp-r314.asm:828
SSTAT            = $29E0 = 10720  BOOT    basic32k-r314.asm:3810
SSTSA            = $2514 =  9492  BOOT    basic32k-r314.asm:3082
ST               = $001E =    30  BOOT    basic32k-r314.asm:183
STACK            = $813B = 33083  BOOT    basic32k-r314.asm:88
STAKFP           = $2D1E = 11550  BOOT    basic32k-r314.asm:4333
STALL            = $1AA3 =  6819  BOOT    basic32k-r314.asm:1542
STARTB           = $0EF8 =  3832  BOOT    basic32k-r314.asm:197
STARTEMPTY       = $05D8 =  1496  BOOT    vdp-r314.asm:354
STKTHS           = $1F51 =  8017  BOOT    basic32k-r314.asm:2180
STLOOK           = $82A4 = 33444  BOOT    basic32k-r314.asm:163
STMSG            = $131F =  4895  BOOT    basic32k-r314.asm:600
STOP             = $1AB2 =  6834  BOOT    basic32k-r314.asm:1552
STORED           = $1B82 =  7042  BOOT    basic32k-r314.asm:1666
STPBT            = $81FC = 33276  BOOT    basic32k-r314.asm:6054
STPOOL           = $248F =  9359  BOOT    basic32k-r314.asm:2987
STPTR            = $13EC =  5100  BOOT    basic32k-r314.asm:627 (unused)
STR              = $2371 =  9073  BOOT    basic32k-r314.asm:2825
STR1             = $2377 =  9079  BOOT    basic32k-r314.asm:2827
STRADD           = $2492 =  9362  BOOT    basic32k-r314.asm:2989
STRBOT           = $81A8 = 33192  BOOT    basic32k-r314.asm:97
STRE2            = $36C9 = 14025  BOOT    basic32k-r314.asm:5744
STRENT           = $1E22 =  7714  BOOT    basic32k-r314.asm:2017
STRPAR           = $3AD7 = 15063  BOOT    basic32k-r314.asm:6258
STRSPC           = $80AD = 32941  BOOT    basic32k-r314.asm:82
STTLIN           = $1D11 =  7441  BOOT    basic32k-r314.asm:1880
SUBCDE           = $2A53 = 10835  BOOT    basic32k-r314.asm:3875
SUBPHL           = $2A4D = 10829  BOOT    basic32k-r314.asm:3871
SUMLP            = $304D = 12365  BOOT    basic32k-r314.asm:4828
SUMSER           = $3035 = 12341  BOOT    basic32k-r314.asm:4816
SUPTLZ           = $2F2E = 12078  BOOT    basic32k-r314.asm:4684
SUP_BPS          = $3B0F = 15119  BOOT    basic32k-r314.asm:6294
SVNAM2           = $210A =  8458  BOOT    basic32k-r314.asm:2445
SVSTAD           = $239F =  9119  BOOT    basic32k-r314.asm:2853
SX               = $81FF = 33279  BOOT    basic32k-r314.asm:5672
SY               = $8201 = 33281  BOOT    basic32k-r314.asm:5673
SYS              = $27D0 = 10192  BOOT    basic32k-r314.asm:3508
SYSRET           = $27FC = 10236  BOOT    basic32k-r314.asm:3527
TAN              = $3141 = 12609  BOOT    basic32k-r314.asm:4951
TEMPSTACK        = $818D = 33165  BOOT    bootloader-r314.asm:68
TESTALT          = $0CF7 =  3319  BOOT    psg-r314.asm:199
TESTCTRL         = $0D04 =  3332  BOOT    psg-r314.asm:205
TESTOS           = $241E =  9246  BOOT    basic32k-r314.asm:2929
TESTR            = $2400 =  9216  BOOT    basic32k-r314.asm:2909
TF               = $81FF = 33279  BOOT    basic32k-r314.asm:3223
TM               = $0018 =    24  BOOT    basic32k-r314.asm:180
TMERR            = $1577 =  5495  BOOT    basic32k-r314.asm:790
TMMSG            = $12EC =  4844  BOOT    basic32k-r314.asm:597
TMPADR           = $81F7 = 33271  BOOT    basic32k-r314.asm:5248
TMPBFR1          = $81EF = 33263  BOOT    basic32k-r314.asm:138
TMPBFR2          = $81F1 = 33265  BOOT    basic32k-r314.asm:139
TMPBFR3          = $81F3 = 33267  BOOT    basic32k-r314.asm:140
TMPBFR4          = $81F5 = 33269  BOOT    basic32k-r314.asm:141
TMPCLR           = $81F1 = 33265  BOOT    basic32k-r314.asm:5246
TMPHL            = $81FD = 33277  BOOT    basic32k-r314.asm:5251
TMPKEYBFR        = $822B = 33323  BOOT    basic32k-r314.asm:153
TMPSTR           = $81A4 = 33188  BOOT    basic32k-r314.asm:96
TMPTR            = $13E6 =  5094  BOOT    basic32k-r314.asm:624 (unused)
TMR              = $2291 =  8849  BOOT    basic32k-r314.asm:2693
TMRCNT           = $81CE = 33230  BOOT    basic32k-r314.asm:117
TMSTPL           = $8198 = 33176  BOOT    basic32k-r314.asm:95
TMSTPT           = $8196 = 33174  BOOT    basic32k-r314.asm:94
TOPOOL           = $2585 =  9605  BOOT    basic32k-r314.asm:3159
TOSTRA           = $251D =  9501  BOOT    basic32k-r314.asm:3091
TP               = $81FD = 33277  BOOT    basic32k-r314.asm:3222
TRYAGN           = $2F09 = 12041  BOOT    basic32k-r314.asm:4657
TSALP            = $251E =  9502  BOOT    basic32k-r314.asm:3092
TSTBIT           = $3DB8 = 15800  BOOT    basic32k-r314.asm:6689 (unused)
TSTBRK           = $1A95 =  6805  BOOT    basic32k-r314.asm:1531
TSTMEM           = $0F46 =  3910  BOOT    basic32k-r314.asm:235
TSTNUM           = $1EE2 =  7906  BOOT    basic32k-r314.asm:2115
TSTOPL           = $23C7 =  9159  BOOT    basic32k-r314.asm:2881
TSTRED           = $2069 =  8297  BOOT    basic32k-r314.asm:2343
TSTREM           = $1777 =  6007  BOOT    basic32k-r314.asm:1088
TSTSGN           = $2CED = 11501  BOOT    basic32k-r314.asm:4301
TSTSPC           = $1998 =  6552  BOOT    basic32k-r314.asm:1376
TSTSTR           = $1EE3 =  7907  BOOT    basic32k-r314.asm:2116
TTYLIN           = $17C7 =  6087  BOOT    basic32k-r314.asm:1135
TXA              = $01F7 =   503  BOOT    bootloader-r314.asm:295
TXA_EXIT         = $0210 =   528  BOOT    bootloader-r314.asm:309
TXTMD            = $03A3 =   931  BOOT    vdp-r314.asm:46 (unused)
TX_EMP           = $0218 =   536  BOOT    bootloader-r314.asm:318
TYPE             = $8192 = 33170  BOOT    basic32k-r314.asm:91
UF               = $0022 =    34  BOOT    basic32k-r314.asm:185
UFERR            = $1571 =  5489  BOOT    basic32k-r314.asm:786
UFMSG            = $1349 =  4937  BOOT    basic32k-r314.asm:602
UFPTR            = $13F0 =  5104  BOOT    basic32k-r314.asm:629 (unused)
UL               = $000E =    14  BOOT    basic32k-r314.asm:175
ULERR            = $1BE3 =  7139  BOOT    basic32k-r314.asm:1720
ULMSG            = $129A =  4762  BOOT    basic32k-r314.asm:592
ULPTR            = $13DC =  5084  BOOT    basic32k-r314.asm:619 (unused)
UNITY            = $2B3F = 11071  BOOT    basic32k-r314.asm:4048
UPDATA           = $1A90 =  6800  BOOT    basic32k-r314.asm:1526
USR              = $8064 = 32868  BOOT    basic32k-r314.asm:62
VAL              = $26E9 =  9961  BOOT    basic32k-r314.asm:3366
VAL1             = $2707 =  9991  BOOT    basic32k-r314.asm:3386
VAL2             = $2711 = 10001  BOOT    basic32k-r314.asm:3390
VAL3             = $2714 = 10004  BOOT    basic32k-r314.asm:3391
VALIDX           = $3904 = 14596  BOOT    basic32k-r314.asm:5986
VALIDY           = $3909 = 14601  BOOT    basic32k-r314.asm:5992
VAREND           = $81BD = 33213  BOOT    basic32k-r314.asm:109
VDPMODESET       = $0A59 =  2649  BOOT    vdp-r314.asm:1003
VDPMODESET1      = $0A61 =  2657  BOOT    vdp-r314.asm:1012 (unused)
VDPMODESET2      = $0A69 =  2665  BOOT    vdp-r314.asm:1022 (unused)
VDPMODESETEX2    = $0A79 =  2681  BOOT    vdp-r314.asm:1042 (unused)
VDPMODESETMC     = $0A71 =  2673  BOOT    vdp-r314.asm:1032 (unused)
VDP_DAT          = $0030 =    48  BOOT    bootloader-r314.asm:47
VDP_SET          = $0032 =    50  BOOT    bootloader-r314.asm:48
VIDEOBUFF        = $81F7 = 33271  BOOT    basic32k-r314.asm:142
VIDTMP1          = $821F = 33311  BOOT    basic32k-r314.asm:143
VIDTMP2          = $8221 = 33313  BOOT    basic32k-r314.asm:144
VOLCH            = $28B9 = 10425  BOOT    basic32k-r314.asm:3641
VOLUME           = $288B = 10379  BOOT    basic32k-r314.asm:3619
VPEEK            = $2805 = 10245  BOOT    basic32k-r314.asm:3537
VPOKE            = $282D = 10285  BOOT    basic32k-r314.asm:3562
VREG             = $29B9 = 10681  BOOT    basic32k-r314.asm:3788
VSTAT            = $29D5 = 10709  BOOT    basic32k-r314.asm:3803
WAIT             = $2734 = 10036  BOOT    basic32k-r314.asm:3413
WAITLP           = $2749 = 10057  BOOT    basic32k-r314.asm:3423
WARM             = $0EF5 =  3829  BOOT    basic32k-r314.asm:195
WARMST           = $0F90 =  3984  BOOT    basic32k-r314.asm:274
WIDTH            = $31B9 = 12729  BOOT    basic32k-r314.asm:5006
WLCBPDAT         = $0C09 =  3081  BOOT    psg-r314.asm:64
WLCMBEEP         = $0BEF =  3055  BOOT    psg-r314.asm:49
WORDS            = $1029 =  4137  BOOT    basic32k-r314.asm:335
WORDTB           = $11AE =  4526  BOOT    basic32k-r314.asm:450
WRITEBUF         = $08CB =  2251  BOOT    vdp-r314.asm:800
WRITE_VIDEO_LOC  = $062E =  1582  BOOT    vdp-r314.asm:417
WRITE_VREG       = $0643 =  1603  BOOT    vdp-r314.asm:434
WRKSPC           = $805E = 32862  BOOT    basic32k-r314.asm:60
WRTSND           = $29A4 = 10660  BOOT    basic32k-r314.asm:3770
WRTSNDREG        = $0C1E =  3102  BOOT    psg-r314.asm:74
WTSPC            = $199E =  6558  BOOT    basic32k-r314.asm:1379
X1               = $81EF = 33263  BOOT    basic32k-r314.asm:5666
X1GR             = $366F = 13935  BOOT    basic32k-r314.asm:5713
X2               = $81F7 = 33271  BOOT    basic32k-r314.asm:5668
XC               = $81F7 = 33271  BOOT    basic32k-r314.asm:5795
XI               = $81FD = 33277  BOOT    basic32k-r314.asm:5798
XY2HL            = $35E4 = 13796  BOOT    basic32k-r314.asm:5627
Y1               = $81F1 = 33265  BOOT    basic32k-r314.asm:5667
Y1GR             = $3699 = 13977  BOOT    basic32k-r314.asm:5727
Y2               = $81F9 = 33273  BOOT    basic32k-r314.asm:5669
YC               = $81F9 = 33273  BOOT    basic32k-r314.asm:5796
YI               = $81FF = 33279  BOOT    basic32k-r314.asm:5799
ZDATA            = $0083 =   131  BOOT    basic32k-r314.asm:516
ZDINT            = $00C0 =   192  BOOT    basic32k-r314.asm:536 (unused)
ZDIV             = $00BE =   190  BOOT    basic32k-r314.asm:534 (unused)
ZEND             = $0080 =   128  BOOT    basic32k-r314.asm:514
ZEQUAL           = $00C6 =   198  BOOT    basic32k-r314.asm:539
ZERARY           = $224C =  8780  BOOT    basic32k-r314.asm:2639
ZERBYT           = $14E2 =  5346  BOOT    basic32k-r314.asm:693
ZEROLP           = $218F =  8591  BOOT    basic32k-r314.asm:2517
ZEROSUP          = $3D48 = 15688  BOOT    basic32k-r314.asm:6613
ZFN              = $00B6 =   182  BOOT    basic32k-r314.asm:525
ZFOR             = $0081 =   129  BOOT    basic32k-r314.asm:515
ZGOSUB           = $008C =   140  BOOT    basic32k-r314.asm:518
ZGOTO            = $0088 =   136  BOOT    basic32k-r314.asm:517
ZGTR             = $00C5 =   197  BOOT    basic32k-r314.asm:538
ZINSTR           = $00DF =   223  BOOT    basic32k-r314.asm:545
ZLEFT            = $00E7 =   231  BOOT    basic32k-r314.asm:546
ZLTH             = $00C7 =   199  BOOT    basic32k-r314.asm:540
ZMINUS           = $00BC =   188  BOOT    basic32k-r314.asm:532
ZMOD             = $00BF =   191  BOOT    basic32k-r314.asm:535 (unused)
ZNEW             = $00B3 =   179  BOOT    basic32k-r314.asm:521
ZNOT             = $00B9 =   185  BOOT    basic32k-r314.asm:528
ZONELP           = $1D40 =  7488  BOOT    basic32k-r314.asm:1904
ZOR              = $00C4 =   196  BOOT    basic32k-r314.asm:537
ZPLUS            = $00BB =   187  BOOT    basic32k-r314.asm:531
ZPOINT           = $00DE =   222  BOOT    basic32k-r314.asm:543
ZPRINT           = $00AD =   173  BOOT    basic32k-r314.asm:520
ZREM             = $008E =   142  BOOT    basic32k-r314.asm:519
ZSGN             = $00C8 =   200  BOOT    basic32k-r314.asm:542
ZSPC             = $00B7 =   183  BOOT    basic32k-r314.asm:526
ZSTEP            = $00BA =   186  BOOT    basic32k-r314.asm:529
ZTAB             = $00B4 =   180  BOOT    basic32k-r314.asm:523
ZTHEN            = $00B8 =   184  BOOT    basic32k-r314.asm:527
ZTIMES           = $00BD =   189  BOOT    basic32k-r314.asm:533 (unused)
ZTO              = $00B5 =   181  BOOT    basic32k-r314.asm:524
_z80_            = $0001 =     1          :1 (unused)
absHL            = $3DEA = 15850  BOOT    utils-r11.asm:90
basicStarted     = $805D = 32861  BOOT    bootloader-r314.asm:66
bufWrap          = $0058 =    88  BOOT    bootloader-r314.asm:67
initCTC          = $0304 =   772  BOOT    bootloader-r314.asm:471
initPSG          = $0BC1 =  3009  BOOT    psg-r314.asm:25
initVDP          = $037E =   894  BOOT    vdp-r314.asm:26
negHL            = $3DED = 15853  BOOT    utils-r11.asm:92
serBufUsed       = $805C = 32860  BOOT    bootloader-r314.asm:65
serInPtr         = $8058 = 32856  BOOT    bootloader-r314.asm:63
serRdPtr         = $805A = 32858  BOOT    bootloader-r314.asm:64


total time: 0.9113 sec.
no errors
