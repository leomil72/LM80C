# file opened: LM80C-firmware-r3.20.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C - FIRMWARE - R3.20
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; output binary file
  55  0000                  OUTPUT "LM80C-firmware-r3.20.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "3.20"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.00"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT ld      C,VDP_DAT
  68  0000                  DEFINE LM64K_NOP
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000 ~            VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000              VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 ~                            jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0001                  ELSE
  80+ 0001 C3 AE 02                     jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 E9 81                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 EC 81                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 EF 81                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 F2 81                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 61 80                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 140+ 0094 43 20 43 4F
 141+ 0098 4C 4F 52 00                  defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 141+ 009C 00 00 00 00
 142+ 00A0                  ELSE
 143+ 00A0 ~                            defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 144+ 00A0 ~                            defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$30,$29,$00
 147+ 00AC 32 30 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 33  FWVER:          defm    "FW ","3.20",$20,"2021-03-08",$20,"17:31:17",$00
 152+ 00D4 2E 32 30 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 30 38 20 31
 152+ 00E4 37 3A 33 31
 152+ 00E8 3A 31 37 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 41 82                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 02 82                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 3F 82                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 78 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 FB 46                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A 58 80     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE 58                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 00 80                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 58 80     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 5C 80                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A 47 82                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A 5C 80     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A 5A 80                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE 58                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 00 80                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 5A 80     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 5C 80                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A 5C 80     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 02 82                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 78 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 E5 81                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD E2 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD 0D 0D                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A E5 81                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 72 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 8F 81     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 00 80                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 58 80                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 5A 80                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 5C 80                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 47 82                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 CD 39 03                     call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C5                  ENDIF
 474+ 02C5 CD 5E 03                     call    initCTC         ; configure CTC, then...
 475+ 02C8 CD AB 0C                     call    initPSG         ; ...configure PSG
 476+ 02CB CD 10 05                     call    SHOW_LOGO       ; show computer logo
 477+ 02CE 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02D0 CD ED 03                     call    initVDP         ; set video display
 479+ 02D3 AF                           xor     A
 480+ 02D4 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D6 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D8 FB                           ei                      ; enable interrupts
 483+ 02D9                              ; print system messages
 484+ 02D9 AF                           xor     A               ; A=0 so...
 485+ 02DA 32 3F 82                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DD 3C                           inc     A               ; A=1...
 487+ 02DE 32 01 82                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02E1 21 94 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E4 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E7 3A 5D 80                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02EA FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02EC 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EE 21 D0 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02F1 CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F4 CD 44 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F7 AF                           xor     A
 497+ 02F8 32 01 82                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02FB CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FE E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 0300 FE 43                        cp      'C'             ; cold start?
 501+ 0302 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0304 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0307 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0309 32 5D 80                     ld      (basicStarted),A
 505+ 030C CD 59 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030F C3 6A 1B                     jp      COLD            ; start BASIC COLD
 507+ 0312 FE 57        CHECKWARM:      cp      'W'
 508+ 0314 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0316 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0319 CD 59 09                     call    CURSOR_OFF      ; disable cursor
 511+ 031C C3 6D 1B                     jp      WARM            ; start BASIC WARM
 512+ 031F
 513+ 031F              ;-------------------------------------------------------------------------------
 514+ 031F              ; send back char received through ch. A
 515+ 031F 32 02 82     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 0322 AF                           xor     A
 517+ 0323 32 3F 82                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0326 F3                           di                      ; disable INTs
 519+ 0327 CD 78 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 032A 3E 0D                        ld      A,CR            ; then set a CR
 521+ 032C 32 02 82                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032F CD 78 07                     call    CHAR2VID        ; and send it to screen
 523+ 0332 FB                           ei                      ; re-enable INTs
 524+ 0333 3E 01                        ld      A,$01
 525+ 0335 32 01 82                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0338 C9                           ret                     ; return to caller
 527+ 0339
 528+ 0339                  IFDEF LM80C
 529+ 0339              ;-------------------------------------------------------------------------------
 530+ 0339              ; little serial blink with LEDs
 531+ 0339 0E 09        HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 033B 3E CF                        ld      A,%11001111     ; set mode 3 (mode control)
 533+ 033D D3 03                        out     (PIO_CB),A      ; for PIO port B
 534+ 033F AF                           xor     A               ; set pins to OUTPUT
 535+ 0340 D3 03                        out     (PIO_CB),A      ; for port B
 536+ 0342 3C                           inc     A               ; LSB on
 537+ 0343 D3 01        LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0345 1E 20                        ld      E,$20           ; little delay
 539+ 0347 06 00        DEC_E:          ld      B,$00           ; count to 256
 540+ 0349 10 FE        COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 034B 1D                           dec     E               ; decrement outer counter
 542+ 034C 20 F9                        jr      NZ,DEC_E        ; finish delay
 543+ 034E CB 27                        sla     A               ; shift reg.A to left 1 bit
 544+ 0350 0D                           dec     C               ; next LED
 545+ 0351 20 F0                        jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0353 C9                           ret                     ; return to caller
 547+ 0354                  ENDIF
 548+ 0354              ;-------------------------------------------------------------------------------
 549+ 0354              ; Z80 SIO default settings for serial channels
 550+ 0354 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0355 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0356 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0357 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 0358 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 0359 E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 035A 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 035B 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 035C 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 035D 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 035E                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 035E                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 035E                                                      ; for special conditions
 563+ 035E              ;------------------------------------------------------------------------------
 564+ 035E              ;               Z80 CTC SETTING UP
 565+ 035E              ;------------------------------------------------------------------------------
 566+ 035E              initCTC:
 567+ 035E 21 88 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0361 11 E9 81                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0364 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0367 ED B0                        ldir                    ; copy data
 571+ 0369              ;CH0, CH1, & CH2 disabled
 572+ 0369 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 036B                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 036B D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 036D D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 036F D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0371              ;init CH3
 578+ 0371              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0371              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0371 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0373                                                      ; time constant follows; cont. operation; command word
 582+ 0373 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0375 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0377 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 0379 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 037B                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 037B                                                      ; so int vector is 01000xx00
 588+ 037B D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 037D                              ; reset cells of 100ths of a second counter
 590+ 037D AF                           xor     A               ; reset A
 591+ 037E 21 E5 81                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0381 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0383 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0384 23                           inc     HL              ; next cell
 595+ 0385 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0387 C9                           ret
 597+ 0388
 598+ 0388
 599+ 0388              ;------------------------------------------------------------------------------
 600+ 0388              ; jump table for CHx interrupts
 601+ 0388 FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 038B FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 038E FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0391 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0394
 606+ 0394
 607+ 0394              ;------------------------------------------------------------------------------
 608+ 0394              ; welcome messages
 609+ 0394              MSGTXT1:
 610+ 0394                  IFDEF LM80C64K
 611+ 0394 ~                            defm    "    LM80C 64K Color Computer",CR
 612+ 0394                  ELSE
 613+ 0394 20 20 20 20                  defm    "      LM80C Color Computer",CR
 613+ 0398 20 20 4C 4D
 613+ 039C 38 30 43 20
 613+ 03A0 43 6F 6C 6F
 613+ 03A4 72 20 43 6F
 613+ 03A8 6D 70 75 74
 613+ 03AC 65 72 0D
 614+ 03AF                  ENDIF
 615+ 03AF 20 62 79 20                  defm    " by Leonardo Miliani * FW R","3.20",CR,0
 615+ 03B3 4C 65 6F 6E
 615+ 03B7 61 72 64 6F
 615+ 03BB 20 4D 69 6C
 615+ 03BF 69 61 6E 69
 615+ 03C3 20 2A 20 46
 615+ 03C7 57 20 52 33
 615+ 03CB 2E 32 30 0D
 615+ 03CF 00
 616+ 03D0 0D           MSGTXT2:        defb    CR
 617+ 03D1 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03D5 43 3E 6F 6C
 617+ 03D9 64 20 6F 72
 617+ 03DD 20 3C 57 3E
 617+ 03E1 61 72 6D 20
 617+ 03E5 73 74 61 72
 617+ 03E9 74 3F 20 00
 618+ 03ED
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03ED
  75  03ED              ; incude the latest version of the VDP module
  76  03ED                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03ED              ; ------------------------------------------------------------------------------
   2+ 03ED              ; LM80C - VDP ROUTINES - 1.4
   3+ 03ED              ; ------------------------------------------------------------------------------
   4+ 03ED              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03ED              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03ED              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03ED              ; kind of warranty: you can use them at your own risk.
   8+ 03ED              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03ED              ; maintain the copyright notices, include this advice and the note to the
  10+ 03ED              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03ED              ; redistribuite them.
  12+ 03ED              ; https://www.leonardomiliani.com
  13+ 03ED              ;
  14+ 03ED              ; Please support me by visiting the following links:
  15+ 03ED              ; Main project page: https://www.leonardomiliani.com
  16+ 03ED              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03ED              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03ED              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03ED              ; ------------------------------------------------------------------------------
  20+ 03ED              ;
  21+ 03ED              ;------------------------------------------------------------------------------
  22+ 03ED              ; VDP INITIALISATION
  23+ 03ED              ; initialize VDP for a specific graphics mode
  24+ 03ED              ; INPUT: E -> contains the graphics mode:
  25+ 03ED              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03ED D5           initVDP:        push    DE              ; store E
  27+ 03EE CD E7 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03F1 CD 06 0B                     call    SET_GFX_MODE    ; load register settings
  29+ 03F4 CD FB 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03F7 D1                           pop     DE              ; restore reg. E
  31+ 03F8 AF                           xor     A               ; reset A
  32+ 03F9 47                           ld      B,A             ; reset B (will be used later)
  33+ 03FA 7B                           ld      A,E             ; move E into A
  34+ 03FB 32 F7 81                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03FE FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 0400 CA 3C 04                     jp      Z,G1MD          ; yes, jump over
  37+ 0403 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 0405 CA 7D 04                     jp      Z,G2MD          ; yes, jump over
  39+ 0408 FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 040A CA 9F 04                     jp      Z,MCMD          ; yes, jump over
  41+ 040D FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 040F CA C2 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 0412                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 0412
  45+ 0412              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 0412
  47+ 0412                              ; TEXT MODE (G0)
  48+ 0412                              ; load charset
  49+ 0412 60           TXTMD:          ld      H,B
  50+ 0413 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 0414 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 0417                              ; set cursor & video overlay
  53+ 0417 AF                           xor     A               ; reset A
  54+ 0418 32 FA 81                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 041B 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 041E 3E 05                        ld      A,$05           ; light blue
  57+ 0420 32 04 82                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0423 3E 28                        ld      A,$28
  59+ 0425 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 0428 3E 18                        ld      A,$18
  61+ 042A 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 042D 3E 1E                        ld      A,$1E
  63+ 042F 32 A3 80                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0432 11 00 08                     ld      DE,$0800
  65+ 0435 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 0439 C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 043C
  68+ 043C                              ; GRAPHICS 1 MODE (G1)
  69+ 043C                              ; load pattern table
  70+ 043C 68           G1MD:           ld      L,B
  71+ 043D 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 043E CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0441                              ; set cursor & video overlay
  74+ 0441 AF                           xor     A               ; position cursor
  75+ 0442 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0445 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 0448 3E 20                        ld      A,$20
  78+ 044A 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 044D 3E 18                        ld      A,$18
  80+ 044F 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0452 3E 14                        ld      A,$14
  82+ 0454 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 0457 11 00 18                     ld      DE,$1800
  84+ 045A ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 045E                              ; load color table
  86+ 045E 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0461 CD 87 06                     call    SETVDPADRS
  88+ 0464 3E 01                        ld      A,$01           ; foreground color...
  89+ 0466 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 0469 3E 0F                        ld      A,$0F           ; background color...
  91+ 046B 32 04 82                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 046E 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0470 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0472 0E 30                        ld      C,VDP_DAT              ; VDP data mode
  95+ 0474 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0476 00                           nop
  97+ 0477 00                           nop
  98+ 0478 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 047A C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 047D
 101+ 047D                              ; GRAPHICS 2 MODE (G2)
 102+ 047D AF           G2MD:           xor     A               ; position cursor
 103+ 047E 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0481 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0484 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 0487 3C                           inc     A               ; black on...
 107+ 0488 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 048B 3E 0F                        ld      A,$0F           ; white on...
 109+ 048D 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 110+ 0490 3E C0                        ld      A,$C0
 111+ 0492 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0495 11 00 18                     ld      DE,$1800
 113+ 0498 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 049C C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 049F
 116+ 049F                              ; MULTICOLOR MODE (G3)
 117+ 049F AF           MCMD:           xor     A               ; position cursor
 118+ 04A0 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 04A3 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 04A6 3E 0F                        ld      A,$0F           ; white color for...
 121+ 04A8 32 04 82                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 04AB 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 04AE 3E 40                        ld      A,$40
 124+ 04B0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 04B3 3E 30                        ld      A,$30
 126+ 04B5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 04B8 11 00 08                     ld      DE,$0800
 128+ 04BB ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04BF C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04C2
 131+ 04C2                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04C2              EXG2MD:         ; load pattern table
 133+ 04C2 60                           ld      H,B
 134+ 04C3 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04C4 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04C7                              ; set cursor & video overlay
 137+ 04C7 AF                           xor     A               ; position cursor
 138+ 04C8 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04CB 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04CE 3E 20                        ld      A,$20
 141+ 04D0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04D3 3E 18                        ld      A,$18
 143+ 04D5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04D8 3E 14                        ld      A,$14
 145+ 04DA 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04DD 11 00 38                     ld      DE,$3800
 147+ 04E0 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04E4                               ; load color table
 149+ 04E4 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04E7 CD 87 06                     call    SETVDPADRS
 151+ 04EA 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04EC 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04EF 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04F1 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 155+ 04F4 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04F6 16 08                        ld      D,$08           ; 8 pages of
 157+ 04F8 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04FA 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 159+ 04FC ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04FE 00                           nop
 161+ 04FF 00                           nop
 162+ 0500 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 0502 15                           dec     D               ; did we fill up all the cells?
 164+ 0503 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 0505                              ; LAST VDP SETTINGS
 166+ 0505 CD 59 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 0508 CD F5 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 050B AF                           xor     A
 169+ 050C 32 FE 81                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 050F C9                           ret                     ; return to caller
 171+ 0510
 172+ 0510
 173+ 0510              ; show initial logo
 174+ 0510 CD E7 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 0513                              ; set VDP for G2 mode
 176+ 0513 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 0515 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 0518 CD 0E 0B                     call    SET_GFX_MODE2   ; load register settings
 179+ 051B 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 051D ED 51                        out     (C),D           ; send data to VDP
 181+ 051F ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0521                              ; set name table
 183+ 0521 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0524 CD 74 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0527 CD 87 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 052A                              ; set colors for logo
 187+ 052A 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 052D CD 87 06                     call    SETVDPADRS
 189+ 0530 06 05                        ld      B,$05           ; 5 bands
 190+ 0532 21 D4 05                     ld      HL,CLRTABLE
 191+ 0535 0E 30                        ld      C,VDP_DAT              ; set VDP_DAT
 192+ 0537 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 0539 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 053B 7E                           ld      A,(HL)          ; load data
 195+ 053C ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 053E 00                           nop                     ; little delay
 197+ 053F 1D                           dec     E               ; decrement counter
 198+ 0540 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0542 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0544 15                           dec     D               ; decrement char band counter
 201+ 0545 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0547 23                           inc     HL              ; next pattern
 203+ 0548 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 054A                              ; set pattern table
 205+ 054A 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 054D 11 6B 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0550 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0552 CD B3 05     RPT103:         call    LOADLOGOCHRS
 209+ 0555 13                           inc     DE              ; next logo pattern
 210+ 0556 10 FA                        djnz    RPT103
 211+ 0558 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 055A CD B3 05     RPT104:         call    LOADLOGOCHRS
 213+ 055D 13                           inc     DE              ; next logo pattern
 214+ 055E 10 FA                        djnz    RPT104
 215+ 0560                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0560 06 02                        ld      B,$02           ; two times
 217+ 0562 AF                           xor     A               ; reset A
 218+ 0563 57                           ld      D,A             ; 256 times
 219+ 0564 5F                           ld      E,A             ; x 256 times
 220+ 0565 32 05 82                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0568                  IFDEF LM80C64K
 222+ 0568 ~                            inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 0568                  ENDIF
 224+ 0568 32 4A 82                     ld      (DOS_EN),A      ; DOS enabled
 225+ 056B 00           DEC_D:          nop                     ; does nothing...
 226+ 056C 00                           nop
 227+ 056D 00                           nop
 228+ 056E 00                           nop
 229+ 056F 00                           nop
 230+ 0570 00                           nop                     ; ...until here
 231+ 0571 1D                           dec     E               ; decrement E
 232+ 0572 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0574 7A                           ld      A,D
 234+ 0575 FE 40                        cp      $40             ; ...equal to 64
 235+ 0577 CC 9F 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 057A 15                           dec     D
 237+ 057B 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 057D 3A 05 82                     ld      A,(TMPBFR1)     ; sound state
 239+ 0580 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0582 C4 AB 05                     call    NZ,BEEPOFF      ; yes
 241+ 0585                  IFDEF LM80C64K
 242+ 0585 ~                            call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 0585 ~                                                    ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 0585                  ENDIF
 245+ 0585 10 E4                        djnz    DEC_D           ; repeat
 246+ 0587              ERASECLRTBL:    ; erase color table
 247+ 0587 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 0589 16 0A                        ld      D,$0A           ; 10 pages
 249+ 058B 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 058D 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0590 CD 87 06                     call    SETVDPADRS      ; send address
 252+ 0593 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 253+ 0595 ED 79        RPT100:         out     (C),A           ; send data
 254+ 0597 00                           nop
 255+ 0598 00                           nop                     ; little delay
 256+ 0599 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 059B 15                           dec     D
 258+ 059C 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 059E C9                           ret                     ; return to caller
 260+ 059F
 261+ 059F              ; play a beep
 262+ 059F 3A 05 82     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 05A2 B7                           or      A               ; is it 0?
 264+ 05A3 C0                           ret     NZ              ; no, exit
 265+ 05A4 3C                           inc     A               ; flag to 1
 266+ 05A5 32 05 82                     ld      (TMPBFR1),A     ; set sound
 267+ 05A8 C3 D9 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 05AB
 269+ 05AB              ; beep off
 270+ 05AB 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 05AD 32 05 82                     ld      (TMPBFR1),A     ; set flag
 272+ 05B0 C3 DF 0C                     jp      NOBEEP          ; stop beep and return
 273+ 05B3
 274+ 05B3
 275+ 05B3              ; used to load the chars that will compose the logo of the splash screen
 276+ 05B3 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 05B4 87                           add     A,A
 278+ 05B5 87                           add     A,A
 279+ 05B6 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 05B7 C5                           push    BC
 281+ 05B8 D5                           push    DE              ; store BC and DE
 282+ 05B9 E5                           push    HL              ; store VRAM address to write to
 283+ 05BA 21 54 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05BD 5F                           ld      E,A
 285+ 05BE 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05C0 19                           add     HL,DE           ; get address of pattern data
 287+ 05C1 EB                           ex      DE,HL           ; move address into DE
 288+ 05C2 E1                           pop     HL              ; retrieve VRAM address
 289+ 05C3 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05C5 CD 87 06                     call    SETVDPADRS      ; set VDP address
 291+ 05C8 0E 30                        ld      C,VDP_DAT              ; VDP_DAT
 292+ 05CA 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05CB ED 79                        out     (C),A           ; and send to VRAM
 294+ 05CD 13                           inc     DE              ; next byte into RAM
 295+ 05CE 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05CF 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05D1 D1                           pop     DE
 298+ 05D2 C1                           pop     BC              ; retrieve BC & DE
 299+ 05D3 C9                           ret                     ; return to caller
 300+ 05D4              CLRTABLE:       equ $
 301+ 05D4 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05D8 1D
 302+ 05D9
 303+ 05D9
 304+ 05D9              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05D9              ; if yes, then disable DOS functions recovering RAM
 306+ 05D9 F5           CHKSPCK:        push    AF
 307+ 05DA 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05DC CD 5D 0D                     call    READKBLN        ; read row
 309+ 05DF CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05E1 CA EE 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05E4 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05E6 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05E8 AF                           xor     A               ; yes, so...
 314+ 05E9 32 4A 82                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05EC F1           LVCKSPLK:       pop     AF
 316+ 05ED C9                           ret
 317+ 05EE AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05EF 32 5D 80                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05F2 C3 00 00                     jp      $0000           ; restart
 320+ 05F5
 321+ 05F5
 322+ 05F5              ; empty video buffer
 323+ 05F5 3A F7 81     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05F8 FE 02                        cp      $02             ; is it G2 mode?
 325+ 05FA CA 1E 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05FD FE 03                        cp      $03             ; is it MC mode?
 327+ 05FF CA 4F 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 0602 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 0605 47                           ld      B,A             ; move rows into B
 330+ 0606 AF                           xor     A               ; filling char is $00
 331+ 0607 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 060A CD 87 06                     call    SETVDPADRS      ; send address to VDP
 333+ 060D 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 334+ 060F 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 0610 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 0613 57                           ld      D,A             ; move A into D
 337+ 0614 7B                           ld      A,E             ; recover filling char
 338+ 0615 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 0617 00                           nop
 340+ 0618 15                           dec     D               ; decr. D
 341+ 0619 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 061B 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 061D C9                           ret                     ; return to caller
 344+ 061E 2A F8 81     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0621 CD 74 06                     call    SETNAMETABLE    ; set name table
 346+ 0624 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0627 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 348+ 062A AF                           xor     A               ; empty pattern
 349+ 062B 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 062D 47                           ld      B,A             ; 256 bytes for page
 351+ 062E 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 352+ 0630 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0632 00                           nop                     ; little delay
 354+ 0633 00                           nop
 355+ 0634 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0636 15                           dec     D               ; next page
 357+ 0637 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 0639 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 063C CD 87 06                     call    SETVDPADRS      ; send address to VDP
 360+ 063F 3A 03 82                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0642 87                           add     A,A
 362+ 0643 87                           add     A,A
 363+ 0644 87                           add     A,A
 364+ 0645 87                           add     A,A             ; move to high nibble
 365+ 0646 57                           ld      D,A             ; store into D
 366+ 0647 3A 04 82                     ld      A,(BKGNDCLR)    ; load background color
 367+ 064A B2                           or      D               ; combine with background color
 368+ 064B 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 064D 18 17                        jr      STARTEMPTY
 370+ 064F 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0652 CD 74 06                     call    SETNAMETABLE    ; set name table
 372+ 0655 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0658 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 374+ 065B 3A 04 82                     ld      A,(BKGNDCLR)    ; load background
 375+ 065E 57                           ld      D,A             ; store into D
 376+ 065F 87                           add     A,A
 377+ 0660 87                           add     A,A
 378+ 0661 87                           add     A,A
 379+ 0662 87                           add     A,A             ; move to high nibble
 380+ 0663 B2                           or      D               ; set background color for high and low nibble
 381+ 0664 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0666 0E 30        STARTEMPTY:     ld      C,VDP_DAT              ; VDP address for passing data
 383+ 0668 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 066A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 066C 00                           nop                     ; wait a while
 386+ 066D 00                           nop
 387+ 066E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0670 15                           dec     D               ; have we filled all the pages?
 389+ 0671 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0673 C9                           ret                     ; return to caller
 391+ 0674
 392+ 0674              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0674 CD 87 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0677 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 395+ 0679 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 067B AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 067C 47                           ld      B,A             ; reset B
 398+ 067D ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 067F 00                           nop
 400+ 0680 3C                           inc     A               ; increment # of name
 401+ 0681 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0683 15                           dec     D               ; did we fill all the pages?
 403+ 0684 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0686 C9                           ret                     ; return to caller
 405+ 0687
 406+ 0687              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0687 0E 32        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0689 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 068B ED 69                        out     (C),L           ; send low and...
 410+ 068D ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 068F C9                           ret                     ; return to caller
 412+ 0690
 413+ 0690              ; clear the video buffer and position the cursor at 0,0
 414+ 0690 CD F5 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0693 AF                           xor     A               ; reset A
 416+ 0694 32 FA 81                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0697 32 FB 81                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 069A C3 E3 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 069D
 420+ 069D              ; HOME: position the cursor at coords. 0,0
 421+ 069D AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 069E 32 FD 81                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 06A1 32 FC 81                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 06A4 C3 ED 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 06A7
 426+ 06A7              ; load the char or byte at the VRAM position set by HL
 427+ 06A7              ; value is returned into A
 428+ 06A7 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 06A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 430+ 06AA 44                           ld      B,H
 431+ 06AB CB B8                        res     7,B
 432+ 06AD CB B0                        res     6,B
 433+ 06AF ED 69                        out     (C),L           ; low byte then...
 434+ 06B1 ED 41                        out     (C),B           ; high byte
 435+ 06B3 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 436+ 06B5 ~                            LM64K_NOP               ; added to compensate shorter instruction
 437+ 06B5 00                           nop                     ; wait...
 438+ 06B6 00                           nop                     ; ...a while
 439+ 06B7 00                           nop
 440+ 06B8 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 06BA C1                           pop     BC              ; restore BC
 442+ 06BB C9                           ret                     ; return to caller
 443+ 06BC
 444+ 06BC              ; write a byte at the VRAM position pointed by HL
 445+ 06BC              ; value is in A
 446+ 06BC C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 06BD 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 448+ 06BF 44                           ld      B,H             ; copy H into B
 449+ 06C0 CB B8                        res     7,B
 450+ 06C2 CB F0                        set     6,B             ; write to VRAM
 451+ 06C4 ED 69                        out     (C),L           ; low byte then...
 452+ 06C6 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06C8 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 454+ 06CA ~                            LM64K_NOP               ; added to compensate shorter instruction
 455+ 06CA 00                           nop                     ; wait...
 456+ 06CB 00                           nop                     ; ...a while
 457+ 06CC 00                           nop
 458+ 06CD ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06CF C1                           pop     BC              ; restore BC
 460+ 06D0 C9                           ret                     ; return to caller
 461+ 06D1
 462+ 06D1              ; write a value into a specific VDP register
 463+ 06D1              ; value is in E, register is in A
 464+ 06D1 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06D2 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06D4 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06D6 ED 59                        out     (C),E           ; send data to VDP
 468+ 06D8 ED 79                        out     (C),A           ; select the destination register
 469+ 06DA C1                           pop     BC              ; restore BC
 470+ 06DB C9                           ret                     ; return to caller
 471+ 06DC
 472+ 06DC              ; read VDP status register and return value into A
 473+ 06DC C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06DD 0E 32                        ld      C,VDP_SET       ; VDP register access
 475+ 06DF ED 78                        in      A,(C)           ; read status register
 476+ 06E1 C1                           pop     BC              ; restore BC
 477+ 06E2 C9                           ret                     ; return to caller
 478+ 06E3
 479+ 06E3              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06E3 CD 26 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06E6 CD A7 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06E9 32 FE 81                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06EC C9                           ret
 484+ 06ED
 485+ 06ED              ; move cursor to new X,Y coordinates
 486+ 06ED CD 1D 07     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06F0 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06F3 CD E3 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06F6 3A FF 81                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06F9 A7                           and     A               ; is cursor off?
 491+ 06FA C8                           ret     Z               ; yes, return
 492+ 06FB 3A 00 82                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06FE F6 20                        or      $20             ; ...set cursor on
 494+ 0700 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 0703 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 0705 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 0708
 498+ 0708
 499+ 0708              ; set new cursor's coordinates
 500+ 0708 3A FC 81     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 070B 32 FA 81                     ld      (SCR_CURS_X),A  ; write new X
 502+ 070E 3A FD 81                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 0711 32 FB 81                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 0714 3E FF                        ld      A,$FF           ; delete new values
 505+ 0716 32 FC 81                     ld      (SCR_CUR_NX),A  ; of X
 506+ 0719 32 FD 81                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 071C C9                           ret
 508+ 071D
 509+ 071D              ; recover char under the cursor and prints it onto the screen
 510+ 071D CD 26 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 0720 3A FE 81                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0723 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0726
 514+ 0726              ; retrieve cursor position from either current coordinates or next place
 515+ 0726              ; return address position into HL
 516+ 0726 3A FB 81     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0729 6F                           ld      L,A             ; move it into reg.L
 518+ 072A AF                           xor     A               ; reset A
 519+ 072B 67                           ld      H,A             ; reset H
 520+ 072C 47                           ld      B,A             ; reset B
 521+ 072D 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 072E 11 B7 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0731 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0734 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0736 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0738 11 87 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 073B 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 073C 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 073D 23                           inc     HL
 530+ 073E 56                           ld      D,(HL)
 531+ 073F 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0742 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0743 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0746 4F                           ld      C,A             ; transfer A into C
 535+ 0747 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0748 C9                           ret
 537+ 0749
 538+ 0749              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0749              ; return them into L,A for X,Y
 540+ 0749 D5           HL2XY:          push    DE              ; store DE
 541+ 074A ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 074E AF                           xor     A               ; clear Carry
 543+ 074F ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0751 D1                           pop     DE
 545+ 0752 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0755 4F                           ld      C,A             ; move it into C
 547+ 0756 CD 79 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0759 C9                           ret                     ; return to caller
 549+ 075A
 550+ 075A              ;-------------------------------------------------------------------------------
 551+ 075A              ; char table for jumps
 552+ 075A 19           CHRTBL:         defb    HOME
 553+ 075B 9D 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 075D
 555+ 075D 0C                           defb    CS
 556+ 075E 90 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 0760
 558+ 0760 0D                           defb    CR
 559+ 0761 DA 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0763
 561+ 0763 08                           defb    BKSP
 562+ 0764 47 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0766
 564+ 0766 1C                           defb    CRSLFT
 565+ 0767 8A 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0769
 567+ 0769 1E                           defb    CRSUP
 568+ 076A D6 08                        defw    CURSORUP        ; move cursor up
 569+ 076C
 570+ 076C 1D                           defb    CRSRGT
 571+ 076D EF 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 076F
 573+ 076F 1F                           defb    CRSDN
 574+ 0770 24 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0772
 576+ 0772 1A                           defb    INSRT
 577+ 0773 05 08                        defw    INSERTKEY       ; insert a space
 578+ 0775
 579+ 0775 0A                           defb    LF
 580+ 0776 E1 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0778
 582+ 0778              ; send current char to video buffer
 583+ 0778 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0779 C5                           push    BC              ; store BC
 585+ 077A D5                           push    DE              ; store DE
 586+ 077B E5                           push    HL              ; store HL
 587+ 077C 3A FF 81                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 077F F5                           push    AF              ; into stack
 589+ 0780 CD 59 09                     call    CURSOR_OFF      ; cursor off
 590+ 0783 3A 02 82                     ld      A,(CHR4VID)     ; recover char
 591+ 0786 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0788 21 5A 07                     ld      HL,CHRTBL       ; address of key table
 593+ 078B BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 078C 23                           inc     HL              ; beginning of sub-routine address
 595+ 078D 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 078F 5E                           ld      E,(HL)          ; load addres into DE
 597+ 0790 23                           inc     HL
 598+ 0791 56                           ld      D,(HL)
 599+ 0792 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0793 11 D4 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0796 D5                           push    DE              ; store into stack
 602+ 0797 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0798 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0799 23                           inc     HL              ; ...to the next char code
 605+ 079A 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 079C                              ; it'a not a special char, just print it
 607+ 079C CD 26 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 079F 3A 02 82                     ld      A,(CHR4VID)     ; recover char to print
 609+ 07A2 CD BC 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 07A5 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 07A8 5F                           ld      E,A             ; store cursor Y into E
 612+ 07A9 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 07AC 3C                           inc     A               ; move 1 step to right
 614+ 07AD 21 F5 81                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 07B0 BE                           cp      (HL)            ; have we reached the most right position?
 616+ 07B1 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 07B3 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 07B4 7B                           ld      A,E             ; move cursor Y into A
 619+ 07B5 21 F6 81                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 07B8 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 07B9 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 07BB D5                           push    DE
 623+ 07BC CD 60 09                     call    SCROLLUP        ; scroll screen up
 624+ 07BF D1                           pop     DE
 625+ 07C0 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07C1 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07C2 32 FA 81     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07C5 7B                           ld      A,E             ; recover Y
 629+ 07C6 32 FB 81                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07C9 CD E3 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07CC 3A E5 81                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07CF E6 20                        and     $20             ; check cursor state
 633+ 07D1 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07D4 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07D5 32 02 82                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07D8 F1                           pop     AF              ; recover cursor state
 637+ 07D9 A7                           and     A               ; was it off (A=0)?
 638+ 07DA C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07DD E1                           pop     HL              ; restore HL
 640+ 07DE D1                           pop     DE              ; restore DE
 641+ 07DF C1                           pop     BC              ; restore BC
 642+ 07E0 F1                           pop     AF              ; restore AF
 643+ 07E1 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07E2
 645+ 07E2              ; flash the cursor at the current position
 646+ 07E2              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07E2 3A FF 81     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07E5 A7                           and     A               ; cursor off (A=0)?
 649+ 07E6 C8                           ret     Z               ; yes, return
 650+ 07E7 3A E5 81                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07EA E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07EC 21 00 82                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07EF BE                           cp      (HL)            ; compare current state with last state
 654+ 07F0 C8                           ret     Z               ; same state, no change required - exit
 655+ 07F1 77                           ld      (HL),A          ; save new state
 656+ 07F2 F5                           push    AF              ; store A (keep state for later use)
 657+ 07F3 CD 26 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07F6 F1                           pop     AF              ; recover current state
 659+ 07F7 06 FF                        ld      B,$FF           ; cursor char
 660+ 07F9 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07FB 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07FD 3A FE 81                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 0800 47                           ld      B,A             ; move char into B
 664+ 0801 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 0802 C3 BC 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 0805
 667+ 0805
 668+ 0805              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 0805              ; 1 cell straight
 670+ 0805 CD 1D 07     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 0808 CD 26 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 080B 22 05 82                     ld      (CUR_POS),HL    ; store it
 673+ 080E CD 61 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 0811                                                      ; DE is the address of the bottom right cell of the screen
 675+ 0811 22 09 82                     ld      (ENDTXT),HL     ; store it
 676+ 0814 ED 4B 05 82                  ld      BC,(CUR_POS)    ; load starting address
 677+ 0818 AF                           xor     A
 678+ 0819 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 081B CA F3 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 081E 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 0820 2A 09 82                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0823 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0824 E5                           push    HL
 684+ 0825 CD 1E 4D                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0828 E1                           pop     HL
 686+ 0829 D2 34 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 082C CD A7 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 082F 23                           inc     HL              ; next cell
 689+ 0830 CD BC 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0833 2B                           dec     HL              ; decrement to old position
 691+ 0834 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0835 79                           ld      A,C
 693+ 0836 B0                           or      B               ; finished?
 694+ 0837 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0839 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 083B 2A 05 82                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 083E 32 FE 81                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0841 CD BC 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0844 C3 F3 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0847
 701+ 0847              ; delete the char at the left of the cursor
 702+ 0847 CD 1D 07     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 084A 2A F8 81                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 084D 44 4D                        ld      BC,HL           ; store into BC
 705+ 084F CD 26 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0852 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0854 AF                           xor     A               ; reset Carry
 708+ 0855 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0857 CA 81 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 085A ED 53 05 82                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 085E CD 61 0A                     call    ENDOFLN         ; check end of text
 712+ 0861 ED 5B 05 82                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0865 AF                           xor     A               ; reset Carry
 714+ 0866 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0868 CA 81 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 086B 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 086D EB                           ex      DE,HL           ; copy starting position into HL
 718+ 086E CD A7 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0871 2B                           dec     HL              ; 1 position to left
 720+ 0872 CD BC 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0875 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0876 23                           inc     HL
 723+ 0877 0B                           dec     BC              ; decrement # of chars
 724+ 0878 79                           ld      A,C
 725+ 0879 B0                           or      B               ; 0 chars?
 726+ 087A 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 087C 2B                           dec     HL
 728+ 087D AF                           xor     A
 729+ 087E CD BC 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0881 CD B3 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0884 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0887 C3 F3 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 088A
 734+ 088A
 735+ 088A              ; move cursor to left
 736+ 088A F5           CURSORLEFT:     push    AF              ; store A
 737+ 088B 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 088E A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 088F 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0891 3D                           dec     A               ; no, decrement X
 741+ 0892 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0895 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0898 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 089B 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 089D 3A FB 81     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 08A0 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 08A1 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 08A3 3D                           dec     A               ; no, decrement Y
 749+ 08A4 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 08A7 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 08AA 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 08AB 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 08AE CD ED 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 08B1 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 08B2 C9                           ret                     ; return to caller
 756+ 08B3
 757+ 08B3              ; move cursor 1 position to the left
 758+ 08B3 3A FA 81     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 08B6 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 08B7 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 08B9 3D                           dec     A               ; no, decrement X
 762+ 08BA 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 08BD 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 08C0 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08C3 C9                           ret                     ; go on moving cursor
 766+ 08C4 3A FB 81     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08C7 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08C8 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08CA 3D                           dec     A               ; no, decrement Y
 770+ 08CB 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08CE 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08D1 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08D2 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08D5 C9                           ret                     ; return to caller
 775+ 08D6
 776+ 08D6              ; move cursor up
 777+ 08D6 F5           CURSORUP:       push    AF              ; store A
 778+ 08D7 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08DA A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08DB 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08DD 3D                           dec     A               ; no, decrement Y
 782+ 08DE 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08E1 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08E4 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08E7 CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08EA CD ED 06                     call    MOVCRS          ; move cursor into new position
 787+ 08ED F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08EE C9                           ret                     ; return to caller
 789+ 08EF
 790+ 08EF
 791+ 08EF              ; move cursor to right
 792+ 08EF F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08F0 C5                           push    BC              ; store B
 794+ 08F1 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08F4 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08F5 47                           ld      B,A             ; move A into B
 797+ 08F6 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08F9 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08FA 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08FC 3C                           inc     A               ; no, so increment X
 801+ 08FD 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 0900 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 0903 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 0906 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 0908 3A F6 81     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 090B 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 090C 47                           ld      B,A             ; move bottom into B
 808+ 090D 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 0910 B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 0911 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 0913 3C                           inc     A               ; no, increment Y
 812+ 0914 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 0917 AF                           xor     A               ; move cursor to top left
 814+ 0918 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 091B CD 1D 07     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 091E CD ED 06                     call    MOVCRS          ; move cursor into new position
 817+ 0921 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0922 F1                           pop     AF              ; restore A
 819+ 0923 C9                           ret                     ; return to caller
 820+ 0924
 821+ 0924
 822+ 0924              ; move cursor down
 823+ 0924 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0925 C5                           push    BC              ; store B
 825+ 0926 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0929 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 092A 47                           ld      B,A             ; move X into B
 828+ 092B 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 092E B8                           cp      B               ; is current cursor position < 23?
 830+ 092F 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0931 3C                           inc     A               ; yes, increment Y
 832+ 0932 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0935 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0938 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 093B CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 093E CD ED 06                     call    MOVCRS          ; move cursor into new position
 837+ 0941 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0942 F1                           pop     AF              ; retrieve A
 839+ 0943 C9                           ret                     ; return to caller
 840+ 0944
 841+ 0944
 842+ 0944              ; set cursor on (visible on screen)
 843+ 0944 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0945 3A FF 81                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0948 B7                           or      A               ; is it on?
 846+ 0949 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 094B 3A F6 81                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 094E FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 0950 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0952 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0954 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 852+ 0957 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0958 C9                           ret                     ; return to caller
 854+ 0959
 855+ 0959              ; set cursor off (invisible on screen)
 856+ 0959 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 095A AF                           xor     A               ; cursor state OFF
 858+ 095B 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 859+ 095E F1                           pop     AF              ; restore AF
 860+ 095F C9                           ret
 861+ 0960
 862+ 0960              ; scroll the screen 1 row up
 863+ 0960 AF           SCROLLUP:       xor     A               ; reset A
 864+ 0961 57                           ld      D,A             ; reset D
 865+ 0962 32 01 82                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0965 2A F8 81                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0968 22 35 82                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 096B 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 096E 5F                           ld      E,A             ; move width into E
 870+ 096F 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 0970 22 37 82                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0973 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0976 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0977 47                           ld      B,A             ; move # of rows into B
 875+ 0978 3A F5 81     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 097B 5F                           ld      E,A             ; move width into E
 877+ 097C 2A 37 82                     ld      HL,(VIDTMP2)    ; load source address
 878+ 097F 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0981 ED 69                        out     (C),L           ; low byte of source
 880+ 0983 ED 61                        out     (C),H           ; high byte of source
 881+ 0985 21 0D 82                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0988 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 883+ 098A ~                            LM64K_NOP               ; added to compensate shorter instruction
 884+ 098A ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 098C 77                           ld      (HL),A          ; store char
 886+ 098D 23                           inc     HL              ; next cell of the buffer
 887+ 098E 1D                           dec     E               ; count the chars to be read
 888+ 098F 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0991 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0994 5F                           ld      E,A             ; move # of rows into E
 891+ 0995 16 00                        ld      D,$00           ; reset D
 892+ 0997 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 099A E5                           push    HL              ; store HL
 894+ 099B 2A 37 82                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 099E 22 35 82                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 09A1 19                           add     HL,DE           ; address of new
 897+ 09A2 22 37 82                     ld      (VIDTMP2),HL    ; source row
 898+ 09A5 E1                           pop     HL              ; restore address of current destination row
 899+ 09A6 CB F4                        set     6,H             ; writing mode
 900+ 09A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 901+ 09AA ED 69                        out     (C),L           ; low byte
 902+ 09AC ED 61                        out     (C),H           ; high byte of address
 903+ 09AE 21 0D 82                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 09B1 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 905+ 09B3 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 09B4 ED 79                        out     (C),A           ; send char
 907+ 09B6 23                           inc     HL              ; increment buffer index
 908+ 09B7 1D                           dec     E               ; next row
 909+ 09B8 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 09BA 10 BC                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 09BC 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 09BF 47                           ld      B,A             ; cells to empty into B
 913+ 09C0 AF                           xor     A               ; null char
 914+ 09C1 0E 32                        ld      C,VDP_SET       ; VDP set mode
 915+ 09C3 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09C6 CB F4                        set     6,H             ; writing mode
 917+ 09C8 ED 69                        out     (C),L           ; low byte then..
 918+ 09CA ED 61                        out     (C),H           ; high byte of address
 919+ 09CC 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 920+ 09CE ~                            LM64K_NOP               ; delay
 921+ 09CE ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09D0 00                           nop                     ; delay
 923+ 09D1 00                           nop
 924+ 09D2 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09D4 3E 01                        ld      A,$01
 926+ 09D6 32 01 82                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09D9 C9                           ret                     ; return to caller
 928+ 09DA
 929+ 09DA              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09DA              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09DA              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09DA              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09DA              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09DA              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09DA              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09DA              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09DA 3A FF 81                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09DD 32 0B 82                     ld      (TMPBFR4),A     ; store status
 939+ 09E0 A7                           and     A               ; is cursor on?
 940+ 09E1 C4 59 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09E4 CD 1D 07                     call    RSTCHRCRS       ; restore char under it
 942+ 09E7                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09E7 3A 3F 82                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09EA A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09EB CA 40 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09EE                              ; first part: look for the beginning of the text line on screen
 947+ 09EE CD 26 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09F1 22 05 82                     ld      (CUR_POS),HL    ; store it
 949+ 09F4 ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09F8 E5           RPTNLLSRC:      push    HL
 951+ 09F9 CD 1E 4D                     call    CMP16           ; check if at "home"
 952+ 09FC E1                           pop     HL
 953+ 09FD CA 08 0A                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 0A00 2B                           dec     HL              ; go 1 step back
 955+ 0A01 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 0A04 A7                           and     A               ; is it $00 (null char)?
 957+ 0A05 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 0A07 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 0A08                              ; second part: look for the ending of the text on screen
 960+ 0A08 22 07 82     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 0A0B CD 61 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 0A0E 22 09 82                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 0A11 ED 5B 07 82                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 0A15 A7                           and     A               ; clear Carry
 965+ 0A16 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 0A18 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 0A1A                              ;---    central part: send the text on the screen to the interpreter
 968+ 0A1A 2A 07 82                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 0A1D ED 5B 09 82                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 0A21 CD A7 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A24 E5                           push    HL
 972+ 0A25 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A28 E1                           pop     HL
 974+ 0A29 23                           inc     HL              ; go to next char
 975+ 0A2A E5                           push    HL              ; store HL
 976+ 0A2B CD 1E 4D                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A2E E1                           pop     HL
 978+ 0A2F 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A31 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A33 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A36 2A 09 82                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A39 CD 49 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A3C 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A3D 32 FB 81                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A40                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A40 AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A41 32 FA 81                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A44 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A47 3C                           inc     A               ; new row
 990+ 0A48 21 F6 81                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A4B BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A4C 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A4E 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A4F F5                           push    AF              ; (store A)
 995+ 0A50 CD 60 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A53 F1                           pop     AF              ; (retrieve A)
 997+ 0A54 32 FB 81     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A57 3A 0B 82                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A5A A7                           and     A               ; was it off (A=0)?
1000+ 0A5B C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A5E C3 E3 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A61
1003+ 0A61              ; find end of text line
1004+ 0A61              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A61              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A61 3A F6 81     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A64 5F                           ld      E,A             ; load screen height into DE
1008+ 0A65 3A F5 81                     ld      A,(SCR_SIZE_W)
1009+ 0A68 6F                           ld      L,A             ; load screen width into HL
1010+ 0A69 AF                           xor     A
1011+ 0A6A 67                           ld      H,A
1012+ 0A6B 57                           ld      D,A
1013+ 0A6C CD 29 4D                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A6F ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A73 19                           add     HL,DE           ; get the address...
1016+ 0A74 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A75 EB                           ex      DE,HL           ; store address into DE
1018+ 0A76 2A 05 82                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A79 E5           RPTNLLSRC2:     push    HL
1020+ 0A7A CD 1E 4D                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A7D E1                           pop     HL
1022+ 0A7E C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A7F 23                           inc     HL              ; 1 more step forward
1024+ 0A80 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A83 A7                           and     A               ; is it $00 (null char)?
1026+ 0A84 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A86 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A87
1029+ 0A87
1030+ 0A87              ; ------------------------------------------------------------------------------
1031+ 0A87                              ; this table contains the values of the offsets to be added to
1032+ 0A87                              ; the starting address of the name table to find the correct
1033+ 0A87                              ; value of the first cell of the corresponding row
1034+ 0A87                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A87                              ; table for graphics 1 text mode: 32 cols
1036+ 0A87 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A8B 40 00 60 00
1036+ 0A8F 80 00 A0 00
1036+ 0A93 C0 00 E0 00
1037+ 0A97 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A9B 40 01 60 01
1037+ 0A9F 80 01 A0 01
1037+ 0AA3 C0 01 E0 01
1038+ 0AA7 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0AAB 40 02 60 02
1038+ 0AAF 80 02 A0 02
1038+ 0AB3 C0 02 E0 02
1039+ 0AB7                              ; table for pure text mode: 40 cols
1040+ 0AB7 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0ABB 50 00 78 00
1040+ 0ABF A0 00 C8 00
1040+ 0AC3 F0 00 18 01
1041+ 0AC7 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0ACB 90 01 B8 01
1041+ 0ACF E0 01 08 02
1041+ 0AD3 30 02 58 02
1042+ 0AD7 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0ADB D0 02 F8 02
1042+ 0ADF 20 03 48 03
1042+ 0AE3 70 03 98 03
1043+ 0AE7
1044+ 0AE7              ; ------------------------------------------------------------------------------
1045+ 0AE7              ; reset VRAM
1046+ 0AE7 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AE8 67                           ld      H,A
1048+ 0AE9 6F                           ld      L,A             ; reset HL
1049+ 0AEA CD 87 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0AED 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0AEF 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0AF0 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1053+ 0AF2 ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AF4 14                           inc     D               ; next cell
1055+ 0AF5 00                           nop
1056+ 0AF6 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AF8 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AFA C9                           ret                     ; return to caller
1059+ 0AFB
1060+ 0AFB              ; clear video registers in SRAM
1061+ 0AFB 21 F5 81     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0AFE AF                           xor     A               ; $00 to clean the registers
1063+ 0AFF 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0B01 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0B02 23                           inc     HL              ; next register
1066+ 0B03 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0B05 C9                           ret                     ; return to caller
1068+ 0B06
1069+ 0B06              ; ------------------------------------------------------------------------------
1070+ 0B06              ; set a specific graphics mode, passed into reg. E
1071+ 0B06 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0B08 CB 23                        sla     E               ; multiply E by 8..
1073+ 0B0A CB 23                        sla     E               ; so that reg. E can point..
1074+ 0B0C CB 23                        sla     E               ; to the correct settings
1075+ 0B0E 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0B10 21 43 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0B13 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0B14 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0B16 0E 32                        ld      C,VDP_SET       ; VDP set
1080+ 0B18 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0B19 ED 51                        out     (C),D           ; send data to VDP
1082+ 0B1B ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0B1D 3C                           inc     A               ; next register
1084+ 0B1E 23                           inc     HL              ; next value
1085+ 0B1F 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0B21 C9                           ret
1087+ 0B22
1088+ 0B22              ; ------------------------------------------------------------------------------
1089+ 0B22              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0B22                              ; reg. HL contains address of pattern table into VRAM
1091+ 0B22 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B24 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B26 0E 32                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B28 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B2A ED 61                        out     (C),H           ; send high byte
1096+ 0B2C 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1097+ 0B2E 21 54 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B31 A7                           and     A               ; is it text mode (A=0)?
1099+ 0B32 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B34 21 54 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B37 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B39 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B3A ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B3C 23                           inc     HL              ; inc byte pointer
1105+ 0B3D 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B3E 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B40 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B42 C9                           ret                     ; return to caller
1109+ 0B43
1110+ 0B43              ;------------------------------------------------------------------------------
1111+ 0B43              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B43              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B43              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B43
1115+ 0B43                              ; VDP register settings for a text display
1116+ 0B43 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B44 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B45 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B46 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B47 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B48 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B49 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B4A F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B4B
1125+ 0B4B              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B4B 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B4C C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B4D 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B4E 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B4F 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B50 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B51 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B52 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B53
1135+ 0B53              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B53 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B54 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B55 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B56 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B57 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B58 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B59 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B5A 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B5B
1145+ 0B5B              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B5B 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B5C CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B5D 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B5E 00                           defb    $00             ; reg.3: don't care
1150+ 0B5F 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B60 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B61 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B62 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B63
1155+ 0B63              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B63 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B64 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B65 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B66 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B67 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B68 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B69 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B6A 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B6B
1165+ 0B6B              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B6B                              ; 1st band
1167+ 0B6B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B6F 00 00 00 00
1167+ 0B73 00 00 00 00
1167+ 0B77 00 00 00 00
1167+ 0B7B 00 00 00 00
1167+ 0B7F 00 00 00 00
1167+ 0B83 00 00 00 00
1167+ 0B87 00 00 00 00
1168+ 0B8B 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B8F 0B 10 00 00
1168+ 0B93 00 00 00 00
1168+ 0B97 00 00 00 00
1168+ 0B9B 00 00 00 00
1168+ 0B9F 00 00 00 00
1168+ 0BA3 00 00 00 00
1168+ 0BA7 00 00 00 00
1169+ 0BAB                              ; 2nd band
1170+ 0BAB 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0BAF 00 0C 00 00
1170+ 0BB3 00 01 00 00
1170+ 0BB7 00 14 00 00
1170+ 0BBB 06 05 06 15
1170+ 0BBF 16 07 06 15
1170+ 0BC3 16 07 06 01
1170+ 0BC7 01 07 00 00
1171+ 0BCB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BCF 00 0C 00 00
1171+ 0BD3 00 01 00 00
1171+ 0BD7 00 01 14 06
1171+ 0BDB 01 05 03 05
1171+ 0BDF 03 05 03 05
1171+ 0BE3 03 05 03 05
1171+ 0BE7 03 05 00 00
1172+ 0BEB                              ; 3rd band
1173+ 0BEB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BEF 00 0C 00 00
1173+ 0BF3 00 01 00 00
1173+ 0BF7 00 01 01 01
1173+ 0BFB 01 05 09 14
1173+ 0BFF 13 08 03 05
1173+ 0C03 13 05 03 05
1173+ 0C07 00 00 00 00
1174+ 0C0B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0C0F 00 0C 00 00
1174+ 0C13 00 01 00 00
1174+ 0C17 00 01 00 08
1174+ 0C1B 03 05 06 15
1174+ 0C1F 16 07 03 01
1174+ 0C23 16 05 03 05
1174+ 0C27 00 00 00 00
1175+ 0C2B                              ; 4th band
1176+ 0C2B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C2F 00 0C 00 00
1176+ 0C33 00 01 00 00
1176+ 0C37 00 01 00 00
1176+ 0C3B 03 05 03 05
1176+ 0C3F 03 05 03 05
1176+ 0C43 03 05 03 05
1176+ 0C47 03 05 00 00
1177+ 0C4B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C4F 00 0C 00 00
1177+ 0C53 00 01 04 04
1177+ 0C57 00 01 00 00
1177+ 0C5B 03 05 09 14
1177+ 0C5F 13 08 09 14
1177+ 0C63 13 08 09 01
1177+ 0C67 01 08 00 00
1178+ 0C6B                              ; 5th band
1179+ 0C6B 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C6F 12 11 00 00
1179+ 0C73 00 00 00 00
1179+ 0C77 00 00 00 00
1179+ 0C7B 00 00 00 00
1179+ 0C7F 00 00 00 00
1179+ 0C83 00 00 00 00
1179+ 0C87 00 00 00 00
1180+ 0C8B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C8F 00 00 00 00
1180+ 0C93 00 00 00 00
1180+ 0C97 00 00 00 00
1180+ 0C9B 00 00 00 00
1180+ 0C9F 00 00 00 00
1180+ 0CA3 00 00 00 00
1180+ 0CA7 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0CAB
  78  0CAB              ; incude the latest version of the PSG module
  79  0CAB                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0CAB              ; ------------------------------------------------------------------------------
   2+ 0CAB              ; LM80C - PSG ROUTINES - 1.1
   3+ 0CAB              ; ------------------------------------------------------------------------------
   4+ 0CAB              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0CAB              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0CAB              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0CAB              ; kind of warranty: you can use them at your own risk.
   8+ 0CAB              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0CAB              ; maintain the copyright notices, include this advice and the note to the
  10+ 0CAB              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0CAB              ; redistribuite them.
  12+ 0CAB              ; https://www.leonardomiliani.com
  13+ 0CAB              ;
  14+ 0CAB              ; Please support me by visiting the following links:
  15+ 0CAB              ; Main project page: https://www.leonardomiliani.com
  16+ 0CAB              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0CAB              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0CAB              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0CAB              ; ------------------------------------------------------------------------------
  20+ 0CAB              ;
  21+ 0CAB              ; ------------------------------------------------------------------------------
  22+ 0CAB
  23+ 0CAB              ;------------------------------------------------------------------------------
  24+ 0CAB
  25+ 0CAB              ; configure the PSG
  26+ 0CAB 21 39 82     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0CAE 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0CB0 AF                           xor     A               ; reset A
  29+ 0CB1 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0CB2 23                           inc     HL              ; next register
  31+ 0CB3 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0CB5 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0CB7 21 C9 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0CBA 16 00                        ld      D,$00           ; first register
  35+ 0CBC 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0CBD CD 03 0D                     call    SETSNDREG       ; select register
  37+ 0CC0 7E                           ld      A,(HL)          ; load value
  38+ 0CC1 CD 08 0D                     call    WRTSNDREG       ; write to register
  39+ 0CC4 14                           inc     D               ; next register
  40+ 0CC5 23                           inc     HL              ; next value
  41+ 0CC6 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CC8 C9                           ret                     ; return to caller
  43+ 0CC9
  44+ 0CC9 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CCD 00 00 00 BF
  45+ 0CD1 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CD5 00 00 FF FF
  46+ 0CD9                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CD9
  48+ 0CD9
  49+ 0CD9              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CD9 21 F3 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CDC C3 E2 0C                     jp      SENDSND
  52+ 0CDF 21 FB 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CE2 C5           SENDSND:        push    BC
  54+ 0CE3 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CE5 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CE6 CD 03 0D                     call    SETSNDREG
  57+ 0CE9 23                           inc     HL              ; next cell
  58+ 0CEA 7E                           ld      A,(HL)          ; read value
  59+ 0CEB CD 08 0D                     call    WRTSNDREG
  60+ 0CEE 23                           inc     HL
  61+ 0CEF 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CF1 C1                           pop     BC
  63+ 0CF2 C9                           ret                     ; return to caller
  64+ 0CF3
  65+ 0CF3 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CF7 05 00 0A 0F
  66+ 0CFB 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CFF 0A 00 07 BF
  67+ 0D03
  68+ 0D03
  69+ 0D03              ; select register on PSG
  70+ 0D03 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0D05 ED 79                        out     (C),A           ; set register
  72+ 0D07 C9                           ret                     ; return to caller
  73+ 0D08
  74+ 0D08              ; send data to PSG
  75+ 0D08 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0D0A ED 79                        out     (C),A           ; send data
  77+ 0D0C C9                           ret                     ; return to caller
  78+ 0D0D
  79+ 0D0D              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0D0D              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0D0D              ; shut off the audio channel whose counter has reached 0.
  82+ 0D0D              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0D0D DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0D0F DD 21 39 82                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0D13 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0D15 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0D17 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0D1A DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0D1D 7B                           ld      A,E             ; load E into A
  90+ 0D1E B2                           or      D               ; check that DE=0
  91+ 0D1F 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0D21 1B                           dec     DE              ; no, so decrement DE
  93+ 0D22 7B                           ld      A,E             ; reload E into A...
  94+ 0D23 DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D26 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D29 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D2A 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D2C                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D2C                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D2C                                                      ; then set 0 into its tone registers
 101+ 0D2C 16 07                        ld      D,$07           ; mixer register
 102+ 0D2E 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D30 ED 51                        out     (C),D           ; set mixer register
 104+ 0D32 ED 78                        in      A,(C)           ; load current value
 105+ 0D34 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D35 ED 51                        out     (C),D           ; select mixer register
 107+ 0D37 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D39 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D3B 3E 03                        ld      A,$03           ; three channels
 110+ 0D3D 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D3E 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D3F 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D41 ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D43 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D45 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D47 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D49 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D4B 3C                           inc     A               ; next tone register
 119+ 0D4C ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D4E 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D50 ED 69                        out     (C),L           ; write 0 into register
 122+ 0D52 DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D54 DD 23                        inc     IX              ; ...next channel...
 124+ 0D56 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D58 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D5A DD E1                        pop     IX              ; restore IX
 127+ 0D5C C9                           ret                     ; return to caller
 128+ 0D5D
 129+ 0D5D              ; read a specific row of the keyboard matrix, set by A
 130+ 0D5D              ; return read into A
 131+ 0D5D C5           READKBLN:       push    BC              ; store BC
 132+ 0D5E 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D60 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D62 ED 41                        out     (C),B           ; select reg #15
 135+ 0D64 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D66 ED 79                        out     (C),A           ; activate the row
 137+ 0D68 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D6A 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D6C ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D6E ED 78                        in      A,(C)           ; read register #14
 141+ 0D70 C1                           pop     BC              ; retrieve BC
 142+ 0D71 C9                           ret
 143+ 0D72
 144+ 0D72              ; read the keyboard matrix to look for a key pressure
 145+ 0D72 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D74 06 07                        ld      B,$07           ; set register #7...
 147+ 0D76 ED 41                        out     (C),B           ; ...to work with
 148+ 0D78 ED 78                        in      A,(C)           ; read register #7
 149+ 0D7A CB FF                        set     7,A             ; port A set to output
 150+ 0D7C CB B7                        res     6,A             ; port B set to input
 151+ 0D7E ED 41                        out     (C),B           ; set register #7
 152+ 0D80 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D82 ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D84                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D84 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D86 CD 5D 0D                     call    READKBLN        ; read row
 157+ 0D89 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D8B 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D8D 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D90 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D92 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D94 CD 5D 0D                     call    READKBLN        ; read ALT row
 163+ 0D97 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D99 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D9B 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D9E 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0DA0 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0DA2 CD 5D 0D                     call    READKBLN        ; read CTRL row
 169+ 0DA5 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0DA7 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0DA9 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0DAC 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0DAE 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0DB0 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0DB2 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0DB4 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0DB6 ED 51                        out     (C),D           ; select reg. #15
 178+ 0DB8 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0DBA ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0DBC 5F                           ld      E,A             ; save current line into E
 181+ 0DBD 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0DBF 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0DC1 ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0DC3 00                           nop
 185+ 0DC4 ED 78                        in      A,(C)           ; read register #14
 186+ 0DC6 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DC8 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DCA                              ; check control keys
 189+ 0DCA 32 40 82                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DCD 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DCE FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DD0 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DD2 3A 40 82                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DD5 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DD7 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DD9 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DDB FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DDD 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DDF 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DE1 FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DE3 3A 40 82                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DE6 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DE8 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DEA 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DEC CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DEE CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DF0 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DF2 CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DF4 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DF6 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DF8 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DF9 0F                           rrca                    ; rotate right by 1
 213+ 0DFA 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DFC AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DFD 32 42 82                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0E00 32 46 82                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0E03 32 3F 82                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0E06 32 43 82                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0E09 C9                           ret                     ; ...and leave
 220+ 0E0A 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0E0C 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0E0D CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0E0F 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0E11 3A 46 82                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0E14 21 2D 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0E17 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0E19 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0E1B 21 6D 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0E1E 18 10                        jr      LOADMAP         ; and load it
 230+ 0E20 FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0E22 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E24 21 ED 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E27 18 07                        jr      LOADMAP         ; and load it
 234+ 0E29 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E2B 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E2D 21 AD 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E30 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E31 48                           ld      C,B             ; move B into C and...
 239+ 0E32 CB 21                        sla     C               ; ...multiply it...
 240+ 0E34 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E36 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E38 06 00                        ld      B,$00           ; reset B
 243+ 0E3A 09                           add     HL,BC           ; find the address of the current row
 244+ 0E3B 50                           ld      D,B             ; reset D
 245+ 0E3C 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E3D 3A 42 82                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E40 BE                           cp      (HL)            ; is it the same key?
 248+ 0E41 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E43 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E45 2A E5 81                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E48 ED 5B 44 82                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E4C 3A 43 82                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E4F FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E51 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E53 AF                           xor     A               ; clear Carry
 256+ 0E54 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E56 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E58 3A B3 80                     ld      A,(KEYDEL)
 259+ 0E5B 5F                           ld      E,A
 260+ 0E5C CD 1E 4D                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E5F DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E62 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E64 32 43 82                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E67 2A E5 81                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E6A 22 44 82                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E6D 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E6F C3 91 0E                     jp      SENDKEY         ; send key
 268+ 0E72 AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E73 ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E75 16 00                        ld      D,$00
 271+ 0E77 3A B4 80                     ld      A,(AUTOKE)
 272+ 0E7A 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E7B CD 1E 4D                     call    CMP16           ; check if interval is greater than delay
 274+ 0E7E DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E81 C3 62 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E84 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E85 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E86 32 43 82                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E89 ED 4B E5 81                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E8D ED 43 44 82                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E91 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E92 32 42 82                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E95 32 41 82                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E98 32 02 82                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E9B FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E9D 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E9F CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0EA2 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0EA4 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0EA7 21 25 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0EAA BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0EAB CA D9 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0EAE 0C                           inc     C               ; next FN key
 294+ 0EAF 23                           inc     HL              ; next FN key code
 295+ 0EB0 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0EB2 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0EB4 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 298+ 0EB7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0EBA B7                           or      A               ; is the print-on-video disabled?
 300+ 0EBB CA C4 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0EBE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0EC1 B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0EC2 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EC4 AF           PUTCHRBUF:      xor     A
 305+ 0EC5 32 3F 82                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EC8 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0ECB CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0ECE C3 D4 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0ED1 CD 78 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0ED4 AF           LVKBRDCHK2:     xor     A
 311+ 0ED5 32 46 82                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0ED8 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0ED9                              ; manage FN keys
 314+ 0ED9 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EDA 2A AF 80                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EDD 23                           inc     HL              ; -1 means direct statement
 317+ 0EDE 7C                           ld      A,H
 318+ 0EDF B5                           or      L
 319+ 0EE0 7A                           ld      A,D             ; retrieve char
 320+ 0EE1 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EE3 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EE4 87                           add     A,A
 323+ 0EE5 87                           add     A,A
 324+ 0EE6 87                           add     A,A
 325+ 0EE7 87                           add     A,A             ; FN key number * 16
 326+ 0EE8 4F                           ld      C,A             ; move it into C
 327+ 0EE9 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EEB 21 B5 80                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0EEE 09                           add     HL,BC           ; get correct text address
 330+ 0EEF 06 10                        ld      B,$10           ; 16 chars
 331+ 0EF1 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0EF2 A7                           and     A               ; null char?
 333+ 0EF3 CA D4 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0EF6 57                           ld      D,A             ; pass char into D
 335+ 0EF7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0EFA B7                           or      A               ; is the print-on-video disabled?
 337+ 0EFB CA 0B 0F                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EFE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0F01 B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0F02 C4 18 0F                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0F05 23           CNTFNK:         inc     HL              ; next char
 342+ 0F06 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0F08 C3 D4 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0F0B AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0F0C 32 3F 82                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0F0F 7A                           ld      A,D             ; retrieve char
 347+ 0F10 E5                           push    HL              ; store HL
 348+ 0F11 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0F14 E1                           pop     HL              ; retrieve HL
 350+ 0F15 C3 05 0F                     jp      CNTFNK          ; repeat
 351+ 0F18 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0F19 32 02 82                     ld      (CHR4VID),A     ; store char for printing
 353+ 0F1C 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0F1E 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 355+ 0F21 CD 78 07                     call    CHAR2VID        ; print on screen
 356+ 0F24 C9                           ret                     ; return to caller
 357+ 0F25
 358+ 0F25
 359+ 0F25              ;-----------------------------------------------------------------------
 360+ 0F25 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F29 06 16 17 18
 361+ 0F2D              ;-----------------------------------------------------------------------
 362+ 0F2D              ; key codes
 363+ 0F2D 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F31 20 10 71 32
 364+ 0F35 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F39 7A 73 65 34
 365+ 0F3D 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F41 63 66 74 36
 366+ 0F45 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F49 62 68 75 38
 367+ 0F4D 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F51 6D 6B 6F 30
 368+ 0F55 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F59 2E 3A 2D 1E
 369+ 0F5D 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F61 1B 3D 2B 1D
 370+ 0F65 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F69 01 02 04 18
 371+ 0F6D
 372+ 0F6D              ; shifted codes - not all the keys have the shifted version
 373+ 0F6D 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F71 20 10 51 22
 374+ 0F75 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F79 5A 53 45 24
 375+ 0F7D 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F81 43 46 54 26
 376+ 0F85 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F89 42 48 55 28
 377+ 0F8D 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F91 4D 4B 4F 5E
 378+ 0F95 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F99 3E 5B 5F 1E
 379+ 0F9D 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0FA1 1B C6 2B 1D
 380+ 0FA5 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0FA9 05 06 16 17
 381+ 0FAD
 382+ 0FAD              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0FAD 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0FB1 20 10 DE C4
 384+ 0FB5 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0FB9 83 82 A5 34
 385+ 0FBD 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0FC1 9D A3 A8 36
 386+ 0FC5 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FC9 9E AC D5 38
 387+ 0FCD 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FD1 A0 D7 87 C3
 388+ 0FD5 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FD9 C0 7B 90 1E
 389+ 0FDD 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FE1 1B D1 94 1D
 390+ 0FE5 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FE9 05 06 16 17
 391+ 0FED
 392+ 0FED              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FED 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FF1 20 10 9A 32
 394+ 0FF5 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FF9 98 96 99 34
 395+ 0FFD 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 1001 B1 AF A5 36
 396+ 1005 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 1009 B3 A9 A7 38
 397+ 100D 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 1011 AB B5 A4 30
 398+ 1015 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 1019 2E 3A BA 1E
 399+ 101D 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 1021 1B D4 B9 1D
 400+ 1025 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1029 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  102D
  81  102D              ; include the latest versions of the CF & DOS modules
  82  102D                  INCLUDE "../include/dos/bios-1.0.asm"
# file opened: ../include/dos/bios-1.0.asm
   1+ 102D              ; ------------------------------------------------------------------------------
   2+ 102D              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 102D              ; ------------------------------------------------------------------------------
   4+ 102D              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 102D              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 102D              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 102D              ; kind of warranty: you can use them at your own risk.
   8+ 102D              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 102D              ; maintain the copyright notices, include this advice and the note to the
  10+ 102D              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 102D              ; redistribuite them.
  12+ 102D              ; https://www.leonardomiliani.com
  13+ 102D              ;
  14+ 102D              ; Please support me by visiting the following links:
  15+ 102D              ; Main project page: https://www.leonardomiliani.com
  16+ 102D              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 102D              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 102D              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 102D              ; ------------------------------------------------------------------------------
  20+ 102D              ;
  21+ 102D              ; ------------------------------------------------------------------------------
  22+ 102D              ; Code Revision:
  23+ 102D              ; R1.0 - 20210307 - first release
  24+ 102D              ;
  25+ 102D              ;------------------------------------------------------------------------------
  26+ 102D
  27+ 102D              ; equates for CF at port $50
  28+ 102D              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  29+ 102D              CF_ERR:         equ %01010001   ; ($51) Error (R)
  30+ 102D              CF_FTR:         equ %01010001   ; ($51) Features (W)
  31+ 102D              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  32+ 102D              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  33+ 102D              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  34+ 102D              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  35+ 102D              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  36+ 102D              CF_STAT:        equ %01010111   ; ($57) Status (R)
  37+ 102D              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  38+ 102D
  39+ 102D
  40+ 102D              ;------------------------------------------------------------------------------
  41+ 102D              ; R O U T I N E S
  42+ 102D              ;------------------------------------------------------------------------------
  43+ 102D
  44+ 102D              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  45+ 102D CD 43 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  46+ 1030 CD 91 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  47+ 1033 D8                       ret     C               ; no card or I/O error, leave
  48+ 1034 3E 01                    ld      A,$01           ; 8-bit mode
  49+ 1036 D3 51                    out     (CF_FTR),A      ; set mode
  50+ 1038 CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  51+ 103B 3E EF                    ld      A,$EF           ; command to set mode
  52+ 103D D3 57                    out     (CF_CMD),A      ; execute command
  53+ 103F CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  54+ 1042 C9                       ret                     ; return to caller
  55+ 1043
  56+ 1043
  57+ 1043              ; a NOP command, just used to wake up the CF card
  58+ 1043 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  59+ 1045 D3 51                    out     (CF_FTR),A      ; send it
  60+ 1047 3E EF                    ld      A,$EF           ; set mode command
  61+ 1049 D3 57                    out     (CF_CMD),A      ; execute NOP
  62+ 104B C9                       ret                     ; return to caller
  63+ 104C
  64+ 104C
  65+ 104C              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  66+ 104C DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  67+ 104E 07                       rlca                    ; copy bit #7 into the Carry
  68+ 104F DA 4C 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  69+ 1052 C9                       ret                     ; bit #7 cleared - return to caller
  70+ 1053
  71+ 1053
  72+ 1053              ; check that CF is ready to get commands
  73+ 1053 DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  74+ 1055 E6 C0                    and     %11000000       ; check only bits #6 & #7
  75+ 1057 EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  76+ 1059 20 F8                    jr      NZ,CF_CMDRDY    ; wait
  77+ 105B C9                       ret                     ; return to caller
  78+ 105C
  79+ 105C
  80+ 105C              ; wait until data is ready to be read
  81+ 105C DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  82+ 105E E6 88                    and     %10001000       ; check only bits #7 & #3
  83+ 1060 EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  84+ 1062 20 F8                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  85+ 1064 C9                       ret                     ; return to caller
  86+ 1065
  87+ 1065
  88+ 1065              ; check for errors
  89+ 1065 DB 57        CF_CHKERR:  in      A,(CF_STAT)     ; read status register
  90+ 1067 1F                       rra                     ; move error bit #0 into Carry
  91+ 1068 C9                       ret                     ; return to caller
  92+ 1069
  93+ 1069
  94+ 1069              ; raw read 1 byte from CF
  95+ 1069 CD 5C 10     CF_RAWRDBT: call    CF_DAT_RDY      ; check if data is ready
  96+ 106C DB 50                    in      A,(CF_DATA)     ; read byte
  97+ 106E C9                       ret                     ; return to caller
  98+ 106F
  99+ 106F
 100+ 106F              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
 101+ 106F CD 53 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
 102+ 1072 3E 01                    ld      A,$01           ; 1 sector at a time
 103+ 1074 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
 104+ 1076 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 105+ 1079 79                       ld      A,C             ; load LBA0 byte
 106+ 107A D3 53                    out     (CF_LBA0),A     ; send it
 107+ 107C CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 108+ 107F 78                       ld      A,B             ; load LBA1 byte
 109+ 1080 D3 54                    out     (CF_LBA1),A     ; send it
 110+ 1082 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 111+ 1085 7B                       ld      A,E             ; load LBA2 byte
 112+ 1086 D3 55                    out     (CF_LBA2),A     ; send it
 113+ 1088 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 114+ 108B 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 115+ 108D B2                       or      D               ; add LBA sector
 116+ 108E D3 56                    out     (CF_LBA3),A     ; send it
 117+ 1090 C9                       ret                     ; return to caller
 118+ 1091
 119+ 1091
 120+ 1091              ; check if device is available & ready - try a bit of times, then exit with
 121+ 1091              ; error if no response, otherwise wait until device is ready
 122+ 1091              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 123+ 1091 C5           CR_DEV_RDY: push    BC              ; store HL
 124+ 1092 06 00                    ld      B,$00           ; 256 tries
 125+ 1094 0E 57                    ld      C,CF_STAT       ; address of status register
 126+ 1096 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 127+ 1098 FE 40                    cp      %01000000       ; busy=0, rdy=1
 128+ 109A 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 129+ 109C FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 130+ 109E 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 131+ 10A0 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 132+ 10A2 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 133+ 10A3 C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 134+ 10A4 C9                       ret                     ; return to caller
 135+ 10A5
 136+ 10A5
 137+ 10A5              ; put the CF into stand-by mode
 138+ 10A5 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 139+ 10A7 D3 56                    out 	(CF_LBA3),A     ; send configuration
 140+ 10A9 3E 92                    ld      A,$92           ; standby mode
 141+ 10AB D3 57                    out     (CF_CMD),A      ; send command
 142+ 10AD CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
 143+ 10B0 C9                       ret                     ; return to caller
 144+ 10B1
 145+ 10B1
 146+ 10B1              ;***************************************************************************
 147+ 10B1              ; CF_RD_SEC
 148+ 10B1              ; Function: load a sector (512 bytes) into RAM buffer.
 149+ 10B1              ;***************************************************************************
 150+ 10B1 CD 53 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 151+ 10B4 3E 20                    ld      A,$20           ; Prepare read command
 152+ 10B6 D3 57                    out     (CF_CMD),A      ; Send read command
 153+ 10B8 CD 5C 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 154+ 10BB DB 57                    in      A,(CF_STAT)     ; Read status
 155+ 10BD E6 01                    and     %00000001       ; mask off error bit
 156+ 10BF C2 B1 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 157+ 10C2              ; read CF buffer after it's been filled up by a previous command
 158+ 10C2              ; and store data into the I/O buffer
 159+ 10C2 C5           CF_RD_CMD:  push    BC              ; store BC
 160+ 10C3 E5                       push    HL              ; store HL
 161+ 10C4 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 162+ 10C7 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 163+ 10C9 CD 5C 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 164+ 10CC DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 165+ 10CE 77                       ld      (HL),A          ; store into buffer
 166+ 10CF 23                       inc     HL              ; next location
 167+ 10D0 DB 50                    in      A,(CF_DATA)     ; get another byte
 168+ 10D2 77                       ld      (HL),A          ; store it
 169+ 10D3 23                       inc     HL              ; next location
 170+ 10D4 10 F6                    djnz    CF_RD_SECT      ; repeat
 171+ 10D6 E1                       pop     HL              ; retrieve HL
 172+ 10D7 C1                       pop     BC              ; retrieve BC
 173+ 10D8 C9                       ret                     ; return to caller
 174+ 10D9
 175+ 10D9
 176+ 10D9              ;***************************************************************************
 177+ 10D9              ; CF_WR_SEC
 178+ 10D9              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 179+ 10D9              ;***************************************************************************
 180+ 10D9 C5           CF_WR_SEC:  push    BC              ; store BC
 181+ 10DA D5                       push    DE              ; store DE
 182+ 10DB E5                       push    HL              ; store HL
 183+ 10DC CD 6F 10                 call    CF_SETSTR       ; set sector
 184+ 10DF CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 185+ 10E2 3E 30                    ld      A,$30           ; set write command
 186+ 10E4 D3 57                    out     (CF_CMD),A      ; send command
 187+ 10E6 CD 5C 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 188+ 10E9 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10EC 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10EE 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10F0 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10F1 D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10F3 23                       inc     HL              ; next location
 194+ 10F4 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10F6 1D                       dec     E               ; 2 cycles
 196+ 10F7 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 10F9 CD 4C 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 10FC E1                       pop     HL              ; retrieve HL
 199+ 10FD D1                       pop     DE              ; retrieve DE
 200+ 10FE C1                       pop     BC              ; retrieve BC
 201+ 10FF C9                       ret                     ; return to caller
 202+ 1100
# file closed: ../include/dos/bios-1.0.asm
  83  1100                  INCLUDE "../include/dos/dos-1.0.asm"
# file opened: ../include/dos/dos-1.0.asm
   1+ 1100              ; ------------------------------------------------------------------------------
   2+ 1100              ; LM80C 64K - DOS ROUTINES - R1.0
   3+ 1100              ; ------------------------------------------------------------------------------
   4+ 1100              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1100              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1100              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1100              ; kind of warranty: you can use them at your own risk.
   8+ 1100              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1100              ; maintain the copyright notices, include this advice and the note to the
  10+ 1100              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1100              ; redistribuite them.
  12+ 1100              ; https://www.leonardomiliani.com
  13+ 1100              ;
  14+ 1100              ; Please support me by visiting the following links:
  15+ 1100              ; Main project page: https://www.leonardomiliani.com
  16+ 1100              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1100              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1100              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1100              ; ------------------------------------------------------------------------------
  20+ 1100              ;
  21+ 1100              ; ------------------------------------------------------------------------------
  22+ 1100              ; Code Revision:
  23+ 1100              ; R1.0 - 20210306 - first release
  24+ 1100              ;
  25+ 1100              ;------------------------------------------------------------------------------
  26+ 1100
  27+ 1100
  28+ 1100 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.00",$00     ; disk header
  28+ 1104 43 20 44 4F
  28+ 1108 53 00 31 2E
  28+ 110C 30 30 00
  29+ 110F 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  30+ 1111
  31+ 1111              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  32+ 1111              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  33+ 1111              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  34+ 1111              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  35+ 1111              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  36+ 1111              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  37+ 1111              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  38+ 1111              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  39+ 1111              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  40+ 1111              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  41+ 1111              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  42+ 1111              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  43+ 1111              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  44+ 1111              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  45+ 1111              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  46+ 1111
  47+ 1111              ; *****************************************************************************
  48+ 1111              ; D I S K    I N I T
  49+ 1111              ; Functions: format a disk creating a fresh new file system on disk or
  50+ 1111              ;            rewrite only the Master Sector
  51+ 1111              ; *****************************************************************************
  52+ 1111 3A B4 81     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  53+ 1114 32 05 82                 ld      (TMPBFR1),A     ; save onto another location for later use
  54+ 1117 CD B6 18                 call    CLRIOBF         ; clear I/O buffer
  55+ 111A CD CB 18                 call    CLRDOSBF        ; clear DOS buffer
  56+ 111D 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  57+ 111F D3 56                    out 	(CF_LBA3),A     ; send configuration
  58+ 1121 3E EC                    ld      A,$EC           ; select "drive ID" command
  59+ 1123 D3 57                    out     (CF_CMD),A      ; send command
  60+ 1125 CD 5C 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  61+ 1128 CD C2 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  62+ 112B ED 5B 98 81              ld      DE,(DOSBFR)     ; address of default conf. buffer
  63+ 112F 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  64+ 1132 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  65+ 1135 09                       add     HL,BC           ; set into HL
  66+ 1136 0E 04                    ld      C,$04           ; 4 bytes to copy
  67+ 1138 ED B0                    ldir                    ; copy (DE is auto-incremented)
  68+ 113A 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  69+ 113D 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  70+ 1140 09                       add     HL,BC           ; get position of data
  71+ 1141 ED B0                    ldir                    ; copy (DE is auto-incremented)
  72+ 1143 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  73+ 1146 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  74+ 1149 09                       add     HL,BC           ; get position of data
  75+ 114A 0E 02                    ld      C,$02           ; 2 bytes to copy
  76+ 114C ED B0                    ldir                    ; copy (DE is auto-incremented)
  77+ 114E 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  78+ 1151 01 06 00                 ld      BC,$0006        ; address of number of heads
  79+ 1154 09                       add     HL,BC           ; get position of data
  80+ 1155 0E 02                    ld      C,$02           ; 2 bytes to copy
  81+ 1157 ED B0                    ldir                    ; copy (DE is auto-incremented)
  82+ 1159                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  83+ 1159 ED 53 B4 81              ld      (TPBF4),DE      ; store current pointer to temp. def. conf. buffer
  84+ 115D 2A 98 81                 ld      HL,(DOSBFR)     ; load first 2 BYTES
  85+ 1160 4E                       ld      C,(HL)          ; load into AC
  86+ 1161 23                       inc     HL
  87+ 1162 7E                       ld      A,(HL)
  88+ 1163 23                       inc     HL
  89+ 1164 5E                       ld      E,(HL)          ; load into DE
  90+ 1165 23                       inc     HL
  91+ 1166 56                       ld      D,(HL)
  92+ 1167 D5                       push    DE              ; move DE into IX
  93+ 1168 DD E1                    pop     IX
  94+ 116A 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  95+ 116D CD 9D 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  96+ 1170 47                       ld      B,A             ; now result is into BCIX
  97+ 1171 B1                       or      C               ; BC=$0000?
  98+ 1172 28 05                    jr      Z,DOS_FTC       ; yes, but.....
  99+ 1174 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 100+ 1177 18 0E                    jr      DOS_FT1         ; jump over
 101+ 1179 DD E5        DOS_FTC:    push    IX              ; move IX into DE
 102+ 117B D1                       pop     DE              ; now result is into BCDE
 103+ 117C 7C                       ld      A,H             ; remainder = zero?
 104+ 117D B5                       or      L
 105+ 117E CA 87 11                 jp      Z,DOS_FT1       ; yes, jump over
 106+ 1181 13                       inc     DE              ; no, increment DE
 107+ 1182 7A                       ld      A,D             ; check if DE is zero
 108+ 1183 B3                       or      E
 109+ 1184 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 110+ 1186 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 111+ 1187 2A B4 81     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 112+ 118A 73                       ld      (HL),E          ; store # of entries
 113+ 118B 23                       inc     HL
 114+ 118C 72                       ld      (HL),D
 115+ 118D 23                       inc     HL
 116+ 118E D5                       push    DE              ; store entries
 117+ 118F EB                       ex      DE,HL           ; copy current pointer into DE
 118+ 1190 21 0F 11                 ld      HL,DSKDIRADR    ; address of directory start
 119+ 1193 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 120+ 1196 ED B0                    ldir                    ; copy into buffer
 121+ 1198                          ; now we calculate the starting sector of data area
 122+ 1198 E1                       pop     HL              ; entries into HL
 123+ 1199 0E 10                    ld      C,$10           ; 16 entries per sector
 124+ 119B CD 79 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 125+ 119E B7                       or      A               ; remainder = 0?
 126+ 119F 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 127+ 11A1 23                       inc     HL              ; increment sectors
 128+ 11A2 E5           DOS_FT2:    push    HL              ; store size of directory
 129+ 11A3 FD E1                    pop     IY              ; into IY
 130+ 11A5 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 131+ 11A6 EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 132+ 11A7 73                       ld      (HL),E          ; store starting of
 133+ 11A8 23                       inc     HL              ; data area
 134+ 11A9 72                       ld      (HL),D          ; into buffer
 135+ 11AA                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 136+ 11AA CD B6 18                 call    CLRIOBF         ; clear I/O buffer
 137+ 11AD 21 00 11                 ld      HL,DFSCT0       ; address of disk header string
 138+ 11B0 ED 5B 9A 81              ld      DE,(IOBUFF)     ; address of I/O buffer
 139+ 11B4 01 0F 00                 ld      BC,$000F        ; 15 chars
 140+ 11B7 ED B0                    ldir                    ; copy header into buffer
 141+ 11B9 2A 98 81                 ld      HL,(DOSBFR)     ; first part of configuration
 142+ 11BC 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 143+ 11BF ED B0                    ldir                    ; copy (DE is auto-incremented)
 144+ 11C1 AF                       xor     A               ; A=$0
 145+ 11C2 12                       ld      (DE),A          ; marker at $1F
 146+ 11C3 13                       inc     DE
 147+ 11C4 CD 86 17                 call    DOS_LDNAM       ; copy disk name into buffer
 148+ 11C7 DA 8B 12                 jp      C,D1ERR         ; disk name error
 149+ 11CA CD B1 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 150+ 11CD 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 151+ 11D0 54                       ld      D,H             ; copy into DE...
 152+ 11D1 5D                       ld      E,L             ; ...for later use
 153+ 11D2 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 154+ 11D5 09                       add     HL,BC           ; ...of the I/O buffer
 155+ 11D6 3E 38                    ld      A,'8'           ; write marker "80"
 156+ 11D8 77                       ld      (HL),A          ; ...
 157+ 11D9 23                       inc     HL              ; ...
 158+ 11DA 3E 30                    ld      A,'0'           ; ...
 159+ 11DC 77                       ld      (HL),A          ; ...into last 2 locations
 160+ 11DD EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 161+ 11DE AF                       xor     A               ; reset A - set sector # to $00000000
 162+ 11DF 47                       ld      B,A             ; LBA0=0
 163+ 11E0 4F                       ld      C,A             ; LBA1=0
 164+ 11E1 57                       ld      D,A             ; LBA2=0
 165+ 11E2 5F                       ld      E,A             ; LBA3=0
 166+ 11E3 CD 6F 10                 call    CF_SETSTR       ; set sector
 167+ 11E6 CD D9 10                 call    CF_WR_SEC       ; write sector to CF
 168+ 11E9                          ; check if only re-writing of Master Sector was need
 169+ 11E9 3A 05 82                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 170+ 11EC 3D                       dec     A               ; A=1?
 171+ 11ED C8                       ret     Z               ; yes, finished job
 172+ 11EE                          ; erase directory -----------------------------
 173+ 11EE                          ; create a progress bar
 174+ 11EE 3E 0D                    ld      A,CR
 175+ 11F0 CD 9A 23                 call    OUTC
 176+ 11F3 FD E5                    push    IY              ; copy directory's size
 177+ 11F5 E1                       pop     HL              ; into HL
 178+ 11F6 01 18 00                 ld      BC,$0018        ; 24 steps
 179+ 11F9 CD 79 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 180+ 11FC E5                       push    HL              ; store result
 181+ 11FD DD E1                    pop     IX              ; into IX
 182+ 11FF EB                       ex      DE,HL           ; and into DE
 183+ 1200 3E 2D                    ld      A,'-'           ; print a progress bar
 184+ 1202 CD 3A 12                 call    DOS_FT7         ; print it
 185+ 1205 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 186+ 1207 CD 3A 12                 call    DOS_FT7         ; come back to beginning of line
 187+ 120A FD E5                    push    IY              ; copy directory's size
 188+ 120C E1                       pop     HL              ; into HL
 189+ 120D 01 01 00                 ld      BC,$0001        ; first sector of directory
 190+ 1210 CD B6 18                 call    CLRIOBF         ; clear I/O buffer
 191+ 1213 D5           DOS_FTA:    push    DE              ; store counter
 192+ 1214 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 193+ 1217 CD 6F 10                 call    CF_SETSTR       ; set sector to write
 194+ 121A CD D9 10                 call    CF_WR_SEC       ; write sector to CF
 195+ 121D 03                       inc     BC              ; next sector
 196+ 121E 2B                       dec     HL              ; decrement HL
 197+ 121F D1                       pop     DE              ; retrieve counter
 198+ 1220 1B                       dec     DE              ; decrement counter
 199+ 1221 7B                       ld      A,E
 200+ 1222 B2                       or      D               ; check if counter is zero
 201+ 1223 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 202+ 1225 3E 2A                    ld      A,'*'           ; yes, print char
 203+ 1227 CD 9A 23                 call    OUTC
 204+ 122A DD E5                    push    IX              ; re-set counter
 205+ 122C D1                       pop     DE
 206+ 122D 7C           DOS_FT9:    ld      A,H             ; check if...
 207+ 122E B5                       or      L               ; ...HL = 0
 208+ 122F 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 209+ 1231 3E 0D                    ld      A,CR            ; return
 210+ 1233 CD 9A 23                 call    OUTC            ; next line
 211+ 1236 CD A5 10                 call    CF_STANDBY      ; set CF into stand-by mode
 212+ 1239 C9                       ret
 213+ 123A
 214+ 123A              ; print 24 chars
 215+ 123A 06 18        DOS_FT7:    ld      B,$18           ; 24 chars
 216+ 123C CD 9A 23     DOS_FT8:    call    OUTC            ; move cursor
 217+ 123F 10 FB                    djnz    DOS_FT8         ; repeat
 218+ 1241 C9                       ret                     ; return to caller
 219+ 1242
 220+ 1242
 221+ 1242
 222+ 1242              ; *****************************************************************************
 223+ 1242              ; D I S K    R E N A M E
 224+ 1242              ;******************************************************************************
 225+ 1242 CD B6 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 226+ 1245 CD CB 18                 call    CLRDOSBF        ; clear DOS buf
 227+ 1248 11 00 00                 ld      DE,$0000        ; MSB sector
 228+ 124B 42                       ld      B,D             ; LSB sector
 229+ 124C 4A                       ld      C,D
 230+ 124D CD 6F 10                 call    CF_SETSTR       ; set sector
 231+ 1250 CD B1 10                 call    CF_RD_SEC       ; read sector
 232+ 1253 2A 9A 81                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 233+ 1256 01 20 00                 ld      BC,$0020        ; offset for disk name
 234+ 1259 09                       add     HL,BC           ; get pointer
 235+ 125A EB                       ex      DE,HL           ; copy pointer into DE
 236+ 125B CD 86 17                 call    DOS_LDNAM       ; copy disk name into buffer
 237+ 125E DA 8B 12                 jp      C,D1ERR         ; disk name error
 238+ 1261 11 00 00                 ld      DE,$0000        ; MSB sector
 239+ 1264 42                       ld      B,D             ; LSB sector
 240+ 1265 4A                       ld      C,D
 241+ 1266 CD 6F 10                 call    CF_SETSTR       ; set sector
 242+ 1269 CD D9 10                 call    CF_WR_SEC       ; write sector
 243+ 126C AF                       xor     A               ; clear Carry
 244+ 126D C9                       ret                     ; return to caller
 245+ 126E
 246+ 126E
 247+ 126E              ; *****************************************************************************
 248+ 126E              ; DOS ERRORS
 249+ 126E              ; *****************************************************************************
 250+ 126E              ; disk geometry error
 251+ 126E 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 252+ 1270 18 1B                    jr      RET_ERR         ; return with error
 253+ 1272              ; disk full error
 254+ 1272 3E 42        DSKFULL:    ld      A,D5            ; set error
 255+ 1274 18 17                    jr      RET_ERR         ; return with error
 256+ 1276              ; duplicate file name
 257+ 1276 3E 44        DUPLERR:    ld      A,D6
 258+ 1278 18 13                    jr      RET_ERR         ; return with error
 259+ 127A              ; file name error
 260+ 127A 3E 3A        NAMERR:     ld      A,D1
 261+ 127C 18 0F                    jr      RET_ERR         ; return with error
 262+ 127E              ; file not found
 263+ 127E 3E 48        FLNTFND:    ld      A,D8
 264+ 1280 18 0B                    jr      RET_ERR         ; return with error
 265+ 1282              ; generic load error
 266+ 1282 3E 40        LODERR:     ld      A,D4
 267+ 1284 18 07                    jr      RET_ERR         ; return with error
 268+ 1286              ; DOS version error
 269+ 1286 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 270+ 1288 C3 8D 12                 jp      RET_ERR         ; return with error
 271+ 128B              ; name string error
 272+ 128B 3E 3A        D1ERR:      ld      A,D1            ; name string error
 273+ 128D              ; store error and return
 274+ 128D 32 9C 81     RET_ERR:    ld      (DOSER),A       ; store DOS error
 275+ 1290 CD A5 10                 call    CF_STANDBY      ; set CF into stand-by
 276+ 1293 37                       scf                     ; set Carry for error
 277+ 1294 C9                       ret                     ; return to caller
 278+ 1295
 279+ 1295              ; *****************************************************************************
 280+ 1295              ; L I S T    F I L E S
 281+ 1295              ; Function: print details of disk and list files
 282+ 1295              ; Input: D: $00=only disk details; $01=file list, too
 283+ 1295              ; *****************************************************************************
 284+ 1295 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 284+ 1299 20 6E 61 6D
 284+ 129D 65 3A 20 00
 285+ 12A1 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 285+ 12A5 74 6F 72 73
 285+ 12A9 3A 20 00
 286+ 12AC 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 286+ 12B0 6F 77 65 64
 286+ 12B4 20 66 69 6C
 286+ 12B8 65 73 3A 20
 286+ 12BC 00
 287+ 12BD 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 287+ 12C1 65 28 73 29
 287+ 12C5 0D 00
 288+ 12C7 CD E8 17     LST_FILES:  call    CHKDSKVAL       ; check DOS version
 289+ 12CA DA 86 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 290+ 12CD D5                       push    DE              ; store D
 291+ 12CE 01 00 00                 ld      BC,$0000        ; point to sector #0
 292+ 12D1 11 00 00                 ld      DE,$0000
 293+ 12D4 CD 6F 10                 call    CF_SETSTR       ; set sector
 294+ 12D7 CD B1 10                 call    CF_RD_SEC       ; read sector
 295+ 12DA 21 95 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 296+ 12DD CD 71 2F                 call    PRS             ; print it
 297+ 12E0 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 298+ 12E3 11 20 00                 ld      DE,$0020        ; position of disk name
 299+ 12E6 19                       add     HL,DE           ; get address
 300+ 12E7 06 10                    ld      B,$10           ; 16 chars
 301+ 12E9 7E           INPR1:      ld      A,(HL)          ; load char
 302+ 12EA CD 9A 23                 call    OUTC            ; print it
 303+ 12ED 23                       inc     HL
 304+ 12EE 10 F9                    djnz    INPR1           ; repeat
 305+ 12F0 3E 0D                    ld      A,CR
 306+ 12F2 CD 9A 23                 call    OUTC            ; carriage return
 307+ 12F5 D1                       pop     DE              ; retrieve D
 308+ 12F6 DD 21 00 00              ld      IX,$0000        ; reset file counter
 309+ 12FA 7A                       ld      A,D
 310+ 12FB B7                       or      A               ; is D=0?
 311+ 12FC CA BB 13                 jp      Z,PNTSTATS      ; yes, jump over
 312+ 12FF                          ; print list of files
 313+ 12FF 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 314+ 1302 11 0F 00                 ld      DE,$000F        ; point to details of disk
 315+ 1305 19                       add     HL,DE           ; find address
 316+ 1306 ED 5B 98 81              ld      DE,(DOSBFR)     ; store into DOS buffer
 317+ 130A 01 20 00                 ld      BC,$0020        ; 32 bytes
 318+ 130D ED B0                    ldir                    ; copy
 319+ 130F 11 00 00                 ld      DE,$0000        ; beginning...
 320+ 1312 01 01 00                 ld      BC,$0001        ; ...of directory
 321+ 1315 CD 6F 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 322+ 1318 CD B1 10                 call    CF_RD_SEC       ; read sector
 323+ 131B 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 324+ 131D FD 2A 9A 81              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 325+ 1321 FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 326+ 1324 B7                       or      A               ; is it an empty entry ($00)?
 327+ 1325 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 328+ 1327 FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 329+ 1329 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 330+ 132B C5                       push    BC              ; this is a valid entry - so, store BC
 331+ 132C FD E5                    push    IY              ; store IY
 332+ 132E E5                       push    HL              ; store HL
 333+ 132F D5                       push    DE              ; store DE
 334+ 1330 DD E5                    push    IX              ; store IX
 335+ 1332 06 10                    ld      B,$10           ; 16 chars to read and print
 336+ 1334 FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 337+ 1337 CD 9A 23                 call    OUTC            ; print char
 338+ 133A FD 23                    inc     IY              ; next char
 339+ 133C 10 F6                    djnz    LSTFILES3       ; repeat
 340+ 133E 3E 20                    ld      A,SPC
 341+ 1340 CD 9A 23                 call    OUTC            ; print space
 342+ 1343 FD 7E 00                 ld      A,(IY)          ; file type
 343+ 1346 D6 80                    sub     $80             ; types start from $80
 344+ 1348 B7                       or      A               ; BAS type ($00)?
 345+ 1349 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 346+ 134B 21 FF 13                 ld      HL,FILETP       ; print "BAS"
 347+ 134E 18 0B                    jr      LSTFILESPR
 348+ 1350 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 349+ 1351 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 350+ 1353 21 04 14                 ld      HL,FILETP+5     ; print "BIN "
 351+ 1356 18 03                    jr      LSTFILESPR
 352+ 1358 21 09 14     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 353+ 135B CD 71 2F     LSTFILESPR: call    PRS
 354+ 135E 11 00 00                 ld      DE,$0000        ; MSB = $0000
 355+ 1361 01 08 00                 ld      BC,$0008
 356+ 1364 FD 09                    add     IY,BC           ; point to file size in bytes
 357+ 1366 FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 358+ 1369 FD 23                    inc     IY
 359+ 136B FD 46 00                 ld      B,(IY)          ; then MSB
 360+ 136E C5                       push    BC              ; copy...
 361+ 136F DD E1                    pop     IX              ; ...into IX
 362+ 1371 CD 5C 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 363+ 1374 3E 0D                    ld      A,CR
 364+ 1376 CD 9A 23                 call    OUTC            ; print carriage return
 365+ 1379 DD E1        LSTFILES8:  pop     IX
 366+ 137B D1                       pop     DE
 367+ 137C E1                       pop     HL
 368+ 137D FD E1                    pop     IY              ; retrieve IY
 369+ 137F C1                       pop     BC              ; retrieve BC
 370+ 1380 DD 23                    inc     IX              ; increment file counter
 371+ 1382 CD 03 26     LSTFILES6:  call    TSTBRK          ; Test for break key
 372+ 1385 CD 06 25                 call    TSTSPC          ; test for space
 373+ 1388 C5                       push    BC              ; store sector counter
 374+ 1389 01 20 00                 ld      BC,$0020        ; dir entry size
 375+ 138C FD 09                    add     IY,BC           ; next entry in current sector
 376+ 138E C1                       pop     BC              ; retrieve sector counter
 377+ 138F 2D                       dec     L               ; decrement entry counter
 378+ 1390 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 379+ 1392 03           LSTFILES5:  inc     BC              ; increment sector counter
 380+ 1393 78                       ld      A,B             ; check if BC=$0000
 381+ 1394 B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 382+ 1395 28 14                    jr      Z,LSTFILES7     ; yes, exit
 383+ 1397 D5                       push    DE              ; store MSB of sector pointer
 384+ 1398 2A 98 81                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 385+ 139B 11 0E 00                 ld      DE,$000E        ; point to data area
 386+ 139E 19                       add     HL,DE           ; find address in memory
 387+ 139F 5E                       ld      E,(HL)          ; load data area sector...
 388+ 13A0 23                       inc     HL
 389+ 13A1 56                       ld      D,(HL)          ; ...into DE
 390+ 13A2 60                       ld      H,B             ; copy current sector
 391+ 13A3 69                       ld      L,C             ; into HL
 392+ 13A4 CD 1E 4D                 call    CMP16           ; is current sector < data area sector?
 393+ 13A7 D1                       pop     DE              ; retrieve MSB of sector pointer
 394+ 13A8 DA 15 13                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 395+ 13AB 11 00 00     LSTFILES7:  ld      DE,$0000
 396+ 13AE DD E5                    push    IX
 397+ 13B0 CD 5C 18                 call    PRN16ASCIX      ; print number of files from DEIX
 398+ 13B3 21 BD 12                 ld      HL,TLFLSTX
 399+ 13B6 CD 71 2F                 call    PRS             ; print "file(s)"
 400+ 13B9 DD E1                    pop     IX
 401+ 13BB 21 A1 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 402+ 13BE CD 71 2F                 call    PRS             ; print message
 403+ 13C1 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 404+ 13C4 DD E5                    push    IX              ; store number of entries
 405+ 13C6 CD 52 18                 call    PRN32ASCII      ; print size
 406+ 13C9 3E 2F                    ld      A,'/'
 407+ 13CB CD 9A 23                 call    OUTC            ; print a /
 408+ 13CE D1                       pop     DE              ; copy number of entries into DE
 409+ 13CF 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 410+ 13D2 CD 43 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 411+ 13D5 ED 53 AE 81              ld      (TPBF1),DE
 412+ 13D9 22 B0 81                 ld      (TPBF2),HL
 413+ 13DC 21 AE 81                 ld      HL,TPBF1
 414+ 13DF CD 52 18                 call    PRN32ASCII
 415+ 13E2 21 AC 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 416+ 13E5 CD 71 2F                 call    PRS             ; print message
 417+ 13E8 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 418+ 13EB 01 0A 00                 ld      BC,$000A        ; address of allowed files
 419+ 13EE 09                       add     HL,BC           ; find pointer
 420+ 13EF 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 421+ 13F2 CD 56 18                 call    PRN16ASCII      ; print max files
 422+ 13F5 3E 0D                    ld      A,CR
 423+ 13F7 CD 9A 23                 call    OUTC            ; print a carriage return
 424+ 13FA CD A5 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 425+ 13FD AF                       xor     A               ; clear Carry flag
 426+ 13FE C9                       ret                     ; return to caller
 427+ 13FF 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 427+ 1403 00
 428+ 1404 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 428+ 1408 00
 429+ 1409 3F 3F 3F 20              defb    "??? ",0        ; unkown
 429+ 140D 00
 430+ 140E
 431+ 140E
 432+ 140E
 433+ 140E              ; *****************************************************************************
 434+ 140E              ; S A V E    F I L E
 435+ 140E              ; save current BASIC program onto a file
 436+ 140E              ; *****************************************************************************
 437+ 140E CD B6 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 438+ 1411 CD E8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 439+ 1414 DA 86 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 440+ 1417 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 441+ 141A 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 442+ 141D 09                       add     HL,BC           ; get address
 443+ 141E CD 4D 18                 call    HL2DE           ; get entries into DE
 444+ 1421 ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 445+ 1425 CD 4D 18                 call    HL2DE           ; get start of directory into DE
 446+ 1428 ED 53 9D 81              ld      (DIR_STRT),DE   ; store
 447+ 142C CD 4D 18                 call    HL2DE           ; get start of data area into DE
 448+ 142F ED 53 9F 81              ld      (DAT_STRT),DE   ; store
 449+ 1433 CD B6 18                 call    CLRIOBF         ; clear IO buffer
 450+ 1436 CD CB 18                 call    CLRDOSBF        ; clear DOS buffer
 451+ 1439 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 452+ 143D CD 20 18                 call    CHKNMVAL        ; check and copy file name
 453+ 1440 DA 7A 12                 jp      C,NAMERR        ; if Carry, file name error
 454+ 1443 CD BC 16                 call    FILE_EXIST      ; check for name already present in dir
 455+ 1446 DA 76 12                 jp      C,DUPLERR       ; name is present - error
 456+ 1449 CD 28 17                 call    FNDFREDIR       ; find a free entry in the directory
 457+ 144C DA 72 12                 jp      C,DSKFULL       ; no entry, disk full error
 458+ 144F 3A B4 81                 ld      A,(TPBF4)       ; check what to save
 459+ 1452 FE 80                    cp      $80             ; BASIC program?
 460+ 1454 C2 63 14                 jp      NZ,SAVFL3       ; no, jump over
 461+ 1457                          ; BASIC area to save starts at PROGST and ends at (PROGND)
 462+ 1457 2A 4B 82                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 463+ 145A 11 4B 82                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 464+ 145D ED 53 B6 81              ld      (SRTMEM),DE     ; copy DE
 465+ 1461 18 08                    jr      SAVFL1
 466+ 1463 2A B8 81     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 467+ 1466 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 468+ 1467 ED 5B B6 81              ld      DE,(SRTMEM)     ; DE <= start of portion
 469+ 146B                          ; compute how many sectors/blocks are needed to save file
 470+ 146B AF           SAVFL1:     xor     A               ; reset Carry
 471+ 146C ED 52                    sbc     HL,DE           ; get how many bytes to save
 472+ 146E 22 A5 81                 ld      (BYT_SIZ),HL    ; store into memory
 473+ 1471 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 474+ 1474 7C                       ld      A,H             ; move lenght...
 475+ 1475 4D                       ld      C,L             ; ...into AC
 476+ 1476 CD 88 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 477+ 1479 7C                       ld      A,H             ; check if...
 478+ 147A B5                       or      L               ; ...remainder (HL) is 0
 479+ 147B 28 01                    jr      Z,SAVFL6        ; yes, jump over
 480+ 147D 03                       inc     BC              ; no, so we need another sector
 481+ 147E 79           SAVFL6:     ld      A,C
 482+ 147F 32 A7 81                 ld      (SCT_SIZ),A     ; store into memory
 483+ 1482              SAVFL7:     ; start saving on disk
 484+ 1482 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 485+ 1485 ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 486+ 1489 CD 6F 10                 call    CF_SETSTR       ; set sector to read
 487+ 148C CD B1 10                 call    CF_RD_SEC       ; read sector
 488+ 148F ED 5B A3 81              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 489+ 1493 7B                       ld      A,E             ; load entry LSB into A
 490+ 1494 E6 0F                    and     %00001111       ; be sure to get only low nibble
 491+ 1496 87                       add     A,A             ; multiply times 32
 492+ 1497 87                       add     A,A
 493+ 1498 87                       add     A,A
 494+ 1499 87                       add     A,A
 495+ 149A 87                       add     A,A
 496+ 149B 4F                       ld      C,A             ; copy into C
 497+ 149C 06 00                    ld      B,$00           ; reset B
 498+ 149E                          ; set name
 499+ 149E 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 500+ 14A1 09                       add     HL,BC           ; add offset to get address of entry
 501+ 14A2 ED 5B 98 81              ld      DE,(DOSBFR)     ; pointer to file name
 502+ 14A6 01 10 00                 ld      BC,$0010        ; 16 chars
 503+ 14A9 EB                       ex      DE,HL           ; move source into HL and destination into DE
 504+ 14AA ED B0                    ldir                    ; copy file name
 505+ 14AC EB                       ex      DE,HL           ; move current buffer pointer into HL
 506+ 14AD 3A B4 81                 ld      A,(TPBF4)       ; load the type of file
 507+ 14B0 77                       ld      (HL),A          ; store it
 508+ 14B1 23                       inc     HL
 509+ 14B2 AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 510+ 14B3 77                       ld      (HL),A
 511+ 14B4 23                       inc     HL
 512+ 14B5 ED 5B A3 81              ld      DE,(NTR_NBR)    ; reload entry number
 513+ 14B9 CD 48 18                 call    DE2HL           ; store entry into buffer
 514+ 14BC E5                       push    HL              ; store pointer
 515+ 14BD 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 516+ 14C0 CD 43 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 517+ 14C3 ED 4B 9F 81              ld      BC,(DAT_STRT)   ; load start of data
 518+ 14C7 09                       add     HL,BC           ; add sector of data area
 519+ 14C8 30 01                    jr      NC,SAVFL9       ; overflow?
 520+ 14CA 13                       inc     DE              ; yes, increment DE
 521+ 14CB ED 53 A8 81  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 522+ 14CF 22 AA 81                 ld      (LSB_SCT),HL    ; store LSB of sector
 523+ 14D2 E1                       pop     HL              ; retrieve pointer
 524+ 14D3 CD 48 18                 call    DE2HL           ; also copy MSB of sector into entry
 525+ 14D6 ED 5B AA 81              ld      DE,(LSB_SCT)    ; retrieve LSB
 526+ 14DA CD 48 18                 call    DE2HL           ; also copy LSB of sector into entry
 527+ 14DD ED 5B A5 81              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 528+ 14E1 CD 48 18                 call    DE2HL           ; copy file size into buffer
 529+ 14E4 3A A7 81                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 530+ 14E7 77                       ld      (HL),A          ; copy into buffer
 531+ 14E8 23                       inc     HL              ; next location
 532+ 14E9 ED 5B B6 81              ld      DE,(SRTMEM)     ; start of address of file in RAM
 533+ 14ED CD 48 18                 call    DE2HL           ; copy into buffer
 534+ 14F0 06 03                    ld      B,$03           ; remaining chars...
 535+ 14F2 AF                       xor     A               ; ...set to $00
 536+ 14F3 77           SAVFL2:     ld      (HL),A          ; reset byte
 537+ 14F4 23                       inc     HL              ; next cell
 538+ 14F5 10 FC                    djnz    SAVFL2          ; repeat
 539+ 14F7                          ; save entry into directory
 540+ 14F7 11 00 00                 ld      DE,$0000        ; block 0
 541+ 14FA ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 542+ 14FE CD 6F 10                 call    CF_SETSTR       ; set sector to write
 543+ 1501 CD D9 10                 call    CF_WR_SEC       ; write new entry into directory
 544+ 1504 CD B6 18                 call    CLRIOBF         ; clear I/O buffer
 545+ 1507                          ; start saving RAM
 546+ 1507 ED 5B B6 81              ld      DE,(SRTMEM)     ; load start of RAM
 547+ 150B ED 53 AC 81              ld      (RAM_PTR),DE    ; store
 548+ 150F CD B6 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 549+ 1512 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 550+ 1515 11 00 02                 ld      DE,$0200        ; are they < 512?
 551+ 1518 CD 1E 4D                 call    CMP16
 552+ 151B 30 04                    jr      NC,SAVFL4       ; no, jump over
 553+ 151D ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 554+ 1521 4B           SAVFL4:     ld      C,E             ; bytes to copy
 555+ 1522 42                       ld      B,D             ; into BC
 556+ 1523 2A AC 81                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 557+ 1526 ED 5B 9A 81              ld      DE,(IOBUFF)     ; load start of I/O buffer
 558+ 152A ED B0                    ldir                    ; copy data
 559+ 152C ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 560+ 1530 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 561+ 1534 CD 6F 10                 call    CF_SETSTR       ; set sector
 562+ 1537 CD D9 10                 call    CF_WR_SEC       ; write sector
 563+ 153A 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 564+ 153D 35                       dec     (HL)            ; copied all the sectors?
 565+ 153E CA 6D 15                 jp      Z,SAVFLEXT      ; yes, exit
 566+ 1541 2A AC 81     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 567+ 1544 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 568+ 1547 19                       add     HL,DE           ; calculate next starting address
 569+ 1548 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 570+ 154B AF                       xor     A               ; reset Carry
 571+ 154C 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 572+ 154F ED 52                    sbc     HL,DE           ; subtract copied bytes
 573+ 1551 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 574+ 1554 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 575+ 1558 03                       inc     BC              ; next sector
 576+ 1559 78                       ld      A,B             ; BC=$0000?
 577+ 155A B1                       or      C
 578+ 155B 20 09                    jr      NZ,SAVFL12      ; no, jump over
 579+ 155D ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 580+ 1561 13                       inc     DE              ; increment DE
 581+ 1562 ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 582+ 1566 ED 43 AA 81  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 583+ 156A C3 0F 15                 jp      SAVFL10         ; repeat
 584+ 156D CD A5 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 585+ 1570 AF                       xor     A               ; clear Carry flag
 586+ 1571 C9                       ret                     ; return to caller
 587+ 1572
 588+ 1572
 589+ 1572              ; *****************************************************************************
 590+ 1572              ; F I L E    L O A D
 591+ 1572              ; load a file from the disk into the memory
 592+ 1572              ; *****************************************************************************
 593+ 1572 CD B6 18     LODFILE:    call    CLRIOBF         ; clear I/O
 594+ 1575 CD E8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 595+ 1578 DA 86 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 596+ 157B 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 597+ 157E 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 598+ 1581 09                       add     HL,BC           ; get address
 599+ 1582 CD 4D 18                 call    HL2DE           ; get entries into DE
 600+ 1585 ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 601+ 1589 CD B6 18                 call    CLRIOBF         ; clear IO buffer
 602+ 158C CD CB 18                 call    CLRDOSBF        ; clear DOS buffer
 603+ 158F ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 604+ 1593 CD 20 18                 call    CHKNMVAL        ; check and copy file name
 605+ 1596 DA 7A 12                 jp      C,NAMERR        ; if Carry, file name error
 606+ 1599 CD BC 16                 call    FILE_EXIST      ; check if file exists
 607+ 159C D2 7E 12                 jp      NC,FLNTFND      ; file not found - error
 608+ 159F DD E5                    push    IX              ; copy pointer to file...
 609+ 15A1 E1                       pop     HL              ; ...into HL
 610+ 15A2 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 611+ 15A5 09                       add     HL,BC           ; ...by getting pointer to file details
 612+ 15A6 7E                       ld      A,(HL)          ; load file type
 613+ 15A7 FE 80                    cp      $80             ; 'BAS' type?
 614+ 15A9 28 0C                    jr      Z,LDFL4         ; yes, jump over
 615+ 15AB FE 81                    cp      $81             ; 'BIN' type?
 616+ 15AD C2 82 12                 jp      NZ,LODERR       ; no, raise error
 617+ 15B0 3A B4 81                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 618+ 15B3 B7                       or      A               ; did the user set this?
 619+ 15B4 CA 82 12                 jp      Z,LODERR        ; no, raise an error
 620+ 15B7 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 621+ 15B9 09                       add     HL,BC           ; point to starting sector
 622+ 15BA 11 A8 81                 ld      DE,MSB_SCT      ; point to store sector address of file
 623+ 15BD ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 624+ 15BF 11 A5 81                 ld      DE,BYT_SIZ      ; point to store size of file
 625+ 15C2 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 626+ 15C5 ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 627+ 15C7 11 4B 82                 ld      DE,PROGND       ; load start of BASIC RAM
 628+ 15CA 3A B4 81                 ld      A,(TPBF4)       ; check where to save the data from
 629+ 15CD B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 630+ 15CE 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 631+ 15D0 5E                       ld      E,(HL)          ; no, load RAM address from disk - LSB...
 632+ 15D1 23                       inc     HL
 633+ 15D2 56                       ld      D,(HL)          ; ...then MSB
 634+ 15D3 ED 53 AC 81  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 635+ 15D7                          ;----------------------------------------------
 636+ 15D7                          ; start loading from disk
 637+ 15D7 CD B6 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 638+ 15DA ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 639+ 15DE ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 640+ 15E2 CD 6F 10                 call    CF_SETSTR       ; set sector
 641+ 15E5 CD B1 10                 call    CF_RD_SEC       ; read sector
 642+ 15E8 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 643+ 15EB 11 00 02                 ld      DE,$0200        ; are they < 512?
 644+ 15EE CD 1E 4D                 call    CMP16
 645+ 15F1 30 04                    jr      NC,LDFL3        ; no, jump over
 646+ 15F3 ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 647+ 15F7 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 648+ 15F8 42                       ld      B,D             ; ...into BC
 649+ 15F9 2A 9A 81                 ld      HL,(IOBUFF)     ; point to I/O buffer
 650+ 15FC ED 5B AC 81              ld      DE,(RAM_PTR)    ; point to RAM where to save
 651+ 1600 ED B0                    ldir                    ; copy data
 652+ 1602 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 653+ 1605 35                       dec     (HL)            ; copied all the sectors?
 654+ 1606 CA 35 16                 jp      Z,LDFLEX        ; yes, exit
 655+ 1609 2A AC 81                 ld      HL,(RAM_PTR)    ; pointer to RAM
 656+ 160C 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 657+ 160F 19                       add     HL,DE           ; calculate next starting address
 658+ 1610 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 659+ 1613 AF                       xor     A               ; reset Carry
 660+ 1614 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 661+ 1617 ED 52                    sbc     HL,DE           ; subtract copied bytes
 662+ 1619 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 663+ 161C ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 664+ 1620 03                       inc     BC              ; next sector
 665+ 1621 78                       ld      A,B             ; BC=$0000?
 666+ 1622 B1                       or      C
 667+ 1623 20 09                    jr      NZ,LDFL5        ; no, jump over
 668+ 1625 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 669+ 1629 13                       inc     DE              ; increment DE
 670+ 162A ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 671+ 162E ED 43 AA 81  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 672+ 1632 C3 D7 15                 jp      LDFL2           ; repeat
 673+ 1635 CD A5 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 674+ 1638 AF                       xor     A               ; clear Carry flag
 675+ 1639 C9                       ret                     ; return to caller
 676+ 163A
 677+ 163A
 678+ 163A              ; *****************************************************************************
 679+ 163A              ; F I L E    E R A S E
 680+ 163A              ; erase a file from disk, freeing its block
 681+ 163A              ; *****************************************************************************
 682+ 163A CD B6 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 683+ 163D CD E8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 684+ 1640 DA 86 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 685+ 1643 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 686+ 1646 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 687+ 1649 09                       add     HL,BC           ; get address
 688+ 164A CD 4D 18                 call    HL2DE           ; get entries into DE
 689+ 164D ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 690+ 1651 CD B6 18                 call    CLRIOBF         ; clear IO buffer
 691+ 1654 CD CB 18                 call    CLRDOSBF        ; clear DOS buffer
 692+ 1657 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 693+ 165B CD 20 18                 call    CHKNMVAL        ; check and copy file name
 694+ 165E DA 7A 12                 jp      C,NAMERR        ; if Carry, file name error
 695+ 1661 CD BC 16                 call    FILE_EXIST      ; check if file exists
 696+ 1664 D2 7E 12                 jp      NC,FLNTFND      ; file not found - error
 697+ 1667 3E 7F                    ld      A,$7F           ; marker for file deleted
 698+ 1669 DD 77 00                 ld      (IX),A          ; set file as deleted
 699+ 166C DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 700+ 166F DD 56 15                 ld      D,(IX+$15)
 701+ 1672 DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 702+ 1675 DD 46 17                 ld      B,(IX+$17)
 703+ 1678 ED 53 A8 81              ld      (MSB_SCT),DE    ; store DE
 704+ 167C ED 43 AA 81              ld      (LSB_SCT),BC    ; store BC
 705+ 1680 DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 706+ 1683 32 A7 81                 ld      (SCT_SIZ),A     ; store it
 707+ 1686 ED 5B B0 81              ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 708+ 168A ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 709+ 168E CD 6F 10                 call    CF_SETSTR       ; set sector
 710+ 1691 CD D9 10                 call    CF_WR_SEC       ; write sector
 711+ 1694 CD B6 18                 call    CLRIOBF         ; clear I/O buffer
 712+ 1697 3A B4 81                 ld      A,(TPBF4)       ; check for quick or full delete
 713+ 169A B7                       or      A               ; if A=0 then quick erase
 714+ 169B 28 1A                    jr      Z,FIL_ERA3      ; yes, leave
 715+ 169D ED 5B A8 81              ld      DE,(MSB_SCT)    ; no, full delete - load MSB of 1st sector of file block
 716+ 16A1 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 717+ 16A5 21 A7 81                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 718+ 16A8 CD 6F 10     FIL_ERA1:   call    CF_SETSTR       ; set sector
 719+ 16AB CD D9 10                 call    CF_WR_SEC       ; erase sector
 720+ 16AE 03                       inc     BC              ; next sector
 721+ 16AF 78                       ld      A,B             ; is LSB rolled back to 0?
 722+ 16B0 B1                       or      C
 723+ 16B1 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 724+ 16B3 13                       inc     DE              ; yes, increment MSB
 725+ 16B4 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 726+ 16B5 20 F1                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 727+ 16B7 CD A5 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 728+ 16BA AF                       xor     A               ; clear Carry
 729+ 16BB C9                       ret
 730+ 16BC
 731+ 16BC
 732+ 16BC              ; *****************************************************************************
 733+ 16BC              ; F I L E    C H E C K
 734+ 16BC              ; check if file name already exists in directory
 735+ 16BC              ; file name must be stored from (DOSBFR) for 16 chars
 736+ 16BC              ; *****************************************************************************
 737+ 16BC 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 738+ 16BF 01 01 00                 ld      BC,$0001        ; ...of directory
 739+ 16C2 FD 2A A3 81              ld      IY,(NTR_NBR)    ; load max entries
 740+ 16C6 CD 6F 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 741+ 16C9 CD B1 10                 call    CF_RD_SEC       ; read sector
 742+ 16CC DD 2A 9A 81  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 743+ 16D0 2E 10                    ld      L,$10           ; reset entry counter
 744+ 16D2 DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 745+ 16D5 B7                       or      A               ; is it $00 (empty entry)?
 746+ 16D6 CA 06 17                 jp      Z,CHKSTNM10     ; yes, jump over
 747+ 16D9 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 748+ 16DB 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 749+ 16DD 22 AE 81                 ld      (TPBF1),HL      ; store HL
 750+ 16E0 ED 53 B0 81              ld      (TPBF2),DE      ; store DE
 751+ 16E4 ED 43 B2 81              ld      (TPBF3),BC      ; store BC
 752+ 16E8 DD E5                    push    IX              ; copy IX...
 753+ 16EA E1                       pop     HL              ; ...into HL
 754+ 16EB ED 5B 98 81              ld      DE,(DOSBFR)     ; beginning of name file
 755+ 16EF 06 10                    ld      B,$10           ; 16 chars to check
 756+ 16F1 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 757+ 16F2 ED A1                    cpi                     ; compare with name from user
 758+ 16F4 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 759+ 16F6 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 760+ 16F7 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 761+ 16F9 18 2B                    jr      FLEXST          ; file exists in dir
 762+ 16FB 2A AE 81     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 763+ 16FE ED 5B B0 81              ld      DE,(TPBF2)      ; retrieve DE
 764+ 1702 ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve sector counter
 765+ 1706 FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 766+ 1708 E5                       push    HL              ; preserve current entry
 767+ 1709 FD E5                    push    IY              ; copy max allowed files...
 768+ 170B E1                       pop     HL              ; ...into HL
 769+ 170C 7C                       ld      A,H             ; chech if entries...
 770+ 170D B5                       or      L               ; ...are finished
 771+ 170E E1                       pop     HL              ; (retrieve current entry)
 772+ 170F 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 773+ 1711 C5                       push    BC              ; store bc
 774+ 1712 01 20 00                 ld      BC,$0020        ; dir entry size
 775+ 1715 DD 09                    add     IX,BC           ; next entry in current sector
 776+ 1717 C1                       pop     BC              ; retrieve BC
 777+ 1718 2D                       dec     L               ; decrement entry counter
 778+ 1719 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 779+ 171B 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 780+ 171C 79                       ld      A,C             ; check if...
 781+ 171D B0                       or      B               ; BC=$0000?
 782+ 171E 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 783+ 1720 13                       inc     DE              ; yes, increment DE (MSB)
 784+ 1721 C3 C6 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 785+ 1724 AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 786+ 1725 C9                       ret                     ; return
 787+ 1726                          ; set Carry flag and return with error
 788+ 1726 37           FLEXST:     scf                     ; file is present
 789+ 1727 C9                       ret
 790+ 1728
 791+ 1728
 792+ 1728              ; *****************************************************************************
 793+ 1728              ; FIND A FREE ENTRY
 794+ 1728              ; find a free entry in the directory to store a new file
 795+ 1728              ; *****************************************************************************
 796+ 1728 01 00 00     FNDFREDIR:  ld      BC,$0000        ; point to sector #0
 797+ 172B 11 00 00                 ld      DE,$0000
 798+ 172E CD 6F 10                 call    CF_SETSTR       ; set sector
 799+ 1731 CD B1 10                 call    CF_RD_SEC       ; read sector
 800+ 1734 2A 9A 81                 ld      HL,(IOBUFF)     ; address of I/O buffer
 801+ 1737 11 19 00                 ld      DE,$0019        ; pointer to number of allowed files (same of allowed blocks)
 802+ 173A 19                       add     HL,DE           ; find address
 803+ 173B 5E                       ld      E,(HL)          ; load max entries into DE
 804+ 173C 23                       inc     HL
 805+ 173D 56                       ld      D,(HL)
 806+ 173E D5                       push    DE              ; copy number of entries...
 807+ 173F FD E1                    pop     IY              ; ...into IY
 808+ 1741 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 809+ 1744 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 810+ 1745 58                       ld      E,B
 811+ 1746 60                       ld      H,B             ; HL=$0000 (entry counter)
 812+ 1747 68                       ld      L,B
 813+ 1748 CD 6F 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 814+ 174B CD B1 10                 call    CF_RD_SEC       ; read sector
 815+ 174E DD 2A 9A 81              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 816+ 1752 DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 817+ 1755 FD 2B                    dec     IY              ; decrement number of entries
 818+ 1757 B7                       or      A               ; is it $00 (empty entry)?
 819+ 1758 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 820+ 175A FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 821+ 175C 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 822+ 175E C5                       push    BC              ; no, store BC
 823+ 175F 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 824+ 1762 DD 09                    add     IX,BC           ; next entry in current sector
 825+ 1764 C1                       pop     BC              ; retrieve sector pointer
 826+ 1765 23                       inc     HL              ; increment entry counter
 827+ 1766 7D                       ld      A,L
 828+ 1767 E6 0F                    and     %00001111       ; just done 16 entries?
 829+ 1769 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 830+ 176B 03                       inc     BC              ; entries in this sector finished .. goto next sector
 831+ 176C 78                       ld      A,B             ; check if...
 832+ 176D B1                       or      C               ; ...BC=$000
 833+ 176E 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 834+ 1770 13                       inc     DE              ; yes, increment DE (MSB)
 835+ 1771 E5           FNDFREDIR5: push    HL              ; preserve current entry
 836+ 1772 FD E5                    push    IY              ; copy max allowed files...
 837+ 1774 D1                       pop     DE              ; ...into HL
 838+ 1775 CD 1E 4D                 call    CMP16           ; check if reached max allowed entries
 839+ 1778 E1                       pop     HL              ; (retrieve current entry)
 840+ 1779 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 841+ 177B 37                       scf                     ; entries are finished, raise an error
 842+ 177C C9                       ret                     ; return
 843+ 177D ED 43 A1 81  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 844+ 1781 22 A3 81                 ld      (NTR_NBR),HL    ; store entry number
 845+ 1784 AF                       xor     A               ; reset Carry
 846+ 1785 C9                       ret
 847+ 1786
 848+ 1786
 849+ 1786              ; *****************************************************************************
 850+ 1786              ;   U T I L I T I E S
 851+ 1786              ; *****************************************************************************
 852+ 1786
 853+ 1786              ; load string name into buffer
 854+ 1786              ; inputs: DE: pointer to dest. buffer
 855+ 1786              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 856+ 1786              ; destroys: A, BC, DE, HL
 857+ 1786              ; outputs: DE->(TPBF4) for later use
 858+ 1786 ED 4B 09 82  DOS_LDNAM:  ld      BC,(DKLNPT)     ; load lenght of disk name
 859+ 178A 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 860+ 178B FE 11                    cp      $11             ; is it <=16?
 861+ 178D 38 02                    jr      C,DOS_LDNAM1    ; yes, so jump over
 862+ 178F 0E 10                    ld      C,$10           ; no, get only 16 chars
 863+ 1791 41           DOS_LDNAM1: ld      B,C             ; copy lenght into B
 864+ 1792 2A 07 82                 ld      HL,(DKNMPT)     ; pointer to disk name
 865+ 1795 ED 53 B4 81              ld      (TPBF4),DE      ; store current position for later use
 866+ 1799 7E           DOS_LDNAM2: ld      A,(HL)          ; get a char fron string name
 867+ 179A CD A0 18                 call    CHK_NAM         ; check if char is valid
 868+ 179D D8                       ret     C               ; no, name error
 869+ 179E 12                       ld      (DE),A          ; yes, store char
 870+ 179F 13                       inc     DE              ; next I/O location
 871+ 17A0 23                       inc     HL              ; next disk name char
 872+ 17A1 10 F6                    djnz    DOS_LDNAM2      ; repeat until name ends
 873+ 17A3 3E 10                    ld      A,$10           ; check how much padding must be...
 874+ 17A5 91                       sub     C               ; ...added to name field
 875+ 17A6 28 07                    jr      Z,DOS_LDNAM4    ; if zero, then jump over
 876+ 17A8 47                       ld      B,A             ; copy into B
 877+ 17A9 3E 20                    ld      A,SPC           ; space char
 878+ 17AB 12           DOS_LDNAM3: ld      (DE),A          ; fill current cell
 879+ 17AC 13                       inc     DE              ; next one
 880+ 17AD 10 FC                    djnz    DOS_LDNAM3      ; repeat
 881+ 17AF AF           DOS_LDNAM4: xor     A               ; be sure Carry is reset
 882+ 17B0 C9                       ret                     ; return to caller
 883+ 17B1
 884+ 17B1
 885+ 17B1              ; generate random disk ID
 886+ 17B1 2A B4 81     RND_ID:     ld      HL,(TPBF4)    ; retrieve pointer to beginning of name
 887+ 17B4 7E                       ld      A,(HL)          ; get first char
 888+ 17B5 12                       ld      (DE),A          ; copy it to disk ID
 889+ 17B6 13                       inc     DE              ; inc pointer
 890+ 17B7 CD CC 17                 call    RND8            ; get a random char
 891+ 17BA CD DD 17                 call    CH0TO9          ; get a number from 0 to 9
 892+ 17BD 12                       ld      (DE),A          ; store it
 893+ 17BE 13                       inc     DE              ; inc pointer
 894+ 17BF 23                       inc     HL              ; next disk name char
 895+ 17C0 7E                       ld      A,(HL)          ; get second char from disk name
 896+ 17C1 12                       ld      (DE),A          ; store it
 897+ 17C2 13                       inc     DE              ; inc pointer
 898+ 17C3 CD CC 17                 call    RND8            ; get a random char
 899+ 17C6 CD DD 17                 call    CH0TO9          ; get a number from 0 to 9
 900+ 17C9 12                       ld      (DE),A          ; store it
 901+ 17CA 13                       inc     DE              ; inc pointer
 902+ 17CB C9                       ret                     ; return to caller
 903+ 17CC
 904+ 17CC
 905+ 17CC              ; generate a pseudo-random number from TMR and R register
 906+ 17CC 3A E5 81     RND8:       ld      A,(TMRCNT)      ; load LSB of sys-timer
 907+ 17CF 47                       ld      B,A             ; copy into B
 908+ 17D0 ED 5F                    ld      A,R             ; load refresh register
 909+ 17D2 A8                       xor     B               ; A xor B
 910+ 17D3 47                       ld      B,A             ; copy into B
 911+ 17D4 0F                       rrca                    ; multiply by 32
 912+ 17D5 0F                       rrca
 913+ 17D6 0F                       rrca
 914+ 17D7 EE 1F                    xor     $1F
 915+ 17D9 80                       add     A,B
 916+ 17DA DE FF                    sbc     A,255           ; carry
 917+ 17DC C9                       ret                     ; return to caller
 918+ 17DD
 919+ 17DD
 920+ 17DD              ; char ported into 0-9 interval
 921+ 17DD E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 922+ 17DF FE 0A                    cp      $0A             ; is it < 10?
 923+ 17E1 38 02                    jr      C,CH0TO9E       ; yes, jump over
 924+ 17E3 D6 0A                    sub     $0A             ; subract 10
 925+ 17E5 C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 926+ 17E7 C9                       ret
 927+ 17E8
 928+ 17E8
 929+ 17E8              ; first check DOS validity then load disk details
 930+ 17E8 CD 2D 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 931+ 17EB C5                       push    BC              ; store BC
 932+ 17EC D5                       push    DE              ; store DE
 933+ 17ED E5                       push    HL              ; store HL
 934+ 17EE 01 00 00                 ld      BC,$0000
 935+ 17F1 11 00 00                 ld      DE,$0000
 936+ 17F4 CD 6F 10                 call    CF_SETSTR       ; set sector #0
 937+ 17F7 CD B1 10                 call    CF_RD_SEC       ; read sector
 938+ 17FA 2A 9A 81                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 939+ 17FD 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 940+ 1800 19                       add     HL,DE
 941+ 1801 11 0A 11                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 942+ 1804 06 04                    ld      B,$04           ; 4 chars
 943+ 1806 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 944+ 1807 BE                       cp      (HL)            ; compare with disk DOS version
 945+ 1808 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 946+ 180A 13                       inc     DE              ; next source
 947+ 180B 23                       inc     HL              ; next comparison
 948+ 180C 10 F8                    djnz    CHKDSKVAL1      ; repeat
 949+ 180E 2A 98 81                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 950+ 1811 11 1D 00                 ld      DE,$001D        ; point to address of data area
 951+ 1814 19                       add     HL,DE           ; set pointer to beginning of identifies
 952+ 1815 5E                       ld      E,(HL)          ; load LSB
 953+ 1816 23                       inc     HL              ; increment pointer
 954+ 1817 56                       ld      D,(HL)          ; load MSB: DE now has the first sector of data area
 955+ 1818 AF                       xor     A               ; no error - clear Carry flag
 956+ 1819 18 01                    jr      CHKDSKVAL2      ; jump over
 957+ 181B 37           CHKDSKVALE: scf                     ; error - set carry flag
 958+ 181C E1           CHKDSKVAL2: pop     HL
 959+ 181D D1                       pop     DE
 960+ 181E C1                       pop     BC
 961+ 181F C9                       ret                     ; return to caller
 962+ 1820
 963+ 1820
 964+ 1820              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 965+ 1820              ; Ipnputs: DE: pointer to dest.
 966+ 1820 ED 4B 09 82  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 967+ 1824 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 968+ 1825 FE 11                    cp      $11             ; is it <=16?
 969+ 1827 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 970+ 1829 0E 10                    ld      C,$10           ; no, get only 16 chars
 971+ 182B 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 972+ 182C 0E 10                    ld      C,$10           ; char counter
 973+ 182E 2A 07 82                 ld      HL,(DKNMPT)     ; pointer to disk name
 974+ 1831 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 975+ 1832 CD A0 18                 call    CHK_NAM         ; check if valid
 976+ 1835 D8                       ret     C               ; no, file name error
 977+ 1836 12                       ld      (DE),A          ; yes, store char
 978+ 1837 13                       inc     DE              ; next I/O location
 979+ 1838 23                       inc     HL              ; next disk name char
 980+ 1839 0D                       dec     C               ; decrement number of chars copied
 981+ 183A 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 982+ 183C 79                       ld      A,C             ; check if there are no empty chars in file
 983+ 183D B7                       or      A
 984+ 183E C8                       ret     Z               ; yes, job finished - return
 985+ 183F 3E 20                    ld      A,SPC           ; no, padding required
 986+ 1841 12           CHKNMVAL3:  ld      (DE),A          ; store char
 987+ 1842 13                       inc     DE              ; next location
 988+ 1843 0D                       dec     C               ; check if padding is over
 989+ 1844 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 990+ 1846 AF                       xor     A               ; clear Carry flag
 991+ 1847 C9                       ret                     ; return to caller
 992+ 1848
 993+ 1848
 994+ 1848              ; store DE into (HL) and (HL+1)
 995+ 1848 73           DE2HL:      ld      (HL),E          ; LSB of size
 996+ 1849 23                       inc     HL
 997+ 184A 72                       ld      (HL),D          ; MSB of size
 998+ 184B 23                       inc     HL
 999+ 184C C9                       ret                     ; return to caller
1000+ 184D
1001+ 184D
1002+ 184D              ; get DE from (HL) and (HL+1)
1003+ 184D 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
1004+ 184E 23                       inc     HL              ; next location
1005+ 184F 56                       ld      D,(HL)          ; get MSB into D
1006+ 1850 23                       inc     HL              ; next location
1007+ 1851 C9                       ret                     ; return to caller
1008+ 1852
1009+ 1852
1010+ 1852              ; convert a 16/32-bit number into an ASCII string and print it
1011+ 1852              ; inputs: HL pointer to 32-bit number
1012+ 1852 5E           PRN32ASCII: ld      E,(HL)          ; load MSB into DE  <-- entry for 32-bit
1013+ 1853 23                       inc     HL
1014+ 1854 56                       ld      D,(HL)
1015+ 1855 23                       inc     HL
1016+ 1856 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
1017+ 1857 23                       inc     HL
1018+ 1858 46                       ld      B,(HL)
1019+ 1859 C5                       push    BC              ; copy BC...
1020+ 185A DD E1                    pop     IX              ; ...into IX
1021+ 185C FD 21 AE 81  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
1022+ 1860 CD E7 4D                 call    CLCN32          ; convert number in DEIX into ASCII number
1023+ 1863 21 AE 81                 ld      HL,TPBF1        ; address of ASCII number
1024+ 1866 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
1025+ 1867 B7                       or      A               ; is it $00 (end of string)?
1026+ 1868 C8                       ret     Z               ; yes, leave
1027+ 1869 CD 9A 23                 call    OUTC            ; no, print char
1028+ 186C 23                       inc     HL              ; next char
1029+ 186D 18 F7                    jr      PRNTSIZ         ; repeat
1030+ 186F
1031+ 186F
1032+ 186F              ; convert one or more bytes into memory in hex format
1033+ 186F              ; HL: pointer to number in memory - B: number of bytes to convert
1034+ 186F              ; destroys: A, D, HL
1035+ 186F 50           PRN_HEX:    ld      D,B             ; move bytes into D
1036+ 1870 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1037+ 1871 CD 90 18                 call    BYTEHEX         ; print hex number
1038+ 1874 23                       inc     HL              ; next location
1039+ 1875 15                       dec     D               ; decrement bytes to convert
1040+ 1876 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1041+ 1878 C9                       ret
1042+ 1879
1043+ 1879
1044+ 1879              ; convert one or more words into memory in hex format
1045+ 1879              ; IX: pointer to number in memory - B: number of words to convert
1046+ 1879              ; destroys: AF, IX
1047+ 1879 D5           PRN_WHEX:   push    DE
1048+ 187A 50                       ld      D,B
1049+ 187B DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1050+ 187E CD 90 18                 call    BYTEHEX         ; print hex number
1051+ 1881 DD 7E 00                 ld      A,(IX)          ; load LSB into A
1052+ 1884 CD 90 18                 call    BYTEHEX         ; print hex number
1053+ 1887 DD 23                    inc     IX
1054+ 1889 DD 23                    inc     IX              ; next word
1055+ 188B 15                       dec     D               ; decrement words to convert
1056+ 188C 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1057+ 188E D1                       pop     DE
1058+ 188F C9                       ret
1059+ 1890
1060+ 1890
1061+ 1890              ; print A in hex format
1062+ 1890 C5           BYTEHEX:    push    BC
1063+ 1891 D5                       push    DE
1064+ 1892 CD 33 4C                 call    BYT2ASC         ; convert to HEX and get back into BC
1065+ 1895 78                       ld      A,B
1066+ 1896 CD 9A 23                 call    OUTC            ; print left nibble
1067+ 1899 79                       ld      A,C
1068+ 189A CD 9A 23                 call    OUTC            ; print right nibble
1069+ 189D D1                       pop     DE
1070+ 189E C1                       pop     BC
1071+ 189F C9                       ret                     ; return to caller
1072+ 18A0
1073+ 18A0
1074+ 18A0              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9' and 'A'-'Z'
1075+ 18A0              ; input: A -> char to check
1076+ 18A0              ; return: C is set if ERROR, reset otherwise
1077+ 18A0 FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1078+ 18A2 C8                       ret     Z               ; return if equal (C is reset)
1079+ 18A3 FE 2D                    cp      '-'             ; is it a minus?
1080+ 18A5 C8                       ret     Z               ; return if equal
1081+ 18A6 FE 30                    cp      '0'             ; char < '0' ?
1082+ 18A8 D8                       ret     C               ; yes, disk name error
1083+ 18A9 FE 3A                    cp      ':'             ; is char <= '9' ?
1084+ 18AB 38 07                    jr      C,CHK_C_CF      ; yes, leave
1085+ 18AD E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1086+ 18AF FE 41                    cp      'A'             ; is char >= 'A' ?
1087+ 18B1 D8                       ret     C               ; no, error
1088+ 18B2 FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1089+ 18B4 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1090+ 18B5 C9           CHK_NAM_LV: ret                     ; return to caller
1091+ 18B6
1092+ 18B6
1093+ 18B6
1094+ 18B6              ; clear I/O buffer
1095+ 18B6 F5           CLRIOBF:    push    AF              ; store AF
1096+ 18B7 C5                       push    BC              ; store BC
1097+ 18B8 E5                       push    HL              ; store HL
1098+ 18B9 2A 9A 81                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1099+ 18BC 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1100+ 18BF AF           CLRBUFF:    xor     A               ; reset A
1101+ 18C0 77           RSTIOBF:    ld      (HL),A          ; reset cell
1102+ 18C1 23                       inc     HL              ; next cell
1103+ 18C2 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1104+ 18C4 0D                       dec     C               ; decrement C
1105+ 18C5 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1106+ 18C7 E1                       pop     HL              ; retrieve HL
1107+ 18C8 C1                       pop     BC              ; retrieve BC
1108+ 18C9 F1                       pop     AF              ; retrieve AF
1109+ 18CA C9                       ret                     ; return to caller
1110+ 18CB
1111+ 18CB
1112+ 18CB              ; clear DOS buffer
1113+ 18CB F5           CLRDOSBF:   push    AF
1114+ 18CC C5                       push    BC
1115+ 18CD E5                       push    HL
1116+ 18CE 2A 98 81                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1117+ 18D1 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1118+ 18D4 C3 BF 18                 jp      CLRBUFF         ; continue
# file closed: ../include/dos/dos-1.0.asm
  84  18D7
  85  18D7              ; include the latest version of the LM80C BASIC interpreter
  86  18D7                  INCLUDE "../include/basic/basic-1.05.asm"
# file opened: ../include/basic/basic-1.05.asm
   1+ 18D7              ; ------------------------------------------------------------------------------
   2+ 18D7              ; LM80C BASIC (32K/64K) - R3.19
   3+ 18D7              ; ------------------------------------------------------------------------------
   4+ 18D7              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18D7              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18D7              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18D7              ; kind of warranty: you can use them at your own risk.
   8+ 18D7              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18D7              ; maintain the copyright notices, include this advice and the note to the
  10+ 18D7              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18D7              ; redistribuite them.
  12+ 18D7              ; https://www.leonardomiliani.com
  13+ 18D7              ;
  14+ 18D7              ; Please support me by visiting the following links:
  15+ 18D7              ; Main project page: https://www.leonardomiliani.com
  16+ 18D7              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18D7              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18D7              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18D7              ; ------------------------------------------------------------------------------
  20+ 18D7              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18D7              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18D7              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18D7
  24+ 18D7
  25+ 18D7              ;------------------------------------------------------------------------------
  26+ 18D7              ;  L M 8 0 C   B A S I C
  27+ 18D7              ;------------------------------------------------------------------------------
  28+ 18D7
  29+ 18D7              ; GENERAL EQUATES
  30+ 18D7
  31+ 18D7              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18D7              CTRLC           equ     $03             ; Control "C"
  33+ 18D7              CTRLG           equ     $07             ; Control "G"
  34+ 18D7              BKSP            equ     $08             ; Back space
  35+ 18D7              LF              equ     $0A             ; Line feed
  36+ 18D7              CS              equ     $0C             ; Clear screen
  37+ 18D7              CR              equ     $0D             ; Carriage return
  38+ 18D7              CTRLO           equ     $0F             ; Control "O"
  39+ 18D7              CTRLQ           equ     $11             ; Control "Q"
  40+ 18D7              CTRLR           equ     $12             ; Control "R"
  41+ 18D7              CTRLS           equ     $13             ; Control "S"
  42+ 18D7              CTRLU           equ     $15             ; Control "U"
  43+ 18D7              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18D7              ESC             equ     $1B             ; Escape
  45+ 18D7              SPC             equ     $20             ; Space
  46+ 18D7              DEL             equ     $7F             ; Delete
  47+ 18D7              INSRT           equ     $1A             ; Insert Key
  48+ 18D7              ; cursor ASCII codes
  49+ 18D7              CRSLFT          equ     $1C             ; cursor left
  50+ 18D7              CRSRGT          equ     $1D             ; cursor right
  51+ 18D7              CRSUP           equ     $1E             ; cursor up
  52+ 18D7              CRSDN           equ     $1F             ; cursor down
  53+ 18D7
  54+ 18D7
  55+ 18D7              ;-------------------------------------------------------------------------
  56+ 18D7              ; BASIC ERROR MESSAGES
  57+ 18D7              ; the interpreter looks for a single-byte code in the following list,
  58+ 18D7              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18D7              ; find where to retrieve the message text in "ERRORS"
  60+ 18D7
  61+ 18D7              ; BASIC ERROR CODE VALUES
  62+ 18D7              ; These values act as an offset to point to the error message into the error table
  63+ 18D7              ; must be incremented by 2 because they point to a word address jump
  64+ 18D7              NF      equ     $00     ; NEXT without FOR
  65+ 18D7              SN      equ     $02     ; Syntax error
  66+ 18D7              RG      equ     $04     ; RETURN without GOSUB
  67+ 18D7              OD      equ     $06     ; Out of DATA
  68+ 18D7              FC      equ     $08     ; Function call error
  69+ 18D7              OV      equ     $0A     ; Overflow
  70+ 18D7              OM      equ     $0C     ; Out of memory
  71+ 18D7              UL      equ     $0E     ; Undefined line number
  72+ 18D7              BS      equ     $10     ; Bad subscript
  73+ 18D7              DD      equ     $12     ; Re-Dimensioned array
  74+ 18D7              DZ      equ     $14     ; Division by zero (/0)
  75+ 18D7              ID      equ     $16     ; Illegal direct
  76+ 18D7              TM      equ     $18     ; Type mis-match
  77+ 18D7              OS      equ     $1A     ; Out of string space
  78+ 18D7              LS      equ     $1C     ; String too long
  79+ 18D7              ST      equ     $1E     ; String formula too complex
  80+ 18D7              CN      equ     $20     ; Can't continue
  81+ 18D7              UF      equ     $22     ; Undefined FN function
  82+ 18D7              MO      equ     $24     ; Missing operand
  83+ 18D7              HX      equ     $26     ; HEX error
  84+ 18D7              BN      equ     $28     ; BIN error
  85+ 18D7              GM      equ     $2A     ; No Graphics Mode
  86+ 18D7              SC      equ     $2C     ; Serial configuration
  87+ 18D7              SA      equ     $2E     ; Serial port already open
  88+ 18D7              SO      equ     $30     ; Serial buffer overrun
  89+ 18D7              HP      equ     $32     ; HELP call
  90+ 18D7              IM      equ     $34     ; Illegal indirect
  91+ 18D7              NR      equ     $36     ; Device not ready
  92+ 18D7              D0      equ     $38     ; DOS not enabled
  93+ 18D7              D1      equ     $3A     ; Disk/File name error
  94+ 18D7              D2      equ     $3C     ; Disk geometry error
  95+ 18D7              D3      equ     $3E     ; Save error
  96+ 18D7              D4      equ     $40     ; Load error
  97+ 18D7              D5      equ     $42     ; Disk full error
  98+ 18D7              D6      equ     $44     ; Duplicate file name error
  99+ 18D7              D7      equ     $46     ; DOS version error
 100+ 18D7              D8      equ     $48     ; File not found error
 101+ 18D7
 102+ 18D7
 103+ 18D7              ; BASIC ERROR POINTER TABLE
 104+ 18D7              ERRTBL: equ $
 105+ 18D7 21 19        NFPTR:  defw    NFMSG
 106+ 18D9 32 19        SNPTR:  defw    SNMSG
 107+ 18DB 39 19        RGPTR:  defw    RGMSG
 108+ 18DD 4E 19        ODPTR:  defw    ODMSG
 109+ 18DF 5A 19        FCPTR:  defw    FCMSG
 110+ 18E1 70 19        OVPTR:  defw    OVMSG
 111+ 18E3 79 19        OMPTR:  defw    OMMSG
 112+ 18E5 87 19        ULPTR:  defw    ULMSG
 113+ 18E7 96 19        BSPTR:  defw    BSMSG
 114+ 18E9 A4 19        DDPTR:  defw    DDMSG
 115+ 18EB B9 19        DZPTR:  defw    DZMSG
 116+ 18ED CA 19        IDPTR:  defw    IDMSG
 117+ 18EF DE 19        TMPTR:  defw    TMMSG
 118+ 18F1 ED 19        OSPTR:  defw    OSMSG
 119+ 18F3 01 1A        LSPTR:  defw    LSMSG
 120+ 18F5 11 1A        STPTR:  defw    STMSG
 121+ 18F7 2C 1A        CNPTR:  defw    CNMSG
 122+ 18F9 3B 1A        UFPTR:  defw    UFMSG
 123+ 18FB 51 1A        MOPTR:  defw    MOMSG
 124+ 18FD 61 1A        HXPTR:  defw    HXMSG
 125+ 18FF 6C 1A        BNPTR:  defw    BNMSG
 126+ 1901 77 1A        GMPRT:  defw    GMMSG
 127+ 1903 88 1A        SCPTR:  defw    SCMSG
 128+ 1905 9D 1A        SAPTR:  defw    SAMSG
 129+ 1907 B6 1A        SOPTR:  defw    SOMSG
 130+ 1909 CC 1A        HPPTR:  defw    HPMSG
 131+ 190B D6 1A        IMPRT:  defw    IMMSG
 132+ 190D EC 1A        NRPRT:  defw    NRMSG
 133+ 190F FD 1A        D0PTR:  defw    D0MSG
 134+ 1911 0D 1B        D1PRT:  defw    D1MSG
 135+ 1913 19 1B        D2PRT:  defw    D2MSG
 136+ 1915 27 1B        D3PRT:  defw    D3MSG
 137+ 1917 2C 1B        D4PTR:  defw    D4MSG
 138+ 1919 31 1B        D5PTR:  defw    D5MSG
 139+ 191B 3B 1B        D6PTR:  defw    D6MSG
 140+ 191D 4F 1B        D7PRT:  defw    D7MSG
 141+ 191F 5B 1B        D8PTR:  defw    D8MSG
 142+ 1921
 143+ 1921
 144+ 1921              ; BASIC ERROR MESSAGE LIST
 145+ 1921              ERRORS  equ $
 146+ 1921 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 1925 20 57 69 74
 146+ 1929 68 6F 75 74
 146+ 192D 20 46 4F 52
 146+ 1931 00
 147+ 1932 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 1936 61 78 00
 148+ 1939 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 193D 52 4E 20 77
 148+ 1941 69 74 68 6F
 148+ 1945 75 74 20 47
 148+ 1949 4F 53 55 42
 148+ 194D 00
 149+ 194E 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 1952 6F 66 20 44
 149+ 1956 41 54 41 00
 150+ 195A 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 195E 67 61 6C 20
 150+ 1962 46 75 6E 63
 150+ 1966 74 69 6F 6E
 150+ 196A 20 43 61 6C
 150+ 196E 6C 00
 151+ 1970 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1974 66 6C 6F 77
 151+ 1978 00
 152+ 1979 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 197D 6F 66 20 4D
 152+ 1981 65 6D 6F 72
 152+ 1985 79 00
 153+ 1987 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 198B 66 69 6E 65
 153+ 198F 64 20 4C 69
 153+ 1993 6E 65 00
 154+ 1996 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 199A 53 75 62 73
 154+ 199E 63 72 69 70
 154+ 19A2 74 00
 155+ 19A4 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 19A8 69 6D 65 6E
 155+ 19AC 73 69 6F 6E
 155+ 19B0 65 64 20 41
 155+ 19B4 72 72 61 79
 155+ 19B8 00
 156+ 19B9 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 19BD 73 69 6F 6E
 156+ 19C1 20 62 79 20
 156+ 19C5 5A 65 72 6F
 156+ 19C9 00
 157+ 19CA 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 19CE 67 61 6C 20
 157+ 19D2 44 69 72 65
 157+ 19D6 63 74 20 4D
 157+ 19DA 6F 64 65 00
 158+ 19DE 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 19E2 20 4D 69 73
 158+ 19E6 2D 6D 61 74
 158+ 19EA 63 68 00
 159+ 19ED 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 19F1 6F 66 20 53
 159+ 19F5 74 72 69 6E
 159+ 19F9 67 20 53 70
 159+ 19FD 61 63 65 00
 160+ 1A01 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 1A05 6E 67 20 54
 160+ 1A09 6F 6F 20 4C
 160+ 1A0D 6F 6E 67 00
 161+ 1A11 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 1A15 6E 67 20 46
 161+ 1A19 6F 72 6D 75
 161+ 1A1D 6C 61 20 54
 161+ 1A21 6F 6F 20 43
 161+ 1A25 6F 6D 70 6C
 161+ 1A29 65 78 00
 162+ 1A2C 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A30 74 20 43 6F
 162+ 1A34 6E 74 69 6E
 162+ 1A38 75 65 00
 163+ 1A3B 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A3F 66 69 6E 65
 163+ 1A43 64 20 46 4E
 163+ 1A47 20 46 75 6E
 163+ 1A4B 63 74 69 6F
 163+ 1A4F 6E 00
 164+ 1A51 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A55 69 6E 67 20
 164+ 1A59 4F 70 65 72
 164+ 1A5D 61 6E 64 00
 165+ 1A61 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A65 46 6F 72 6D
 165+ 1A69 61 74 00
 166+ 1A6C 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A70 46 6F 72 6D
 166+ 1A74 61 74 00
 167+ 1A77 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A7B 72 61 70 68
 167+ 1A7F 69 63 73 20
 167+ 1A83 4D 6F 64 65
 167+ 1A87 00
 168+ 1A88 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1A8C 61 6C 20 43
 168+ 1A90 6F 6E 66 69
 168+ 1A94 67 75 72 61
 168+ 1A98 74 69 6F 6E
 168+ 1A9C 00
 169+ 1A9D 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1AA1 61 6C 20 50
 169+ 1AA5 6F 72 74 20
 169+ 1AA9 41 6C 72 65
 169+ 1AAD 61 64 79 20
 169+ 1AB1 4F 70 65 6E
 169+ 1AB5 00
 170+ 1AB6 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1ABA 61 6C 20 42
 170+ 1ABE 75 66 66 65
 170+ 1AC2 72 20 4F 76
 170+ 1AC6 65 72 72 75
 170+ 1ACA 6E 00
 171+ 1ACC 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1AD0 20 43 61 6C
 171+ 1AD4 6C 00
 172+ 1AD6 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1ADA 67 61 6C 20
 172+ 1ADE 49 6E 64 69
 172+ 1AE2 72 65 63 74
 172+ 1AE6 20 4D 6F 64
 172+ 1AEA 65 00
 173+ 1AEC 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1AF0 63 65 20 4E
 173+ 1AF4 6F 74 20 52
 173+ 1AF8 65 61 64 79
 173+ 1AFC 00
 174+ 1AFD 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1B01 4E 6F 74 20
 174+ 1B05 45 6E 61 62
 174+ 1B09 6C 65 64 00
 175+ 1B0D 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1B11 20 53 74 72
 175+ 1B15 69 6E 67 00
 176+ 1B19 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1B1D 20 47 65 6F
 176+ 1B21 6D 65 74 72
 176+ 1B25 79 00
 177+ 1B27 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1B2B 00
 178+ 1B2C 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B30 00
 179+ 1B31 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B35 20 46 75 6C
 179+ 1B39 6C 00
 180+ 1B3B 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B3F 69 63 61 74
 180+ 1B43 65 20 46 69
 180+ 1B47 6C 65 20 4E
 180+ 1B4B 61 6D 65 00
 181+ 1B4F 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B53 56 65 72 73
 181+ 1B57 69 6F 6E 00
 182+ 1B5B 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B5F 20 4E 6F 74
 182+ 1B63 20 46 6F 75
 182+ 1B67 6E 64 00
 183+ 1B6A
 184+ 1B6A
 185+ 1B6A              ;-----------------------------------------------------------------------------
 186+ 1B6A              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B6A              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B6A              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B6A
 190+ 1B6A C3 70 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B6D C3 38 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B70
 193+ 1B70 C3 77 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B73 8E 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B75 53 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B77 21 5E 80     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B7A F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B7B C3 09 4D             jp      INITST          ; Go to initialise
 199+ 1B7E
 200+ 1B7E 21 28 1F     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1B81 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1B84 11 5E 80             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1B87 ED B0                ldir                    ; Copy data
 204+ 1B89 EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1B8A F9                   ld      SP,HL           ; Temporary stack
 206+ 1B8B CD F1 21             call    CLREG           ; Clear registers and stack
 207+ 1B8E CD A5 28             call    PRNTCRLF        ; Output CRLF
 208+ 1B91 32 91 81             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1B94 32 6E 82             ld      (PROGST),A      ; Initialise program area
 210+ 1B97 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1B99 21 BC 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1B9C CD 71 2F             call    PRS             ; Output "Memory size"
 213+ 1B9F CD 0E 22             call    PROMPT          ; Get input with '?'
 214+ 1BA2 CD 44 09             call    CURSOR_ON       ; enable cursor
 215+ 1BA5 CD D8 25             call    GETCHR          ; Get next character
 216+ 1BA8 B7                   or      A               ; Set flags
 217+ 1BA9 C2 C1 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1BAC 21 D2 82     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1BAF 23           MLOOP:  inc     HL              ; Next byte
 220+ 1BB0 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1BB1 B5                   or      L
 222+ 1BB2 CA D3 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1BB5 7E                   ld      A,(HL)          ; Get contents
 224+ 1BB6 47                   ld      B,A             ; Save it
 225+ 1BB7 2F                   cpl                     ; Flip all bits
 226+ 1BB8 77                   ld      (HL),A          ; Put it back
 227+ 1BB9 BE                   cp      (HL)            ; RAM there if same
 228+ 1BBA 70                   ld      (HL),B          ; Restore old contents
 229+ 1BBB CA AF 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1BBE C3 D3 1B             jp      SETTOP          ; Top of RAM found
 231+ 1BC1
 232+ 1BC1 CD A8 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1BC4 B7                   or      A               ; Set flags on last byte
 234+ 1BC5 C2 8F 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1BC8 EB                   ex      DE,HL           ; Address into HL
 236+ 1BC9 2B                   dec     HL              ; Back one byte
 237+ 1BCA 3E D9                ld      A,%11011001     ; Test byte
 238+ 1BCC 46                   ld      B,(HL)          ; Get old contents
 239+ 1BCD 77                   ld      (HL),A          ; Load test byte
 240+ 1BCE BE                   cp      (HL)            ; RAM there if same
 241+ 1BCF 70                   ld      (HL),B          ; Restore old contents
 242+ 1BD0 C2 99 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BD3
 244+ 1BD3 CD 59 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BD6 2B                   dec     HL              ; Back one byte
 246+ 1BD7 11 D1 82             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BDA CD 89 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BDD DA 99 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1BE0 3A 4A 82             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1BE3 1F                   rra                     ; is DOS disabled?
 251+ 1BE4 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1BE6 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1BE9 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1BEA 22 9A 81             ld      (IOBUFF),HL     ; ...and store address
 255+ 1BED 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1BF0 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1BF1 22 98 81             ld      (DOSBFR),HL     ; ...and store address
 258+ 1BF4 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1BF7 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1BF8 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1BFB 22 96 81             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1BFE 19                   add     HL,DE           ; Allocate string space
 263+ 1BFF 22 AD 80             ld      (STRSPC),HL     ; Save string space
 264+ 1C02 CD CC 21             call    CLRPTR          ; Clear program area
 265+ 1C05 2A AD 80             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1C08 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1C0B 19                   add     HL,DE           ; Adjust HL
 268+ 1C0C 11 6E 82             ld      DE,PROGST       ; Start of program text
 269+ 1C0F 7D                   ld      A,L             ; Get LSB
 270+ 1C10 93                   sub     E               ; Adjust it
 271+ 1C11 6F                   ld      L,A             ; Re-save
 272+ 1C12 7C                   ld      A,H             ; Get MSB
 273+ 1C13 9A                   sbc     A,D             ; Adjust it
 274+ 1C14 67                   ld      H,A             ; Re-save
 275+ 1C15 E5                   push    HL              ; Save bytes free
 276+ 1C16 21 5E 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1C19 CD 71 2F             call    PRS             ; Output string
 278+ 1C1C 3A 4A 82             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1C1F B7                   or      A
 280+ 1C20 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1C22 21 9F 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1C25 CD 71 2F             call    PRS
 283+ 1C28 21 47 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1C2B CD 71 2F             call    PRS             ; Output string
 285+ 1C2E E1                   pop     HL              ; Get bytes free back
 286+ 1C2F CD 10 3A             call    PRNTHL          ; Output amount of free memory
 287+ 1C32 21 50 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C35 CD 71 2F             call    PRS             ; Output string
 289+ 1C38
 290+ 1C38 31 3D 81     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C3B CD F1 21     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C3E CD 37 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C41 CD 44 09             call    CURSOR_ON       ; enable cursor
 294+ 1C44 C3 EF 20             jp      PRNTOK          ; Go to get command line
 295+ 1C47
 296+ 1C47 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C4B 20 20 20 20
 296+ 1C4F 00
 297+ 1C50 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C54 65 73 20 66
 297+ 1C58 72 65 65 0D
 297+ 1C5C 0D 00
 298+ 1C5E
 299+ 1C5E 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.19 ",251,"2021 L.Miliani"
 299+ 1C62 43 20 42 41
 299+ 1C66 53 49 43 20
 299+ 1C6A 33 2E 31 39
 299+ 1C6E 20 FB 32 30
 299+ 1C72 32 31 20 4C
 299+ 1C76 2E 4D 69 6C
 299+ 1C7A 69 61 6E 69
 300+ 1C7E 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1C82 20 42 41 53
 300+ 1C86 49 43 20 34
 300+ 1C8A 2E 37 20 20
 300+ 1C8E FB 31 39 37
 300+ 1C92 38 20 4D 69
 300+ 1C96 63 72 6F 73
 300+ 1C9A 6F 66 74 0D
 300+ 1C9E 00
 301+ 1C9F 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.00","  Loaded",CR,0
 301+ 1CA3 20 4C 4D 38
 301+ 1CA7 30 43 20 44
 301+ 1CAB 4F 53 20 31
 301+ 1CAF 2E 30 30 20
 301+ 1CB3 20 4C 6F 61
 301+ 1CB7 64 65 64 0D
 301+ 1CBB 00
 302+ 1CBC
 303+ 1CBC 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1CC0 72 79 20 74
 303+ 1CC4 6F 70 00
 304+ 1CC7
 305+ 1CC7              ; The following list reports all the functions supported by the interpreter.
 306+ 1CC7              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1CC7              ; then into the list of the reserved words below, and finally must increment the
 308+ 1CC7              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1CC7              ; function.
 310+ 1CC7
 311+ 1CC7              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1CC7              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1CC7              ; entry here must have the corresponding entry in the tokens list.
 314+ 1CC7 85 38        FNCTAB: defw    SGN
 315+ 1CC9 1B 2E                defw    TMR         ; added by Leonardo Miliani
 316+ 1CCB 49 39                defw    INT
 317+ 1CCD 9B 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1CCF 64 80                defw    USR
 319+ 1CD1 31 2E                defw    FRE
 320+ 1CD3 AC 32                defw    INP
 321+ 1CD5 5F 2E                defw    POS
 322+ 1CD7 0F 3B                defw    SQR
 323+ 1CD9 EE 3B                defw    RND
 324+ 1CDB D9 36                defw    LOG
 325+ 1CDD 5D 3B                defw    EXP
 326+ 1CDF 63 3C                defw    COS
 327+ 1CE1 69 3C                defw    SIN
 328+ 1CE3 CA 3C                defw    TAN
 329+ 1CE5 DF 3C                defw    ATN
 330+ 1CE7 88 33                defw    PEEK
 331+ 1CE9 4A 3D                defw    DEEK
 332+ 1CEB 8F 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1CED 5E 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1CEF 69 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1CF1 7D 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1CF3 A3 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1CF5 43 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1CF7 E3 30                defw    LEN
 339+ 1CF9 FB 2E                defw    STR
 340+ 1CFB 73 32                defw    VAL
 341+ 1CFD F2 30                defw    ASC
 342+ 1CFF 03 31                defw    CHR
 343+ 1D01 FD 4B                defw    HEX         ; added by Grant Searle
 344+ 1D03 8E 4C                defw    BIN         ; added by Grant Searle
 345+ 1D05 13 31                defw    LEFT
 346+ 1D07 39 32                defw    RIGHT
 347+ 1D09 43 32                defw    MID
 348+ 1D0B
 349+ 1D0B              ; RESERVED WORD LIST
 350+ 1D0B              ; Here are all the reserved words used by the interpreter
 351+ 1D0B              ; To add custom functions/commands, the user must insert the keyword
 352+ 1D0B              ; in this list, following the schematic
 353+ 1D0B C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1D0E C6 4F 52             defb    'F'+$80,"OR"
 355+ 1D11 CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1D15 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1D19 C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1D1D 54
 358+ 1D1E C4 49 4D             defb    'D'+$80,"IM"
 359+ 1D21 D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1D25 CC 45 54             defb    'L'+$80,"ET"
 361+ 1D28 C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1D2C D2 55 4E             defb    'R'+$80,"UN"
 363+ 1D2F C9 46                defb    'I'+$80,"F"
 364+ 1D31 D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D35 4F 52 45
 365+ 1D38 C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D3C 42
 366+ 1D3D D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D41 52 4E
 367+ 1D43 D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D46 D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D4A CF 55 54             defb    'O'+$80,"UT"
 370+ 1D4D CF 4E                defb    'O'+$80,"N"
 371+ 1D4F C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D53 53
 372+ 1D54 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D58 45
 373+ 1D59 C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D5D D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D61 C4 45 46             defb    'D'+$80,"EF"
 376+ 1D64 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D68 C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D6C D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D70 45
 379+ 1D71 D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D75 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D79 D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D7D 45 4E
 382+ 1D7F CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1D83 54 45
 383+ 1D85 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1D89 44
 384+ 1D8A D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1D8E 4D 45
 385+ 1D90 D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1D94 45
 386+ 1D95 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1D99 52
 387+ 1D9A D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1D9E C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1DA2 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1DA6 4C 45
 390+ 1DA8 D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1DAC 54
 391+ 1DAD D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1DB1 41 4C
 392+ 1DB3 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1DB7 C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1DBA CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1DBD CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1DC0 C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1DC4 4E 54
 397+ 1DC6 D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1DCA 48
 398+ 1DCB D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1DCE D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DD2 54
 400+ 1DD3 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DD7 D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DDB 54
 402+ 1DDC C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1DE0 CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1DE4 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1DE8 52
 405+ 1DE9 CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1DED D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1DF1 CE 45 57             defb    'N'+$80,"EW"
 408+ 1DF4 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1DF8 D4 4F                defb    'T'+$80,"O"
 410+ 1DFA C6 4E                defb    'F'+$80,"N"
 411+ 1DFC D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1E00 D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1E04 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1E07 D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1E0B                      ; from here: operators
 416+ 1E0B AB                   defb    '+'+$80
 417+ 1E0C AD                   defb    '-'+$80
 418+ 1E0D AA                   defb    '*'+$80
 419+ 1E0E AF                   defb    '/'+$80
 420+ 1E0F A5                   defb    '%'+$80
 421+ 1E10 A3                   defb    '#'+$80
 422+ 1E11 DE                   defb    '^'+$80
 423+ 1E12 C1 4E 44             defb    'A'+$80,"ND"
 424+ 1E15 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1E18 CF 52                defb    'O'+$80,"R"
 426+ 1E1A BE                   defb    '>'+$80
 427+ 1E1B BD                   defb    '='+$80
 428+ 1E1C BC                   defb    '<'+$80
 429+ 1E1D
 430+ 1E1D                      ; from here there are the tokens' FUNCTIONS list
 431+ 1E1D                      ; this list must be coherent with the functions list above
 432+ 1E1D D3 47 4E             defb    'S'+$80,"GN"
 433+ 1E20 D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1E23 C9 4E 54             defb    'I'+$80,"NT"
 435+ 1E26 C1 42 53             defb    'A'+$80,"BS"
 436+ 1E29 D5 53 52             defb    'U'+$80,"SR"
 437+ 1E2C C6 52 45             defb    'F'+$80,"RE"
 438+ 1E2F C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E32 D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E35 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E38 D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E3B CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E3E C5 58 50             defb    'E'+$80,"XP"
 444+ 1E41 C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E44 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E47 D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E4A C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E4D D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E51 C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E55 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E59 4B
 451+ 1E5A D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E5E 54
 452+ 1E5F D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E63 54
 453+ 1E64 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E68 59
 454+ 1E69 D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E6D 54
 455+ 1E6E C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E72 52
 456+ 1E73 CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E76 D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E7A D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E7D C1 53 43             defb    'A'+$80,"SC"
 460+ 1E80 C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1E84 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1E88 C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1E8C CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1E90 24
 464+ 1E91 D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1E95 54 24
 465+ 1E97 CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1E9B 80                   defb    $80                     ; End-of-list marker
 467+ 1E9C
 468+ 1E9C              ; KEYWORD ADDRESS TABLE
 469+ 1E9C              ; this list must be coherent with the commands'
 470+ 1E9C              ; tokens list above
 471+ 1E9C 22 26        WORDTB: defw    PEND
 472+ 1E9E 1F 25                defw    FOR
 473+ 1EA0 1E 2A                defw    NEXT
 474+ 1EA2 81 27                defw    DATA
 475+ 1EA4 1B 29                defw    INPUT
 476+ 1EA6 73 2C                defw    DIM
 477+ 1EA8 55 29                defw    READ
 478+ 1EAA 98 27                defw    LET
 479+ 1EAC 3E 27                defw    GOTO
 480+ 1EAE 19 27                defw    RUN
 481+ 1EB0 10 28                defw    IF
 482+ 1EB2 E8 25                defw    RESTOR
 483+ 1EB4 2D 27                defw    GOSUB
 484+ 1EB6 5C 27                defw    RETURN
 485+ 1EB8 83 27                defw    REM         ; original REM
 486+ 1EBA 20 26                defw    STOP
 487+ 1EBC B8 32                defw    POUT
 488+ 1EBE F2 27                defw    ON
 489+ 1EC0 CE 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1EC2 09 4A                defw    ERASE       ; added by Leonardo Miliani
 491+ 1EC4 6D 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1EC6 BE 32                defw    WAIT
 493+ 1EC8 67 2E                defw    DEF
 494+ 1ECA B2 33                defw    POKE
 495+ 1ECC 55 3D                defw    DOKE
 496+ 1ECE B7 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1ED0 F4 33                defw    SREG        ; added by Leonardo Miliani
 498+ 1ED2 42 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1ED4 8B 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1ED6 C2 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1ED8 4E 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1EDA 15 34                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1EDC 6C 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1EDE 06 3E                defw    COLOR       ; added by Leonardo Miliani
 505+ 1EE0 F6 40                defw    PLOT        ; added by Leonardo Miliani
 506+ 1EE2 89 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1EE4 C2 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1EE6 B3 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1EE8 CD 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1EEA 0C 47                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1EEC 2E 3D                defw    CLS
 512+ 1EEE 2A 47                defw    KEY         ; added by Leonardo Miliani
 513+ 1EF0 00 33                defw    NMI         ; added by Leonardo Miliani
 514+ 1EF2 C2 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1EF4 42 3D                defw    WIDTH
 516+ 1EF6 5A 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1EF8 F3 4C                defw    RESET       ; new behaviour: now it resets the system
 518+ 1EFA 85 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1EFC 42 28                defw    PRINT
 520+ 1EFE 54 26                defw    CONT
 521+ 1F00 F6 23                defw    LIST
 522+ 1F02 CD 26                defw    CLEAR
 523+ 1F04 A1 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1F06 37 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1F08 CB 21                defw    NEW
 526+ 1F0A
 527+ 1F0A              ; RESERVED WORD TOKEN VALUES
 528+ 1F0A              ; if you add a function or command you must increment by 1
 529+ 1F0A              ; the values below. Pay attention that you must increment only the
 530+ 1F0A              ; values AFTER the position where you entered the function/command word
 531+ 1F0A              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1F0A              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1F0A              ; that is before the point where VPOKE has been entered, every entry
 534+ 1F0A              ; after REM has been incremented.
 535+ 1F0A              ; Another example: when TMR has been added, since it's a function, every
 536+ 1F0A              ; entry after & included ZSGN must be checked (read below)
 537+ 1F0A
 538+ 1F0A              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1F0A              ZFOR    equ     $81             ; FOR
 540+ 1F0A              ZDATA   equ     $83             ; DATA
 541+ 1F0A              ZGOTO   equ     $88             ; GOTO
 542+ 1F0A              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1F0A              ZREM    equ     $8E             ; REM
 544+ 1F0A              ZELSE   equ     $AF             ; ELSE
 545+ 1F0A              ZPRINT  equ     $B0             ; PRINT
 546+ 1F0A              ZNEW    equ     $B6             ; NEW
 547+ 1F0A
 548+ 1F0A              ZTAB    equ     $B7             ; TAB
 549+ 1F0A              ZTO     equ     $B8             ; TO
 550+ 1F0A              ZFN     equ     $B9             ; FN
 551+ 1F0A              ZSPC    equ     $BA             ; SPC
 552+ 1F0A              ZTHEN   equ     $BB             ; THEN
 553+ 1F0A              ZNOT    equ     $BC             ; NOT
 554+ 1F0A              ZSTEP   equ     $BD             ; STEP
 555+ 1F0A
 556+ 1F0A              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1F0A              ZMINUS  equ     $BF             ; -
 558+ 1F0A              ZTIMES  equ     $C0             ; *
 559+ 1F0A              ZDIV    equ     $C1             ; /
 560+ 1F0A              ZMOD    equ     $C2             ; %
 561+ 1F0A              ZDINT   equ     $C3             ; #
 562+ 1F0A              ZOR     equ     $C7             ; OR
 563+ 1F0A              ZGTR    equ     $C8             ; >
 564+ 1F0A              ZEQUAL  equ     $C9             ; M
 565+ 1F0A              ZLTH    equ     $CA             ; <
 566+ 1F0A
 567+ 1F0A              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1F0A              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1F0A                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1F0A              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1F0A              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1F0A                                              ;               he/she must increment this pointer by 1
 573+ 1F0A
 574+ 1F0A              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1F0A              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1F0A              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1F0A 79           PRITAB: defb    $79             ; Precedence value
 578+ 1F0B F7 39                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1F0D
 580+ 1F0D 79                   defb    $79             ; Precedence value
 581+ 1F0E DA 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1F10
 583+ 1F10 7C                   defb    $7C             ; Precedence value
 584+ 1F11 18 37                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1F13
 586+ 1F13 7C                   defb    $7C             ; Precedence value
 587+ 1F14 CA 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1F16
 589+ 1F16 7C                   defb    $7C             ; Precedence value
 590+ 1F17 75 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1F19
 592+ 1F19 7C                   defb    $7C             ; precedence value
 593+ 1F1A 6D 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1F1C
 595+ 1F1C 7F                   defb    $7F             ; Precedence value
 596+ 1F1D 18 3B                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1F1F
 598+ 1F1F 50                   defb    $50             ; Precedence value
 599+ 1F20 BC 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1F22
 601+ 1F22 4A                   defb    $4A             ; Precedence value
 602+ 1F23 C4 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1F25
 604+ 1F25 46                   defb    $46             ; Precedence value
 605+ 1F26 BF 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1F28
 607+ 1F28
 608+ 1F28              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1F28              ; these values are copied into RAM at startup
 610+ 1F28 C3 38 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1F2B ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1F2E C3 A3 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F31 D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F33 C9                   ret
 615+ 1F34 D6 00                sub     $00             ; Division support routine
 616+ 1F36 6F                   ld      L,A
 617+ 1F37 7C                   ld      A,H
 618+ 1F38 DE 00                sbc     A,$00
 619+ 1F3A 67                   ld      H,A
 620+ 1F3B 78                   ld      A,B
 621+ 1F3C DE 00                sbc     A,$00
 622+ 1F3E 47                   ld      B,A
 623+ 1F3F 3E 00                ld      A,$00
 624+ 1F41 C9                   ret
 625+ 1F42 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F45 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F49 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F4D 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F51 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F55 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F59 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F5D 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F61 D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F65 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F69 DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F6B C9                   ret
 637+ 1F6C FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F6D 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F6E 00                   defb    $00             ; No nulls after input bytes
 640+ 1F6F 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F70 00 00                defw    $00             ; Array load/save check sum
 642+ 1F72 00                   defb    $00             ; Break not by NMI
 643+ 1F73 00                   defb    $00             ; Break flag
 644+ 1F74 C3 0F 23             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F77 D2 82                defw    STLOOK          ; Temp string space
 646+ 1F79 FE FF                defw    -2              ; Current line number (cold)
 647+ 1F7B FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F7D 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1F7E 08                   defb    $08             ; auto-repeat delay
 650+ 1F7F 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1F83 0D 00 00 00
 650+ 1F87 00 00 00 00
 650+ 1F8B 00 00 00 00
 651+ 1F8F 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1F93 00 00 00 00
 651+ 1F97 00 00 00 00
 651+ 1F9B 00 00 00 00
 652+ 1F9F 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1FA3 45 4E 31 0D
 652+ 1FA7 00 00 00 00
 652+ 1FAB 00 00 00 00
 653+ 1FAF 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1FB3 52 31 2C 31
 653+ 1FB7 35 2C 35 0D
 653+ 1FBB 00 00 00 00
 654+ 1FBF 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1FC3 41 4C 31 2C
 654+ 1FC7 33 38 34 30
 654+ 1FCB 30 0D 00 00
 655+ 1FCF 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FD3 45 4E 32 0D
 655+ 1FD7 00 00 00 00
 655+ 1FDB 00 00 00 00
 656+ 1FDF 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 1FE3 0D 00 00 00
 656+ 1FE7 00 00 00 00
 656+ 1FEB 00 00 00 00
 657+ 1FEF 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 1FF3 0D 00 00 00
 657+ 1FF7 00 00 00 00
 657+ 1FFB 00 00 00 00
 658+ 1FFF 6F 82                defw    PROGST+1        ; Start of program text
 659+ 2001              INITBE:
 660+ 2001
 661+ 2001              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 2001
 663+ 2001 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 2005 6F 72 00
 664+ 2008 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 200C 00
 665+ 200D              ZERBYT  equ     $-1             ; A zero byte
 666+ 200D 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 2011 00
 667+ 2012 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 2016 6B 00
 668+ 2018
 669+ 2018 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 201B 39                   add     HL,SP           ; same index as specified
 671+ 201C 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 201D 23                   inc     HL              ; Point to index address
 673+ 201E FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 2020 C0                   ret     NZ              ; No - exit
 675+ 2021 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 2022 23                   inc     HL
 677+ 2023 46                   ld      B,(HL)
 678+ 2024 23                   inc     HL              ; Point to sign of STEP
 679+ 2025 E5                   push    HL              ; Save pointer to sign
 680+ 2026 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 2027 60                   ld      H,B
 682+ 2028 7A                   ld      A,D             ; See if an index was specified
 683+ 2029 B3                   or      E               ; DE = 0 if no index specified
 684+ 202A EB                   ex      DE,HL           ; Specified index into HL
 685+ 202B CA 32 20             jp      Z,INDFND        ; Skip if no index given
 686+ 202E EB                   ex      DE,HL           ; Index back into DE
 687+ 202F CD 89 23             call    CPDEHL          ; Compare index with one given
 688+ 2032 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2035 E1                   pop     HL              ; Restore pointer to sign
 690+ 2036 C8                   ret     Z               ; Return if block found
 691+ 2037 09                   add     HL,BC           ; Point to next block
 692+ 2038 C3 1C 20             jp      LOKFOR          ; Keep on looking
 693+ 203B
 694+ 203B CD 55 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 203E C5           MOVSTR: push    BC              ; Save end of source
 696+ 203F E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 2040 C1                   pop     BC              ; Get end of destination
 698+ 2041 CD 89 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2044 7E                   ld      A,(HL)          ; Get byte
 700+ 2045 02                   ld      (BC),A          ; Move it
 701+ 2046 C8                   ret     Z               ; Exit if all done
 702+ 2047 0B                   dec     BC              ; Next byte to move to
 703+ 2048 2B                   dec     HL              ; Next byte to move
 704+ 2049 C3 41 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 204C
 706+ 204C E5           CHKSTK: push    HL              ; Save code string address
 707+ 204D 2A 4F 82             ld      HL,(ARREND)     ; Lowest free memory
 708+ 2050 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 2052 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 2053 09                   add     HL,BC
 711+ 2054 3E                   defb    $3E             ; Skip "push HL"
 712+ 2055 E5           ENFMEM: push    HL              ; Save code string address
 713+ 2056 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 2058 95                   sub     L
 715+ 2059 6F                   ld      L,A
 716+ 205A 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 205C 9C                   sbc     A,H
 718+ 205D DA 64 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 2060 67                   ld      H,A
 720+ 2061 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 2062 E1                   pop     HL              ; Restore code string address
 722+ 2063 D8                   ret     C               ; Return if enough memory
 723+ 2064 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 2066 C3 A9 20             jp      ERROR
 725+ 2069
 726+ 2069
 727+ 2069              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 2069 F5           EXITGM: push    AF              ; store AF
 729+ 206A 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
 730+ 206D FE 02                cp      $02             ; G2?
 731+ 206F CA 76 20             jp      Z,LDG1          ; yes, back to G1
 732+ 2072 FE 03                cp      $03             ; G3?
 733+ 2074 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 2076 E5           LDG1:   push    HL              ; store HL
 735+ 2077 D5                   push    DE              ; store DE
 736+ 2078 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 207B F3                   di                      ; disable INTs
 738+ 207C CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 207F FB                   ei                      ; re-enable INTs
 740+ 2080 3E 01                ld      A,$01           ; activate the...
 741+ 2082 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 2085 D1                   pop     DE              ; retrieve DE
 743+ 2086 E1                   pop     HL              ; retrieve HL
 744+ 2087 F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 2088 C9                   ret                     ; return to caller
 746+ 2089
 747+ 2089
 748+ 2089 2A D8 81     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 208C 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 750+ 208F 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 2091 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 2092 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 2094 01                   defb    $01             ; Skip "ld E,NF"
 754+ 2095 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 2097 01                   defb    $01             ; Skip "ld E,DD"
 756+ 2098 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 209A 01                   defb    $01             ; Skip "ld E,UF"
 758+ 209B 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 209D 01                   defb    $01             ; Skip "ld E,OV
 760+ 209E 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 20A0 01                   defb    $01             ; Skip "ld E,TM"
 762+ 20A1 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 20A3 01                   defb    $01             ; Skip next statement
 764+ 20A4 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 20A6 01                   defb    $01             ; Skip next statement
 766+ 20A7 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 20A9
 768+ 20A9 CD F1 21     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 20AC CD 69 20             call    EXITGM          ; exit from graphic modes
 770+ 20AF 32 A5 80             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 20B2 CD 44 09             call    CURSOR_ON       ; enable cursor
 772+ 20B5 CD 93 28             call    STTLIN          ; Start new line
 773+ 20B8 21 D7 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 20BB 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 20BC 3E 3F                ld      A,'?'
 776+ 20BE CD 9A 23             call    OUTC            ; Output '?'
 777+ 20C1 19                   add     HL,DE           ; Offset to correct error code
 778+ 20C2 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 20C3 23                   inc     HL              ; by loading LSB,
 780+ 20C4 56                   ld      D,(HL)          ; then MSB
 781+ 20C5 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 20C7 CD 71 2F             call    PRS             ; Output error message
 783+ 20CA 21 01 20             ld      HL,ERRMSG       ; "Error" message
 784+ 20CD CD 71 2F     ERRIN:  call    PRS             ; Output message
 785+ 20D0 2A AF 80             ld      HL,(LINEAT)     ; Get line of error
 786+ 20D3 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20D6 CD 89 23             call    CPDEHL          ; See if cold start error
 788+ 20D9 CA 77 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20DC 7C                   ld      A,H             ; Was it a direct error?
 790+ 20DD A5                   and     L               ; Line = -1 if direct error
 791+ 20DE 3C                   inc     A
 792+ 20DF CA EA 20             jp      Z,PTLN          ; Yes, jump over
 793+ 20E2 E5                   push    HL              ; indirect mode - store HL
 794+ 20E3 2A AF 80             ld      HL,(LINEAT)     ; copy current line number
 795+ 20E6 22 B1 80             ld      (HLPLN),HL      ; save in HELP line register
 796+ 20E9 E1                   pop     HL              ; retrieve HL
 797+ 20EA C4 08 3A     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 20ED
 799+ 20ED 3E                   defb    $3E             ; Skip "pop BC"
 800+ 20EE C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 20EF
 802+ 20EF              ; run into direct mode: print OK and get command
 803+ 20EF AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 20F0 32 A5 80             ld      (CTLOFG),A      ; Enable output
 805+ 20F3 CD 93 28             call    STTLIN          ; Start new line
 806+ 20F6 21 0D 20             ld      HL,OKMSG        ; "Ok" message
 807+ 20F9 CD 71 2F             call    PRS             ; Output "Ok"
 808+ 20FC CD 44 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 20FF 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 810+ 2102 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 2104 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 2107 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 210A 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 814+ 210D CD 0F 23             call    GETLIN          ; Get an input line
 815+ 2110 DA FC 20             jp      C,GETCMD        ; Get line again if break
 816+ 2113 CD D8 25             call    GETCHR          ; Get first character
 817+ 2116 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 2117 DA 8F 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 211A 1F                   rra                     ; recover original char and Carry
 820+ 211B 3C                   inc     A               ; Test if end of line
 821+ 211C 3D                   dec     A               ; Without affecting Carry
 822+ 211D CA FC 20             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 2120 F5                   push    AF              ; Save Carry status
 824+ 2121 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 825+ 2124 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 2126 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 2129 CD 59 09             call    CURSOR_OFF      ; cursor disabled
 828+ 212C CD A8 26             call    ATOH            ; Get line number into DE
 829+ 212F D5                   push    DE              ; Save line number
 830+ 2130 CD 26 22             call    CRUNCH          ; Tokenise rest of line
 831+ 2133 47                   ld      B,A             ; Length of tokenised line
 832+ 2134 D1                   pop     DE              ; Restore line number
 833+ 2135 F1                   pop     AF              ; Restore Carry
 834+ 2136 D2 B8 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 2139 D5                   push    DE              ; Save line number
 836+ 213A C5                   push    BC              ; Save length of tokenised line
 837+ 213B AF                   xor     A
 838+ 213C 32 DB 81             ld      (LSTBIN),A      ; Clear last byte input
 839+ 213F CD D8 25             call    GETCHR          ; Get next character
 840+ 2142 B7                   or      A               ; Set flags
 841+ 2143 F5                   push    AF              ; And save them
 842+ 2144 CD AB 21             call    SRCHLN          ; Search for line number in DE
 843+ 2147 DA 50 21             jp      C,LINFND        ; Jump if line found
 844+ 214A F1                   pop     AF              ; Get status
 845+ 214B F5                   push    AF              ; And re-save
 846+ 214C CA 57 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 214F B7                   or      A               ; Clear Carry
 848+ 2150 C5           LINFND: push    BC              ; Save address of line in prog
 849+ 2151 D2 67 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2154 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2155 2A 4B 82             ld      HL,(PROGND)     ; End of program
 852+ 2158 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 2159 02                   ld      (BC),A
 854+ 215A 03                   inc     BC              ; Next destination
 855+ 215B 13                   inc     DE              ; Next source
 856+ 215C CD 89 23             call    CPDEHL          ; All done?
 857+ 215F C2 58 21             jp      NZ,SFTPRG       ; More to do
 858+ 2162 60                   ld      H,B             ; HL - New end of program
 859+ 2163 69                   ld      L,C
 860+ 2164 22 4B 82             ld      (PROGND),HL     ; Update end of program
 861+ 2167
 862+ 2167 D1           INEWLN: pop     DE              ; Get address of line,
 863+ 2168 F1                   pop     AF              ; Get status
 864+ 2169 CA 8E 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 216C 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 866+ 216F E3                   ex      (SP),HL         ; Get length of input line
 867+ 2170 C1                   pop     BC              ; End of program to BC
 868+ 2171 09                   add     HL,BC           ; Find new end
 869+ 2172 E5                   push    HL              ; Save new end
 870+ 2173 CD 3B 20             call    MOVUP           ; Make space for line
 871+ 2176 E1                   pop     HL              ; Restore new end
 872+ 2177 22 4B 82             ld      (PROGND),HL     ; Update end of program pointer
 873+ 217A EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 217B 74                   ld      (HL),H          ; Save MSB
 875+ 217C D1                   pop     DE              ; Get new line number
 876+ 217D 23                   inc     HL              ; Skip pointer
 877+ 217E 23                   inc     HL
 878+ 217F 73                   ld      (HL),E          ; Save LSB of line number
 879+ 2180 23                   inc     HL
 880+ 2181 72                   ld      (HL),D          ; Save MSB of line number
 881+ 2182 23                   inc     HL              ; To first byte in line
 882+ 2183 11 38 81             ld      DE,BUFFER       ; Copy buffer to program
 883+ 2186 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 2187 77                   ld      (HL),A          ; Save destinations
 885+ 2188 23                   inc     HL              ; Next source
 886+ 2189 13                   inc     DE              ; Next destination
 887+ 218A B7                   or      A               ; Done?
 888+ 218B C2 86 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 218E CD D7 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 2191 23                   inc     HL              ; To LSB of pointer
 891+ 2192 EB                   ex      DE,HL           ; Address to DE
 892+ 2193 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 2194 6B                   ld      L,E
 894+ 2195 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 2196 23                   inc     HL              ; To MSB of pointer
 896+ 2197 B6                   or      (HL)            ; Compare with MSB pointer
 897+ 2198 CA FC 20             jp      Z,GETCMD        ; Get command line if end
 898+ 219B 23                   inc     HL              ; To LSB of line number
 899+ 219C 23                   inc     HL              ; Skip line number
 900+ 219D 23                   inc     HL              ; Point to first byte in line
 901+ 219E AF                   xor     A               ; Looking for 00 byte
 902+ 219F BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 21A0 23                   inc     HL              ; Move to next byte
 904+ 21A1 C2 9F 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 21A4 EB                   ex      DE,HL           ; Next line address to HL
 906+ 21A5 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 21A6 23                   inc     HL
 908+ 21A7 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 21A8 C3 93 21             jp      PTRLP           ; Do next line
 910+ 21AB
 911+ 21AB 2A 35 81     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 21AE 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 21AF 4D                   ld      C,L
 914+ 21B0 7E                   ld      A,(HL)          ; Get address of next line
 915+ 21B1 23                   inc     HL
 916+ 21B2 B6                   or      (HL)            ; End of program found?
 917+ 21B3 2B                   dec     HL
 918+ 21B4 C8                   ret     Z               ; Yes - Line not found
 919+ 21B5 23                   inc     HL
 920+ 21B6 23                   inc     HL
 921+ 21B7 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 21B8 23                   inc     HL
 923+ 21B9 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 21BA 6F                   ld      L,A
 925+ 21BB CD 89 23             call    CPDEHL          ; Compare with line in DE
 926+ 21BE 60                   ld      H,B             ; HL = Start of this line
 927+ 21BF 69                   ld      L,C
 928+ 21C0 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 21C1 23                   inc     HL
 930+ 21C2 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 21C3 6F                   ld      L,A             ; Next line to HL
 932+ 21C4 3F                   ccf
 933+ 21C5 C8                   ret     Z               ; Lines found - Exit
 934+ 21C6 3F                   ccf
 935+ 21C7 D0                   ret     NC              ; Line not found,at line after
 936+ 21C8 C3 AE 21             jp      SRCHLP          ; Keep looking
 937+ 21CB
 938+ 21CB C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 21CC 2A 35 81     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 21CF AF                   xor     A               ; Set program area to empty
 941+ 21D0 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21D1 23                   inc     HL
 943+ 21D2 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21D3 23                   inc     HL
 945+ 21D4 22 4B 82             ld      (PROGND),HL     ; Set program end
 946+ 21D7
 947+ 21D7 2A 35 81     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21DA 2B                   dec     HL
 949+ 21DB
 950+ 21DB 22 DD 81     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 21DE 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 21E1 22 D2 81             ld      (STRBOT),HL     ; Clear string space
 953+ 21E4 AF                   xor     A
 954+ 21E5 CD E8 25             call    RESTOR          ; Reset DATA pointers
 955+ 21E8 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 956+ 21EB 22 4D 82             ld      (VAREND),HL     ; Clear variables
 957+ 21EE 22 4F 82             ld      (ARREND),HL     ; Clear arrays
 958+ 21F1
 959+ 21F1 C1           CLREG:  pop     BC              ; Save return address
 960+ 21F2 2A AD 80             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 21F5 F9                   ld      SP,HL           ; Set stack
 962+ 21F6 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
 963+ 21F9 22 C0 81             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 21FC AF                   xor     A               ; A = 00
 965+ 21FD 6F                   ld      L,A             ; HL = 0000
 966+ 21FE 67                   ld      H,A
 967+ 21FF 22 E3 81             ld      (CONTAD),HL     ; No CONTinue
 968+ 2202 32 DA 81             ld      (FORFLG),A      ; Clear FOR flag
 969+ 2205 22 53 82             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 2208 E5                   push    HL              ; HL = 0000
 971+ 2209 C5                   push    BC              ; Put back return
 972+ 220A 2A DD 81     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 220D C9                   ret                     ; Return to execution driver
 974+ 220E
 975+ 220E 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 2210 CD 9A 23             call    OUTC            ; Output character
 977+ 2213 3E 00                ld      A,NLLCR         ; null char
 978+ 2215 CD 9A 23             call    OUTC            ; Output character
 979+ 2218 CD 44 09             call    CURSOR_ON       ; enable cursor
 980+ 221B 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 981+ 221E EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 2220 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 2223 C3 AA 80             jp      RINPUT          ; Get input line
 984+ 2226
 985+ 2226 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 2227 32 95 81             ld      (DATFLG),A      ; Reset literal flag
 987+ 222A 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 222C 11 38 81             ld      DE,BUFFER       ; Start of input buffer
 989+ 222F 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 2230 FE 20                cp      SPC             ; Is it a space?
 991+ 2232 CA AE 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2235 47                   ld      B,A             ; Save character
 993+ 2236 FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 2238 CA CE 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 223B B7                   or      A               ; Is it end of buffer?
 996+ 223C CA D5 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 223F 3A 95 81             ld      A,(DATFLG)      ; Get data type
 998+ 2242 B7                   or      A               ; Literal?
 999+ 2243 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2244 C2 AE 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 2247 FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 2249 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 224B CA AE 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 224E 7E                   ld      A,(HL)          ; Get byte again
1005+ 224F FE 30                cp      '0'             ; Is it less than '0'
1006+ 2251 DA 59 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2254 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 2256 DA AE 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 2259 D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 225A 11 0A 1D             ld      DE,WORDS-1      ; Point to table
1011+ 225D C5                   push    BC              ; Save count
1012+ 225E 01 AA 22             ld      BC,RETNAD       ; Where to return to
1013+ 2261 C5                   push    BC              ; Save return address
1014+ 2262 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2264 7E                   ld      A,(HL)          ; Get byte
1016+ 2265 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 2267 DA 72 22             jp      C,SEARCH        ; Yes - search for words
1018+ 226A FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 226C D2 72 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 226F E6 5F                and     %01011111       ; Force upper case
1021+ 2271 77                   ld      (HL),A          ; Replace byte
1022+ 2272 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 2273 EB                   ex      DE,HL
1024+ 2274 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2275 B6                   or      (HL)            ; Start of word?
1026+ 2276 F2 74 22             jp      P,GETNXT        ; No - move on
1027+ 2279 04                   inc     B               ; Increment token value
1028+ 227A 7E                   ld      A,(HL)          ; Get byte from table
1029+ 227B E6 7F                and     %01111111       ; Strip bit 7
1030+ 227D C8                   ret     Z               ; Return if end of list
1031+ 227E B9                   cp      C               ; Same character as in buffer?
1032+ 227F C2 74 22             jp      NZ,GETNXT       ; No - get next word
1033+ 2282 EB                   ex      DE,HL
1034+ 2283 E5                   push    HL              ; Save start of word
1035+ 2284
1036+ 2284 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 2285 1A                   ld      A,(DE)          ; Get byte from table
1038+ 2286 B7                   or      A               ; End of word ?
1039+ 2287 FA A6 22             jp      M,MATCH         ; Yes - Match found
1040+ 228A 4F                   ld      C,A             ; Save it
1041+ 228B 78                   ld      A,B             ; Get token value
1042+ 228C FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 228E C2 95 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 2291 CD D8 25             call    GETCHR          ; Get next character
1045+ 2294 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 2295 23           NOSPC:  inc     HL              ; Next byte
1047+ 2296 7E                   ld      A,(HL)          ; Get byte
1048+ 2297 FE 61                cp      'a'             ; Less than 'a' ?
1049+ 2299 DA 9E 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 229C E6 5F                and     %01011111       ; Make upper case
1051+ 229E B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 229F CA 84 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 22A2 E1                   pop     HL              ; Get back start of word
1054+ 22A3 C3 72 22             jp      SEARCH          ; Look at next word
1055+ 22A6
1056+ 22A6 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 22A7 F1                   pop     AF              ; Throw away return
1058+ 22A8 EB                   ex      DE,HL
1059+ 22A9 C9                   ret                     ; Return to "RETNAD"
1060+ 22AA EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 22AB 79                   ld      A,C             ; Get token value
1062+ 22AC C1                   pop     BC              ; Restore buffer length
1063+ 22AD D1                   pop     DE              ; Get destination address
1064+ 22AE 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 22AF 12                   ld      (DE),A          ; Put byte in buffer
1066+ 22B0 13                   inc     DE              ; Move up buffer
1067+ 22B1 0C                   inc     C               ; Increment length of buffer
1068+ 22B2 D6 3A                sub     ':'             ; End of statement?
1069+ 22B4 CA BC 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 22B7 FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 22B9 C2 BF 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 22BC 32 95 81     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 22BF D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 22C1 C2 2F 22             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 22C4 47                   ld      B,A             ; Copy rest of buffer
1076+ 22C5 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 22C6 B7                   or      A               ; End of line ?
1078+ 22C7 CA D5 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 22CA B8                   cp      B               ; End of statement ?
1080+ 22CB CA AE 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 22CE 23           CPYLIT: inc     HL              ; Move up source string
1082+ 22CF 12                   ld      (DE),A          ; Save in destination
1083+ 22D0 0C                   inc     C               ; Increment length
1084+ 22D1 13                   inc     DE              ; Move up destination
1085+ 22D2 C3 C5 22             jp      NXTCHR          ; Repeat
1086+ 22D5
1087+ 22D5 21 37 81     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22D8 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22D9 13                   inc     DE
1090+ 22DA 12                   ld      (DE),A          ; A = 00
1091+ 22DB 13                   inc     DE
1092+ 22DC 12                   ld      (DE),A          ; A = 00
1093+ 22DD C9                   ret
1094+ 22DE
1095+ 22DE 3A A4 80     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 22E1 B7                   or      A               ; Is it zero?
1097+ 22E2 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 22E4 32 A4 80             ld      (NULFLG),A      ; Zero null flag
1099+ 22E7 C2 F2 22             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 22EA 05                   dec     B               ; Decrement length
1101+ 22EB CA 0F 23             jp      Z,GETLIN        ; Get line again if empty
1102+ 22EE CD 9A 23             call    OUTC            ; Output null character
1103+ 22F1 3E                   defb    $3E             ; Skip "dec B"
1104+ 22F2 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 22F3 2B                   dec     HL              ; Back space buffer
1106+ 22F4 CA 06 23             jp      Z,OTKLN         ; No buffer - Try again
1107+ 22F7 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 22F8 CD 9A 23             call    OUTC            ; Echo it
1109+ 22FB C3 18 23             jp      MORINP          ; Get more input
1110+ 22FE
1111+ 22FE 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 22FF 2B                   dec     HL              ; Back space buffer
1113+ 2300 CD 9A 23             call    OUTC            ; Output character in A
1114+ 2303 C2 18 23             jp      NZ,MORINP       ; Not end - Get more
1115+ 2306 CD 9A 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 2309 CD A5 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 230C C3 0F 23             jp      TTYLIN          ; Get line again
1118+ 230F
1119+ 230F              GETLIN:
1120+ 230F 21 38 81     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 2312 06 01                ld      B,$01           ; Set buffer as empty
1122+ 2314 AF                   xor     A
1123+ 2315 32 A4 80             ld      (NULFLG),A      ; Clear null flag
1124+ 2318 CD DB 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 231B 4F                   ld      C,A             ; Save character in C
1126+ 231C FE 7F                cp      DEL             ; Delete character?
1127+ 231E CA DE 22             jp      Z,DODEL         ; Yes - Process it
1128+ 2321 3A A4 80             ld      A,(NULFLG)      ; Get null flag
1129+ 2324 B7                   or      A               ; Test null flag status
1130+ 2325 CA 31 23             jp      Z,PROCES        ; Reset - Process character
1131+ 2328 3E 00                ld      A,$00           ; Set a null
1132+ 232A CD 9A 23             call    OUTC            ; Output null
1133+ 232D AF                   xor     A               ; Clear A
1134+ 232E 32 A4 80             ld      (NULFLG),A      ; Reset null flag
1135+ 2331 79           PROCES: ld      A,C             ; Get character
1136+ 2332 FE 07                cp      CTRLG           ; Bell?
1137+ 2334 CA 71 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 2337 FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 2339 CC 66 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 233C 37                   scf                     ; Flag break
1141+ 233D C8                   ret     Z               ; Return if control "C"
1142+ 233E FE 0D                cp      CR              ; Is it enter?
1143+ 2340 CA 9B 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 2343 FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2345 CA 09 23             jp      Z,KILIN         ; Yes - Get another line
1146+ 2348 FE 08                cp      BKSP            ; Is it backspace?
1147+ 234A CA FE 22             jp      Z,DELCHR        ; Yes - Delete character
1148+ 234D FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 234F C2 6C 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 2352 C5                   push    BC              ; Save buffer length
1151+ 2353 D5                   push    DE              ; Save DE
1152+ 2354 E5                   push    HL              ; Save buffer address
1153+ 2355 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 2357 CD 18 4D             call    OUTNCR          ; Output and do CRLF
1155+ 235A 21 38 81             ld      HL,BUFFER       ; Point to buffer start
1156+ 235D CD 71 2F             call    PRS             ; Output buffer
1157+ 2360 E1                   pop     HL              ; Restore buffer address
1158+ 2361 D1                   pop     DE              ; Restore DE
1159+ 2362 C1                   pop     BC              ; Restore buffer length
1160+ 2363 C3 18 23             jp      MORINP          ; Get another character
1161+ 2366 CD 69 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 2369 C3 A5 28             jp      PRNTCRLF        ; output CRLF
1163+ 236C
1164+ 236C FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 236E DA 18 23             jp      C,MORINP        ; Yes - Ignore
1166+ 2371 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 2372 FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2374 3E 08                ld      A,BKSP          ; Set a bell
1169+ 2376 D2 83 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 2379 79                   ld      A,C             ; Get character
1171+ 237A 71                   ld      (HL),C          ; Save in buffer
1172+ 237B 32 DB 81             ld      (LSTBIN),A      ; Save last input byte
1173+ 237E 23                   inc     HL              ; Move up buffer
1174+ 237F 04                   inc     B               ; Increment length
1175+ 2380 C3 18 23     OUTIT:  jp      MORINP          ; Get another character
1176+ 2383
1177+ 2383 CD 9A 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 2386 C3 80 23             jp      OUTIT           ; get more chars
1179+ 2389
1180+ 2389 7C           CPDEHL: ld      A,H             ; Get H
1181+ 238A 92                   sub     D               ; Compare with D
1182+ 238B C0                   ret     NZ              ; Different - Exit
1183+ 238C 7D                   ld      A,L             ; Get L
1184+ 238D 93                   sub     E               ; Compare with E
1185+ 238E C9                   ret                     ; Return status
1186+ 238F
1187+ 238F 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 2390 E3                   ex      (SP),HL         ; Address of test byte
1189+ 2391 BE                   cp      (HL)            ; Same as in code string?
1190+ 2392 23                   inc     HL              ; Return address
1191+ 2393 E3                   ex      (SP),HL         ; Put it back
1192+ 2394 CA D8 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 2397 C3 8F 20             jp      SNERR           ; Different - ?SN Error
1194+ 239A
1195+ 239A F5           OUTC:   push    AF              ; Save character
1196+ 239B 3A A5 80             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 239E B7                   or      A               ; Is it set?
1198+ 239F C2 A6 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 23A2 F1                   pop     AF              ; Restore character
1200+ 23A3 C5                   push    BC              ; Save buffer length
1201+ 23A4 F5                   push    AF              ; Save character
1202+ 23A5 FE 20                cp      SPC             ; Is it a control code?
1203+ 23A7 DA BE 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 23AA 3A A2 80             ld      A,(LWIDTH)      ; Get line width
1205+ 23AD 47                   ld      B,A             ; To B
1206+ 23AE 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1207+ 23B1 04                   inc     B               ; Width 255?
1208+ 23B2 CA BA 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 23B5 05                   dec     B               ; Restore width
1210+ 23B6 B8                   cp      B               ; At end of line?
1211+ 23B7 CC A5 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 23BA 3C           INCLEN: inc     A               ; Move on one character
1213+ 23BB 32 92 81             ld      (CURPOS),A      ; Save new position
1214+ 23BE AF           DINPOS: xor     A
1215+ 23BF 32 3F 82             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 23C2 F1                   pop     AF              ; Restore character
1217+ 23C3 C1                   pop     BC              ; Restore buffer length
1218+ 23C4 F5                   push    AF
1219+ 23C5 CD CD 23             call    SND2VID         ; send char to video
1220+ 23C8 F1                   pop     AF
1221+ 23C9 CD F0 4C             call    MONOUT          ; send char to serial if enabled
1222+ 23CC C9                   ret
1223+ 23CD
1224+ 23CD              ; print char to video if cursor is on
1225+ 23CD 32 02 82     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23D0 3A 01 82             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23D3 B7                   or      A               ; is it off?
1228+ 23D4 C8                   ret     Z               ; yes, so return
1229+ 23D5 F3                   di                      ; disable INTs
1230+ 23D6 CD 78 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23D9 FB                   ei                      ; re-enable INTs
1232+ 23DA C9                   ret                     ; return to caller
1233+ 23DB
1234+ 23DB CD 2C 3D     CLOTST: call    GETINP          ; Get input character
1235+ 23DE FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 23E0 C0                   ret     NZ              ; No don't flip flag
1237+ 23E1 3A A5 80             ld      A,(CTLOFG)      ; Get flag
1238+ 23E4 2F                   cpl                     ; Flip it
1239+ 23E5 32 A5 80             ld      (CTLOFG),A      ; Put it back
1240+ 23E8 A7                   and     A               ; is output enabled?
1241+ 23E9 CC 44 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 23EC 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1243+ 23EF EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 23F1 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 23F4 AF                   xor     A               ; Null character
1246+ 23F5 C9                   ret
1247+ 23F6
1248+ 23F6              ; LIST: list the program stored into memory
1249+ 23F6 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 23F7 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 23F8 CD D8 25             call    GETCHR          ; Get next character
1252+ 23FB CA 51 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 23FE FE BF                cp      ZMINUS          ; is it '-'?
1254+ 2400 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 2402 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 2405 CD F2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 2408 ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 240C CD 8F 23             call    CHKSYN          ; skip '-'
1259+ 240F BF                   defb    ZMINUS
1260+ 2410 CD A8 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 2413 CD F8 24             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 2416 ED 43 07 82          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 241A ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 241E C5                   push    BC              ; store address of line for later use
1265+ 241F C3 89 24             jp      LISTLP          ; go listing
1266+ 2422 CD A8 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 2425 ED 53 0B 82  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 2429 CD F2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 242C ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 2430 ED 43 07 82          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2434 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2435 CD D8 25             call    GETCHR          ; Get next character
1273+ 2438 CA 44 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 243B FE BF                cp      ZMINUS          ; is it '-'?
1275+ 243D CA 69 24             jp      Z,LST03         ; yes, read ending line
1276+ 2440 C5           LST06:  push    BC              ; store address for later use
1277+ 2441 C3 89 24             jp      LISTLP          ; jump to list
1278+ 2444 ED 5B 0B 82  LSTNOT: ld      DE,(TMPBFR4)
1279+ 2448 CD F2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 244B DA 40 24             jp      C,LST06
1281+ 244E C3 EF 20             jp      PRNTOK
1282+ 2451 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2454 CD F2 24             call    SRCHLIN         ; get address of last line
1284+ 2457 ED 43 07 82          ld      (TMPBFR2),BC    ; store it
1285+ 245B 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 245E CD F2 24             call    SRCHLIN         ; get address of first line
1287+ 2461 ED 43 05 82          ld      (TMPBFR1),BC    ; store it
1288+ 2465 C5                   push    BC              ; store address of starting line for later use
1289+ 2466 C3 89 24             jp      LISTLP          ; start printing
1290+ 2469 CD 8F 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 246C BF                   defb    ZMINUS
1292+ 246D CD A8 26             call    ATOH            ; look for another number (return into DE)
1293+ 2470 7A                   ld      A,D
1294+ 2471 B3                   or      E               ; is line=0?
1295+ 2472 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2474 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 2477 CD F2 24             call    SRCHLIN         ; get address of last line
1298+ 247A C3 80 24             jp      LST02
1299+ 247D CD F8 24     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 2480 ED 43 07 82  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 2484 ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 2488 C5                   push    BC              ; store it for later use
1303+ 2489 E1           LISTLP: pop     HL              ; Restore address of line
1304+ 248A 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 248B 23                   inc     HL
1306+ 248C 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 248D 23                   inc     HL
1308+ 248E 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 248F B1                   or      C
1310+ 2490 CA EF 20             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 2493 CD 03 26             call    TSTBRK          ; Test for break key
1312+ 2496 CD 06 25             call    TSTSPC          ; test for space
1313+ 2499 C5                   push    BC              ; Save address of next line
1314+ 249A 3A FA 81             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 249D A7                   and     A               ; is it at the beginning of a new line?
1316+ 249E 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 24A0 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 24A2 CD F0 4C             call    MONOUT          ; to serial if it's open
1319+ 24A5 AF                   xor     A               ; then, set cursor
1320+ 24A6 32 92 81             ld      (CURPOS),A      ; to position 0
1321+ 24A9 18 03                jr      LST07           ; and continue
1322+ 24AB CD A5 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 24AE 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 24AF 23                   inc     HL
1325+ 24B0 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 24B1 23                   inc     HL
1327+ 24B2 E5                   push    HL              ; Save address of line start
1328+ 24B3 EB                   ex      DE,HL           ; Line number to HL
1329+ 24B4 CD 10 3A             call    PRNTHL          ; Output line number in decimal
1330+ 24B7 3E 20                ld      A,SPC           ; Space after line number
1331+ 24B9 E1                   pop     HL              ; Restore start of line address
1332+ 24BA CD 9A 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 24BD 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 24BE B7                   or      A               ; End of line?
1335+ 24BF 23                   inc     HL              ; To next byte in line
1336+ 24C0 CA E4 24             jp      Z,NXTLN         ; Yes - check next line
1337+ 24C3 F2 BA 24             jp      P,LSTLP2        ; No token - output it
1338+ 24C6 D6 7F                sub     ZEND-1          ; Find and output word
1339+ 24C8 4F                   ld      C,A             ; Token offset+1 to C
1340+ 24C9 11 0B 1D             ld      DE,WORDS        ; Reserved word list
1341+ 24CC 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 24CD 13                   inc     DE              ; Move on to next
1343+ 24CE B7                   or      A               ; Is it start of word?
1344+ 24CF F2 CC 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24D2 0D                   dec     C               ; Count words
1346+ 24D3 C2 CC 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24D6 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24D8 CD 9A 23             call    OUTC            ; Output character
1349+ 24DB 1A                   ld      A,(DE)          ; Get next character
1350+ 24DC 13                   inc     DE              ; Move on to next
1351+ 24DD B7                   or      A               ; Is it end of word?
1352+ 24DE F2 D6 24             jp      P,OUTWRD        ; No - output the rest
1353+ 24E1 C3 BD 24             jp      LSTLP3          ; Next byte in line
1354+ 24E4 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 24E5 2A 07 82             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 24E8 CD 1E 4D             call    CMP16           ; check if current line is over last printable line
1357+ 24EB DA EF 20             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 24EE D5                   push    DE              ; store address of current line
1359+ 24EF C3 89 24             jp      LISTLP          ; continue listing
1360+ 24F2              ; look for the address of a program line
1361+ 24F2 E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 24F3 CD AB 21             call    SRCHLN          ; search for line number in DE
1363+ 24F6 E1                   pop     HL              ; retrieve HL
1364+ 24F7 C9                   ret                     ; return to caller
1365+ 24F8              ; look for the address of a program line - if the line isn't found,
1366+ 24F8              ; it look backward for the previous line
1367+ 24F8 E5           SRCLN:  push    HL              ; store HL
1368+ 24F9 CD AB 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 24FC DA 04 25             jp      C,LVSRLN        ; found it, leave loop
1370+ 24FF 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 2500 7B                   ld      A,E
1372+ 2501 B2                   or      D               ; is line number zero?
1373+ 2502 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 2504 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 2505 C9                   ret                     ; return to caller
1376+ 2506
1377+ 2506              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 2506              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 2506 3A 41 82     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 2509 FE 20                cp      SPC             ; Is it SPACE?
1381+ 250B C0                   ret     NZ              ; No, return
1382+ 250C CD 2C 3D     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 250F FE 20                cp      SPC             ; is it SPACE?
1384+ 2511 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 2513 AF                   xor     A
1386+ 2514 32 41 82             ld      (TMPKEYBFR),A   ; reset key
1387+ 2517 C9                   ret                     ; return to caller
1388+ 2518 FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 251A 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 251C C3 3B 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 251F
1392+ 251F
1393+ 251F 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 2521 32 DA 81             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 2524 CD 98 27             call    LET             ; Set up initial index
1396+ 2527 C1                   pop     BC              ; Drop RETurn address
1397+ 2528 E5                   push    HL              ; Save code string address
1398+ 2529 CD 81 27             call    DATA            ; Get next statement address
1399+ 252C 22 D6 81             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 252F 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 2532 39                   add     HL,SP           ; Point to it
1402+ 2533 CD 1C 20     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 2536 D1                   pop     DE              ; Get code string address
1404+ 2537 C2 4F 25             jp      NZ,FORFND       ; No nesting found
1405+ 253A 09                   add     HL,BC           ; Move into "FOR" block
1406+ 253B D5                   push    DE              ; Save code string address
1407+ 253C 2B                   dec     HL
1408+ 253D 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 253E 2B                   dec     HL
1410+ 253F 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 2540 23                   inc     HL
1412+ 2541 23                   inc     HL
1413+ 2542 E5                   push    HL              ; Save block address
1414+ 2543 2A D6 81             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 2546 CD 89 23             call    CPDEHL          ; Compare the FOR loops
1416+ 2549 E1                   pop     HL              ; Restore block address
1417+ 254A C2 33 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 254D D1                   pop     DE              ; Restore code string address
1419+ 254E F9                   ld      SP,HL           ; Remove all nested loops
1420+ 254F
1421+ 254F EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 2550 0E 08                ld      C,$08
1423+ 2552 CD 4C 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2555 E5                   push    HL              ; Save code string address
1425+ 2556 2A D6 81             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 2559 E3                   ex      (SP),HL         ; Save and restore code string
1427+ 255A E5                   push    HL              ; Re-save code string address
1428+ 255B 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
1429+ 255E E3                   ex      (SP),HL         ; Save and restore code string
1430+ 255F CD 6C 2A             call    TSTNUM          ; Make sure it's a number
1431+ 2562 CD 8F 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2565 B8                   defb    ZTO             ; "TO" token
1433+ 2566 CD 69 2A             call    GETNUM          ; Get "TO" expression value
1434+ 2569 E5                   push    HL              ; Save code string address
1435+ 256A CD C2 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 256D E1                   pop     HL              ; Restore code string address
1437+ 256E C5                   push    BC              ; Save "TO" value in block
1438+ 256F D5                   push    DE
1439+ 2570 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 2573 51                   ld      D,C             ; C=0
1441+ 2574 5A                   ld      E,D             ; D=0
1442+ 2575 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 2576 FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 2578 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 257A C2 8B 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 257D CD D8 25             call    GETCHR          ; Jump over "STEP" token
1447+ 2580 CD 69 2A             call    GETNUM          ; Get step value
1448+ 2583 E5                   push    HL              ; Save code string address
1449+ 2584 CD C2 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 2587 CD 76 38             call    TSTSGN          ; Test sign of FPREG
1451+ 258A E1                   pop     HL              ; Restore code string address
1452+ 258B C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 258C D5                   push    DE
1454+ 258D F5                   push    AF              ; Save sign of STEP
1455+ 258E 33                   inc     SP              ; Don't save flags
1456+ 258F E5                   push    HL              ; Save code string address
1457+ 2590 2A DD 81             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 2593 E3                   ex      (SP),HL         ; Save and restore code string
1459+ 2594 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 2596 C5                   push    BC              ; Save it
1461+ 2597 33                   inc     SP              ; Don't save C
1462+ 2598
1463+ 2598 CD 03 26     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 259B 22 DD 81             ld      (BRKLIN),HL     ; Save code address for break
1465+ 259E 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 259F FE 3A                cp      ':'             ; Multi statement line?
1467+ 25A1 CA B8 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 25A4 B7                   or      A               ; End of line?
1469+ 25A5 C2 8F 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 25A8 23                   inc     HL              ; Point to address of next line
1471+ 25A9 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 25AA 23                   inc     HL
1473+ 25AB B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 25AC CA 2A 26             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 25AF 23                   inc     HL              ; Point to line number
1476+ 25B0 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 25B1 23                   inc     HL
1478+ 25B2 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 25B3 EB                   ex      DE,HL           ; Line number to HL
1480+ 25B4 22 AF 80             ld      (LINEAT),HL     ; Save as current line number
1481+ 25B7 EB                   ex      DE,HL           ; Line number back to DE
1482+ 25B8 CD D8 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 25BB 11 98 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 25BE D5                   push    DE              ; Save for RETurn
1485+ 25BF C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 25C0
1487+ 25C0 D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 25C2 DA 98 27             jp      C,LET           ; No - try to assign it
1489+ 25C5 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 25C7 D2 8F 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 25CA 07                   rlca                    ; Double it
1492+ 25CB 4F                   ld      C,A             ; BC = Offset into table
1493+ 25CC 06 00                ld      B,0
1494+ 25CE EB                   ex      DE,HL           ; Save code string address
1495+ 25CF 21 9C 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25D2 09                   add     HL,BC           ; Point to routine address
1497+ 25D3 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25D4 23                   inc     HL
1499+ 25D5 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25D6 C5                   push    BC              ; Save routine address
1501+ 25D7 EB                   ex      DE,HL           ; Restore code string address
1502+ 25D8
1503+ 25D8              ; get a char from input buffer: exit with NC if character found is
1504+ 25D8              ; not a number; exit with Z if nothing found; char is into A
1505+ 25D8 23           GETCHR: inc     HL              ; Point to next character
1506+ 25D9 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25DA FE 3A                cp      ':'             ; Z if ':'
1508+ 25DC D0                   ret     NC              ; NC if > "9"
1509+ 25DD FE 20                cp      SPC
1510+ 25DF CA D8 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 25E2 FE 30                cp      '0'
1512+ 25E4 3F                   ccf                     ; NC if < '0'
1513+ 25E5 3C                   inc     A               ; Test for zero - Leave carry
1514+ 25E6 3D                   dec     A               ; Z if Null
1515+ 25E7 C9                   ret
1516+ 25E8
1517+ 25E8 EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 25E9 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1519+ 25EC CA FD 25             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 25EF EB                   ex      DE,HL           ; Restore code string address
1521+ 25F0 CD A8 26             call    ATOH            ; Get line number to DE
1522+ 25F3 E5                   push    HL              ; Save code string address
1523+ 25F4 CD AB 21             call    SRCHLN          ; Search for line number in DE
1524+ 25F7 60                   ld      H,B             ; HL = Address of line
1525+ 25F8 69                   ld      L,C
1526+ 25F9 D1                   pop     DE              ; Restore code string address
1527+ 25FA D2 57 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 25FD 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 25FE 22 51 82     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 2601 EB                   ex      DE,HL           ; Restore code string address
1531+ 2602 C9                   ret
1532+ 2603
1533+ 2603
1534+ 2603              ; check if CTRL-C is into input buffer
1535+ 2603 DF           TSTBRK: rst     $18             ; Check input status
1536+ 2604 C8                   ret     Z               ; No key, go back
1537+ 2605 D7                   rst     $10             ; Get the key into A
1538+ 2606 FE 1B                cp      ESC             ; Escape key?
1539+ 2608 28 11                jr      Z,BRK           ; Yes, break
1540+ 260A FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 260C 28 0D                jr      Z,BRK           ; Yes, break
1542+ 260E FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 2610 C0                   ret     NZ              ; Other key, ignore
1544+ 2611
1545+ 2611
1546+ 2611              ; wait for a key while listing
1547+ 2611 D7           STALL:  rst     $10             ; Wait for key
1548+ 2612 FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 2614 C8                   ret     Z               ; Release the chokehold
1550+ 2615 FE 03                cp      CTRLC           ; Second break?
1551+ 2617 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 2619 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 261B
1554+ 261B 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 261D 32 A9 80             ld      (BRKFLG),A      ; Store it
1556+ 2620
1557+ 2620 C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 2621 F6                   defb    $F6             ; Flag "STOP"
1559+ 2622 C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 2623 22 DD 81             ld      (BRKLIN),HL     ; Save point of break
1561+ 2626 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 2627 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 2629 C1                   pop     BC              ; Return not needed and more
1564+ 262A 2A AF 80     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 262D F5                   push    AF              ; Save STOP / END status
1566+ 262E 7D                   ld      A,L             ; Is it direct break?
1567+ 262F A4                   and     H
1568+ 2630 3C                   inc     A               ; Line is -1 if direct break
1569+ 2631 CA 3D 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2634 22 E1 81             ld      (ERRLIN),HL     ; Save line of break
1571+ 2637 2A DD 81             ld      HL,(BRKLIN)     ; Get point of break
1572+ 263A 22 E3 81             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 263D AF           NOLIN:  xor     A
1574+ 263E 32 A5 80             ld      (CTLOFG),A      ; Enable output
1575+ 2641 CD 93 28             call    STTLIN          ; Start a new line
1576+ 2644 F1                   pop     AF              ; Restore STOP / END status
1577+ 2645 21 12 20             ld      HL,BRKMSG       ; "Break" message
1578+ 2648 C2 4E 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 264B C3 EF 20             jp      PRNTOK          ; Go to command mode
1580+ 264E CD 69 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 2651 C3 CD 20             jp      ERRIN           ; print message
1582+ 2654
1583+ 2654
1584+ 2654              ; CONTinue after a break/error
1585+ 2654 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 2657 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1587+ 265A 2A E3 81             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 265D 7C                   ld      A,H             ; Is it zero?
1589+ 265E B5                   or      L
1590+ 265F 1E 20                ld      E,CN            ; ?CN Error
1591+ 2661 CA A9 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2664 EB                   ex      DE,HL           ; Save code string address
1593+ 2665 2A E1 81             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 2668 22 AF 80             ld      (LINEAT),HL     ; Set up current line number
1595+ 266B EB                   ex      DE,HL           ; Restore code string address
1596+ 266C C9                   ret                     ; CONTinue where left off
1597+ 266D
1598+ 266D E5           ACCSUM: push    HL              ; Save address in array
1599+ 266E 2A A6 80             ld      HL,(CHKSUM)     ; Get check sum
1600+ 2671 06 00                ld      B,$00           ; BC - Value of byte
1601+ 2673 4F                   ld      C,A
1602+ 2674 09                   add     HL,BC           ; Add byte to check sum
1603+ 2675 22 A6 80             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 2678 E1                   pop     HL              ; Restore address in array
1605+ 2679 C9                   ret
1606+ 267A
1607+ 267A 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 267B FE 41                cp      'A'             ; < 'a' ?
1609+ 267D D8                   ret     C               ; Carry set if not letter
1610+ 267E FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 2680 3F                   ccf
1612+ 2681 C9                   ret                     ; Carry set if not letter
1613+ 2682
1614+ 2682 CD D8 25     FPSINT: call    GETCHR          ; Get next character
1615+ 2685 CD 69 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 2688 CD 76 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 268B FA A3 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 268E 3A 5C 82     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 2691 FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 2693 DA 1E 39             jp      C,FPINT         ; Yes - convert it
1621+ 2696 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 2699 11 00 00             ld      DE,$0000
1623+ 269C E5                   push    HL              ; Save code string address
1624+ 269D CD F1 38             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 26A0 E1                   pop     HL              ; Restore code string address
1626+ 26A1 51                   ld      D,C             ; MSB to D
1627+ 26A2 C8                   ret     Z               ; Return if in range
1628+ 26A3 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 26A5 C3 A9 20             jp      ERROR           ; Output error-
1630+ 26A8
1631+ 26A8
1632+ 26A8              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 26A8 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 26A9 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 26AC CD D8 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 26AF D0                   ret     NC              ; Exit if not a digit
1637+ 26B0 E5                   push    HL              ; Save code string address
1638+ 26B1 F5                   push    AF              ; Save digit
1639+ 26B2 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 26B5 CD 89 23             call    CPDEHL          ; Number in range?
1641+ 26B8 DA 8F 20             jp      C,SNERR         ; No - ?SN Error
1642+ 26BB 62                   ld      H,D             ; HL = Number
1643+ 26BC 6B                   ld      L,E
1644+ 26BD 19                   add     HL,DE           ; Times 2
1645+ 26BE 29                   add     HL,HL           ; Times 4
1646+ 26BF 19                   add     HL,DE           ; Times 5
1647+ 26C0 29                   add     HL,HL           ; Times 10
1648+ 26C1 F1                   pop     AF              ; Restore digit
1649+ 26C2 D6 30                sub     '0'             ; Make it 0 to 9
1650+ 26C4 5F                   ld      E,A             ; DE = Value of digit
1651+ 26C5 16 00                ld      D,0
1652+ 26C7 19                   add     HL,DE           ; Add to number
1653+ 26C8 EB                   ex      DE,HL           ; Number to DE
1654+ 26C9 E1                   pop     HL              ; Restore code string address
1655+ 26CA C3 AC 26             jp      GTLNLP          ; Go to next character
1656+ 26CD
1657+ 26CD CA DB 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26D0 CD 69 2A             call    GETNUM          ; Evaluate a number
1659+ 26D3 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26D6 2B                   dec     HL              ; Cancel increment
1661+ 26D7 CD D8 25             call    GETCHR          ; Get next character
1662+ 26DA E5                   push    HL              ; Save code string address
1663+ 26DB 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 26DE CA F6 26             jp      Z,STORED        ; No value given - Use stored
1665+ 26E1 E1                   pop     HL              ; Restore code string address
1666+ 26E2 CD 8F 23             call    CHKSYN          ; Check for comma
1667+ 26E5 2C                   defb    ','
1668+ 26E6 D5                   push    DE              ; Save number
1669+ 26E7 CD 69 2A             call    GETNUM          ; Evaluate a number
1670+ 26EA CD 8E 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 26ED 2B                   dec     HL              ; Cancel increment
1672+ 26EE CD D8 25             call    GETCHR          ; Get next character
1673+ 26F1 C2 8F 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 26F4 E3                   ex      (SP),HL         ; Save code string address
1675+ 26F5 EB                   ex      DE,HL           ; Number to DE
1676+ 26F6 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 26F7 93                   sub     E               ; Subtract LSB of string space
1678+ 26F8 5F                   ld      E,A             ; Save LSB
1679+ 26F9 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 26FA 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 26FB 57                   ld      D,A             ; Save MSB
1682+ 26FC DA 64 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 26FF E5                   push    HL              ; Save RAM top
1684+ 2700 2A 4B 82             ld      HL,(PROGND)     ; Get program end
1685+ 2703 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 2706 09                   add     HL,BC           ; Get lowest address
1687+ 2707 CD 89 23             call    CPDEHL          ; Enough memory?
1688+ 270A D2 64 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 270D EB                   ex      DE,HL           ; RAM top to HL
1690+ 270E 22 AD 80             ld      (STRSPC),HL     ; Set new string space
1691+ 2711 E1                   pop     HL              ; End of memory to use
1692+ 2712 22 96 81             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 2715 E1                   pop     HL              ; Restore code string address
1694+ 2716 C3 DB 21             jp      INTVAR          ; Initialise variables
1695+ 2719
1696+ 2719 E5           RUN:    push    HL              ; store HL
1697+ 271A 21 FF FF             ld      HL,-1           ; reset...
1698+ 271D 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1699+ 2720 E1                   pop     HL              ; retrieve HL
1700+ 2721 CA D7 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 2724 CD DB 21             call    INTVAR          ; Initialise variables
1702+ 2727 01 98 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 272A C3 3D 27             jp      RUNLIN          ; RUN from line number
1704+ 272D
1705+ 272D 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 272F CD 4C 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 2732 C1                   pop     BC              ; Get return address
1708+ 2733 E5                   push    HL              ; Save code string for RETURN
1709+ 2734 E5                   push    HL              ; And for GOSUB routine
1710+ 2735 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1711+ 2738 E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 2739 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 273B F5                   push    AF              ; Save token
1714+ 273C 33                   inc     SP              ; Don't save flags
1715+ 273D
1716+ 273D C5           RUNLIN: push    BC              ; Save return address
1717+ 273E CD A8 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 2741 CD 83 27             call    REM             ; Get end of line
1719+ 2744 E5                   push    HL              ; Save end of line
1720+ 2745 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1721+ 2748 CD 89 23             call    CPDEHL          ; Line after current?
1722+ 274B E1                   pop     HL              ; Restore end of line
1723+ 274C 23                   inc     HL              ; Start of next line
1724+ 274D DC AE 21             call    C,SRCHLP        ; Line is after current line
1725+ 2750 D4 AB 21             call    NC,SRCHLN       ; Line is before current line
1726+ 2753 60                   ld      H,B             ; Set up code string address
1727+ 2754 69                   ld      L,C
1728+ 2755 2B                   dec     HL              ; Incremented after
1729+ 2756 D8                   ret     C               ; Line found
1730+ 2757 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 2759 C3 A9 20             jp      ERROR           ; Output error message
1732+ 275C
1733+ 275C C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 275D 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 275F CD 18 20             call    BAKSTK          ; Look "GOSUB" block
1736+ 2762 F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 2763 FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2765 1E 04                ld      E,RG            ; ?RG Error
1739+ 2767 C2 A9 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 276A E1                   pop     HL              ; Get RETURN line number
1741+ 276B 22 AF 80             ld      (LINEAT),HL     ; Save as current
1742+ 276E 23                   inc     HL              ; Was it from direct statement?
1743+ 276F 7C                   ld      A,H
1744+ 2770 B5                   or      L               ; Return to line
1745+ 2771 C2 7B 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2774 3A DB 81             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 2777 B7                   or      A               ; If so buffer is corrupted
1748+ 2778 C2 EE 20             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 277B 21 98 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 277E E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 277F 3E                   defb    $3E             ; Skip "pop HL"
1752+ 2780 E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 2781
1754+ 2781 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 2783 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 2785 06 00                ld      B,$00
1757+ 2787 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 2788 48                   ld      C,B
1759+ 2789 47                   ld      B,A             ; Statement end byte
1760+ 278A 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 278B B7                   or      A               ; End of line?
1762+ 278C C8                   ret     Z               ; Yes - Exit
1763+ 278D B8                   cp      B               ; End of statement?
1764+ 278E C8                   ret     Z               ; Yes - Exit
1765+ 278F 23                   inc     HL              ; Next byte
1766+ 2790 FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 2792 CA 87 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 2795 C3 8A 27             jp      NXTSTT          ; Keep looking
1769+ 2798
1770+ 2798 CD 78 2C     LET:    call    GETVAR          ; Get variable name
1771+ 279B CD 8F 23             call    CHKSYN          ; Make sure "=" follows
1772+ 279E C9                   defb    ZEQUAL          ; "=" token
1773+ 279F D5                   push    DE              ; Save address of variable
1774+ 27A0 3A 94 81             ld      A,(TYPE)        ; Get data type
1775+ 27A3 F5                   push    AF              ; Save type
1776+ 27A4 CD 7B 2A             call    EVAL            ; Evaluate expression
1777+ 27A7 F1                   pop     AF              ; Restore type
1778+ 27A8 E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 27A9 22 DD 81             ld      (BRKLIN),HL     ; Save address of variable
1780+ 27AC 1F                   rra                     ; Adjust type
1781+ 27AD CD 6E 2A             call    CHKTYP          ; Check types are the same
1782+ 27B0 CA EB 27             jp      Z,LETNUM        ; Numeric - Move value
1783+ 27B3 E5           LETSTR: push    HL              ; Save address of string var
1784+ 27B4 2A 59 82             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 27B7 E5                   push    HL              ; Save it on stack
1786+ 27B8 23                   inc     HL              ; Skip over length
1787+ 27B9 23                   inc     HL
1788+ 27BA 5E                   ld      E,(HL)          ; LSB of string address
1789+ 27BB 23                   inc     HL
1790+ 27BC 56                   ld      D,(HL)          ; MSB of string address
1791+ 27BD 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1792+ 27C0 CD 89 23             call    CPDEHL          ; Is string before program?
1793+ 27C3 D2 DA 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 27C6 2A AD 80             ld      HL,(STRSPC)     ; Point to string space
1795+ 27C9 CD 89 23             call    CPDEHL          ; Is string literal in program?
1796+ 27CC D1                   pop     DE              ; Restore address of string
1797+ 27CD D2 E2 27             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27D0 21 CE 81             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27D3 CD 89 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27D6 D2 E2 27             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27D9 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27DA D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27DB CD D2 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 27DE EB                   ex      DE,HL           ; Address of string entry
1805+ 27DF CD 0B 2F             call    SAVSTR          ; Save string in string area
1806+ 27E2 CD D2 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 27E5 E1                   pop     HL              ; Get string pointer
1808+ 27E6 CD D1 38             call    DETHL4          ; Move string pointer to var
1809+ 27E9 E1                   pop     HL              ; Restore code string address
1810+ 27EA C9                   ret
1811+ 27EB
1812+ 27EB E5           LETNUM: push    HL              ; Save address of variable
1813+ 27EC CD CE 38             call    FPTHL           ; Move value to variable
1814+ 27EF D1                   pop     DE              ; Restore address of variable
1815+ 27F0 E1                   pop     HL              ; Restore code string address
1816+ 27F1 C9                   ret
1817+ 27F2
1818+ 27F2 CD EF 32     ON:     call    GETINT          ; Get integer 0-255
1819+ 27F5 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 27F6 47                   ld      B,A             ; Save in B
1821+ 27F7 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 27F9 CA 01 28             jp      Z,ONGO          ; Yes - Find line number
1823+ 27FC CD 8F 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 27FF 88                   defb    ZGOTO           ; "GOTO" token
1825+ 2800 2B                   dec     HL              ; Cancel increment
1826+ 2801 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 2802 0D           ONGOLP: dec     C               ; Count branches
1828+ 2803 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 2804 CA C0 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 2807 CD A9 26             call    GETLN           ; Get line number to DE
1831+ 280A FE 2C                cp      ','             ; Another line number?
1832+ 280C C0                   ret     NZ              ; No - Drop through
1833+ 280D C3 02 28             jp      ONGOLP          ; Yes - loop
1834+ 2810
1835+ 2810 CD 7B 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 2813 7E                   ld      A,(HL)          ; Get token
1837+ 2814 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 2816 CA 1E 28             jp      Z,IFGO          ; Yes - Get line
1839+ 2819 CD 8F 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 281C BB                   defb    ZTHEN           ; "THEN" token
1841+ 281D 2B                   dec     HL              ; Cancel increment
1842+ 281E CD 6C 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 2821 CD 76 38             call    TSTSGN          ; Test state of expression
1844+ 2824 CA 30 28             jp      Z,IF1           ; False - Jump over
1845+ 2827 CD D8 25     IF0:    call    GETCHR          ; Get next character
1846+ 282A DA 3E 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 282D C3 BF 25             jp      IFJMP           ; Otherwise do statement
1848+ 2830 0E AF        IF1:    ld      C,ZELSE
1849+ 2832 CD 85 27             call    REM+2           ; check statement
1850+ 2835 B7                   or      A               ; end of line?
1851+ 2836 C8                   ret     Z               ; yes, leave
1852+ 2837 FE AF                cp      ZELSE
1853+ 2839 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 283B C3 27 28             jp      IF0             ; return to IF
1855+ 283E
1856+ 283E
1857+ 283E 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 283F CD D8 25             call    GETCHR          ; Get next character
1859+ 2842 CA A5 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2845 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 2846 FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 2848 CA CD 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 284B FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 284D CA CD 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 2850 E5                   push    HL              ; Save code string address
1866+ 2851 FE 2C                cp      ','             ; Comma?
1867+ 2853 CA B4 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 2856 FE 3B                cp      ';'             ; Semi-colon?
1869+ 2858 CA F1 28             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 285B C1                   pop     BC              ; Code string address to BC
1871+ 285C CD 7B 2A             call    EVAL            ; Evaluate expression
1872+ 285F E5                   push    HL              ; Save code string address
1873+ 2860 3A 94 81             ld      A,(TYPE)        ; Get variable type
1874+ 2863 B7                   or      A               ; Is it a string variable?
1875+ 2864 C2 8C 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 2867 CD 1B 3A             call    NUMASC          ; Convert number to text
1877+ 286A CD 2F 2F             call    CRTST           ; Create temporary string
1878+ 286D 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 286F 2A 59 82             ld      HL,(FPREG)      ; Get length of output
1880+ 2872 34                   inc     (HL)            ; Plus 1 for the space
1881+ 2873 2A 59 82             ld      HL,(FPREG)      ; < Not needed >
1882+ 2876 3A A2 80             ld      A,(LWIDTH)      ; Get width of line
1883+ 2879 47                   ld      B,A             ; To B
1884+ 287A 04                   inc     B               ; Width 255 (No limit)?
1885+ 287B CA 88 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 287E 04                   inc     B               ; Adjust it
1887+ 287F 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1888+ 2882 86                   add     A,(HL)          ; Add length of string
1889+ 2883 3D                   dec     A               ; Adjust it
1890+ 2884 B8                   cp      B               ; Will output fit on this line?
1891+ 2885 D4 A5 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 2888 CD 74 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 288B AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 288C C4 74 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 288F E1                   pop     HL              ; Restore code string address
1896+ 2890 C3 3E 28             jp      MRPRNT          ; See if more to PRINT
1897+ 2893
1898+ 2893 3A 92 81     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 2896 B7                   or      A               ; Already at start?
1900+ 2897 C8                   ret     Z               ; Yes - Do nothing
1901+ 2898 C3 A5 28             jp      PRNTCRLF        ; Start a new line
1902+ 289B
1903+ 289B AF           ENDINP: xor     A
1904+ 289C 32 3F 82             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 289F 77                   ld      (HL),A          ; Mark end of buffer
1906+ 28A0 21 37 81             ld      HL,BUFFER-1     ; Point to buffer
1907+ 28A3 18 0A                jr      CNTEND
1908+ 28A5 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 28A7 CD 9A 23             call    OUTC            ; Output character
1910+ 28AA 3E 0A                ld      A,LF            ; Load a LF
1911+ 28AC CD 9A 23             call    OUTC            ; Output character
1912+ 28AF AF           CNTEND: xor     A               ; Set to position 0
1913+ 28B0 32 92 81             ld      (CURPOS),A      ; Store it
1914+ 28B3 C9                   ret                     ; return to caller
1915+ 28B4
1916+ 28B4 3A A3 80     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 28B7 47                   ld      B,A             ; Save in B
1918+ 28B8 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 28BB B8                   cp      B               ; Within the limit?
1920+ 28BC D4 A5 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 28BF D2 F1 28             jp      NC,NEXITM       ; Get next item
1922+ 28C2 D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 28C4 D2 C2 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 28C7 2F                   cpl                     ; Number of null chars to output
1925+ 28C8 0E 00                ld      C,NLLCR         ; null char
1926+ 28CA C3 E7 28             jp      ASPCS           ; Output them
1927+ 28CD
1928+ 28CD F5           DOTAB:  push    AF              ; Save token
1929+ 28CE CD EC 32             call    FNDNUM          ; Evaluate expression
1930+ 28D1 CD 8F 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28D4 29                   defb    ')'
1932+ 28D5 2B                   dec     HL              ; Back space on to ")"
1933+ 28D6 F1                   pop     AF              ; Restore token
1934+ 28D7 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28D9 D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28DB E5                   push    HL              ; Save code string address
1937+ 28DC CA E2 28             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 28DF 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 28E2 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 28E3 83                   add     A,E             ; Total number to print
1941+ 28E4 D2 F1 28             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 28E7 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 28E8 47                   ld      B,A             ; Save number to print
1944+ 28E9 79           SPCLP:  ld      A,C             ; char to print
1945+ 28EA CD 9A 23             call    OUTC            ; Output character in A
1946+ 28ED 05                   dec     B               ; Count them
1947+ 28EE C2 E9 28             jp      NZ,SPCLP        ; Repeat if more
1948+ 28F1 E1           NEXITM: pop     HL              ; Restore code string address
1949+ 28F2 CD D8 25             call    GETCHR          ; Get next character
1950+ 28F5 C3 45 28             jp      PRNTLP          ; More to print
1951+ 28F8
1952+ 28F8 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 28FC 6F 20 66 72
1952+ 2900 6F 6D 20 73
1952+ 2904 74 61 72 74
1952+ 2908 0D 00
1953+ 290A
1954+ 290A 3A DC 81     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 290D B7                   or      A
1956+ 290E C2 89 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 2911 C1                   pop     BC              ; Throw away code string addr
1958+ 2912 21 F8 28             ld      HL,REDO         ; "Redo from start" message
1959+ 2915 CD 71 2F             call    PRS             ; Output string
1960+ 2918 C3 0A 22             jp      DOAGN           ; Do last INPUT again
1961+ 291B
1962+ 291B CD DC 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 291E 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 291F FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 2921 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 2923 32 A5 80             ld      (CTLOFG),A      ; Enable output
1967+ 2926 C2 35 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 2929 CD 30 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 292C CD 8F 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 292F 3B                   defb    ";"
1971+ 2930 E5                   push    HL              ; Save code string address
1972+ 2931 CD 74 2F             call    PRS1            ; Output prompt string
1973+ 2934 3E                   defb    $3E             ; Skip "push HL"
1974+ 2935 E5           NOPMPT: push    HL              ; Save code string address
1975+ 2936 CD 0E 22             call    PROMPT          ; Get input with "? " prompt
1976+ 2939 C1                   pop     BC              ; Restore code string address
1977+ 293A DA 27 26             jp      C,INPBRK        ; Break pressed - Exit
1978+ 293D 23                   inc     HL              ; Next byte
1979+ 293E 7E                   ld      A,(HL)          ; Get it
1980+ 293F B7                   or      A               ; End of line?
1981+ 2940 2B                   dec     HL              ; Back again
1982+ 2941 C5                   push    BC              ; Re-save code string address
1983+ 2942 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2945 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 2947 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 294A CD 59 09             call    CURSOR_OFF      ; disable cursor
1987+ 294D CA 80 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 2950 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 2952 C3 5A 29             jp      NXTITM          ; Get next item
1990+ 2955
1991+ 2955 E5           READ:   push    HL              ; Save code string address
1992+ 2956 2A 51 82             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 2959 F6                   defb    $F6             ; Flag "READ"
1994+ 295A AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 295B 32 DC 81             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 295E E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 295F C3 66 29             jp      GTVLUS          ; Get values
1998+ 2962
1999+ 2962 CD 8F 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2965 2C                   defb    ','
2001+ 2966 CD 78 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 2969 E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 296A D5                   push    DE              ; Save variable address
2004+ 296B 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 296C FE 2C                cp      ','             ; Comma?
2006+ 296E CA 8E 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 2971 3A DC 81             ld      A,(READFG)      ; Is it READ?
2008+ 2974 B7                   or      A
2009+ 2975 C2 FA 29             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 2978 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 297A CD 9A 23             call    OUTC            ; Output character
2012+ 297D CD 0E 22             call    PROMPT          ; Get INPUT with prompt
2013+ 2980 D1                   pop     DE              ; Variable address
2014+ 2981 C1                   pop     BC              ; Code string address
2015+ 2982 DA 27 26             jp      C,INPBRK        ; Break pressed
2016+ 2985 23                   inc     HL              ; Point to next DATA byte
2017+ 2986 7E                   ld      A,(HL)          ; Get byte
2018+ 2987 B7                   or      A               ; Is it zero (No input) ?
2019+ 2988 2B                   dec     HL              ; Back space INPUT pointer
2020+ 2989 C5                   push    BC              ; Save code string address
2021+ 298A CA 80 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 298D D5                   push    DE              ; Save variable address
2023+ 298E 3A 94 81     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 2991 B7                   or      A               ; Is it numeric?
2025+ 2992 CA B8 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 2995 CD D8 25             call    GETCHR          ; Get next character
2027+ 2998 57                   ld      D,A             ; Save input character
2028+ 2999 47                   ld      B,A             ; Again
2029+ 299A FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 299C CA AC 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 299F 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 29A2 B7                   or      A
2033+ 29A3 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 29A4 CA A9 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 29A7 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 29A9 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 29AB 2B                   dec     HL              ; Back space for DTSTR
2038+ 29AC CD 33 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 29AF EB                   ex      DE,HL           ; String address to DE
2040+ 29B0 21 C3 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 29B3 E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 29B4 D5                   push    DE              ; Save address of string
2043+ 29B5 C3 B3 27             jp      LETSTR          ; Assign string to variable
2044+ 29B8
2045+ 29B8 CD D8 25     INPBIN: call    GETCHR          ; Get next character
2046+ 29BB CD 7D 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 29BE E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 29BF CD CE 38             call    FPTHL           ; Move FPREG to variable
2049+ 29C2 E1                   pop     HL              ; Restore input pointer
2050+ 29C3 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 29C4 CD D8 25             call    GETCHR          ; Get next character
2052+ 29C7 CA CF 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 29CA FE 2C                cp      ','             ; Another value?
2054+ 29CC C2 0A 29             jp      NZ,BADINP       ; No - Bad input
2055+ 29CF E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29D0 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29D1 CD D8 25             call    GETCHR          ; Get next character
2058+ 29D4 C2 62 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29D7 D1                   pop     DE              ; Restore DATA pointer
2060+ 29D8 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29DB B7                   or      A
2062+ 29DC EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29DD C2 FE 25             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 29E0 D5                   push    DE              ; Save code string address
2065+ 29E1 B6                   or      (HL)            ; More input given?
2066+ 29E2 21 EA 29             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 29E5 C4 71 2F             call    NZ,PRS          ; Output string if extra given
2068+ 29E8 E1                   pop     HL              ; Restore code string address
2069+ 29E9 C9                   ret
2070+ 29EA
2071+ 29EA 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 29EE 72 61 20 69
2071+ 29F2 67 6E 6F 72
2071+ 29F6 65 64 0D 00
2072+ 29FA
2073+ 29FA CD 81 27     FDTLP:  call    DATA            ; Get next statement
2074+ 29FD B7                   or      A               ; End of line?
2075+ 29FE C2 13 2A             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 2A01 23                   inc     HL
2077+ 2A02 7E                   ld      A,(HL)          ; End of program?
2078+ 2A03 23                   inc     HL
2079+ 2A04 B6                   or      (HL)            ; 00 00 Ends program
2080+ 2A05 1E 06                ld      E,OD            ; ?OD Error
2081+ 2A07 CA A9 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 2A0A 23                   inc     HL
2083+ 2A0B 5E                   ld      E,(HL)          ; LSB of line number
2084+ 2A0C 23                   inc     HL
2085+ 2A0D 56                   ld      D,(HL)          ; MSB of line number
2086+ 2A0E EB                   ex      DE,HL
2087+ 2A0F 22 D8 81             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 2A12 EB                   ex      DE,HL
2089+ 2A13 CD D8 25     FANDT:  call    GETCHR          ; Get next character
2090+ 2A16 FE 83                cp      ZDATA           ; "DATA" token
2091+ 2A18 C2 FA 29             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 2A1B C3 8E 29             jp      ANTVLU          ; Found - Convert input
2093+ 2A1E
2094+ 2A1E 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 2A21 C4 78 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 2A24 22 DD 81             ld      (BRKLIN),HL     ; Save code string address
2097+ 2A27 CD 18 20             call    BAKSTK          ; Look for "FOR" block
2098+ 2A2A C2 95 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 2A2D F9                   ld      SP,HL           ; Clear nested loops
2100+ 2A2E D5                   push    DE              ; Save index address
2101+ 2A2F 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A30 23                   inc     HL
2103+ 2A31 F5                   push    AF              ; Save sign of STEP
2104+ 2A32 D5                   push    DE              ; Save index address
2105+ 2A33 CD B4 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A36 E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A37 E5                   push    HL              ; Save address of index
2108+ 2A38 CD D0 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A3B E1                   pop     HL              ; Restore address of index
2110+ 2A3C CD CE 38             call    FPTHL           ; Move value to index variable
2111+ 2A3F E1                   pop     HL              ; Restore address of TO value
2112+ 2A40 CD C5 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A43 E5                   push    HL              ; Save address of line of FOR
2114+ 2A44 CD F1 38             call    CMPNUM          ; Compare index with TO value
2115+ 2A47 E1                   pop     HL              ; Restore address of line num
2116+ 2A48 C1                   pop     BC              ; Address of sign of STEP
2117+ 2A49 90                   sub     B               ; Compare with expected sign
2118+ 2A4A CD C5 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A4D CA 59 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A50 EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A51 22 AF 80             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A54 69                   ld      L,C             ; Set code string to loop
2123+ 2A55 60                   ld      H,B
2124+ 2A56 C3 94 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A59
2126+ 2A59 F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A5A 2A DD 81             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A5D 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A5E FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A60 C2 98 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A63 CD D8 25             call    GETCHR          ; Position to index name
2132+ 2A66 CD 21 2A             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A69              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A69
2135+ 2A69 CD 7B 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A6C F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A6D 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A6E 3A 94 81     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A71 8F                   adc     A,A             ; Expected + actual
2140+ 2A72 B7                   or      A               ; Clear carry , set parity
2141+ 2A73 E8                   ret     PE              ; Even parity - Types match
2142+ 2A74 C3 A1 20             jp      TMERR           ; Different types - Error
2143+ 2A77
2144+ 2A77 CD 8F 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A7A 28                   defb    '('
2146+ 2A7B 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A7C 16 00                ld      D,$00           ; Precedence value
2148+ 2A7E D5           EVAL1:  push    DE              ; Save precedence
2149+ 2A7F 0E 01                ld      C,$01
2150+ 2A81 CD 4C 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2A84 CD F2 2A             call    OPRND           ; Get next expression value
2152+ 2A87 22 DF 81     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2A8A 2A DF 81     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2A8D C1                   pop     BC              ; Precedence value and operator
2155+ 2A8E 78                   ld      A,B             ; Get precedence value
2156+ 2A8F FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2A91 D4 6C 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2A94 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2A95 16 00                ld      D,$00           ; Clear Last relation
2160+ 2A97 D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2A99 DA B3 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2A9C FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2A9E D2 B3 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2AA1 FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2AA3 17                   rla                     ; <- Test for legal
2166+ 2AA4 AA                   xor     D               ; <- combinations of < = >
2167+ 2AA5 BA                   cp      D               ; <- by combining last token
2168+ 2AA6 57                   ld      D,A             ; <- with current one
2169+ 2AA7 DA 8F 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2AAA 22 D4 81             ld      (CUROPR),HL     ; Save address of current token
2171+ 2AAD CD D8 25             call    GETCHR          ; Get next character
2172+ 2AB0 C3 97 2A             jp      RLTLP           ; Treat the two as one
2173+ 2AB3
2174+ 2AB3 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2AB4 B7                   or      A
2176+ 2AB5 C2 F3 2B             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2AB8 7E                   ld      A,(HL)          ; Get operator token
2178+ 2AB9 22 D4 81             ld      (CUROPR),HL     ; Save operator address
2179+ 2ABC D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2ABE D8                   ret     C               ; Neither - Exit
2181+ 2ABF FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2AC1 D0                   ret     NC              ; No - Exit
2183+ 2AC2 5F                   ld      E,A             ; Coded operator
2184+ 2AC3 3A 94 81             ld      A,(TYPE)        ; Get data type
2185+ 2AC6 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2AC7 B3                   or      E               ; Combine with coded operator
2187+ 2AC8 7B                   ld      A,E             ; Get coded operator
2188+ 2AC9 CA 67 30             jp      Z,CONCAT        ; String concatenation
2189+ 2ACC 07                   rlca                    ; Times 2
2190+ 2ACD 83                   add     A,E             ; Times 3
2191+ 2ACE 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2ACF 21 0A 1F             ld      HL,PRITAB       ; Precedence table
2193+ 2AD2 19                   add     HL,DE           ; To the operator concerned
2194+ 2AD3 78                   ld      A,B             ; Last operator precedence
2195+ 2AD4 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AD5 BA                   cp      D               ; Compare with eval precedence
2197+ 2AD6 D0                   ret     NC              ; Exit if higher precedence
2198+ 2AD7 23                   inc     HL              ; Point to routine address
2199+ 2AD8 CD 6C 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2ADB
2201+ 2ADB C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2ADC 01 8A 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2ADF C5                   push    BC              ; Save on stack for return
2204+ 2AE0 43                   ld      B,E             ; Save operator
2205+ 2AE1 4A                   ld      C,D             ; Save precedence
2206+ 2AE2 CD A7 38             call    STAKFP          ; Move value to stack
2207+ 2AE5 58                   ld      E,B             ; Restore operator
2208+ 2AE6 51                   ld      D,C             ; Restore precedence
2209+ 2AE7 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2AE8 23                   inc     HL
2211+ 2AE9 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2AEA 23                   inc     HL
2213+ 2AEB C5                   push    BC              ; Save routine address
2214+ 2AEC 2A D4 81             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2AEF C3 7E 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2AF2
2217+ 2AF2 AF           OPRND:  xor     A               ; Get operand routine
2218+ 2AF3 32 94 81             ld      (TYPE),A        ; Set numeric expected
2219+ 2AF6 CD D8 25             call    GETCHR          ; Get next character
2220+ 2AF9 1E 24                ld      E,MO            ; ?MO Error
2221+ 2AFB CA A9 20             jp      Z,ERROR         ; No operand - Error
2222+ 2AFE DA 7D 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2B01 CD 7A 26             call    CHKLTR          ; See if a letter
2224+ 2B04 D2 59 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2B07 FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2B09 20 12                jr      NZ,NOTAMP
2227+ 2B0B CD D8 25             call    GETCHR          ; Get next character
2228+ 2B0E FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2B10 CA 50 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2B13 FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2B15 CA C0 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2B18 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2B1A CA A9 20             jp      Z,ERROR         ;
2234+ 2B1D FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2B1F CA F2 2A             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2B22 FE 2E                cp      '.'             ; '.' ?
2237+ 2B24 CA 7D 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2B27 FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2B29 CA 48 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2B2C FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2B2E CA 30 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B31 FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B33 CA 53 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B36 FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B38 CA 94 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B3B D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B3D D2 6A 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B40 CD 77 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B43 CD 8F 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B46 29                   defb    ')'
2251+ 2B47 C9                   ret
2252+ 2B48
2253+ 2B48 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B4A CD 7E 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B4D 2A DF 81             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B50 E5                   push    HL              ; Save next operator address
2257+ 2B51 CD 9F 38             call    INVSGN          ; Negate value
2258+ 2B54 CD 6C 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B57 E1                   pop     HL              ; Restore next operator address
2260+ 2B58 C9                   ret
2261+ 2B59
2262+ 2B59 CD 78 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B5C E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B5D EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B5E 22 59 82             ld      (FPREG),HL      ; Save address of variable
2266+ 2B61 3A 94 81             ld      A,(TYPE)        ; Get type
2267+ 2B64 B7                   or      A               ; Numeric?
2268+ 2B65 CC B4 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B68 E1                   pop     HL              ; Restore code string address
2270+ 2B69 C9                   ret
2271+ 2B6A
2272+ 2B6A 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B6C 07                   rlca                    ; Double function offset
2274+ 2B6D 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B6E C5                   push    BC              ; Save adjusted token value
2276+ 2B6F CD D8 25             call    GETCHR          ; Get next character
2277+ 2B72 79                   ld      A,C             ; Get adjusted token value
2278+ 2B73 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B75 CA A3 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B78 FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B7A CA 43 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B7D FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2B7F DA 9B 2B             jp      C,FNVAL         ; No - Do function
2284+ 2B82 CD 77 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2B85 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2B88 2C                   defb    ','
2287+ 2B89 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2B8C EB                   ex      DE,HL           ; Save code string address
2289+ 2B8D 2A 59 82             ld      HL,(FPREG)      ; Get address of string
2290+ 2B90 E3                   ex      (SP),HL         ; Save address of string
2291+ 2B91 E5                   push    HL              ; Save adjusted token value
2292+ 2B92 EB                   ex      DE,HL           ; Restore code string address
2293+ 2B93 CD EF 32             call    GETINT          ; Get integer 0-255
2294+ 2B96 EB                   ex      DE,HL           ; Save code string address
2295+ 2B97 E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2B98 C3 A3 2B             jp      GOFUNC          ; Jump to string function
2297+ 2B9B
2298+ 2B9B CD 40 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2B9E E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2B9F 11 54 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2BA2 D5                   push    DE              ; Save on stack
2302+ 2BA3 01 C7 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2BA6 09                   add     HL,BC           ; Point to right address
2304+ 2BA7 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2BA8 23                   inc     HL              ;
2306+ 2BA9 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2BAA 69                   ld      L,C             ; Address to HL
2308+ 2BAB E9                   jp      (HL)            ; Jump to function
2309+ 2BAC
2310+ 2BAC 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2BAD FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2BAF C8                   ret     Z               ; Yes - Return
2313+ 2BB0 FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2BB2 C8                   ret     Z               ; Yes - Return
2315+ 2BB3 14                   inc     D               ; Inc to flag positive exponent
2316+ 2BB4 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2BB6 C8                   ret     Z               ; Yes - Return
2318+ 2BB7 FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2BB9 C8                   ret     Z               ; Yes - Return
2320+ 2BBA 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2BBB C9                   ret                     ; Return "NZ"
2322+ 2BBC
2323+ 2BBC              ; execute OR, AND, and XOR operations
2324+ 2BBC AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2BBD 18 07                jr      CNTLGC
2326+ 2BBF AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2BC0 D6 01                sub     $01
2328+ 2BC2 18 02                jr      CNTLGC
2329+ 2BC4 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2BC5 3C                   inc     A
2331+ 2BC6 F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2BC7 CD 6C 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2BCA CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2BCD F1                   pop     AF              ; retrieve operand's flags
2335+ 2BCE EB                   ex      DE,HL           ; <- Get last
2336+ 2BCF C1                   pop     BC              ; <-  value
2337+ 2BD0 E3                   ex      (SP),HL         ; <-  from
2338+ 2BD1 EB                   ex      DE,HL           ; <-  stack
2339+ 2BD2 CD B7 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BD5 F5                   push    AF              ; store operand's flags
2341+ 2BD6 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BD9 F1                   pop     AF              ; retrieve operand's flags
2343+ 2BDA C1                   pop     BC              ; Get value
2344+ 2BDB 79                   ld      A,C             ; Get LSB
2345+ 2BDC 21 52 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2BDF 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2BE1 A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2BE2 4F                   ld      C,A             ; Save LSB
2349+ 2BE3 78                   ld      A,B             ; Get MSB
2350+ 2BE4 A2                   and     D               ; "AND" MSBs
2351+ 2BE5 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2BE6 F2 EE 2B     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2BE9 B3                   or      E               ; "OR" LSBs
2354+ 2BEA 4F                   ld      C,A             ; Save LSB
2355+ 2BEB 78                   ld      A,B             ; Get MSB
2356+ 2BEC B2                   or      D               ; "OR" MSBs
2357+ 2BED E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2BEE AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2BEF 4F                   ld      C,A             ; Save LSB
2360+ 2BF0 78                   ld      A,B             ; Get MSB
2361+ 2BF1 AA                   xor     D               ; "XOR" MSBs
2362+ 2BF2 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2BF3
2364+ 2BF3 21 05 2C     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2BF6 3A 94 81             ld      A,(TYPE)        ; Get data type
2366+ 2BF9 1F                   rra                     ; Carry set = string
2367+ 2BFA 7A                   ld      A,D             ; Get last precedence value
2368+ 2BFB 17                   rla                     ; Times 2 plus carry
2369+ 2BFC 5F                   ld      E,A             ; To E
2370+ 2BFD 16 64                ld      D,$64           ; Relational precedence
2371+ 2BFF 78                   ld      A,B             ; Get current precedence
2372+ 2C00 BA                   cp      D               ; Compare with last
2373+ 2C01 D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2C02 C3 DB 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2C05
2376+ 2C05 07 2C        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2C07 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2C08 B7                   or      A
2379+ 2C09 1F                   rra
2380+ 2C0A C1                   pop     BC              ; Get last expression to BCDE
2381+ 2C0B D1                   pop     DE
2382+ 2C0C F5                   push    AF              ; Save status
2383+ 2C0D CD 6E 2A             call    CHKTYP          ; Check that types match
2384+ 2C10 21 49 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2C13 E5                   push    HL              ; Save for RETurn
2386+ 2C14 CA F1 38             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2C17 AF                   xor     A               ; Compare two strings
2388+ 2C18 32 94 81             ld      (TYPE),A        ; Set type to numeric
2389+ 2C1B D5                   push    DE              ; Save string name
2390+ 2C1C CD B4 30             call    GSTRCU          ; Get current string
2391+ 2C1F 7E                   ld      A,(HL)          ; Get length of string
2392+ 2C20 23                   inc     HL
2393+ 2C21 23                   inc     HL
2394+ 2C22 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2C23 23                   inc     HL
2396+ 2C24 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2C25 D1                   pop     DE              ; Restore string name
2398+ 2C26 C5                   push    BC              ; Save address of string
2399+ 2C27 F5                   push    AF              ; Save length of string
2400+ 2C28 CD B8 30             call    GSTRDE          ; Get second string
2401+ 2C2B CD C5 38             call    LOADFP          ; Get address of second string
2402+ 2C2E F1                   pop     AF              ; Restore length of string 1
2403+ 2C2F 57                   ld      D,A             ; Length to D
2404+ 2C30 E1                   pop     HL              ; Restore address of string 1
2405+ 2C31 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C32 B2                   or      D               ; Bytes of string 1 to do
2407+ 2C33 C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C34 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C35 D6 01                sub     $01
2410+ 2C37 D8                   ret     C               ; Exit if end of string 1
2411+ 2C38 AF                   xor     A
2412+ 2C39 BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C3A 3C                   inc     A
2414+ 2C3B D0                   ret     NC              ; Exit if end of string 2
2415+ 2C3C 15                   dec     D               ; Count bytes in string 1
2416+ 2C3D 1D                   dec     E               ; Count bytes in string 2
2417+ 2C3E 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C3F BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C40 23                   inc     HL              ; Move up string 1
2420+ 2C41 03                   inc     BC              ; Move up string 2
2421+ 2C42 CA 31 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C45 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C46 C3 81 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C49
2425+ 2C49 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C4A 8F                   adc     A,A             ; Double plus carry
2427+ 2C4B C1                   pop     BC              ; Get other value
2428+ 2C4C A0                   and     B               ; Combine them
2429+ 2C4D C6 FF                add     A,-1            ; Carry set if different
2430+ 2C4F 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C50 C3 88 38             jp      FLGREL          ; Set current value & continue
2432+ 2C53
2433+ 2C53 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C55 CD 7E 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C58 CD 6C 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C5B CD 8E 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C5E 7B                   ld      A,E             ; Get LSB
2438+ 2C5F 2F                   cpl                     ; Invert LSB
2439+ 2C60 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C61 7A                   ld      A,D             ; Get MSB
2441+ 2C62 2F                   cpl                     ; Invert MSB
2442+ 2C63 CD 52 2E             call    ACPASS          ; Save AC as current
2443+ 2C66 C1                   pop     BC              ; Clean up stack
2444+ 2C67 C3 8A 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C6A
2446+ 2C6A 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C6B CD D8 25             call    GETCHR          ; Get next character
2448+ 2C6E C8                   ret     Z               ; End of DIM statement
2449+ 2C6F CD 8F 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C72 2C                   defb    ','
2451+ 2C73 01 6A 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C76 C5                   push    BC              ; Save on stack
2453+ 2C77 F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C78 AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C79 32 93 81             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C7C 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C7D CD 7A 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2C80 DA 8F 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2C83 AF                   xor     A
2460+ 2C84 4F                   ld      C,A             ; Clear second byte of name
2461+ 2C85 32 94 81             ld      (TYPE),A        ; Set type to numeric
2462+ 2C88 CD D8 25             call    GETCHR          ; Get next character
2463+ 2C8B DA 94 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2C8E CD 7A 26             call    CHKLTR          ; See if a letter
2465+ 2C91 DA A1 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2C94 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2C95 CD D8 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2C98 DA 95 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2C9B CD 7A 26             call    CHKLTR          ; See if a letter
2470+ 2C9E D2 95 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2CA1 D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2CA3 C2 B0 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2CA6 3C                   inc     A               ; A = 1 (string type)
2474+ 2CA7 32 94 81             ld      (TYPE),A        ; Set type to string
2475+ 2CAA 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2CAB 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2CAC 4F                   ld      C,A             ; Resave second byte on name
2478+ 2CAD CD D8 25             call    GETCHR          ; Get next character
2479+ 2CB0 3A DA 81     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2CB3 3D                   dec     A
2481+ 2CB4 CA 5D 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2CB7 F2 C0 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2CBA 7E                   ld      A,(HL)          ; Get byte again
2484+ 2CBB D6 28                sub     '('             ; Subscripted variable?
2485+ 2CBD CA 35 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2CC0
2487+ 2CC0 AF           NSCFOR: xor     A               ; Simple variable
2488+ 2CC1 32 DA 81             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2CC4 E5                   push    HL              ; Save code string address
2490+ 2CC5 50                   ld      D,B             ; DE = Variable name to find
2491+ 2CC6 59                   ld      E,C
2492+ 2CC7 2A 53 82             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2CCA CD 89 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2CCD 11 55 82             ld      DE,FNARG        ; Point to argument value
2495+ 2CD0 CA 66 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CD3 2A 4D 82             ld      HL,(VAREND)     ; End of variables
2497+ 2CD6 EB                   ex      DE,HL           ; Address of end of search
2498+ 2CD7 2A 4B 82             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CDA CD 89 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CDD CA F3 2C             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2CE0 79                   ld      A,C             ; Get second byte of name
2502+ 2CE1 96                   sub     (HL)            ; Compare with name in list
2503+ 2CE2 23                   inc     HL              ; Move on to first byte
2504+ 2CE3 C2 E8 2C             jp      NZ,FNTHR        ; Different - Find another
2505+ 2CE6 78                   ld      A,B             ; Get first byte of name
2506+ 2CE7 96                   sub     (HL)            ; Compare with name in list
2507+ 2CE8 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2CE9 CA 27 2D             jp      Z,RETADR        ; Found - Return address
2509+ 2CEC 23                   inc     HL              ; <- Skip
2510+ 2CED 23                   inc     HL              ; <- over
2511+ 2CEE 23                   inc     HL              ; <- F.P.
2512+ 2CEF 23                   inc     HL              ; <- value
2513+ 2CF0 C3 DA 2C             jp      FNDVAR          ; Keep looking
2514+ 2CF3
2515+ 2CF3 E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2CF4 E3                   ex      (SP),HL         ; Get return address
2517+ 2CF5 D5                   push    DE              ; Save address of variable
2518+ 2CF6 11 5C 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2CF9 CD 89 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2CFC D1                   pop     DE              ; Restore address of variable
2521+ 2CFD CA 2A 2D             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2D00 E3                   ex      (SP),HL         ; Put back return
2523+ 2D01 E5                   push    HL              ; Save code string address
2524+ 2D02 C5                   push    BC              ; Save variable name
2525+ 2D03 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2D06 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2527+ 2D09 E5                   push    HL              ; Save end of arrays
2528+ 2D0A 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2D0B C1                   pop     BC              ; Source address in BC
2530+ 2D0C E5                   push    HL              ; Save new end address
2531+ 2D0D CD 3B 20             call    MOVUP           ; Move arrays up
2532+ 2D10 E1                   pop     HL              ; Restore new end address
2533+ 2D11 22 4F 82             ld      (ARREND),HL     ; Set new end address
2534+ 2D14 60                   ld      H,B             ; End of variables to HL
2535+ 2D15 69                   ld      L,C
2536+ 2D16 22 4D 82             ld      (VAREND),HL     ; Set new end address
2537+ 2D19
2538+ 2D19 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2D1A 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2D1C CD 89 23             call    CPDEHL          ; Done them all?
2541+ 2D1F C2 19 2D             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2D22 D1                   pop     DE              ; Get variable name
2543+ 2D23 73                   ld      (HL),E          ; Store second character
2544+ 2D24 23                   inc     HL
2545+ 2D25 72                   ld      (HL),D          ; Store first character
2546+ 2D26 23                   inc     HL
2547+ 2D27 EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2D28 E1                   pop     HL              ; Restore code string address
2549+ 2D29 C9                   ret
2550+ 2D2A
2551+ 2D2A 32 5C 82     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2D2D 21 0C 20             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D30 22 59 82             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D33 E1                   pop     HL              ; Restore code string address
2555+ 2D34 C9                   ret
2556+ 2D35
2557+ 2D35 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D36 2A 93 81             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D39 E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D3A 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D3B D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D3C C5                   push    BC              ; Save array name
2563+ 2D3D CD 82 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D40 C1                   pop     BC              ; Restore array name
2565+ 2D41 F1                   pop     AF              ; Get number of dimensions
2566+ 2D42 EB                   ex      DE,HL
2567+ 2D43 E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D44 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D45 EB                   ex      DE,HL
2570+ 2D46 3C                   inc     A               ; Count dimensions
2571+ 2D47 57                   ld      D,A             ; Save in D
2572+ 2D48 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D49 FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D4B CA 3B 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D4E CD 8F 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D51 29                   defb    ')'
2577+ 2D52 22 DF 81             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D55 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D56 22 93 81             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D59 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D5B D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D5C 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D5D
2584+ 2D5D E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D5E F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D5F 2A 4D 82             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D62 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D63 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D64 EB                   ex      DE,HL
2590+ 2D65 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2591+ 2D68 EB                   ex      DE,HL           ; Current array pointer
2592+ 2D69 CD 89 23             call    CPDEHL          ; End of arrays found?
2593+ 2D6C CA 95 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D6F 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D70 B9                   cp      C               ; Compare with name given
2596+ 2D71 23                   inc     HL              ; Move on
2597+ 2D72 C2 77 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D75 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D76 B8                   cp      B               ; Compare with name given
2600+ 2D77 23           NXTARY: inc     HL              ; Move on
2601+ 2D78 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D79 23                   inc     HL
2603+ 2D7A 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D7B 23                   inc     HL
2605+ 2D7C C2 63 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2D7F 3A 93 81             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2D82 B7                   or      A
2608+ 2D83 C2 98 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2D86 F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2D87 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2D88 4D                   ld      C,L
2612+ 2D89 CA 66 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2D8C 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2D8D CA F3 2D             jp      Z,FINDEL        ; Yes - Find element
2615+ 2D90 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2D92 C3 A9 20             jp      ERROR           ; Output error
2617+ 2D95
2618+ 2D95 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2D98 F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2D99 CA A3 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2D9C 71                   ld      (HL),C          ; Save second byte of name
2622+ 2D9D 23                   inc     HL
2623+ 2D9E 70                   ld      (HL),B          ; Save first byte of name
2624+ 2D9F 23                   inc     HL
2625+ 2DA0 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2DA1 CD 4C 20             call    CHKSTK          ; Check if enough memory
2627+ 2DA4 23                   inc     HL              ; Point to number of dimensions
2628+ 2DA5 23                   inc     HL
2629+ 2DA6 22 D4 81             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2DA9 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2DAA 23                   inc     HL
2632+ 2DAB 3A 93 81             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2DAE 17                   rla                     ; Carry set = Create
2634+ 2DAF 79                   ld      A,C             ; Get number of dimensions
2635+ 2DB0 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2DB3 D2 B8 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2DB6 C1                   pop     BC              ; Get specified dimension size
2638+ 2DB7 03                   inc     BC              ; Include zero element
2639+ 2DB8 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2DB9 23                   inc     HL
2641+ 2DBA 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2DBB 23                   inc     HL
2643+ 2DBC F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2DBD E5                   push    HL              ; Save address of dim'n size
2645+ 2DBE CD 62 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2DC1 EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2DC2 E1                   pop     HL              ; Restore address of dimension
2648+ 2DC3 F1                   pop     AF              ; Restore number of dimensions
2649+ 2DC4 3D                   dec     A               ; Count them
2650+ 2DC5 C2 B0 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2DC8 F5                   push    AF              ; Save locate/create flag
2652+ 2DC9 42                   ld      B,D             ; MSB of memory needed
2653+ 2DCA 4B                   ld      C,E             ; LSB of memory needed
2654+ 2DCB EB                   ex      DE,HL
2655+ 2DCC 19                   add     HL,DE           ; Add bytes to array start
2656+ 2DCD DA 64 20             jp      C,OMERR         ; Too big - Error
2657+ 2DD0 CD 55 20             call    ENFMEM          ; See if enough memory
2658+ 2DD3 22 4F 82             ld      (ARREND),HL     ; Save new end of array
2659+ 2DD6
2660+ 2DD6 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DD7 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DD9 CD 89 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DDC C2 D6 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2DDF 03                   inc     BC              ; Number of bytes + 1
2665+ 2DE0 57                   ld      D,A             ; A=0
2666+ 2DE1 2A D4 81             ld      HL,(CUROPR)     ; Get address of array
2667+ 2DE4 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2DE5 EB                   ex      DE,HL           ; To HL
2669+ 2DE6 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2DE7 09                   add     HL,BC           ; Add number of bytes
2671+ 2DE8 EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2DE9 2B                   dec     HL
2673+ 2DEA 2B                   dec     HL
2674+ 2DEB 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2DEC 23                   inc     HL
2676+ 2DED 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2DEE 23                   inc     HL
2678+ 2DEF F1                   pop     AF              ; Locate / Create?
2679+ 2DF0 DA 17 2E             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2DF3 47           FINDEL: ld      B,A             ; Find array element
2681+ 2DF4 4F                   ld      C,A
2682+ 2DF5 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2DF6 23                   inc     HL
2684+ 2DF7 16                   defb    $16             ; Skip "pop HL"
2685+ 2DF8 E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2DF9 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2DFA 23                   inc     HL
2688+ 2DFB 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2DFC 23                   inc     HL
2690+ 2DFD E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2DFE F5                   push    AF              ; Save number of dim'ns
2692+ 2DFF CD 89 23             call    CPDEHL          ; Dimension too large?
2693+ 2E02 D2 90 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2E05 E5                   push    HL              ; Save index
2695+ 2E06 CD 62 39             call    MLDEBC          ; Multiply previous by size
2696+ 2E09 D1                   pop     DE              ; Index supplied to DE
2697+ 2E0A 19                   add     HL,DE           ; Add index to pointer
2698+ 2E0B F1                   pop     AF              ; Number of dimensions
2699+ 2E0C 3D                   dec     A               ; Count them
2700+ 2E0D 44                   ld      B,H             ; MSB of pointer
2701+ 2E0E 4D                   ld      C,L             ; LSB of pointer
2702+ 2E0F C2 F8 2D             jp      NZ,FNDELP       ; More - Keep going
2703+ 2E12 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2E13 29                   add     HL,HL
2705+ 2E14 C1                   pop     BC              ; Start of array
2706+ 2E15 09                   add     HL,BC           ; Point to element
2707+ 2E16 EB                   ex      DE,HL           ; Address of element to DE
2708+ 2E17 2A DF 81     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2E1A C9                   ret
2710+ 2E1B
2711+ 2E1B
2712+ 2E1B              ; returns the value of the 32-bit system tick counter as
2713+ 2E1B              ; two 16-bit words
2714+ 2E1B CD 6C 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2E1E CD 8E 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2E21 2A E5 81             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2E24 7B                   ld      A,E
2718+ 2E25 B2                   or      D               ; is it 0?
2719+ 2E26 CA 2C 2E             jp      Z,ENDTMR        ; yes, jump over
2720+ 2E29 2A E7 81             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2E2C 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2E2D 7C                   ld      A,H             ; ...into AB
2723+ 2E2E C3 53 2E             jp      ABPASS          ; return word into AB
2724+ 2E31
2725+ 2E31
2726+ 2E31              ; returns the free space for BASIC or into the string pool
2727+ 2E31 2A 4F 82     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E34 EB                   ex      DE,HL           ; To DE
2729+ 2E35 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E38 39                   add     HL,SP           ; Current stack value
2731+ 2E39 3A 94 81             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E3C B7                   or      A
2733+ 2E3D CA 4D 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E40 CD B4 30             call    GSTRCU          ; Current string to pool
2735+ 2E43 CD B4 2F             call    GARBGE          ; Garbage collection
2736+ 2E46 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E49 EB                   ex      DE,HL           ; To DE
2738+ 2E4A 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E4D 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E4E 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E4F 4F                   ld      C,A             ; Save difference if C
2742+ 2E50 7C                   ld      A,H             ; Get MSB of end
2743+ 2E51 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E52 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E53 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E54 1E 00                ld      E,$00
2747+ 2E56 21 94 81             ld      HL,TYPE         ; Point to type
2748+ 2E59 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E5A 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E5C C3 8D 38             jp      RETINT          ; Return the integer
2751+ 2E5F
2752+ 2E5F              ; returns the X position of the cursor during a print
2753+ 2E5F 3A 92 81     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E62              ; return the value in A as a number
2755+ 2E62 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E63 AF                   xor     A               ; Zero A
2757+ 2E64 C3 53 2E             jp      ABPASS          ; Return integer AB
2758+ 2E67
2759+ 2E67 CD EA 2E     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E6A CD DC 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E6D 01 81 27             ld      BC,DATA         ; To get next statement
2762+ 2E70 C5                   push    BC              ; Save address for RETurn
2763+ 2E71 D5                   push    DE              ; Save address of function ptr
2764+ 2E72 CD 8F 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E75 28                   defb    '('
2766+ 2E76 CD 78 2C             call    GETVAR          ; Get argument variable name
2767+ 2E79 E5                   push    HL              ; Save code string address
2768+ 2E7A EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E7B 2B                   dec     HL
2770+ 2E7C 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E7D 2B                   dec     HL
2772+ 2E7E 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2E7F E1                   pop     HL              ; Restore code string address
2774+ 2E80 CD 6C 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2E83 CD 8F 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2E86 29                   defb    ')'
2777+ 2E87 CD 8F 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2E8A C9                   defb    ZEQUAL          ; "=" token
2779+ 2E8B 44                   ld      B,H             ; Code string address to BC
2780+ 2E8C 4D                   ld      C,L
2781+ 2E8D E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2E8E 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2E8F 23                   inc     HL
2784+ 2E90 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2E91 C3 29 2F             jp      SVSTAD          ; Save address and do function
2786+ 2E94
2787+ 2E94 CD EA 2E     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2E97 D5                   push    DE              ; Save function pointer address
2789+ 2E98 CD 40 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2E9B CD 6C 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2E9E E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2E9F 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2EA0 23                   inc     HL
2794+ 2EA1 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2EA2 23                   inc     HL
2796+ 2EA3 7A                   ld      A,D             ; And function DEFined?
2797+ 2EA4 B3                   or      E
2798+ 2EA5 CA 9B 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2EA8 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2EA9 23                   inc     HL
2801+ 2EAA 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2EAB 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2EAC E5                   push    HL              ; Save it
2804+ 2EAD 2A 53 82             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2EB0 E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2EB1 22 53 82             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2EB4 2A 57 82             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2EB7 E5                   push    HL              ; Save it
2809+ 2EB8 2A 55 82             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2EBB E5                   push    HL              ; Save it
2811+ 2EBC 21 55 82             ld      HL,FNARG        ; HL = Value of argument
2812+ 2EBF D5                   push    DE              ; Save FN code string address
2813+ 2EC0 CD CE 38             call    FPTHL           ; Move FPREG to argument
2814+ 2EC3 E1                   pop     HL              ; Get FN code string address
2815+ 2EC4 CD 69 2A             call    GETNUM          ; Get value from function
2816+ 2EC7 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2EC8 CD D8 25             call    GETCHR          ; Get next character
2818+ 2ECB C2 8F 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2ECE E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2ECF 22 55 82             ld      (FNARG),HL      ; Restore it
2821+ 2ED2 E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2ED3 22 57 82             ld      (FNARG+2),HL    ; Restore it
2823+ 2ED6 E1                   pop     HL              ; Get name of old arg
2824+ 2ED7 22 53 82             ld      (FNRGNM),HL     ; Restore it
2825+ 2EDA E1                   pop     HL              ; Restore code string address
2826+ 2EDB C9                   ret
2827+ 2EDC
2828+ 2EDC E5           IDTEST: push    HL              ; Save code string address
2829+ 2EDD 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
2830+ 2EE0 23                   inc     HL              ; -1 means direct statement
2831+ 2EE1 7C                   ld      A,H
2832+ 2EE2 B5                   or      L
2833+ 2EE3 E1                   pop     HL              ; Restore code string address
2834+ 2EE4 C0                   ret     NZ              ; Return if in program
2835+ 2EE5 1E 16                ld      E,ID            ; ?ID Error
2836+ 2EE7 C3 A9 20             jp      ERROR
2837+ 2EEA
2838+ 2EEA CD 8F 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2EED B9                   defb    ZFN             ; "FN" token
2840+ 2EEE 3E 80                ld      A,$80
2841+ 2EF0 32 DA 81             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2EF3 B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2EF4 47                   ld      B,A             ; in first byte of name
2844+ 2EF5 CD 7D 2C             call    GTFNAM          ; Get FN name
2845+ 2EF8 C3 6C 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2EFB
2847+ 2EFB CD 6C 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2EFE CD 1B 3A             call    NUMASC          ; Turn number into text
2849+ 2F01 CD 2F 2F     STR1:   call    CRTST           ; Create string entry for it
2850+ 2F04 CD B4 30             call    GSTRCU          ; Current string to pool
2851+ 2F07 01 0F 31             ld      BC,TOPOOL       ; Save in string pool
2852+ 2F0A C5                   push    BC              ; Save address on stack
2853+ 2F0B
2854+ 2F0B 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2F0C 23                   inc     HL
2856+ 2F0D 23                   inc     HL
2857+ 2F0E E5                   push    HL              ; Save pointer to string
2858+ 2F0F CD 8A 2F             call    TESTR           ; See if enough string space
2859+ 2F12 E1                   pop     HL              ; Restore pointer to string
2860+ 2F13 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2F14 23                   inc     HL
2862+ 2F15 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2F16 CD 23 2F             call    CRTMST          ; Create string entry
2864+ 2F19 E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2F1A 6F                   ld      L,A             ; Length of string
2866+ 2F1B CD A7 30             call    TOSTRA          ; Move to string area
2867+ 2F1E D1                   pop     DE              ; Restore pointer to MSB
2868+ 2F1F C9                   ret
2869+ 2F20
2870+ 2F20 CD 8A 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2F23 21 CE 81     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2F26 E5                   push    HL              ; Save it
2873+ 2F27 77                   ld      (HL),A          ; Save length of string
2874+ 2F28 23                   inc     HL
2875+ 2F29 23           SVSTAD: inc     HL
2876+ 2F2A 73                   ld      (HL),E          ; Save LSB of address
2877+ 2F2B 23                   inc     HL
2878+ 2F2C 72                   ld      (HL),D          ; Save MSB of address
2879+ 2F2D E1                   pop     HL              ; Restore pointer
2880+ 2F2E C9                   ret
2881+ 2F2F
2882+ 2F2F 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F30 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F32 50                   ld      D,B             ; Quote to D
2885+ 2F33 E5           DTSTR:  push    HL              ; Save start
2886+ 2F34 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F36 23           QTSTLP: inc     HL              ; Move on
2888+ 2F37 7E                   ld      A,(HL)          ; Get byte
2889+ 2F38 0C                   inc     C               ; Count bytes
2890+ 2F39 B7                   or      A               ; End of line?
2891+ 2F3A CA 45 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F3D BA                   cp      D               ; Terminator D found?
2893+ 2F3E CA 45 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F41 B8                   cp      B               ; Terminator B found?
2895+ 2F42 C2 36 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F45 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F47 CC D8 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F4A E3                   ex      (SP),HL         ; Starting quote
2899+ 2F4B 23                   inc     HL              ; First byte of string
2900+ 2F4C EB                   ex      DE,HL           ; To DE
2901+ 2F4D 79                   ld      A,C             ; Get length
2902+ 2F4E CD 23 2F             call    CRTMST          ; Create string entry
2903+ 2F51 11 CE 81     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F54 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F57 22 59 82             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F5A 3E 01                ld      A,$01
2907+ 2F5C 32 94 81             ld      (TYPE),A        ; Set type to string
2908+ 2F5F CD D1 38             call    DETHL4          ; Move string to pool
2909+ 2F62 CD 89 23             call    CPDEHL          ; Out of string pool?
2910+ 2F65 22 C0 81             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F68 E1                   pop     HL              ; Restore code string address
2912+ 2F69 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F6A C0                   ret     NZ              ; Return if pool OK
2914+ 2F6B 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F6D C3 A9 20             jp      ERROR           ; String pool overflow
2916+ 2F70
2917+ 2F70 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F71 CD 2F 2F     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F74 CD B4 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F77 CD C5 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F7A 1C                   inc     E               ; Length + 1
2922+ 2F7B 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F7C C8                   ret     Z               ; End of string
2924+ 2F7D 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2F7E CD 9A 23             call    OUTC            ; Output character in A
2926+ 2F81 FE 0D                cp      CR              ; Return?
2927+ 2F83 CC AF 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2F86 03                   inc     BC              ; Next byte in string
2929+ 2F87 C3 7B 2F             jp      PRSLP           ; More characters to output
2930+ 2F8A
2931+ 2F8A B7           TESTR:  or      A               ; Test if enough room
2932+ 2F8B 0E                   defb    $0E             ; No garbage collection done
2933+ 2F8C F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2F8D F5                   push    AF              ; Save status
2935+ 2F8E 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2F91 EB                   ex      DE,HL           ; To DE
2937+ 2F92 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2F95 2F                   cpl                     ; Negate length (Top down)
2939+ 2F96 4F                   ld      C,A             ; -Length to BC
2940+ 2F97 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2F99 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2F9A 23                   inc     HL              ; Plus one for 2's complement
2943+ 2F9B CD 89 23             call    CPDEHL          ; Below string RAM area?
2944+ 2F9E DA A8 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2FA1 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2FA4 23                   inc     HL              ; Point to first byte of string
2947+ 2FA5 EB                   ex      DE,HL           ; Address to DE
2948+ 2FA6 F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2FA7 C9                   ret
2950+ 2FA8
2951+ 2FA8 F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2FA9 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2FAB CA A9 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2FAE BF                   cp      A               ; Flag garbage collect done
2955+ 2FAF F5                   push    AF              ; Save status
2956+ 2FB0 01 8C 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2FB3 C5                   push    BC              ; Save for RETurn
2958+ 2FB4 2A 96 81     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2FB7 22 D2 81     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2FBA 21 00 00             ld      HL,$0000
2961+ 2FBD E5                   push    HL              ; Flag no string found
2962+ 2FBE 2A AD 80             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2FC1 E5                   push    HL              ; Save bottom of string space
2964+ 2FC2 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2FC5 EB           GRBLP:  ex      DE,HL
2966+ 2FC6 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2FC9 EB                   ex      DE,HL
2968+ 2FCA CD 89 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2FCD 01 C5 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FD0 C2 19 30             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FD3 2A 4B 82             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FD6 EB           SMPVAR: ex      DE,HL
2973+ 2FD7 2A 4D 82             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FDA EB                   ex      DE,HL
2975+ 2FDB CD 89 23             call    CPDEHL          ; All simple strings done?
2976+ 2FDE CA EC 2F             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 2FE1 7E                   ld      A,(HL)          ; Get type of variable
2978+ 2FE2 23                   inc     HL
2979+ 2FE3 23                   inc     HL
2980+ 2FE4 B7                   or      A               ; "S" flag set if string
2981+ 2FE5 CD 1C 30             call    STRADD          ; See if string in string area
2982+ 2FE8 C3 D6 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 2FEB
2984+ 2FEB C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 2FEC EB           ARRLP:  ex      DE,HL
2986+ 2FED 2A 4F 82             ld      HL,(ARREND)     ; End of string arrays
2987+ 2FF0 EB                   ex      DE,HL
2988+ 2FF1 CD 89 23             call    CPDEHL          ; All string arrays done?
2989+ 2FF4 CA 42 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 2FF7 CD C5 38             call    LOADFP          ; Get array name to BCDE
2991+ 2FFA 7B                   ld      A,E             ; Get type of array
2992+ 2FFB E5                   push    HL              ; Save address of num of dim'ns
2993+ 2FFC 09                   add     HL,BC           ; Start of next array
2994+ 2FFD B7                   or      A               ; Test type of array
2995+ 2FFE F2 EB 2F             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 3001 22 D4 81             ld      (CUROPR),HL     ; Save address of next array
2997+ 3004 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 3005 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 3006 06 00                ld      B,$00
3000+ 3008 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 3009 09                   add     HL,BC
3002+ 300A 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 300B EB           GRBARY: ex      DE,HL
3004+ 300C 2A D4 81             ld      HL,(CUROPR)     ; Get address of next array
3005+ 300F EB                   ex      DE,HL
3006+ 3010 CD 89 23             call    CPDEHL          ; Is this array finished?
3007+ 3013 CA EC 2F             jp      Z,ARRLP         ; Yes - Get next one
3008+ 3016 01 0B 30             ld      BC,GRBARY       ; Loop until array all done
3009+ 3019 C5           STPOOL: push    BC              ; Save return address
3010+ 301A F6 80                or      $80             ; Flag string type
3011+ 301C 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 301D 23                   inc     HL
3013+ 301E 23                   inc     HL
3014+ 301F 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 3020 23                   inc     HL
3016+ 3021 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 3022 23                   inc     HL
3018+ 3023 F0                   ret     P               ; Not a string - Return
3019+ 3024 B7                   or      A               ; Set flags on string length
3020+ 3025 C8                   ret     Z               ; Null string - Return
3021+ 3026 44                   ld      B,H             ; Save variable pointer
3022+ 3027 4D                   ld      C,L
3023+ 3028 2A D2 81             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 302B CD 89 23             call    CPDEHL          ; String been done?
3025+ 302E 60                   ld      H,B             ; Restore variable pointer
3026+ 302F 69                   ld      L,C
3027+ 3030 D8                   ret     C               ; String done - Ignore
3028+ 3031 E1                   pop     HL              ; Return address
3029+ 3032 E3                   ex      (SP),HL         ; Lowest available string area
3030+ 3033 CD 89 23             call    CPDEHL          ; String within string area?
3031+ 3036 E3                   ex      (SP),HL         ; Lowest available string area
3032+ 3037 E5                   push    HL              ; Re-save return address
3033+ 3038 60                   ld      H,B             ; Restore variable pointer
3034+ 3039 69                   ld      L,C
3035+ 303A D0                   ret     NC              ; Outside string area - Ignore
3036+ 303B C1                   pop     BC              ; Get return , Throw 2 away
3037+ 303C F1                   pop     AF              ;
3038+ 303D F1                   pop     AF              ;
3039+ 303E E5                   push    HL              ; Save variable pointer
3040+ 303F D5                   push    DE              ; Save address of current
3041+ 3040 C5                   push    BC              ; Put back return address
3042+ 3041 C9                   ret                     ; Go to it
3043+ 3042
3044+ 3042 D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 3043 E1                   pop     HL              ;
3046+ 3044 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3045 B4                   or      H
3048+ 3046 C8                   ret     Z               ; No more to do - Return
3049+ 3047 2B                   dec     HL
3050+ 3048 46                   ld      B,(HL)          ; MSB of address of string
3051+ 3049 2B                   dec     HL
3052+ 304A 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 304B E5                   push    HL              ; Save variable address
3054+ 304C 2B                   dec     HL
3055+ 304D 2B                   dec     HL
3056+ 304E 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 304F 26 00                ld      H,$00
3058+ 3051 09                   add     HL,BC           ; Address of end of string+1
3059+ 3052 50                   ld      D,B             ; String address to DE
3060+ 3053 59                   ld      E,C
3061+ 3054 2B                   dec     HL              ; Last byte in string
3062+ 3055 44                   ld      B,H             ; Address to BC
3063+ 3056 4D                   ld      C,L
3064+ 3057 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 305A CD 3E 20             call    MOVSTR          ; Move string to new address
3066+ 305D E1                   pop     HL              ; Restore variable address
3067+ 305E 71                   ld      (HL),C          ; Save new LSB of address
3068+ 305F 23                   inc     HL
3069+ 3060 70                   ld      (HL),B          ; Save new MSB of address
3070+ 3061 69                   ld      L,C             ; Next string area+1 to HL
3071+ 3062 60                   ld      H,B
3072+ 3063 2B                   dec     HL              ; Next string area address
3073+ 3064 C3 B7 2F             jp      GARBLP          ; Look for more strings
3074+ 3067
3075+ 3067 C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 3068 E5                   push    HL              ;
3077+ 3069 2A 59 82             ld      HL,(FPREG)      ; Get first string
3078+ 306C E3                   ex      (SP),HL         ; Save first string
3079+ 306D CD F2 2A             call    OPRND           ; Get second string
3080+ 3070 E3                   ex      (SP),HL         ; Restore first string
3081+ 3071 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3074 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3075 E5                   push    HL              ; Save first string
3084+ 3076 2A 59 82             ld      HL,(FPREG)      ; Get second string
3085+ 3079 E5                   push    HL              ; Save second string
3086+ 307A 86                   add     A,(HL)          ; Add length of second string
3087+ 307B 1E 1C                ld      E,LS            ; ?LS Error
3088+ 307D DA A9 20             jp      C,ERROR         ; String too long - Error
3089+ 3080 CD 20 2F             call    MKTMST          ; Make temporary string
3090+ 3083 D1                   pop     DE              ; Get second string to DE
3091+ 3084 CD B8 30             call    GSTRDE          ; Move to string pool if needed
3092+ 3087 E3                   ex      (SP),HL         ; Get first string
3093+ 3088 CD B7 30             call    GSTRHL          ; Move to string pool if needed
3094+ 308B E5                   push    HL              ; Save first string
3095+ 308C 2A D0 81             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 308F EB                   ex      DE,HL           ; To DE
3097+ 3090 CD 9E 30             call    SSTSA           ; First string to string area
3098+ 3093 CD 9E 30             call    SSTSA           ; Second string to string area
3099+ 3096 21 87 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 3099 E3                   ex      (SP),HL         ; Save return,get code string
3101+ 309A E5                   push    HL              ; Save code string address
3102+ 309B C3 51 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 309E
3104+ 309E E1           SSTSA:  pop     HL              ; Return address
3105+ 309F E3                   ex      (SP),HL         ; Get string block,save return
3106+ 30A0 7E                   ld      A,(HL)          ; Get length of string
3107+ 30A1 23                   inc     HL
3108+ 30A2 23                   inc     HL
3109+ 30A3 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 30A4 23                   inc     HL
3111+ 30A5 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 30A6 6F                   ld      L,A             ; Length to L
3113+ 30A7 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 30A8 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 30A9 C8                   ret     Z               ; End of string - Return
3116+ 30AA 0A                   ld      A,(BC)          ; Get source
3117+ 30AB 12                   ld      (DE),A          ; Save destination
3118+ 30AC 03                   inc     BC              ; Next source
3119+ 30AD 13                   inc     DE              ; Next destination
3120+ 30AE C3 A8 30             jp      TSALP           ; Loop until string moved
3121+ 30B1
3122+ 30B1 CD 6D 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 30B4 2A 59 82     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 30B7 EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 30B8 CD D2 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 30BB EB                   ex      DE,HL           ; Restore DE
3127+ 30BC C0                   ret     NZ              ; No - Return
3128+ 30BD D5                   push    DE              ; Save string
3129+ 30BE 50                   ld      D,B             ; String block address to DE
3130+ 30BF 59                   ld      E,C
3131+ 30C0 1B                   dec     DE              ; Point to length
3132+ 30C1 4E                   ld      C,(HL)          ; Get string length
3133+ 30C2 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 30C5 CD 89 23             call    CPDEHL          ; Last one in string area?
3135+ 30C8 C2 D0 30             jp      NZ,POPHL        ; No - Return
3136+ 30CB 47                   ld      B,A             ; Clear B (A=0)
3137+ 30CC 09                   add     HL,BC           ; Remove string from str' area
3138+ 30CD 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30D0 E1           POPHL:  pop     HL              ; Restore string
3140+ 30D1 C9                   ret
3141+ 30D2
3142+ 30D2 2A C0 81     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30D5 2B                   dec     HL              ; Back
3144+ 30D6 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30D7 2B                   dec     HL              ; Back
3146+ 30D8 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30D9 2B                   dec     HL              ; Back
3148+ 30DA 2B                   dec     HL              ; Back
3149+ 30DB CD 89 23             call    CPDEHL          ; String last in string pool?
3150+ 30DE C0                   ret     NZ              ; Yes - Leave it
3151+ 30DF 22 C0 81             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 30E2 C9                   ret
3153+ 30E3
3154+ 30E3 01 62 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 30E6 C5                   push    BC              ; Save address
3156+ 30E7 CD B1 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 30EA AF                   xor     A
3158+ 30EB 57                   ld      D,A             ; Clear D
3159+ 30EC 32 94 81             ld      (TYPE),A        ; Set type to numeric
3160+ 30EF 7E                   ld      A,(HL)          ; Get length of string
3161+ 30F0 B7                   or      A               ; Set status flags
3162+ 30F1 C9                   ret
3163+ 30F2
3164+ 30F2 01 62 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 30F5 C5                   push    BC              ; Save address
3166+ 30F6 CD E7 30     GTFLNM: call    GETLEN          ; Get length of string
3167+ 30F9 CA A3 26             jp      Z,FCERR         ; Null string - Error
3168+ 30FC 23                   inc     HL
3169+ 30FD 23                   inc     HL
3170+ 30FE 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 30FF 23                   inc     HL
3172+ 3100 56                   ld      D,(HL)          ; Get MSB of address
3173+ 3101 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 3102 C9                   ret
3175+ 3103
3176+ 3103 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 3105 CD 20 2F             call    MKTMST          ; Make a temporary string
3178+ 3108 CD F2 32             call    MAKINT          ; Make it integer A
3179+ 310B 2A D0 81             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 310E 73                   ld      (HL),E          ; Save character
3181+ 310F C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 3110 C3 51 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 3113
3184+ 3113 CD A2 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 3116 AF                   xor     A               ; Start at first byte in string
3186+ 3117 E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 3118 4F                   ld      C,A             ; Starting position in string
3188+ 3119 E5           MID1:   push    HL              ; Save string block address
3189+ 311A 7E                   ld      A,(HL)          ; Get length of string
3190+ 311B B8                   cp      B               ; Compare with number given
3191+ 311C DA 21 31             jp      C,ALLFOL        ; All following bytes required
3192+ 311F 78                   ld      A,B             ; Get new length
3193+ 3120 11                   defb    $11             ; Skip "ld C,0"
3194+ 3121 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 3123 C5                   push    BC              ; Save position in string
3196+ 3124 CD 8A 2F             call    TESTR           ; See if enough string space
3197+ 3127 C1                   pop     BC              ; Get position in string
3198+ 3128 E1                   pop     HL              ; Restore string block address
3199+ 3129 E5                   push    HL              ; And re-save it
3200+ 312A 23                   inc     HL
3201+ 312B 23                   inc     HL
3202+ 312C 46                   ld      B,(HL)          ; Get LSB of address
3203+ 312D 23                   inc     HL
3204+ 312E 66                   ld      H,(HL)          ; Get MSB of address
3205+ 312F 68                   ld      L,B             ; HL = address of string
3206+ 3130 06 00                ld      B,$00           ; BC = starting address
3207+ 3132 09                   add     HL,BC           ; Point to that byte
3208+ 3133 44                   ld      B,H             ; BC = source string
3209+ 3134 4D                   ld      C,L
3210+ 3135 CD 23 2F             call    CRTMST          ; Create a string entry
3211+ 3138 6F                   ld      L,A             ; Length of new string
3212+ 3139 CD A7 30             call    TOSTRA          ; Move string to string area
3213+ 313C D1                   pop     DE              ; Clear stack
3214+ 313D CD B8 30             call    GSTRDE          ; Move to string pool if needed
3215+ 3140 C3 51 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 3143
3217+ 3143
3218+ 3143              ; INSTR statement - look for a string inside another string
3219+ 3143              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 3143              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 3143              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 3143              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 3143              LNS1    equ     TMPBFR1
3224+ 3143              ADRS1   equ     TMPBFR2
3225+ 3143              LNS2    equ     TMPBFR3
3226+ 3143              ADRS2   equ     TMPBFR4
3227+ 3143              PT      equ     VIDEOBUFF
3228+ 3143              PT1     equ     VIDEOBUFF+2
3229+ 3143              PT2     equ     VIDEOBUFF+4
3230+ 3143              TP      equ     VIDEOBUFF+6
3231+ 3143              TF      equ     VIDEOBUFF+8
3232+ 3143 CD 8F 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 3146 28                   defb    '('
3234+ 3147 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 3148 CD D8 25             call    GETCHR          ; check if something follows
3236+ 314B CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 314E CD 7B 2A             call    EVAL            ; Evaluate expression
3238+ 3151 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3154 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 3157 CD B4 30             call    GSTRCU          ; check that a string follows
3241+ 315A CD C5 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 315D ED 53 05 82          ld      (LNS1),DE       ; store values into
3243+ 3161 ED 43 07 82          ld      (ADRS1),BC      ; temp buffers
3244+ 3165 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 3168 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3246+ 316B 2C                   defb    ','
3247+ 316C 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 316D CD D8 25             call    GETCHR          ; check if something follows
3249+ 3170 CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 3173 CD 7B 2A             call    EVAL            ; Evaluate expression
3251+ 3176 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
3252+ 3179 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 317C CD B4 30             call    GSTRCU          ; check that a string follows
3254+ 317F CD C5 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 3182 ED 53 09 82          ld      (LNS2),DE       ; store values into
3256+ 3186 ED 43 0B 82          ld      (ADRS2),BC      ; temp buffers
3257+ 318A 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 318D CD 8F 23             call    CHKSYN          ; make sure ")" follows
3259+ 3190 29                   defb    ')'
3260+ 3191 E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 3192 FD E1                pop     IY              ; ...into IY
3262+ 3194 AF                   xor     A               ; reset 10 RAM cells
3263+ 3195 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 3197 21 0D 82             ld      HL,PT           ; first cell
3265+ 319A 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 319B 23                   inc     HL              ; next cell
3267+ 319C 10 FC                djnz    EMPTINS         ; repeat
3268+ 319E ED 5B 09 82          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 31A2 2A 05 82             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 31A5 CD 1E 4D             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 31A8 DA 1D 32             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 31AB AF           RPTINST:xor     A               ; reset...
3273+ 31AC 32 13 82             ld      (TP),A          ; ...TP...
3274+ 31AF 32 15 82             ld      (TF),A          ; ...and TF
3275+ 31B2 ED 4B 0D 82          ld      BC,(PT)         ; pointer to S1
3276+ 31B6 2A 07 82             ld      HL,(ADRS1)      ; first cell of S1
3277+ 31B9 09                   add     HL,BC           ; get current position into RAM
3278+ 31BA 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 31BB 2A 0B 82             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 31BE BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 31BF 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 31C1 3A 0D 82             ld      A,(PT)          ; load current PT
3283+ 31C4 32 13 82             ld      (TP),A          ; TP=PT
3284+ 31C7 32 0F 82             ld      (PT1),A         ; P1=PT
3285+ 31CA AF                   xor     A               ; set...
3286+ 31CB 32 11 82             ld      (PT2),A         ; ...PT2=0
3287+ 31CE 3C                   inc     A               ;
3288+ 31CF 32 15 82             ld      (TF),A          ; set TF=1
3289+ 31D2 ED 4B 0F 82  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31D6 2A 07 82             ld      HL,(ADRS1)      ; load address of S1
3291+ 31D9 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31DA 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31DB ED 4B 11 82          ld      BC,(PT2)        ; load pointer PT2
3294+ 31DF 2A 0B 82             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 31E2 09                   add     HL,BC           ; find S2(PT2)
3296+ 31E3 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 31E4 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 31E6 21 0F 82             ld      HL,PT1
3299+ 31E9 34                   inc     (HL)            ; increment PT1
3300+ 31EA 3A 11 82             ld      A,(PT2)
3301+ 31ED 3C                   inc     A               ; increment PT2
3302+ 31EE 32 11 82             ld      (PT2),A
3303+ 31F1 CA FB 31             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 31F4 21 09 82             ld      HL,LNS2         ; len(S2)
3305+ 31F7 BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 31F8 DA D2 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 31FB 3A 15 82     CNT1INS:ld      A,(TF)          ; check TF
3308+ 31FE A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 31FF 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 3201 2A 05 82             ld      HL,(LNS1)       ; load len(S1)
3311+ 3204 ED 4B 09 82          ld      BC,(LNS2)       ; load len(S2)
3312+ 3208 ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 320A ED 5B 0D 82          ld      DE,(PT)         ; load pointer
3314+ 320E 1C                   inc     E               ; PT=PT+1
3315+ 320F ED 53 0D 82          ld      (PT),DE         ; store new value
3316+ 3213 EB                   ex      DE,HL           ; invert registers
3317+ 3214 CD 1E 4D             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 3217 DA AB 31             jp      C,RPTINST       ; repeat if <
3319+ 321A CA AB 31             jp      Z,RPTINST       ; repeat if =
3320+ 321D 3A 15 82     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 3220 A7                   and     A               ; is it 0?
3322+ 3221 CA 28 32             jp      Z,LVINSTR       ; yes, return 0
3323+ 3224 3A 13 82             ld      A,(TP)          ; return TP...
3324+ 3227 3C                   inc     A               ; ...incremented by 1
3325+ 3228 E1           LVINSTR:pop     HL              ; drop original return point
3326+ 3229 FD E5                push    IY              ; load current string address from IY into stack
3327+ 322B 11 54 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 322E D5                   push    DE              ; ...saved on stack
3329+ 322F C3 62 2E             jp      PASSA           ; return TP
3330+ 3232 AF           CNTZIN: xor     A               ; set...
3331+ 3233 32 15 82             ld      (TF),A          ; TF=0
3332+ 3236 C3 FB 31             jp      CNT1INS         ; continue
3333+ 3239
3334+ 3239
3335+ 3239              ; returns the right portion of a string
3336+ 3239 CD A2 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 323C D1                   pop     DE              ; Get string length
3338+ 323D D5                   push    DE              ; And re-save
3339+ 323E 1A                   ld      A,(DE)          ; Get length
3340+ 323F 90                   sub     B               ; Move back N bytes
3341+ 3240 C3 17 31             jp      RIGHT1          ; Go and get sub-string
3342+ 3243
3343+ 3243              ; returns a piece of a string
3344+ 3243 EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3244 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3245 CD A7 32             call    MIDNUM          ; Get number supplied
3347+ 3248 04                   inc     B               ; Is it character zero?
3348+ 3249 05                   dec     B
3349+ 324A CA A3 26             jp      Z,FCERR         ; Yes - Error
3350+ 324D C5                   push    BC              ; Save starting position
3351+ 324E 1E FF                ld      E,$FF           ; All of string
3352+ 3250 FE 29                cp      ')'             ; Any length given?
3353+ 3252 CA 5C 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3255 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3355+ 3258 2C                   defb    ','
3356+ 3259 CD EF 32             call    GETINT          ; Get integer 0-255
3357+ 325C CD 8F 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 325F 29                   defb    ')'
3359+ 3260 F1                   pop     AF              ; Restore starting position
3360+ 3261 E3                   ex      (SP),HL         ; Get string,save code string
3361+ 3262 01 19 31             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3265 C5                   push    BC              ; Save for return
3363+ 3266 3D                   dec     A               ; Starting position-1
3364+ 3267 BE                   cp      (HL)            ; Compare with length
3365+ 3268 06 00                ld      B,$00           ; Zero bytes length
3366+ 326A D0                   ret     NC              ; Null string if start past end
3367+ 326B 4F                   ld      C,A             ; Save starting position-1
3368+ 326C 7E                   ld      A,(HL)          ; Get length of string
3369+ 326D 91                   sub     C               ; Subtract start
3370+ 326E BB                   cp      E               ; Enough string for it?
3371+ 326F 47                   ld      B,A             ; Save maximum length available
3372+ 3270 D8                   ret     C               ; Truncate string if needed
3373+ 3271 43                   ld      B,E             ; Set specified length
3374+ 3272 C9                   ret                     ; Go and create string
3375+ 3273
3376+ 3273
3377+ 3273              ; return the value of a numeric string
3378+ 3273 CD E7 30     VAL:    call    GETLEN          ; Get length of string
3379+ 3276 CA 45 36             jp      Z,RESZER        ; Result zero
3380+ 3279 5F                   ld      E,A             ; Save length
3381+ 327A 23                   inc     HL
3382+ 327B 23                   inc     HL
3383+ 327C 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 327D 23                   inc     HL
3385+ 327E 66                   ld      H,(HL)          ; Get MSB of address
3386+ 327F 6F                   ld      L,A             ; HL = String address
3387+ 3280 E5                   push    HL              ; Save string address
3388+ 3281 19                   add     HL,DE
3389+ 3282 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 3283 72                   ld      (HL),D          ; Zero it to terminate
3391+ 3284 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 3285 C5                   push    BC              ; Save end+1 byte
3393+ 3286 7E                   ld      A,(HL)          ; Get starting byte
3394+ 3287 FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 3289 C2 91 32             jp      NZ,VAL1
3396+ 328C CD 50 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 328F 18 0D                jr      VAL3
3398+ 3291 FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 3293 C2 9B 32             jp      NZ,VAL2
3400+ 3296 CD C0 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 3299 18 03                jr      VAL3
3402+ 329B CD 7D 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 329E C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 329F E1                   pop     HL              ; Restore end+1 address
3405+ 32A0 70                   ld      (HL),B          ; Put back original byte
3406+ 32A1 C9                   ret
3407+ 32A2
3408+ 32A2 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 32A3 CD 8F 23             call    CHKSYN          ; Make sure ")" follows
3410+ 32A6 29                   defb    ')'
3411+ 32A7 C1           MIDNUM: pop     BC              ; Get return address
3412+ 32A8 D1                   pop     DE              ; Get number supplied
3413+ 32A9 C5                   push    BC              ; Re-save return address
3414+ 32AA 43                   ld      B,E             ; Number to B
3415+ 32AB C9                   ret
3416+ 32AC
3417+ 32AC CD F2 32     INP:    call    MAKINT          ; Make it integer A
3418+ 32AF 32 A0 80             ld      (INPORT),A      ; Set input port
3419+ 32B2 CD 9F 80             call    INPSUB          ; Get input from port
3420+ 32B5 C3 62 2E             jp      PASSA           ; Return integer A
3421+ 32B8
3422+ 32B8 CD DC 32     POUT:   call    SETIO           ; Set up port number
3423+ 32BB C3 67 80             jp      OUTSUB          ; Output data and return
3424+ 32BE
3425+ 32BE CD DC 32     WAIT:   call    SETIO           ; Set up port number
3426+ 32C1 F5                   push    AF              ; Save AND mask
3427+ 32C2 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 32C4 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 32C5 CD D8 25             call    GETCHR          ; Get next character
3430+ 32C8 CA D2 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 32CB CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3432+ 32CE 2C                   defb    ','
3433+ 32CF CD EF 32             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32D2 C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32D3 CD 9F 80     WAITLP: call    INPSUB          ; Get input
3436+ 32D6 AB                   xor     E               ; Flip selected bits
3437+ 32D7 A0                   and     B               ; Result non-zero?
3438+ 32D8 CA D3 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32DB C9                   ret
3440+ 32DC
3441+ 32DC CD EF 32     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 32DF 32 A0 80             ld      (INPORT),A      ; Set input port
3443+ 32E2 32 68 80             ld      (OTPORT),A      ; Set output port
3444+ 32E5 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3445+ 32E8 2C                   defb    ','
3446+ 32E9 C3 EF 32             jp      GETINT          ; Get integer 0-255 and return
3447+ 32EC
3448+ 32EC CD D8 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 32EF CD 69 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 32F2 CD 88 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 32F5 7A                   ld      A,D             ; Get MSB of number
3452+ 32F6 B7                   or      A               ; Zero?
3453+ 32F7 C2 A3 26             jp      NZ,FCERR        ; No - Error
3454+ 32FA 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 32FB CD D8 25             call    GETCHR          ; Get next character
3456+ 32FE 7B                   ld      A,E             ; Get number to A
3457+ 32FF C9                   ret
3458+ 3300
3459+ 3300
3460+ 3300              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 3300              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 3300 CD 69 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 3303 CD 8E 26             call    DEINT           ; get integer -32768 to 32767
3464+ 3306 7B                   ld      A,E             ; check if address is 0
3465+ 3307 B2                   or      D
3466+ 3308 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 330A F3           DISNMI: di                      ; disable INTs
3468+ 330B CD 37 33             call    NMIDINT         ; disable VDP INT
3469+ 330E E5                   push    HL              ; store HL
3470+ 330F 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 3312 22 61 80             ld      (NMIUSR),HL     ; store RETN
3472+ 3315 AF                   xor     A
3473+ 3316 32 63 80             ld      (NMIUSR+2),A    ; "NOP"
3474+ 3319 18 11                jr      NMI2            ; execute the last part of code
3475+ 331B E5           NM1:    push    HL              ; store current HL
3476+ 331C EB                   ex      DE,HL           ; move address argument into HL
3477+ 331D F3                   di                      ; disable INTs
3478+ 331E CD 37 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 3321 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 3323 32 61 80             ld      (NMIUSR),A      ; store it
3481+ 3326 22 62 80             ld      (NMIUSR+1),HL   ; store address
3482+ 3329 CD 30 33             call    NMIEINT         ; re-enable VDP INT
3483+ 332C FB           NMI2:   ei                      ; re-enable INTS
3484+ 332D 00                   nop                     ; wait for INTs
3485+ 332E E1                   pop    HL               ; retrieve HL
3486+ 332F C9                   ret                     ; return to caller
3487+ 3330              ; enable VDP INT
3488+ 3330 CD 46 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 3333 F6 20                or      %00100000       ; enable VDP INT
3490+ 3335 18 03                jr      NMIINT          ; rest of code is shared
3491+ 3337              ; disable VDP INT
3492+ 3337 CD 46 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 333A D5           NMIINT: push    DE              ; store DE
3494+ 333B 5F                   ld      E,A             ; move value into E
3495+ 333C 3E 01                ld      A,$01           ; VREG #1
3496+ 333E F3                   di                      ; disable INTs
3497+ 333F CD D1 06             call    WRITE_VREG      ; disable VDP INT
3498+ 3342 FB                   ei                      ; re-enable INTs
3499+ 3343 00                   nop                     ; wait for INTs being enabled
3500+ 3344 D1                   pop     DE              ; retrieve DE
3501+ 3345 C9                   ret                     ; return to caller
3502+ 3346
3503+ 3346              ; load VREG #1 setting for current screen mode and return it into A
3504+ 3346 E5           NMIVR1: push    HL              ; store HL
3505+ 3347 D5                   push    DE              ; store DE
3506+ 3348 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
3507+ 334B 87                   add     A,A             ; multiply A by 8...
3508+ 334C 87                   add     A,A             ; ...so that reg. A can points..
3509+ 334D 87                   add     A,A             ; to the correct settings
3510+ 334E 3C                   inc     A               ; need to change VREG 1
3511+ 334F 5F                   ld      E,A             ; copy A into E
3512+ 3350 16 00                ld      D,$00           ; reset D
3513+ 3352 21 43 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3355 19                   add     HL,DE           ; ...for current screen mode
3515+ 3356 7E                   ld      A,(HL)          ; load current setting
3516+ 3357 D1                   pop     DE              ; retrieve DE
3517+ 3358 E1                   pop     HL              ; retrieve HL
3518+ 3359 C9                   ret                     ; return to caller
3519+ 335A
3520+ 335A              ; execute a machine language routine, eventually passing a param into A
3521+ 335A CD 69 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 335D CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 3360 ED 53 07 82          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3364 AF                   xor     A               ; reset A
3525+ 3365 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 3368 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 3369 CD D8 25             call    GETCHR          ; check next character
3528+ 336C 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 336E CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3530+ 3371 2C                   defb    ','
3531+ 3372 CD EF 32             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3375 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 3378 3A 05 82     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 337B ED 5B 07 82          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 337F E5                   push    HL              ; save code string address
3536+ 3380 EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 3381 11 86 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 3384 D5                   push    DE              ; store into stack
3539+ 3385 E9                   jp      (HL)            ; call user routine
3540+ 3386 E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 3387 C9                   ret                     ; return to caller
3542+ 3388
3543+ 3388
3544+ 3388              ; read the contents of a RAM location
3545+ 3388 CD 8E 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 338B 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 338C C3 62 2E             jp      PASSA           ; Return into A
3548+ 338F
3549+ 338F              ; read the contents of a VRAM location
3550+ 338F CD 8E 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 3392 EB                   ex      DE,HL           ; Copy param into HL
3552+ 3393 F3                   di                      ; Disable interrupts
3553+ 3394 CD A7 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 3397 FB                   ei                      ; Re-enable interrupts
3555+ 3398 EB                   ex      DE,HL           ; Restore HL
3556+ 3399 C3 62 2E             jp      PASSA           ; Return value into A
3557+ 339C
3558+ 339C              ; recover params for POKE/VPOKE commands
3559+ 339C              ; returns address into DE and byte to be written into A
3560+ 339C CD 69 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 339F CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 33A2 ED 53 05 82          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 33A6 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3564+ 33A9 2C                   defb    ','
3565+ 33AA CD EF 32             call    GETINT          ; Get integer 0-255
3566+ 33AD ED 5B 05 82          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 33B1 C9                   ret                     ; Return to caller
3568+ 33B2
3569+ 33B2              ; write a byte into a RAM location
3570+ 33B2 CD 9C 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 33B5 12                   ld      (DE),A          ; Load it into memory
3572+ 33B6 C9                   ret
3573+ 33B7
3574+ 33B7              ; write a byte into a VRAM location
3575+ 33B7 CD 9C 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 33BA EB                   ex      DE,HL           ; Copy address into HL
3577+ 33BB F3                   di                      ; Disable interrupts
3578+ 33BC CD BC 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 33BF FB                   ei                      ; Re-enable interrupts
3580+ 33C0 EB                   ex      DE,HL           ; Restore HL
3581+ 33C1 C9                   ret                     ; Return to caller
3582+ 33C2
3583+ 33C2              ; position the cursor at a specific X,Y location onto screen
3584+ 33C2 CD EF 32     LOCATE: call    GETINT          ; get the first param into A
3585+ 33C5 E5                   push    HL              ; store HL
3586+ 33C6 21 F5 81             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 33C9 5E                   ld      E,(HL)          ; load screen width into E
3588+ 33CA E1                   pop     HL              ; restore HL
3589+ 33CB BB                   cp      E               ; compare witdh with param
3590+ 33CC D2 A3 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 33CF 32 05 82             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33D2 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33D5 2C                   defb    ','
3594+ 33D6 CD EF 32             call    GETINT          ; Get the second param into A
3595+ 33D9 E5                   push    HL              ; store HL
3596+ 33DA 21 F6 81             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33DD 5E                   ld      E,(HL)          ; load screen width into A
3598+ 33DE E1                   pop     HL              ; restore HL
3599+ 33DF BB                   cp      E               ; compare witdh with param
3600+ 33E0 D2 A3 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 33E3 32 FD 81             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 33E6 3A 05 82             ld      A,(TMPBFR1)     ; recover the new X
3603+ 33E9 32 FC 81             ld      (SCR_CUR_NX),A  ; store new X
3604+ 33EC E5                   push    HL              ; store HL
3605+ 33ED F3                   di                      ; disable INTs
3606+ 33EE CD ED 06             call    MOVCRS          ; move cursor to new location
3607+ 33F1 FB                   ei                      ; re-enable INTs
3608+ 33F2 E1                   pop     HL              ; restore HL
3609+ 33F3 C9                   ret                     ; return to caller
3610+ 33F4
3611+ 33F4              ; write a byte into one of the PSG registers
3612+ 33F4 CD EF 32     SREG:   call    GETINT          ; Get register number back into A
3613+ 33F7 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 33F9 D2 A3 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 33FC 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 33FF CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3617+ 3402 2C                   defb    ','
3618+ 3403 CD EF 32             call    GETINT          ; get second value (0-255), returned into A
3619+ 3406 5F                   ld      E,A             ; store value into E
3620+ 3407 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 340A F3                   di                      ; disable INTs
3622+ 340B 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 340D ED 79                out     (C),A           ; send register # to PSG
3624+ 340F 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 3411 ED 59                out     (C),E           ; send byte to write into selected register
3626+ 3413 FB                   ei                      ; re-enable INTs
3627+ 3414 C9                   ret                     ; return to caller
3628+ 3415
3629+ 3415              ; VOLUME ch,vol
3630+ 3415              ; set the volume for the audio channels
3631+ 3415              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 3415 CD EF 32     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 3418 FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 341A D2 A3 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 341D 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 3420 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3637+ 3423 2C                   defb    ','
3638+ 3424 CD EF 32             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 3427 FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 3429 D2 A3 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 342C 57                   ld      D,A             ; store volume into D
3642+ 342D 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 3430 A7                   and     A               ; is it 0? (0=every channel)
3644+ 3431 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 3433 06 03                ld      B,$03           ; yes, set every channel
3646+ 3435 1E 08                ld      E,$08           ; register volume of first channel
3647+ 3437 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 3439 ED 59                out     (C),E           ; set register #
3649+ 343B 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 343D ED 51                out     (C),D           ; send volume
3651+ 343F 1C                   inc     E               ; next register
3652+ 3440 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 3442 C9                   ret                     ; return to caller
3654+ 3443 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3445 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 3447 ED 79                out     (C),A           ; set register
3657+ 3449 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 344B ED 51                out     (C),D           ; send volume level
3659+ 344D C9                   ret                     ; return to caller
3660+ 344E
3661+ 344E              ; SOUND ch,tone,dur
3662+ 344E              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 344E              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 344E              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 344E CD EF 32     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 3451 A7                   and     A               ; is it zero?
3667+ 3452 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3454 E5                   push    HL              ; store HL
3669+ 3455 F3                   di                      ; disable INTs
3670+ 3456 CD B5 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 3459 FB                   ei                      ; re-enable INTs
3672+ 345A E1                   pop     HL              ; retrieve HL
3673+ 345B C9                   ret                     ; return to caller
3674+ 345C 32 05 82     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 345F FE 04                cp      $04             ; is channel >3?
3676+ 3461 D2 E0 34             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3464 CD 8F 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 3467 2C                   defb    ','
3679+ 3468 CD 69 2A             call    GETNUM          ; Get tone frequency
3680+ 346B CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 346E ED 53 07 82          ld      (TMPBFR2),DE    ; Store frequency
3682+ 3472 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3475 2C                   defb    ','
3684+ 3476 CD 69 2A             call    GETNUM          ; Get duration
3685+ 3479 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 347C ED 53 09 82          ld      (TMPBFR3),DE    ; Store duration
3687+ 3480                                              ; CHECK CHANNEL
3688+ 3480 3A 05 82             ld      A,(TMPBFR1)     ; recover channel
3689+ 3483 FE 01                cp      $01             ; is channel <1?
3690+ 3485 DA A3 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 3488                                              ; CHECK FREQUENCY
3692+ 3488 ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 348C 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 348D FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 348F D2 A3 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 3492                                              ; CHECK DURATION
3697+ 3492 ED 5B 09 82          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 3496 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 3497 E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 3499 C2 A3 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 349C                                              ;
3702+ 349C                                              ; SET TONE:
3703+ 349C                                              ; let's start by setting up the channel
3704+ 349C 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3705+ 349F FE 03                cp      $03             ; is it 3?
3706+ 34A1 20 02                jr      NZ,SND1         ; no, jump over
3707+ 34A3 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 34A5 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 34A6 CD 2D 35             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 34A9                                              ; SET FREQUENCY
3711+ 34A9                                              ; we simply get frequency and subtract from 4096. The result
3712+ 34A9                                              ; is put into register pair of the corresponding freq tone channel
3713+ 34A9 ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 34AD E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 34AE 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 34B1 A7                   and     A               ; reset C flag
3717+ 34B2 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 34B4 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3719+ 34B7 3D                   dec     A               ; set A into the range 0~2
3720+ 34B8 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 34B9 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 34BB ED 79                out     (C),A           ; select first register of the pair
3723+ 34BD 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 34BF ED 69                out     (C),L           ; send high byte
3725+ 34C1 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 34C3 3C                   inc     A               ; second register of the pair
3727+ 34C4 ED 79                out     (C),A           ; select register
3728+ 34C6 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 34C8 ED 61                out     (C),H           ; send low byte
3730+ 34CA ED 5B 09 82          ld      DE,(TMPBFR3)    ; recover duration
3731+ 34CE 3A 05 82             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34D1 3D                   dec     A               ; set channel into the range 0~2
3733+ 34D2 87                   add     A,A             ; double A to find the correct offset
3734+ 34D3 21 39 82             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34D6 85                   add     A,L             ; ...the proper...
3736+ 34D7 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34D9 24                   inc     H               ; yes, increment H)
3738+ 34DA 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34DB 73                   ld      (HL),E          ; ...and store the value
3740+ 34DC 23                   inc     HL
3741+ 34DD 72                   ld      (HL),D
3742+ 34DE E1                   pop     HL              ; retrieve HL
3743+ 34DF C9                   ret                     ; Return to caller
3744+ 34E0 FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 34E2 D2 A3 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 34E5 CD 8F 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 34E8 2C                   defb    ','
3748+ 34E9 CD EF 32             call    GETINT          ; get integer 0-255 (frequency)
3749+ 34EC FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 34EE D2 A3 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 34F1 32 07 82             ld      (TMPBFR2),A     ; store freq.
3752+ 34F4 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 34F5 CD D8 25             call    GETCHR          ; check that nothing follows
3754+ 34F8 C2 8F 20             jp      NZ,SNERR        ; error if no empty line
3755+ 34FB 3A 07 82             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 34FE 5F                   ld      E,A             ; store freq into E
3757+ 34FF 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 3502 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 3504 FE 03                cp      $03             ; is it 3?
3760+ 3506 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 3508 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 350A 87           NOS1:   add     A,A
3763+ 350B 87                   add     A,A
3764+ 350C 87                   add     A,A             ; let's move A 3 bits to left
3765+ 350D 47                   ld      B,A             ; store channel into B
3766+ 350E 7B                   ld      A,E             ; check if
3767+ 350F A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 3510 F3                   di                      ; disable INts
3769+ 3511 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 3513 3E 07                ld      A,$07           ; mixer register
3771+ 3515 CD 03 0D             call    SETSNDREG       ; set mixer register
3772+ 3518 ED 78                in      A,(C)           ; load current mixer value
3773+ 351A B0                   or      B               ; disable noise
3774+ 351B 18 19                jr      NOS3            ; continue over
3775+ 351D 78           NOS2:   ld      A,B             ; recover channel
3776+ 351E 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 351F CD 2D 35             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 3522 3E 06                ld      A,$06           ; write into noise register
3779+ 3524 CD 03 0D             call    SETSNDREG       ; set register into PSG
3780+ 3527 7B                   ld      A,E             ; load value for noise frequency
3781+ 3528 CD 08 0D             call    WRTSNDREG       ; write data into register $06
3782+ 352B FB                   ei                      ; re-enable INTs
3783+ 352C C9                   ret
3784+ 352D                      ; enable line into mixer of channel stored in A
3785+ 352D 47           WRTSND: ld      B,A             ; move channel into B
3786+ 352E 3E 07                ld      A,$07           ; mixer register
3787+ 3530 CD 03 0D             call    SETSNDREG       ; set mixer register
3788+ 3533 ED 78                in      A,(C)           ; load current value
3789+ 3535 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 3536                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 3536                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 3536                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 3536                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 3536 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 3537 3E 07                ld      A,$07           ; mixer address
3796+ 3539 CD 03 0D             call    SETSNDREG       ; set register
3797+ 353C 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 353D CD 08 0D             call    WRTSNDREG       ; send new value for the mixer
3799+ 3540 FB                   ei                      ; re-enable INTs
3800+ 3541 C9                   ret                     ; return to caller
3801+ 3542
3802+ 3542              ; write a byte into one of the VDP registers
3803+ 3542 CD EF 32     VREG:   call    GETINT          ; Get register number back into A
3804+ 3545 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 3547 D2 A3 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 354A 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 354D CD 8F 23             call    CHKSYN          ; Make sure ',' follows
3808+ 3550 2C                   defb    ','
3809+ 3551 CD EF 32             call    GETINT          ; get value (0-255)
3810+ 3554 5F                   ld      E,A             ; store value into E
3811+ 3555 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 3558 F3                   di                      ; disable INTs
3813+ 3559 CD D1 06             call    WRITE_VREG      ; write value into VDP register
3814+ 355C FB                   ei                      ; re-enable INTs
3815+ 355D C9                   ret                     ; return to caller
3816+ 355E
3817+ 355E              ; read the VDP status register and return it into A
3818+ 355E CD 8E 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 3561 F3                   di                      ; disable INTs
3820+ 3562 CD DC 06             call    READ_VSTAT      ; read VDP register status
3821+ 3565 FB                   ei                      ; re-enable INTs
3822+ 3566 C3 62 2E             jp      PASSA           ; Return integer A
3823+ 3569
3824+ 3569              ; read from PSG register and return it into A
3825+ 3569 CD 8E 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 356C 7B                   ld      A,E             ; consider LSB
3827+ 356D FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 356F D2 A3 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 3572 F3                   di                      ; disable INts
3830+ 3573 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3575 ED 79                out     (C),A           ; send register to read from
3832+ 3577 ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 3579 FB                   ei                      ; re-enable INTs
3834+ 357A C3 62 2E             jp      PASSA           ; return A
3835+ 357D
3836+ 357D              ; read the temp key buffer and return the value of the current key being pressed
3837+ 357D              ; can wait for the number of 100thds of second before to return
3838+ 357D CD DC 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 3580 CD 8E 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 3583 C5                   push    BC              ; store BC
3841+ 3584 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 3587 47                   ld      B,A             ; move it into B
3843+ 3588 3A E5 81     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 358B B8                   cp      B               ; ...to let the sniffer collect...
3845+ 358C 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 358E 7A                   ld      A,D             ; check the param
3847+ 358F B3                   or      E               ; if DE<>0 then...
3848+ 3590 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 3592 3A 41 82             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 3595 18 2A                jr      ENDINK          ; ...return it
3851+ 3597 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 3598 FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 359A D2 A3 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 359D E5                   push    HL              ; store HL
3855+ 359E 21 09 00             ld      HL,$0009        ; check if value
3856+ 35A1 CD 1E 4D             call    CMP16           ; is < 10
3857+ 35A4 E1                   pop     HL              ; retrieve HL
3858+ 35A5 DA AB 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 35A8 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 35AB 3A E5 81     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 35AE 47                   ld      B,A             ; move it into B
3862+ 35AF 3A 41 82     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 35B2 A7                   and     A               ; is it 0?
3864+ 35B3 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 35B5 3A E5 81             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 35B8 B8                   cp      B               ; is it the same value?
3867+ 35B9 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 35BB 47                   ld      B,A             ; store new value
3869+ 35BC 1B                   dec     DE              ; no, decrement timer
3870+ 35BD 7A                   ld      A,D             ; check if zero reached
3871+ 35BE B3                   or      E               ; by ORing D and E
3872+ 35BF 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 35C1 C1           ENDINK: pop     BC              ; restore BC
3874+ 35C2 F5                   push    AF              ; store A
3875+ 35C3 F3                   di                      ; disable INTs
3876+ 35C4 AF                   xor     A               ; clear the...
3877+ 35C5 32 41 82             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 35C8 FB                   ei                      ; re-enable INTs
3879+ 35C9 F1                   pop     AF              ; retrieve A
3880+ 35CA C3 62 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 35CD
3882+ 35CD
3883+ 35CD 21 F4 3A     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35D0 CD C5 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35D3 C3 DF 35             jp      FPADD           ; Add BCDE to FPREG
3886+ 35D6
3887+ 35D6
3888+ 35D6 CD C5 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35D9 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35DA C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35DB D1                   pop     DE
3892+ 35DC CD 9F 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 35DF 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 35E0 B7                   or      A               ; Is number zero?
3895+ 35E1 C8                   ret     Z               ; Yes - Nothing to add
3896+ 35E2 3A 5C 82             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 35E5 B7                   or      A               ; Is this number zero?
3898+ 35E6 CA B7 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 35E9 90                   sub     B               ; BCDE number larger?
3900+ 35EA D2 F9 35             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 35ED 2F                   cpl                     ; Two's complement
3902+ 35EE 3C                   inc     A               ;  FP exponent
3903+ 35EF EB                   ex      DE,HL
3904+ 35F0 CD A7 38             call    STAKFP          ; Put FPREG on stack
3905+ 35F3 EB                   ex      DE,HL
3906+ 35F4 CD B7 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 35F7 C1                   pop     BC              ; Restore number from stack
3908+ 35F8 D1                   pop     DE
3909+ 35F9 FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 35FB D0                   ret     NC              ; Yes - First number is result
3911+ 35FC F5                   push    AF              ; Save number of bits to scale
3912+ 35FD CD DC 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 3600 67                   ld      H,A             ; Save sign of result
3914+ 3601 F1                   pop     AF              ; Restore scaling factor
3915+ 3602 CD A4 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 3605 B4                   or      H               ; Result to be positive?
3917+ 3606 21 59 82             ld      HL,FPREG        ; Point to FPREG
3918+ 3609 F2 1F 36             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 360C CD 84 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 360F D2 65 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 3612 23                   inc     HL              ; Point to exponent
3922+ 3613 34                   inc     (HL)            ; Increment it
3923+ 3614 CA 9E 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 3617 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 3619 CD BA 36             call    SHRT1           ; Shift result right
3926+ 361C C3 65 36             jp      RONDUP          ; Round it up
3927+ 361F
3928+ 361F AF           MINCDE: xor     A               ; Clear A and carry
3929+ 3620 90                   sub     B               ; Negate exponent
3930+ 3621 47                   ld      B,A             ; Re-save exponent
3931+ 3622 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 3623 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 3624 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 3625 23                   inc     HL
3935+ 3626 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 3627 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 3628 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 3629 23                   inc     HL
3939+ 362A 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 362B 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 362C 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 362D DC 90 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 3630
3944+ 3630 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 3631 63                   ld      H,E             ; H = LSB
3946+ 3632 AF                   xor     A
3947+ 3633 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3634 79                   ld      A,C             ; Get MSB
3949+ 3635 B7                   or      A               ; Is it zero?
3950+ 3636 C2 52 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 3639 4A                   ld      C,D             ; MSB = NMSB
3952+ 363A 54                   ld      D,H             ; NMSB= LSB
3953+ 363B 65                   ld      H,L             ; LSB = VLSB
3954+ 363C 6F                   ld      L,A             ; VLSB= 0
3955+ 363D 78                   ld      A,B             ; Get exponent
3956+ 363E D6 08                sub     $08             ; Count 8 bits
3957+ 3640 FE E0                cp      -24-8           ; Was number zero?
3958+ 3642 C2 33 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3645 AF           RESZER: xor     A               ; Result is zero
3960+ 3646 32 5C 82     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 3649 C9                   ret
3962+ 364A
3963+ 364A 05           NORMAL: dec     B               ; Count bits
3964+ 364B 29                   add     HL,HL           ; Shift HL left
3965+ 364C 7A                   ld      A,D             ; Get NMSB
3966+ 364D 17                   rla                     ; Shift left with last bit
3967+ 364E 57                   ld      D,A             ; Save NMSB
3968+ 364F 79                   ld      A,C             ; Get MSB
3969+ 3650 8F                   adc     A,A             ; Shift left with last bit
3970+ 3651 4F                   ld      C,A             ; Save MSB
3971+ 3652 F2 4A 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3655 78                   ld      A,B             ; Number of bits shifted
3973+ 3656 5C                   ld      E,H             ; Save HL in EB
3974+ 3657 45                   ld      B,L
3975+ 3658 B7                   or      A               ; Any shifting done?
3976+ 3659 CA 65 36             jp      Z,RONDUP        ; No - Round it up
3977+ 365C 21 5C 82             ld      HL,FPEXP        ; Point to exponent
3978+ 365F 86                   add     A,(HL)          ; Add shifted bits
3979+ 3660 77                   ld      (HL),A          ; Re-save exponent
3980+ 3661 D2 45 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3664 C8                   ret     Z               ; Result is zero
3982+ 3665 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 3666 21 5C 82     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 3669 B7                   or      A               ; Any rounding?
3985+ 366A FC 77 36             call    M,FPROND        ; Yes - Round number up
3986+ 366D 46                   ld      B,(HL)          ; B = Exponent
3987+ 366E 23                   inc     HL
3988+ 366F 7E                   ld      A,(HL)          ; Get sign of result
3989+ 3670 E6 80                and     %10000000       ; Only bit 7 needed
3990+ 3672 A9                   xor     C               ; Set correct sign
3991+ 3673 4F                   ld      C,A             ; Save correct sign in number
3992+ 3674 C3 B7 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 3677
3994+ 3677 1C           FPROND: inc     E               ; Round LSB
3995+ 3678 C0                   ret     NZ              ; Return if ok
3996+ 3679 14                   inc     D               ; Round NMSB
3997+ 367A C0                   ret     NZ              ; Return if ok
3998+ 367B 0C                   inc     C               ; Round MSB
3999+ 367C C0                   ret     NZ              ; Return if ok
4000+ 367D 0E 80                ld      C,$80           ; Set normal value
4001+ 367F 34                   inc     (HL)            ; Increment exponent
4002+ 3680 C0                   ret     NZ              ; Return if ok
4003+ 3681 C3 9E 20             jp      OVERR           ; Overflow error
4004+ 3684
4005+ 3684 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 3685 83                   add     A,E             ; Add LSB of BCDE
4007+ 3686 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 3687 23                   inc     HL
4009+ 3688 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 3689 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 368A 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 368B 23                   inc     HL
4013+ 368C 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 368D 89                   adc     A,C             ; Add MSB of BCDE
4015+ 368E 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 368F C9                   ret
4017+ 3690
4018+ 3690 21 5D 82     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 3693 7E                   ld      A,(HL)          ; Get sign of result
4020+ 3694 2F                   cpl                     ; Negate it
4021+ 3695 77                   ld      (HL),A          ; Put it back
4022+ 3696 AF                   xor     A
4023+ 3697 6F                   ld      L,A             ; Set L to zero
4024+ 3698 90                   sub     B               ; Negate exponent,set carry
4025+ 3699 47                   ld      B,A             ; Re-save exponent
4026+ 369A 7D                   ld      A,L             ; Load zero
4027+ 369B 9B                   sbc     A,E             ; Negate LSB
4028+ 369C 5F                   ld      E,A             ; Re-save LSB
4029+ 369D 7D                   ld      A,L             ; Load zero
4030+ 369E 9A                   sbc     A,D             ; Negate NMSB
4031+ 369F 57                   ld      D,A             ; Re-save NMSB
4032+ 36A0 7D                   ld      A,L             ; Load zero
4033+ 36A1 99                   sbc     A,C             ; Negate MSB
4034+ 36A2 4F                   ld      C,A             ; Re-save MSB
4035+ 36A3 C9                   ret
4036+ 36A4
4037+ 36A4 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 36A6 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 36A8 DA B3 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 36AB 43                   ld      B,E             ; <- Shift
4041+ 36AC 5A                   ld      E,D             ; <- right
4042+ 36AD 51                   ld      D,C             ; <- eight
4043+ 36AE 0E 00                ld      C,$00           ; <- bits
4044+ 36B0 C3 A6 36             jp      SCALLP          ; More bits to shift
4045+ 36B3
4046+ 36B3 C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 36B5 6F                   ld      L,A             ; Save bits to shift
4048+ 36B6 AF           SHRLP:  xor     A               ; Flag for all done
4049+ 36B7 2D                   dec     L               ; All shifting done?
4050+ 36B8 C8                   ret     Z               ; Yes - Return
4051+ 36B9 79                   ld      A,C             ; Get MSB
4052+ 36BA 1F           SHRT1:  rra                     ; Shift it right
4053+ 36BB 4F                   ld      C,A             ; Re-save
4054+ 36BC 7A                   ld      A,D             ; Get NMSB
4055+ 36BD 1F                   rra                     ; Shift right with last bit
4056+ 36BE 57                   ld      D,A             ; Re-save it
4057+ 36BF 7B                   ld      A,E             ; Get LSB
4058+ 36C0 1F                   rra                     ; Shift right with last bit
4059+ 36C1 5F                   ld      E,A             ; Re-save it
4060+ 36C2 78                   ld      A,B             ; Get underflow
4061+ 36C3 1F                   rra                     ; Shift right with last bit
4062+ 36C4 47                   ld      B,A             ; Re-save underflow
4063+ 36C5 C3 B6 36             jp      SHRLP           ; More bits to do
4064+ 36C8
4065+ 36C8 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 36CC
4067+ 36CC 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 36CD AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36D1 F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36D5 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36D9
4072+ 36D9 CD 76 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36DC B7                   or      A
4074+ 36DD EA A3 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 36E0 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4076+ 36E3 7E                   ld      A,(HL)          ; Get exponent
4077+ 36E4 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 36E7 11 F3 04             ld      DE,$04F3
4079+ 36EA 90                   sub     B               ; Scale value to be < 1
4080+ 36EB F5                   push    AF              ; Save scale factor
4081+ 36EC 70                   ld      (HL),B          ; Save new exponent
4082+ 36ED D5                   push    DE              ; Save SQR(1/2)
4083+ 36EE C5                   push    BC
4084+ 36EF CD DF 35             call    FPADD           ; Add SQR(1/2) to value
4085+ 36F2 C1                   pop     BC              ; Restore SQR(1/2)
4086+ 36F3 D1                   pop     DE
4087+ 36F4 04                   inc     B               ; Make it SQR(2)
4088+ 36F5 CD CC 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 36F8 21 C8 36             ld      HL,UNITY        ; Point to 1.
4090+ 36FB CD D6 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 36FE 21 CC 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 3701 CD BE 3B             call    SUMSER          ; Evaluate sum of series
4093+ 3704 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 3707 11 00 00             ld      DE,$0000
4095+ 370A CD DF 35             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 370D F1                   pop     AF              ; Restore scale factor
4097+ 370E CD F1 39             call    RSCALE          ; Re-scale number
4098+ 3711 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 3714 11 18 72             ld      DE,$7218
4100+ 3717 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 3718
4102+ 3718 C1           MULT:   pop     BC              ; Get number from stack
4103+ 3719 D1                   pop     DE
4104+ 371A CD 76 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 371D C8                   ret     Z               ; Return zero if zero
4106+ 371E 2E 00                ld      L,$00           ; Flag add exponents
4107+ 3720 CD 34 38             call    ADDEXP          ; Add exponents
4108+ 3723 79                   ld      A,C             ; Get MSB of multiplier
4109+ 3724 32 6B 82             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 3727 EB                   ex      DE,HL
4111+ 3728 22 6C 82             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 372B 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 372E 50                   ld      D,B
4114+ 372F 58                   ld      E,B
4115+ 3730 21 30 36             ld      HL,BNORM        ; Address of normalise
4116+ 3733 E5                   push    HL              ; Save for return
4117+ 3734 21 3C 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 3737 E5                   push    HL              ; Save for NMSB,MSB
4119+ 3738 E5                   push    HL              ;
4120+ 3739 21 59 82             ld      HL,FPREG        ; Point to number
4121+ 373C 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 373D 23                   inc     HL              ; Point to NMSB
4123+ 373E B7                   or      A               ; Test LSB
4124+ 373F CA 68 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 3742 E5                   push    HL              ; Save address of number
4126+ 3743 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3745 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 3746 67                   ld      H,A             ; Save LSB
4129+ 3747 79                   ld      A,C             ; Get MSB
4130+ 3748 D2 56 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 374B E5                   push    HL              ; Save LSB and count
4132+ 374C 2A 6C 82             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 374F 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 3750 EB                   ex      DE,HL           ; Leave sum in DE
4135+ 3751 E1                   pop     HL              ; Restore MSB and count
4136+ 3752 3A 6B 82             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3755 89                   adc     A,C             ; Add MSB
4138+ 3756 1F           NOMADD: rra                     ; Shift MSB right
4139+ 3757 4F                   ld      C,A             ; Re-save MSB
4140+ 3758 7A                   ld      A,D             ; Get NMSB
4141+ 3759 1F                   rra                     ; Shift NMSB right
4142+ 375A 57                   ld      D,A             ; Re-save NMSB
4143+ 375B 7B                   ld      A,E             ; Get LSB
4144+ 375C 1F                   rra                     ; Shift LSB right
4145+ 375D 5F                   ld      E,A             ; Re-save LSB
4146+ 375E 78                   ld      A,B             ; Get VLSB
4147+ 375F 1F                   rra                     ; Shift VLSB right
4148+ 3760 47                   ld      B,A             ; Re-save VLSB
4149+ 3761 2D                   dec     L               ; Count bits multiplied
4150+ 3762 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 3763 C2 45 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 3766 E1           POPHRT: pop     HL              ; Restore address of number
4153+ 3767 C9                   ret
4154+ 3768
4155+ 3768 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 3769 5A                   ld      E,D
4157+ 376A 51                   ld      D,C
4158+ 376B 4F                   ld      C,A
4159+ 376C C9                   ret
4160+ 376D
4161+ 376D
4162+ 376D              ; WORKING ââ
4163+ 376D C1           DINT:   pop     BC              ; Get number from stack
4164+ 376E D1                   pop     DE
4165+ 376F CD CC 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 3772 C3 49 39             jp      INT             ; return INT(FPREG)
4167+ 3775
4168+ 3775
4169+ 3775              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3775              ; A is in stack; B is in FPREG
4171+ 3775              ; math is:
4172+ 3775              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3775 CD 49 39     MOD:    call    INT             ; B=INT(B)
4174+ 3778 CD C2 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 377B ED 53 09 82          ld      (TMPBFR3),DE    ; store B into...
4176+ 377F ED 43 0B 82          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 3783 C1                   pop     BC              ; recover A...
4178+ 3784 D1                   pop     DE              ; ...from stack
4179+ 3785 CD B7 38             call    FPBCDE          ; store A into FPREG
4180+ 3788 CD 49 39             call    INT             ; get integer part: A=INT(A)
4181+ 378B CD C2 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 378E ED 53 05 82          ld      (TMPBFR1),DE    ; store A into...
4183+ 3792 ED 43 07 82          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 3796                                              ; begin calculation
4185+ 3796 2A 09 82             ld      HL,(TMPBFR3)    ; move B...
4186+ 3799 22 59 82             ld      (FPREG),HL      ; ...from...
4187+ 379C 2A 0B 82             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 379F 22 5B 82             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 37A2 CD CC 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 37A5 CD 49 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 37A8 ED 5B 09 82          ld      DE,(TMPBFR3)    ; load B...
4192+ 37AC ED 4B 0B 82          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 37B0 CD 1A 37             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 37B3 ED 5B 05 82          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 37B7 ED 4B 07 82          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 37BB C3 DC 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 37BE
4198+ 37BE
4199+ 37BE CD A7 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 37C1 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 37C4 11 00 00             ld      DE,$0000
4202+ 37C7 CD B7 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 37CA
4204+ 37CA C1           DIV:    pop     BC              ; Get number from stack
4205+ 37CB D1                   pop     DE
4206+ 37CC CD 76 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 37CF CA 92 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37D2 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37D4 CD 34 38             call    ADDEXP          ; Subtract exponents
4210+ 37D7 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37D8 34                   inc     (HL)
4212+ 37D9 2B                   dec     HL              ; Point to MSB
4213+ 37DA 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37DB 32 73 80             ld      (DIV3),A        ; Save for subtraction
4215+ 37DE 2B                   dec     HL
4216+ 37DF 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 37E0 32 6F 80             ld      (DIV2),A        ; Save for subtraction
4218+ 37E3 2B                   dec     HL
4219+ 37E4 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 37E5 32 6B 80             ld      (DIV1),A        ; Save for subtraction
4221+ 37E8 41                   ld      B,C             ; Get MSB
4222+ 37E9 EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 37EA AF                   xor     A
4224+ 37EB 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 37EC 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 37ED 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 37EE 32 76 80             ld      (DIV4),A        ; Clear overflow count
4228+ 37F1 E5           DIVLP:  push    HL              ; Save divisor
4229+ 37F2 C5                   push    BC
4230+ 37F3 7D                   ld      A,L             ; Get LSB of number
4231+ 37F4 CD 6A 80             call    DIVSUP          ; Subt' divisor from dividend
4232+ 37F7 DE 00                sbc     A,$00           ; Count for overflows
4233+ 37F9 3F                   ccf
4234+ 37FA D2 04 38             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 37FD 32 76 80             ld      (DIV4),A        ; Re-save overflow count
4236+ 3800 F1                   pop     AF              ; Scrap divisor
4237+ 3801 F1                   pop     AF
4238+ 3802 37                   scf                     ; Set carry to
4239+ 3803 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 3804
4241+ 3804 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 3805 E1                   pop     HL
4243+ 3806 79                   ld      A,C             ; Get MSB of quotient
4244+ 3807 3C                   inc     A
4245+ 3808 3D                   dec     A
4246+ 3809 1F                   rra                     ; Bit 0 to bit 7
4247+ 380A FA 66 36             jp      M,RONDB         ; Done - Normalise result
4248+ 380D 17                   rla                     ; Restore carry
4249+ 380E 7B                   ld      A,E             ; Get LSB of quotient
4250+ 380F 17                   rla                     ; Double it
4251+ 3810 5F                   ld      E,A             ; Put it back
4252+ 3811 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 3812 17                   rla                     ; Double it
4254+ 3813 57                   ld      D,A             ; Put it back
4255+ 3814 79                   ld      A,C             ; Get MSB of quotient
4256+ 3815 17                   rla                     ; Double it
4257+ 3816 4F                   ld      C,A             ; Put it back
4258+ 3817 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 3818 78                   ld      A,B             ; Get MSB of divisor
4260+ 3819 17                   rla                     ; Double it
4261+ 381A 47                   ld      B,A             ; Put it back
4262+ 381B 3A 76 80             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 381E 17                   rla                     ; Double it
4264+ 381F 32 76 80             ld      (DIV4),A        ; Put it back
4265+ 3822 79                   ld      A,C             ; Get MSB of quotient
4266+ 3823 B2                   or      D               ; Merge NMSB
4267+ 3824 B3                   or      E               ; Merge LSB
4268+ 3825 C2 F1 37             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 3828 E5                   push    HL              ; Save divisor
4270+ 3829 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4271+ 382C 35                   dec     (HL)            ; Divide by 2
4272+ 382D E1                   pop     HL              ; Restore divisor
4273+ 382E C2 F1 37             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 3831 C3 9E 20             jp      OVERR           ; Overflow error
4275+ 3834
4276+ 3834
4277+ 3834 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3835 B7                   or      A               ; Test it
4279+ 3836 CA 58 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 3839 7D                   ld      A,L             ; Get add/subtract flag
4281+ 383A 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4282+ 383D AE                   xor     (HL)            ; Add or subtract it
4283+ 383E 80                   add     A,B             ; Add the other exponent
4284+ 383F 47                   ld      B,A             ; Save new exponent
4285+ 3840 1F                   rra                     ; Test exponent for overflow
4286+ 3841 A8                   xor     B
4287+ 3842 78                   ld      A,B             ; Get exponent
4288+ 3843 F2 57 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 3846 C6 80                add     A,$80           ; Add excess 128
4290+ 3848 77                   ld      (HL),A          ; Save new exponent
4291+ 3849 CA 66 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 384C CD DC 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 384F 77                   ld      (HL),A          ; Save new exponent
4294+ 3850 2B                   dec     HL              ; Point to MSB
4295+ 3851 C9                   ret
4296+ 3852
4297+ 3852 CD 76 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3855 2F                   cpl                     ; Invert sign
4299+ 3856 E1                   pop     HL              ; Clean up stack
4300+ 3857 B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 3858 E1           OVTST3: pop     HL              ; Clear off return address
4302+ 3859 F2 45 36             jp      P,RESZER        ; Result zero
4303+ 385C C3 9E 20             jp      OVERR           ; Overflow error
4304+ 385F
4305+ 385F CD C2 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 3862 78                   ld      A,B             ; Get exponent
4307+ 3863 B7                   or      A               ; Is it zero?
4308+ 3864 C8                   ret     Z               ; Yes - Result is zero
4309+ 3865 C6 02                add     A,$02           ; Multiply by 4
4310+ 3867 DA 9E 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 386A 47                   ld      B,A             ; Re-save exponent
4312+ 386B CD DF 35             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 386E 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4314+ 3871 34                   inc     (HL)            ; Double number (Times 10)
4315+ 3872 C0                   ret     NZ              ; Ok - Return
4316+ 3873 C3 9E 20             jp      OVERR           ; Overflow error
4317+ 3876
4318+ 3876 3A 5C 82     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 3879 B7                   or      A
4320+ 387A C8                   ret     Z               ; RETurn if number is zero
4321+ 387B 3A 5B 82             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 387E FE                   defb    0FEH            ; Test sign
4323+ 387F 2F           RETREL: cpl                     ; Invert sign
4324+ 3880 17                   rla                     ; Sign bit to carry
4325+ 3881 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 3882 C0                   ret     NZ              ; Return -1 if negative
4327+ 3883 3C                   inc     A               ; Bump to +1
4328+ 3884 C9                   ret                     ; Positive - Return +1
4329+ 3885
4330+ 3885 CD 76 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 3888 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 388A 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 388D 21 5C 82     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 3890 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 3891 70                   ld      (HL),B          ; Save exponent
4336+ 3892 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 3894 23                   inc     HL              ; Point to sign of result
4338+ 3895 36 80                ld      (HL),$80        ; Set sign of result
4339+ 3897 17                   rla                     ; Carry = sign of integer
4340+ 3898 C3 2D 36             jp      CONPOS          ; Set sign of result
4341+ 389B
4342+ 389B CD 76 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 389E F0                   ret     P               ; Return if positive
4344+ 389F 21 5B 82     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 38A2 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 38A3 EE 80                xor     $80             ; Invert sign of mantissa
4347+ 38A5 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 38A6 C9                   ret
4349+ 38A7
4350+ 38A7 EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 38A8 2A 59 82             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 38AB E3                   ex      (SP),HL         ; Stack them,get return
4353+ 38AC E5                   push    HL              ; Re-save return
4354+ 38AD 2A 5B 82             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 38B0 E3                   ex      (SP),HL         ; Stack them,get return
4356+ 38B1 E5                   push    HL              ; Re-save return
4357+ 38B2 EB                   ex      DE,HL           ; Restore code string address
4358+ 38B3 C9                   ret
4359+ 38B4
4360+ 38B4              ; store F.P. number from BCDE into (FPREG)
4361+ 38B4 CD C5 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 38B7 EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 38B8 22 59 82             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 38BB 60                   ld      H,B             ; Exponent of number
4365+ 38BC 69                   ld      L,C             ; MSB of number
4366+ 38BD 22 5B 82             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 38C0 EB                   ex      DE,HL           ; Restore code string address
4368+ 38C1 C9                   ret
4369+ 38C2
4370+ 38C2              ; load F.P. number from (FPREG) into BCDE
4371+ 38C2 21 59 82     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 38C5 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 38C6 23                   inc     HL
4374+ 38C7 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 38C8 23                   inc     HL
4376+ 38C9 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 38CA 23                   inc     HL
4378+ 38CB 46                   ld      B,(HL)          ; Get exponent of number
4379+ 38CC 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 38CD C9                   ret
4381+ 38CE
4382+ 38CE              ; move floating point from (FPREG) into (HL)
4383+ 38CE 11 59 82     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38D1 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38D3 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38D4 77                   ld      (HL),A          ; Save destination
4387+ 38D5 13                   inc     DE              ; Next source
4388+ 38D6 23                   inc     HL              ; Next destination
4389+ 38D7 05                   dec     B               ; Count bytes
4390+ 38D8 C2 D3 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38DB C9                   ret
4392+ 38DC
4393+ 38DC 21 5B 82     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 38DF 7E                   ld      A,(HL)          ; Get MSB
4395+ 38E0 07                   rlca                    ; Old sign to carry
4396+ 38E1 37                   scf                     ; Set MSBit
4397+ 38E2 1F                   rra                     ; Set MSBit of MSB
4398+ 38E3 77                   ld      (HL),A          ; Save new MSB
4399+ 38E4 3F                   ccf                     ; Complement sign
4400+ 38E5 1F                   rra                     ; Old sign to carry
4401+ 38E6 23                   inc     HL
4402+ 38E7 23                   inc     HL
4403+ 38E8 77                   ld      (HL),A          ; Set sign of result
4404+ 38E9 79                   ld      A,C             ; Get MSB
4405+ 38EA 07                   rlca                    ; Old sign to carry
4406+ 38EB 37                   scf                     ; Set MSBit
4407+ 38EC 1F                   rra                     ; Set MSBit of MSB
4408+ 38ED 4F                   ld      C,A             ; Save MSB
4409+ 38EE 1F                   rra
4410+ 38EF AE                   xor     (HL)            ; New sign of result
4411+ 38F0 C9                   ret
4412+ 38F1
4413+ 38F1 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 38F2 B7                   or      A
4415+ 38F3 CA 76 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 38F6 21 7F 38             ld      HL,RETREL       ; Return relation routine
4417+ 38F9 E5                   push    HL              ; Save for return
4418+ 38FA CD 76 38             call    TSTSGN          ; Test sign of FPREG
4419+ 38FD 79                   ld      A,C             ; Get MSB of number
4420+ 38FE C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 38FF 21 5B 82             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 3902 AE                   xor     (HL)            ; Combine signs
4423+ 3903 79                   ld      A,C             ; Get MSB of number
4424+ 3904 F8                   ret     M               ; Exit if signs different
4425+ 3905 CD 0B 39             call    CMPFP           ; Compare FP numbers
4426+ 3908 1F                   rra                     ; Get carry to sign
4427+ 3909 A9                   xor     C               ; Combine with MSB of number
4428+ 390A C9                   ret
4429+ 390B
4430+ 390B 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 390C 78                   ld      A,B             ; Get exponent
4432+ 390D BE                   cp      (HL)            ; Compare exponents
4433+ 390E C0                   ret     NZ              ; Different
4434+ 390F 2B                   dec     HL              ; Point to MBS
4435+ 3910 79                   ld      A,C             ; Get MSB
4436+ 3911 BE                   cp      (HL)            ; Compare MSBs
4437+ 3912 C0                   ret     NZ              ; Different
4438+ 3913 2B                   dec     HL              ; Point to NMSB
4439+ 3914 7A                   ld      A,D             ; Get NMSB
4440+ 3915 BE                   cp      (HL)            ; Compare NMSBs
4441+ 3916 C0                   ret     NZ              ; Different
4442+ 3917 2B                   dec     HL              ; Point to LSB
4443+ 3918 7B                   ld      A,E             ; Get LSB
4444+ 3919 96                   sub     (HL)            ; Compare LSBs
4445+ 391A C0                   ret     NZ              ; Different
4446+ 391B E1                   pop     HL              ; Drop RETurn
4447+ 391C E1                   pop     HL              ; Drop another RETurn
4448+ 391D C9                   ret
4449+ 391E
4450+ 391E 47           FPINT:  ld      B,A             ; <- Move
4451+ 391F 4F                   ld      C,A             ; <- exponent
4452+ 3920 57                   ld      D,A             ; <- to all
4453+ 3921 5F                   ld      E,A             ; <- bits
4454+ 3922 B7                   or      A               ; Test exponent
4455+ 3923 C8                   ret     Z               ; Zero - Return zero
4456+ 3924 E5                   push    HL              ; Save pointer to number
4457+ 3925 CD C2 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 3928 CD DC 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 392B AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 392C 67                   ld      H,A             ; Save combined signs
4461+ 392D FC 42 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 3930 3E 98                ld      A,$80+24        ; 24 bits
4463+ 3932 90                   sub     B               ; Bits to shift
4464+ 3933 CD A4 36             call    SCALE           ; Shift BCDE
4465+ 3936 7C                   ld      A,H             ; Get combined sign
4466+ 3937 17                   rla                     ; Sign to carry
4467+ 3938 DC 77 36             call    C,FPROND        ; Negative - Round number up
4468+ 393B 06 00                ld      B,$00           ; Zero exponent
4469+ 393D DC 90 36             call    C,COMPL         ; If negative make positive
4470+ 3940 E1                   pop     HL              ; Restore pointer to number
4471+ 3941 C9                   ret
4472+ 3942
4473+ 3942 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 3943 7A                   ld      A,D             ; Test LSBs
4475+ 3944 A3                   and     E
4476+ 3945 3C                   inc     A
4477+ 3946 C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 3947 0B                   dec     BC              ; Decrement MSBs
4479+ 3948 C9                   ret
4480+ 3949
4481+ 3949 21 5C 82     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 394C 7E                   ld      A,(HL)          ; Get exponent
4483+ 394D FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 394F 3A 59 82             ld      A,(FPREG)       ; Get LSB
4485+ 3952 D0                   ret     NC              ; Yes - Already integer
4486+ 3953 7E                   ld      A,(HL)          ; Get exponent
4487+ 3954 CD 1E 39             call    FPINT           ; F.P to integer
4488+ 3957 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 3959 7B                   ld      A,E             ; Get LSB of number
4490+ 395A F5                   push    AF              ; Save LSB
4491+ 395B 79                   ld      A,C             ; Get MSB of number
4492+ 395C 17                   rla                     ; Sign to carry
4493+ 395D CD 2D 36             call    CONPOS          ; Set sign of result
4494+ 3960 F1                   pop     AF              ; Restore LSB of number
4495+ 3961 C9                   ret
4496+ 3962
4497+ 3962 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3965 78                   ld      A,B             ; Test multiplier
4499+ 3966 B1                   or      C
4500+ 3967 C8                   ret     Z               ; Return zero if zero
4501+ 3968 3E 10                ld      A,$10           ; 16 bits
4502+ 396A 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 396B DA 90 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 396E EB                   ex      DE,HL
4505+ 396F 29                   add     HL,HL           ; Shift multiplier left
4506+ 3970 EB                   ex      DE,HL
4507+ 3971 D2 78 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3974 09                   add     HL,BC           ; Add multiplicand
4509+ 3975 DA 90 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 3978 3D           NOMLAD: dec     A               ; Count bits
4511+ 3979 C2 6A 39             jp      NZ,MLDBLP       ; More
4512+ 397C C9                   ret
4513+ 397D
4514+ 397D FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 397F F5                   push    AF              ; Save it and flags
4516+ 3980 CA 89 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 3983 FE 2B                cp      '+'             ; Positive?
4518+ 3985 CA 89 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 3988 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 3989 CD 45 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 398C 47                   ld      B,A             ; Digits after point counter
4522+ 398D 57                   ld      D,A             ; Sign of exponent
4523+ 398E 5F                   ld      E,A             ; Exponent of ten
4524+ 398F 2F                   cpl
4525+ 3990 4F                   ld      C,A             ; Before or after point flag
4526+ 3991 CD D8 25     MANLP:  call    GETCHR          ; Get next character
4527+ 3994 DA DA 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 3997 FE 2E                cp      '.'
4529+ 3999 CA B5 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 399C FE 45                cp      'E'
4531+ 399E C2 B9 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 39A1 CD D8 25             call    GETCHR          ; Get next character
4533+ 39A4 CD AC 2B             call    SGNEXP          ; Get sign of exponent
4534+ 39A7 CD D8 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 39AA DA FC 39             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 39AD 14                   inc     D               ; Is sign negative?
4537+ 39AE C2 B9 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 39B1 AF                   xor     A
4539+ 39B2 93                   sub     E               ; Negate exponent
4540+ 39B3 5F                   ld      E,A             ; And re-save it
4541+ 39B4 0C                   inc     C               ; Flag end of number
4542+ 39B5 0C           DPOINT: inc     C               ; Flag point passed
4543+ 39B6 CA 91 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 39B9 E5           CONEXP: push    HL              ; Save code string address
4545+ 39BA 7B                   ld      A,E             ; Get exponent
4546+ 39BB 90                   sub     B               ; Subtract digits after point
4547+ 39BC F4 D2 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 39BF F2 C8 39             jp      P,ENDCON        ; Positive - All done
4549+ 39C2 F5                   push    AF              ; Save number of times to /10
4550+ 39C3 CD BE 37             call    DIV10           ; Divide by 10
4551+ 39C6 F1                   pop     AF              ; Restore count
4552+ 39C7 3C                   inc     A               ; Count divides
4553+ 39C8
4554+ 39C8 C2 BC 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 39CB D1                   pop     DE              ; Restore code string address
4556+ 39CC F1                   pop     AF              ; Restore sign of number
4557+ 39CD CC 9F 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39D0 EB                   ex      DE,HL           ; Code string address to HL
4559+ 39D1 C9                   ret
4560+ 39D2
4561+ 39D2 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39D3 F5           MULTEN: push    AF              ; Save count
4563+ 39D4 CD 5F 38             call    MLSP10          ; Multiply number by 10
4564+ 39D7 F1                   pop     AF              ; Restore count
4565+ 39D8 3D                   dec     A               ; Count multiplies
4566+ 39D9 C9                   ret
4567+ 39DA
4568+ 39DA D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39DB 57                   ld      D,A             ; Save digit
4570+ 39DC 78                   ld      A,B             ; Get digits after point
4571+ 39DD 89                   adc     A,C             ; Add one if after point
4572+ 39DE 47                   ld      B,A             ; Re-save counter
4573+ 39DF C5                   push    BC              ; Save point flags
4574+ 39E0 E5                   push    HL              ; Save code string address
4575+ 39E1 D5                   push    DE              ; Save digit
4576+ 39E2 CD 5F 38             call    MLSP10          ; Multiply number by 10
4577+ 39E5 F1                   pop     AF              ; Restore digit
4578+ 39E6 D6 30                sub     '0'             ; Make it absolute
4579+ 39E8 CD F1 39             call    RSCALE          ; Re-scale number
4580+ 39EB E1                   pop     HL              ; Restore code string address
4581+ 39EC C1                   pop     BC              ; Restore point flags
4582+ 39ED D1                   pop     DE              ; Restore sign of exponent
4583+ 39EE C3 91 39             jp      MANLP           ; Get another digit
4584+ 39F1
4585+ 39F1 CD A7 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 39F4 CD 88 38             call    FLGREL          ; Digit to add to FPREG
4587+ 39F7 C1           PADD:   pop     BC              ; Restore number
4588+ 39F8 D1                   pop     DE
4589+ 39F9 C3 DF 35             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 39FC
4591+ 39FC 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 39FD 07                   rlca                    ; Times 2
4593+ 39FE 07                   rlca                    ; Times 4
4594+ 39FF 83                   add     A,E             ; Times 5
4595+ 3A00 07                   rlca                    ; Times 10
4596+ 3A01 86                   add     A,(HL)          ; Add next digit
4597+ 3A02 D6 30                sub     '0'             ; Make it absolute
4598+ 3A04 5F                   ld      E,A             ; Save new digit
4599+ 3A05 C3 A7 39             jp      EXPLP           ; Look for another digit
4600+ 3A08
4601+ 3A08 E5           LINEIN: push    HL              ; Save code string address
4602+ 3A09 21 08 20             ld      HL,INMSG        ; Output " in "
4603+ 3A0C CD 71 2F             call    PRS             ; Output string at HL
4604+ 3A0F E1                   pop     HL              ; Restore code string address
4605+ 3A10 EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 3A11 AF                   xor     A
4607+ 3A12 06 98                ld      B,$80+24        ; 24 bits
4608+ 3A14 CD 8D 38             call    RETINT          ; Return the integer
4609+ 3A17 21 70 2F             ld      HL,PRNUMS       ; Print number string
4610+ 3A1A E5                   push    HL              ; Save for return
4611+ 3A1B              ; conmvert FP number into ASCII chars
4612+ 3A1B 21 5E 82     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 3A1E E5                   push    HL              ; Save for return
4614+ 3A1F CD 76 38             call    TSTSGN          ; Test sign of FPREG
4615+ 3A22 36 20                ld      (HL),SPC        ; Space at start
4616+ 3A24 F2 29 3A             jp      P,SPCFST        ; Positive - Space to start
4617+ 3A27 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 3A29 23           SPCFST: inc     HL              ; First byte of number
4619+ 3A2A 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 3A2C CA DF 3A             jp      Z,JSTZER        ; Return '0' if zero
4621+ 3A2F E5                   push    HL              ; Save buffer address
4622+ 3A30 FC 9F 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A33 AF                   xor     A               ; Zero A
4624+ 3A34 F5                   push    AF              ; Save it
4625+ 3A35 CD E5 3A             call    RNGTST          ; Test number is in range
4626+ 3A38 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A3B 11 F8 4F             ld      DE,$4FF8
4628+ 3A3E CD F1 38             call    CMPNUM          ; Compare numbers
4629+ 3A41 B7                   or      A
4630+ 3A42 E2 56 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A45 F1                   pop     AF              ; Restore count
4632+ 3A46 CD D3 39             call    MULTEN          ; Multiply by ten
4633+ 3A49 F5                   push    AF              ; Re-save count
4634+ 3A4A C3 38 3A             jp      SIXDIG          ; Test it again
4635+ 3A4D
4636+ 3A4D CD BE 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A50 F1                   pop     AF              ; Get count
4638+ 3A51 3C                   inc     A               ; Count divides
4639+ 3A52 F5                   push    AF              ; Re-save count
4640+ 3A53 CD E5 3A             call    RNGTST          ; Test number is in range
4641+ 3A56 CD CD 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A59 3C                   inc     A
4643+ 3A5A CD 1E 39             call    FPINT           ; F.P to integer
4644+ 3A5D CD B7 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A60 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A63 F1                   pop     AF              ; Restore count
4647+ 3A64 81                   add     A,C             ; 6 digits before point
4648+ 3A65 3C                   inc     A               ; Add one
4649+ 3A66 FA 72 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A69 FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A6B D2 72 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A6E 3C                   inc     A               ; Adjust for exponent
4653+ 3A6F 47                   ld      B,A             ; Exponent of number
4654+ 3A70 3E 02                ld      A,2             ; Make it zero after
4655+ 3A72
4656+ 3A72 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A73 3D                   dec     A
4658+ 3A74 E1                   pop     HL              ; Restore buffer address
4659+ 3A75 F5                   push    AF              ; Save count
4660+ 3A76 11 F8 3A             ld      DE,POWERS       ; Powers of ten
4661+ 3A79 05                   dec     B               ; Count digits before point
4662+ 3A7A C2 83 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A7D 36 2E                ld      (HL),'.'        ; Save point
4664+ 3A7F 23                   inc     HL              ; Move on
4665+ 3A80 36 30                ld      (HL),'0'        ; Save zero
4666+ 3A82 23                   inc     HL              ; Move on
4667+ 3A83 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3A84 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3A86 CC CC 38             call    Z,INCHL         ; Last digit - move on
4670+ 3A89 C5                   push    BC              ; Save digits before point
4671+ 3A8A E5                   push    HL              ; Save buffer address
4672+ 3A8B D5                   push    DE              ; Save powers of ten
4673+ 3A8C CD C2 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3A8F E1                   pop     HL              ; Powers of ten table
4675+ 3A90 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3A92 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3A93 7B                   ld      A,E             ; Get LSB
4678+ 3A94 96                   sub     (HL)            ; Subtract LSB
4679+ 3A95 5F                   ld      E,A             ; Save LSB
4680+ 3A96 23                   inc     HL
4681+ 3A97 7A                   ld      A,D             ; Get NMSB
4682+ 3A98 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3A99 57                   ld      D,A             ; Save NMSB
4684+ 3A9A 23                   inc     HL
4685+ 3A9B 79                   ld      A,C             ; Get MSB
4686+ 3A9C 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3A9D 4F                   ld      C,A             ; Save MSB
4688+ 3A9E 2B                   dec     HL              ; Point back to start
4689+ 3A9F 2B                   dec     HL
4690+ 3AA0 D2 92 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3AA3 CD 84 36             call    PLUCDE          ; Restore number
4692+ 3AA6 23                   inc     HL              ; Start of next number
4693+ 3AA7 CD B7 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3AAA EB                   ex      DE,HL           ; Save point in table
4695+ 3AAB E1                   pop     HL              ; Restore buffer address
4696+ 3AAC 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3AAD 23                   inc     HL              ; And move on
4698+ 3AAE C1                   pop     BC              ; Restore digit count
4699+ 3AAF 0D                   dec     C               ; Count digits
4700+ 3AB0 C2 83 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3AB3 05                   dec     B               ; Any decimal part?
4702+ 3AB4 CA C3 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3AB7 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3AB8 7E                   ld      A,(HL)          ; Get character
4705+ 3AB9 FE 30                cp      '0'             ; '0' character?
4706+ 3ABB CA B7 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3ABE FE 2E                cp      '.'             ; A decimal point?
4708+ 3AC0 C4 CC 38             call    NZ,INCHL        ; Move back over digit
4709+ 3AC3
4710+ 3AC3 F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3AC4 CA E2 3A             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3AC7 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3AC9 23                   inc     HL              ; And move on
4714+ 3ACA 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3ACC F2 D3 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3ACF 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3AD1 2F                   cpl                     ; Negate exponent
4718+ 3AD2 3C                   inc     A
4719+ 3AD3 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AD5 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3AD6 D6 0A                sub     $0A             ; Tens digit
4722+ 3AD8 D2 D5 3A             jp      NC,EXPTEN       ; More to do
4723+ 3ADB C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3ADD 23                   inc     HL              ; Move on
4725+ 3ADE 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3ADF 23           JSTZER: inc     HL              ;
4727+ 3AE0 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3AE1 23                   inc     HL
4729+ 3AE2 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3AE3 E1                   pop     HL              ; Restore code string address
4731+ 3AE4 C9                   ret
4732+ 3AE5
4733+ 3AE5 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3AE8 11 F7 23             ld      DE,$23F7
4735+ 3AEB CD F1 38             call    CMPNUM          ; Compare numbers
4736+ 3AEE B7                   or      A
4737+ 3AEF E1                   pop     HL              ; Return address to HL
4738+ 3AF0 E2 4D 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3AF3 E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3AF4
4741+ 3AF4 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3AF8
4743+ 3AF8 A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3AFB 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3AFE E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3B01 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3B04 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3B07 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3B0A
4750+ 3B0A 21 9F 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3B0D E3                   ex      (SP),HL         ; To be done after caller
4752+ 3B0E E9                   jp      (HL)            ; Return to caller
4753+ 3B0F
4754+ 3B0F CD A7 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3B12 21 F4 3A             ld      HL,HALF         ; Set power to 1/2
4756+ 3B15 CD B4 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3B18
4758+ 3B18 C1           POWER:  pop     BC              ; Get base
4759+ 3B19 D1                   pop     DE
4760+ 3B1A CD 76 38             call    TSTSGN          ; Test sign of power
4761+ 3B1D 78                   ld      A,B             ; Get exponent of base
4762+ 3B1E CA 5D 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3B21 F2 28 3B             jp      P,POWER1        ; Positive base - Ok
4764+ 3B24 B7                   or      A               ; Zero to negative power?
4765+ 3B25 CA 92 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3B28 B7           POWER1: or      A               ; Base zero?
4767+ 3B29 CA 46 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3B2C D5                   push    DE              ; Save base
4769+ 3B2D C5                   push    BC
4770+ 3B2E 79                   ld      A,C             ; Get MSB of base
4771+ 3B2F F6 7F                or      %01111111       ; Get sign status
4772+ 3B31 CD C2 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B34 F2 45 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B37 D5                   push    DE              ; Save power
4775+ 3B38 C5                   push    BC
4776+ 3B39 CD 49 39             call    INT             ; Get integer of power
4777+ 3B3C C1                   pop     BC              ; Restore power
4778+ 3B3D D1                   pop     DE
4779+ 3B3E F5                   push    AF              ; MSB of base
4780+ 3B3F CD F1 38             call    CMPNUM          ; Power an integer?
4781+ 3B42 E1                   pop     HL              ; Restore MSB of base
4782+ 3B43 7C                   ld      A,H             ; but don't affect flags
4783+ 3B44 1F                   rra                     ; Exponent odd or even?
4784+ 3B45 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B46 22 5B 82             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B49 E1                   pop     HL              ; LSBs of base
4787+ 3B4A 22 59 82             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B4D DC 0A 3B             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B50 CC 9F 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B53 D5                   push    DE              ; Save power
4791+ 3B54 C5                   push    BC
4792+ 3B55 CD D9 36             call    LOG             ; Get LOG of base
4793+ 3B58 C1                   pop     BC              ; Restore power
4794+ 3B59 D1                   pop     DE
4795+ 3B5A CD 1A 37             call    FPMULT          ; Multiply LOG by power
4796+ 3B5D
4797+ 3B5D CD A7 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B60 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B63 11 3B AA             ld      DE,$AA3B
4800+ 3B66 CD 1A 37             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B69 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4802+ 3B6C FE 88                cp      $80+8           ; Is it in range?
4803+ 3B6E D2 52 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B71 CD 49 39             call    INT             ; Get INT of FPREG
4805+ 3B74 C6 80                add     A,$80           ; For excess 128
4806+ 3B76 C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B78 DA 52 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B7B F5                   push    AF              ; Save scaling factor
4809+ 3B7C 21 C8 36             ld      HL,UNITY        ; Point to 1.
4810+ 3B7F CD D0 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3B82 CD 11 37             call    MULLN2          ; Multiply by LN(2)
4812+ 3B85 F1                   pop     AF              ; Restore scaling factor
4813+ 3B86 C1                   pop     BC              ; Restore exponent
4814+ 3B87 D1                   pop     DE
4815+ 3B88 F5                   push    AF              ; Save scaling factor
4816+ 3B89 CD DC 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3B8C CD 9F 38             call    INVSGN          ; Negate result
4818+ 3B8F 21 9D 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3B92 CD CD 3B             call    SMSER1          ; Sum the series
4820+ 3B95 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3B98 C1                   pop     BC              ; Scaling factor
4822+ 3B99 4A                   ld      C,D             ; Zero MSB
4823+ 3B9A C3 1A 37             jp      FPMULT          ; Scale result to correct value
4824+ 3B9D
4825+ 3B9D 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3B9E 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3BA2 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3BA6 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3BAA E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3BAE 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3BB2 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3BB6 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3BBA 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3BBE
4835+ 3BBE CD A7 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3BC1 11 18 37             ld      DE,MULT         ; Multiply by "X"
4837+ 3BC4 D5                   push    DE              ; To be done after
4838+ 3BC5 E5                   push    HL              ; Save address of table
4839+ 3BC6 CD C2 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3BC9 CD 1A 37             call    FPMULT          ; Square the value
4841+ 3BCC E1                   pop     HL              ; Restore address of table
4842+ 3BCD CD A7 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BD0 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BD1 23                   inc     HL              ; Point to start of table
4845+ 3BD2 CD B4 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BD5 06                   defb    06H             ; Skip "pop AF"
4847+ 3BD6 F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BD7 C1                   pop     BC              ; Restore number
4849+ 3BD8 D1                   pop     DE
4850+ 3BD9 3D                   dec     A               ; Cont coefficients
4851+ 3BDA C8                   ret     Z               ; All done
4852+ 3BDB D5                   push    DE              ; Save number
4853+ 3BDC C5                   push    BC
4854+ 3BDD F5                   push    AF              ; Save count
4855+ 3BDE E5                   push    HL              ; Save address in table
4856+ 3BDF CD 1A 37             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3BE2 E1                   pop     HL              ; Restore address in table
4858+ 3BE3 CD C5 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3BE6 E5                   push    HL              ; Save address in table
4860+ 3BE7 CD DF 35             call    FPADD           ; Add coefficient to FPREG
4861+ 3BEA E1                   pop     HL              ; Restore address in table
4862+ 3BEB C3 D6 3B             jp      SUMLP           ; More coefficients
4863+ 3BEE
4864+ 3BEE
4865+ 3BEE              ; random number generator
4866+ 3BEE              ; a negative argument is used as a seed for the RNG
4867+ 3BEE              ; 0 is used to repeat the last random number
4868+ 3BEE              ; a positive argument generates a new random number
4869+ 3BEE CD 76 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3BF1 21 7A 80             ld      HL,SEED+2       ; Random number seed
4871+ 3BF4 FA 4F 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3BF7 21 9B 80             ld      HL,LSTRND       ; Last random number
4873+ 3BFA CD B4 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3BFD 21 7A 80             ld      HL,SEED+2       ; Random number seed
4875+ 3C00 C8                   ret     Z               ; Return if RND(0)
4876+ 3C01 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3C02 E6 07                and     %00000111       ; 0 to 7
4878+ 3C04 06 00                ld      B,$00
4879+ 3C06 77                   ld      (HL),A          ; Re-save seed
4880+ 3C07 23                   inc     HL              ; Move to coefficient table
4881+ 3C08 87                   add     A,A             ; 4 bytes
4882+ 3C09 87                   add     A,A             ; per entry
4883+ 3C0A 4F                   ld      C,A             ; BC = Offset into table
4884+ 3C0B 09                   add     HL,BC           ; Point to coefficient
4885+ 3C0C CD C5 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3C0F CD 1A 37             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3C12 3A 79 80             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3C15 3C                   inc     A               ; Add 1
4889+ 3C16 E6 03                and     %00000011       ; 0 to 3
4890+ 3C18 06 00                ld      B,$00
4891+ 3C1A FE 01                cp      $01             ; Is it zero?
4892+ 3C1C 88                   adc     A,B             ; Yes - Make it 1
4893+ 3C1D 32 79 80             ld      (SEED+1),A      ; Re-save seed
4894+ 3C20 21 53 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3C23 87                   add     A,A             ; 4 bytes
4896+ 3C24 87                   add     A,A             ; per entry
4897+ 3C25 4F                   ld      C,A             ; BC = Offset into table
4898+ 3C26 09                   add     HL,BC           ; Point to value
4899+ 3C27 CD D0 35             call    ADDPHL          ; Add value to FPREG
4900+ 3C2A CD C2 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3C2D 7B                   ld      A,E             ; Get LSB
4902+ 3C2E 59                   ld      E,C             ; LSB = MSB
4903+ 3C2F EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C31 4F                   ld      C,A             ; New MSB
4905+ 3C32 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C34 2B                   dec     HL              ; Point to MSB
4907+ 3C35 46                   ld      B,(HL)          ; Get MSB
4908+ 3C36 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C38 21 78 80             ld      HL,SEED         ; Random number seed
4910+ 3C3B 34                   inc     (HL)            ; Count seed
4911+ 3C3C 7E                   ld      A,(HL)          ; Get seed
4912+ 3C3D D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C3F C2 46 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C42 77                   ld      (HL),A          ; Zero seed
4915+ 3C43 0C                   inc     C               ; Fillde about
4916+ 3C44 15                   dec     D               ; with the
4917+ 3C45 1C                   inc     E               ; number
4918+ 3C46 CD 30 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C49 21 9B 80             ld      HL,LSTRND       ; Save random number
4920+ 3C4C C3 CE 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C4F
4922+ 3C4F 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C50 2B                   dec     HL
4924+ 3C51 77                   ld      (HL),A
4925+ 3C52 2B                   dec     HL
4926+ 3C53 77                   ld      (HL),A
4927+ 3C54 C3 2A 3C             jp      RND1            ; Return RND seed
4928+ 3C57
4929+ 3C57 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C5B 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C5F 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C63
4933+ 3C63              ; COS and SIN functions
4934+ 3C63 21 AD 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C66 CD D0 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C69 CD A7 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C6C 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C6F 11 DB 0F             ld      DE,$0FDB
4939+ 3C72 CD B7 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C75 C1                   pop     BC              ; Restore angle
4941+ 3C76 D1                   pop     DE
4942+ 3C77 CD CC 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C7A CD A7 38             call    STAKFP          ; Put it on stack
4944+ 3C7D CD 49 39             call    INT             ; Get INT of result
4945+ 3C80 C1                   pop     BC              ; Restore number
4946+ 3C81 D1                   pop     DE
4947+ 3C82 CD DC 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3C85 21 B1 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3C88 CD D6 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3C8B CD 76 38             call    TSTSGN          ; Test sign of value
4951+ 3C8E 37                   scf                     ; Flag positive
4952+ 3C8F F2 99 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3C92 CD CD 35             call    ROUND           ; Add 0.5 to value
4954+ 3C95 CD 76 38             call    TSTSGN          ; Test sign of value
4955+ 3C98 B7                   or      A               ; Flag negative
4956+ 3C99 F5           SIN1:   push    AF              ; Save sign
4957+ 3C9A F4 9F 38             call    P,INVSGN        ; Negate value if positive
4958+ 3C9D 21 B1 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3CA0 CD D0 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3CA3 F1                   pop     AF              ; Restore sign
4961+ 3CA4 D4 9F 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3CA7 21 B5 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3CAA C3 BE 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3CAD
4965+ 3CAD DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3CB1
4967+ 3CB1 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3CB5
4969+ 3CB5 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3CB6 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3CBA 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3CBE 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3CC2 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3CC6 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3CCA
4976+ 3CCA CD A7 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3CCD CD 69 3C             call    SIN             ; Get SIN of angle
4978+ 3CD0 C1                   pop     BC              ; Restore angle
4979+ 3CD1 E1                   pop     HL
4980+ 3CD2 CD A7 38             call    STAKFP          ; Save SIN of angle
4981+ 3CD5 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CD6 CD B7 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CD9 CD 63 3C             call    COS             ; Get COS of angle
4984+ 3CDC C3 CA 37             jp      DIV             ; TAN = SIN / COS
4985+ 3CDF
4986+ 3CDF CD 76 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3CE2 FC 0A 3B             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3CE5 FC 9F 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3CE8 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4990+ 3CEB FE 81                cp      81H             ; Number less than 1?
4991+ 3CED DA FC 3C             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3CF0 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3CF3 51                   ld      D,C
4994+ 3CF4 59                   ld      E,C
4995+ 3CF5 CD CC 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3CF8 21 D6 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3CFB E5                   push    HL              ; Save for angle > 1
4998+ 3CFC 21 06 3D     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3CFF CD BE 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3D02 21 AD 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3D05 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3D06
5003+ 3D06 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3D07 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3D0B 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3D0F FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3D13 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3D17 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3D1B C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3D1F E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3D23 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3D27 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3D2B
5014+ 3D2B
5015+ 3D2B C9           ARET:   ret                     ; A RETurn instruction
5016+ 3D2C
5017+ 3D2C D7           GETINP: rst     $10             ; input a character
5018+ 3D2D C9                   ret
5019+ 3D2E
5020+ 3D2E E5           CLS:    push    HL
5021+ 3D2F D5                   push    DE
5022+ 3D30 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D33 FE 02                cp      $02             ; G2 mode?
5024+ 3D35 CC F5 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D38 D1                   pop     DE
5026+ 3D39 E1                   pop     HL
5027+ 3D3A 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D3C CD CD 23             call    SND2VID         ; send to screen
5029+ 3D3F C3 F0 4C             jp      MONOUT          ; Output character
5030+ 3D42
5031+ 3D42 CD EF 32     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D45 7B                   ld      A,E             ; Width to A
5033+ 3D46 32 A2 80             ld      (LWIDTH),A      ; Set width
5034+ 3D49 C9                   ret
5035+ 3D4A
5036+ 3D4A
5037+ 3D4A              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D4A              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D4A CD 8E 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D4D D5                   push    DE              ; Save number
5041+ 3D4E E1                   pop     HL              ; Number to HL
5042+ 3D4F 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D50 23                   inc     HL
5044+ 3D51 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D52 C3 53 2E             jp      ABPASS          ; Return integer AB
5046+ 3D55
5047+ 3D55              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D55              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D55 CD 69 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D58 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D5B D5                   push    DE              ; Save address
5052+ 3D5C CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D5F 2C                   defb    ','
5054+ 3D60 CD 69 2A             call    GETNUM          ; Get a number
5055+ 3D63 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D66 E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D67 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D68 23                   inc     HL
5059+ 3D69 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D6A E1                   pop     HL              ; Restore code string address
5061+ 3D6B C9                   ret
5062+ 3D6C
5063+ 3D6C              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D6C              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D6C CD 69 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D6F CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D72 7A                   ld      A,D             ; load D into A
5068+ 3D73 B3                   or      E               ; are D & E equal to $00?
5069+ 3D74 C8                   ret     Z               ; if yes, then return
5070+ 3D75 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D76 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D79 47                   ld      B,A             ; move it into B
5073+ 3D7A CD 03 26     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D7D 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3D80 B8                   cp      B               ; is it the same value?
5076+ 3D81 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3D83 47                   ld      B,A             ; no, so store the new value
5078+ 3D84 1B                   dec     DE              ; decrement interval
5079+ 3D85 7A                   ld      A,D             ; load D into A
5080+ 3D86 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3D87 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3D89 C1                   pop     BC              ; yes, recover BC and continue
5083+ 3D8A C9                   ret
5084+ 3D8B
5085+ 3D8B              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3D8B              ; where X is graphic mode:
5087+ 3D8B              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3D8B              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3D8B              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3D8B              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3D8B              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3D8B AF           SCREEN: xor     A
5093+ 3D8C 32 07 82             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3D8F CD EF 32             call    GETINT          ; Get integer 0-255
5095+ 3D92 FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3D94 D2 A3 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3D97 32 05 82             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3D9A A7                   and     A               ; is it 0 (text mode)?
5099+ 3D9B CA B7 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3D9E CD F6 3D     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3DA1 DA A9 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3DA4 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3DA6 32 07 82             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3DA9 CD F6 3D     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3DAC DA B7 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3DAF 3A 07 82             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3DB2 F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3DB4 32 07 82             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3DB7 F3           SCVDP:  di                      ; disable INTs
5110+ 3DB8 D5                   push    DE              ; store DE
5111+ 3DB9 E5                   push    HL              ; store HL
5112+ 3DBA 3A 05 82             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3DBD 5F                   ld      E,A             ; and store it into E
5114+ 3DBE 3A 07 82             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3DC1 57                   ld      D,A             ; and store them into D
5116+ 3DC2 D5                   push    DE              ; store D & E
5117+ 3DC3 CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3DC6 D1                   pop     DE              ; retrieve D & E
5119+ 3DC7 7B                   ld      A,E             ; move graphic mode into A
5120+ 3DC8 87                   add     A,A
5121+ 3DC9 87                   add     A,A
5122+ 3DCA 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3DCB 5F                   ld      E,A             ; and pass it into E
5124+ 3DCC D5                   push    DE              ; store sprite flags in E
5125+ 3DCD 16 00                ld      D,$00           ; reset D
5126+ 3DCF 21 44 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DD2 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DD3 D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DD4 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DD5 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DD7 B2                   or      D               ; set size & magn. bits
5132+ 3DD8 5F                   ld      E,A             ; value into E
5133+ 3DD9 3E 01                ld      A,$01           ; reg #1
5134+ 3DDB CD D1 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3DDE 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
5136+ 3DE1 23                   inc     HL              ; -1 means direct statement
5137+ 3DE2 7C                   ld      A,H
5138+ 3DE3 B5                   or      L
5139+ 3DE4 CC 44 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3DE7 FB                   ei                      ; re-enable interrupts
5141+ 3DE8 E1                   pop     HL              ; restore HL
5142+ 3DE9 D1                   pop     DE              ; restore DE
5143+ 3DEA 3A F6 81             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3DED FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3DEF D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3DF0 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3DF2 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3DF5 C9                   ret                     ; ...and return to caller
5149+ 3DF6
5150+ 3DF6              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3DF6              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3DF6              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3DF6 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3DF7 CD D8 25             call    GETCHR          ; Get next character
5155+ 3DFA 37                   scf                     ; set carry flag
5156+ 3DFB C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3DFC CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3DFF 2C                   defb    ','
5159+ 3E00 CD EF 32             call    GETINT          ; get value
5160+ 3E03 1F                   rra                     ; Carry=bit #0
5161+ 3E04 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3E05 C9                   ret                     ; return
5163+ 3E06
5164+ 3E06
5165+ 3E06              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3E06              ; a=foreground color / b=background color / c=border color
5167+ 3E06              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3E06              ; the number of arguments is based on the current screen mode
5169+ 3E06 CD EF 32     COLOR:  call    GETINT          ; get first value
5170+ 3E09 CD AF 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3E0C 32 05 82             ld      (TMPBFR1),A     ; store it
5172+ 3E0F 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3E12 FE 03                cp      $03             ; is it multicolor mode?
5174+ 3E14 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3E16 3E 0F                ld      A,$0F           ; white for...
5176+ 3E18 32 03 82             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3E1B 3A 05 82             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3E1E 32 09 82             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3E21 18 31                jr      CLRMC           ; jump to set color
5180+ 3E23 CD 8F 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3E26 2C                   defb    ','
5182+ 3E27 CD EF 32             call    GETINT          ; get second value
5183+ 3E2A CD AF 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3E2D 32 07 82             ld      (TMPBFR2),A     ; store it
5185+ 3E30 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E33 A7                   and     A               ; is it text mode?
5187+ 3E34 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E36 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E39 2C                   defb    ','
5190+ 3E3A CD EF 32             call    GETINT          ; get third value
5191+ 3E3D CD AF 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E40 32 09 82             ld      (TMPBFR3),A     ; store it
5193+ 3E43 D5                   push    DE              ; store DE
5194+ 3E44 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E47 FE 01                cp      $01             ; is it G1 mode?
5196+ 3E49 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E4B FE 02                cp      $02             ; is it G2 mode?
5198+ 3E4D 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E4F 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E51 CD A2 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E54 32 09 82     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E57 D5                   push    DE              ; store DE
5203+ 3E58 F3                   di                      ; disable INTs
5204+ 3E59 18 2E                jr      SETBRCL         ; set colors and exit
5205+ 3E5B CD A2 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E5E 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E60 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E62 18 10                jr      LOADCLR         ; load colors
5209+ 3E64 CD A2 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E67 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E69 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E6B 18 07                jr      LOADCLR         ; load colors
5213+ 3E6D CD A2 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E70 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E72 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E74 E5           LOADCLR:push    HL              ; store HL
5217+ 3E75 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E78 F3                   di                      ; disable INTs
5219+ 3E79 CD 87 06             call    SETVDPADRS
5220+ 3E7C 0E 30                ld      C,VDP_DAT              ; VDP data mode
5221+ 3E7E ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3E80 00                   nop
5223+ 3E81 00                   nop
5224+ 3E82 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3E84 15                   dec     D               ; did we fill up all the pages?
5226+ 3E85 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3E87 FB                   ei
5228+ 3E88 E1                   pop     HL              ; retrieve HL
5229+ 3E89 3A 05 82     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3E8C 32 03 82             ld      (FRGNDCLR),A    ; store it
5231+ 3E8F 3A 07 82             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3E92 32 04 82             ld      (BKGNDCLR),A    ; store it
5233+ 3E95 3A 09 82             ld      A,(TMPBFR3)     ; recover border color
5234+ 3E98 5F                   ld      E,A             ; move it into E
5235+ 3E99 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3E9B F3                   di
5237+ 3E9C CD D1 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3E9F FB                   ei                      ; re-enable INTs
5239+ 3EA0 D1                   pop     DE              ; retrieve DE
5240+ 3EA1 C9                   ret                     ; return to caller
5241+ 3EA2
5242+ 3EA2
5243+ 3EA2              ; mix 2 color nibbles in 1 byte
5244+ 3EA2 3A 07 82     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3EA5 47                   ld      B,A             ; move it into B
5246+ 3EA6 3A 05 82             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3EA9 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3EAA 87                   add     A,A
5249+ 3EAB 87                   add     A,A
5250+ 3EAC 87                   add     A,A
5251+ 3EAD B0                   or      B               ; put background color into the low nibble of A
5252+ 3EAE C9                   ret                     ; return to caller
5253+ 3EAF
5254+ 3EAF
5255+ 3EAF              ; check if the color is not 0 and into the range 1~15
5256+ 3EAF A7           CHKCLR1:and     A               ; is it 0?
5257+ 3EB0 CA 8F 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3EB3 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3EB5 D2 8F 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3EB8 C9                   ret                     ; param is OK, can return
5261+ 3EB9
5262+ 3EB9
5263+ 3EB9              ; check if in graphics 2 mode
5264+ 3EB9 3A F7 81     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3EBC FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3EBE C2 C8 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3EC1 C9                   ret                     ; return to caller
5268+ 3EC2
5269+ 3EC2
5270+ 3EC2              ; print a text in screen 2
5271+ 3EC2              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3EC2              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3EC2              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3EC2              ; colors (1~15), resp.
5275+ 3EC2              ; (portions of code are from nippur72)
5276+ 3EC2              GX      equ     TMPBFR3
5277+ 3EC2              GY      equ     TMPBFR4
5278+ 3EC2              TMPCLR  equ     TMPBFR2
5279+ 3EC2              MIXCOL  equ     TMPBFR1
5280+ 3EC2              TMPADR  equ     VIDEOBUFF
5281+ 3EC2              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3EC2              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3EC2              TMPHL   equ     VIDEOBUFF+$06
5284+ 3EC2 CD B9 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3EC5 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3EC6 CD D8 25             call    GETCHR          ; check if something follows
5287+ 3EC9 CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3ECC 22 0D 82             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3ECF CD 7B 2A             call    EVAL            ; Evaluate expression
5290+ 3ED2 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3ED5 22 13 82             ld      (TMPHL),HL      ; store code string pointer
5292+ 3ED8 CD B4 30             call    GSTRCU          ; Current string to pool
5293+ 3EDB CD C5 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3EDE ED 43 0F 82          ld      (CHRPNT),BC     ; store string pointer
5295+ 3EE2 ED 53 11 82          ld      (NUMCHR),DE     ; store string lenght
5296+ 3EE6 2A 13 82             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3EE9 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3EEC 2C                   defb    ','
5299+ 3EED CD EF 32             call    GETINT          ; get X coord.
5300+ 3EF0 FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3EF2 D2 A3 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3EF5 32 09 82             ld      (GX),A          ; store into temp. buffer
5303+ 3EF8 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3EFB 2C                   defb    ','
5305+ 3EFC CD EF 32             call    GETINT          ; get Y coord.
5306+ 3EFF FE 18                cp      $18             ; is it in range 0~23?
5307+ 3F01 D2 A3 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3F04 32 0B 82             ld      (GY),A          ; store into temp. buffer
5309+ 3F07 11 07 82             ld      DE,TMPCLR
5310+ 3F0A 3A 04 82             ld      A,(BKGNDCLR)    ; load background color
5311+ 3F0D 12                   ld      (DE),A          ; store into temp buff
5312+ 3F0E 3A 03 82             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3F11 1B                   dec     DE
5314+ 3F12 1B                   dec     DE
5315+ 3F13 12                   ld      (DE),A          ; store into temp buff
5316+ 3F14 CD A0 3F             call    CKCOL           ; check color
5317+ 3F17 CA 1F 3F             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3F1A 13                   inc     DE
5319+ 3F1B 13                   inc     DE
5320+ 3F1C CD A0 3F             call    CKCOL           ; check background color
5321+ 3F1F CD A2 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3F22 32 05 82             ld      (MIXCOL),A      ; store mixed colors
5323+ 3F25 E5                   push    HL              ; store code string address
5324+ 3F26 ED 4B 0F 82          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3F2A ED 5B 11 82          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3F2E 1C                   inc     E               ; Length + 1
5327+ 3F2F CD 34 3F             call    GPNT            ; print on G2
5328+ 3F32 E1                   pop     HL              ; recover HL
5329+ 3F33 C9                   ret                     ; return to caller
5330+ 3F34 D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F35                      ; calculate VRAM address of first char
5332+ 3F35 3A 09 82             LD      A,(GX)          ; load X
5333+ 3F38 6F                   ld      L,A             ;
5334+ 3F39 26 00                ld      H,0             ; HL = X
5335+ 3F3B 29                   add     HL,HL           ;
5336+ 3F3C 29                   add     HL,HL           ;
5337+ 3F3D 29                   add     HL,HL           ; X=X*8
5338+ 3F3E 3A 0B 82             ld      A,(GY)          ; load Y
5339+ 3F41 57                   ld      D,A             ; move it into D
5340+ 3F42 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F44 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F45 22 0D 82             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F48 D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F49 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F4A C8                   ret     Z               ; End of string - return
5346+ 3F4B D5                   push    DE              ; store chars counter
5347+ 3F4C                      ; calculate dest address in color vram
5348+ 3F4C 2A 0D 82             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F4F 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F52 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F53 F3                   di                      ; disable INTs
5352+ 3F54                      ; send color settings
5353+ 3F54 CD 87 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F57 3A 05 82             ld      A,(MIXCOL)      ; load color settings
5355+ 3F5A 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F5C 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F5E ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F60 00                   nop                     ; wait...
5359+ 3F61 00                   nop                     ; ...a...
5360+ 3F62 00                   nop                     ; ...while
5361+ 3F63 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F65                      ; calculate source address
5363+ 3F65 2A 0F 82             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F68 7E                   ld      A,(HL)          ; get char
5365+ 3F69 23                   inc     HL              ; increment char pointer
5366+ 3F6A 22 0F 82             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F6D 6F                   ld      L,A             ;
5368+ 3F6E 26 00                ld      H,$00           ; char into HL
5369+ 3F70 29                   add     HL,HL           ;
5370+ 3F71 29                   add     HL,HL           ;
5371+ 3F72 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F73 11 54 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F76 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F77 EB                   ex      DE,HL           ; store address into DE
5375+ 3F78 2A 0D 82     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F7B CD 87 06             call    SETVDPADRS      ; send it to VDP
5377+ 3F7E EB                   ex      DE,HL           ; restore address into HL
5378+ 3F7F 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3F81 0E 30                ld      C,VDP_DAT              ; VDP data mode
5380+ 3F83 ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3F85 00                   nop                     ; wait...
5382+ 3F86 00                   nop                     ; ...a...
5383+ 3F87 00                   nop                     ; ...while
5384+ 3F88 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3F8A FB                   ei                      ; re-enable INTs
5386+ 3F8B 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3F8E 2A 0D 82             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3F91 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3F92 22 0D 82             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3F95 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3F98 CD 1E 4D             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3F9B D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3F9C D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3F9D C3 49 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3FA0
5396+ 3FA0              ; used by GPRINT to get a color argument (if present)
5397+ 3FA0 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3FA1 CD D8 25             call    GETCHR          ; Get next character
5399+ 3FA4 C8                   ret     Z               ; return if nothing follows
5400+ 3FA5 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3FA8 2C                   defb    ','
5402+ 3FA9 D5                   push    DE              ; store DE
5403+ 3FAA CD EF 32             call    GETINT          ; get value
5404+ 3FAD CD AF 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3FB0 D1                   pop     DE              ; retrieve DE
5406+ 3FB1 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3FB2 C9                   ret                     ; return to caller
5408+ 3FB3
5409+ 3FB3
5410+ 3FB3              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3FB3              ; at point X,Y, using default color or, if used, with
5412+ 3FB3              ; color set by C
5413+ 3FB3              ; TMPBFR1       X
5414+ 3FB3              ; TMPBFR2       Y
5415+ 3FB3              ; TMPBFR3       COLOR
5416+ 3FB3              PNT     equ     VIDEOBUFF
5417+ 3FB3              SPA     equ     VIDEOBUFF+$02
5418+ 3FB3              SPB     equ     VIDEOBUFF+$03
5419+ 3FB3              ORGSP   equ     VIDEOBUFF+$04
5420+ 3FB3 CD B9 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3FB6 CD EF 32             call    GETINT          ; get X
5422+ 3FB9 32 05 82             ld      (TMPBFR1),A     ; store X
5423+ 3FBC CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3FBF 2C                   defb    ','
5425+ 3FC0 CD EF 32             call    GETINT          ; get Y coords,
5426+ 3FC3 FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3FC5 D2 A3 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3FC8 32 07 82             ld      (TMPBFR2),A     ; store Y
5429+ 3FCB CD AF 44             call    CLRPRM          ; check if color has been passed
5430+ 3FCE 3A 09 82             ld      A,(TMPBFR3)     ; load color
5431+ 3FD1 A7                   and     A               ; check if 0
5432+ 3FD2 CA A3 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FD5 E5                   push    HL              ; store HL
5434+ 3FD6 C5                   push    BC              ; store BC
5435+ 3FD7 D5                   push    DE              ; store DE
5436+ 3FD8                      ; start algorithm
5437+ 3FD8 CD EB 40             call    PNTRTN          ; check if pixel is already set
5438+ 3FDB C2 8F 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 3FDE ED 73 11 82          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 3FE2 21 01 00             ld      HL,$0001        ; HL=1
5441+ 3FE5 22 0D 82             ld      (PNT),HL        ; set PNT
5442+ 3FE8 3A 05 82             ld      A,(TMPBFR1)     ; load starting X...
5443+ 3FEB 47                   ld      B,A             ; ...into B
5444+ 3FEC 3A 07 82             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 3FEF 4F                   ld      C,A             ; ...into C
5446+ 3FF0 C5                   push    BC              ; store starting X,Y into stack
5447+ 3FF1                      ; main loop
5448+ 3FF1 2A 0D 82     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 3FF4 7C                   ld      A,H             ; check if PNT=0
5450+ 3FF5 B5                   or      L
5451+ 3FF6 CA 8B 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 3FF9 2B                   dec     HL              ; no, so decrement PNT...
5453+ 3FFA 22 0D 82             ld      (PNT),HL        ; ...and store it
5454+ 3FFD C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 3FFE CD 93 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 4001 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 4003 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 4004 A7                   and     A               ; (reached the limit of the screen)
5459+ 4005 CA 0D 40             jp      Z,PAINT1        ; yes, jump over
5460+ 4008 05                   dec     B               ; no, decrement X1...
5461+ 4009 C3 FE 3F             jp      PAINT0          ; ...and repeat
5462+ 400C 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 400D AF           PAINT1: xor     A               ; reset A
5464+ 400E 57                   ld      D,A             ; set SA=0
5465+ 400F 5F                   ld      E,A             ; set SB=0
5466+ 4010 CD 93 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 4013 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 4015 78                   ld      A,B             ; copy X1
5469+ 4016 32 05 82             ld      (TMPBFR1),A     ; into buffer
5470+ 4019 79                   ld      A,C             ; copy Y
5471+ 401A 32 07 82             ld      (TMPBFR2),A     ; into buffer
5472+ 401D CD 11 41             call    CNTPLOT         ; plot pixel X1,Y
5473+ 4020 7A                   ld      A,D             ; load SA into A
5474+ 4021 A7                   and     A               ; SA=0?
5475+ 4022 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 4024 79                   ld      A,C             ; load Y
5477+ 4025 FE 01                cp      $01             ; Y>0?
5478+ 4027 DA 40 40             jp      C,PAINT2        ; no, jump over
5479+ 402A 3D                   dec     A               ; yes, Y=Y-1
5480+ 402B CD 94 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 402E 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 4030 0D                   dec     C               ; Y=Y-1
5483+ 4031 C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 4032 0C                   inc     C               ; retrieve original Y
5485+ 4033 2A 0D 82             ld      HL,(PNT)        ; load PNT
5486+ 4036 23                   inc     HL              ; increment PNT
5487+ 4037 22 0D 82             ld      (PNT),HL        ; store new PNT
5488+ 403A 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 403C 57                   ld      D,A             ; ...store SA into memory
5490+ 403D C3 53 40             jp      PAINT3          ; jump over
5491+ 4040 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 4041 1F                   rra                     ; check if SA=1
5493+ 4042 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 4044 79                   ld      A,C             ; load Y
5495+ 4045 FE 01                cp      $01             ; Y>0?
5496+ 4047 DA 53 40             jp      C,PAINT3        ; no, jump over
5497+ 404A 3D                   dec     A               ; Y=Y-1
5498+ 404B CD 94 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 404E CA 53 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 4051 AF                   xor     A               ; pixel is on, so...
5501+ 4052 57                   ld      D,A             ; ...set SA=0
5502+ 4053 7B           PAINT3: ld      A,E             ; check if...
5503+ 4054 A7                   and     A               ; SB=0
5504+ 4055 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 4057 79                   ld      A,C             ; load Y
5506+ 4058 FE BF                cp      $BF             ; Y<191?
5507+ 405A 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 405C 3C                   inc     A               ; Y=Y+1
5509+ 405D CD 94 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 4060 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 4062 0C                   inc     C               ; Y=Y+1
5512+ 4063 C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 4064 0D                   dec     C               ; retrieve original Y
5514+ 4065 2A 0D 82             ld      HL,(PNT)        ; PNT
5515+ 4068 23                   inc     HL              ; PNT=PNT+1
5516+ 4069 22 0D 82             ld      (PNT),HL        ; store PNT
5517+ 406C 3E 01                ld      A,$01           ; SB=1
5518+ 406E 5F                   ld      E,A             ; set SB
5519+ 406F C3 84 40             jp      PAINT5          ; jump over
5520+ 4072 7B           PAINT4: ld      A,E             ; load SB
5521+ 4073 1F                   rra                     ; check if SB=1
5522+ 4074 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 4076 79                   ld      A,C             ; load Y
5524+ 4077 FE BF                cp      $BF             ; Y<191?
5525+ 4079 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 407B 3C                   inc     A               ; Y=Y+1
5527+ 407C CD 94 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 407F CA 84 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 4082 AF                   xor     A               ; pixel is on, so...
5530+ 4083 5F                   ld      E,A             ; ...set SB=0
5531+ 4084 04           PAINT5: inc     B               ; X1=X1+1
5532+ 4085 CA F1 3F             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 4088 C3 10 40             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 408B ED 7B 11 82  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 408F D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 4090 C1                   pop     BC              ; retrieve BC
5537+ 4091 E1                   pop     HL              ; retrieve HL
5538+ 4092 C9                   ret                     ; return to caller
5539+ 4093 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 4094 32 07 82     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 4097 78                   ld      A,B             ; copy X1 into A
5542+ 4098 32 05 82             ld      (TMPBFR1),A     ; store X1
5543+ 409B C5                   push    BC              ; save X1,Y
5544+ 409C D5                   push    DE
5545+ 409D CD EB 40             call    PNTRTN          ; check if pixel is set/reset
5546+ 40A0 D1                   pop     DE
5547+ 40A1 C1                   pop     BC              ; retrieve X1,Y
5548+ 40A2 C9                   ret                     ; return to caller
5549+ 40A3
5550+ 40A3
5551+ 40A3              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 40A3 CD B9 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 40A6 CD 8F 23             call    CHKSYN          ; make sure "(" follows
5554+ 40A9 28                   defb    '('
5555+ 40AA CD EF 32             call    GETINT          ; get X coords.
5556+ 40AD 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 40B0 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5558+ 40B3 2C                   defb    ','
5559+ 40B4 CD EF 32             call    GETINT          ; get Y coords,
5560+ 40B7 FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 40B9 D2 A3 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 40BC 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 40BF CD 8F 23             call    CHKSYN          ; make sure ")" follows
5564+ 40C2 29                   defb    ')'
5565+ 40C3 E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 40C4 FD E1                pop     IY              ; ...into IY
5567+ 40C6 CD EB 40             call    PNTRTN          ; check if pixel is set or reset
5568+ 40C9 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 40CB AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 40CC 47                   ld      B,A             ; ...and B
5571+ 40CD E1           PNTEND: pop     HL              ; drop original return point
5572+ 40CE FD E5                push    IY              ; load current string address from IY into stack
5573+ 40D0 11 54 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40D3 D5                   push    DE              ; ...saved on stack
5575+ 40D4 C3 53 2E             jp      ABPASS          ; return AB
5576+ 40D7 CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40D9 F3                   di
5578+ 40DA CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40DD FB                   ei
5580+ 40DE CB 3F                srl     A               ; shift A...
5581+ 40E0 CB 3F                srl     A               ; ...4 times...
5582+ 40E2 CB 3F                srl     A               ; ...to move foreground color...
5583+ 40E4 CB 3F                srl     A               ; ...into lowest nibble
5584+ 40E6 47                   ld      B,A             ; color into B
5585+ 40E7 AF                   xor     A               ; reset MSB
5586+ 40E8 C3 CD 40             jp      PNTEND          ; return AB
5587+ 40EB CD 5E 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 40EE 57                   ld      D,A             ; store pixel index
5589+ 40EF F3                   di                      ; disable INTs
5590+ 40F0 CD A7 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 40F3 FB                   ei                      ; re-enable INTs
5592+ 40F4 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 40F5 C9                   ret                     ; return to caller
5594+ 40F6
5595+ 40F6
5596+ 40F6              ; PLOT X,Y[,color]
5597+ 40F6              ; plot a pixel in graphic mode 2
5598+ 40F6 CD B9 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 40F9 CD EF 32             call    GETINT          ; get X coords.
5600+ 40FC 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 40FF CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5602+ 4102 2C                   defb    ','
5603+ 4103 CD EF 32             call    GETINT          ; get Y coords,
5604+ 4106 FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 4108 D2 A3 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 410B 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 410E CD AF 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 4111 E5           CNTPLOT:push    HL              ; store HL
5609+ 4112 C5                   push    BC              ; store BC
5610+ 4113 D5                   push    DE              ; store DE
5611+ 4114 CD 5E 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 4117 D2 52 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 411A 57                   ld      D,A             ; move pixel value into D
5614+ 411B 3A 09 82             ld      A,(TMPBFR3)     ; retrieve color
5615+ 411E A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 411F 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 4121 F3                   di                      ; yes - so, disable INTs
5618+ 4122 CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 4125 FB                   ei                      ; re-enable INTs
5620+ 4126 5F                   ld      E,A             ; store value of cell
5621+ 4127 7A                   ld      A,D             ; retrieve pixel
5622+ 4128 2F                   cpl                     ; revert bits
5623+ 4129 A3                   and     E               ; set video pixel to off
5624+ 412A F3                   di                      ; disable INTs
5625+ 412B CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 412E FB                   ei                      ; re-enable INTs
5627+ 412F C3 52 41             jp      NOGD            ; leave
5628+ 4132 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 4133 87                   add     A,A             ; in the high nibble
5630+ 4134 87                   add     A,A             ; by adding A to itself
5631+ 4135 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 4136 5F                   ld      E,A             ; move it into E
5633+ 4137 F3                   di                      ; disable INTs
5634+ 4138 CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 413B FB                   ei
5636+ 413C B2                   or      D               ; merge new pixel preserving original pattern
5637+ 413D F3                   di
5638+ 413E CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 4141 FB                   ei
5640+ 4142 CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 4144 F3                   di
5642+ 4145 CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 4148 FB                   ei
5644+ 4149 E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 414B B3                   or      E               ; set new foreground color
5646+ 414C F3                   di
5647+ 414D CD BC 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 4150 FB                   ei                      ; re-enable INTs
5649+ 4151 00                   nop                     ; wait for INTs to be enabled again
5650+ 4152 D1           NOGD:   pop     DE              ; retrieve DE
5651+ 4153 C1                   pop     BC              ; retrieve BC
5652+ 4154 E1                   pop     HL              ; retrieve HL
5653+ 4155 C9                   ret                     ; return to caller
5654+ 4156 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 415A 08 04 02 01
5655+ 415E                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 415E
5657+ 415E
5658+ 415E              ; compute the VRAM address of the byte containing the pixel
5659+ 415E              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 415E              ; byte address is returned into HL
5661+ 415E              ; pixel is returned into A
5662+ 415E              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 415E                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 415E                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 415E 3A 07 82             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 4161 FE C0                cp      $C0             ; Y>=192?
5667+ 4163 D0                   ret     NC              ; yes, so leave
5668+ 4164 1E 08                ld      E,$08           ; load E with divisor
5669+ 4166 57                   ld      D,A             ; and store into D (dividend)
5670+ 4167 CD 69 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 416A 4F                   ld      C,A             ; store remainder into C
5672+ 416B 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 416C 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 416E 3A 05 82             ld      A,(TMPBFR1)     ; retrieve X
5675+ 4171 57                   ld      D,A             ; and move it into D (dividend)
5676+ 4172 CD 69 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 4175 4F                   ld      C,A             ; store remainder into C
5678+ 4176 7A                   ld      A,D             ; move quotient into A
5679+ 4177 87                   add     A,A             ; multiply quotient by 8
5680+ 4178 87                   add     A,A
5681+ 4179 87                   add     A,A
5682+ 417A 5F                   ld      E,A             ; store result into E
5683+ 417B 16 00                ld      D,$00           ; reset D
5684+ 417D 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 417E EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 417F 21 56 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 4182 06 00                ld      B,$00           ; reset B
5688+ 4184 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 4185 7E                   ld      A,(HL)          ; load pixel data
5690+ 4186 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 4187 37                   scf                     ; set Carry for normal exit
5692+ 4188 C9                   ret                     ; return to caller
5693+ 4189
5694+ 4189
5695+ 4189              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 4189              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 4189              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 4189              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 4189              ; the values. If color is not specified, the foreground color set
5700+ 4189              ; with COLOR will be used
5701+ 4189              X1      equ     TMPBFR1
5702+ 4189              Y1      equ     TMPBFR2
5703+ 4189              X2      equ     VIDEOBUFF
5704+ 4189              Y2      equ     VIDEOBUFF+$02
5705+ 4189              ER      equ     VIDEOBUFF+$04
5706+ 4189              E2      equ     VIDEOBUFF+$06
5707+ 4189              SX      equ     VIDEOBUFF+$08
5708+ 4189              SY      equ     VIDEOBUFF+$0A
5709+ 4189              DX      equ     VIDEOBUFF+$0C
5710+ 4189              DY      equ     VIDEOBUFF+$0E
5711+ 4189 CD B9 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 418C CD 91 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 418F CD A0 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 4192 CD EF 32             call    GETINT          ; get X1 coords.
5715+ 4195 32 05 82             ld      (X1),A          ; store it into a temp buffer
5716+ 4198 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5717+ 419B 2C                   defb    ','
5718+ 419C CD EF 32             call    GETINT          ; get Y1 coords.
5719+ 419F FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 41A1 D2 A3 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 41A4 32 07 82             ld      (Y1),A          ; store into a temp buffer
5722+ 41A7 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5723+ 41AA 2C                   defb    ','
5724+ 41AB CD EF 32             call    GETINT          ; get X2 coords.
5725+ 41AE 32 0D 82             ld      (X2),A          ; store it into a temp buffer
5726+ 41B1 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5727+ 41B4 2C                   defb    ','
5728+ 41B5 CD EF 32             call    GETINT          ; get Y2 coords
5729+ 41B8 FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 41BA D2 A3 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 41BD 32 0F 82             ld      (Y2),A          ; store it into a temp buffer
5732+ 41C0 CD AF 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 41C3 E5                   push    HL              ; store register we'll use
5734+ 41C4 D5                   push    DE
5735+ 41C5 C5                   push    BC
5736+ 41C6 ED 5B 05 82          ld      DE,(X1)         ; load X1 and
5737+ 41CA 2A 0D 82             ld      HL,(X2)         ; X2
5738+ 41CD B7                   or      A               ; clear CARRY
5739+ 41CE ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 41D0 CD 5F 4D             call    absHL           ; DX=ABS(DX)
5741+ 41D3 22 19 82             ld      (DX),HL         ; store DX
5742+ 41D6 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41D9 2A 05 82             ld      HL,(X1)
5744+ 41DC ED 5B 0D 82          ld      DE,(X2)
5745+ 41E0 CD 1E 4D             call    CMP16           ; X1<X2?
5746+ 41E3 CA EC 41             jp      Z,X1GR          ; no, X1=X2
5747+ 41E6 F2 EC 41             jp      P,X1GR          ; no, X1>X2
5748+ 41E9 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 41EC ED 43 15 82  X1GR:   ld      (SX),BC         ; store SX
5750+ 41F0 ED 5B 07 82          ld      DE,(Y1)
5751+ 41F4 2A 0F 82             ld      HL,(Y2)
5752+ 41F7 B7                   or      A               ; clear Carry
5753+ 41F8 ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 41FA CD 5F 4D             call    absHL           ; DY=ABS(DY)
5755+ 41FD 22 1B 82             ld      (DY),HL         ; store DY
5756+ 4200 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 4203 2A 07 82             ld      HL,(Y1)
5758+ 4206 ED 5B 0F 82          ld      DE,(Y2)
5759+ 420A CD 1E 4D             call    CMP16           ; is Y1<Y2?
5760+ 420D CA 16 42             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 4210 F2 16 42             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 4213 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 4216 ED 43 17 82  Y1GR:   ld      (SY),BC         ; store SY
5764+ 421A 2A 1B 82             ld      HL,(DY)         ; ER=DY
5765+ 421D CD 62 4D             call    negHL           ; ER=-DY
5766+ 4220 22 11 82             ld      (ER),HL         ; store ER
5767+ 4223 2A 19 82             ld      HL,(DX)
5768+ 4226 ED 5B 1B 82          ld      DE,(DY)
5769+ 422A CD 1E 4D             call    CMP16           ; DX>DY?
5770+ 422D CA 39 42             jp      Z,ER2           ; no, DX=DY
5771+ 4230 FA 39 42             jp      M,ER2           ; no, DX<DY
5772+ 4233 2A 19 82             ld      HL,(DX)         ; reload DX
5773+ 4236 22 11 82             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 4239 2A 11 82     ER2:    ld      HL,(ER)         ; load ER
5775+ 423C CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 423E CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 4240 CB 7C                bit     7,H             ; is the number negative?
5778+ 4242 CA 46 42             jp      Z,STRE2         ; no, jump over
5779+ 4245 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 4246 22 11 82     STRE2:  ld      (ER),HL         ; store ER
5781+ 4249 CD 11 41     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 424C 2A 05 82             ld      HL,(X1)
5783+ 424F ED 5B 0D 82          ld      DE,(X2)
5784+ 4253 CD 1E 4D             call    CMP16           ; X1=X2?
5785+ 4256 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 4258 2A 07 82             ld      HL,(Y1)         ; yes, so check
5787+ 425B ED 5B 0F 82          ld      DE,(Y2)         ; also Y
5788+ 425F CD 1E 4D             call    CMP16           ; Y1=Y2?
5789+ 4262 CA BE 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 4265 ED 5B 11 82  CNTDRW: ld      DE,(ER)
5791+ 4269 ED 53 13 82          ld      (E2),DE         ; E2=ER
5792+ 426D 2A 19 82             ld      HL,(DX)
5793+ 4270 CD 62 4D             call    negHL           ; DX=-DX
5794+ 4273 EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 4274 CD 1E 4D             call    CMP16           ; E2>-DX?
5796+ 4277 CA 95 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 427A FA 95 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 427D 2A 11 82             ld      HL,(ER)         ; yes
5799+ 4280 ED 5B 1B 82          ld      DE,(DY)
5800+ 4284 B7                   or      A               ; clear CARRY
5801+ 4285 ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 4287 22 11 82             ld      (ER),HL
5803+ 428A 2A 05 82             ld      HL,(X1)
5804+ 428D ED 5B 15 82          ld      DE,(SX)
5805+ 4291 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 4292 22 05 82             ld      (X1),HL
5807+ 4295 2A 13 82     DXGR:   ld      HL,(E2)
5808+ 4298 ED 5B 1B 82          ld      DE,(DY)
5809+ 429C CD 1E 4D             call    CMP16           ; E2<DY?
5810+ 429F CA 49 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 42A2 F2 49 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 42A5 2A 11 82             ld      HL,(ER)         ; yes
5813+ 42A8 ED 5B 19 82          ld      DE,(DX)
5814+ 42AC 19                   add     HL,DE           ; ER=ER+DX
5815+ 42AD 22 11 82             ld      (ER),HL
5816+ 42B0 2A 07 82             ld      HL,(Y1)
5817+ 42B3 ED 5B 17 82          ld      DE,(SY)
5818+ 42B7 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 42B8 22 07 82             ld      (Y1),HL
5820+ 42BB C3 49 42             jp      RPTDRW          ; repeat
5821+ 42BE C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 42BF D1                   pop     DE              ; retrieve DE
5823+ 42C0 E1                   pop     HL              ; retrieve HL
5824+ 42C1 C9                   ret                     ; return to caller
5825+ 42C2
5826+ 42C2
5827+ 42C2              ; CIRCLE X,Y,R[,C]
5828+ 42C2              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 42C2              ; and radius R, with optional color C. If color is not specified, the
5830+ 42C2              ; foreground color set with COLOR will be used
5831+ 42C2              XC      equ     VIDEOBUFF
5832+ 42C2              YC      equ     VIDEOBUFF+$02
5833+ 42C2              RADIUS  equ     VIDEOBUFF+$04
5834+ 42C2              XI      equ     VIDEOBUFF+$06
5835+ 42C2              YI      equ     VIDEOBUFF+$08
5836+ 42C2              DC      equ     VIDEOBUFF+$0A
5837+ 42C2 CD B9 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 42C5 CD A0 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 42C8 CD EF 32             call    GETINT          ; get X coords.
5840+ 42CB 32 0D 82             ld      (XC),A          ; store it into a temp buffer
5841+ 42CE CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5842+ 42D1 2C                   defb    ','
5843+ 42D2 CD EF 32             call    GETINT          ; get Y coords,
5844+ 42D5 32 0F 82             ld      (YC),A          ; store it into a temp buffer
5845+ 42D8 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42DB 2C                   defb    ','
5847+ 42DC CD EF 32             call    GETINT          ; get radius
5848+ 42DF 32 11 82             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 42E2 CD AF 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 42E5 C5                   push    BC              ; store BC
5851+ 42E6 D5                   push    DE              ; store DE
5852+ 42E7 E5                   push    HL              ; store HL
5853+ 42E8 AF                   xor     A               ; clear A,
5854+ 42E9 47                   ld      B,A             ; B,
5855+ 42EA 4F                   ld      C,A             ; C,
5856+ 42EB 57                   ld      D,A             ; D,
5857+ 42EC 67                   ld      H,A             ; and H
5858+ 42ED ED 43 13 82          ld      (XI),BC         ; clear XI
5859+ 42F1 3A 11 82             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 42F4 6F                   ld      L,A             ; HL now contains R
5861+ 42F5 22 15 82             ld      (YI),HL         ; YI=RADIUS
5862+ 42F8 29                   add     HL,HL           ; R*2
5863+ 42F9 EB                   ex      DE,HL           ; put HL into DE
5864+ 42FA 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 42FD AF                   xor     A               ; clear Carry
5866+ 42FE ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 4300 22 17 82             ld      (DC),HL         ; store D
5868+ 4303 CD 62 43             call    DRWCRL          ; draw initial point
5869+ 4306 ED 5B 13 82  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 430A 2A 15 82             ld      HL,(YI)         ; load YI
5871+ 430D CD 1E 4D             call    CMP16           ; is YI<DI?
5872+ 4310 CA 19 43             jp      Z,RPTCL1        ; no, YI=XI
5873+ 4313 F2 19 43             jp      P,RPTCL1        ; no, YI>XI
5874+ 4316 C3 5E 43             jp      ENDCRL          ; yes, so we've finished
5875+ 4319 21 13 82     RPTCL1: ld      HL,XI
5876+ 431C 34                   inc     (HL)            ; XI=XI+1
5877+ 431D 2A 17 82             ld      HL,(DC)         ; load D
5878+ 4320 7C                   ld      A,H
5879+ 4321 B5                   or      L               ; is D=0? Yes, jump over
5880+ 4322 CA 46 43             jp      Z,DLSZ
5881+ 4325 CB 7C                bit     7,H             ; is D<0?
5882+ 4327 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 4329 ED 5B 15 82          ld      DE,(YI)         ; D>0
5884+ 432D 1B                   dec     DE              ; so, YI=YI-1
5885+ 432E ED 53 15 82          ld      (YI),DE         ; store YI
5886+ 4332 AF                   xor     A               ; clear Carry
5887+ 4333 2A 13 82             ld      HL,(XI)
5888+ 4336 ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 4338 29                   add     HL,HL
5890+ 4339 29                   add     HL,HL           ; HL=HL*4
5891+ 433A 11 0A 00             ld      DE,10
5892+ 433D 19                   add     HL,DE           ; HL=HL+10
5893+ 433E ED 5B 17 82          ld      DE,(DC)         ; load D
5894+ 4342 EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 4343 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 4344 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 4346 2A 13 82     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 4349 29                   add     HL,HL
5899+ 434A 29                   add     HL,HL           ; XI=XI*4
5900+ 434B 11 06 00             ld      DE,$0006
5901+ 434E 19                   add     HL,DE
5902+ 434F ED 5B 17 82          ld      DE,(DC)
5903+ 4353 EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 4354 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 4355 22 17 82     PLTCRL: ld      (DC),HL         ; store new D
5906+ 4358 CD 62 43             call    DRWCRL          ; plot pixel
5907+ 435B C3 06 43             jp      RPTCRL          ; repeat
5908+ 435E E1           ENDCRL: pop     HL
5909+ 435F D1                   pop     DE
5910+ 4360 C1                   pop     BC
5911+ 4361 C9                   ret                     ; return to caller
5912+ 4362 2A 0D 82     DRWCRL: ld      HL,(XC)
5913+ 4365 ED 5B 13 82          ld      DE,(XI)
5914+ 4369 19                   add     HL,DE           ; X=XC+XI
5915+ 436A 22 05 82             ld      (X1),HL         ; store X
5916+ 436D CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 4370 DA 84 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 4373 2A 0F 82             ld      HL,(YC)
5919+ 4376 ED 5B 15 82          ld      DE,(YI)
5920+ 437A 19                   add     HL,DE           ; Y=YC+YI
5921+ 437B 22 07 82             ld      (Y1),HL         ; store Y
5922+ 437E CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 4381 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 4384 AF           CNTCL1: xor     A               ; clear Carry
5925+ 4385 2A 0D 82             ld      HL,(XC)
5926+ 4388 ED 5B 13 82          ld      DE,(XI)
5927+ 438C ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 438E 22 05 82             ld      (X1),HL         ; store X
5929+ 4391 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 4394 DA A8 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 4397 2A 0F 82             ld      HL,(YC)
5932+ 439A ED 5B 15 82          ld      DE,(YI)
5933+ 439E 19                   add     HL,DE           ; Y=YC+YI
5934+ 439F 22 07 82             ld      (Y1),HL         ; store Y
5935+ 43A2 CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 43A5 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 43A8 2A 0D 82     CNTCL2: ld      HL,(XC)
5938+ 43AB ED 5B 13 82          ld      DE,(XI)
5939+ 43AF 19                   add     HL,DE           ; X=XC+XI
5940+ 43B0 22 05 82             ld      (X1),HL         ; store X
5941+ 43B3 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 43B6 DA CC 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 43B9 AF                   xor     A               ; clear Carry
5944+ 43BA 2A 0F 82             ld      HL,(YC)
5945+ 43BD ED 5B 15 82          ld      DE,(YI)
5946+ 43C1 ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 43C3 22 07 82             ld      (Y1),HL         ; store Y
5948+ 43C6 CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 43C9 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 43CC AF           CNTCL3: xor     A               ; clear Carry
5951+ 43CD 2A 0D 82             ld      HL,(XC)
5952+ 43D0 ED 5B 13 82          ld      DE,(XI)
5953+ 43D4 ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43D6 22 05 82             ld      (X1),HL         ; store X
5955+ 43D9 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43DC DA F2 43             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 43DF AF                   xor     A               ; clear Carry
5958+ 43E0 2A 0F 82             ld      HL,(YC)
5959+ 43E3 ED 5B 15 82          ld      DE,(YI)
5960+ 43E7 ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 43E9 22 07 82             ld      (Y1),HL         ; store Y
5962+ 43EC CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 43EF D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 43F2 2A 0D 82     CNTCL4: ld      HL,(XC)
5965+ 43F5 ED 5B 15 82          ld      DE,(YI)
5966+ 43F9 19                   add     HL,DE           ; X=XC+YI
5967+ 43FA 22 05 82             ld      (X1),HL         ; store X
5968+ 43FD CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 4400 DA 14 44             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 4403 2A 0F 82             ld      HL,(YC)
5971+ 4406 ED 5B 13 82          ld      DE,(XI)
5972+ 440A 19                   add     HL,DE           ; Y=YC+XI
5973+ 440B 22 07 82             ld      (Y1),HL         ; store Y
5974+ 440E CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 4411 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 4414 AF           CNTCL5: xor     A               ; clear Carry
5977+ 4415 2A 0D 82             ld      HL,(XC)
5978+ 4418 ED 5B 15 82          ld      DE,(YI)
5979+ 441C ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 441E 22 05 82             ld      (X1),HL         ; store X
5981+ 4421 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 4424 DA 38 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 4427 2A 0F 82             ld      HL,(YC)
5984+ 442A ED 5B 13 82          ld      DE,(XI)
5985+ 442E 19                   add     HL,DE           ; Y=YC+XI
5986+ 442F 22 07 82             ld      (Y1),HL         ; store Y
5987+ 4432 CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 4435 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 4438 2A 0D 82     CNTCL6: ld      HL,(XC)
5990+ 443B ED 5B 15 82          ld      DE,(YI)
5991+ 443F 19                   add     HL,DE           ; X=XC+YI
5992+ 4440 22 05 82             ld      (X1),HL         ; store X
5993+ 4443 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 4446 DA 5C 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 4449 AF                   xor     A               ; clear Carry
5996+ 444A 2A 0F 82             ld      HL,(YC)
5997+ 444D ED 5B 13 82          ld      DE,(XI)
5998+ 4451 ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 4453 22 07 82             ld      (Y1),HL         ; store Y
6000+ 4456 CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 4459 D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 445C AF           CNTCL7: xor     A               ; clear Carry
6003+ 445D 2A 0D 82             ld      HL,(XC)
6004+ 4460 ED 5B 15 82          ld      DE,(YI)
6005+ 4464 ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 4466 22 05 82             ld      (X1),HL         ; store X
6007+ 4469 CD 81 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 446C D8                   ret     C               ; if Carry is set, X is not valid
6009+ 446D AF                   xor     A               ; clear Carry
6010+ 446E 2A 0F 82             ld      HL,(YC)
6011+ 4471 ED 5B 13 82          ld      DE,(XI)
6012+ 4475 ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 4477 22 07 82             ld      (Y1),HL         ; store Y
6014+ 447A CD 86 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 447D D4 11 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 4480 C9                   ret                     ; return to caller
6017+ 4481
6018+ 4481              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 4481              ; input: HL (value to check), can be negative
6020+ 4481              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 4481              ; destroys: A
6022+ 4481 AF           VALIDX: xor     A               ; reset A
6023+ 4482 B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 4483 C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 4484 37                   scf                     ; set Carry flag to raise error
6026+ 4485 C9                   ret                     ; return to caller
6027+ 4486
6028+ 4486 AF           VALIDY: xor     A               ; reset A
6029+ 4487 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 4488 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 448A 37                   scf                     ; no, raise error by setting Carry flag
6032+ 448B C9                   ret                     ; return to caller
6033+ 448C 7D           CNTVALY:ld      A,L
6034+ 448D FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 448F 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 4490 C9                   ret                     ; return to caller
6037+ 4491
6038+ 4491
6039+ 4491
6040+ 4491              ; cleat TMPBFR1-4 buffers before using them
6041+ 4491 AF           CLRTMBF:xor     A               ; reset A
6042+ 4492 E5                   push    HL              ; store HL
6043+ 4493 C5                   push    BC              ; store BC
6044+ 4494 21 05 82             ld      HL,TMPBFR1      ; address of 1st location
6045+ 4497 06 08                ld      B,$08           ; 8 locations
6046+ 4499 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 449A 23                   inc     HL              ; next location
6048+ 449B 10 FC                djnz    RPCLTMB         ; repeat
6049+ 449D C1                   pop     BC              ; retrieve BC
6050+ 449E E1                   pop     HL              ; retrieve HL
6051+ 449F C9                   ret                     ; return to caller
6052+ 44A0
6053+ 44A0
6054+ 44A0              ; clear VIDEOBUFF before using it as temp buffer
6055+ 44A0 AF           CLRVDBF:xor     A               ; clear A
6056+ 44A1 C5                   push    BC              ; store BC
6057+ 44A2 E5                   push    HL              ; store HL
6058+ 44A3 06 28                ld      B,$28           ; 40 cells
6059+ 44A5 21 0D 82             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 44A8 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 44A9 23                   inc     HL              ; next cell
6062+ 44AA 10 FC                djnz    RPTCVBF         ; repeat
6063+ 44AC E1                   pop     HL              ; retrieve HL
6064+ 44AD C1                   pop     BC              ; retrieve BC
6065+ 44AE C9                   ret                     ; return to caller
6066+ 44AF
6067+ 44AF
6068+ 44AF              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 44AF              ; commands. If not present, the default foreground color will be used
6070+ 44AF 3A 03 82     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 44B2 32 09 82             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 44B5 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 44B6 CD D8 25             call    GETCHR          ; Get next character
6074+ 44B9 C8                   ret     Z               ; return foreground color if nothing follows
6075+ 44BA CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6076+ 44BD 2C                   defb    ','
6077+ 44BE CD EF 32             call    GETINT          ; get value
6078+ 44C1 CD B3 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 44C4 32 09 82             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 44C7 C9                   ret                     ; return to caller
6081+ 44C8
6082+ 44C8
6083+ 44C8              ; no graphics mode error: raised when a graphics command is invoked
6084+ 44C8              ; out of graphic 2 mode.
6085+ 44C8 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 44CA C3 A9 20             jp      ERROR           ; print error
6087+ 44CD
6088+ 44CD
6089+ 44CD              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 44CD              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 44CD              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 44CD              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 44CD              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 44CD              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 44CD              ; they are assumed to be 8,0,1 resp.
6096+ 44CD              PRTNUM  equ     VIDEOBUFF
6097+ 44CD              BPS     equ     PRTNUM+$01
6098+ 44CD              DATABT  equ     BPS+$02
6099+ 44CD              PARBT   equ     DATABT+$01
6100+ 44CD              STPBT   equ     PARBT+$01
6101+ 44CD              SIOBFR  equ     STPBT+$01
6102+ 44CD CD EF 32     SERIAL: call    GETINT          ; get port #
6103+ 44D0 A7                   and     A               ; is it zero?
6104+ 44D1 CA A3 26             jp      Z,FCERR         ; yes, error
6105+ 44D4 FE 03                cp      $03             ; is it 1 or 2?
6106+ 44D6 D2 F6 46             jp      NC,SCERR        ; no, error
6107+ 44D9 32 0D 82             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44DC CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6109+ 44DF 2C                   defb    ','
6110+ 44E0 2B                   dec     HL
6111+ 44E1 CD D8 25             call    GETCHR          ; check what's following
6112+ 44E4 CA 8F 20             jp      Z,SNERR         ; error if nothing follows
6113+ 44E7 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 44E9 CD A8 26             call    ATOH            ; get bps (returned into DE)
6115+ 44EC 18 0F                jr      CHKZSER         ; jump over
6116+ 44EE CD 69 2A     SERVAR: call    GETNUM          ; get number
6117+ 44F1 CD 76 38             call    TSTSGN          ; check value
6118+ 44F4 FA A3 26             jp      M,FCERR         ; negative - illegal function call
6119+ 44F7 3A 5C 82             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 44FA CD 1E 39             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 44FD 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 44FE B3                   or      E               ; check if bps=0
6123+ 44FF 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 4501                      ; if baud rate is 0, then close the serial comm.
6125+ 4501 3A 0D 82     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 4504 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 4505 C6 22                add     SIO_CA          ; find correct channel
6128+ 4507 4F                   ld      C,A             ; store serial channel
6129+ 4508 F3                   di                      ; disable INTs
6130+ 4509 AF                   xor     A               ; reset A
6131+ 450A 16 01                ld      D,$01           ; start from WR1
6132+ 450C 06 05                ld      B,$05           ; 5 registers
6133+ 450E ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 4510 ED 79                out     (C),A           ; reset register
6135+ 4512 14                   inc     D               ; next register
6136+ 4513 10 F9                djnz    RPTRSSR         ; repeat
6137+ 4515 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 4517 ED 79                out     (C),A           ; send command to serial channel
6139+ 4519 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 451B ED 79                out     (C),A           ; send command to serial channel
6141+ 451D FB                   ei                      ; re-enable INTs
6142+ 451E E5                   push    HL              ; store HL
6143+ 451F 21 47 82             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 4522 DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 4524 CB 41                bit     0,C             ; check serial port
6146+ 4526 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 4528 CB B7                res     6,A             ; it's port 1
6148+ 452A CB A7                res     4,A             ; remove possible error LED
6149+ 452C CB 86                res     0,(HL)          ; disable port 1
6150+ 452E C3 37 45             jp      SERLED          ; jump over
6151+ 4531 CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 4533 CB AF                res     5,A             ; remove possible error LED
6153+ 4535 CB 8E                res     1,(HL)          ; disable port 2
6154+ 4537 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 4539 E1                   pop     HL              ; retrieve HL
6156+ 453A C9                   ret                     ; return to caller
6157+ 453B                      ; check if bps=1, meaning reactivate RX on serial
6158+ 453B 7A           CNTSER: ld      A,D
6159+ 453C B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 453D 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 453F 7B                   ld      A,E             ; then by checking that
6162+ 4540 FE 01                cp      $01             ; E=1
6163+ 4542 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 4544 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6165+ 4547 57                   ld      D,A             ; store port on D
6166+ 4548 3A 47 82             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 454B A2                   and     D               ; check status
6168+ 454C CA F6 46             jp      Z,SCERR         ; port not open, raise error
6169+ 454F F3                   di                      ; disable INTs
6170+ 4550 7A                   ld      A,D             ; move port # into A
6171+ 4551 5F                   ld      E,A             ; and also into E
6172+ 4552 87                   add     A
6173+ 4553 87                   add     A               ; move A to left times 2
6174+ 4554 57                   ld      D,A             ; move value into D
6175+ 4555 3A 47 82             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 4558 B2                   or      D               ; re-enable RX
6177+ 4559 32 47 82             ld      (SERIALS_EN),A  ; store new serial status
6178+ 455C 7B                   ld      A,E             ; recover port #
6179+ 455D 3D                   dec     A               ; check port
6180+ 455E 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 4560 CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 4563 DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 4565 CB A7                res     4,A             ; remove error LED
6184+ 4567 C3 71 45             jp      RXEND           ; terminate setting
6185+ 456A CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 456D DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 456F CB AF                res     5,A             ; remove error LED
6188+ 4571 D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 4573 FB                   ei                      ; re-enable INTs
6190+ 4574 C9                   ret                     ; return to caller
6191+ 4575                      ; set serial port comm.
6192+ 4575 D5           CNTSER2:push    DE              ; store BPS
6193+ 4576 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6194+ 4579 57                   ld      D,A             ; move port # into D
6195+ 457A 3A 47 82             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 457D A2                   and     D               ; by ANDing A with D
6197+ 457E D1                   pop     DE              ; retrieve BPS
6198+ 457F CA 87 45             jp      Z,CNTSER3       ; not open, continue
6199+ 4582 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 4584 C3 A9 20             jp      ERROR           ; and leave
6201+ 4587 E5           CNTSER3:push    HL              ; store HL
6202+ 4588 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 458B CD 1E 4D             call    CMP16           ; is bps<=57,600?
6204+ 458E E1                   pop     HL              ; but first, recover HL
6205+ 458F DA F6 46             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 4592 ED 53 0E 82          ld      (BPS),DE        ; store bps
6207+ 4596 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 4597 CD D8 25             call    GETCHR          ; Get next character
6209+ 459A CA D2 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 459D CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6211+ 45A0 2C                   defb    ','
6212+ 45A1 CD EF 32             call    GETINT          ; get data bits
6213+ 45A4 FE 05                cp      $05             ; is it <5?
6214+ 45A6 DA F6 46             jp      C,SCERR         ; yes, error
6215+ 45A9 FE 09                cp      $09             ; is it >=9?
6216+ 45AB D2 A3 26             jp      NC,FCERR        ; yes, error
6217+ 45AE 32 10 82             ld      (DATABT),A      ; store data bits
6218+ 45B1 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6219+ 45B4 2C                   defb    ','
6220+ 45B5 CD EF 32             call    GETINT          ; get parity bits
6221+ 45B8 BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 45BB D2 F6 46             jp      NC,SCERR        ; no, error
6223+ 45BE 32 11 82             ld      (PARBT),A       ; store parity
6224+ 45C1 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6225+ 45C4 2C                   defb    ','
6226+ 45C5 CD EF 32             call    GETINT          ; get stop bits
6227+ 45C8 FE 03                cp      $03             ; is it >=3?
6228+ 45CA D2 F6 46             jp      NC,SCERR        ; yes, error
6229+ 45CD 32 12 82             ld      (STPBT),A       ; store stop bits
6230+ 45D0 18 0D                jr      SETSER          ; jump to set serial
6231+ 45D2 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45D4 32 10 82             ld      (DATABT),A
6233+ 45D7 AF                   xor     A               ; no parity bit
6234+ 45D8 32 11 82             ld      (PARBT),A
6235+ 45DB 3C                   inc     A               ; 1 bit for stop
6236+ 45DC 32 12 82             ld      (STPBT),A
6237+ 45DF                      ; check if bps are legal
6238+ 45DF E5           SETSER: push    HL              ; store HL
6239+ 45E0 D5                   push    DE              ; store DE
6240+ 45E1 DD E5                push    IX              ; store IX
6241+ 45E3 DD 21 D1 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 45E7 06 0B                ld      B,$0B           ; 11 items
6243+ 45E9 0E 00                ld      C,$00           ; reset pointer
6244+ 45EB 2A 0E 82     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 45EE DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 45F1 DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 45F4 CD 1E 4D             call    CMP16           ; is it equal?
6248+ 45F7 CA 04 46             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 45FA DD 23                inc     IX
6250+ 45FC DD 23                inc     IX              ; no, go to next entry
6251+ 45FE 0C                   inc     C               ; increment pointer
6252+ 45FF 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 4601 C3 F2 46             jp      SCERR1          ; if nothing found, raise an error
6254+ 4604              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 4604                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 4604                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 4604                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 4604 F3                   di                      ; disable INTs
6259+ 4605 06 00                ld      B,$00           ; reset B
6260+ 4607 21 E7 46             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 460A 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 460B 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 460D 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6264+ 4610 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 4611 DA 15 46             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 4614 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 4615 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 4617                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 4617 ED 79                out     (C),A           ; configure CTC channel
6270+ 4619 7E                   ld      A,(HL)          ; load CTC divider
6271+ 461A ED 79                out     (C),A           ; send divider
6272+ 461C                      ; configure SIO
6273+ 461C 21 54 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 461F 11 13 82             ld      DE,SIOBFR       ; into a temp buffer
6275+ 4622 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 4625 ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 4627 3A 18 82             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 462A 47                   ld      B,A             ; move it into B
6279+ 462B 3A 10 82             ld      A,(DATABT)      ; load DATA bits
6280+ 462E FE 05                cp      $05             ; is it 5 bits?
6281+ 4630 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 4632 CB B0                res     6,B
6283+ 4634 CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 4636 18 19                jr      SETPAR          ; jump to set parity
6285+ 4638 FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 463A 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 463C CB F0                set     6,B
6288+ 463E CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 4640 18 0F                jr      SETPAR          ; jump to set parity
6290+ 4642 FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 4644 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 4646 CB B0                res     6,B
6293+ 4648 CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 464A C3 51 46             jp      SETPAR          ; jump to set parity
6295+ 464D CB F0        BITS8:  set     6,B
6296+ 464F CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 4651 21 48 82     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 4654 3A 0D 82             ld      A,(PRTNUM)      ; check serial port number
6299+ 4657 3D                   dec     A               ; is it port #1?
6300+ 4658 CA 5C 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 465B 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 465C 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 465D 32 18 82             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 4660 E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 4662 87                   add     A,A             ; shift left times 1
6306+ 4663 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 4664 3A 12 82             ld      A,(STPBT)       ; load STOP bits
6308+ 4667 87                   add     A,A
6309+ 4668 87                   add     A,A             ; 2 left shifts
6310+ 4669 47                   ld      B,A             ; move forming byte into B
6311+ 466A 3A 11 82             ld      A,(PARBT)       ; load PARITY setting
6312+ 466D A7                   and     A               ; is it 0?
6313+ 466E CA 79 46             jp      Z,STRPAR        ; yes, jump over
6314+ 4671 CB C0                set     0,B             ; set PARITY on
6315+ 4673 3D                   dec     A               ; is parity ODD?
6316+ 4674 CA 79 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 4677 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 4679 3A 16 82     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 467C E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 467E B0                   or      B               ; set new STOP & PARITY bits
6321+ 467F 32 16 82             ld      (SIOBFR+3),A    ; store new value
6322+ 4682                      ;set up TX and RX:
6323+ 4682                      ; the followings are settings for channel A
6324+ 4682 21 13 82             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 4685 06 06                ld      B,$06           ; 6 bytes to send
6326+ 4687 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 4689 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6328+ 468C 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 468D DA 91 46             jp      C,SRLCNT        ; port 1, continue
6330+ 4690 0C                   inc     C               ; port 2, increment address port into C
6331+ 4691 ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 4693                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 4693 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 4695 51                   ld      D,C             ; store port address into D
6335+ 4696 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 4698 ED B3                otir                    ; send bytes to SIO
6337+ 469A                      ; the following are settings for selected channel
6338+ 469A 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 469C 4A                   ld      C,D             ; retrieve port address
6340+ 469D ED 79                out     (C),A
6341+ 469F 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 46A1                                              ; buffer overrun is special condition
6343+ 46A1 ED 79                out     (C),A
6344+ 46A3 21 47 82             ld      HL,SERIALS_EN
6345+ 46A6 3A 0D 82             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 46A9 3D                   dec     A               ; channel A?
6347+ 46AA 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 46AC CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 46AF CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 46B1 CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 46B3                      ; back to normal running
6352+ 46B3 FB                   ei                      ; re-enable INTs
6353+ 46B4 DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 46B6 CB F7                set     6,A             ; set status LED on
6355+ 46B8 CB A7                res     4,A             ; set error LED off
6356+ 46BA 18 0E                jr      EXNRM           ; leave
6357+ 46BC CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 46BF CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 46C1 CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 46C3                      ; back to normal running
6361+ 46C3 FB                   ei                      ; re-enable INTs
6362+ 46C4 DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 46C6 CB FF                set     7,A             ; set status LED on
6364+ 46C8 CB AF                res     5,A             ; set error LED off
6365+ 46CA D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 46CC DD E1                pop     IX              ; retrieve IX
6367+ 46CE D1                   pop     DE              ; retrieve DE
6368+ 46CF E1                   pop     HL              ; retrieve HL
6369+ 46D0 C9                   ret                     ; return to caller
6370+ 46D1
6371+ 46D1              ; allowed bps (Bauds per second)
6372+ 46D1 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46D5 80 70 00 4B
6372+ 46D9 40 38 80 25
6372+ 46DD C0 12 10 0E
6372+ 46E1 60 09 B0 04
6372+ 46E5 58 02
6373+ 46E7              ; corresponding CTC divider
6374+ 46E7 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 46EB 08 0C 18 20
6374+ 46EF 30 60 C0
6375+ 46F2
6376+ 46F2
6377+ 46F2              ; serial configuration error
6378+ 46F2 DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 46F4 D1                   pop     DE              ; retrieve DE
6380+ 46F5 E1                   pop     HL              ; retrieve HL
6381+ 46F6 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 46F8 C3 A9 20             jp      ERROR           ; print error
6383+ 46FB
6384+ 46FB
6385+ 46FB              ; serial buffer overrun
6386+ 46FB CD A5 28     SOERR:  call    PRNTCRLF
6387+ 46FE 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 4700 C3 A9 20             jp      ERROR
6389+ 4703
6390+ 4703
6391+ 4703              ; check for direct mode:
6392+ 4703              ; Z is set if in direct mode, reset otherwise
6393+ 4703 E5           DIRMOD: push    HL              ; Save code string address
6394+ 4704 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6395+ 4707 23                   inc     HL              ; -1 means direct statement
6396+ 4708 7C                   ld      A,H
6397+ 4709 B5                   or      L
6398+ 470A E1                   pop     HL              ; Restore code string address
6399+ 470B C9                   ret
6400+ 470C
6401+ 470C
6402+ 470C              ; HELP lists the line program where an error occured
6403+ 470C CD 03 47     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 470F C2 25 47             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 4712 E5                   push    HL              ; store HL
6406+ 4713 2A B1 80             ld      HL,(HLPLN)      ; load HELP line
6407+ 4716 23                   inc     HL              ; increment HL
6408+ 4717 7C                   ld      A,H
6409+ 4718 B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 4719 E1                   pop     HL
6411+ 471A CA 25 47             jp      Z,HLPERR        ; no line found, raise error
6412+ 471D ED 5B B1 80          ld      DE,(HLPLN)      ; recover line
6413+ 4721 C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 4722 C3 25 24             jp      LST01H          ; jump to list line
6415+ 4725 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 4727 C3 A9 20             jp      ERROR           ; raise error
6417+ 472A
6418+ 472A
6419+ 472A              ; KEY command to list/modify function keys and auto-repeat
6420+ 472A 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 472B CD D8 25             call    GETCHR          ; Get next character
6422+ 472E CA AE 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 4731                      ; change FN keys
6424+ 4731 CD EF 32             call    GETINT          ; get a number
6425+ 4734 A7                   and     A               ; is it 0?
6426+ 4735 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 4737 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 4738 D5                   push    DE              ; store HL & DE
6429+ 4739 21 7D 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 473C 11 B3 80             ld      DE,KEYDEL       ; pointer to destination
6431+ 473F 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 4742 ED B0                ldir                    ; restore default texts
6433+ 4744 D1                   pop     DE              ; retrieve DE
6434+ 4745 E1                   pop     HL              ; retrieve HL
6435+ 4746 C9                   ret                     ; return to caller
6436+ 4747 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 4749 D2 61 48             jp      NC,SETREP       ; yes - jump over
6438+ 474C 3D                   dec     A               ; FN key in range 0~7
6439+ 474D 87                   add     A,A             ; multiply A...
6440+ 474E 87                   add     A,A             ; ... times 4...
6441+ 474F 87                   add     A,A             ; ... to get the correct...
6442+ 4750 87                   add     A,A             ; ... offset fo FN key text
6443+ 4751 32 05 82             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 4754 AF                   xor     A               ; ...in a...
6445+ 4755 32 06 82             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 4758 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6447+ 475B 2C                   defb    ','
6448+ 475C 44 4D                ld      BC,HL           ; copy address into BC
6449+ 475E CD 7B 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 4761 E5                   push    HL              ; store string pointer
6451+ 4762 3A 94 81             ld      A,(TYPE)        ; Get variable type
6452+ 4765 B7                   or      A               ; Is it a string variable?
6453+ 4766 CA 8F 20             jp      Z,SNERR         ; no - syntax error
6454+ 4769 CD B4 30             call    GSTRCU          ; Current string to pool
6455+ 476C CD C5 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 476F 7B                   ld      A,E             ; copy length into A
6457+ 4770 FE 11                cp      $11             ; is length > 16?
6458+ 4772 DA 77 47             jp      C,DECLN1        ; no, jump over
6459+ 4775 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 4777 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 4779 93                   sub     E               ; ...null chars needed to fill up...
6462+ 477A 57                   ld      D,A             ; ...the FN key text
6463+ 477B C5                   push    BC              ; store address of string
6464+ 477C ED 4B 05 82          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 4780 21 B5 80             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 4783 09                   add     HL,BC           ; get corrected address
6467+ 4784 C1                   pop     BC              ; retrieve address of string chars
6468+ 4785 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 4786 FE 0D                cp      CR              ; return?
6470+ 4788 CA 95 47             jp      Z,CPKEY2        ; yes, store char
6471+ 478B FE 7B                cp      $7B             ; if char > "z" ?
6472+ 478D D2 8F 20             jp      NC,SNERR        ; yes - syntax error
6473+ 4790 FE 20                cp      $20             ; is char < space?
6474+ 4792 DA 8F 20             jp      C,SNERR         ; yes - syntax error
6475+ 4795 FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 4797 DA 9C 47             jp      C,CPKEY3        ; no, continue
6477+ 479A E6 5F                and     %01011111       ; set letters to uppercase
6478+ 479C 77           CPKEY3: ld      (HL),A          ; store char
6479+ 479D 23                   inc     HL              ; next string char
6480+ 479E 03                   inc     BC              ; next free cell
6481+ 479F 1D                   dec     E               ; decrement E
6482+ 47A0 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 47A2 AF                   xor     A               ; null char
6484+ 47A3 14                   inc     D               ; +1 to decrement below
6485+ 47A4 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 47A5 CA AC 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 47A8 77                   ld      (HL),A          ; store it
6488+ 47A9 23                   inc     HL              ; next cell
6489+ 47AA 18 F8                jr      CPKEY1          ; repeat
6490+ 47AC E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 47AD C9                   ret                     ; return to caller
6492+ 47AE                                              ; list FN keys
6493+ 47AE E5           LSTKEYS:push    HL              ; Save code string address
6494+ 47AF 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6495+ 47B2 23                   inc     HL              ; -1 means direct statement
6496+ 47B3 7C                   ld      A,H
6497+ 47B4 B5                   or      L
6498+ 47B5 E1                   pop     HL              ; Restore code string address
6499+ 47B6 C2 8F 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 47B9 E5                   push    HL              ; store HL
6501+ 47BA D5                   push    DE              ; store DE
6502+ 47BB 21 B5 80             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 47BE 0E 01                ld      C,$01           ; 8 function keys
6504+ 47C0 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 47C2 11 83 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 47C5 CD 52 48             call    PRTCKEY         ; print it
6507+ 47C8 79                   ld      A,C             ; load FN key
6508+ 47C9 C6 30                add     $30             ; get number in ASCI code
6509+ 47CB CD 9A 23             call    OUTC            ; print it
6510+ 47CE 11 88 48             ld      DE,CHKEY2       ; message ": ""
6511+ 47D1 CD 52 48             call    PRTCKEY         ; print it
6512+ 47D4 3E 01                ld      A,$01           ; " opened
6513+ 47D6 32 05 82             ld      (TMPBFR1),A
6514+ 47D9 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47DA A7                   and     A               ; is it zero?
6516+ 47DB CA EE 47             jp      Z,CNTLTK        ; yes, go next char
6517+ 47DE CD 3A 48             call    OPNQT           ; check if quotes are opened
6518+ 47E1 FE 22                cp      $22             ; check if char is "?
6519+ 47E3 CA 03 48             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 47E6 FE 0D                cp      CR              ; is it a CR?
6521+ 47E8 CA 03 48             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 47EB CD 9A 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 47EE 23           CNTLTK: inc     HL              ; next char
6524+ 47EF 10 E8                djnz    LDKEY           ; continue until finished
6525+ 47F1 CD 28 48             call    CLSQT           ; check if quotes are still open
6526+ 47F4 3E 0D                ld      A,CR            ; go next line
6527+ 47F6 CD 9A 23             call    OUTC            ; print it
6528+ 47F9 0C                   inc     C               ; next FN key
6529+ 47FA 79                   ld      A,C             ; check if...
6530+ 47FB FE 09                cp      $09             ; finished keys?
6531+ 47FD DA C0 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 4800 D1                   pop     DE              ; retrieve DE
6533+ 4801 E1                   pop     HL              ; retrieve HL
6534+ 4802 C9                   ret                     ; return to caller
6535+ 4803 E5           PRTCHR: push    HL              ; store HL
6536+ 4804 CD 28 48             call    CLSQT           ; check if quotes are closed
6537+ 4807 3E 2B                ld      A,'+'           ; '+' char
6538+ 4809 CD 9A 23             call    OUTC            ; print it
6539+ 480C 11 8B 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 480F CD 52 48             call    PRTCKEY         ; print it
6541+ 4812 E1                   pop     HL              ; recover HL
6542+ 4813 23                   inc     HL              ; next char
6543+ 4814 05                   dec     B               ; increment char counter
6544+ 4815 11 91 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 4818 7E                   ld      A,(HL)          ; load char
6546+ 4819 FE 0D                cp      CR              ; is it a RETURN?
6547+ 481B 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 481D 11 94 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 4820 CD 52 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 4823 3E 29                ld      A,')'           ; char )
6551+ 4825 C3 EB 47             jp      PRTK3           ; continue
6552+ 4828 F5           CLSQT:  push    AF              ; store A
6553+ 4829 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6554+ 482C A7                   and     A               ; are they closed?
6555+ 482D 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 482F 3E 22                ld      A,$22           ; no, so close them
6557+ 4831 CD 9A 23             call    OUTC            ; print "
6558+ 4834 AF                   xor     A               ; set quotes
6559+ 4835 32 05 82             ld      (TMPBFR1),A     ; as closed
6560+ 4838 F1           CLSQT1: pop     AF              ; retrieve A
6561+ 4839 C9                   ret                     ; return to caller
6562+ 483A F5           OPNQT:  push    AF              ; store A
6563+ 483B 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6564+ 483E A7                   and     A               ; are they open?
6565+ 483F 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 4841 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 4843 CD 9A 23             call    OUTC            ; print it
6568+ 4846 3E 22                ld      A,$22           ; and then open quotes
6569+ 4848 CD 9A 23             call    OUTC            ; print them
6570+ 484B 3E 01                ld      A,$01           ; set quotes
6571+ 484D 32 05 82             ld      (TMPBFR1),A     ; as opened
6572+ 4850 F1           OPNQT1: pop     AF              ; retrieve A
6573+ 4851 C9                   ret                     ; return to caller
6574+ 4852 F5           PRTCKEY:push    AF              ; store original char
6575+ 4853 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 4854 A7                   and     A               ; is it 0?
6577+ 4855 CA 5F 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 4858 CD 9A 23             call    OUTC            ; no, print char
6579+ 485B 13                   inc     DE              ; next char
6580+ 485C C3 53 48             jp      PRTK1           ; repeat
6581+ 485F F1           PRTEND: pop     AF              ; retrieve AF
6582+ 4860 C9                   ret                     ; return to caller
6583+ 4861 FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 4863 C2 8F 20             jp      NZ,SNERR        ; no, raise an error
6585+ 4866 CD 8F 23             call    CHKSYN          ; Check for comma
6586+ 4869 2C                   defb    ','
6587+ 486A CD EF 32             call    GETINT          ; get a number
6588+ 486D 32 05 82             ld      (TMPBFR1),A     ; store it
6589+ 4870 CD 8F 23             call    CHKSYN          ; Check for comma
6590+ 4873 2C                   defb    ','
6591+ 4874 CD EF 32             call    GETINT          ; get another number
6592+ 4877 E5                   push    HL              ; store HL
6593+ 4878 21 B4 80             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 487B 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 487C 2B                   dec     HL              ; previous cell
6596+ 487D 3A 05 82             ld      A,(TMPBFR1)     ; retrieve value
6597+ 4880 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 4881 E1                   pop     HL              ; retrieve HL
6599+ 4882 C9                   ret
6600+ 4883 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 4887 00
6601+ 4888 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 488B 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 488F 28 00
6603+ 4891 31 33 00     CHKEY4: defb    "13",0
6604+ 4894 33 34 00     CHKEY5: defb    "34",0
6605+ 4897
6606+ 4897
6607+ 4897              ; check if DOS is enabled
6608+ 4897 3A 4A 82     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 489A A7                   and     A               ; check if 0 (NOT enabled)
6610+ 489B C0                   ret     NZ              ; return if enabled
6611+ 489C 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 489E C3 A9 20             jp      ERROR           ; raise error
6613+ 48A1
6614+ 48A1
6615+ 48A1              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 48A1              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 48A1 CD EA 48     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 48A4 CA C2 48             jp      Z,LOADST        ; number - load a single sector
6619+ 48A7 CD 03 47             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 48AA C2 A4 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 48AD CD D0 4B             call    CHKFN1          ; string - evaluate file name
6622+ 48B0 CD F0 49             call    CHK1AR          ; check for ",1" argument
6623+ 48B3 22 05 82             ld      (TMPBFR1),HL    ; store HL
6624+ 48B6 21 D9 48             ld      HL,TXTLDG       ; loading message
6625+ 48B9 CD 71 2F             call    PRS             ; print
6626+ 48BC CD 72 15             call    LODFILE         ; load file into memory
6627+ 48BF C3 D2 48             jp      LDEND           ; retrieve registers and leave
6628+ 48C2 2A 05 82     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 48C5 CD FF 48             call    GET3AR          ; get 3 arguments & set corresponding sector
6630+ 48C8 22 05 82             ld      (TMPBFR1),HL    ; store HL
6631+ 48CB CD B1 10             call    CF_RD_SEC       ; read sector
6632+ 48CE CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6633+ 48D1 AF                   xor     A               ; clear Carry
6634+ 48D2 2A 05 82     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6635+ 48D5 DA E9 49             jp      C,DOS_ERR       ; jump if DOS error
6636+ 48D8 C9                   ret                     ; return to caller
6637+ 48D9 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6637+ 48DD 69 6E 67 20
6637+ 48E1 66 69 6C 65
6637+ 48E5 2E 2E 2E 0D
6637+ 48E9 00
6638+ 48EA
6639+ 48EA
6640+ 48EA              ; common code for LOAD/SAVE to check the type of operation required
6641+ 48EA              ; (load/save a file or a single sector)
6642+ 48EA              ; returns Z if argument is a number, NZ if it's a string
6643+ 48EA CD 97 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6644+ 48ED 2B                   dec     HL              ; dec 'cos GETCHR INCs
6645+ 48EE CD D8 25             call    GETCHR          ; check if something follows
6646+ 48F1 CA 8F 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6647+ 48F4 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6648+ 48F7 CD 7B 2A             call    EVAL            ; Evaluate expression
6649+ 48FA 3A 94 81             ld      A,(TYPE)        ; Get variable type
6650+ 48FD B7                   or      A               ; Is it a string variable?
6651+ 48FE C9                   ret                     ; return to caller
6652+ 48FF
6653+ 48FF
6654+ 48FF              ; shared code between LOAD and SAVE
6655+ 48FF              ; get 3 arguments after the command LOAD or SAVE
6656+ 48FF              ; and set CF to point to the selected sector
6657+ 48FF 2A 05 82     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6658+ 4902 CD EF 32             call    GETINT          ; get 1st pointer
6659+ 4905 32 9D 81             ld      (TMPDBF),A      ; store it into a temp buffer
6660+ 4908 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6661+ 490B 2C                   defb    ','
6662+ 490C CD EF 32             call    GETINT          ; get 2nd pointer
6663+ 490F 32 9E 81             ld      (TMPDBF+1),A    ; store it into a temp buffer
6664+ 4912 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6665+ 4915 2C                   defb    ','
6666+ 4916 CD EF 32             call    GETINT          ; get 3rd pointer
6667+ 4919 32 9F 81             ld      (TMPDBF+2),A    ; store it into a temp buffer
6668+ 491C CD B6 18             call    CLRIOBF         ; clear I/O buffer
6669+ 491F CD 2D 10             call    CF_INIT         ; init CF card
6670+ 4922 DA A7 20             jp      C,NRERR         ; error if device not available/ready
6671+ 4925 3A 9D 81             ld      A,(TMPDBF)      ; retrieve 1st pointer
6672+ 4928 4F                   ld      C,A
6673+ 4929 3A 9E 81             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6674+ 492C 47                   ld      B,A
6675+ 492D 3A 9F 81             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6676+ 4930 5F                   ld      E,A
6677+ 4931 16 00                ld      D,$00           ; set disk
6678+ 4933 CD 6F 10             call    CF_SETSTR       ; set sector
6679+ 4936 C9                   ret                     ; return to caller
6680+ 4937
6681+ 4937
6682+ 4937              ; save a file onto the disk
6683+ 4937 CD 97 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6684+ 493A 2B                   dec     HL              ; dec 'cos GETCHR INCs
6685+ 493B CD D8 25             call    GETCHR          ; check if something follows
6686+ 493E CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6687+ 4941 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6688+ 4944 CD 7B 2A             call    EVAL            ; Evaluate expression
6689+ 4947 3A 94 81             ld      A,(TYPE)        ; Get variable type
6690+ 494A B7                   or      A               ; Is it a string variable?
6691+ 494B CA 90 49             jp      Z,SAVEST        ; no - load a single sector
6692+ 494E CD D0 4B             call    CHKFN1          ; yes, evaluate string
6693+ 4951 3E 80                ld      A,$80           ; set BAS for file type
6694+ 4953 32 B4 81             ld      (TPBF4),A
6695+ 4956 2B                   dec     HL              ; dec 'cos GETCHR INCs
6696+ 4957 CD D8 25             call    GETCHR          ; check if something follows
6697+ 495A 28 21                jr      Z,SAVE1         ; no, jump over
6698+ 495C CD 8F 23             call    CHKSYN          ; yes - Make sure ',' follows
6699+ 495F 2C                   defb    ','
6700+ 4960 CD 69 2A             call    GETNUM          ; Get memory address
6701+ 4963 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
6702+ 4966 ED 53 B6 81          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6703+ 496A CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6704+ 496D 2C                   defb    ','
6705+ 496E CD 69 2A             call    GETNUM          ; Get memory address
6706+ 4971 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
6707+ 4974 ED 53 B8 81          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6708+ 4978 3E 81                ld      A,$81           ; set BIN for file type
6709+ 497A 32 B4 81             ld      (TPBF4),A
6710+ 497D CD 03 47     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6711+ 4980 C2 A4 20             jp      NZ,IMERR        ; raise error if in indirect mode
6712+ 4983 E5                   push    HL              ; store code string pointer
6713+ 4984 21 BD 49             ld      HL,TXTSVG       ; loading message
6714+ 4987 CD 71 2F             call    PRS             ; print
6715+ 498A CD 0E 14             call    SAVFILE         ; load file into memory
6716+ 498D C3 B8 49             jp      SVEND           ; retrieve registers and leave
6717+ 4990 2A 9D 81     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6718+ 4993 CD FF 48             call    GET3AR          ; get 3 arguments
6719+ 4996 CD B6 18             call    CLRIOBF         ; clear I/O buffer
6720+ 4999 CD 2D 10             call    CF_INIT         ; init CF card
6721+ 499C DA A7 20             jp      C,NRERR         ; error if device not available/ready
6722+ 499F E5                   push    HL              ; store code string pointer
6723+ 49A0 3A 9D 81             ld      A,(TMPDBF)      ; retrieve 1st pointer
6724+ 49A3 4F                   ld      C,A
6725+ 49A4 3A 9E 81             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6726+ 49A7 47                   ld      B,A
6727+ 49A8 3A 9F 81             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6728+ 49AB 5F                   ld      E,A
6729+ 49AC 16 00                ld      D,$00           ; set disk
6730+ 49AE CD 6F 10             call    CF_SETSTR       ; set sector
6731+ 49B1 CD D9 10             call    CF_WR_SEC       ; read sector
6732+ 49B4 CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6733+ 49B7 AF                   xor     A               ; clear Carry
6734+ 49B8 E1           SVEND:  pop     HL              ; retrieve code string pointer
6735+ 49B9 DA E9 49             jp      C,DOS_ERR       ; jump if DOS error
6736+ 49BC C9                   ret                     ; return to caller
6737+ 49BD 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6737+ 49C1 6E 67 20 66
6737+ 49C5 69 6C 65 2E
6737+ 49C9 2E 2E 20 0D
6737+ 49CD 00
6738+ 49CE
6739+ 49CE
6740+ 49CE              ; FILES
6741+ 49CE              ; list files on disk
6742+ 49CE CD 97 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6743+ 49D1 CD B6 18             call    CLRIOBF         ; clear I/O buffer
6744+ 49D4 CD 2D 10             call    CF_INIT         ; init CF card
6745+ 49D7 DA E9 49             jp      C,DOS_ERR       ; error if device not available/ready
6746+ 49DA C5                   push    BC              ; store BC
6747+ 49DB D5                   push    DE              ; store DE
6748+ 49DC E5                   push    HL              ; store HL
6749+ 49DD 16 01                ld      D,$01           ; print disk details and file list
6750+ 49DF CD C7 12             call    LST_FILES       ; list files
6751+ 49E2 E1                   pop     HL
6752+ 49E3 D1                   pop     DE
6753+ 49E4 C1                   pop     BC
6754+ 49E5 DA E9 49             jp      C,DOS_ERR       ; any error?
6755+ 49E8 C9                   ret                     ; return to caller
6756+ 49E9
6757+ 49E9
6758+ 49E9              ; raise a DOS error
6759+ 49E9 3A 9C 81     DOS_ERR:ld      A,(DOSER)       ; load error code
6760+ 49EC 5F                   ld      E,A             ; copy into E
6761+ 49ED C3 A9 20             jp      ERROR           ; goto error routine
6762+ 49F0
6763+ 49F0
6764+ 49F0              ; check for ",1" argument
6765+ 49F0              ; check if 1 is passed as argument after LOAD and ERASE
6766+ 49F0 AF           CHK1AR: xor     A               ; reset A
6767+ 49F1 32 B4 81             ld      (TPBF4),A       ; default setting
6768+ 49F4                                              ; (load=store file in RAM using current BASIC pointers
6769+ 49F4                                              ; (erase=quick delete)
6770+ 49F4 2B                   dec     HL              ; dec 'cause GETCHR increments
6771+ 49F5 CD D8 25             call    GETCHR          ; check if something follows
6772+ 49F8 C8                   ret     Z               ; if nothing follows, return
6773+ 49F9 CD 8F 23             call    CHKSYN          ; Make sure ',' follows
6774+ 49FC 2C                   defb    ','
6775+ 49FD CD EF 32             call    GETINT          ; get a value
6776+ 4A00 3D                   dec     A               ; decrement it
6777+ 4A01 C2 8F 20             jp      NZ,SNERR        ; not '1' - raise an error
6778+ 4A04 3C                   inc     A               ; A=1
6779+ 4A05 32 B4 81             ld      (TPBF4),A       ; load=store file in RAM using address in file
6780+ 4A08                                              ; erase=full delete
6781+ 4A08 C9                   ret                     ; return to caller
6782+ 4A09
6783+ 4A09
6784+ 4A09              ; ERASE "filename"
6785+ 4A09              ; erase a file from disk
6786+ 4A09 CD 97 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6787+ 4A0C CD C6 4B             call    CHKFLNM         ; check for a disk name
6788+ 4A0F CD F0 49             call    CHK1AR          ; check for ",1" argument
6789+ 4A12 E5                   push    HL              ; store code string pointer
6790+ 4A13 21 3A 4A             ld      HL,ERSTX        ; Point to message
6791+ 4A16 CD 71 2F             call    PRS             ; print message for init confirmation
6792+ 4A19 E1                   pop     HL              ; retrieve HL
6793+ 4A1A CD A3 4B             call    CNFREQ          ; ask for confirmation
6794+ 4A1D 38 37                jr      C,ABRTDS        ; if Carry set then abort
6795+ 4A1F CD 2D 10             call    CF_INIT         ; init CF card
6796+ 4A22 DA E9 49             jp      C,DOS_ERR       ; error if device not available/ready
6797+ 4A25 C5                   push    BC
6798+ 4A26 D5                   push    DE
6799+ 4A27 E5                   push    HL              ; store code string pointer
6800+ 4A28 CD 3A 16             call    FIL_ERASE       ; deleted file
6801+ 4A2B E1                   pop     HL
6802+ 4A2C D1                   pop     DE
6803+ 4A2D C1                   pop     BC
6804+ 4A2E DA E9 49             jp      C,DOS_ERR       ; leave if error
6805+ 4A31 E5                   push    HL              ; store HL
6806+ 4A32 21 48 4A             ld      HL,ERASED       ; point to message of file deleted
6807+ 4A35 CD 71 2F             call    PRS             ; print it
6808+ 4A38 E1                   pop     HL              ; retrieve HL
6809+ 4A39 C9                   ret                     ; return to caller
6810+ 4A3A 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6810+ 4A3E 74 65 20 66
6810+ 4A42 69 6C 65 3F
6810+ 4A46 20 00
6811+ 4A48 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6811+ 4A4C 20 64 65 6C
6811+ 4A50 65 74 65 64
6811+ 4A54 0D 00
6812+ 4A56
6813+ 4A56
6814+ 4A56              ; disk operation aborted
6815+ 4A56 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6816+ 4A58 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6817+ 4A5B E5                   push    HL              ; store HL
6818+ 4A5C 21 64 4A             ld      HL,ABRTXT       ; Point to message
6819+ 4A5F CD 71 2F             call    PRS             ; print message for leaving init procedure
6820+ 4A62 E1                   pop     HL              ; retrieve HL
6821+ 4A63 C9                   ret                     ; return to caller
6822+ 4A64 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6822+ 4A68 72 74 65 64
6822+ 4A6C 00
6823+ 4A6D
6824+ 4A6D              ; execute several operations on a disk:
6825+ 4A6D              ; "F": format/rewrite Master Sector
6826+ 4A6D              ; "R": rename disk
6827+ 4A6D              ; syntax: DISK "arg1"[,arg2][,1]
6828+ 4A6D
6829+ 4A6D              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6830+ 4A6D CD 03 47     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6831+ 4A70 C2 A4 20             jp      NZ,IMERR        ; raise error if in indirect mode
6832+ 4A73 CD 97 48             call    CHKDOS          ; check if DOS is enabled
6833+ 4A76                      ; check first argument
6834+ 4A76 2B                   dec     HL              ; dec 'cause GETCHR increments
6835+ 4A77 CD D8 25             call    GETCHR          ; check if something follows
6836+ 4A7A CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6837+ 4A7D CD 7B 2A             call    EVAL            ; Evaluate expression
6838+ 4A80 CD 6D 2A             call    TSTSTR          ; Make sure it's a string
6839+ 4A83 22 9D 81             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6840+ 4A86 CD B4 30             call    GSTRCU          ; check that a string follows
6841+ 4A89 CD C5 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6842+ 4A8C 7B                   ld      A,E
6843+ 4A8D 3D                   dec     A               ; lenght must be = 1
6844+ 4A8E 2A 9D 81             ld      HL,(TPHL)       ; retrieve code string pointer
6845+ 4A91 C2 8F 20             jp      NZ,SNERR
6846+ 4A94 0A                   ld      A,(BC)          ; load command
6847+ 4A95 E6 5F                and     %01011111       ; Force upper case
6848+ 4A97 FE 46                cp      'F'             ; format command?
6849+ 4A99 CA A4 4A             jp      Z,DSKFRM        ; yes, format disk
6850+ 4A9C FE 52                cp      'R'             ; rename command?
6851+ 4A9E CA 71 4B             jp      Z,DSKRNM        ; yes, rename disk
6852+ 4AA1 C3 8F 20             jp      SNERR           ; raise a syntax error
6853+ 4AA4
6854+ 4AA4
6855+ 4AA4              ; Format disk or rewrite Master sector
6856+ 4AA4              ; syntax: DISK "F","disk name"[,1]
6857+ 4AA4              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6858+ 4AA4              ; ",1": just rewrite Master sector without overwriting current directory
6859+ 4AA4              ; Format: set up a fresh new file system, re-writing the Master sector and
6860+ 4AA4              ; initializing the directory
6861+ 4AA4              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6862+ 4AA4              ; re-calculating disk geometry
6863+ 4AA4              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6864+ 4AA4              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6865+ 4AA4 CD 8F 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6866+ 4AA7 2C                   defb    ','
6867+ 4AA8 CD C6 4B             call    CHKFLNM         ; check for file name
6868+ 4AAB CD F0 49             call    CHK1AR          ; check if ",1" follows - saved into A
6869+ 4AAE 11 F6 4A             ld      DE,MSTTXT       ; format message
6870+ 4AB1 B7                   or      A               ; A=0?
6871+ 4AB2 20 03                jr      NZ,CFINIT       ; no, jump over
6872+ 4AB4 11 0E 4B             ld      DE,FRMTXT       ; only Master Sector
6873+ 4AB7 E5           CFINIT: push    HL              ; store code string pointer
6874+ 4AB8 62                   ld      H,D             ; Point to message
6875+ 4AB9 6B                   ld      L,E
6876+ 4ABA CD 71 2F             call    PRS             ; print message for confirmation
6877+ 4ABD E1                   pop     HL              ; retrieve HL
6878+ 4ABE CD A3 4B             call    CNFREQ          ; ask for confirmation
6879+ 4AC1 DA 56 4A             jp      C,ABRTDS        ; if Carry set then abort
6880+ 4AC4 CD 2D 10     INITDSK:call    CF_INIT         ; init CF card
6881+ 4AC7 DA E9 49             jp      C,DOS_ERR       ; error if device not available/ready
6882+ 4ACA C5                   push    BC
6883+ 4ACB D5                   push    DE
6884+ 4ACC E5                   push    HL              ; store code string pointer
6885+ 4ACD CD 11 11             call    DSK_INIT        ; init disk
6886+ 4AD0 E1                   pop     HL
6887+ 4AD1 D1                   pop     DE
6888+ 4AD2 C1                   pop     BC
6889+ 4AD3 30 03                jr      NC,INITFN       ; leave if no errors
6890+ 4AD5 C3 E9 49             jp      DOS_ERR         ; raise error
6891+ 4AD8 E5           INITFN: push    HL              ; store code string pointer
6892+ 4AD9 3A 05 82             ld      A,(TMPBFR1)
6893+ 4ADC B7                   or      A               ; full formatting?
6894+ 4ADD 20 0F                jr      NZ,MSPTOK       ; no
6895+ 4ADF 21 40 4B             ld      HL,FRMTOK       ; yes, Point to message
6896+ 4AE2 CD 71 2F             call    PRS             ; print message for init confirmation
6897+ 4AE5 D5                   push    DE
6898+ 4AE6 16 00                ld      D,$00           ; print only disk details, no file list
6899+ 4AE8 CD C7 12             call    LST_FILES       ; print details of disk and list files
6900+ 4AEB D1                   pop     DE
6901+ 4AEC E1                   pop     HL
6902+ 4AED C9                   ret                     ; return to caller
6903+ 4AEE 21 57 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6904+ 4AF1 CD 71 2F             call    PRS             ; print message for init confirmation
6905+ 4AF4 E1                   pop     HL              ; retrieve code string pointer
6906+ 4AF5 C9                   ret                     ; return to caller
6907+ 4AF6 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6907+ 4AFA 69 74 65 20
6907+ 4AFE 4D 61 73 74
6907+ 4B02 65 72 20 53
6907+ 4B06 65 63 74 6F
6907+ 4B0A 72 3F 20 00
6908+ 4B0E 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6908+ 4B12 49 4E 47 21
6908+ 4B16 21 20 44 69
6908+ 4B1A 73 6B 20 63
6908+ 4B1E 6F 6E 74 65
6908+ 4B22 6E 74 73 20
6908+ 4B26 77 69 6C 6C
6908+ 4B2A 20 62 65 20
6908+ 4B2E 65 72 61 73
6908+ 4B32 65 64 2E 20
6909+ 4B36 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6909+ 4B3A 65 65 64 3F
6909+ 4B3E 20 00
6910+ 4B40 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6910+ 4B44 6D 61 74 74
6910+ 4B48 69 6E 67 20
6910+ 4B4C 63 6F 6D 70
6910+ 4B50 6C 65 74 65
6910+ 4B54 64 0D 00
6911+ 4B57 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6911+ 4B5B 74 65 72 20
6911+ 4B5F 53 65 63 74
6911+ 4B63 6F 72 20 72
6911+ 4B67 65 77 72 69
6911+ 4B6B 74 74 65 6E
6911+ 4B6F 0D 00
6912+ 4B71
6913+ 4B71
6914+ 4B71              ; disk rename
6915+ 4B71 CD 8F 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6916+ 4B74 2C                   defb    ','
6917+ 4B75 CD C6 4B             call    CHKFLNM         ; check for file name
6918+ 4B78 E5                   push    HL              ; store code string pointer
6919+ 4B79 21 95 4B             ld      HL,RNDKTX       ; Point to message
6920+ 4B7C CD 71 2F             call    PRS             ; print message for confirmation
6921+ 4B7F E1                   pop     HL              ; retrieve HL
6922+ 4B80 CD A3 4B             call    CNFREQ          ; ask for confirmation
6923+ 4B83 DA 56 4A             jp      C,ABRTDS        ; if Carry set then abort
6924+ 4B86 CD 2D 10             call    CF_INIT         ; init CF card
6925+ 4B89 DA E9 49             jp      C,DOS_ERR       ; error if device not available/ready
6926+ 4B8C E5                   push    HL              ; store code string pointer
6927+ 4B8D CD 42 12             call    DSK_RNM         ; init disk
6928+ 4B90 E1                   pop     HL
6929+ 4B91 DA E9 49             jp      C,DOS_ERR       ; DOS error
6930+ 4B94 C9                   ret
6931+ 4B95 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6931+ 4B99 6D 65 20 64
6931+ 4B9D 69 73 6B 3F
6931+ 4BA1 20 00
6932+ 4BA3
6933+ 4BA3              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6934+ 4BA3 CD 44 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6935+ 4BA6 AF                   xor     A
6936+ 4BA7 32 01 82             ld      (PRNTVIDEO),A   ; disable print-on-video
6937+ 4BAA CD 2A 02             call    RXA             ; look for a pressed key
6938+ 4BAD FE 03                cp      CTRLC           ; is it RUN STOP?
6939+ 4BAF 28 13                jr      Z,CNFRQN        ; yes, abort operation
6940+ 4BB1 E6 DF                and     %11011111       ; only UPPERCASE char
6941+ 4BB3 FE 59                cp      'Y'             ; 'Y'?
6942+ 4BB5 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6943+ 4BB7 3E 01                ld      A,$01           ; re-enable...
6944+ 4BB9 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6945+ 4BBC CD 1F 03             call    ECHO_CHAR       ; yes, echoes the char
6946+ 4BBF CD 59 09             call    CURSOR_OFF      ; disable cursor
6947+ 4BC2 AF                   xor     A               ; reset Carry flag
6948+ 4BC3 C9                   ret                     ; return to caller
6949+ 4BC4 37           CNFRQN: scf                     ; set Carry flag
6950+ 4BC5 C9                   ret                     ; return to caller
6951+ 4BC6
6952+ 4BC6              ; check that a disk/file name follows
6953+ 4BC6 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6954+ 4BC7 CD D8 25             call    GETCHR          ; check if something follows
6955+ 4BCA CA 8F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6956+ 4BCD CD 7B 2A             call    EVAL            ; Evaluate expression
6957+ 4BD0 CD 6D 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6958+ 4BD3 22 9F 81             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6959+ 4BD6 ED 53 A1 81          ld      (TMPDBF+4),DE   ; store DE
6960+ 4BDA ED 43 A3 81          ld      (TMPDBF+6),BC
6961+ 4BDE CD B4 30             call    GSTRCU          ; get current string into pool
6962+ 4BE1 CD C5 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6963+ 4BE4 7B                   ld      A,E             ; check if lenght = 0
6964+ 4BE5 A7                   and     A               ; null string?
6965+ 4BE6 CA 8F 20             jp      Z,SNERR         ; yes, syntax error
6966+ 4BE9 ED 53 09 82          ld      (DKLNPT),DE     ; no, store lenght
6967+ 4BED ED 43 07 82          ld      (DKNMPT),BC     ; store address of temp string
6968+ 4BF1 2A 9F 81             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6969+ 4BF4 ED 5B A1 81          ld      DE,(TMPDBF+4)   ; retrieve DE
6970+ 4BF8 ED 4B A3 81          ld      BC,(TMPDBF+6)   ; retrieve BC
6971+ 4BFC C9                   ret                     ; return to caller
6972+ 4BFD
6973+ 4BFD
6974+ 4BFD              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6975+ 4BFD CD 6C 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6976+ 4C00 CD 8E 26             call	DEINT           ; Get integer -32768 to 32767
6977+ 4C03 C5                   push	BC              ; Save contents of BC
6978+ 4C04 21 5E 82             ld      HL,PBUFF        ; load address of PBUFF into HL
6979+ 4C07 7A                   ld      A,D             ; Get MSB into A
6980+ 4C08 B7                   or      A               ; OR with LSB to see if param=0
6981+ 4C09 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6982+ 4C0B CD 33 4C             call    BYT2ASC         ; Convert D to ASCII
6983+ 4C0E 78                   ld      A,B             ; cechk if B
6984+ 4C0F FE 30                cp      '0'             ; is 0
6985+ 4C11 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6986+ 4C13 70                   ld      (HL),B          ; Store it to PBUFF
6987+ 4C14 23                   inc     HL              ; Next location
6988+ 4C15 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6989+ 4C16 23                   inc     HL              ; Next location
6990+ 4C17 7B           HEX2:   ld      A,E             ; Get lower byte
6991+ 4C18 CD 33 4C             call    BYT2ASC         ; Convert E to ASCII
6992+ 4C1B 7A                   ld      A,D
6993+ 4C1C B7                   or      A
6994+ 4C1D 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
6995+ 4C1F 78                   ld      A,B
6996+ 4C20 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
6997+ 4C22 28 02                jr      Z,HEX4
6998+ 4C24 70           HEX3:   ld      (HL),B          ; to PBUFF+2
6999+ 4C25 23                   inc     HL              ; Next location
7000+ 4C26 71           HEX4:   ld      (HL),C          ; to PBUFF+3
7001+ 4C27 23                   inc     HL              ; PBUFF+4 to zero
7002+ 4C28 AF                   xor     A               ; Terminating character
7003+ 4C29 77                   ld      (HL),A          ; Store zero to terminate
7004+ 4C2A 23                   inc     HL              ; Make sure PBUFF is terminated
7005+ 4C2B 77                   ld      (HL),A          ; Store the double zero there
7006+ 4C2C C1                   pop     BC              ; Get BC back
7007+ 4C2D 21 5E 82             ld      HL,PBUFF        ; Reset to start of PBUFF
7008+ 4C30 C3 01 2F             jp      STR1            ; Convert the PBUFF to a string and return it
7009+ 4C33 47           BYT2ASC:ld      B,A             ; Save original value
7010+ 4C34 E6 0F                and     $0F             ; Strip off upper nybble
7011+ 4C36 FE 0A                cp      $0A             ; 0-9?
7012+ 4C38 38 02                jr      C,ADD30         ; If A-F, add 7 more
7013+ 4C3A C6 07                add     A,$07           ; Bring value up to ASCII A-F
7014+ 4C3C C6 30        ADD30:  add     A,$30           ; And make ASCII
7015+ 4C3E 4F                   ld      C,A             ; Save converted char to C
7016+ 4C3F 78                   ld      A,B             ; Retrieve original value
7017+ 4C40 0F                   rrca                    ; and Rotate it right
7018+ 4C41 0F                   rrca
7019+ 4C42 0F                   rrca
7020+ 4C43 0F                   rrca
7021+ 4C44 E6 0F                and     $0F             ; Mask off upper nybble
7022+ 4C46 FE 0A                cp      $0A             ; 0-9? < A hex?
7023+ 4C48 38 02                jr      C,ADD301        ; Skip Add 7
7024+ 4C4A C6 07                add     A,$07           ; Bring it up to ASCII A-F
7025+ 4C4C C6 30        ADD301: add     A,$30           ; And make it full ASCII
7026+ 4C4E 47                   ld      B,A             ; Store high order byte
7027+ 4C4F C9                   ret
7028+ 4C50
7029+ 4C50              ; Convert "&Hnnnn" to FPREG
7030+ 4C50              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7031+ 4C50              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7032+ 4C50 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7033+ 4C51 21 00 00             ld      HL,$0000        ; Zero out the value
7034+ 4C54 CD 69 4C             call    GETHEX          ; Check the number for valid hex
7035+ 4C57 DA 89 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7036+ 4C5A 18 05                jr      HEXLP1          ; Convert first character
7037+ 4C5C CD 69 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7038+ 4C5F 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7039+ 4C61 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7040+ 4C62 29                   add     HL,HL
7041+ 4C63 29                   add     HL,HL
7042+ 4C64 29                   add     HL,HL
7043+ 4C65 B5                   or      L               ; Add in D0-D3 into L
7044+ 4C66 6F                   ld      L,A             ; Save new value
7045+ 4C67 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7046+ 4C69
7047+ 4C69 13           GETHEX: inc     DE              ; Next location
7048+ 4C6A 1A                   ld      A,(DE)          ; Load character at pointer
7049+ 4C6B FE 20                cp      SPC
7050+ 4C6D CA 69 4C             jp      Z,GETHEX        ; Skip spaces
7051+ 4C70 D6 30                sub     $30             ; Get absolute value
7052+ 4C72 D8                   ret     C               ; < "0", error
7053+ 4C73 FE 0A                cp      $0A
7054+ 4C75 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7055+ 4C77 D6 07                sub     $07             ; Reduce to A-F
7056+ 4C79 FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7057+ 4C7B D8                   ret     C               ; CY set if was :            ; < = > ? @
7058+ 4C7C FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7059+ 4C7E 3F                   ccf
7060+ 4C7F C9                   ret                     ; CY set if it wasn't valid hex
7061+ 4C80
7062+ 4C80 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7063+ 4C81 7A                   ld      A,D             ; Load DE into AC
7064+ 4C82 4B                   ld      C,E             ; For prep to
7065+ 4C83 E5                   push    HL
7066+ 4C84 CD 52 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7067+ 4C87 E1                   pop     HL
7068+ 4C88 C9                   ret
7069+ 4C89
7070+ 4C89 DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7071+ 4C8B C3 A9 20             jp      ERROR
7072+ 4C8E
7073+ 4C8E              ; BIN$(NN) Convert integer to a 1-16 char binary string
7074+ 4C8E CD 6C 2A     BIN:    call    TSTNUM          ; Verify it's a number
7075+ 4C91 CD 8E 26             call    DEINT           ; Get integer -32768 to 32767
7076+ 4C94 C5           BIN2:   push    BC              ; Save contents of BC
7077+ 4C95 21 5E 82             ld      HL,PBUFF
7078+ 4C98 06 11                ld      B,$11           ; One higher than max char count (16+1)
7079+ 4C9A              ZEROSUP:                        ; Suppress leading zeros
7080+ 4C9A 05                   dec     B               ; Max 16 chars
7081+ 4C9B 78                   ld      A,B
7082+ 4C9C FE 01                cp      $01
7083+ 4C9E 28 08                jr      Z,BITOUT        ; Always output at least one character
7084+ 4CA0 CB 13                rl      E
7085+ 4CA2 CB 12                rl      D
7086+ 4CA4 30 F4                jr      NC,ZEROSUP
7087+ 4CA6 18 04                jr      BITOUT2
7088+ 4CA8 CB 13        BITOUT: rl      E
7089+ 4CAA CB 12                rl      D               ; Top bit now in carry
7090+ 4CAC 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7091+ 4CAE CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7092+ 4CB0 77                   ld      (HL),A
7093+ 4CB1 23                   inc     HL
7094+ 4CB2 05                   dec     B
7095+ 4CB3 20 F3                jr      NZ,BITOUT
7096+ 4CB5 AF                   xor     A               ; Terminating character
7097+ 4CB6 77                   ld      (HL),A          ; Store zero to terminate
7098+ 4CB7 23                   inc     HL              ; Make sure PBUFF is terminated
7099+ 4CB8 77                   ld      (HL),A          ; Store the double zero there
7100+ 4CB9 C1                   pop     BC
7101+ 4CBA 21 5E 82             ld      HL,PBUFF
7102+ 4CBD C3 01 2F             jp      STR1
7103+ 4CC0
7104+ 4CC0              ; Convert "&Bnnnn" to FPREG
7105+ 4CC0              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7106+ 4CC0 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7107+ 4CC1 21 00 00             ld      HL,$0000        ; Zero out the value
7108+ 4CC4 CD DD 4C             call    CHKBIN          ; Check the number for valid bin
7109+ 4CC7 DA EB 4C             jp      C,BINERR        ; First value wasn't bin, HX error
7110+ 4CCA D6 30        BINIT:  sub     '0'
7111+ 4CCC 29                   add     HL,HL           ; Rotate HL left
7112+ 4CCD B5                   or      L
7113+ 4CCE 6F                   ld      L,A
7114+ 4CCF CD DD 4C             call    CHKBIN          ; Get second and addtional characters
7115+ 4CD2 30 F6                jr      NC,BINIT        ; Process if a bin character
7116+ 4CD4 EB                   ex      DE,HL           ; Value into DE, Code string into HL
7117+ 4CD5 7A                   ld      A,D             ; Load DE into AC
7118+ 4CD6 4B                   ld      C,E             ; For prep to
7119+ 4CD7 E5                   push    HL
7120+ 4CD8 CD 52 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7121+ 4CDB E1                   pop     HL
7122+ 4CDC C9                   ret
7123+ 4CDD
7124+ 4CDD              ; Char is in A, NC if char is 0 or 1
7125+ 4CDD 13           CHKBIN: inc     DE
7126+ 4CDE 1A                   ld      A,(DE)
7127+ 4CDF FE 20                cp      SPC
7128+ 4CE1 CA DD 4C             jp      Z,CHKBIN        ; Skip spaces
7129+ 4CE4 FE 30                cp      '0'             ; Set C if < '0'
7130+ 4CE6 D8                   ret     C
7131+ 4CE7 FE 32                cp      '2'
7132+ 4CE9 3F                   ccf                     ; Set C if > '1'
7133+ 4CEA C9                   ret
7134+ 4CEB
7135+ 4CEB 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7136+ 4CED C3 A9 20             jp      ERROR
7137+ 4CF0
7138+ 4CF0
7139+ 4CF0 C3 08 00     MONOUT: jp      $0008           ; output a char
7140+ 4CF3
7141+ 4CF3
7142+ 4CF3 CD 0A 33     RESET:  call    DISNMI          ; disable NMI vector
7143+ 4CF6 3A 47 82             ld      A,(SERIALS_EN)  ; load status of serial lines
7144+ 4CF9 E6 11                and     $11             ; are serial ports open?
7145+ 4CFB C4 01 45             call    NZ,RSTSERS      ; yes, reset serials
7146+ 4CFE 3A 4A 82             ld      A,(DOS_EN)      ; is DOS enabled
7147+ 4D01 A7                   and     A               ; if enabled, A<>0
7148+ 4D02 C4 A5 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7149+ 4D05 F3                   di                      ; disable INTs
7150+ 4D06                  IFDEF LM80C64K
7151+ 4D06 ~                    jp      ROM2RAM         ; Restart
7152+ 4D06                  ELSE
7153+ 4D06 C3 00 00             jp      $0000           ; Restart
7154+ 4D09                  ENDIF
7155+ 4D09
7156+ 4D09
7157+ 4D09 3E 00        INITST: ld      A,$00           ; Clear break flag
7158+ 4D0B 32 A9 80             ld      (BRKFLG),A
7159+ 4D0E C3 7E 1B             jp      SYSINIT
7160+ 4D11
7161+ 4D11
7162+ 4D11 F5           TSTBIT: push    AF              ; Save bit mask
7163+ 4D12 A0                   and     B               ; Get common bits
7164+ 4D13 C1                   pop     BC              ; Restore bit mask
7165+ 4D14 B8                   cp      B               ; Same bit set?
7166+ 4D15 3E 00                ld      A,$00           ; Return 0 in A
7167+ 4D17 C9                   ret
7168+ 4D18
7169+ 4D18 CD 9A 23     OUTNCR: call    OUTC            ; Output character in A
7170+ 4D1B C3 A5 28             jp      PRNTCRLF        ; Output CRLF
7171+ 4D1E
# file closed: ../include/basic/basic-1.05.asm
  87  4D1E
  88  4D1E              ; include utils
  89  4D1E                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4D1E              ; ------------------------------------------------------------------------------
   2+ 4D1E              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4D1E              ; ------------------------------------------------------------------------------
   4+ 4D1E              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4D1E              ; designed by Leonardo Miliani. More info at
   6+ 4D1E              ; www DOT leonardomiliani DOT com
   7+ 4D1E              ;
   8+ 4D1E              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4D1E              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4D1E              ;
  11+ 4D1E              ; * WKT are routines from WikiTI:
  12+ 4D1E              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4D1E              ;
  14+ 4D1E              ; * LAC are routines from Learn@Cemetch
  15+ 4D1E              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4D1E              ;
  17+ 4D1E              ; ------------------------------------------------------------------------------
  18+ 4D1E              ; Code Revision:
  19+ 4D1E              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4D1E              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4D1E              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4D1E              ;                   transform a 32-bit value into ASCII representation
  23+ 4D1E              ;
  24+ 4D1E              ; ------------------------------------------------------------------------------
  25+ 4D1E
  26+ 4D1E              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4D1E              ; values can be both signed or unsigned words
  28+ 4D1E              ; inputs: HL, DE
  29+ 4D1E              ; destroys: A,F,HL
  30+ 4D1E              ;
  31+ 4D1E              ; returns: Z=1 if HL = DE
  32+ 4D1E              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4D1E              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4D1E              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4D1E              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4D1E              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4D1E              ; Source: ALS
  38+ 4D1E
  39+ 4D1E B7           CMP16:  or      A           ; clear CARRY
  40+ 4D1F ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4D21 E0                   ret     PO          ; return if no overflow
  42+ 4D22 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4D23 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4D24 EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4D26 37                   scf                 ; ensure a Non-Zero result
  46+ 4D27 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4D28                                          ; ZERO flag = 0 for sure
  48+ 4D28 C9                   ret                 ; return
  49+ 4D29
  50+ 4D29              ; ----------------------------------------------------------------------
  51+ 4D29
  52+ 4D29              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4D29              ; signed/unsigned product
  54+ 4D29              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4D29              ; destroys: A,F
  56+ 4D29              ; returns: HL (product)
  57+ 4D29              ; Source: ALS
  58+ 4D29
  59+ 4D29              ; initialize partial product, bit count
  60+ 4D29 C5           MUL16:  push    BC
  61+ 4D2A 4D                   ld      C,L         ; BC = multiplier
  62+ 4D2B 44                   ld      B,H
  63+ 4D2C 21 00 00             ld      HL,0        ; product = 0
  64+ 4D2F 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4D31                      ; shift-and-add algorithm
  66+ 4D31                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4D31                      ; shift partial product, multiplier left 1 bit
  68+ 4D31 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4D33 CB 12                rl      D
  70+ 4D35 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4D37 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4D38 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4D39 3D                   dec     A
  74+ 4D3A 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4D3C                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4D3C B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4D3D F2 41 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D40 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D41 C1           EXMUL16:pop     BC
  80+ 4D42 C9                   ret
  81+ 4D43
  82+ 4D43
  83+ 4D43              ; ----------------------------------------------------------------------
  84+ 4D43
  85+ 4D43              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D43              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D43              ; destroys: A,F
  88+ 4D43              ; operation: BC * DE
  89+ 4D43              ; returns: DEHL (product)
  90+ 4D43              ; Source: WKT
  91+ 4D43
  92+ 4D43 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D46 CB 23                sla     E		; optimised 1st iteration
  94+ 4D48 CB 12                rl      D
  95+ 4D4A 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D4C 60                   ld      H,B
  97+ 4D4D 69                   ld      L,C
  98+ 4D4E 3E 0F        MU32_1: ld      A,$0F
  99+ 4D50 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D51 CB 13                rl      E
 101+ 4D53 CB 12                rl      D
 102+ 4D55 30 04                jr      NC,MU32_2
 103+ 4D57 09                   add     HL,BC
 104+ 4D58 30 01                jr      NC,MU32_2
 105+ 4D5A 13                   inc     DE
 106+ 4D5B 3D           MU32_2: dec     A
 107+ 4D5C 20 F2                jr      NZ,MUL_32L
 108+ 4D5E C9                   ret
 109+ 4D5F
 110+ 4D5F              ; ----------------------------------------------------------------------
 111+ 4D5F              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D5F              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D5F              ;
 114+ 4D5F              ; inputs: HL
 115+ 4D5F              ; destroys: A
 116+ 4D5F              ; operation: ABS(HL)
 117+ 4D5F              ; returns: HL with no sign or negated
 118+ 4D5F              ; Source: WKT
 119+ 4D5F
 120+ 4D5F CB 7C        absHL:  bit     7,H
 121+ 4D61 C8                   ret     Z
 122+ 4D62 AF           negHL:  xor     A
 123+ 4D63 95                   sub     L
 124+ 4D64 6F                   ld      L,A
 125+ 4D65 9F                   sbc     A,A
 126+ 4D66 94                   sub     H
 127+ 4D67 67                   ld      H,A
 128+ 4D68 C9                   ret
 129+ 4D69
 130+ 4D69              ; ------------------------------------------------------------------------------
 131+ 4D69
 132+ 4D69              ; 8/8 division
 133+ 4D69              ; INPUT: D (dividend), E (divisor)
 134+ 4D69              ; OPERATION: D/E
 135+ 4D69              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D69 AF           DIV_8_8:    xor     A
 137+ 4D6A C5                       push    BC
 138+ 4D6B 06 08                    ld      B,08h
 139+ 4D6D CB 22        DIV_8_8LOOP:sla     D
 140+ 4D6F 17                       rla
 141+ 4D70 BB                       cp      E
 142+ 4D71 38 02                    jr      C,$+4
 143+ 4D73 93                       sub     E
 144+ 4D74 14                       inc     D
 145+ 4D75 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D77 C1                       pop     BC
 147+ 4D78 C9                       ret
 148+ 4D79
 149+ 4D79              ; ----------------------------------------------------------------------
 150+ 4D79              ; divide a 16-bit number by an 8-bit number
 151+ 4D79              ; (16/8 division)
 152+ 4D79              ;
 153+ 4D79              ; inputs: HL (Dividend), C (divisor)
 154+ 4D79              ; destroys: A, B
 155+ 4D79              ; OPERATION: HL/C
 156+ 4D79              ; returns: HL (quotient), A (remainder)
 157+ 4D79              ; source: WKT
 158+ 4D79
 159+ 4D79 AF           DIV_16_8:   xor     A
 160+ 4D7A 06 10                    ld      B,16
 161+ 4D7C 29           DIV_16_8LP: add     HL,HL
 162+ 4D7D 17                       rla
 163+ 4D7E 38 03                    jr      C,$+5
 164+ 4D80 B9                       cp      C
 165+ 4D81 38 02                    jr      C,$+4
 166+ 4D83 91                       sub     C
 167+ 4D84 2C                       inc     L
 168+ 4D85 10 F5                    djnz    DIV_16_8LP
 169+ 4D87 C9                       ret
 170+ 4D88
 171+ 4D88              ; ----------------------------------------------------------------------
 172+ 4D88              ; divide a 16-bit number by a 16-bit number
 173+ 4D88              ; (16/16 division)
 174+ 4D88              ;
 175+ 4D88              ; inputs: AC (Dividend), DE (divisor)
 176+ 4D88              ; destroys: HL,A,C
 177+ 4D88              ; OPERATION: AC/DE
 178+ 4D88              ; returns: AC (quotient), HL (remainder)
 179+ 4D88              ; source: WKT
 180+ 4D88 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4D8B 06 10                    ld      B, 16
 182+ 4D8D CB 21        DV16_16_LP: sla     C
 183+ 4D8F CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4D91 17                       rla
 185+ 4D92 ED 6A                    adc     HL,HL
 186+ 4D94 ED 52                    sbc     HL,DE
 187+ 4D96 30 02                    jr      NC, $+4
 188+ 4D98 19                       add     HL,DE
 189+ 4D99 0D                       dec     C
 190+ 4D9A 10 F1                    djnz    DV16_16_LP
 191+ 4D9C C9                       ret
 192+ 4D9D
 193+ 4D9D
 194+ 4D9D              ; ----------------------------------------------------------------------
 195+ 4D9D              ; divide a 32-bit number by a 16 bit-number
 196+ 4D9D              ; (32/16 division)
 197+ 4D9D              ;
 198+ 4D9D              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4D9D              ; destroys: HL,IX,BC
 200+ 4D9D              ; OPERATION: ACIX/DE
 201+ 4D9D              ; returns: ACIX (quotient), HL (remainder)
 202+ 4D9D              ; source: WKT
 203+ 4D9D
 204+ 4D9D 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4DA0 06 20                    ld      B,32
 206+ 4DA2 DD 29        DIV_32_16LP:add     IX,IX
 207+ 4DA4 CB 11                    rl      C
 208+ 4DA6 17                       rla
 209+ 4DA7 ED 6A                    adc     HL,HL
 210+ 4DA9 38 08                    jr      C,DIV_32_16OF
 211+ 4DAB ED 52                    sbc     HL,DE
 212+ 4DAD 30 07                    jr      NC,DIV_32_16SB
 213+ 4DAF 19                       add     HL,DE
 214+ 4DB0 10 F0                    djnz    DIV_32_16LP
 215+ 4DB2 C9                       ret
 216+ 4DB3 B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4DB4 ED 52                    sbc     HL,DE
 218+ 4DB6 DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4DB8 10 E8                    djnz    DIV_32_16LP
 220+ 4DBA C9                       ret
 221+ 4DBB
 222+ 4DBB
 223+ 4DBB              ; ----------------------------------------------------------------------
 224+ 4DBB              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4DBB              ;
 226+ 4DBB              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4DBB              ; destroys: AF, BC, DE, HL, IX
 228+ 4DBB              ; outputs: IY (last char in dest. string)
 229+ 4DBB              ; source: MSX Forum
 230+ 4DBB
 231+ 4DBB 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4DBF 0A 00 00 00
 231+ 4DC3 64 00 00 00
 231+ 4DC7 E8 03 00 00
 231+ 4DCB 10 27 00 00
 232+ 4DCF A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4DD3 40 42 0F 00
 232+ 4DD7 80 96 98 00
 232+ 4DDB 00 E1 F5 05
 232+ 4DDF 00 CA 9A 3B
 233+ 4DE3 00 00 00 00  CLCN32Z:    defs    4
 234+ 4DE7
 235+ 4DE7 DD 22 E3 4D  CLCN32:     ld      (CLCN32Z),IX
 236+ 4DEB ED 53 E5 4D              ld      (CLCN32Z+$02),DE
 237+ 4DEF DD 21 DF 4D              ld      IX,CLCN32T+$24
 238+ 4DF3 06 09                    ld      B,$09
 239+ 4DF5 0E 00                    ld      C,$00
 240+ 4DF7 3E 30        CLCN321:    ld      A,"0"
 241+ 4DF9 B7                       or      A
 242+ 4DFA DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4DFD DD 56 01                 ld      D,(IX+$01)
 244+ 4E00 2A E3 4D                 ld      HL,(CLCN32Z)
 245+ 4E03 ED 52                    sbc     HL,DE
 246+ 4E05 22 E3 4D                 ld      (CLCN32Z),HL
 247+ 4E08 DD 5E 02                 ld      E,(IX+$02)
 248+ 4E0B DD 56 03                 ld      D,(IX+$03)
 249+ 4E0E 2A E5 4D                 ld      HL,(CLCN32Z+$02)
 250+ 4E11 ED 52                    sbc     HL,DE
 251+ 4E13 22 E5 4D                 ld      (CLCN32Z+$02),HL
 252+ 4E16 38 04                    jr      C,CLCN325
 253+ 4E18 0C                       inc     C
 254+ 4E19 3C                       inc     A
 255+ 4E1A 18 DE                    jr      CLCN322
 256+ 4E1C DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4E1F DD 56 01                 ld      D,(IX+$01)
 258+ 4E22 2A E3 4D                 ld      HL,(CLCN32Z)
 259+ 4E25 19                       add     HL,DE
 260+ 4E26 22 E3 4D                 ld      (CLCN32Z),HL
 261+ 4E29 DD 5E 02                 ld      E,(IX+$02)
 262+ 4E2C DD 56 03                 ld      D,(IX+$03)
 263+ 4E2F 2A E5 4D                 ld      HL,(CLCN32Z+$02)
 264+ 4E32 ED 5A                    adc     HL,DE
 265+ 4E34 22 E5 4D                 ld      (CLCN32Z+$02),HL
 266+ 4E37 11 FC FF                 ld      DE,-4
 267+ 4E3A DD 19                    add     IX,DE
 268+ 4E3C 0C                       inc     C
 269+ 4E3D 0D                       dec     C
 270+ 4E3E 28 05                    jr      Z,CLCN323
 271+ 4E40 FD 77 00                 ld      (IY+$00),A
 272+ 4E43 FD 23                    inc     IY
 273+ 4E45 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E47 3A E3 4D                 ld      A,(CLCN32Z)
 275+ 4E4A C6 30                    add     "0"
 276+ 4E4C FD 77 00                 ld      (IY+$00),A
 277+ 4E4F FD 36 01 00              ld      (IY+$01),0
 278+ 4E53 C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E54
  91  4E54              ; include the latest version of the font sets
  92  4E54                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E54              ; ------------------------------------------------------------------------------
   2+ 4E54              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E54              ; ------------------------------------------------------------------------------
   4+ 4E54              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E54              ; designed by Leonardo Miliani. More info at
   6+ 4E54              ; www DOT leonardomiliani DOT com
   7+ 4E54              ; ------------------------------------------------------------------------------
   8+ 4E54              ; Code Revision:
   9+ 4E54              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E54              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E54              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E54              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E54              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E54              ; R1.5 - 20200524 - New style for char #252
  15+ 4E54              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E54              ; ------------------------------------------------------------------------------
  17+ 4E54              ;
  18+ 4E54              ;-------------------------------------------------------------------------------
  19+ 4E54              ;
  20+ 4E54              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E54              ;
  22+ 4E54              ;-------------------------------------------------------------------------------
  23+ 4E54              ;
  24+ 4E54              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E54              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E54
  27+ 4E54              CHRST68 equ $
  28+ 4E54 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E58 00 00 00 00
  29+ 4E5C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E60 00 00 00 00
  30+ 4E64 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E68 00 00 00 00
  31+ 4E6C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E70 00 00 00 00
  32+ 4E74 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E78 00 00 00 00
  33+ 4E7C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4E80 00 00 00 00
  34+ 4E84 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4E88 00 00 00 00
  35+ 4E8C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4E90 00 00 00 00
  36+ 4E94 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4E98 00 00 00 00
  37+ 4E9C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4EA0 00 00 00 00
  38+ 4EA4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4EA8 00 00 00 00
  39+ 4EAC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4EB0 00 00 00 00
  40+ 4EB4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4EB8 00 00 00 00
  41+ 4EBC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4EC0 00 00 00 00
  42+ 4EC4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4EC8 00 00 00 00
  43+ 4ECC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4ED0 00 00 00 00
  44+ 4ED4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4ED8 00 00 00 00
  45+ 4EDC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4EE0 00 00 00 00
  46+ 4EE4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4EE8 00 00 00 00
  47+ 4EEC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4EF0 00 00 00 00
  48+ 4EF4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4EF8 00 00 00 00
  49+ 4EFC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4F00 00 00 00 00
  50+ 4F04 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4F08 00 00 00 00
  51+ 4F0C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4F10 00 00 00 00
  52+ 4F14 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4F18 00 00 00 00
  53+ 4F1C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4F20 00 00 00 00
  54+ 4F24 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4F28 00 00 00 00
  55+ 4F2C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4F30 00 00 00 00
  56+ 4F34 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4F38 00 00 00 00
  57+ 4F3C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F40 00 00 00 00
  58+ 4F44 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F48 00 00 00 00
  59+ 4F4C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F50 00 00 00 00
  60+ 4F54 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F58 00 00 00 00
  61+ 4F5C 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F60 20 00 20 00
  62+ 4F64 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F68 00 00 00 00
  63+ 4F6C 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F70 F8 50 50 00
  64+ 4F74 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F78 28 F0 20 00
  65+ 4F7C C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4F80 40 98 18 00
  66+ 4F84 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4F88 A8 90 68 00
  67+ 4F8C 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4F90 00 00 00 00
  68+ 4F94 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4F98 40 20 10 00
  69+ 4F9C 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4FA0 10 20 40 00
  70+ 4FA4 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4FA8 A8 20 00 00
  71+ 4FAC 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4FB0 20 20 00 00
  72+ 4FB4 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4FB8 60 20 40 00
  73+ 4FBC 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4FC0 00 00 00 00
  74+ 4FC4 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4FC8 00 60 60 00
  75+ 4FCC 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4FD0 40 80 00 00
  76+ 4FD4 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4FD8 C8 88 70 00
  77+ 4FDC 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 4FE0 20 20 70 00
  78+ 4FE4 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 4FE8 20 40 F8 00
  79+ 4FEC F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 4FF0 08 88 70 00
  80+ 4FF4 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 4FF8 F8 10 10 00
  81+ 4FFC F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 5000 08 88 70 00
  82+ 5004 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 5008 88 88 70 00
  83+ 500C F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 5010 40 40 40 00
  84+ 5014 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 5018 88 88 70 00
  85+ 501C 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 5020 08 10 60 00
  86+ 5024 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 5028 30 30 00 00
  87+ 502C 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 5030 30 10 20 00
  88+ 5034 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 5038 40 20 10 00
  89+ 503C 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 5040 F8 00 00 00
  90+ 5044 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 5048 10 20 40 00
  91+ 504C 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 5050 20 00 20 00
  92+ 5054 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 5058 A8 A8 70 00
  93+ 505C 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 5060 F8 88 88 00
  94+ 5064 F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 5068 88 88 F0 00
  95+ 506C 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 5070 80 88 70 00
  96+ 5074 E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 5078 88 90 E0 00
  97+ 507C F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 5080 80 80 F8 00
  98+ 5084 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 5088 80 80 80 00
  99+ 508C 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 5090 88 88 78 00
 100+ 5094 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 5098 88 88 88 00
 101+ 509C 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 50A0 20 20 70 00
 102+ 50A4 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 50A8 10 90 60 00
 103+ 50AC 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 50B0 A0 90 88 00
 104+ 50B4 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 50B8 80 80 F8 00
 105+ 50BC 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 50C0 88 88 88 00
 106+ 50C4 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 50C8 88 88 88 00
 107+ 50CC 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 50D0 88 88 70 00
 108+ 50D4 F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 50D8 80 80 80 00
 109+ 50DC 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 50E0 A8 90 68 00
 110+ 50E4 F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 50E8 A0 90 88 00
 111+ 50EC 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 50F0 08 08 F0 00
 112+ 50F4 F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 50F8 20 20 20 00
 113+ 50FC 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 5100 88 88 70 00
 114+ 5104 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 5108 88 50 20 00
 115+ 510C 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 5110 A8 A8 50 00
 116+ 5114 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 5118 50 88 88 00
 117+ 511C 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 5120 20 20 20 00
 118+ 5124 F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 5128 40 80 F8 00
 119+ 512C 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 5130 40 40 70 00
 120+ 5134 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 5138 10 08 00 00
 121+ 513C 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 5140 10 10 70 00
 122+ 5144 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 5148 00 00 00 00
 123+ 514C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 5150 00 00 00 FC
 124+ 5154 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 5158 00 00 00 00
 125+ 515C 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 5160 78 88 78 00
 126+ 5164 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 5168 C8 88 F0 00
 127+ 516C 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 5170 80 88 70 00
 128+ 5174 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 5178 98 88 78 00
 129+ 517C 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 5180 F8 80 70 00
 130+ 5184 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 5188 40 40 40 00
 131+ 518C 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 5190 78 08 70 00
 132+ 5194 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 5198 88 88 88 00
 133+ 519C 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 51A0 20 20 20 00
 134+ 51A4 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 51A8 08 88 70 00
 135+ 51AC 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 51B0 C0 A0 90 00
 136+ 51B4 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 51B8 20 20 70 00
 137+ 51BC 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 51C0 A8 88 88 00
 138+ 51C4 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 51C8 88 88 88 00
 139+ 51CC 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 51D0 88 88 70 00
 140+ 51D4 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 51D8 F0 80 80 00
 141+ 51DC 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 51E0 78 08 08 00
 142+ 51E4 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 51E8 80 80 80 00
 143+ 51EC 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 51F0 70 08 F0 00
 144+ 51F4 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 51F8 40 48 30 00
 145+ 51FC 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 5200 88 98 68 00
 146+ 5204 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 5208 88 50 20 00
 147+ 520C 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 5210 A8 A8 50 00
 148+ 5214 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 5218 20 50 88 00
 149+ 521C 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 5220 68 08 70 00
 150+ 5224 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 5228 20 40 F8 00
 151+ 522C 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 5230 20 20 10 00
 152+ 5234 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 5238 20 20 20 00
 153+ 523C 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 5240 10 10 20 00
 154+ 5244 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 5248 00 00 00 00
 155+ 524C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 5250 00 00 00 00
 156+ 5254 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 5258 B4 84 78 00
 157+ 525C 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 5260 B4 CC 78 00
 158+ 5264 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 5268 FC 78 30 00
 159+ 526C 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 5270 F8 70 20 00
 160+ 5274 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 5278 A8 20 70 00
 161+ 527C 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 5280 A8 20 70 00
 162+ 5284 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 5288 FC 30 30 30
 163+ 528C 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 5290 3C 30 30 30
 164+ 5294 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 5298 F0 30 30 30
 165+ 529C 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 52A0 F0 00 00 00
 166+ 52A4 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 52A8 3C 00 00 00
 167+ 52AC 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 52B0 FC 00 00 00
 168+ 52B4 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 52B8 3C 30 30 30
 169+ 52BC 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 52C0 FC 30 30 30
 170+ 52C4 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 52C8 F0 30 30 30
 171+ 52CC 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 52D0 FC 00 00 00
 172+ 52D4 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 52D8 30 30 30 30
 173+ 52DC 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 52E0 70 60 E0 C0
 174+ 52E4 C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 52E8 38 18 1C 0C
 175+ 52EC CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 52F0 30 78 CC CC
 176+ 52F4 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 52F8 20 20 20 20
 177+ 52FC 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 5300 20 20 20 20
 178+ 5304 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 5308 20 20 20 20
 179+ 530C 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 5310 00 00 00 00
 180+ 5314 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 5318 00 00 00 00
 181+ 531C 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 5320 00 00 00 00
 182+ 5324 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 5328 20 20 20 20
 183+ 532C 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 5330 20 20 20 20
 184+ 5334 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 5338 20 20 20 20
 185+ 533C 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 5340 00 00 00 00
 186+ 5344 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 5348 20 20 20 20
 187+ 534C 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 5350 20 40 40 80
 188+ 5354 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 5358 10 08 08 04
 189+ 535C 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 5360 30 48 48 84
 190+ 5364 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 5368 00 00 FC FC
 191+ 536C 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 5370 FC FC FC FC
 192+ 5374 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 5378 FC FC FC FC
 193+ 537C FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 5380 00 00 00 00
 194+ 5384 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 5388 00 00 00 00
 195+ 538C FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 5390 FC FC 00 00
 196+ 5394 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 5398 80 80 80 80
 197+ 539C E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 53A0 E0 E0 E0 E0
 198+ 53A4 F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 53A8 F8 F8 F8 F8
 199+ 53AC 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 53B0 04 04 04 04
 200+ 53B4 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 53B8 1C 1C 1C 1C
 201+ 53BC 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 53C0 7C 7C 7C 7C
 202+ 53C4 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 53C8 84 84 84 FC
 203+ 53CC 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 53D0 E0 E0 E0 E0
 204+ 53D4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 53D8 1C 1C 1C 1C
 205+ 53DC 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 53E0 00 00 00 00
 206+ 53E4 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 53E8 00 00 00 00
 207+ 53EC E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 53F0 1C 1C 1C 1C
 208+ 53F4 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 53F8 E0 E0 E0 E0
 209+ 53FC 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 5400 78 78 78 78
 210+ 5404 CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 5408 CC CC CC CC
 211+ 540C FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 5410 00 00 FC FC
 212+ 5414 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 5418 FC FC 00 00
 213+ 541C 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 5420 30 30 CC CC
 214+ 5424 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 5428 54 A8 54 A8
 215+ 542C 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 5430 64 30 98 CC
 216+ 5434 CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 5438 CC 64 30 98
 217+ 543C 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 5440 30 98 CC 64
 218+ 5444 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 5448 64 CC 98 30
 219+ 544C 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 5450 20 00 F8 00
 220+ 5454 C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 5458 C0 00 F8 00
 221+ 545C 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 5460 18 00 F8 00
 222+ 5464 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 5468 A0 60 20 00
 223+ 546C 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 5470 00 00 00 00
 224+ 5474 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 5478 70 00 00 00
 225+ 547C 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 5480 00 FC 00 00
 226+ 5484 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 5488 54 A8 00 00
 227+ 548C 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 5490 E0 C0 80 00
 228+ 5494 FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 5498 00 00 00 00
 229+ 549C 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 54A0 1C 0C 04 00
 230+ 54A4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 54A8 00 30 78 FC
 231+ 54AC 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 54B0 20 20 20 00
 232+ 54B4 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 54B8 40 80 00 00
 233+ 54BC 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 54C0 18 10 00 00
 234+ 54C4 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 54C8 24 1C 1C 3C
 235+ 54CC 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 54D0 20 F8 70 20
 236+ 54D4 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 54D8 90 E0 E0 F0
 237+ 54DC 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 54E0 60 20 00 00
 238+ 54E4 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 54E8 08 04 00 00
 239+ 54EC 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 54F0 F0 44 38 00
 240+ 54F4 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 54F8 28 28 28 00
 241+ 54FC 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 5500 1C 20 20 20
 242+ 5504 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 5508 E0 10 10 10
 243+ 550C 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 5510 00 00 00 00
 244+ 5514 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 5518 00 00 00 00
 245+ 551C 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 5520 3C 30 30 30
 246+ 5524 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 5528 F0 30 30 30
 247+ 552C 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 5530 E0 00 00 00
 248+ 5534 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 5538 1C 00 00 00
 249+ 553C 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 5540 48 30 00 00
 250+ 5544 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 5548 78 30 00 00
 251+ 554C 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 5550 FC 78 30 00
 252+ 5554 FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 5558 E0 C0 80 80
 253+ 555C FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 5560 1C 0C 04 04
 254+ 5564 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 5568 1C 3C 7C FC
 255+ 556C 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 5570 E0 F0 F8 FC
 256+ 5574 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 5578 F0 E0 C0 00
 257+ 557C 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 5580 78 CC 00 00
 258+ 5584 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 5588 70 20 70 20
 259+ 558C 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 5590 90 90 60 00
 260+ 5594 F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 5598 84 84 84 FC
 261+ 559C 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 55A0 84 84 84 FC
 262+ 55A4 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 55A8 48 48 48 78
 263+ 55AC FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 55B0 FC B4 B4 FC
 264+ 55B4 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 55B8 D4 D4 00 00
 265+ 55BC 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 55C0 78 48 48 48
 266+ 55C4 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 55C8 B4 84 78 00
 267+ 55CC 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 55D0 A8 80 00 00
 268+ 55D4 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 55D8 A0 88 70 00
 269+ 55DC 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 55E0 84 84 FC 00
 270+ 55E4 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 55E8 F0 F0 F0 00
 271+ 55EC 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 55F0 F0 F0 F0 00
 272+ 55F4 FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 55F8 94 94 84 FC
 273+ 55FC 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 5600 68 70 80 00
 274+ 5604 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 5608 6C 18 08 00
 275+ 560C 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 5610 20 60 E0 40
 276+ 5614 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 5618 E4 68 20 00
 277+ 561C 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 5620 E0 60 20 00
 278+ 5624 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 5628 F8 FC F0 90
 279+ 562C 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 5630 B4 84 78 00
 280+ 5634 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 5638 40 48 B0 00
 281+ 563C 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 5640 48 3C 84 78
 282+ 5644 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 5648 F8 00 20 00
 283+ 564C FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 5650 FC FC FC FC
 284+ 5654                      ; here ends the ASCII table
 285+ 5654
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  5654                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 5654              ; ------------------------------------------------------------------------------
   2+ 5654              ; LM80C - 8x8 CHARSET - R1.8
   3+ 5654              ; ------------------------------------------------------------------------------
   4+ 5654              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5654              ; designed by Leonardo Miliani. More info at
   6+ 5654              ; www DOT leonardomiliani DOT com
   7+ 5654              ; ------------------------------------------------------------------------------
   8+ 5654              ; Code Revision:
   9+ 5654              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 5654              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 5654              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 5654              ; R1.3 - 20191015 - More graphic chars
  13+ 5654              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 5654              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 5654              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 5654              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 5654              ; R1.8 - 20200524 - New style for char #252
  18+ 5654              ; ------------------------------------------------------------------------------
  19+ 5654              ;
  20+ 5654              ;-------------------------------------------------------------------------------
  21+ 5654              ;
  22+ 5654              ;               8 x 8    C  H  A  R  S  E  T
  23+ 5654              ;
  24+ 5654              ;-------------------------------------------------------------------------------
  25+ 5654              ;
  26+ 5654              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 5654
  28+ 5654              CHRST88 equ $
  29+ 5654 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 5658 00 00 00 00
  30+ 565C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 5660 00 00 00 00
  31+ 5664 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 5668 00 00 00 00
  32+ 566C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 5670 00 00 00 00
  33+ 5674 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 5678 00 00 00 00
  34+ 567C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 5680 00 00 00 00
  35+ 5684 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 5688 00 00 00 00
  36+ 568C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 5690 00 00 00 00
  37+ 5694 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 5698 00 00 00 00
  38+ 569C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 56A0 00 00 00 00
  39+ 56A4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 56A8 00 00 00 00
  40+ 56AC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 56B0 00 00 00 00
  41+ 56B4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 56B8 00 00 00 00
  42+ 56BC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 56C0 00 00 00 00
  43+ 56C4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 56C8 00 00 00 00
  44+ 56CC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 56D0 00 00 00 00
  45+ 56D4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 56D8 00 00 00 00
  46+ 56DC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 56E0 00 00 00 00
  47+ 56E4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 56E8 00 00 00 00
  48+ 56EC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 56F0 00 00 00 00
  49+ 56F4 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 56F8 00 00 00 00
  50+ 56FC 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 5700 00 00 00 00
  51+ 5704 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 5708 00 00 00 00
  52+ 570C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 5710 00 00 00 00
  53+ 5714 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 5718 00 00 00 00
  54+ 571C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 5720 00 00 00 00
  55+ 5724 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 5728 00 00 00 00
  56+ 572C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 5730 00 00 00 00
  57+ 5734 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 5738 00 00 00 00
  58+ 573C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 5740 00 00 00 00
  59+ 5744 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 5748 00 00 00 00
  60+ 574C 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 5750 00 00 00 00
  61+ 5754 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 5758 00 00 00 00
  62+ 575C 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 5760 10 00 10 00
  63+ 5764 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 5768 00 00 00 00
  64+ 576C 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 5770 FE 28 28 00
  65+ 5774 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 5778 14 78 10 00
  66+ 577C 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 5780 10 26 46 00
  67+ 5784 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 5788 4A 44 3A 00
  68+ 578C 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 5790 00 00 00 00
  69+ 5794 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 5798 20 10 08 00
  70+ 579C 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 57A0 08 10 20 00
  71+ 57A4 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 57A8 38 54 10 00
  72+ 57AC 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 57B0 10 10 00 00
  73+ 57B4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 57B8 00 18 08 10
  74+ 57BC 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 57C0 00 00 00 00
  75+ 57C4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 57C8 00 18 18 00
  76+ 57CC 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 57D0 10 20 40 00
  77+ 57D4 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 57D8 64 44 38 00
  78+ 57DC 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 57E0 10 10 7C 00
  79+ 57E4 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 57E8 10 20 7C 00
  80+ 57EC 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 57F0 04 44 38 00
  81+ 57F4 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 57F8 7C 08 08 00
  82+ 57FC 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 5800 04 44 38 00
  83+ 5804 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 5808 44 44 38 00
  84+ 580C 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 5810 20 20 20 00
  85+ 5814 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 5818 44 44 38 00
  86+ 581C 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 5820 04 44 38 00
  87+ 5824 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 5828 18 18 00 00
  88+ 582C 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 5830 18 08 10 00
  89+ 5834 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 5838 10 08 04 00
  90+ 583C 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 5840 7E 00 00 00
  91+ 5844 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 5848 08 10 20 00
  92+ 584C 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 5850 10 00 10 00
  93+ 5854 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 5858 B8 80 84 78
  94+ 585C 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 5860 7C 44 44 00
  95+ 5864 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 5868 44 44 78 00
  96+ 586C 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 5870 40 44 38 00
  97+ 5874 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 5878 44 44 78 00
  98+ 587C 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 5880 40 40 7C 00
  99+ 5884 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 5888 40 40 40 00
 100+ 588C 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 5890 5C 44 38 00
 101+ 5894 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 5898 44 44 44 00
 102+ 589C 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 58A0 10 10 38 00
 103+ 58A4 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 58A8 04 44 38 00
 104+ 58AC 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 58B0 48 44 44 00
 105+ 58B4 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 58B8 40 40 7C 00
 106+ 58BC 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 58C0 42 42 42 00
 107+ 58C4 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 58C8 44 44 44 00
 108+ 58CC 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 58D0 44 44 38 00
 109+ 58D4 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 58D8 78 40 40 00
 110+ 58DC 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 58E0 54 48 34 00
 111+ 58E4 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 58E8 78 48 44 00
 112+ 58EC 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 58F0 04 04 78 00
 113+ 58F4 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 58F8 10 10 10 00
 114+ 58FC 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 5900 44 44 38 00
 115+ 5904 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 5908 44 28 10 00
 116+ 590C 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 5910 5A 5A 24 00
 117+ 5914 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 5918 28 44 44 00
 118+ 591C 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 5920 10 10 10 00
 119+ 5924 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 5928 20 40 7C 00
 120+ 592C 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 5930 20 20 38 00
 121+ 5934 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 5938 08 04 02 00
 122+ 593C 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 5940 08 08 38 00
 123+ 5944 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 5948 00 00 00 00
 124+ 594C 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 5950 00 00 7E 00
 125+ 5954 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 5958 00 00 00 00
 126+ 595C 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 5960 3C 44 3C 00
 127+ 5964 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 5968 44 44 78 00
 128+ 596C 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 5970 40 44 38 00
 129+ 5974 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 5978 44 44 3C 00
 130+ 597C 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 5980 7C 40 38 00
 131+ 5984 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 5988 20 20 20 00
 132+ 598C 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 5990 44 3C 04 38
 133+ 5994 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 5998 44 44 44 00
 134+ 599C 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 59A0 10 10 10 00
 135+ 59A4 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 59A8 08 08 48 30
 136+ 59AC 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 59B0 60 50 48 00
 137+ 59B4 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 59B8 10 10 38 00
 138+ 59BC 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 59C0 4A 42 42 00
 139+ 59C4 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 59C8 44 44 44 00
 140+ 59CC 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 59D0 44 44 38 00
 141+ 59D4 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 59D8 44 78 40 40
 142+ 59DC 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 59E0 44 3C 04 04
 143+ 59E4 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 59E8 40 40 40 00
 144+ 59EC 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 59F0 38 04 78 00
 145+ 59F4 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 59F8 20 24 18 00
 146+ 59FC 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 5A00 44 4C 34 00
 147+ 5A04 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 5A08 44 28 10 00
 148+ 5A0C 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 5A10 54 54 28 00
 149+ 5A14 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 5A18 10 28 44 00
 150+ 5A1C 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 5A20 4C 34 04 38
 151+ 5A24 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 5A28 10 20 7C 00
 152+ 5A2C 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 5A30 20 20 18 00
 153+ 5A34 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 5A38 10 10 10 00
 154+ 5A3C 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A40 08 08 30 00
 155+ 5A44 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A48 00 00 00 00
 156+ 5A4C 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A50 00 00 00 00
 157+ 5A54 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A58 A5 99 42 3C
 158+ 5A5C 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A60 DB E7 7E 3C
 159+ 5A64 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A68 7C 38 10 00
 160+ 5A6C 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A70 7C 38 10 00
 161+ 5A74 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A78 54 10 7C 00
 162+ 5A7C 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5A80 D6 10 7C 00
 163+ 5A84 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5A88 FF 18 18 18
 164+ 5A8C 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5A90 1F 18 18 18
 165+ 5A94 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5A98 F8 18 18 18
 166+ 5A9C 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5AA0 F8 00 00 00
 167+ 5AA4 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5AA8 1F 00 00 00
 168+ 5AAC 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5AB0 FF 00 00 00
 169+ 5AB4 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5AB8 1F 18 18 18
 170+ 5ABC 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5AC0 FF 18 18 18
 171+ 5AC4 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5AC8 F8 18 18 18
 172+ 5ACC 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5AD0 FF 00 00 00
 173+ 5AD4 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5AD8 18 18 18 18
 174+ 5ADC 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5AE0 38 70 E0 C0
 175+ 5AE4 C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5AE8 1C 0E 07 03
 176+ 5AEC C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5AF0 3C 7E E7 C3
 177+ 5AF4 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5AF8 10 10 10 10
 178+ 5AFC 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5B00 10 10 10 10
 179+ 5B04 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5B08 10 10 10 10
 180+ 5B0C 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5B10 00 00 00 00
 181+ 5B14 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5B18 00 00 00 00
 182+ 5B1C 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5B20 00 00 00 00
 183+ 5B24 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5B28 10 10 10 10
 184+ 5B2C 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5B30 10 10 10 10
 185+ 5B34 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5B38 10 10 10 10
 186+ 5B3C 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B40 00 00 00 00
 187+ 5B44 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B48 10 10 10 10
 188+ 5B4C 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B50 10 20 40 80
 189+ 5B54 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B58 08 04 02 01
 190+ 5B5C 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B60 18 24 42 81
 191+ 5B64 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B68 00 00 FF FF
 192+ 5B6C 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B70 FF FF FF FF
 193+ 5B74 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B78 FF FF FF FF
 194+ 5B7C FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5B80 00 00 00 00
 195+ 5B84 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5B88 00 00 00 00
 196+ 5B8C FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5B90 FF FF 00 00
 197+ 5B94 C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5B98 C0 C0 C0 C0
 198+ 5B9C F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5BA0 F0 F0 F0 F0
 199+ 5BA4 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5BA8 FC FC FC FC
 200+ 5BAC 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5BB0 03 03 03 03
 201+ 5BB4 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5BB8 0F 0F 0F 0F
 202+ 5BBC 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5BC0 3F 3F 3F 3F
 203+ 5BC4 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5BC8 81 81 81 FF
 204+ 5BCC 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5BD0 F0 F0 F0 F0
 205+ 5BD4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5BD8 0F 0F 0F 0F
 206+ 5BDC 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5BE0 00 00 00 00
 207+ 5BE4 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5BE8 00 00 00 00
 208+ 5BEC F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5BF0 0F 0F 0F 0F
 209+ 5BF4 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5BF8 F0 F0 F0 F0
 210+ 5BFC 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5C00 3C 3C 3C 3C
 211+ 5C04 C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5C08 C3 C3 C3 C3
 212+ 5C0C FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5C10 00 00 FF FF
 213+ 5C14 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5C18 FF FF 00 00
 214+ 5C1C 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5C20 33 33 CC CC
 215+ 5C24 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5C28 55 AA 55 AA
 216+ 5C2C 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5C30 66 33 99 CC
 217+ 5C34 CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5C38 CC 99 33 66
 218+ 5C3C 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C40 33 99 CC 66
 219+ 5C44 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C48 66 CC 99 33
 220+ 5C4C 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C50 10 00 7C 00
 221+ 5C54 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C58 60 00 7E 00
 222+ 5C5C 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C60 06 00 7E 00
 223+ 5C64 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C68 A0 60 20 00
 224+ 5C6C 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C70 00 00 00 00
 225+ 5C74 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C78 70 00 00 00
 226+ 5C7C 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5C80 00 7E 00 00
 227+ 5C84 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5C88 54 A8 00 00
 228+ 5C8C 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5C90 E0 C0 80 00
 229+ 5C94 FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5C98 00 00 00 00
 230+ 5C9C 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5CA0 07 03 01 00
 231+ 5CA4 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5CA8 10 38 7C FE
 232+ 5CAC 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5CB0 10 10 10 00
 233+ 5CB4 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5CB8 20 40 00 00
 234+ 5CBC 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5CC0 0C 08 00 00
 235+ 5CC4 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5CC8 0E 0E 1E 00
 236+ 5CCC 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5CD0 7C 38 10 00
 237+ 5CD4 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5CD8 E0 E0 F0 00
 238+ 5CDC 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5CE0 60 20 00 00
 239+ 5CE4 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5CE8 08 04 00 00
 240+ 5CEC 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5CF0 F0 44 38 00
 241+ 5CF4 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5CF8 28 28 28 00
 242+ 5CFC 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5D00 08 10 10 10
 243+ 5D04 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5D08 20 10 10 10
 244+ 5D0C 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5D10 00 00 00 00
 245+ 5D14 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5D18 00 00 00 00
 246+ 5D1C 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5D20 0F 1C 18 18
 247+ 5D24 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5D28 F0 38 18 18
 248+ 5D2C 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5D30 E0 00 00 00
 249+ 5D34 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5D38 07 00 00 00
 250+ 5D3C 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D40 42 42 3C 00
 251+ 5D44 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D48 7E 7E 3C 00
 252+ 5D4C 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D50 7E 3C 18 00
 253+ 5D54 FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D58 F0 E0 C0 80
 254+ 5D5C FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D60 0F 07 03 01
 255+ 5D64 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D68 1F 3F 7F FF
 256+ 5D6C 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D70 F8 FC FE FF
 257+ 5D74 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D78 78 70 60 00
 258+ 5D7C 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5D80 3C 66 00 00
 259+ 5D84 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5D88 38 10 38 10
 260+ 5D8C 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5D90 44 44 38 00
 261+ 5D94 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5D98 42 42 42 7E
 262+ 5D9C 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5DA0 81 81 81 FF
 263+ 5DA4 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5DA8 54 54 54 7C
 264+ 5DAC FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5DB0 BD AD AD FF
 265+ 5DB4 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5DB8 AC AA EA 00
 266+ 5DBC 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5DC0 7E 66 66 66
 267+ 5DC4 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5DC8 9D 81 42 3C
 268+ 5DCC 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5DD0 A5 A2 00 00
 269+ 5DD4 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5DD8 48 42 42 3C
 270+ 5DDC 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5DE0 99 81 FF 00
 271+ 5DE4 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5DE8 7C 7C 7C 00
 272+ 5DEC 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5DF0 F8 F8 F8 00
 273+ 5DF4 FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5DF8 A5 A5 81 FF
 274+ 5DFC 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5E00 52 24 58 80
 275+ 5E04 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5E08 81 76 0C 04
 276+ 5E0C 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5E10 08 18 38 10
 277+ 5E14 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5E18 F5 F5 31 12
 278+ 5E1C 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5E20 F0 F0 30 10
 279+ 5E24 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5E28 7C 7E 78 48
 280+ 5E2C 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5E30 A1 99 42 3C
 281+ 5E34 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5E38 20 22 5C 00
 282+ 5E3C 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E40 24 1E 42 3C
 283+ 5E44 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E48 7C 00 10 00
 284+ 5E4C FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E50 FF FF FF FF
 285+ 5E54
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E54                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E54              ; ------------------------------------------------------------------------------
   2+ 5E54              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E54              ; ------------------------------------------------------------------------------
   4+ 5E54              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E54              ; designed by Leonardo Miliani. More info at
   6+ 5E54              ; www DOT leonardomiliani DOT com
   7+ 5E54              ; ------------------------------------------------------------------------------
   8+ 5E54              ; Code Revision:
   9+ 5E54              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E54              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E54              ; ------------------------------------------------------------------------------
  12+ 5E54
  13+ 5E54              LOGOFONT:   equ $
  14+ 5E54 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E58 00 00 00 00
  15+ 5E5C FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E60 FF FF FF FF
  16+ 5E64 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E68 00 00 00 00
  17+ 5E6C 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E70 0F 0F 0F 0F
  18+ 5E74 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E78 FF FF FF FF
  19+ 5E7C F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5E80 F0 F0 F0 F0
  20+ 5E84 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5E88 0F 0F 0F 0F
  21+ 5E8C 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5E90 F0 F0 F0 F0
  22+ 5E94 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5E98 00 00 00 00
  23+ 5E9C 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5EA0 00 00 00 00
  24+ 5EA4 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5EA8 FF 07 03 00
  25+ 5EAC 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5EB0 FF E0 C0 00
  26+ 5EB4 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5EB8 19 1F 18 18
  27+ 5EBC 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5EC0 98 F8 18 18
  28+ 5EC4 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5EC8 0F 00 00 00
  29+ 5ECC 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5ED0 1F 1C 18 18
  30+ 5ED4 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5ED8 F8 38 18 18
  31+ 5EDC 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5EE0 F0 00 00 00
  32+ 5EE4 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5EE8 FF 00 00 00
  33+ 5EEC 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5EF0 FF FF FF FF
  34+ 5EF4 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5EF8 FF FF FF FF
  35+ 5EFC FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5F00 F0 F0 F0 F0
  36+ 5F04 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5F08 0F 0F 0F 0F
  37+ 5F0C 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5F10 30 00 00 00
  38+ 5F14
# file closed: ../include/vdp/logo-fonts.asm
  95  5F14
  96  5F14              ; include workspace equates
  97  5F14                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5F14              ; ------------------------------------------------------------------------------
   2+ 5F14              ; LM80C 64K - WORKSPACE EQUATES - R1.0
   3+ 5F14              ; ------------------------------------------------------------------------------
   4+ 5F14              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F14              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F14              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F14              ; kind of warranty: you can use them at your own risk.
   8+ 5F14              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F14              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F14              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F14              ; redistribuite them.
  12+ 5F14              ; https://www.leonardomiliani.com
  13+ 5F14              ;
  14+ 5F14              ; Please support me by visiting the following links:
  15+ 5F14              ; Main project page: https://www.leonardomiliani.com
  16+ 5F14              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F14              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F14              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F14              ; ------------------------------------------------------------------------------
  20+ 5F14
  21+ 5F14              ; set starting of RAM based on computer model
  22+ 5F14                  IFDEF LM80C64K
  23+ 5F14 ~            SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5F14                  ELSE
  25+ 5F14              SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5F14                  ENDIF
  27+ 5F14
  28+ 5F14              ;-------------------------------------------------------------------------------
  29+ 5F14              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5F14              serRdPtr        equ     serInPtr+2
  31+ 5F14              serBufUsed      equ     serRdPtr+2
  32+ 5F14              basicStarted    equ     serBufUsed+1
  33+ 5F14              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5F14              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5F14
  36+ 5F14              ; BASIC WORK SPACE LOCATIONS
  37+ 5F14              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5F14              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5F14              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5F14              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5F14              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5F14              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5F14              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5F14              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5F14              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5F14              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5F14              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5F14              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5F14              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5F14              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5F14              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5F14              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5F14              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5F14              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5F14              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5F14              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5F14              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5F14              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5F14              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5F14              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5F14              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5F14              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5F14              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5F14              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5F14              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5F14              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5F14              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5F14              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5F14              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5F14              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5F14              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5F14              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5F14              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5F14              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5F14              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5F14              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5F14              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5F14              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5F14              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5F14              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5F14              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5F14              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5F14              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5F14              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5F14              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5F14              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5F14              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5F14              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5F14              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5F14              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5F14              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5F14              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5F14              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5F14              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5F14              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5F14              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5F14              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5F14              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5F14              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5F14              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5F14              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5F14              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5F14              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5F14              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5F14              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5F14              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5F14              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5F14              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5F14              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5F14              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5F14              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5F14              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5F14              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5F14              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5F14              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5F14              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5F14              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5F14              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5F14              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5F14              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5F14              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5F14              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5F14              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5F14              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5F14                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5F14              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5F14              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5F14              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5F14              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5F14              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5F14              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5F14              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5F14              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5F14              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5F14              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5F14              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5F14              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5F14                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5F14              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5F14              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5F14              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5F14              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5F14              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5F14                                                      ; from here there are the RAM locations that
 145+ 5F14                                                      ; are saved during SAVE
 146+ 5F14              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5F14              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5F14              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5F14              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5F14              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5F14              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5F14              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5F14              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5F14              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5F14              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5F14              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5F14              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5F14              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5F14
# file closed: ../include/workspace/workspace-r1.1.asm
  98  5F14
  99  5F14              ; END OF ASSEMBLY SOURCE
 100  5F14              ;-------------------------------------------------------------------------------
 101  5F14
# file closed: LM80C-firmware-r3.20.asm

Value    Label
------ - -----------------------------------------------------------
0x823D   CHCSNDDTN
0x823B   CHBSNDDTN
0x80A8   NMIFLG
0x4E45   CLCN323
0x4E1C   CLCN325
0x4DFA   CLCN322
0x4DF7   CLCN321
0x4DE3   CLCN32Z
0x4DBB   CLCN32T
0x4DB6   DIV_32_16SB
0x4DB3   DIV_32_16OF
0x4DA2   DIV_32_16LP
0x4D8D   DV16_16_LP
0x4D7C   DIV_16_8LP
0x4D6D   DIV_8_8LOOP
0x4D5B   MU32_2
0x4D50   MUL_32L
0x4D41   EXMUL16
0x4D38   MLP1
0x4D31   MLP
0x4D11 X TSTBIT
0x4CCA   BINIT
0x4CDD   CHKBIN
0x4CAC   BITOUT2
0x4CA8   BITOUT
0x4C9A   ZEROSUP
0x4C94 X BIN2
0x4C7C   NOSUB7
0x4C80   HEXIT
0x4C5C   HEXLP
0x4C61   HEXLP1
0x4C89   HXERR
0x4C69   GETHEX
0x4C4C   ADD301
0x4C3C   ADD30
0x4C26   HEX4
0x4C24   HEX3
0x4C15   HEX1
0x4C17   HEX2
0x4BC4   CNFRQN
0x4B95   RNDKTX
0x4B57   MSWROK
0x4B40   FRMTOK
0x4AEE   MSPTOK
0x4AD8   INITFN
0x4AC4 X INITDSK
0x4B0E   FRMTXT
0x4AB7   CFINIT
0x4AF6   MSTTXT
0x4B71   DSKRNM
0x4AA4   DSKFRM
0x819D   TPHL
0x4A64   ABRTXT
0x4A48   ERASED
0x4A56   ABRTDS
0x4BA3   CNFREQ
0x4A3A   ERSTX
0x4BC6   CHKFLNM
0x49B8   SVEND
0x49BD   TXTSVG
0x497D   SAVE1
0x4990   SAVEST
0x49E9   DOS_ERR
0x48FF   GET3AR
0x48D2   LDEND
0x48D9   TXTLDG
0x49F0   CHK1AR
0x4BD0   CHKFN1
0x48C2   LOADST
0x48EA   LDSVPT
0x4897   CHKDOS
0x485F   PRTEND
0x4853   PRTK1
0x4850   OPNQT1
0x4838   CLSQT1
0x4894   CHKEY5
0x4820   PTCHR1
0x4891   CHKEY4
0x4828   CLSQT
0x47EB   PRTK3
0x4803   PRTCHR
0x483A   OPNQT
0x47EE   CNTLTK
0x47D9   LDKEY
0x4888   CHKEY2
0x4852   PRTCKEY
0x4883   CHKEY1
0x47C2 X PRTK2
0x47C0   PRTK4
0x47AC   CPKYEND
0x47A4   CPKEY1
0x479C   CPKEY3
0x4795   CPKEY2
0x4785   CPKEY
0x4777   DECLN1
0x4861   SETREP
0x4747   KEYCH
0x47AE   LSTKEYS
0x4725   HLPERR
0x4703   DIRMOD
0x46CA   EXNRM
0x46BC   ENCHB
0x4691   SRLCNT
0x4679   STRPAR
0x465C   SETPAR2
0x464D   BITS8
0x4642   BITS7
0x4651   SETPAR
0x4638   BITS6
0x4615   SET_CTC
0x46E7   CTC_CFG
0x46F2   SCERR1
0x4604   SET_PT
0x45EB   CKBPS
0x46D1   SUP_BPS
0x45DF   SETSER
0x45D2   DEFSER
0x4587   CNTSER3
0x456A   CNTRX2
0x4575   CNTSER2
0x4537   SERLED
0x4531   SRPT2
0x450E   RPTRSSR
0x4501   RSTSERS
0x453B   CNTSER
0x44FD   CHKZSER
0x44EE   SERVAR
0x46F6   SCERR
0x8213   SIOBFR
0x8212   STPBT
0x8211   PARBT
0x8210   DATABT
0x820E   BPS
0x820D   PRTNUM
0x44A8   RPTCVBF
0x4499   RPCLTMB
0x448C   CNTVALY
0x445C   CNTCL7
0x4438   CNTCL6
0x4414   CNTCL5
0x43F2   CNTCL4
0x43CC   CNTCL3
0x43A8   CNTCL2
0x4486   VALIDY
0x4384   CNTCL1
0x4481   VALIDX
0x4355   PLTCRL
0x4346   DLSZ
0x435E   ENDCRL
0x4319   RPTCL1
0x4306   RPTCRL
0x4362   DRWCRL
0x8217   DC
0x8215   YI
0x8213   XI
0x820F   YC
0x820D   XC
0x4295   DXGR
0x42BE   ENDDRAW
0x4265   CNTDRW
0x4249   RPTDRW
0x4246   STRE2
0x4239   ER2
0x4D62   negHL
0x4216   Y1GR
0x41EC   X1GR
0x4D5F   absHL
0x44A0   CLRVDBF
0x4491   CLRTMBF
0x8219   DX
0x8217   SY
0x8215   SX
0x8213   E2
0x8211   ER
0x820F   Y2
0x820D   X2
0x8207   Y1
0x8205   X1
0x4D69   DIV_8_8
0x4156   PXLSET
0x4132   CNTPLT1
0x4152   NOGD
0x415E   XY2HL
0x40CD   PNTEND
0x40D7   CTPOINT
0x4084   PAINT5
0x4053   PAINT3
0x4094   CHECKPY
0x4040   PAINT2
0x4111   CNTPLOT
0x4010   MNPAINT
0x400D   PAINT1
0x400C   PAINT11
0x4093   CHECKPA
0x3FFE   PAINT0
0x408B   EXITPAI
0x3FF1   NXTLOOP
0x408F   EXITPA2
0x40EB   PNTRTN
0x44AF   CLRPRM
0x8211   ORGSP
0x8210 X SPB
0x820F X SPA
0x820D   PNT
0x3F83   GPCPCH1
0x3F78 X GPCPCHR
0x3F5E   GPNTCO1
0x3F54 X GPNTCOL
0x3F49   RPGPNT
0x3F34   GPNT
0x3F1F   CNTGPT2
0x3FA0   CKCOL
0x8213   TMPHL
0x8211   NUMCHR
0x820F   CHRPNT
0x820D   TMPADR
0x8205   MIXCOL
0x8207   TMPCLR
0x820B   GY
0x8209   GX
0x44C8   GMERR
0x3EB9   CHKG2M
0x3EB3   CHKCLR0
0x3E7E   RPTLDCL
0x3E74   LOADCLR
0x3E89   SETBRCL
0x3EA2   MIXCLRS
0x3E6D   CLREX2
0x3E64   CLRG2
0x3E5B   CLRG1
0x3E51   CLRTXT
0x3E54   CLRMC
0x3EAF   CHKCLR1
0x3DA9   CKMAGN
0x3DF6   CHKSCAR
0x3D9E X SETVDP
0x3DB7   SCVDP
0x3D7A   RPTPS
0x3D75 X DIR_PAU
0x3D4F X RECWRD
0x3D2B X ARET
0x3D06   ATNTAB
0x3CFC   ATN1
0x3CB5   SINTAB
0x3C99   SIN1
0x3CB1   QUARTR
0x3CAD   HALFPI
0x3C46   RND2
0x3C2A   RND1
0x3C57   RNDTAB
0x809B   LSTRND
0x3C4F   RESEED
0x8078   SEED
0x3BD6   SUMLP
0x3BCD   SMSER1
0x3B9D   EXPTAB
0x3B45   POWER2
0x3B28   POWER1
0x3B0A   NEGAFT
0x3AD5   EXPTEN
0x3AE2   NOENED
0x3AB7   SUPTLZ
0x3AC3   DOEBIT
0x3A92   TRYAGN
0x3A83   DIGTXT
0x3AF8   POWERS
0x3A72   MAKNUM
0x3A4D   GTSIXD
0x3A56   INRNG
0x3A38   SIXDIG
0x3AE5   RNGTST
0x3ADF   JSTZER
0x3A29   SPCFST
0x825E   PBUFF
0x39D3   MULTEN
0x39C8   ENDCON
0x39D2   SCALPL
0x39BC   SCALMI
0x39FC   EDIGIT
0x39A7   EXPLP
0x39B9   CONEXP
0x39B5   DPOINT
0x39DA   ADDIG
0x3991   MANLP
0x3989   CNVNUM
0x396A   MLDBLP
0x3942   DCBCDE
0x390B   CMPFP
0x38D3   DETHLB
0x38CC   INCHL
0x387F   RETREL
0x385F   MLSP10
0x3852   OVTST1
0x3857   OVTST2
0x3858   OVTST3
0x3804   RESDIV
0x806A   DIVSUP
0x37F1   DIVLP
0x8076   DIV4
0x806B   DIV1
0x806F   DIV2
0x8073   DIV3
0x37BE   DIV10
0x3756   NOMADD
0x3745   MUL8LP
0x3768   BYTSFT
0x373C   MULT8
0x826B   MULVAL
0x3834   ADDEXP
0x371A   FPMULT
0x3711   MULLN2
0x39F1   RSCALE
0x3BBE   SUMSER
0x37CC   DVBCDE
0x36CC   LOGTAB
0x36C8   UNITY
0x36B6   SHRLP
0x36B3   SHRITE
0x36A6   SCALLP
0x825D   SGNRES
0x3677   FPROND
0x3666   RONDB
0x364A   NORMAL
0x3646   SAVEXP
0x3652   PNORM
0x362D   CONPOS
0x36BA   SHRT1
0x3665   RONDUP
0x3684   PLUCDE
0x361F   MINCDE
0x36A4   SCALE
0x38DC   SIGNS
0x35F9   NOSWAP
0x35DC   SUBCDE
0x35D6   SUBPHL
0x35DF   FPADD
0x3AF4   HALF
0x35CD   ROUND
0x35CA X ENDINK2
0x35AF   CHKINK
0x35AB   SRTINK
0x35C1   ENDINK
0x3597   INKEY2
0x3588   CMP_A
0x3536   NOS3
0x351D   NOS2
0x350A   NOS1
0x34DA   SNDOVR
0x352D   WRTSND
0x34A5   SND1
0x3437   RPVOLCG
0x3443   VOLCH
0x339C   PKEPRMS
0x3386   SYSRET
0x3378   NOSYSPR
0x333A   NMIINT
0x3346   NMIVR1
0x3330   NMIEINT
0x332C   NMI2
0x3337   NMIDINT
0x330A   DISNMI
0x331B   NM1
0x8068   OTPORT
0x32D3   WAITLP
0x32D2   NOXOR
0x8067   OUTSUB
0x32DC   SETIO
0x809F   INPSUB
0x80A0   INPORT
0x329B   VAL2
0x329E   VAL3
0x3291   VAL1
0x3645   RESZER
0x325C   RSTSTR
0x32A7   MIDNUM
0x3228   LVINSTR
0x3232   CNTZIN
0x31D2   RP2INST
0x31FB   CNT1INS
0x31AB   RPTINST
0x321D   RZINSTR
0x821B   DY
0x319A   EMPTINS
0x8215   TF
0x8213   TP
0x8211   PT2
0x820D   PT
0x820B   ADRS2
0x8209   LNS2
0x8207   ADRS1
0x8205   LNS1
0x3121   ALLFOL
0x3119   MID1
0x4CEB   BINERR
0x3117   RIGHT1
0x32A2   LFRGNM
0x32F2   MAKINT
0x30F6 X GTFLNM
0x30E7   GETLEN
0x30D0   POPHL
0x30B1   GETSTR
0x30A8   TSALP
0x309E   SSTSA
0x30B7   GSTRHL
0x300B   GRBARY
0x3042   SCNEND
0x2FEB   GNXARY
0x301C   STRADD
0x2FEC   ARRLP
0x2FD6   SMPVAR
0x3019   STPOOL
0x2FC5   GRBLP
0x2FB7   GARBLP
0x2FA8   TESTOS
0x2F8C   GRBDON
0x2F7B   PRSLP
0x2F70   PRNUMS
0x2F51   TSTOPL
0x2F45   CRTSTE
0x2F36   QTSTLP
0x2F20   MKTMST
0x30A7   TOSTRA
0x2F23   CRTMST
0x2F8A   TESTR
0x310F   TOPOOL
0x2F01   STR1
0x2F29   SVSTAD
0x2EEA   CHEKFN
0x2E62   PASSA
0x388D   RETINT
0x2FB4   GARBGE
0x2E4D   FRENUM
0x2E2C   ENDTMR
0x2DF8   FNDELP
0x2E17   ENDDIM
0x2DD6   ZERARY
0x3962   MLDEBC
0x2DB8   DEFSIZ
0x2DB0   CRARLP
0x2D90   BSERR
0x2DF3   FINDEL
0x2D77   NXTARY
0x2D95   CREARY
0x2D63   FNDARY
0x2D3B   SCPTLP
0x2D19   ZEROLP
0x2D2A   RETNUL
0x2D27   RETADR
0x2CE8   FNTHR
0x2CF3   CFEVAL
0x2CDA   FNDVAR
0x3766   POPHRT
0x8255   FNARG
0x2D35   SBSCPT
0x2CC0   NSCFOR
0x2D5D   ARLDSV
0x2CB0   NOTSTR
0x2C95   ENDNAM
0x2CA1   CHARTY
0x2C94   SVNAM2
0x2C7D   GTFNAM
0x8193   LCRFLG
0x2C6A   DIMRET
0x3888   FLGREL
0x3881   FLGDIF
0x2C31   CMPSTR
0x30B8   GSTRDE
0x30B4   GSTRCU
0x2C49   CMPRES
0x2C07   CMPLG1
0x2C05   CMPLOG
0x2BEE   PXOR1
0x2BE1 X PAND1
0x2BE6   POR1
0x2E52   ACPASS
0x38B7   FPBCDE
0x2BC6   CNTLGC
0x2BAC   SGNEXP
0x2BA3   GOFUNC
0x2B9B   FNVAL
0x2B5C   FRMEVL
0x2B54   RETNUM
0x389F   INVSGN
0x2B40   EVLPAR
0x2B6A   FNOFST
0x2E94   DOFN
0x2C53   EVNOT
0x2B48   MINUS
0x4CC0   BINTFP
0x4C50   HEXTFP
0x2B1D   NOTAMP
0x2B59   CONVAR
0x38A7   STAKFP
0x2ADB   STKTHS
0x3067   CONCAT
0x2BF3   TSTRED
0x81D4   CUROPR
0x2AB3   FOPRND
0x2A97   RLTLP
0x2A8A   EVAL3
0x81DF   NXTOPR
0x2A87   EVAL2
0x2AF2   OPRND
0x2A7E   EVAL1
0x2A77   OPNPAR
0x2A6D   TSTSTR
0x2A59   KILFOR
0x38C5   LOADFP
0x35D0   ADDPHL
0x38B4   PHLTFP
0x2A21   NEXT1
0x2A13   FANDT
0x29EA   EXTIG
0x29CF   MORDT
0x397D   ASCTFP
0x29C3   LTSTND
0x2F33   DTSTR
0x29A9   ITMSEP
0x29AC   STRENT
0x29B8   INPBIN
0x29FA   FDTLP
0x298E   ANTVLU
0x2962   NEDMOR
0x2966   GTVLUS
0x295A   NXTITM
0x2935   NOPMPT
0x2EDC   IDTEST
0x81DC   READFG
0x290A   BADINP
0x28F8   REDO
0x28E9   SPCLP
0x28E2   DOSPC
0x32EC   FNDNUM
0x28C2   ZONELP
0x28AF   CNTEND
0x2F74   PRS1
0x2F2F   CRTST
0x3A1B   NUMASC
0x288C   PRNTST
0x28F1   NEXITM
0x28B4   DOCOM
0x28CD   DOTAB
0x2845   PRNTLP
0x283E   MRPRNT
0x2827   IF0
0x2830   IF1
0x281E   IFGO
0x2802   ONGOLP
0x2801   ONGO
0x32EF   GETINT
0x38CE   FPTHL
0x38D1   DETHL4
0x2F0B   SAVSTR
0x30D2   BAKTMP
0x81CE   TMPSTR
0x27E2   MVSTPT
0x27DA   CRESTR
0x8259   FPREG
0x27B3   LETSTR
0x27EB   LETNUM
0x2A6E   CHKTYP
0x2A7B   EVAL
0x8194   TYPE
0x2C78   GETVAR
0x278A   NXTSTT
0x2787   NXTSTL
0x2780   NXTDTA
0x277B   RETLIN
0x273D   RUNLIN
0x26F6   STORED
0x26AC   GTLNLP
0x26A9   GETLN
0x38F1   CMPNUM
0x391E   FPINT
0x825C   FPEXP
0x2688   DEPINT
0x2685 X POSINT
0x34E0   NOISUP
0x2682   FPSINT
0x267A   CHKLTR
0x80A6   CHKSUM
0x266D X ACCSUM
0x264E   ERRINT
0x81E1   ERRLIN
0x263D   NOLIN
0x2627   INPBRK
0x80A9   BRKFLG
0x2611   STALL
0x261B   BRK
0x8251   NXTDAT
0x25FE   UPDATA
0x25FD   RESTNL
0x25C0   ONJMP
0x25BF   IFJMP
0x262A   ENDPRG
0x2598   RUNCNT
0x2594   PUTFID
0x3876   TSTSGN
0x258B   SAVSTP
0x38C2   BCDEFP
0x2A69   GETNUM
0x2A6C   TSTNUM
0x254F   FORFND
0x2533   FORSLP
0x81D6   LOOPST
0x2518   CNTWTSP
0x250C   WTSPC
0x2504   LVSRLN
0x24F9   SRCLN1
0x24D6   OUTWRD
0x24E4   NXTLN
0x24BD   LSTLP3
0x24BA   LSTLP2
0x24AE   LST07
0x24AB   LST08
0x4072   PAINT4
0x2480   LST02
0x247D   LST05
0x2440   LST06
0x2469   LST03
0x2444   LSTNOT
0x2425   LST01H
0x2489   LISTLP
0x24F8   SRCLN
0x24F2   SRCHLIN
0x2422   LST01
0x2451   LSTALL
0x3D2C   GETINP
0x4CF0   MONOUT
0x23CD   SND2VID
0x23BA   INCLEN
0x8192   CURPOS
0x80A2   LWIDTH
0x23BE   DINPOS
0x2FA6   POPAF
0x238F   CHKSYN
0x2380   OUTIT
0x2383   OUTNBS
0x4D18   OUTNCR
0x236C   PUTBUF
0x289B   ENDINP
0x2366   GMNCR
0x2371   PUTCTL
0x2331   PROCES
0x23DB   CLOTST
0x2309   KILIN
0x22FE   DELCHR
0x2318   MORINP
0x2306   OTKLN
0x22F2   ECHDEL
0x80A4   NULFLG
0x22DE   DODEL
0x22C5   NXTCHR
0x22BF   TSTREM
0x22BC   SETLIT
0x229E   NOCHNG
0x2295   NOSPC
0x22A6   MATCH
0x2284   NXTBYT
0x2274   GETNXT
0x2272   SEARCH
0x22AA   RETNAD
0x2259   FNDWRD
0x22D5   ENDBUF
0x22CE   CPYLIT
0x22AE   MOVDIR
0x222F   CRNCLP
0x8195   DATFLG
0x80AA   RINPUT
0x220A   DOAGN
0x8253   FNRGNM
0x81DA   FORFLG
0x81E3   CONTAD
0x81C0   TMSTPT
0x81C2   TMSTPL
0x824D   VAREND
0x81D2   STRBOT
0x81DD   BRKLIN
0x21DB   INTVAR
0x21AE   SRCHLP
0x8135   BASTXT
0x219F   FNDEND
0x2193   PTRLP
0x21D7   RUNFST
0x2186   MOVBUF
0x218E   SETPTR
0x2158   SFTPRG
0x2167   INEWLN
0x2757   ULERR
0x2150   LINFND
0x21AB   SRCHLN
0x81DB   LSTBIN
0x25B8   EXCUTE
0x2226   CRUNCH
0x230F   GETLIN
0x20FC   GETCMD
0x20EE   POPNOK
0x3A08   LINEIN
0x80B1   HLPLN
0x20EA   PTLN
0x20CD   ERRIN
0x2893   STTLIN
0x80A5   CTLOFG
0x20A7   NRERR
0x20A4   IMERR
0x20A1   TMERR
0x209E   OVERR
0x209B   UFERR
0x2098   DDERR
0x2095   NFERR
0x2092   DZERR
0x81D8   DATLIN
0x2089   DATSNR
0x2087   LDG1ND
0x2076   LDG1
0x2069   EXITGM
0x20A9   ERROR
0x2064   OMERR
0x824F   ARREND
0x204C   CHKSTK
0x2041   MOVLP
0x203E   MOVSTR
0x2055   ENFMEM
0x203B   MOVUP
0x2032   INDFND
0x201C   LOKFOR
0x2018   BAKSTK
0x2012   BRKMSG
0x200D   OKMSG
0x200C   ZERBYT
0x2008   INMSG
0x2001   ERRMSG
0x1F7F X DEFFNKS
0x1F7D   AUTORP
0x230F   TTYLIN
0x26A3   FCERR
0x2BBF   POR
0x2BC4   PXOR
0x2BBC   PAND
0x3630   BNORM
0x3B18   POWER
0x376D   DINT
0x3775   MOD
0x37CA   DIV
0x3718   MULT
0x35DA   PSUB
0x39F7   PADD
0x1F0A   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x21CB   NEW
0x4937   SAVE
0x48A1   LOAD
0x26CD   CLEAR
0x23F6   LIST
0x2654   CONT
0x2842   PRINT
0x4CF3   RESET
0x335A   SYS
0x3D42   WIDTH
0x3EC2   GPRINT
0x3300   NMI
0x472A   KEY
0x3D2E   CLS
0x470C   HELP
0x44CD   SERIAL
0x3FB3   PAINT
0x42C2   CIRCLE
0x4189   DRAW
0x40F6   PLOT
0x3E06   COLOR
0x3D6C   PAUSE
0x3415   VOLUME
0x344E   SOUND
0x33C2   LOCATE
0x3542   VREG
0x33F4   SREG
0x33B7   VPOKE
0x3D55   DOKE
0x33B2   POKE
0x2E67   DEF
0x32BE   WAIT
0x4A6D   DISK
0x4A09   ERASE
0x49CE   FILES
0x27F2   ON
0x32B8   POUT
0x2620   STOP
0x2783   REM
0x275C   RETURN
0x272D   GOSUB
0x25E8   RESTOR
0x2810   IF
0x2719   RUN
0x273E   GOTO
0x2798   LET
0x2955   READ
0x2C73   DIM
0x291B   INPUT
0x2781   DATA
0x2A1E   NEXT
0x251F   FOR
0x2622   PEND
0x1E9C   WORDTB
0x1D0B   WORDS
0x3243   MID
0x3239   RIGHT
0x3113   LEFT
0x4C8E   BIN
0x4BFD   HEX
0x3103   CHR
0x30F2   ASC
0x3273   VAL
0x2EFB   STR
0x4571   RXEND
0x30E3   LEN
0x3143   INSTR
0x40A3   POINT
0x357D   INKEY
0x3569   SSTAT
0x355E   VSTAT
0x338F   VPEEK
0x3D4A   DEEK
0x3388   PEEK
0x3CDF   ATN
0x3CCA   TAN
0x3D8B   SCREEN
0x3C69   SIN
0x3C63   COS
0x3B5D   EXP
0x36D9   LOG
0x3BEE   RND
0x3B0F   SQR
0x2E5F   POS
0x32AC   INP
0x2E31   FRE
0x820F   PT1
0x8064   USR
0x389B   ABS_
0x3949   INT
0x2E1B   TMR
0x3885   SGN
0x1CC7   FNCTAB
0x20EF   PRNTOK
0x4737   RESFN
0x1C3B   BRKRET
0x813D   STACK
0x1C50   BFREE
0x3A10   PRNTHL
0x1C47   BLNSPC
0x1C9F   DOSMSG
0x1C28   SETTP1
0x21CC   CLRPTR
0x80AD   STRSPC
0x8196   LSTRAM
0x1BF8   NODOS
0x2389   CPDEHL
0x208F   SNERR
0x26A8   ATOH
0x1BD3   SETTOP
0x1BAF   MLOOP
0x82D2   STLOOK
0x1BC1   TSTMEM
0x25D8   GETCHR
0x220E   PROMPT
0x1CBC   MEMMSG
0x1B99   MSIZE
0x1BAC   MNOASK
0x345C   CTSNDC
0x826E   PROGST
0x28A5   PRNTCRLF
0x21F1   CLREG
0x24CC   FNDTOK
0x2001   INITBE
0x1F28   INITAB
0x1B7E   SYSINIT
0x805E   WRKSPC
0x2E53   ABPASS
0x2888   PRNTNB
0x268E   DEINT
0x1B77   CSTART
0x1C38   WARMST
0x1B70   STARTB
0x1921 X ERRORS
0x1B5B   D8MSG
0x191F X D8PTR
0x1B4F   D7MSG
0x191D X D7PRT
0x1B3B   D6MSG
0x191B X D6PTR
0x1B31   D5MSG
0x1919 X D5PTR
0x1B2C   D4MSG
0x1917 X D4PTR
0x1B27   D3MSG
0x3978   NOMLAD
0x1915 X D3PRT
0x1B19   D2MSG
0x1913 X D2PRT
0x1B0D   D1MSG
0x1911 X D1PRT
0x1AFD   D0MSG
0x190F X D0PTR
0x1AEC   NRMSG
0x190D X NRPRT
0x1AD6   IMMSG
0x190B X IMPRT
0x1ACC   HPMSG
0x1909 X HPPTR
0x1AB6   SOMSG
0x1A9D   SAMSG
0x1905 X SAPTR
0x1A88   SCMSG
0x1903 X SCPTR
0x1901 X GMPRT
0x1A6C   BNMSG
0x18FF X BNPTR
0x1A61   HXMSG
0x18FD X HXPTR
0x1A51   MOMSG
0x18FB X MOPTR
0x18F9 X UFPTR
0x1A2C   CNMSG
0x18F7 X CNPTR
0x1A11   STMSG
0x18F5 X STPTR
0x1907 X SOPTR
0x1A01   LSMSG
0x18F3 X LSPTR
0x19ED   OSMSG
0x4D4E   MU32_1
0x18F1 X OSPTR
0x19DE   TMMSG
0x18EF X TMPTR
0x19CA   IDMSG
0x18ED X IDPTR
0x19B9   DZMSG
0x18EB X DZPTR
0x19A4   DDMSG
0x18E9 X DDPTR
0x1996   BSMSG
0x18E7 X BSPTR
0x1987   ULMSG
0x488B   CHKEY3
0x18E5 X ULPTR
0x1979   OMMSG
0x18E3 X OMPTR
0x1970   OVMSG
0x18E1 X OVPTR
0x195A   FCMSG
0x18DF X FCPTR
0x194E   ODMSG
0x18DD X ODPTR
0x1939   RGMSG
0x18DB X RGPTR
0x1932   SNMSG
0x18D9 X SNPTR
0x1921   NFMSG
0x18D7 X NFPTR
0x18D7   ERRTBL
0x003E X D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x28E7   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x18C0   RSTIOBF
0x18BF   CLRBUFF
0x18B5 X CHK_NAM_LV
0x18B4   CHK_C_CF
0x1A3B   UFMSG
0x4C33   BYT2ASC
0x187B   PRN_WHEX1
0x1879 X PRN_WHEX
0x1890   BYTEHEX
0x1870   PRN_HEX1
0x186F X PRN_HEX
0x1866   PRNTSIZ
0x4DE7   CLCN32
0x1841   CHKNMVAL3
0x1831   CHKNMVAL2
0x8138   BUFFER
0x182B   CHKNMVAL1
0x181C   CHKDSKVAL2
0x181B   CHKDSKVALE
0x1806   CHKDSKVAL1
0x17E5   CH0TO9E
0x17DD   CH0TO9
0x17CC   RND8
0x17AB   DOS_LDNAM3
0x17AF   DOS_LDNAM4
0x18A0   CHK_NAM
0x1799   DOS_LDNAM2
0x8207   DKNMPT
0x1791   DOS_LDNAM1
0x8209   DKLNPT
0x1771   FNDFREDIR5
0x177D   FNDFREDIR3
0x1752   FNDFREDIR2
0x1748   FNDFREDIR1
0x1721   CHKSTNM7
0x171B X CHKSTNM5
0x1724   FLNTEXS
0x1726   FLEXST
0x16FB   CHKSTNM6
0x16F1   CHKSTNM3
0x1706   CHKSTNM10
0x16D2   CHKSTNM8
0x16CC X CHKSTNM2
0x16C6   CHKSTNM1
0x16B4   FIL_ERA2
0x16A8   FIL_ERA1
0x16B7   FIL_ERA3
0x163A   FIL_ERASE
0x162E   LDFL5
0x1635   LDFLEX
0x15F7   LDFL3
0x15D7   LDFL2
0x15D3   LDFL1
0x15B7   LDFL4
0x1572   LODFILE
0x1566   SAVFL12
0x1541 X SAVFL11
0x156D   SAVFLEXT
0x1521   SAVFL4
0x150F   SAVFL10
0x14F3   SAVFL2
0x14CB   SAVFL9
0x1848   DE2HL
0x1482 X SAVFL7
0x147E   SAVFL6
0x4D88   DIV_16_16
0x146B   SAVFL1
0x824B   PROGND
0x1463   SAVFL3
0x1728   FNDFREDIR
0x16BC   FILE_EXIST
0x1820   CHKNMVAL
0x184D   HL2DE
0x140E   SAVFILE
0x13FA X EXITFLS
0x1856   PRN16ASCII
0x4D43   MUL_U32
0x1852   PRN32ASCII
0x13AB   LSTFILES7
0x1392 X LSTFILES5
0x2506   TSTSPC
0x2603   TSTBRK
0x1379 X LSTFILES8
0x185C   PRN16ASCIX
0x1358   LSTFILES21
0x135B   LSTFILESPR
0x13FF   FILETP
0x1350   LSTFILES20
0x1334   LSTFILES3
0x1321   LSTFILES4
0x131B X LSTFILES2
0x1315   LSTFILES1
0x13BB   PNTSTATS
0x12E9   INPR1
0x2F71   PRS
0x17E8   CHKDSKVAL
0x12C7   LST_FILES
0x12BD   TLFLSTX
0x12AC   ALFLSTXT
0x12A1   TLSCTTX
0x1295   DSKNMTX
0x819C   DOSER
0x0046   D7
0x1286   DOSVERSERR
0x0040   D4
0x1282   LODERR
0x0048   D8
0x127E   FLNTFND
0x003A   D1
0x127A   NAMERR
0x0044   D6
0x1276   DUPLERR
0x0042   D5
0x1272   DSKFULL
0x128D   RET_ERR
0x003C   D2
0x126E X D2ERR
0x1242   DSK_RNM
0x123C   DOS_FT8
0x122D   DOS_FT9
0x1213   DOS_FTA
0x123A   DOS_FT7
0x239A   OUTC
0x17B1   RND_ID
0x11CA X DOS_FT5
0x128B   D1ERR
0x1786   DOS_LDNAM
0x11A2   DOS_FT2
0x1186 X DOS_FT0
0x1187   DOS_FT1
0x1179   DOS_FTC
0x4D9D   DIV_32_16
0x8198   DOSBFR
0x18CB   CLRDOSBF
0x18B6   CLRIOBF
0x1111   DSK_INIT
0x81B8   ENDMEM
0x81B6   SRTMEM
0x81B4   TPBF4
0x8211   RADIUS
0x81B2   TPBF3
0x81B0   TPBF2
0x81AE   TPBF1
0x81AC   RAM_PTR
0x81AA   LSB_SCT
0x81A8   MSB_SCT
0x81A7   SCT_SIZ
0x81A5   BYT_SIZ
0x81A3   NTR_NBR
0x81A1   DIR_SCT
0x819D   DIR_STRT
0x819D   TMPDBF
0x110F   DSKDIRADR
0x1100   DFSCT0
0x10F0   CF_WR_SEC2
0x10EE   CF_WR_SEC1
0x10D9   CF_WR_SEC
0x10CC   CF_RD_SECT
0x3AD3   OUTEXP
0x819A   IOBUFF
0x10C2   CF_RD_CMD
0x10B1   CF_RD_SEC
0x10A5   CF_STANDBY
0x10A2 X CR_DV_ERR
0x10A3   CR_DV_RD_E
0x819F   DAT_STRT
0x1096   CR_DV_RD_1
0x1382   LSTFILES6
0x106F   CF_SETSTR
0x1069 X CF_RAWRDBT
0x1065 X CF_CHKERR
0x105C   CF_DAT_RDY
0x1053   CF_CMDRDY
0x1091   CR_DEV_RDY
0x1043   CF_NOP
0x102D   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0F05   CNTFNK
0x0F18   PRNTFNK
0x0F0B   PUTCHRBUF1
0x0EF1   LDFNKEYCHR
0x80B5   FNKEYS
0x80AF   LINEAT
0x1C5E   SIGNON
0x0ED8 X LVKBRDCHK
0x0ED1   PNT2VD
0x0EC4   PUTCHRBUF
0x0EB2   SNDKEYTOBFR
0x0ED9   PRNTFNKEY
0x0EAA   CHKFNK
0x0F25   FNKEYSORD
0x0EA4   CNTKBCK
0x0003   CTRLC
0x80B4   AUTOKE
0x3633   BNRMLP
0x0E91   SENDKEY
0x0E62   SETNEWAUTO
0x0ED4   LVKBRDCHK2
0x80B3   KEYDEL
0x0E72   CHKAUTO
0x8244   KEYTMR
0x0E84   NEWKEY
0x0FAD   KBMAP_ALT
0x0FED   KBMAP_CTRL
0x0E29   CHKALT
0x0E30   LOADMAP
0x0F6D   KBMAP_SFT
0x0E20   CHKCTRL
0x0F2D   KBMAP
0x0E0C   CHKLN
0x8243   STATUSKEY
0x8242   LASTKEYPRSD
0x0DF4   ENDCTRLCK
0x0DEE   TESTCTRL
0x0E0A   FINDKEY
0x0DE1   TESTALT
0x8240   KBTMP
0x0DF8   NOKEYPRSD
0x0DB2   RPTKBDRD
0x0DAE   CHECKKBD
0x0DA0   CHECKCTRL
0x8246   CONTROLKEYS
0x0D92   CHECKALT
0x0D52   CNTCHKSND
0x0D17   CHKSNDCH
0x0CE5   RPTWLCMBP
0x0CFB   NOBPDAT
0x0CE2   SENDSND
0x0CF3   WLCBPDAT
0x0D08   WRTSNDREG
0x0D03   SETSNDREG
0x0CC9   SNDREGCFG
0x0CB5   CLRPSGREGS
0x0CB1   EMPTSNDBFR
0x0B63 X VDPMODESETEX2
0x0B5B X VDPMODESETMC
0x0B53 X VDPMODESET2
0x2F30   QTSTR
0x0B4B X VDPMODESET1
0x0B39   SENDCHRPTRNS
0x5654   CHRST88
0x0B37   NXTCHAR
0x4E54   CHRST68
0x0B18   LDREGVLS
0x0B43   VDPMODESET
0x0B01   RSTVDPRAMREG
0x8239   CHASNDDTN
0x0AF2   EMPTVRM
0x0A86 X CNTNULL2
0x0A79   RPTNLLSRC2
0x4D29   MUL16
0x0A54   ADDNEWLINE
0x0A21   SNDCHRTOBFR
0x0A08   CNTNULL
0x09F8   RPTNLLSRC
0x0A40   PRNTRETURN
0x820B   TMPBFR4
0x8209   TMPBFR3
0x8207   SRTTXT
0x8207   TMPBFR2
0x09CE   RPTEMPTYROW
0x09B3   WRITEBUF
0x098A   LOADNEXTCOL
0x820D   VIDEOBUFF
0x0978   SCROLLNXTRW
0x8237   VIDTMP2
0x8235   VIDTMP1
0x0957   EXITCURSOR_ON
0x0941   EXITCURSORDOWN
0x0921   EXITCURSORRGHT
0x091B   CONTCRSRGT
0x0908   CHCKYPOS2
0x08ED   EXITCURSORUP
0x08C4   CHKYPOS
0x08B1   EXITCURSORLEFT
0x08AE   CONTCRSLFT
0x089D   CHCKYPOS
0x08B3   MVCRS2LFT
0x086E   MVBKSP
0x0881   LVBKSP
0x0020   SPC
0x0839 X ENDINSRT
0x0834   NXTINST
0x4D1E   CMP16
0x0823   CHKHL
0x8209   ENDTXT
0x0A61   ENDOFLN
0x8205   CUR_POS
0x0801   PUTCRSCHR
0x0960   SCROLLUP
0x07C1   SETCRSRY
0x104C   CF_BUSY
0x07C2   SETCSRCOORDS
0x07D4   EXITCHAR2VID
0x0798   NXTCPCK
0x078B   RPTCPCK
0x07E1   PLACEHOLDER
0x000A   LF
0x0805   INSERTKEY
0x001A   INSRT
0x0924   CURSORDOWN
0x001F   CRSDN
0x08EF   CURSORRIGHT
0x001D   CRSRGT
0x08D6   CURSORUP
0x001E   CRSUP
0x088A   CURSORLEFT
0x001C   CRSLFT
0x0847   BACKSPACE
0x3E23   CNTCKCL
0x0008   BKSP
0x09DA   CRGRETURN
0x000C   CS
0x0019   HOME
0x075A   CHRTBL
0x4D79   DIV_16_8
0x0749   HL2XY
0x0A87   POS_TB_CRS_32
0x073B   CONT_POS_CURS
0x0AB7   POS_TB_CRS_40
0x8200   LSTCSRSTA
0x81FF   CRSR_STATE
0x06F3   MOVSHOWCRS
0x0708   NEWCRSRCOORD
0x071D   RSTCHRCRS
0x0726   LOAD_CRSR_POS
0x06DC   READ_VSTAT
0x06D1   WRITE_VREG
0x06BC   WRITE_VIDEO_LOC
0x06A7   READ_VIDEO_LOC
0x06ED   MOVCRS
0x81FC   SCR_CUR_NX
0x0000   NLLCR
0x81FD   SCR_CUR_NY
0x069D   ATHOME
0x06E3   POS_CURSOR
0x0690   CLEARVIDBUF
0x067D   RPTFLL1
0x066A   SNDCLRSET
0x0666   STARTEMPTY
0x0630   CLRG2PTNTBL
0x0615   RPTEMPTYBUF
0x060F   LDCOLSTOEMPTY
0x064F   EMPTYMC
0x061E   EMPTYG2
0x05EC   LVCKSPLK
0x05EE   DOCOLDRESET
0x0D5D   READKBLN
0x05D9 X CHKSPCK
0x05CA   SNDLOGPT
0x3690   COMPL
0x5E54   LOGOFONT
0x0CDF   NOBEEP
0x0CD9   WLCMBEEP
0x0595   RPT100
0x05AB   BEEPOFF
0x059F   SETBEEP
0x056B   DEC_D
0x824A   DOS_EN
0x8205   TMPBFR1
0x055A   RPT104
0x05B3   LOADLOGOCHRS
0x0552   RPT103
0x0B6B   LM80CLOGO
0x053C   RPT102
0x0CBC   RSTPSG
0x0539   RPT101
0x05D4   CLRTABLE
0x0587   ERASECLRTBL
0x0674   SETNAMETABLE
0x0B0E   SET_GFX_MODE2
0x81FE   SCR_ORG_CHR
0x05F5   EMPTYVIDBUF
0x0474   LDCLRTBMD1
0x8203   FRGNDCLR
0x0687   SETVDPADRS
0x0505   ENDVDPSET
0x81F8   SCR_NAM_TB
0x80A3   COMMAN
0x81F6   SCR_SIZE_H
0x81F5   SCR_SIZE_W
0x8204   BKGNDCLR
0x81FB   SCR_CURS_Y
0x04FC   LDCLRTBEX2
0x81FA   SCR_CURS_X
0x0B22   LOADCHARSET
0x0412 X TXTMD
0x04C2   EXG2MD
0x049F   MCMD
0x047D   G2MD
0x043C   G1MD
0x81F7   SCR_MODE
0x0AFB   CLR_RAM_REG
0x0B06   SET_GFX_MODE
0x0AE7   EMPTY_VRAM
0x0383   RESTMR
0x0388   CTCCONF
0x035A X SIO_B_SETS
0x0354   SIO_A_SETS
0x0349   COUNTER
0x0347   DEC_E
0x0343   LEDLIGHT
0x1B6D   WARM
0x1B6A   COLD
0x0959   CURSOR_OFF
0x031F   ECHO_CHAR
0x0312   CHECKWARM
0x02FB   CORW
0x0944   CURSOR_ON
0x03D0   MSGTXT2
0x0307   COLDSTART
0x805D   basicStarted
0x0394   MSGTXT1
0x4D09   INITST
0x03ED   initVDP
0x0510   SHOW_LOGO
0x0CAB   initPSG
0x035E   initCTC
0x0339   HELLOWRLD
0x02B1 X INIT_HW2
0x818F   TEMPSTACK
0x0D72   KEYBOARD
0x0D0D   MNGSNDS
0x07E2   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x81E5   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x805A   serRdPtr
0x8000   SERBUF_START
0x0214   NOTWRAP
0x0058   bufWrap
0x8058   serInPtr
0x0208   NOTFULL
0x805C   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x8249   SERBBITS
0x019D   SIO_RTS_OFF
0x8248   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x46FB   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x8247   SERIALS_EN
0x01CB   SIO_A_DI
0x1A77   GMMSG
0x0778   CHAR2VID
0x8201   PRNTVIDEO
0x823F   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x8202   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x8241   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x8061   NMIUSR
0x81F2   CTC3IV
0x81EF   CTC2IV
0x81EC   CTC1IV
0x81E9   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x02AE   INIT_HW
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0032   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
