# file opened: LM80C-firmware-r3.22.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C - FIRMWARE - R3.21
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; output binary file
  55  0000                  OUTPUT "LM80C-firmware-r3.22.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "3.22"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.02"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT ld      C,VDP_DAT
  68  0000                  DEFINE LM64K_NOP
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000 ~            VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000              VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 ~                            jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0001                  ELSE
  80+ 0001 C3 AE 02                     jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 E9 81                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 EC 81                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 EF 81                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 F2 81                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 61 80                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 140+ 0094 43 20 43 4F
 141+ 0098 4C 4F 52 00                  defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 141+ 009C 00 00 00 00
 142+ 00A0                  ELSE
 143+ 00A0 ~                            defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 144+ 00A0 ~                            defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$31,$29,$00
 147+ 00AC 32 31 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 33  FWVER:          defm    "FW ","3.22",$20,"2021-03-10",$20,"11:49:15",$00
 152+ 00D4 2E 32 32 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 31 30 20 31
 152+ 00E4 31 3A 34 39
 152+ 00E8 3A 31 35 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 41 82                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 02 82                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 3F 82                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 78 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 1D 47                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A 58 80     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE 58                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 00 80                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 58 80     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 5C 80                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A 47 82                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A 5C 80     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A 5A 80                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE 58                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 00 80                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 5A 80     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 5C 80                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A 5C 80     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 02 82                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 78 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 E5 81                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD E2 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD 0D 0D                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A E5 81                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 72 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 8F 81     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 00 80                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 58 80                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 5A 80                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 5C 80                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 47 82                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 CD 39 03                     call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C5                  ENDIF
 474+ 02C5 CD 5E 03                     call    initCTC         ; configure CTC, then...
 475+ 02C8 CD AB 0C                     call    initPSG         ; ...configure PSG
 476+ 02CB CD 10 05                     call    SHOW_LOGO       ; show computer logo
 477+ 02CE 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02D0 CD ED 03                     call    initVDP         ; set video display
 479+ 02D3 AF                           xor     A
 480+ 02D4 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D6 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D8 FB                           ei                      ; enable interrupts
 483+ 02D9                              ; print system messages
 484+ 02D9 AF                           xor     A               ; A=0 so...
 485+ 02DA 32 3F 82                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DD 3C                           inc     A               ; A=1...
 487+ 02DE 32 01 82                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02E1 21 94 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E4 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E7 3A 5D 80                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02EA FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02EC 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EE 21 D0 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02F1 CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F4 CD 44 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F7 AF                           xor     A
 497+ 02F8 32 01 82                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02FB CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FE E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 0300 FE 43                        cp      'C'             ; cold start?
 501+ 0302 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0304 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0307 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0309 32 5D 80                     ld      (basicStarted),A
 505+ 030C CD 59 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030F C3 8C 1B                     jp      COLD            ; start BASIC COLD
 507+ 0312 FE 57        CHECKWARM:      cp      'W'
 508+ 0314 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0316 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0319 CD 59 09                     call    CURSOR_OFF      ; disable cursor
 511+ 031C C3 8F 1B                     jp      WARM            ; start BASIC WARM
 512+ 031F
 513+ 031F              ;-------------------------------------------------------------------------------
 514+ 031F              ; send back char received through ch. A
 515+ 031F 32 02 82     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 0322 AF                           xor     A
 517+ 0323 32 3F 82                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0326 F3                           di                      ; disable INTs
 519+ 0327 CD 78 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 032A 3E 0D                        ld      A,CR            ; then set a CR
 521+ 032C 32 02 82                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032F CD 78 07                     call    CHAR2VID        ; and send it to screen
 523+ 0332 FB                           ei                      ; re-enable INTs
 524+ 0333 3E 01                        ld      A,$01
 525+ 0335 32 01 82                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0338 C9                           ret                     ; return to caller
 527+ 0339
 528+ 0339                  IFDEF LM80C
 529+ 0339              ;-------------------------------------------------------------------------------
 530+ 0339              ; little serial blink with LEDs
 531+ 0339 0E 09        HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 033B 3E CF                        ld      A,%11001111     ; set mode 3 (mode control)
 533+ 033D D3 03                        out     (PIO_CB),A      ; for PIO port B
 534+ 033F AF                           xor     A               ; set pins to OUTPUT
 535+ 0340 D3 03                        out     (PIO_CB),A      ; for port B
 536+ 0342 3C                           inc     A               ; LSB on
 537+ 0343 D3 01        LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0345 1E 20                        ld      E,$20           ; little delay
 539+ 0347 06 00        DEC_E:          ld      B,$00           ; count to 256
 540+ 0349 10 FE        COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 034B 1D                           dec     E               ; decrement outer counter
 542+ 034C 20 F9                        jr      NZ,DEC_E        ; finish delay
 543+ 034E CB 27                        sla     A               ; shift reg.A to left 1 bit
 544+ 0350 0D                           dec     C               ; next LED
 545+ 0351 20 F0                        jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0353 C9                           ret                     ; return to caller
 547+ 0354                  ENDIF
 548+ 0354              ;-------------------------------------------------------------------------------
 549+ 0354              ; Z80 SIO default settings for serial channels
 550+ 0354 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0355 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0356 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0357 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 0358 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 0359 E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 035A 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 035B 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 035C 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 035D 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 035E                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 035E                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 035E                                                      ; for special conditions
 563+ 035E              ;------------------------------------------------------------------------------
 564+ 035E              ;               Z80 CTC SETTING UP
 565+ 035E              ;------------------------------------------------------------------------------
 566+ 035E              initCTC:
 567+ 035E 21 88 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0361 11 E9 81                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0364 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0367 ED B0                        ldir                    ; copy data
 571+ 0369              ;CH0, CH1, & CH2 disabled
 572+ 0369 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 036B                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 036B D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 036D D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 036F D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0371              ;init CH3
 578+ 0371              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0371              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0371 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0373                                                      ; time constant follows; cont. operation; command word
 582+ 0373 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0375 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0377 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 0379 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 037B                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 037B                                                      ; so int vector is 01000xx00
 588+ 037B D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 037D                              ; reset cells of 100ths of a second counter
 590+ 037D AF                           xor     A               ; reset A
 591+ 037E 21 E5 81                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0381 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0383 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0384 23                           inc     HL              ; next cell
 595+ 0385 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0387 C9                           ret
 597+ 0388
 598+ 0388
 599+ 0388              ;------------------------------------------------------------------------------
 600+ 0388              ; jump table for CHx interrupts
 601+ 0388 FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 038B FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 038E FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0391 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0394
 606+ 0394
 607+ 0394              ;------------------------------------------------------------------------------
 608+ 0394              ; welcome messages
 609+ 0394              MSGTXT1:
 610+ 0394                  IFDEF LM80C64K
 611+ 0394 ~                            defm    "    LM80C 64K Color Computer",CR
 612+ 0394                  ELSE
 613+ 0394 20 20 20 20                  defm    "      LM80C Color Computer",CR
 613+ 0398 20 20 4C 4D
 613+ 039C 38 30 43 20
 613+ 03A0 43 6F 6C 6F
 613+ 03A4 72 20 43 6F
 613+ 03A8 6D 70 75 74
 613+ 03AC 65 72 0D
 614+ 03AF                  ENDIF
 615+ 03AF 20 62 79 20                  defm    " by Leonardo Miliani * FW R","3.22",CR,0
 615+ 03B3 4C 65 6F 6E
 615+ 03B7 61 72 64 6F
 615+ 03BB 20 4D 69 6C
 615+ 03BF 69 61 6E 69
 615+ 03C3 20 2A 20 46
 615+ 03C7 57 20 52 33
 615+ 03CB 2E 32 32 0D
 615+ 03CF 00
 616+ 03D0 0D           MSGTXT2:        defb    CR
 617+ 03D1 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03D5 43 3E 6F 6C
 617+ 03D9 64 20 6F 72
 617+ 03DD 20 3C 57 3E
 617+ 03E1 61 72 6D 20
 617+ 03E5 73 74 61 72
 617+ 03E9 74 3F 20 00
 618+ 03ED
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03ED
  75  03ED              ; incude the latest version of the VDP module
  76  03ED                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03ED              ; ------------------------------------------------------------------------------
   2+ 03ED              ; LM80C - VDP ROUTINES - 1.5
   3+ 03ED              ; ------------------------------------------------------------------------------
   4+ 03ED              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03ED              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03ED              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03ED              ; kind of warranty: you can use them at your own risk.
   8+ 03ED              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03ED              ; maintain the copyright notices, include this advice and the note to the
  10+ 03ED              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03ED              ; redistribuite them.
  12+ 03ED              ; https://www.leonardomiliani.com
  13+ 03ED              ;
  14+ 03ED              ; Please support me by visiting the following links:
  15+ 03ED              ; Main project page: https://www.leonardomiliani.com
  16+ 03ED              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03ED              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03ED              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03ED              ; ------------------------------------------------------------------------------
  20+ 03ED              ;
  21+ 03ED              ;------------------------------------------------------------------------------
  22+ 03ED              ; VDP INITIALISATION
  23+ 03ED              ; initialize VDP for a specific graphics mode
  24+ 03ED              ; INPUT: E -> contains the graphics mode:
  25+ 03ED              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03ED D5           initVDP:        push    DE              ; store E
  27+ 03EE CD E7 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03F1 CD 06 0B                     call    SET_GFX_MODE    ; load register settings
  29+ 03F4 CD FB 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03F7 D1                           pop     DE              ; restore reg. E
  31+ 03F8 AF                           xor     A               ; reset A
  32+ 03F9 47                           ld      B,A             ; reset B (will be used later)
  33+ 03FA 7B                           ld      A,E             ; move E into A
  34+ 03FB 32 F7 81                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03FE FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 0400 CA 3C 04                     jp      Z,G1MD          ; yes, jump over
  37+ 0403 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 0405 CA 7D 04                     jp      Z,G2MD          ; yes, jump over
  39+ 0408 FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 040A CA 9F 04                     jp      Z,MCMD          ; yes, jump over
  41+ 040D FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 040F CA C2 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 0412                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 0412
  45+ 0412              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 0412
  47+ 0412                              ; TEXT MODE (G0)
  48+ 0412                              ; load charset
  49+ 0412 60           TXTMD:          ld      H,B
  50+ 0413 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 0414 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 0417                              ; set cursor & video overlay
  53+ 0417 AF                           xor     A               ; reset A
  54+ 0418 32 FA 81                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 041B 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 041E 3E 05                        ld      A,$05           ; light blue
  57+ 0420 32 04 82                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0423 3E 28                        ld      A,$28
  59+ 0425 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 0428 3E 18                        ld      A,$18
  61+ 042A 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 042D 3E 1E                        ld      A,$1E
  63+ 042F 32 A3 80                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0432 11 00 08                     ld      DE,$0800
  65+ 0435 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 0439 C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 043C
  68+ 043C                              ; GRAPHICS 1 MODE (G1)
  69+ 043C                              ; load pattern table
  70+ 043C 68           G1MD:           ld      L,B
  71+ 043D 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 043E CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0441                              ; set cursor & video overlay
  74+ 0441 AF                           xor     A               ; position cursor
  75+ 0442 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0445 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 0448 3E 20                        ld      A,$20
  78+ 044A 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 044D 3E 18                        ld      A,$18
  80+ 044F 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0452 3E 14                        ld      A,$14
  82+ 0454 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 0457 11 00 18                     ld      DE,$1800
  84+ 045A ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 045E                              ; load color table
  86+ 045E 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0461 CD 87 06                     call    SETVDPADRS
  88+ 0464 3E 01                        ld      A,$01           ; foreground color...
  89+ 0466 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 0469 3E 0F                        ld      A,$0F           ; background color...
  91+ 046B 32 04 82                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 046E 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0470 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0472 0E 30                        ld      C,VDP_DAT              ; VDP data mode
  95+ 0474 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0476 00                           nop
  97+ 0477 00                           nop
  98+ 0478 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 047A C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 047D
 101+ 047D                              ; GRAPHICS 2 MODE (G2)
 102+ 047D AF           G2MD:           xor     A               ; position cursor
 103+ 047E 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0481 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0484 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 0487 3C                           inc     A               ; black on...
 107+ 0488 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 048B 3E 0F                        ld      A,$0F           ; white on...
 109+ 048D 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 110+ 0490 3E C0                        ld      A,$C0
 111+ 0492 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0495 11 00 18                     ld      DE,$1800
 113+ 0498 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 049C C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 049F
 116+ 049F                              ; MULTICOLOR MODE (G3)
 117+ 049F AF           MCMD:           xor     A               ; position cursor
 118+ 04A0 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 04A3 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 04A6 3E 0F                        ld      A,$0F           ; white color for...
 121+ 04A8 32 04 82                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 04AB 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 04AE 3E 40                        ld      A,$40
 124+ 04B0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 04B3 3E 30                        ld      A,$30
 126+ 04B5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 04B8 11 00 08                     ld      DE,$0800
 128+ 04BB ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04BF C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04C2
 131+ 04C2                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04C2              EXG2MD:         ; load pattern table
 133+ 04C2 60                           ld      H,B
 134+ 04C3 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04C4 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04C7                              ; set cursor & video overlay
 137+ 04C7 AF                           xor     A               ; position cursor
 138+ 04C8 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04CB 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04CE 3E 20                        ld      A,$20
 141+ 04D0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04D3 3E 18                        ld      A,$18
 143+ 04D5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04D8 3E 14                        ld      A,$14
 145+ 04DA 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04DD 11 00 38                     ld      DE,$3800
 147+ 04E0 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04E4                               ; load color table
 149+ 04E4 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04E7 CD 87 06                     call    SETVDPADRS
 151+ 04EA 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04EC 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04EF 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04F1 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 155+ 04F4 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04F6 16 08                        ld      D,$08           ; 8 pages of
 157+ 04F8 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04FA 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 159+ 04FC ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04FE 00                           nop
 161+ 04FF 00                           nop
 162+ 0500 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 0502 15                           dec     D               ; did we fill up all the cells?
 164+ 0503 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 0505                              ; LAST VDP SETTINGS
 166+ 0505 CD 59 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 0508 CD F5 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 050B AF                           xor     A
 169+ 050C 32 FE 81                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 050F C9                           ret                     ; return to caller
 171+ 0510
 172+ 0510
 173+ 0510              ; show initial logo
 174+ 0510 CD E7 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 0513                              ; set VDP for G2 mode
 176+ 0513 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 0515 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 0518 CD 0E 0B                     call    SET_GFX_MODE2   ; load register settings
 179+ 051B 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 051D ED 51                        out     (C),D           ; send data to VDP
 181+ 051F ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0521                              ; set name table
 183+ 0521 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0524 CD 74 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0527 CD 87 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 052A                              ; set colors for logo
 187+ 052A 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 052D CD 87 06                     call    SETVDPADRS
 189+ 0530 06 05                        ld      B,$05           ; 5 bands
 190+ 0532 21 D4 05                     ld      HL,CLRTABLE
 191+ 0535 0E 30                        ld      C,VDP_DAT              ; set VDP_DAT
 192+ 0537 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 0539 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 053B 7E                           ld      A,(HL)          ; load data
 195+ 053C ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 053E 00                           nop                     ; little delay
 197+ 053F 1D                           dec     E               ; decrement counter
 198+ 0540 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0542 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0544 15                           dec     D               ; decrement char band counter
 201+ 0545 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0547 23                           inc     HL              ; next pattern
 203+ 0548 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 054A                              ; set pattern table
 205+ 054A 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 054D 11 6B 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0550 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0552 CD B3 05     RPT103:         call    LOADLOGOCHRS
 209+ 0555 13                           inc     DE              ; next logo pattern
 210+ 0556 10 FA                        djnz    RPT103
 211+ 0558 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 055A CD B3 05     RPT104:         call    LOADLOGOCHRS
 213+ 055D 13                           inc     DE              ; next logo pattern
 214+ 055E 10 FA                        djnz    RPT104
 215+ 0560                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0560 06 02                        ld      B,$02           ; two times
 217+ 0562 AF                           xor     A               ; reset A
 218+ 0563 57                           ld      D,A             ; 256 times
 219+ 0564 5F                           ld      E,A             ; x 256 times
 220+ 0565 32 05 82                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0568                  IFDEF LM80C64K
 222+ 0568 ~                            inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 0568                  ENDIF
 224+ 0568 32 4A 82                     ld      (DOS_EN),A      ; DOS enabled
 225+ 056B 00           DEC_D:          nop                     ; does nothing...
 226+ 056C 00                           nop
 227+ 056D 00                           nop
 228+ 056E 00                           nop
 229+ 056F 00                           nop
 230+ 0570 00                           nop                     ; ...until here
 231+ 0571 1D                           dec     E               ; decrement E
 232+ 0572 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0574 7A                           ld      A,D
 234+ 0575 FE 40                        cp      $40             ; ...equal to 64
 235+ 0577 CC 9F 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 057A 15                           dec     D
 237+ 057B 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 057D 3A 05 82                     ld      A,(TMPBFR1)     ; sound state
 239+ 0580 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0582 C4 AB 05                     call    NZ,BEEPOFF      ; yes
 241+ 0585                  IFDEF LM80C64K
 242+ 0585 ~                            call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 0585 ~                                                    ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 0585                  ENDIF
 245+ 0585 10 E4                        djnz    DEC_D           ; repeat
 246+ 0587              ERASECLRTBL:    ; erase color table
 247+ 0587 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 0589 16 0A                        ld      D,$0A           ; 10 pages
 249+ 058B 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 058D 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0590 CD 87 06                     call    SETVDPADRS      ; send address
 252+ 0593 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 253+ 0595 ED 79        RPT100:         out     (C),A           ; send data
 254+ 0597 00                           nop
 255+ 0598 00                           nop                     ; little delay
 256+ 0599 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 059B 15                           dec     D
 258+ 059C 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 059E C9                           ret                     ; return to caller
 260+ 059F
 261+ 059F              ; play a beep
 262+ 059F 3A 05 82     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 05A2 B7                           or      A               ; is it 0?
 264+ 05A3 C0                           ret     NZ              ; no, exit
 265+ 05A4 3C                           inc     A               ; flag to 1
 266+ 05A5 32 05 82                     ld      (TMPBFR1),A     ; set sound
 267+ 05A8 C3 D9 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 05AB
 269+ 05AB              ; beep off
 270+ 05AB 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 05AD 32 05 82                     ld      (TMPBFR1),A     ; set flag
 272+ 05B0 C3 DF 0C                     jp      NOBEEP          ; stop beep and return
 273+ 05B3
 274+ 05B3
 275+ 05B3              ; used to load the chars that will compose the logo of the splash screen
 276+ 05B3 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 05B4 87                           add     A,A
 278+ 05B5 87                           add     A,A
 279+ 05B6 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 05B7 C5                           push    BC
 281+ 05B8 D5                           push    DE              ; store BC and DE
 282+ 05B9 E5                           push    HL              ; store VRAM address to write to
 283+ 05BA 21 7B 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05BD 5F                           ld      E,A
 285+ 05BE 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05C0 19                           add     HL,DE           ; get address of pattern data
 287+ 05C1 EB                           ex      DE,HL           ; move address into DE
 288+ 05C2 E1                           pop     HL              ; retrieve VRAM address
 289+ 05C3 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05C5 CD 87 06                     call    SETVDPADRS      ; set VDP address
 291+ 05C8 0E 30                        ld      C,VDP_DAT              ; VDP_DAT
 292+ 05CA 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05CB ED 79                        out     (C),A           ; and send to VRAM
 294+ 05CD 13                           inc     DE              ; next byte into RAM
 295+ 05CE 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05CF 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05D1 D1                           pop     DE
 298+ 05D2 C1                           pop     BC              ; retrieve BC & DE
 299+ 05D3 C9                           ret                     ; return to caller
 300+ 05D4              CLRTABLE:       equ $
 301+ 05D4 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05D8 1D
 302+ 05D9
 303+ 05D9
 304+ 05D9              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05D9              ; if yes, then disable DOS functions recovering RAM
 306+ 05D9 F5           CHKSPCK:        push    AF
 307+ 05DA 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05DC CD 5D 0D                     call    READKBLN        ; read row
 309+ 05DF CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05E1 CA EE 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05E4 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05E6 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05E8 AF                           xor     A               ; yes, so...
 314+ 05E9 32 4A 82                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05EC F1           LVCKSPLK:       pop     AF
 316+ 05ED C9                           ret
 317+ 05EE AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05EF 32 5D 80                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05F2 C3 00 00                     jp      $0000           ; restart
 320+ 05F5
 321+ 05F5
 322+ 05F5              ; empty video buffer
 323+ 05F5 3A F7 81     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05F8 FE 02                        cp      $02             ; is it G2 mode?
 325+ 05FA CA 1E 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05FD FE 03                        cp      $03             ; is it MC mode?
 327+ 05FF CA 4F 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 0602 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 0605 47                           ld      B,A             ; move rows into B
 330+ 0606 AF                           xor     A               ; filling char is $00
 331+ 0607 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 060A CD 87 06                     call    SETVDPADRS      ; send address to VDP
 333+ 060D 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 334+ 060F 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 0610 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 0613 57                           ld      D,A             ; move A into D
 337+ 0614 7B                           ld      A,E             ; recover filling char
 338+ 0615 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 0617 00                           nop
 340+ 0618 15                           dec     D               ; decr. D
 341+ 0619 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 061B 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 061D C9                           ret                     ; return to caller
 344+ 061E 2A F8 81     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0621 CD 74 06                     call    SETNAMETABLE    ; set name table
 346+ 0624 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0627 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 348+ 062A AF                           xor     A               ; empty pattern
 349+ 062B 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 062D 47                           ld      B,A             ; 256 bytes for page
 351+ 062E 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 352+ 0630 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0632 00                           nop                     ; little delay
 354+ 0633 00                           nop
 355+ 0634 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0636 15                           dec     D               ; next page
 357+ 0637 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 0639 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 063C CD 87 06                     call    SETVDPADRS      ; send address to VDP
 360+ 063F 3A 03 82                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0642 87                           add     A,A
 362+ 0643 87                           add     A,A
 363+ 0644 87                           add     A,A
 364+ 0645 87                           add     A,A             ; move to high nibble
 365+ 0646 57                           ld      D,A             ; store into D
 366+ 0647 3A 04 82                     ld      A,(BKGNDCLR)    ; load background color
 367+ 064A B2                           or      D               ; combine with background color
 368+ 064B 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 064D 18 17                        jr      STARTEMPTY
 370+ 064F 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0652 CD 74 06                     call    SETNAMETABLE    ; set name table
 372+ 0655 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0658 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 374+ 065B 3A 04 82                     ld      A,(BKGNDCLR)    ; load background
 375+ 065E 57                           ld      D,A             ; store into D
 376+ 065F 87                           add     A,A
 377+ 0660 87                           add     A,A
 378+ 0661 87                           add     A,A
 379+ 0662 87                           add     A,A             ; move to high nibble
 380+ 0663 B2                           or      D               ; set background color for high and low nibble
 381+ 0664 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0666 0E 30        STARTEMPTY:     ld      C,VDP_DAT              ; VDP address for passing data
 383+ 0668 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 066A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 066C 00                           nop                     ; wait a while
 386+ 066D 00                           nop
 387+ 066E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0670 15                           dec     D               ; have we filled all the pages?
 389+ 0671 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0673 C9                           ret                     ; return to caller
 391+ 0674
 392+ 0674              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0674 CD 87 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0677 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 395+ 0679 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 067B AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 067C 47                           ld      B,A             ; reset B
 398+ 067D ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 067F 00                           nop
 400+ 0680 3C                           inc     A               ; increment # of name
 401+ 0681 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0683 15                           dec     D               ; did we fill all the pages?
 403+ 0684 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0686 C9                           ret                     ; return to caller
 405+ 0687
 406+ 0687              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0687 0E 32        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0689 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 068B ED 69                        out     (C),L           ; send low and...
 410+ 068D ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 068F C9                           ret                     ; return to caller
 412+ 0690
 413+ 0690              ; clear the video buffer and position the cursor at 0,0
 414+ 0690 CD F5 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0693 AF                           xor     A               ; reset A
 416+ 0694 32 FA 81                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0697 32 FB 81                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 069A C3 E3 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 069D
 420+ 069D              ; HOME: position the cursor at coords. 0,0
 421+ 069D AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 069E 32 FD 81                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 06A1 32 FC 81                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 06A4 C3 ED 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 06A7
 426+ 06A7              ; load the char or byte at the VRAM position set by HL
 427+ 06A7              ; value is returned into A
 428+ 06A7 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 06A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 430+ 06AA 44                           ld      B,H
 431+ 06AB CB B8                        res     7,B
 432+ 06AD CB B0                        res     6,B
 433+ 06AF ED 69                        out     (C),L           ; low byte then...
 434+ 06B1 ED 41                        out     (C),B           ; high byte
 435+ 06B3 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 436+ 06B5 ~                            LM64K_NOP               ; added to compensate shorter instruction
 437+ 06B5 00                           nop                     ; wait...
 438+ 06B6 00                           nop                     ; ...a while
 439+ 06B7 00                           nop
 440+ 06B8 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 06BA C1                           pop     BC              ; restore BC
 442+ 06BB C9                           ret                     ; return to caller
 443+ 06BC
 444+ 06BC              ; write a byte at the VRAM position pointed by HL
 445+ 06BC              ; value is in A
 446+ 06BC C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 06BD 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 448+ 06BF 44                           ld      B,H             ; copy H into B
 449+ 06C0 CB B8                        res     7,B
 450+ 06C2 CB F0                        set     6,B             ; write to VRAM
 451+ 06C4 ED 69                        out     (C),L           ; low byte then...
 452+ 06C6 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06C8 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 454+ 06CA ~                            LM64K_NOP               ; added to compensate shorter instruction
 455+ 06CA 00                           nop                     ; wait...
 456+ 06CB 00                           nop                     ; ...a while
 457+ 06CC 00                           nop
 458+ 06CD ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06CF C1                           pop     BC              ; restore BC
 460+ 06D0 C9                           ret                     ; return to caller
 461+ 06D1
 462+ 06D1              ; write a value into a specific VDP register
 463+ 06D1              ; value is in E, register is in A
 464+ 06D1 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06D2 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06D4 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06D6 ED 59                        out     (C),E           ; send data to VDP
 468+ 06D8 ED 79                        out     (C),A           ; select the destination register
 469+ 06DA C1                           pop     BC              ; restore BC
 470+ 06DB C9                           ret                     ; return to caller
 471+ 06DC
 472+ 06DC              ; read VDP status register and return value into A
 473+ 06DC C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06DD 0E 32                        ld      C,VDP_SET       ; VDP register access
 475+ 06DF ED 78                        in      A,(C)           ; read status register
 476+ 06E1 C1                           pop     BC              ; restore BC
 477+ 06E2 C9                           ret                     ; return to caller
 478+ 06E3
 479+ 06E3              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06E3 CD 26 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06E6 CD A7 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06E9 32 FE 81                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06EC C9                           ret
 484+ 06ED
 485+ 06ED              ; move cursor to new X,Y coordinates
 486+ 06ED CD 1D 07     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06F0 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06F3 CD E3 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06F6 3A FF 81                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06F9 A7                           and     A               ; is cursor off?
 491+ 06FA C8                           ret     Z               ; yes, return
 492+ 06FB 3A 00 82                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06FE F6 20                        or      $20             ; ...set cursor on
 494+ 0700 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 0703 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 0705 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 0708
 498+ 0708
 499+ 0708              ; set new cursor's coordinates
 500+ 0708 3A FC 81     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 070B 32 FA 81                     ld      (SCR_CURS_X),A  ; write new X
 502+ 070E 3A FD 81                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 0711 32 FB 81                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 0714 3E FF                        ld      A,$FF           ; delete new values
 505+ 0716 32 FC 81                     ld      (SCR_CUR_NX),A  ; of X
 506+ 0719 32 FD 81                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 071C C9                           ret
 508+ 071D
 509+ 071D              ; recover char under the cursor and prints it onto the screen
 510+ 071D CD 26 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 0720 3A FE 81                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0723 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0726
 514+ 0726              ; retrieve cursor position from either current coordinates or next place
 515+ 0726              ; return address position into HL
 516+ 0726 3A FB 81     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0729 6F                           ld      L,A             ; move it into reg.L
 518+ 072A AF                           xor     A               ; reset A
 519+ 072B 67                           ld      H,A             ; reset H
 520+ 072C 47                           ld      B,A             ; reset B
 521+ 072D 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 072E 11 B7 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0731 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0734 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0736 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0738 11 87 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 073B 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 073C 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 073D 23                           inc     HL
 530+ 073E 56                           ld      D,(HL)
 531+ 073F 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0742 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0743 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0746 4F                           ld      C,A             ; transfer A into C
 535+ 0747 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0748 C9                           ret
 537+ 0749
 538+ 0749              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0749              ; return them into L,A for X,Y
 540+ 0749 D5           HL2XY:          push    DE              ; store DE
 541+ 074A ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 074E AF                           xor     A               ; clear Carry
 543+ 074F ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0751 D1                           pop     DE
 545+ 0752 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0755 4F                           ld      C,A             ; move it into C
 547+ 0756 CD A0 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0759 C9                           ret                     ; return to caller
 549+ 075A
 550+ 075A              ;-------------------------------------------------------------------------------
 551+ 075A              ; char table for jumps
 552+ 075A 19           CHRTBL:         defb    HOME
 553+ 075B 9D 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 075D
 555+ 075D 0C                           defb    CS
 556+ 075E 90 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 0760
 558+ 0760 0D                           defb    CR
 559+ 0761 DA 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0763
 561+ 0763 08                           defb    BKSP
 562+ 0764 47 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0766
 564+ 0766 1C                           defb    CRSLFT
 565+ 0767 8A 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0769
 567+ 0769 1E                           defb    CRSUP
 568+ 076A D6 08                        defw    CURSORUP        ; move cursor up
 569+ 076C
 570+ 076C 1D                           defb    CRSRGT
 571+ 076D EF 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 076F
 573+ 076F 1F                           defb    CRSDN
 574+ 0770 24 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0772
 576+ 0772 1A                           defb    INSRT
 577+ 0773 05 08                        defw    INSERTKEY       ; insert a space
 578+ 0775
 579+ 0775 0A                           defb    LF
 580+ 0776 E1 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0778
 582+ 0778              ; send current char to video buffer
 583+ 0778 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0779 C5                           push    BC              ; store BC
 585+ 077A D5                           push    DE              ; store DE
 586+ 077B E5                           push    HL              ; store HL
 587+ 077C 3A FF 81                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 077F F5                           push    AF              ; into stack
 589+ 0780 CD 59 09                     call    CURSOR_OFF      ; cursor off
 590+ 0783 3A 02 82                     ld      A,(CHR4VID)     ; recover char
 591+ 0786 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0788 21 5A 07                     ld      HL,CHRTBL       ; address of key table
 593+ 078B BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 078C 23                           inc     HL              ; beginning of sub-routine address
 595+ 078D 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 078F 5E                           ld      E,(HL)          ; load addres into DE
 597+ 0790 23                           inc     HL
 598+ 0791 56                           ld      D,(HL)
 599+ 0792 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0793 11 D4 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0796 D5                           push    DE              ; store into stack
 602+ 0797 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0798 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0799 23                           inc     HL              ; ...to the next char code
 605+ 079A 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 079C                              ; it'a not a special char, just print it
 607+ 079C CD 26 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 079F 3A 02 82                     ld      A,(CHR4VID)     ; recover char to print
 609+ 07A2 CD BC 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 07A5 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 07A8 5F                           ld      E,A             ; store cursor Y into E
 612+ 07A9 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 07AC 3C                           inc     A               ; move 1 step to right
 614+ 07AD 21 F5 81                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 07B0 BE                           cp      (HL)            ; have we reached the most right position?
 616+ 07B1 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 07B3 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 07B4 7B                           ld      A,E             ; move cursor Y into A
 619+ 07B5 21 F6 81                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 07B8 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 07B9 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 07BB D5                           push    DE
 623+ 07BC CD 60 09                     call    SCROLLUP        ; scroll screen up
 624+ 07BF D1                           pop     DE
 625+ 07C0 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07C1 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07C2 32 FA 81     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07C5 7B                           ld      A,E             ; recover Y
 629+ 07C6 32 FB 81                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07C9 CD E3 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07CC 3A E5 81                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07CF E6 20                        and     $20             ; check cursor state
 633+ 07D1 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07D4 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07D5 32 02 82                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07D8 F1                           pop     AF              ; recover cursor state
 637+ 07D9 A7                           and     A               ; was it off (A=0)?
 638+ 07DA C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07DD E1                           pop     HL              ; restore HL
 640+ 07DE D1                           pop     DE              ; restore DE
 641+ 07DF C1                           pop     BC              ; restore BC
 642+ 07E0 F1                           pop     AF              ; restore AF
 643+ 07E1 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07E2
 645+ 07E2              ; flash the cursor at the current position
 646+ 07E2              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07E2 3A FF 81     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07E5 A7                           and     A               ; cursor off (A=0)?
 649+ 07E6 C8                           ret     Z               ; yes, return
 650+ 07E7 3A E5 81                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07EA E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07EC 21 00 82                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07EF BE                           cp      (HL)            ; compare current state with last state
 654+ 07F0 C8                           ret     Z               ; same state, no change required - exit
 655+ 07F1 77                           ld      (HL),A          ; save new state
 656+ 07F2 F5                           push    AF              ; store A (keep state for later use)
 657+ 07F3 CD 26 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07F6 F1                           pop     AF              ; recover current state
 659+ 07F7 06 FF                        ld      B,$FF           ; cursor char
 660+ 07F9 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07FB 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07FD 3A FE 81                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 0800 47                           ld      B,A             ; move char into B
 664+ 0801 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 0802 C3 BC 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 0805
 667+ 0805
 668+ 0805              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 0805              ; 1 cell straight
 670+ 0805 CD 1D 07     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 0808 CD 26 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 080B 22 05 82                     ld      (CUR_POS),HL    ; store it
 673+ 080E CD 61 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 0811                                                      ; DE is the address of the bottom right cell of the screen
 675+ 0811 22 09 82                     ld      (ENDTXT),HL     ; store it
 676+ 0814 ED 4B 05 82                  ld      BC,(CUR_POS)    ; load starting address
 677+ 0818 AF                           xor     A
 678+ 0819 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 081B CA F3 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 081E 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 0820 2A 09 82                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0823 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0824 E5                           push    HL
 684+ 0825 CD 45 4D                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0828 E1                           pop     HL
 686+ 0829 D2 34 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 082C CD A7 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 082F 23                           inc     HL              ; next cell
 689+ 0830 CD BC 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0833 2B                           dec     HL              ; decrement to old position
 691+ 0834 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0835 79                           ld      A,C
 693+ 0836 B0                           or      B               ; finished?
 694+ 0837 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0839 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 083B 2A 05 82                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 083E 32 FE 81                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0841 CD BC 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0844 C3 F3 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0847
 701+ 0847              ; delete the char at the left of the cursor
 702+ 0847 CD 1D 07     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 084A 2A F8 81                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 084D 44 4D                        ld      BC,HL           ; store into BC
 705+ 084F CD 26 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0852 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0854 AF                           xor     A               ; reset Carry
 708+ 0855 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0857 CA 81 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 085A ED 53 05 82                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 085E CD 61 0A                     call    ENDOFLN         ; check end of text
 712+ 0861 ED 5B 05 82                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0865 AF                           xor     A               ; reset Carry
 714+ 0866 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0868 CA 81 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 086B 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 086D EB                           ex      DE,HL           ; copy starting position into HL
 718+ 086E CD A7 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0871 2B                           dec     HL              ; 1 position to left
 720+ 0872 CD BC 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0875 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0876 23                           inc     HL
 723+ 0877 0B                           dec     BC              ; decrement # of chars
 724+ 0878 79                           ld      A,C
 725+ 0879 B0                           or      B               ; 0 chars?
 726+ 087A 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 087C 2B                           dec     HL
 728+ 087D AF                           xor     A
 729+ 087E CD BC 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0881 CD B3 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0884 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0887 C3 F3 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 088A
 734+ 088A
 735+ 088A              ; move cursor to left
 736+ 088A F5           CURSORLEFT:     push    AF              ; store A
 737+ 088B 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 088E A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 088F 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0891 3D                           dec     A               ; no, decrement X
 741+ 0892 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0895 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0898 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 089B 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 089D 3A FB 81     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 08A0 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 08A1 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 08A3 3D                           dec     A               ; no, decrement Y
 749+ 08A4 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 08A7 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 08AA 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 08AB 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 08AE CD ED 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 08B1 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 08B2 C9                           ret                     ; return to caller
 756+ 08B3
 757+ 08B3              ; move cursor 1 position to the left
 758+ 08B3 3A FA 81     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 08B6 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 08B7 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 08B9 3D                           dec     A               ; no, decrement X
 762+ 08BA 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 08BD 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 08C0 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08C3 C9                           ret                     ; go on moving cursor
 766+ 08C4 3A FB 81     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08C7 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08C8 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08CA 3D                           dec     A               ; no, decrement Y
 770+ 08CB 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08CE 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08D1 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08D2 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08D5 C9                           ret                     ; return to caller
 775+ 08D6
 776+ 08D6              ; move cursor up
 777+ 08D6 F5           CURSORUP:       push    AF              ; store A
 778+ 08D7 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08DA A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08DB 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08DD 3D                           dec     A               ; no, decrement Y
 782+ 08DE 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08E1 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08E4 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08E7 CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08EA CD ED 06                     call    MOVCRS          ; move cursor into new position
 787+ 08ED F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08EE C9                           ret                     ; return to caller
 789+ 08EF
 790+ 08EF
 791+ 08EF              ; move cursor to right
 792+ 08EF F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08F0 C5                           push    BC              ; store B
 794+ 08F1 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08F4 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08F5 47                           ld      B,A             ; move A into B
 797+ 08F6 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08F9 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08FA 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08FC 3C                           inc     A               ; no, so increment X
 801+ 08FD 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 0900 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 0903 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 0906 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 0908 3A F6 81     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 090B 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 090C 47                           ld      B,A             ; move bottom into B
 808+ 090D 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 0910 B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 0911 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 0913 3C                           inc     A               ; no, increment Y
 812+ 0914 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 0917 AF                           xor     A               ; move cursor to top left
 814+ 0918 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 091B CD 1D 07     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 091E CD ED 06                     call    MOVCRS          ; move cursor into new position
 817+ 0921 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0922 F1                           pop     AF              ; restore A
 819+ 0923 C9                           ret                     ; return to caller
 820+ 0924
 821+ 0924
 822+ 0924              ; move cursor down
 823+ 0924 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0925 C5                           push    BC              ; store B
 825+ 0926 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0929 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 092A 47                           ld      B,A             ; move X into B
 828+ 092B 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 092E B8                           cp      B               ; is current cursor position < 23?
 830+ 092F 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0931 3C                           inc     A               ; yes, increment Y
 832+ 0932 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0935 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0938 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 093B CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 093E CD ED 06                     call    MOVCRS          ; move cursor into new position
 837+ 0941 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0942 F1                           pop     AF              ; retrieve A
 839+ 0943 C9                           ret                     ; return to caller
 840+ 0944
 841+ 0944
 842+ 0944              ; set cursor on (visible on screen)
 843+ 0944 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0945 3A FF 81                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0948 B7                           or      A               ; is it on?
 846+ 0949 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 094B 3A F6 81                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 094E FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 0950 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0952 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0954 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 852+ 0957 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0958 C9                           ret                     ; return to caller
 854+ 0959
 855+ 0959              ; set cursor off (invisible on screen)
 856+ 0959 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 095A AF                           xor     A               ; cursor state OFF
 858+ 095B 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 859+ 095E F1                           pop     AF              ; restore AF
 860+ 095F C9                           ret
 861+ 0960
 862+ 0960              ; scroll the screen 1 row up
 863+ 0960 AF           SCROLLUP:       xor     A               ; reset A
 864+ 0961 57                           ld      D,A             ; reset D
 865+ 0962 32 01 82                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0965 2A F8 81                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0968 22 35 82                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 096B 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 096E 5F                           ld      E,A             ; move width into E
 870+ 096F 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 0970 22 37 82                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0973 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0976 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0977 47                           ld      B,A             ; move # of rows into B
 875+ 0978 3A F5 81     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 097B 5F                           ld      E,A             ; move width into E
 877+ 097C 2A 37 82                     ld      HL,(VIDTMP2)    ; load source address
 878+ 097F 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0981 ED 69                        out     (C),L           ; low byte of source
 880+ 0983 ED 61                        out     (C),H           ; high byte of source
 881+ 0985 21 0D 82                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0988 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 883+ 098A ~                            LM64K_NOP               ; added to compensate shorter instruction
 884+ 098A ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 098C 77                           ld      (HL),A          ; store char
 886+ 098D 23                           inc     HL              ; next cell of the buffer
 887+ 098E 1D                           dec     E               ; count the chars to be read
 888+ 098F 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0991 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0994 5F                           ld      E,A             ; move # of rows into E
 891+ 0995 16 00                        ld      D,$00           ; reset D
 892+ 0997 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 099A E5                           push    HL              ; store HL
 894+ 099B 2A 37 82                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 099E 22 35 82                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 09A1 19                           add     HL,DE           ; address of new
 897+ 09A2 22 37 82                     ld      (VIDTMP2),HL    ; source row
 898+ 09A5 E1                           pop     HL              ; restore address of current destination row
 899+ 09A6 CB F4                        set     6,H             ; writing mode
 900+ 09A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 901+ 09AA ED 69                        out     (C),L           ; low byte
 902+ 09AC ED 61                        out     (C),H           ; high byte of address
 903+ 09AE 21 0D 82                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 09B1 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 905+ 09B3 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 09B4 ED 79                        out     (C),A           ; send char
 907+ 09B6 23                           inc     HL              ; increment buffer index
 908+ 09B7 1D                           dec     E               ; next row
 909+ 09B8 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 09BA 10 BC                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 09BC 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 09BF 47                           ld      B,A             ; cells to empty into B
 913+ 09C0 AF                           xor     A               ; null char
 914+ 09C1 0E 32                        ld      C,VDP_SET       ; VDP set mode
 915+ 09C3 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09C6 CB F4                        set     6,H             ; writing mode
 917+ 09C8 ED 69                        out     (C),L           ; low byte then..
 918+ 09CA ED 61                        out     (C),H           ; high byte of address
 919+ 09CC 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 920+ 09CE ~                            LM64K_NOP               ; delay
 921+ 09CE ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09D0 00                           nop                     ; delay
 923+ 09D1 00                           nop
 924+ 09D2 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09D4 3E 01                        ld      A,$01
 926+ 09D6 32 01 82                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09D9 C9                           ret                     ; return to caller
 928+ 09DA
 929+ 09DA              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09DA              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09DA              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09DA              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09DA              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09DA              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09DA              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09DA              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09DA 3A FF 81                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09DD 32 0B 82                     ld      (TMPBFR4),A     ; store status
 939+ 09E0 A7                           and     A               ; is cursor on?
 940+ 09E1 C4 59 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09E4 CD 1D 07                     call    RSTCHRCRS       ; restore char under it
 942+ 09E7                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09E7 3A 3F 82                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09EA A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09EB CA 40 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09EE                              ; first part: look for the beginning of the text line on screen
 947+ 09EE CD 26 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09F1 22 05 82                     ld      (CUR_POS),HL    ; store it
 949+ 09F4 ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09F8 E5           RPTNLLSRC:      push    HL
 951+ 09F9 CD 45 4D                     call    CMP16           ; check if at "home"
 952+ 09FC E1                           pop     HL
 953+ 09FD CA 08 0A                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 0A00 2B                           dec     HL              ; go 1 step back
 955+ 0A01 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 0A04 A7                           and     A               ; is it $00 (null char)?
 957+ 0A05 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 0A07 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 0A08                              ; second part: look for the ending of the text on screen
 960+ 0A08 22 07 82     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 0A0B CD 61 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 0A0E 22 09 82                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 0A11 ED 5B 07 82                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 0A15 A7                           and     A               ; clear Carry
 965+ 0A16 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 0A18 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 0A1A                              ;---    central part: send the text on the screen to the interpreter
 968+ 0A1A 2A 07 82                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 0A1D ED 5B 09 82                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 0A21 CD A7 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A24 E5                           push    HL
 972+ 0A25 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A28 E1                           pop     HL
 974+ 0A29 23                           inc     HL              ; go to next char
 975+ 0A2A E5                           push    HL              ; store HL
 976+ 0A2B CD 45 4D                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A2E E1                           pop     HL
 978+ 0A2F 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A31 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A33 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A36 2A 09 82                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A39 CD 49 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A3C 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A3D 32 FB 81                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A40                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A40 AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A41 32 FA 81                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A44 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A47 3C                           inc     A               ; new row
 990+ 0A48 21 F6 81                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A4B BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A4C 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A4E 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A4F F5                           push    AF              ; (store A)
 995+ 0A50 CD 60 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A53 F1                           pop     AF              ; (retrieve A)
 997+ 0A54 32 FB 81     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A57 3A 0B 82                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A5A A7                           and     A               ; was it off (A=0)?
1000+ 0A5B C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A5E C3 E3 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A61
1003+ 0A61              ; find end of text line
1004+ 0A61              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A61              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A61 3A F6 81     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A64 5F                           ld      E,A             ; load screen height into DE
1008+ 0A65 3A F5 81                     ld      A,(SCR_SIZE_W)
1009+ 0A68 6F                           ld      L,A             ; load screen width into HL
1010+ 0A69 AF                           xor     A
1011+ 0A6A 67                           ld      H,A
1012+ 0A6B 57                           ld      D,A
1013+ 0A6C CD 50 4D                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A6F ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A73 19                           add     HL,DE           ; get the address...
1016+ 0A74 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A75 EB                           ex      DE,HL           ; store address into DE
1018+ 0A76 2A 05 82                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A79 E5           RPTNLLSRC2:     push    HL
1020+ 0A7A CD 45 4D                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A7D E1                           pop     HL
1022+ 0A7E C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A7F 23                           inc     HL              ; 1 more step forward
1024+ 0A80 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A83 A7                           and     A               ; is it $00 (null char)?
1026+ 0A84 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A86 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A87
1029+ 0A87
1030+ 0A87              ; ------------------------------------------------------------------------------
1031+ 0A87                              ; this table contains the values of the offsets to be added to
1032+ 0A87                              ; the starting address of the name table to find the correct
1033+ 0A87                              ; value of the first cell of the corresponding row
1034+ 0A87                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A87                              ; table for graphics 1 text mode: 32 cols
1036+ 0A87 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A8B 40 00 60 00
1036+ 0A8F 80 00 A0 00
1036+ 0A93 C0 00 E0 00
1037+ 0A97 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A9B 40 01 60 01
1037+ 0A9F 80 01 A0 01
1037+ 0AA3 C0 01 E0 01
1038+ 0AA7 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0AAB 40 02 60 02
1038+ 0AAF 80 02 A0 02
1038+ 0AB3 C0 02 E0 02
1039+ 0AB7                              ; table for pure text mode: 40 cols
1040+ 0AB7 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0ABB 50 00 78 00
1040+ 0ABF A0 00 C8 00
1040+ 0AC3 F0 00 18 01
1041+ 0AC7 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0ACB 90 01 B8 01
1041+ 0ACF E0 01 08 02
1041+ 0AD3 30 02 58 02
1042+ 0AD7 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0ADB D0 02 F8 02
1042+ 0ADF 20 03 48 03
1042+ 0AE3 70 03 98 03
1043+ 0AE7
1044+ 0AE7              ; ------------------------------------------------------------------------------
1045+ 0AE7              ; reset VRAM
1046+ 0AE7 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AE8 67                           ld      H,A
1048+ 0AE9 6F                           ld      L,A             ; reset HL
1049+ 0AEA CD 87 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0AED 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0AEF 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0AF0 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1053+ 0AF2 ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AF4 14                           inc     D               ; next cell
1055+ 0AF5 00                           nop
1056+ 0AF6 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AF8 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AFA C9                           ret                     ; return to caller
1059+ 0AFB
1060+ 0AFB              ; clear video registers in SRAM
1061+ 0AFB 21 F5 81     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0AFE AF                           xor     A               ; $00 to clean the registers
1063+ 0AFF 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0B01 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0B02 23                           inc     HL              ; next register
1066+ 0B03 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0B05 C9                           ret                     ; return to caller
1068+ 0B06
1069+ 0B06              ; ------------------------------------------------------------------------------
1070+ 0B06              ; set a specific graphics mode, passed into reg. E
1071+ 0B06 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0B08 CB 23                        sla     E               ; multiply E by 8..
1073+ 0B0A CB 23                        sla     E               ; so that reg. E can point..
1074+ 0B0C CB 23                        sla     E               ; to the correct settings
1075+ 0B0E 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0B10 21 43 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0B13 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0B14 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0B16 0E 32                        ld      C,VDP_SET       ; VDP set
1080+ 0B18 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0B19 ED 51                        out     (C),D           ; send data to VDP
1082+ 0B1B ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0B1D 3C                           inc     A               ; next register
1084+ 0B1E 23                           inc     HL              ; next value
1085+ 0B1F 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0B21 C9                           ret
1087+ 0B22
1088+ 0B22              ; ------------------------------------------------------------------------------
1089+ 0B22              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0B22                              ; reg. HL contains address of pattern table into VRAM
1091+ 0B22 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B24 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B26 0E 32                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B28 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B2A ED 61                        out     (C),H           ; send high byte
1096+ 0B2C 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1097+ 0B2E 21 7B 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B31 A7                           and     A               ; is it text mode (A=0)?
1099+ 0B32 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B34 21 7B 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B37 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B39 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B3A ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B3C 23                           inc     HL              ; inc byte pointer
1105+ 0B3D 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B3E 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B40 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B42 C9                           ret                     ; return to caller
1109+ 0B43
1110+ 0B43              ;------------------------------------------------------------------------------
1111+ 0B43              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B43              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B43              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B43
1115+ 0B43                              ; VDP register settings for a text display
1116+ 0B43 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B44 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B45 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B46 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B47 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B48 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B49 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B4A F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B4B
1125+ 0B4B              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B4B 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B4C C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B4D 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B4E 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B4F 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B50 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B51 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B52 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B53
1135+ 0B53              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B53 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B54 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B55 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B56 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B57 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B58 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B59 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B5A 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B5B
1145+ 0B5B              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B5B 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B5C CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B5D 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B5E 00                           defb    $00             ; reg.3: don't care
1150+ 0B5F 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B60 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B61 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B62 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B63
1155+ 0B63              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B63 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B64 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B65 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B66 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B67 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B68 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B69 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B6A 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B6B
1165+ 0B6B              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B6B                              ; 1st band
1167+ 0B6B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B6F 00 00 00 00
1167+ 0B73 00 00 00 00
1167+ 0B77 00 00 00 00
1167+ 0B7B 00 00 00 00
1167+ 0B7F 00 00 00 00
1167+ 0B83 00 00 00 00
1167+ 0B87 00 00 00 00
1168+ 0B8B 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B8F 0B 10 00 00
1168+ 0B93 00 00 00 00
1168+ 0B97 00 00 00 00
1168+ 0B9B 00 00 00 00
1168+ 0B9F 00 00 00 00
1168+ 0BA3 00 00 00 00
1168+ 0BA7 00 00 00 00
1169+ 0BAB                              ; 2nd band
1170+ 0BAB 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0BAF 00 0C 00 00
1170+ 0BB3 00 01 00 00
1170+ 0BB7 00 14 00 00
1170+ 0BBB 06 05 06 15
1170+ 0BBF 16 07 06 15
1170+ 0BC3 16 07 06 01
1170+ 0BC7 01 07 00 00
1171+ 0BCB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BCF 00 0C 00 00
1171+ 0BD3 00 01 00 00
1171+ 0BD7 00 01 14 06
1171+ 0BDB 01 05 03 05
1171+ 0BDF 03 05 03 05
1171+ 0BE3 03 05 03 05
1171+ 0BE7 03 05 00 00
1172+ 0BEB                              ; 3rd band
1173+ 0BEB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BEF 00 0C 00 00
1173+ 0BF3 00 01 00 00
1173+ 0BF7 00 01 01 01
1173+ 0BFB 01 05 09 14
1173+ 0BFF 13 08 03 05
1173+ 0C03 13 05 03 05
1173+ 0C07 00 00 00 00
1174+ 0C0B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0C0F 00 0C 00 00
1174+ 0C13 00 01 00 00
1174+ 0C17 00 01 00 08
1174+ 0C1B 03 05 06 15
1174+ 0C1F 16 07 03 01
1174+ 0C23 16 05 03 05
1174+ 0C27 00 00 00 00
1175+ 0C2B                              ; 4th band
1176+ 0C2B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C2F 00 0C 00 00
1176+ 0C33 00 01 00 00
1176+ 0C37 00 01 00 00
1176+ 0C3B 03 05 03 05
1176+ 0C3F 03 05 03 05
1176+ 0C43 03 05 03 05
1176+ 0C47 03 05 00 00
1177+ 0C4B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C4F 00 0C 00 00
1177+ 0C53 00 01 04 04
1177+ 0C57 00 01 00 00
1177+ 0C5B 03 05 09 14
1177+ 0C5F 13 08 09 14
1177+ 0C63 13 08 09 01
1177+ 0C67 01 08 00 00
1178+ 0C6B                              ; 5th band
1179+ 0C6B 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C6F 12 11 00 00
1179+ 0C73 00 00 00 00
1179+ 0C77 00 00 00 00
1179+ 0C7B 00 00 00 00
1179+ 0C7F 00 00 00 00
1179+ 0C83 00 00 00 00
1179+ 0C87 00 00 00 00
1180+ 0C8B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C8F 00 00 00 00
1180+ 0C93 00 00 00 00
1180+ 0C97 00 00 00 00
1180+ 0C9B 00 00 00 00
1180+ 0C9F 00 00 00 00
1180+ 0CA3 00 00 00 00
1180+ 0CA7 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0CAB
  78  0CAB              ; incude the latest version of the PSG module
  79  0CAB                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0CAB              ; ------------------------------------------------------------------------------
   2+ 0CAB              ; LM80C - PSG ROUTINES - 1.1
   3+ 0CAB              ; ------------------------------------------------------------------------------
   4+ 0CAB              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0CAB              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0CAB              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0CAB              ; kind of warranty: you can use them at your own risk.
   8+ 0CAB              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0CAB              ; maintain the copyright notices, include this advice and the note to the
  10+ 0CAB              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0CAB              ; redistribuite them.
  12+ 0CAB              ; https://www.leonardomiliani.com
  13+ 0CAB              ;
  14+ 0CAB              ; Please support me by visiting the following links:
  15+ 0CAB              ; Main project page: https://www.leonardomiliani.com
  16+ 0CAB              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0CAB              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0CAB              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0CAB              ; ------------------------------------------------------------------------------
  20+ 0CAB              ;
  21+ 0CAB              ; ------------------------------------------------------------------------------
  22+ 0CAB
  23+ 0CAB              ;------------------------------------------------------------------------------
  24+ 0CAB
  25+ 0CAB              ; configure the PSG
  26+ 0CAB 21 39 82     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0CAE 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0CB0 AF                           xor     A               ; reset A
  29+ 0CB1 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0CB2 23                           inc     HL              ; next register
  31+ 0CB3 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0CB5 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0CB7 21 C9 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0CBA 16 00                        ld      D,$00           ; first register
  35+ 0CBC 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0CBD CD 03 0D                     call    SETSNDREG       ; select register
  37+ 0CC0 7E                           ld      A,(HL)          ; load value
  38+ 0CC1 CD 08 0D                     call    WRTSNDREG       ; write to register
  39+ 0CC4 14                           inc     D               ; next register
  40+ 0CC5 23                           inc     HL              ; next value
  41+ 0CC6 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CC8 C9                           ret                     ; return to caller
  43+ 0CC9
  44+ 0CC9 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CCD 00 00 00 BF
  45+ 0CD1 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CD5 00 00 FF FF
  46+ 0CD9                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CD9
  48+ 0CD9
  49+ 0CD9              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CD9 21 F3 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CDC C3 E2 0C                     jp      SENDSND
  52+ 0CDF 21 FB 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CE2 C5           SENDSND:        push    BC
  54+ 0CE3 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CE5 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CE6 CD 03 0D                     call    SETSNDREG
  57+ 0CE9 23                           inc     HL              ; next cell
  58+ 0CEA 7E                           ld      A,(HL)          ; read value
  59+ 0CEB CD 08 0D                     call    WRTSNDREG
  60+ 0CEE 23                           inc     HL
  61+ 0CEF 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CF1 C1                           pop     BC
  63+ 0CF2 C9                           ret                     ; return to caller
  64+ 0CF3
  65+ 0CF3 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CF7 05 00 0A 0F
  66+ 0CFB 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CFF 0A 00 07 BF
  67+ 0D03
  68+ 0D03
  69+ 0D03              ; select register on PSG
  70+ 0D03 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0D05 ED 79                        out     (C),A           ; set register
  72+ 0D07 C9                           ret                     ; return to caller
  73+ 0D08
  74+ 0D08              ; send data to PSG
  75+ 0D08 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0D0A ED 79                        out     (C),A           ; send data
  77+ 0D0C C9                           ret                     ; return to caller
  78+ 0D0D
  79+ 0D0D              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0D0D              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0D0D              ; shut off the audio channel whose counter has reached 0.
  82+ 0D0D              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0D0D DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0D0F DD 21 39 82                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0D13 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0D15 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0D17 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0D1A DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0D1D 7B                           ld      A,E             ; load E into A
  90+ 0D1E B2                           or      D               ; check that DE=0
  91+ 0D1F 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0D21 1B                           dec     DE              ; no, so decrement DE
  93+ 0D22 7B                           ld      A,E             ; reload E into A...
  94+ 0D23 DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D26 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D29 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D2A 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D2C                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D2C                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D2C                                                      ; then set 0 into its tone registers
 101+ 0D2C 16 07                        ld      D,$07           ; mixer register
 102+ 0D2E 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D30 ED 51                        out     (C),D           ; set mixer register
 104+ 0D32 ED 78                        in      A,(C)           ; load current value
 105+ 0D34 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D35 ED 51                        out     (C),D           ; select mixer register
 107+ 0D37 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D39 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D3B 3E 03                        ld      A,$03           ; three channels
 110+ 0D3D 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D3E 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D3F 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D41 ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D43 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D45 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D47 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D49 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D4B 3C                           inc     A               ; next tone register
 119+ 0D4C ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D4E 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D50 ED 69                        out     (C),L           ; write 0 into register
 122+ 0D52 DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D54 DD 23                        inc     IX              ; ...next channel...
 124+ 0D56 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D58 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D5A DD E1                        pop     IX              ; restore IX
 127+ 0D5C C9                           ret                     ; return to caller
 128+ 0D5D
 129+ 0D5D              ; read a specific row of the keyboard matrix, set by A
 130+ 0D5D              ; return read into A
 131+ 0D5D C5           READKBLN:       push    BC              ; store BC
 132+ 0D5E 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D60 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D62 ED 41                        out     (C),B           ; select reg #15
 135+ 0D64 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D66 ED 79                        out     (C),A           ; activate the row
 137+ 0D68 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D6A 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D6C ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D6E ED 78                        in      A,(C)           ; read register #14
 141+ 0D70 C1                           pop     BC              ; retrieve BC
 142+ 0D71 C9                           ret
 143+ 0D72
 144+ 0D72              ; read the keyboard matrix to look for a key pressure
 145+ 0D72 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D74 06 07                        ld      B,$07           ; set register #7...
 147+ 0D76 ED 41                        out     (C),B           ; ...to work with
 148+ 0D78 ED 78                        in      A,(C)           ; read register #7
 149+ 0D7A CB FF                        set     7,A             ; port A set to output
 150+ 0D7C CB B7                        res     6,A             ; port B set to input
 151+ 0D7E ED 41                        out     (C),B           ; set register #7
 152+ 0D80 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D82 ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D84                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D84 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D86 CD 5D 0D                     call    READKBLN        ; read row
 157+ 0D89 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D8B 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D8D 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D90 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D92 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D94 CD 5D 0D                     call    READKBLN        ; read ALT row
 163+ 0D97 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D99 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D9B 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D9E 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0DA0 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0DA2 CD 5D 0D                     call    READKBLN        ; read CTRL row
 169+ 0DA5 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0DA7 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0DA9 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0DAC 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0DAE 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0DB0 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0DB2 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0DB4 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0DB6 ED 51                        out     (C),D           ; select reg. #15
 178+ 0DB8 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0DBA ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0DBC 5F                           ld      E,A             ; save current line into E
 181+ 0DBD 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0DBF 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0DC1 ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0DC3 00                           nop
 185+ 0DC4 ED 78                        in      A,(C)           ; read register #14
 186+ 0DC6 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DC8 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DCA                              ; check control keys
 189+ 0DCA 32 40 82                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DCD 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DCE FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DD0 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DD2 3A 40 82                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DD5 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DD7 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DD9 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DDB FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DDD 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DDF 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DE1 FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DE3 3A 40 82                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DE6 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DE8 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DEA 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DEC CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DEE CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DF0 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DF2 CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DF4 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DF6 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DF8 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DF9 0F                           rrca                    ; rotate right by 1
 213+ 0DFA 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DFC AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DFD 32 42 82                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0E00 32 46 82                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0E03 32 3F 82                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0E06 32 43 82                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0E09 C9                           ret                     ; ...and leave
 220+ 0E0A 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0E0C 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0E0D CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0E0F 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0E11 3A 46 82                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0E14 21 2D 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0E17 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0E19 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0E1B 21 6D 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0E1E 18 10                        jr      LOADMAP         ; and load it
 230+ 0E20 FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0E22 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E24 21 ED 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E27 18 07                        jr      LOADMAP         ; and load it
 234+ 0E29 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E2B 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E2D 21 AD 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E30 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E31 48                           ld      C,B             ; move B into C and...
 239+ 0E32 CB 21                        sla     C               ; ...multiply it...
 240+ 0E34 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E36 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E38 06 00                        ld      B,$00           ; reset B
 243+ 0E3A 09                           add     HL,BC           ; find the address of the current row
 244+ 0E3B 50                           ld      D,B             ; reset D
 245+ 0E3C 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E3D 3A 42 82                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E40 BE                           cp      (HL)            ; is it the same key?
 248+ 0E41 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E43 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E45 2A E5 81                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E48 ED 5B 44 82                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E4C 3A 43 82                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E4F FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E51 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E53 AF                           xor     A               ; clear Carry
 256+ 0E54 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E56 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E58 3A B3 80                     ld      A,(KEYDEL)
 259+ 0E5B 5F                           ld      E,A
 260+ 0E5C CD 45 4D                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E5F DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E62 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E64 32 43 82                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E67 2A E5 81                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E6A 22 44 82                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E6D 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E6F C3 91 0E                     jp      SENDKEY         ; send key
 268+ 0E72 AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E73 ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E75 16 00                        ld      D,$00
 271+ 0E77 3A B4 80                     ld      A,(AUTOKE)
 272+ 0E7A 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E7B CD 45 4D                     call    CMP16           ; check if interval is greater than delay
 274+ 0E7E DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E81 C3 62 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E84 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E85 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E86 32 43 82                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E89 ED 4B E5 81                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E8D ED 43 44 82                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E91 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E92 32 42 82                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E95 32 41 82                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E98 32 02 82                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E9B FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E9D 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E9F CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0EA2 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0EA4 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0EA7 21 25 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0EAA BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0EAB CA D9 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0EAE 0C                           inc     C               ; next FN key
 294+ 0EAF 23                           inc     HL              ; next FN key code
 295+ 0EB0 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0EB2 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0EB4 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 298+ 0EB7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0EBA B7                           or      A               ; is the print-on-video disabled?
 300+ 0EBB CA C4 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0EBE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0EC1 B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0EC2 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EC4 AF           PUTCHRBUF:      xor     A
 305+ 0EC5 32 3F 82                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EC8 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0ECB CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0ECE C3 D4 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0ED1 CD 78 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0ED4 AF           LVKBRDCHK2:     xor     A
 311+ 0ED5 32 46 82                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0ED8 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0ED9                              ; manage FN keys
 314+ 0ED9 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EDA 2A AF 80                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EDD 23                           inc     HL              ; -1 means direct statement
 317+ 0EDE 7C                           ld      A,H
 318+ 0EDF B5                           or      L
 319+ 0EE0 7A                           ld      A,D             ; retrieve char
 320+ 0EE1 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EE3 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EE4 87                           add     A,A
 323+ 0EE5 87                           add     A,A
 324+ 0EE6 87                           add     A,A
 325+ 0EE7 87                           add     A,A             ; FN key number * 16
 326+ 0EE8 4F                           ld      C,A             ; move it into C
 327+ 0EE9 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EEB 21 B5 80                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0EEE 09                           add     HL,BC           ; get correct text address
 330+ 0EEF 06 10                        ld      B,$10           ; 16 chars
 331+ 0EF1 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0EF2 A7                           and     A               ; null char?
 333+ 0EF3 CA D4 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0EF6 57                           ld      D,A             ; pass char into D
 335+ 0EF7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0EFA B7                           or      A               ; is the print-on-video disabled?
 337+ 0EFB CA 0B 0F                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EFE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0F01 B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0F02 C4 18 0F                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0F05 23           CNTFNK:         inc     HL              ; next char
 342+ 0F06 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0F08 C3 D4 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0F0B AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0F0C 32 3F 82                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0F0F 7A                           ld      A,D             ; retrieve char
 347+ 0F10 E5                           push    HL              ; store HL
 348+ 0F11 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0F14 E1                           pop     HL              ; retrieve HL
 350+ 0F15 C3 05 0F                     jp      CNTFNK          ; repeat
 351+ 0F18 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0F19 32 02 82                     ld      (CHR4VID),A     ; store char for printing
 353+ 0F1C 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0F1E 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 355+ 0F21 CD 78 07                     call    CHAR2VID        ; print on screen
 356+ 0F24 C9                           ret                     ; return to caller
 357+ 0F25
 358+ 0F25
 359+ 0F25              ;-----------------------------------------------------------------------
 360+ 0F25 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F29 06 16 17 18
 361+ 0F2D              ;-----------------------------------------------------------------------
 362+ 0F2D              ; key codes
 363+ 0F2D 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F31 20 10 71 32
 364+ 0F35 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F39 7A 73 65 34
 365+ 0F3D 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F41 63 66 74 36
 366+ 0F45 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F49 62 68 75 38
 367+ 0F4D 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F51 6D 6B 6F 30
 368+ 0F55 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F59 2E 3A 2D 1E
 369+ 0F5D 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F61 1B 3D 2B 1D
 370+ 0F65 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F69 01 02 04 18
 371+ 0F6D
 372+ 0F6D              ; shifted codes - not all the keys have the shifted version
 373+ 0F6D 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F71 20 10 51 22
 374+ 0F75 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F79 5A 53 45 24
 375+ 0F7D 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F81 43 46 54 26
 376+ 0F85 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F89 42 48 55 28
 377+ 0F8D 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F91 4D 4B 4F 5E
 378+ 0F95 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F99 3E 5B 5F 1E
 379+ 0F9D 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0FA1 1B C6 2B 1D
 380+ 0FA5 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0FA9 05 06 16 17
 381+ 0FAD
 382+ 0FAD              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0FAD 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0FB1 20 10 DE C4
 384+ 0FB5 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0FB9 83 82 A5 34
 385+ 0FBD 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0FC1 9D A3 A8 36
 386+ 0FC5 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FC9 9E AC D5 38
 387+ 0FCD 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FD1 A0 D7 87 C3
 388+ 0FD5 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FD9 C0 7B 90 1E
 389+ 0FDD 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FE1 1B D1 94 1D
 390+ 0FE5 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FE9 05 06 16 17
 391+ 0FED
 392+ 0FED              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FED 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FF1 20 10 9A 32
 394+ 0FF5 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FF9 98 96 99 34
 395+ 0FFD 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 1001 B1 AF A5 36
 396+ 1005 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 1009 B3 A9 A7 38
 397+ 100D 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 1011 AB B5 A4 30
 398+ 1015 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 1019 2E 3A BA 1E
 399+ 101D 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 1021 1B D4 B9 1D
 400+ 1025 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1029 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  102D
  81  102D              ; include the latest versions of the CF & DOS modules
  82  102D                  INCLUDE "../include/dos/bios-1.01.asm"
# file opened: ../include/dos/bios-1.01.asm
   1+ 102D              ; ------------------------------------------------------------------------------
   2+ 102D              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 102D              ; ------------------------------------------------------------------------------
   4+ 102D              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 102D              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 102D              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 102D              ; kind of warranty: you can use them at your own risk.
   8+ 102D              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 102D              ; maintain the copyright notices, include this advice and the note to the
  10+ 102D              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 102D              ; redistribuite them.
  12+ 102D              ; https://www.leonardomiliani.com
  13+ 102D              ;
  14+ 102D              ; Please support me by visiting the following links:
  15+ 102D              ; Main project page: https://www.leonardomiliani.com
  16+ 102D              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 102D              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 102D              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 102D              ; ------------------------------------------------------------------------------
  20+ 102D              ;
  21+ 102D              ; ------------------------------------------------------------------------------
  22+ 102D              ; Code Revision:
  23+ 102D              ; R1.0  - 20210307 - first release
  24+ 102D              ; R1.01 - 2021xxxx -
  25+ 102D              ;
  26+ 102D              ;------------------------------------------------------------------------------
  27+ 102D
  28+ 102D              ; equates for CF at port $50
  29+ 102D              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  30+ 102D              CF_ERR:         equ %01010001   ; ($51) Error (R)
  31+ 102D              CF_FTR:         equ %01010001   ; ($51) Features (W)
  32+ 102D              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  33+ 102D              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  34+ 102D              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  35+ 102D              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  36+ 102D              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  37+ 102D              CF_STAT:        equ %01010111   ; ($57) Status (R)
  38+ 102D              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  39+ 102D
  40+ 102D
  41+ 102D              ;------------------------------------------------------------------------------
  42+ 102D              ; R O U T I N E S
  43+ 102D              ;------------------------------------------------------------------------------
  44+ 102D
  45+ 102D              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  46+ 102D CD 43 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  47+ 1030 CD 91 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  48+ 1033 D8                       ret     C               ; no card or I/O error, leave
  49+ 1034 3E 01                    ld      A,$01           ; 8-bit mode
  50+ 1036 D3 51                    out     (CF_FTR),A      ; set mode
  51+ 1038 CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  52+ 103B 3E EF                    ld      A,$EF           ; command to set mode
  53+ 103D D3 57                    out     (CF_CMD),A      ; execute command
  54+ 103F CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  55+ 1042 C9                       ret                     ; return to caller
  56+ 1043
  57+ 1043
  58+ 1043              ; a NOP command, just used to wake up the CF card
  59+ 1043 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  60+ 1045 D3 51                    out     (CF_FTR),A      ; send it
  61+ 1047 3E EF                    ld      A,$EF           ; set mode command
  62+ 1049 D3 57                    out     (CF_CMD),A      ; execute NOP
  63+ 104B C9                       ret                     ; return to caller
  64+ 104C
  65+ 104C
  66+ 104C              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  67+ 104C DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  68+ 104E 07                       rlca                    ; copy bit #7 into the Carry
  69+ 104F DA 4C 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  70+ 1052 C9                       ret                     ; bit #7 cleared - return to caller
  71+ 1053
  72+ 1053
  73+ 1053              ; check that CF is ready to get commands
  74+ 1053 DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  75+ 1055 CB 47                    bit     0,A             ; any error?
  76+ 1057 20 07                    jr      NZ,RETERR       ; yes, return error
  77+ 1059 E6 C0                    and     %11000000       ; check only bits #6 & #7
  78+ 105B EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  79+ 105D 20 F4                    jr      NZ,CF_CMDRDY    ; wait
  80+ 105F C9                       ret                     ; return to caller
  81+ 1060 37           RETERR:     scf                     ; set carry flag
  82+ 1061 C9                       ret                     ; return
  83+ 1062
  84+ 1062
  85+ 1062              ; wait until data is ready to be read
  86+ 1062 DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  87+ 1064 CB 47                    bit     0,A             ; any error?
  88+ 1066 20 F8                    jr      NZ,RETERR       ; yes, return error
  89+ 1068 E6 88                    and     %10001000       ; check only bits #7 & #3
  90+ 106A EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  91+ 106C 20 F4                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  92+ 106E C9                       ret                     ; return to caller
  93+ 106F
  94+ 106F
  95+ 106F              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
  96+ 106F CD 53 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
  97+ 1072 3E 01                    ld      A,$01           ; 1 sector at a time
  98+ 1074 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
  99+ 1076 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 100+ 1079 79                       ld      A,C             ; load LBA0 byte
 101+ 107A D3 53                    out     (CF_LBA0),A     ; send it
 102+ 107C CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 103+ 107F 78                       ld      A,B             ; load LBA1 byte
 104+ 1080 D3 54                    out     (CF_LBA1),A     ; send it
 105+ 1082 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 106+ 1085 7B                       ld      A,E             ; load LBA2 byte
 107+ 1086 D3 55                    out     (CF_LBA2),A     ; send it
 108+ 1088 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 109+ 108B 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 110+ 108D B2                       or      D               ; add LBA sector
 111+ 108E D3 56                    out     (CF_LBA3),A     ; send it
 112+ 1090 C9                       ret                     ; return to caller
 113+ 1091
 114+ 1091
 115+ 1091              ; check if device is available & ready - try a bit of times, then exit with
 116+ 1091              ; error if no response, otherwise wait until device is ready
 117+ 1091              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 118+ 1091 C5           CR_DEV_RDY: push    BC              ; store HL
 119+ 1092 06 00                    ld      B,$00           ; 256 tries
 120+ 1094 0E 57                    ld      C,CF_STAT       ; address of status register
 121+ 1096 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 122+ 1098 FE 40                    cp      %01000000       ; busy=0, rdy=1
 123+ 109A 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 124+ 109C FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 125+ 109E 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 126+ 10A0 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 127+ 10A2 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 128+ 10A3 C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 129+ 10A4 C9                       ret                     ; return to caller
 130+ 10A5
 131+ 10A5
 132+ 10A5              ; put the CF into stand-by mode
 133+ 10A5 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 134+ 10A7 D3 56                    out 	(CF_LBA3),A     ; send configuration
 135+ 10A9 3E 92                    ld      A,$92           ; standby mode
 136+ 10AB D3 57                    out     (CF_CMD),A      ; send command
 137+ 10AD CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
 138+ 10B0 C9                       ret                     ; return to caller
 139+ 10B1
 140+ 10B1
 141+ 10B1              ;***************************************************************************
 142+ 10B1              ; CF_RD_SEC
 143+ 10B1              ; Function: load a sector (512 bytes) into RAM buffer.
 144+ 10B1              ;***************************************************************************
 145+ 10B1 CD 53 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 146+ 10B4 D8                       ret     C               ; return if error
 147+ 10B5 3E 20                    ld      A,$20           ; Prepare read command
 148+ 10B7 D3 57                    out     (CF_CMD),A      ; Send read command
 149+ 10B9 CD 62 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 150+ 10BC D8                       ret     C               ; return if error
 151+ 10BD DB 57                    in      A,(CF_STAT)     ; Read status
 152+ 10BF E6 01                    and     %00000001       ; mask off error bit
 153+ 10C1 C2 B1 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 154+ 10C4              ; read CF buffer after it's been filled up by a previous command
 155+ 10C4              ; and store data into the I/O buffer
 156+ 10C4 C5           CF_RD_CMD:  push    BC              ; store BC
 157+ 10C5 E5                       push    HL              ; store HL
 158+ 10C6 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 159+ 10C9 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 160+ 10CB CD 62 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 161+ 10CE 38 0A                    jr      C,CF_RD_EXIT
 162+ 10D0 DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 163+ 10D2 77                       ld      (HL),A          ; store into buffer
 164+ 10D3 23                       inc     HL              ; next location
 165+ 10D4 DB 50                    in      A,(CF_DATA)     ; get another byte
 166+ 10D6 77                       ld      (HL),A          ; store it
 167+ 10D7 23                       inc     HL              ; next location
 168+ 10D8 10 F6                    djnz    CF_RD_SECT      ; repeat
 169+ 10DA E1           CF_RD_EXIT: pop     HL              ; retrieve HL
 170+ 10DB C1                       pop     BC              ; retrieve BC
 171+ 10DC C9                       ret                     ; return to caller
 172+ 10DD
 173+ 10DD
 174+ 10DD              ;***************************************************************************
 175+ 10DD              ; CF_WR_SEC
 176+ 10DD              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 177+ 10DD              ;***************************************************************************
 178+ 10DD C5           CF_WR_SEC:  push    BC              ; store BC
 179+ 10DE D5                       push    DE              ; store DE
 180+ 10DF E5                       push    HL              ; store HL
 181+ 10E0 CD 6F 10                 call    CF_SETSTR       ; set sector
 182+ 10E3 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 183+ 10E6 38 1D                    jr      C,CF_WR_EXIT               ; return if error
 184+ 10E8 3E 30                    ld      A,$30           ; set write command
 185+ 10EA D3 57                    out     (CF_CMD),A      ; send command
 186+ 10EC CD 62 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 187+ 10EF 38 14                    jr      C,CF_WR_EXIT    ; return if error
 188+ 10F1 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10F4 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10F6 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10F8 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10F9 D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10FB 23                       inc     HL              ; next location
 194+ 10FC 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10FE 1D                       dec     E               ; 2 cycles
 196+ 10FF 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 1101 CD 4C 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 1104 AF                       xor     A               ; clear Carry
 199+ 1105 E1           CF_WR_EXIT: pop     HL              ; retrieve HL
 200+ 1106 D1                       pop     DE              ; retrieve DE
 201+ 1107 C1                       pop     BC              ; retrieve BC
 202+ 1108 C9                       ret                     ; return to caller
 203+ 1109
# file closed: ../include/dos/bios-1.01.asm
  83  1109                  INCLUDE "../include/dos/dos-1.02.asm"
# file opened: ../include/dos/dos-1.02.asm
   1+ 1109              ; ------------------------------------------------------------------------------
   2+ 1109              ; LM80C 64K - DOS ROUTINES - R1.02
   3+ 1109              ; ------------------------------------------------------------------------------
   4+ 1109              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1109              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1109              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1109              ; kind of warranty: you can use them at your own risk.
   8+ 1109              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1109              ; maintain the copyright notices, include this advice and the note to the
  10+ 1109              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1109              ; redistribuite them.
  12+ 1109              ; https://www.leonardomiliani.com
  13+ 1109              ;
  14+ 1109              ; Please support me by visiting the following links:
  15+ 1109              ; Main project page: https://www.leonardomiliani.com
  16+ 1109              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1109              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1109              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1109              ; ------------------------------------------------------------------------------
  20+ 1109              ;
  21+ 1109              ; ------------------------------------------------------------------------------
  22+ 1109              ; Code Revision:
  23+ 1109              ; R1.0  - 20210306 - first release
  24+ 1109              ; R1.01 - 20210309 - code cleaning & optimization - new behaviour for ERASE (full erase everything)
  25+ 1109              ; R1.02 - 20210310 - code optimization - new UNDELETE feature for DISK statement
  26+ 1109              ;
  27+ 1109              ;------------------------------------------------------------------------------
  28+ 1109
  29+ 1109
  30+ 1109 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.02",$00     ; disk header
  30+ 110D 43 20 44 4F
  30+ 1111 53 00 31 2E
  30+ 1115 30 32 00
  31+ 1118 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  32+ 111A
  33+ 111A              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  34+ 111A              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  35+ 111A              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  36+ 111A              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  37+ 111A              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  38+ 111A              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  39+ 111A              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  40+ 111A              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  41+ 111A              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  42+ 111A              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  43+ 111A              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  44+ 111A              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  45+ 111A              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  46+ 111A              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  47+ 111A              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  48+ 111A
  49+ 111A              ; *****************************************************************************
  50+ 111A              ; D I S K    I N I T
  51+ 111A              ; Functions: format a disk creating a fresh new file system on disk or
  52+ 111A              ;            rewrite only the Master Sector
  53+ 111A              ; *****************************************************************************
  54+ 111A 3A B4 81     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  55+ 111D 32 05 82                 ld      (TMPBFR1),A     ; save onto another location for later use
  56+ 1120 CD D8 18                 call    CLRIOBF         ; clear I/O buffer
  57+ 1123 CD ED 18                 call    CLRDOSBF        ; clear DOS buffer
  58+ 1126 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  59+ 1128 D3 56                    out 	(CF_LBA3),A     ; send configuration
  60+ 112A 3E EC                    ld      A,$EC           ; select "drive ID" command
  61+ 112C D3 57                    out     (CF_CMD),A      ; send command
  62+ 112E CD 62 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  63+ 1131 CD C4 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  64+ 1134 ED 5B 98 81              ld      DE,(DOSBFR)     ; address of default conf. buffer
  65+ 1138 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  66+ 113B 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  67+ 113E 09                       add     HL,BC           ; set into HL
  68+ 113F 0E 04                    ld      C,$04           ; 4 bytes to copy
  69+ 1141 ED B0                    ldir                    ; copy (DE is auto-incremented)
  70+ 1143 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  71+ 1146 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  72+ 1149 09                       add     HL,BC           ; get position of data
  73+ 114A ED B0                    ldir                    ; copy (DE is auto-incremented)
  74+ 114C 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  75+ 114F 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  76+ 1152 09                       add     HL,BC           ; get position of data
  77+ 1153 0E 02                    ld      C,$02           ; 2 bytes to copy
  78+ 1155 ED B0                    ldir                    ; copy (DE is auto-incremented)
  79+ 1157 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  80+ 115A 01 06 00                 ld      BC,$0006        ; address of number of heads
  81+ 115D 09                       add     HL,BC           ; get position of data
  82+ 115E 0E 02                    ld      C,$02           ; 2 bytes to copy
  83+ 1160 ED B0                    ldir                    ; copy (DE is auto-incremented)
  84+ 1162                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  85+ 1162 ED 53 B4 81              ld      (TPBF4),DE      ; store current pointer to temp. default conf. buffer
  86+ 1166 2A 98 81                 ld      HL,(DOSBFR)     ; load number of sectors
  87+ 1169 4E                       ld      C,(HL)          ; MSB into AC
  88+ 116A 23                       inc     HL
  89+ 116B 7E                       ld      A,(HL)
  90+ 116C 23                       inc     HL
  91+ 116D 5E                       ld      E,(HL)          ; LSB into DE
  92+ 116E 23                       inc     HL
  93+ 116F 56                       ld      D,(HL)
  94+ 1170 D5                       push    DE              ; move DE into IX
  95+ 1171 DD E1                    pop     IX
  96+ 1173 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  97+ 1176 CD C4 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  98+ 1179 47                       ld      B,A             ; now result is into BCIX
  99+ 117A B1                       or      C               ; BC=$0000?
 100+ 117B 28 05                    jr      Z,DOS_FTC       ; yes, but.....
 101+ 117D 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 102+ 1180 18 0E                    jr      DOS_FT1         ; jump over
 103+ 1182 DD E5        DOS_FTC:    push    IX              ; move IX into DE
 104+ 1184 D1                       pop     DE              ; now result is into BCDE
 105+ 1185 7C                       ld      A,H             ; remainder = zero?
 106+ 1186 B5                       or      L
 107+ 1187 CA 90 11                 jp      Z,DOS_FT1       ; yes, jump over
 108+ 118A 13                       inc     DE              ; no, increment DE
 109+ 118B 7A                       ld      A,D             ; check if DE is zero
 110+ 118C B3                       or      E
 111+ 118D 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 112+ 118F 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 113+ 1190 2A B4 81     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 114+ 1193 73                       ld      (HL),E          ; store # of entries
 115+ 1194 23                       inc     HL
 116+ 1195 72                       ld      (HL),D
 117+ 1196 23                       inc     HL
 118+ 1197 D5                       push    DE              ; store entries
 119+ 1198 EB                       ex      DE,HL           ; copy current pointer into DE
 120+ 1199 21 18 11                 ld      HL,DSKDIRADR    ; address of directory start
 121+ 119C 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 122+ 119F ED B0                    ldir                    ; copy into buffer
 123+ 11A1                          ; now we calculate the starting sector of data area
 124+ 11A1 E1                       pop     HL              ; entries into HL
 125+ 11A2 0E 10                    ld      C,$10           ; 16 entries per sector
 126+ 11A4 CD A0 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 127+ 11A7 B7                       or      A               ; remainder = 0?
 128+ 11A8 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 129+ 11AA 23                       inc     HL              ; increment sectors
 130+ 11AB E5           DOS_FT2:    push    HL              ; store size of directory
 131+ 11AC FD E1                    pop     IY              ; into IY
 132+ 11AE 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 133+ 11AF EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 134+ 11B0 73                       ld      (HL),E          ; store starting of
 135+ 11B1 23                       inc     HL              ; data area
 136+ 11B2 72                       ld      (HL),D          ; into buffer
 137+ 11B3                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 138+ 11B3 CD D8 18                 call    CLRIOBF         ; clear I/O buffer
 139+ 11B6 21 09 11                 ld      HL,DFSCT0       ; address of disk header string
 140+ 11B9 ED 5B 9A 81              ld      DE,(IOBUFF)     ; address of I/O buffer
 141+ 11BD 01 0F 00                 ld      BC,$000F        ; 15 chars
 142+ 11C0 ED B0                    ldir                    ; copy header into buffer
 143+ 11C2 2A 98 81                 ld      HL,(DOSBFR)     ; first part of configuration
 144+ 11C5 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 145+ 11C8 ED B0                    ldir                    ; copy (DE is auto-incremented)
 146+ 11CA AF                       xor     A               ; A=$0
 147+ 11CB 12                       ld      (DE),A          ; marker at $1F
 148+ 11CC 13                       inc     DE
 149+ 11CD CD 43 18                 call    CHKNMVAL        ; copy disk name into buffer
 150+ 11D0 DA 8F 12                 jp      C,D1ERR         ; disk name error
 151+ 11D3 CD CB 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 152+ 11D6 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 153+ 11D9 54                       ld      D,H             ; copy into DE...
 154+ 11DA 5D                       ld      E,L             ; ...for later use
 155+ 11DB 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 156+ 11DE 09                       add     HL,BC           ; ...of the I/O buffer
 157+ 11DF 3E 38                    ld      A,'8'           ; write marker "80"
 158+ 11E1 77                       ld      (HL),A          ; ...
 159+ 11E2 23                       inc     HL              ; ...
 160+ 11E3 3E 30                    ld      A,'0'           ; ...
 161+ 11E5 77                       ld      (HL),A          ; ...into last 2 locations
 162+ 11E6 EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 163+ 11E7 AF                       xor     A               ; reset A - set sector # to $00000000
 164+ 11E8 47                       ld      B,A             ; LBA0=0
 165+ 11E9 4F                       ld      C,A             ; LBA1=0
 166+ 11EA 57                       ld      D,A             ; LBA2=0
 167+ 11EB 5F                       ld      E,A             ; LBA3=0
 168+ 11EC CD DD 10                 call    CF_WR_SEC       ; write sector to CF
 169+ 11EF DA 72 12                 jp      C,D2ERR
 170+ 11F2                          ; check if only re-writing of Master Sector was need
 171+ 11F2 3A 05 82                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 172+ 11F5 3D                       dec     A               ; A=1?
 173+ 11F6 C8                       ret     Z               ; yes, finished job
 174+ 11F7                          ; erase directory -----------------------------
 175+ 11F7                          ; create a progress bar
 176+ 11F7 3E 0D                    ld      A,CR            ; new line
 177+ 11F9 CD BC 23                 call    OUTC
 178+ 11FC FD E5                    push    IY              ; copy directory's size
 179+ 11FE E1                       pop     HL              ; into HL
 180+ 11FF 01 18 00                 ld      BC,$0018        ; 24 steps
 181+ 1202 CD A0 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 182+ 1205 E5                       push    HL              ; store result
 183+ 1206 DD E1                    pop     IX              ; into IX
 184+ 1208 EB                       ex      DE,HL           ; and into DE
 185+ 1209 3E 2D                    ld      A,'-'           ; print a progress bar
 186+ 120B CD 47 12                 call    DOS_FT7         ; print it
 187+ 120E 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 188+ 1210 CD 47 12                 call    DOS_FT7         ; come back to beginning of line
 189+ 1213 FD E5                    push    IY              ; copy directory's size
 190+ 1215 E1                       pop     HL              ; into HL
 191+ 1216 01 01 00                 ld      BC,$0001        ; first sector of directory
 192+ 1219 CD D8 18                 call    CLRIOBF         ; clear I/O buffer
 193+ 121C D5           DOS_FTA:    push    DE              ; store counter
 194+ 121D 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 195+ 1220 CD DD 10                 call    CF_WR_SEC       ; write sector to CF
 196+ 1223 DA 43 12                 jp      C,DOS_FT10      ; error occured
 197+ 1226 03                       inc     BC              ; next sector
 198+ 1227 2B                       dec     HL              ; decrement HL
 199+ 1228 D1                       pop     DE              ; retrieve counter
 200+ 1229 1B                       dec     DE              ; decrement counter
 201+ 122A 7B                       ld      A,E
 202+ 122B B2                       or      D               ; check if counter is zero
 203+ 122C 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 204+ 122E 3E 2A                    ld      A,'*'           ; yes, print char
 205+ 1230 CD BC 23                 call    OUTC
 206+ 1233 DD E5                    push    IX              ; re-set counter
 207+ 1235 D1                       pop     DE
 208+ 1236 7C           DOS_FT9:    ld      A,H             ; check if...
 209+ 1237 B5                       or      L               ; ...HL = 0
 210+ 1238 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 211+ 123A 3E 0D                    ld      A,CR            ; return
 212+ 123C CD BC 23                 call    OUTC            ; next line
 213+ 123F CD A5 10                 call    CF_STANDBY      ; set CF into stand-by mode
 214+ 1242 C9                       ret
 215+ 1243 D1           DOS_FT10:   pop     DE
 216+ 1244 C3 72 12                 jp      D2ERR           ; disk geometry error
 217+ 1247
 218+ 1247              ; print a char 24 times
 219+ 1247 06 18        DOS_FT7:    ld      B,$18           ; 24 times
 220+ 1249 CD BC 23     DOS_FT8:    call    OUTC            ; print char
 221+ 124C 10 FB                    djnz    DOS_FT8         ; repeat
 222+ 124E C9                       ret                     ; return to caller
 223+ 124F
 224+ 124F
 225+ 124F              ; *****************************************************************************
 226+ 124F              ; D I S K    R E N A M E
 227+ 124F              ;******************************************************************************
 228+ 124F CD D8 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 229+ 1252 CD ED 18                 call    CLRDOSBF        ; clear DOS buff.
 230+ 1255 CD BF 17                 call    LDMSCT          ; load Master Sector
 231+ 1258 2A 9A 81                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 232+ 125B 01 20 00                 ld      BC,$0020        ; offset for disk name
 233+ 125E 09                       add     HL,BC           ; get pointer
 234+ 125F EB                       ex      DE,HL           ; copy pointer into DE
 235+ 1260 CD 43 18                 call    CHKNMVAL        ; copy disk name into buffer
 236+ 1263 DA 8F 12                 jp      C,D1ERR         ; disk name error
 237+ 1266 11 00 00                 ld      DE,$0000        ; reset MSB sector
 238+ 1269 42                       ld      B,D             ; reset LSB sector
 239+ 126A 4A                       ld      C,D
 240+ 126B CD DD 10                 call    CF_WR_SEC       ; write sector
 241+ 126E DA A4 16                 jp      C,WRT_ERR       ; error?
 242+ 1271 C9                       ret                     ; no, return to caller
 243+ 1272
 244+ 1272
 245+ 1272              ; *****************************************************************************
 246+ 1272              ; DOS ERRORS
 247+ 1272              ; *****************************************************************************
 248+ 1272 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 249+ 1274 18 1B                    jr      RET_ERR
 250+ 1276 3E 42        DSKFULL:    ld      A,D5            ; disk full error
 251+ 1278 18 17                    jr      RET_ERR
 252+ 127A 3E 44        DUPLERR:    ld      A,D6            ; duplicate file name
 253+ 127C 18 13                    jr      RET_ERR
 254+ 127E 3E 3A        NAMERR:     ld      A,D1            ; file name error
 255+ 1280 18 0F                    jr      RET_ERR
 256+ 1282 3E 48        FLNTFND:    ld      A,D8            ; file not found
 257+ 1284 18 0B                    jr      RET_ERR
 258+ 1286 3E 40        LODERR:     ld      A,D4            ; generic load error
 259+ 1288 18 07                    jr      RET_ERR
 260+ 128A 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 261+ 128C C3 91 12                 jp      RET_ERR
 262+ 128F 3E 3A        D1ERR:      ld      A,D1            ; name string error
 263+ 1291 32 9C 81     RET_ERR:    ld      (DOSER),A       ; store DOS error
 264+ 1294 CD A5 10                 call    CF_STANDBY      ; set CF into stand-by
 265+ 1297 37                       scf                     ; set Carry for error
 266+ 1298 C9                       ret                     ; return to caller
 267+ 1299
 268+ 1299              ; *****************************************************************************
 269+ 1299              ; L I S T    F I L E S
 270+ 1299              ; Function: print details of disk and list files
 271+ 1299              ; Input: D: $00=only disk details; $01=file list, too
 272+ 1299              ; *****************************************************************************
 273+ 1299 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 273+ 129D 20 6E 61 6D
 273+ 12A1 65 3A 20 00
 274+ 12A5 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 274+ 12A9 74 6F 72 73
 274+ 12AD 3A 20 00
 275+ 12B0 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 275+ 12B4 6F 77 65 64
 275+ 12B8 20 66 69 6C
 275+ 12BC 65 73 3A 20
 275+ 12C0 00
 276+ 12C1 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 276+ 12C5 65 28 73 29
 276+ 12C9 0D 00
 277+ 12CB CD 0B 18     LST_FILES:  call    CHKDSKVAL       ; check DOS version & load disk details
 278+ 12CE DA 8A 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 279+ 12D1 D5                       push    DE              ; store D
 280+ 12D2 CD BF 17                 call    LDMSCT          ; load Master Sector
 281+ 12D5 21 99 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 282+ 12D8 CD 93 2F                 call    PRS             ; print it
 283+ 12DB 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 284+ 12DE 11 20 00                 ld      DE,$0020        ; position of disk name
 285+ 12E1 19                       add     HL,DE           ; get address
 286+ 12E2 06 10                    ld      B,$10           ; 16 chars
 287+ 12E4 7E           INPR1:      ld      A,(HL)          ; load char
 288+ 12E5 CD BC 23                 call    OUTC            ; print it
 289+ 12E8 23                       inc     HL
 290+ 12E9 10 F9                    djnz    INPR1           ; repeat
 291+ 12EB 3E 0D                    ld      A,CR
 292+ 12ED CD BC 23                 call    OUTC            ; carriage return
 293+ 12F0 D1                       pop     DE              ; retrieve D
 294+ 12F1 DD 21 00 00              ld      IX,$0000        ; reset file counter
 295+ 12F5 7A                       ld      A,D
 296+ 12F6 B7                       or      A               ; is D=0?
 297+ 12F7 CA B6 13                 jp      Z,PNTSTATS      ; yes, jump over
 298+ 12FA                          ; print list of files
 299+ 12FA 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 300+ 12FD 11 0F 00                 ld      DE,$000F        ; point to details of disk
 301+ 1300 19                       add     HL,DE           ; find address
 302+ 1301 ED 5B 98 81              ld      DE,(DOSBFR)     ; store into DOS buffer
 303+ 1305 01 20 00                 ld      BC,$0020        ; 32 bytes
 304+ 1308 ED B0                    ldir                    ; copy
 305+ 130A 11 00 00                 ld      DE,$0000        ; beginning...
 306+ 130D 01 01 00                 ld      BC,$0001        ; ...of directory
 307+ 1310 CD 6F 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 308+ 1313 CD B1 10                 call    CF_RD_SEC       ; read sector
 309+ 1316 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 310+ 1318 FD 2A 9A 81              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 311+ 131C FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 312+ 131F B7                       or      A               ; is it an empty entry ($00)?
 313+ 1320 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 314+ 1322 FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 315+ 1324 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 316+ 1326 C5                       push    BC              ; this is a valid entry - so, store BC
 317+ 1327 FD E5                    push    IY              ; store IY
 318+ 1329 E5                       push    HL              ; store HL
 319+ 132A D5                       push    DE              ; store DE
 320+ 132B DD E5                    push    IX              ; store IX
 321+ 132D 06 10                    ld      B,$10           ; 16 chars to read and print
 322+ 132F FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 323+ 1332 CD BC 23                 call    OUTC            ; print char
 324+ 1335 FD 23                    inc     IY              ; next char
 325+ 1337 10 F6                    djnz    LSTFILES3       ; repeat
 326+ 1339 3E 20                    ld      A,SPC
 327+ 133B CD BC 23                 call    OUTC            ; print space
 328+ 133E FD 7E 00                 ld      A,(IY)          ; file type
 329+ 1341 D6 80                    sub     $80             ; types start from $80
 330+ 1343 B7                       or      A               ; BAS type ($00)?
 331+ 1344 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 332+ 1346 21 FA 13                 ld      HL,FILETP       ; print "BAS"
 333+ 1349 18 0B                    jr      LSTFILESPR
 334+ 134B 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 335+ 134C 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 336+ 134E 21 FF 13                 ld      HL,FILETP+5     ; print "BIN "
 337+ 1351 18 03                    jr      LSTFILESPR
 338+ 1353 21 04 14     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 339+ 1356 CD 93 2F     LSTFILESPR: call    PRS
 340+ 1359 11 00 00                 ld      DE,$0000        ; MSB = $0000
 341+ 135C 01 08 00                 ld      BC,$0008
 342+ 135F FD 09                    add     IY,BC           ; point to file size in bytes
 343+ 1361 FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 344+ 1364 FD 23                    inc     IY
 345+ 1366 FD 46 00                 ld      B,(IY)          ; then MSB
 346+ 1369 C5                       push    BC              ; copy...
 347+ 136A DD E1                    pop     IX              ; ...into IX
 348+ 136C CD 7E 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 349+ 136F 3E 0D                    ld      A,CR
 350+ 1371 CD BC 23                 call    OUTC            ; print carriage return
 351+ 1374 DD E1        LSTFILES8:  pop     IX              ; retrieve IX
 352+ 1376 D1                       pop     DE              ; retrieve DE
 353+ 1377 E1                       pop     HL              ; retrieve HL
 354+ 1378 FD E1                    pop     IY              ; retrieve IY
 355+ 137A C1                       pop     BC              ; retrieve BC
 356+ 137B DD 23                    inc     IX              ; increment file counter
 357+ 137D CD 25 26     LSTFILES6:  call    TSTBRK          ; Test for break key
 358+ 1380 CD 28 25                 call    TSTSPC          ; test for space
 359+ 1383 C5                       push    BC              ; store sector counter
 360+ 1384 01 20 00                 ld      BC,$0020        ; dir entry size
 361+ 1387 FD 09                    add     IY,BC           ; next entry in current sector
 362+ 1389 C1                       pop     BC              ; retrieve sector counter
 363+ 138A 2D                       dec     L               ; decrement entry counter
 364+ 138B 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 365+ 138D 03           LSTFILES5:  inc     BC              ; increment sector counter
 366+ 138E 78                       ld      A,B             ; check if BC=$0000
 367+ 138F B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 368+ 1390 28 14                    jr      Z,LSTFILES7     ; yes, exit
 369+ 1392 D5                       push    DE              ; store MSB of sector pointer
 370+ 1393 2A 98 81                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 371+ 1396 11 0E 00                 ld      DE,$000E        ; point to data area
 372+ 1399 19                       add     HL,DE           ; find address in memory
 373+ 139A CD 70 18                 call    HL2DE           ; load data area sector into DE
 374+ 139D 60                       ld      H,B             ; copy current sector
 375+ 139E 69                       ld      L,C             ; into HL
 376+ 139F CD 45 4D                 call    CMP16           ; is current sector < data area sector?
 377+ 13A2 D1                       pop     DE              ; retrieve MSB of sector pointer
 378+ 13A3 DA 10 13                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 379+ 13A6 11 00 00     LSTFILES7:  ld      DE,$0000
 380+ 13A9 DD E5                    push    IX
 381+ 13AB CD 7E 18                 call    PRN16ASCIX      ; print number of files from DEIX
 382+ 13AE 21 C1 12                 ld      HL,TLFLSTX
 383+ 13B1 CD 93 2F                 call    PRS             ; print "file(s)"
 384+ 13B4 DD E1                    pop     IX
 385+ 13B6 21 A5 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 386+ 13B9 CD 93 2F                 call    PRS             ; print message
 387+ 13BC 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 388+ 13BF DD E5                    push    IX              ; store number of entries
 389+ 13C1 CD 75 18                 call    PRN32ASCII      ; print size
 390+ 13C4 3E 2F                    ld      A,'/'
 391+ 13C6 CD BC 23                 call    OUTC            ; print a "/""
 392+ 13C9 D1                       pop     DE              ; copy number of entries into DE
 393+ 13CA 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 394+ 13CD CD 6A 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 395+ 13D0 ED 53 AE 81              ld      (TPBF1),DE      ; store results
 396+ 13D4 22 B0 81                 ld      (TPBF2),HL
 397+ 13D7 21 AE 81                 ld      HL,TPBF1        ; print results
 398+ 13DA CD 75 18                 call    PRN32ASCII
 399+ 13DD 21 B0 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 400+ 13E0 CD 93 2F                 call    PRS             ; print message
 401+ 13E3 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 402+ 13E6 01 0A 00                 ld      BC,$000A        ; address of allowed files
 403+ 13E9 09                       add     HL,BC           ; find pointer
 404+ 13EA 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 405+ 13ED CD 78 18                 call    PRN16ASCII      ; print max files
 406+ 13F0 3E 0D                    ld      A,CR
 407+ 13F2 CD BC 23                 call    OUTC            ; print a carriage return
 408+ 13F5 CD A5 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 409+ 13F8 AF                       xor     A               ; clear Carry flag
 410+ 13F9 C9                       ret                     ; return to caller
 411+ 13FA 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 411+ 13FE 00
 412+ 13FF 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 412+ 1403 00
 413+ 1404 3F 3F 3F 20              defb    "??? ",0        ; unkown
 413+ 1408 00
 414+ 1409
 415+ 1409
 416+ 1409              ; *****************************************************************************
 417+ 1409              ; S A V E    F I L E
 418+ 1409              ; save current BASIC program onto a file
 419+ 1409              ; *****************************************************************************
 420+ 1409 CD D8 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 421+ 140C CD 0B 18                 call    CHKDSKVAL       ; check DOS version & load disk details
 422+ 140F DA 8A 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 423+ 1412 CD B0 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 424+ 1415 CD 70 18                 call    HL2DE           ; get start of directory into DE
 425+ 1418 ED 53 9D 81              ld      (DIR_STRT),DE   ; store
 426+ 141C CD 70 18                 call    HL2DE           ; get start of data area into DE
 427+ 141F ED 53 9F 81              ld      (DAT_STRT),DE   ; store
 428+ 1423 CD D8 18                 call    CLRIOBF         ; clear IO buffer
 429+ 1426 CD ED 18                 call    CLRDOSBF        ; clear DOS buffer
 430+ 1429 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 431+ 142D CD 43 18                 call    CHKNMVAL        ; check and copy file name
 432+ 1430 DA 7E 12                 jp      C,NAMERR        ; if Carry, file name error
 433+ 1433 CD A9 16                 call    FILE_EXIST      ; check for name already present in dir
 434+ 1436 DA 7A 12                 jp      C,DUPLERR       ; name is present - error
 435+ 1439 CD 62 17                 call    FNDFREDIR       ; find a free entry in the directory
 436+ 143C DA 76 12                 jp      C,DSKFULL       ; no entry, disk full error
 437+ 143F 3A B4 81                 ld      A,(TPBF4)       ; check what to save
 438+ 1442 FE 80                    cp      $80             ; BASIC program?
 439+ 1444 C2 53 14                 jp      NZ,SAVFL3       ; no, jump over
 440+ 1447                          ; BASIC area to save starts at PROGND and ends at (PROGND)
 441+ 1447 2A 4B 82                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 442+ 144A 11 4B 82                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 443+ 144D ED 53 B6 81              ld      (SRTMEM),DE     ; copy DE
 444+ 1451 18 08                    jr      SAVFL1
 445+ 1453 2A B8 81     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 446+ 1456 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 447+ 1457 ED 5B B6 81              ld      DE,(SRTMEM)     ; DE <= start of portion
 448+ 145B                          ; compute how many sectors/blocks are needed to save file
 449+ 145B AF           SAVFL1:     xor     A               ; reset Carry
 450+ 145C ED 52                    sbc     HL,DE           ; get how many bytes to save
 451+ 145E 22 A5 81                 ld      (BYT_SIZ),HL    ; store into memory
 452+ 1461 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 453+ 1464 7C                       ld      A,H             ; move lenght...
 454+ 1465 4D                       ld      C,L             ; ...into AC
 455+ 1466 CD AF 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 456+ 1469 7C                       ld      A,H             ; check if...
 457+ 146A B5                       or      L               ; ...remainder (HL) is 0
 458+ 146B 28 01                    jr      Z,SAVFL6        ; yes, jump over
 459+ 146D 03                       inc     BC              ; no, so we need another sector
 460+ 146E 79           SAVFL6:     ld      A,C
 461+ 146F 32 A7 81                 ld      (SCT_SIZ),A     ; store into memory
 462+ 1472              SAVFL7:     ; start saving on disk
 463+ 1472 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 464+ 1475 ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 465+ 1479 CD 6F 10                 call    CF_SETSTR       ; set sector to read
 466+ 147C CD B1 10                 call    CF_RD_SEC       ; read sector
 467+ 147F ED 5B A3 81              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 468+ 1483 7B                       ld      A,E             ; load entry LSB into A
 469+ 1484 E6 0F                    and     %00001111       ; be sure to get only low nibble
 470+ 1486 87                       add     A,A             ; multiply times 32
 471+ 1487 87                       add     A,A
 472+ 1488 87                       add     A,A
 473+ 1489 87                       add     A,A
 474+ 148A 87                       add     A,A
 475+ 148B 4F                       ld      C,A             ; copy into C
 476+ 148C 06 00                    ld      B,$00           ; reset B
 477+ 148E                          ; set name
 478+ 148E 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 479+ 1491 09                       add     HL,BC           ; add offset to get address of entry
 480+ 1492 ED 5B 98 81              ld      DE,(DOSBFR)     ; pointer to file name
 481+ 1496 01 10 00                 ld      BC,$0010        ; 16 chars
 482+ 1499 EB                       ex      DE,HL           ; move source into HL and destination into DE
 483+ 149A ED B0                    ldir                    ; copy file name
 484+ 149C EB                       ex      DE,HL           ; move current buffer pointer into HL
 485+ 149D 3A B4 81                 ld      A,(TPBF4)       ; load the type of file
 486+ 14A0 77                       ld      (HL),A          ; store it
 487+ 14A1 23                       inc     HL
 488+ 14A2 AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 489+ 14A3 77                       ld      (HL),A
 490+ 14A4 23                       inc     HL
 491+ 14A5 ED 5B A3 81              ld      DE,(NTR_NBR)    ; reload entry number
 492+ 14A9 CD 6B 18                 call    DE2HL           ; store entry into buffer
 493+ 14AC E5                       push    HL              ; store pointer
 494+ 14AD 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 495+ 14B0 CD 6A 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 496+ 14B3 ED 4B 9F 81              ld      BC,(DAT_STRT)   ; load start of data
 497+ 14B7 09                       add     HL,BC           ; add sector of data area
 498+ 14B8 30 01                    jr      NC,SAVFL9       ; overflow?
 499+ 14BA 13                       inc     DE              ; yes, increment DE
 500+ 14BB ED 53 A8 81  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 501+ 14BF 22 AA 81                 ld      (LSB_SCT),HL    ; store LSB of sector
 502+ 14C2 E1                       pop     HL              ; retrieve pointer
 503+ 14C3 CD 6B 18                 call    DE2HL           ; also copy MSB of sector into entry
 504+ 14C6 ED 5B AA 81              ld      DE,(LSB_SCT)    ; retrieve LSB
 505+ 14CA CD 6B 18                 call    DE2HL           ; also copy LSB of sector into entry
 506+ 14CD ED 5B A5 81              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 507+ 14D1 CD 6B 18                 call    DE2HL           ; copy file size into buffer
 508+ 14D4 3A A7 81                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 509+ 14D7 77                       ld      (HL),A          ; copy into buffer
 510+ 14D8 23                       inc     HL              ; next location
 511+ 14D9 ED 5B B6 81              ld      DE,(SRTMEM)     ; start of address of file in RAM
 512+ 14DD CD 6B 18                 call    DE2HL           ; copy into buffer
 513+ 14E0 06 03                    ld      B,$03           ; remaining chars...
 514+ 14E2 AF                       xor     A               ; ...set to $00
 515+ 14E3 77           SAVFL2:     ld      (HL),A          ; reset byte
 516+ 14E4 23                       inc     HL              ; next cell
 517+ 14E5 10 FC                    djnz    SAVFL2          ; repeat
 518+ 14E7                          ; save entry into directory
 519+ 14E7 11 00 00                 ld      DE,$0000        ; block 0
 520+ 14EA ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 521+ 14EE CD DD 10                 call    CF_WR_SEC       ; write new entry into directory
 522+ 14F1 DA 72 12                 jp      C,D2ERR         ; error occured
 523+ 14F4 CD D8 18                 call    CLRIOBF         ; clear I/O buffer
 524+ 14F7                          ; start saving RAM
 525+ 14F7 ED 5B B6 81              ld      DE,(SRTMEM)     ; load start of RAM
 526+ 14FB ED 53 AC 81              ld      (RAM_PTR),DE    ; store
 527+ 14FF CD D8 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 528+ 1502 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 529+ 1505 11 00 02                 ld      DE,$0200        ; are they < 512?
 530+ 1508 CD 45 4D                 call    CMP16
 531+ 150B 30 04                    jr      NC,SAVFL4       ; no, jump over
 532+ 150D ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 533+ 1511 4B           SAVFL4:     ld      C,E             ; bytes to copy
 534+ 1512 42                       ld      B,D             ; into BC
 535+ 1513 2A AC 81                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 536+ 1516 ED 5B 9A 81              ld      DE,(IOBUFF)     ; load start of I/O buffer
 537+ 151A ED B0                    ldir                    ; copy data
 538+ 151C ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 539+ 1520 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 540+ 1524 CD DD 10                 call    CF_WR_SEC       ; write sector
 541+ 1527 DA A4 16                 jp      C,WRT_ERR       ; error?
 542+ 152A 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 543+ 152D 35                       dec     (HL)            ; copied all the sectors?
 544+ 152E CA 5D 15                 jp      Z,SAVFLEXT      ; yes, exit
 545+ 1531 2A AC 81     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 546+ 1534 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 547+ 1537 19                       add     HL,DE           ; calculate next starting address
 548+ 1538 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 549+ 153B AF                       xor     A               ; reset Carry
 550+ 153C 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 551+ 153F ED 52                    sbc     HL,DE           ; subtract copied bytes
 552+ 1541 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 553+ 1544 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 554+ 1548 03                       inc     BC              ; next sector
 555+ 1549 78                       ld      A,B             ; BC=$0000?
 556+ 154A B1                       or      C
 557+ 154B 20 09                    jr      NZ,SAVFL12      ; no, jump over
 558+ 154D ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 559+ 1551 13                       inc     DE              ; increment DE
 560+ 1552 ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 561+ 1556 ED 43 AA 81  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 562+ 155A C3 FF 14                 jp      SAVFL10         ; repeat
 563+ 155D CD A5 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 564+ 1560 AF                       xor     A               ; clear Carry flag
 565+ 1561 C9                       ret                     ; return to caller
 566+ 1562
 567+ 1562
 568+ 1562              ; *****************************************************************************
 569+ 1562              ; F I L E    L O A D
 570+ 1562              ; load a file from the disk into the memory
 571+ 1562              ; *****************************************************************************
 572+ 1562 CD D8 18     LODFILE:    call    CLRIOBF         ; clear I/O
 573+ 1565 CD 0B 18                 call    CHKDSKVAL       ; check DOS version & load disk details
 574+ 1568 DA 8A 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 575+ 156B CD B0 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 576+ 156E CD D8 18                 call    CLRIOBF         ; clear IO buffer
 577+ 1571 CD ED 18                 call    CLRDOSBF        ; clear DOS buffer
 578+ 1574 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 579+ 1578 CD 43 18                 call    CHKNMVAL        ; check and copy file name
 580+ 157B DA 7E 12                 jp      C,NAMERR        ; if Carry, file name error
 581+ 157E CD A9 16                 call    FILE_EXIST      ; check if file exists
 582+ 1581 D2 82 12                 jp      NC,FLNTFND      ; file not found - error
 583+ 1584 DD E5                    push    IX              ; copy pointer to file...
 584+ 1586 E1                       pop     HL              ; ...into HL
 585+ 1587 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 586+ 158A 09                       add     HL,BC           ; ...by getting pointer to file details
 587+ 158B 7E                       ld      A,(HL)          ; load file type
 588+ 158C FE 80                    cp      $80             ; 'BAS' type?
 589+ 158E 28 0C                    jr      Z,LDFL4         ; yes, jump over
 590+ 1590 FE 81                    cp      $81             ; 'BIN' type?
 591+ 1592 C2 86 12                 jp      NZ,LODERR       ; no, raise error
 592+ 1595 3A B4 81                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 593+ 1598 B7                       or      A               ; did the user set this?
 594+ 1599 CA 86 12                 jp      Z,LODERR        ; no, raise an error
 595+ 159C 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 596+ 159E 09                       add     HL,BC           ; point to starting sector
 597+ 159F 11 A8 81                 ld      DE,MSB_SCT      ; point to store sector address of file
 598+ 15A2 ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 599+ 15A4 11 A5 81                 ld      DE,BYT_SIZ      ; point to store size of file
 600+ 15A7 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 601+ 15AA ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 602+ 15AC 11 4B 82                 ld      DE,PROGND       ; load start of BASIC RAM
 603+ 15AF 3A B4 81                 ld      A,(TPBF4)       ; check where to save the data from
 604+ 15B2 B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 605+ 15B3 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 606+ 15B5 CD 70 18                 call    HL2DE           ; no, load RAM address from disk
 607+ 15B8 ED 53 AC 81  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 608+ 15BC                          ; start loading from disk
 609+ 15BC CD D8 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 610+ 15BF ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 611+ 15C3 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 612+ 15C7 CD 6F 10                 call    CF_SETSTR       ; set sector
 613+ 15CA CD B1 10                 call    CF_RD_SEC       ; read sector
 614+ 15CD 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 615+ 15D0 11 00 02                 ld      DE,$0200        ; are they < 512?
 616+ 15D3 CD 45 4D                 call    CMP16
 617+ 15D6 30 04                    jr      NC,LDFL3        ; no, jump over
 618+ 15D8 ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 619+ 15DC 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 620+ 15DD 42                       ld      B,D             ; ...into BC
 621+ 15DE 2A 9A 81                 ld      HL,(IOBUFF)     ; point to I/O buffer
 622+ 15E1 ED 5B AC 81              ld      DE,(RAM_PTR)    ; point to RAM where to save
 623+ 15E5 ED B0                    ldir                    ; copy data
 624+ 15E7 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 625+ 15EA 35                       dec     (HL)            ; copied all the sectors?
 626+ 15EB CA 1A 16                 jp      Z,LDFLEX        ; yes, exit
 627+ 15EE 2A AC 81                 ld      HL,(RAM_PTR)    ; pointer to RAM
 628+ 15F1 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 629+ 15F4 19                       add     HL,DE           ; calculate next starting address
 630+ 15F5 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 631+ 15F8 AF                       xor     A               ; reset Carry
 632+ 15F9 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 633+ 15FC ED 52                    sbc     HL,DE           ; subtract copied bytes
 634+ 15FE 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 635+ 1601 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 636+ 1605 03                       inc     BC              ; next sector
 637+ 1606 78                       ld      A,B             ; BC=$0000?
 638+ 1607 B1                       or      C
 639+ 1608 20 09                    jr      NZ,LDFL5        ; no, jump over
 640+ 160A ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 641+ 160E 13                       inc     DE              ; increment DE
 642+ 160F ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 643+ 1613 ED 43 AA 81  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 644+ 1617 C3 BC 15                 jp      LDFL2           ; repeat
 645+ 161A CD A5 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 646+ 161D AF                       xor     A               ; clear Carry flag
 647+ 161E C9                       ret                     ; return to caller
 648+ 161F
 649+ 161F
 650+ 161F              ; *****************************************************************************
 651+ 161F              ; F I L E    E R A S E
 652+ 161F              ; erase a file from disk, freeing its block
 653+ 161F              ; *****************************************************************************
 654+ 161F CD D8 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 655+ 1622 CD 0B 18                 call    CHKDSKVAL       ; check DOS version & load disk details
 656+ 1625 DA 8A 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 657+ 1628 CD B0 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 658+ 162B CD D8 18                 call    CLRIOBF         ; clear IO buffer
 659+ 162E CD ED 18                 call    CLRDOSBF        ; clear DOS buffer
 660+ 1631 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 661+ 1635 CD 43 18                 call    CHKNMVAL        ; check and copy file name
 662+ 1638 DA 7E 12                 jp      C,NAMERR        ; if Carry, file name error
 663+ 163B CD A9 16                 call    FILE_EXIST      ; check if file exists
 664+ 163E D2 82 12                 jp      NC,FLNTFND      ; file not found - error
 665+ 1641 DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 666+ 1644 DD 56 15                 ld      D,(IX+$15)
 667+ 1647 DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 668+ 164A DD 46 17                 ld      B,(IX+$17)
 669+ 164D ED 53 A8 81              ld      (MSB_SCT),DE    ; store DE
 670+ 1651 ED 43 AA 81              ld      (LSB_SCT),BC    ; store BC
 671+ 1655 DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 672+ 1658 32 A7 81                 ld      (SCT_SIZ),A     ; store it
 673+ 165B 3E 7F                    ld      A,$7F           ; marker for file deleted
 674+ 165D DD 77 00                 ld      (IX),A          ; set file as deleted (quick erase)
 675+ 1660 3A B4 81                 ld      A,(TPBF4)       ; check for quick or full delete
 676+ 1663 B7                       or      A               ; A=0 quick erase
 677+ 1664 28 0A                    jr      Z,FIL_ERA5      ; jump if quick erase
 678+ 1666 AF                       xor     A               ; clear A
 679+ 1667 06 20                    ld      B,$20           ; full erase - clean entry (32 cells)
 680+ 1669 DD 77 00     FIL_ERA6:   ld      (IX),A          ; reset cell
 681+ 166C DD 23                    inc     IX              ; next cell
 682+ 166E 10 F9                    djnz    FIL_ERA6        ; repeat
 683+ 1670 ED 5B B0 81  FIL_ERA5:   ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 684+ 1674 ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 685+ 1678 CD DD 10                 call    CF_WR_SEC       ; write sector
 686+ 167B 38 27                    jr      C,WRT_ERR       ; error?
 687+ 167D 3A B4 81                 ld      A,(TPBF4)       ; check for quick or full delete
 688+ 1680 B7                       or      A               ; if A=0 then quick erase
 689+ 1681 28 1C                    jr      Z,FIL_ERA3      ; yes, leave
 690+ 1683 CD D8 18                 call    CLRIOBF         ; no, full delete - clear I/O buffer
 691+ 1686 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of 1st sector of file block
 692+ 168A ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 693+ 168E 21 A7 81                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 694+ 1691 CD DD 10     FIL_ERA1:   call    CF_WR_SEC       ; erase sector
 695+ 1694 38 0E                    jr      C,WRT_ERR       ; error?
 696+ 1696 03                       inc     BC              ; next sector
 697+ 1697 78                       ld      A,B             ; is LSB rolled back to 0?
 698+ 1698 B1                       or      C
 699+ 1699 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 700+ 169B 13                       inc     DE              ; yes, increment MSB
 701+ 169C 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 702+ 169D 20 F2                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 703+ 169F CD A5 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 704+ 16A2 AF                       xor     A               ; clear Carry
 705+ 16A3 C9                       ret
 706+ 16A4 CD A5 10     WRT_ERR:    call    CF_STANDBY      ; put CF into stand-by
 707+ 16A7 37                       scf                     ; set error
 708+ 16A8 C9                       ret                     ; return to caller
 709+ 16A9
 710+ 16A9
 711+ 16A9              ; *****************************************************************************
 712+ 16A9              ; F I L E    C H E C K
 713+ 16A9              ; check if file name already exists in directory
 714+ 16A9              ; file name must be stored from (DOSBFR) for 16 chars
 715+ 16A9              ; *****************************************************************************
 716+ 16A9 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 717+ 16AC 01 01 00                 ld      BC,$0001        ; ...of directory
 718+ 16AF FD 2A A3 81              ld      IY,(NTR_NBR)    ; load max entries
 719+ 16B3 CD 6F 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 720+ 16B6 CD B1 10                 call    CF_RD_SEC       ; read sector
 721+ 16B9 DD 2A 9A 81  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 722+ 16BD 2E 10                    ld      L,$10           ; reset entry counter
 723+ 16BF DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 724+ 16C2 B7                       or      A               ; is it $00 (empty entry)?
 725+ 16C3 CA F3 16                 jp      Z,CHKSTNM10     ; yes, jump over
 726+ 16C6 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 727+ 16C8 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 728+ 16CA 22 AE 81                 ld      (TPBF1),HL      ; store HL
 729+ 16CD ED 53 B0 81              ld      (TPBF2),DE      ; store DE
 730+ 16D1 ED 43 B2 81              ld      (TPBF3),BC      ; store BC
 731+ 16D5 DD E5                    push    IX              ; copy IX...
 732+ 16D7 E1                       pop     HL              ; ...into HL
 733+ 16D8 ED 5B 98 81              ld      DE,(DOSBFR)     ; beginning of name file
 734+ 16DC 06 10                    ld      B,$10           ; 16 chars to check
 735+ 16DE 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 736+ 16DF ED A1                    cpi                     ; compare with name from user
 737+ 16E1 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 738+ 16E3 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 739+ 16E4 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 740+ 16E6 18 2B                    jr      FLEXST          ; file exists in dir
 741+ 16E8 2A AE 81     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 742+ 16EB ED 5B B0 81              ld      DE,(TPBF2)      ; retrieve DE
 743+ 16EF ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve sector counter
 744+ 16F3 FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 745+ 16F5 E5                       push    HL              ; preserve current entry
 746+ 16F6 FD E5                    push    IY              ; copy max allowed files...
 747+ 16F8 E1                       pop     HL              ; ...into HL
 748+ 16F9 7C                       ld      A,H             ; chech if entries...
 749+ 16FA B5                       or      L               ; ...are finished
 750+ 16FB E1                       pop     HL              ; (retrieve current entry)
 751+ 16FC 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 752+ 16FE C5                       push    BC              ; store bc
 753+ 16FF 01 20 00                 ld      BC,$0020        ; dir entry size
 754+ 1702 DD 09                    add     IX,BC           ; next entry in current sector
 755+ 1704 C1                       pop     BC              ; retrieve BC
 756+ 1705 2D                       dec     L               ; decrement entry counter
 757+ 1706 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 758+ 1708 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 759+ 1709 79                       ld      A,C             ; check if...
 760+ 170A B0                       or      B               ; BC=$0000?
 761+ 170B 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 762+ 170D 13                       inc     DE              ; yes, increment DE (MSB)
 763+ 170E C3 B3 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 764+ 1711 AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 765+ 1712 C9                       ret                     ; return
 766+ 1713 37           FLEXST:     scf                     ; file is present - set Carry flag for error
 767+ 1714 C9                       ret
 768+ 1715
 769+ 1715
 770+ 1715              ; *****************************************************************************
 771+ 1715              ; UNDELETE DELETED FILES
 772+ 1715              ; look for deleted files and undelete them
 773+ 1715              ; *****************************************************************************
 774+ 1715 CD D8 18     DSKUNDFL:   call    CLRIOBF         ; clear I/O
 775+ 1718 CD 0B 18                 call    CHKDSKVAL       ; check DOS version & load disk details
 776+ 171B DA 8A 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 777+ 171E CD 62 17                 call    FNDFREDIR       ; find a free entry
 778+ 1721 D8           DSKUNDFL1:  ret     C               ; return if entries are finished
 779+ 1722 DD 7E 00                 ld      A,(IX)          ; reload first char of entry
 780+ 1725 FE 7F                    cp      $7F             ; is it a deleted entry?
 781+ 1727 20 29                    jr      NZ,DSKUNDFL2    ; no, jump over
 782+ 1729 CD E2 17                 call    RND8            ; get a random char
 783+ 172C CD 00 18                 call    CHATOZ          ; transfort it into a letter
 784+ 172F DD 77 00                 ld      (IX),A          ; store it as the first letter of filename
 785+ 1732 CD DD 10                 call    CF_WR_SEC       ; write sector (address is into DEBC)
 786+ 1735 E5                       push    HL              ; store HL
 787+ 1736 C5                       push    BC              ; store BC
 788+ 1737 D5                       push    DE              ; store DE
 789+ 1738 DD E5                    push    IX              ; copy IX...
 790+ 173A E1                       pop     HL              ; ...into HL
 791+ 173B 06 10                    ld      B,$10           ; 16 chars
 792+ 173D 7E           DSKUNDPR:   ld      A,(HL)          ; retrieve char from filename
 793+ 173E CD BC 23                 call    OUTC            ; print char
 794+ 1741 23                       inc     HL              ; next char
 795+ 1742 10 F9                    djnz    DSKUNDPR        ; repeat
 796+ 1744 3E 20                    ld      A,SPC           ; print a space
 797+ 1746 CD BC 23                 call    OUTC
 798+ 1749 21 57 17                 ld      HL,DSKUNDTXT    ; print undeleted message
 799+ 174C CD 93 2F                 call    PRS
 800+ 174F D1                       pop     DE              ; retrieve DE
 801+ 1750 C1                       pop     BC              ; retrieve BC
 802+ 1751 E1                       pop     HL              ; retrieve HL
 803+ 1752 CD 88 17     DSKUNDFL2:  call    FNDFREDIR4      ; goto next entry
 804+ 1755 18 CA                    jr      DSKUNDFL1       ; repeat
 805+ 1757 75 6E 64 65  DSKUNDTXT:  defb    "undeleted",CR,0
 805+ 175B 6C 65 74 65
 805+ 175F 64 0D 00
 806+ 1762
 807+ 1762              ; *****************************************************************************
 808+ 1762              ; FIND A FREE ENTRY
 809+ 1762              ; find a free entry in the directory to store a new file
 810+ 1762              ; *****************************************************************************
 811+ 1762 CD BF 17     FNDFREDIR:  call    LDMSCT          ; read Master Sector
 812+ 1765 CD B0 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR and DE
 813+ 1768 D5                       push    DE              ; copy number of entries...
 814+ 1769 FD E1                    pop     IY              ; ...into IY
 815+ 176B 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 816+ 176E 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 817+ 176F 58                       ld      E,B
 818+ 1770 60                       ld      H,B             ; HL=$0000 (entry counter)
 819+ 1771 68                       ld      L,B
 820+ 1772 CD 6F 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 821+ 1775 CD B1 10                 call    CF_RD_SEC       ; read sector
 822+ 1778 DD 2A 9A 81              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 823+ 177C DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 824+ 177F FD 2B                    dec     IY              ; decrement number of entries
 825+ 1781 B7                       or      A               ; is it $00 (empty entry)?
 826+ 1782 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 827+ 1784 FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 828+ 1786 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 829+ 1788 C5           FNDFREDIR4: push    BC              ; no, store BC
 830+ 1789 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 831+ 178C DD 09                    add     IX,BC           ; next entry in current sector
 832+ 178E C1                       pop     BC              ; retrieve sector pointer
 833+ 178F 23                       inc     HL              ; increment entry counter
 834+ 1790 7D                       ld      A,L
 835+ 1791 E6 0F                    and     %00001111       ; just done 16 entries?
 836+ 1793 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 837+ 1795 03                       inc     BC              ; entries in this sector finished .. goto next sector
 838+ 1796 78                       ld      A,B             ; check if...
 839+ 1797 B1                       or      C               ; ...BC=$000
 840+ 1798 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 841+ 179A 13                       inc     DE              ; yes, increment DE (MSB)
 842+ 179B E5           FNDFREDIR5: push    HL              ; preserve current entry
 843+ 179C FD E5                    push    IY              ; copy max allowed files...
 844+ 179E D1                       pop     DE              ; ...into HL
 845+ 179F CD 45 4D                 call    CMP16           ; check if reached max allowed entries
 846+ 17A2 E1                       pop     HL              ; (retrieve current entry)
 847+ 17A3 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 848+ 17A5 37                       scf                     ; entries are finished, raise an error
 849+ 17A6 C9                       ret                     ; return
 850+ 17A7 ED 43 A1 81  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 851+ 17AB 22 A3 81                 ld      (NTR_NBR),HL    ; store entry number
 852+ 17AE AF                       xor     A               ; reset Carry
 853+ 17AF C9                       ret
 854+ 17B0
 855+ 17B0
 856+ 17B0              ; *****************************************************************************
 857+ 17B0              ;   U T I L I T I E S
 858+ 17B0              ; *****************************************************************************
 859+ 17B0
 860+ 17B0              ; load entries intro RAM register
 861+ 17B0 2A 9A 81     LDENTRIES:  ld      HL,(IOBUFF)     ; start of I/O buffer
 862+ 17B3 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 863+ 17B6 09                       add     HL,BC           ; get address
 864+ 17B7 CD 70 18                 call    HL2DE           ; get entries into DE
 865+ 17BA ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 866+ 17BE C9                       ret                     ; return to caller
 867+ 17BF
 868+ 17BF
 869+ 17BF              ; load Master Sector (sector #0)
 870+ 17BF 01 00 00     LDMSCT:     ld      BC,$0000        ; LSB of sector
 871+ 17C2 50           LDMSCT1:    ld      D,B             ; MSB of sector
 872+ 17C3 58                       ld      E,B
 873+ 17C4 CD 6F 10                 call    CF_SETSTR       ; set sector
 874+ 17C7 CD B1 10                 call    CF_RD_SEC       ; read sector
 875+ 17CA C9                       ret
 876+ 17CB
 877+ 17CB
 878+ 17CB              ; generate random disk ID
 879+ 17CB C5           RND_ID:     push    BC
 880+ 17CC 06 02                    ld      B,$02           ; repeat 2 times
 881+ 17CE CD E2 17     RND_ID1:    call    RND8            ; get a random value
 882+ 17D1 CD 00 18                 call    CHATOZ          ; transform it into a letter
 883+ 17D4 12                       ld      (DE),A          ; store it
 884+ 17D5 13                       inc     DE              ; inc pointer
 885+ 17D6 CD E2 17                 call    RND8            ; get a random value
 886+ 17D9 CD F5 17                 call    CH0TO9          ; transform it into a number from 0 to 9
 887+ 17DC 12                       ld      (DE),A          ; store it
 888+ 17DD 13                       inc     DE              ; inc pointer
 889+ 17DE 10 EE                    djnz    RND_ID1         ; repeat
 890+ 17E0 C1                       pop     BC
 891+ 17E1 C9                       ret                     ; return to caller
 892+ 17E2
 893+ 17E2
 894+ 17E2              ; generate a pseudo-random number using TMR and R registers
 895+ 17E2 C5           RND8:       push    BC
 896+ 17E3 3A E5 81                 ld      A,(TMRCNT)      ; load LSB of sys-timer
 897+ 17E6 47                       ld      B,A             ; copy into B
 898+ 17E7 ED 5F                    ld      A,R             ; load refresh register
 899+ 17E9 A8                       xor     B               ; A xor B
 900+ 17EA 47                       ld      B,A             ; copy into B
 901+ 17EB 0F                       rrca                    ; multiply by 32
 902+ 17EC 0F                       rrca
 903+ 17ED 0F                       rrca
 904+ 17EE EE 1F                    xor     $1F
 905+ 17F0 80                       add     A,B
 906+ 17F1 DE FF                    sbc     A,255           ; carry
 907+ 17F3 C1                       pop     BC
 908+ 17F4 C9                       ret                     ; return to caller
 909+ 17F5
 910+ 17F5
 911+ 17F5              ; char ported into 0-9 interval
 912+ 17F5 E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 913+ 17F7 FE 0A                    cp      $0A             ; is it < 10?
 914+ 17F9 38 02                    jr      C,CH0TO9E       ; yes, jump over
 915+ 17FB D6 0A                    sub     $0A             ; subract 10
 916+ 17FD C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 917+ 17FF C9                       ret
 918+ 1800
 919+ 1800
 920+ 1800              ; char ported into A-Z interval
 921+ 1800 E6 1F        CHATOZ:     and     %00011111       ; get only first 5 bits
 922+ 1802 FE 1A                    cp      $1A             ; is it < 26?
 923+ 1804 38 02                    jr      C,CHATOZE       ; yes, jump over
 924+ 1806 D6 1A                    sub     $1A             ; no, subtract 26
 925+ 1808 C6 41        CHATOZE:    add     $41             ; get a letter from 'A' to 'Z'
 926+ 180A C9                       ret                     ; return to caller
 927+ 180B
 928+ 180B
 929+ 180B              ; first check DOS validity then load disk details
 930+ 180B CD 2D 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 931+ 180E D8                       ret     C               ; if errors, leave
 932+ 180F C5                       push    BC              ; store BC
 933+ 1810 D5                       push    DE              ; store DE
 934+ 1811 E5                       push    HL              ; store HL
 935+ 1812 01 00 00                 ld      BC,$0000        ; reset LSB of sector
 936+ 1815 50                       ld      D,B             ; reset MSB of sector
 937+ 1816 58                       ld      E,B
 938+ 1817 CD 6F 10                 call    CF_SETSTR       ; set sector #0
 939+ 181A CD B1 10                 call    CF_RD_SEC       ; read sector
 940+ 181D 2A 9A 81                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 941+ 1820 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 942+ 1823 19                       add     HL,DE
 943+ 1824 11 13 11                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 944+ 1827 06 04                    ld      B,$04           ; 4 chars
 945+ 1829 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 946+ 182A BE                       cp      (HL)            ; compare with disk DOS version
 947+ 182B 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 948+ 182D 13                       inc     DE              ; next source
 949+ 182E 23                       inc     HL              ; next comparison
 950+ 182F 10 F8                    djnz    CHKDSKVAL1      ; repeat
 951+ 1831 2A 98 81                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 952+ 1834 11 1D 00                 ld      DE,$001D        ; point to address of data area
 953+ 1837 19                       add     HL,DE           ; set pointer to beginning of identifies
 954+ 1838 CD 70 18                 call    HL2DE           ; first sector of data area into DE
 955+ 183B AF                       xor     A               ; no error - clear Carry flag
 956+ 183C 18 01                    jr      CHKDSKVAL2      ; jump over
 957+ 183E 37           CHKDSKVALE: scf                     ; error - set carry flag
 958+ 183F E1           CHKDSKVAL2: pop     HL
 959+ 1840 D1                       pop     DE
 960+ 1841 C1                       pop     BC
 961+ 1842 C9                       ret                     ; return to caller
 962+ 1843
 963+ 1843
 964+ 1843              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 965+ 1843              ; Inputs: DE: pointer to dest. buffer
 966+ 1843              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 967+ 1843              ; destroys: A, BC, DE, HL
 968+ 1843 ED 4B 09 82  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 969+ 1847 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 970+ 1848 FE 11                    cp      $11             ; is it <=16?
 971+ 184A 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 972+ 184C 0E 10                    ld      C,$10           ; no, get only 16 chars
 973+ 184E 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 974+ 184F 0E 10                    ld      C,$10           ; char counter
 975+ 1851 2A 07 82                 ld      HL,(DKNMPT)     ; pointer to disk name
 976+ 1854 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 977+ 1855 CD C2 18                 call    CHK_NAM         ; check if valid
 978+ 1858 D8                       ret     C               ; no, file name error
 979+ 1859 12                       ld      (DE),A          ; yes, store char
 980+ 185A 13                       inc     DE              ; next I/O location
 981+ 185B 23                       inc     HL              ; next disk name char
 982+ 185C 0D                       dec     C               ; decrement number of chars copied
 983+ 185D 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 984+ 185F 79                       ld      A,C             ; check if there are no empty chars in file
 985+ 1860 B7                       or      A
 986+ 1861 C8                       ret     Z               ; yes, job finished - return
 987+ 1862 3E 20                    ld      A,SPC           ; no, padding required
 988+ 1864 12           CHKNMVAL3:  ld      (DE),A          ; store char
 989+ 1865 13                       inc     DE              ; next location
 990+ 1866 0D                       dec     C               ; check if padding is over
 991+ 1867 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 992+ 1869 AF                       xor     A               ; clear Carry flag
 993+ 186A C9                       ret                     ; return to caller
 994+ 186B
 995+ 186B
 996+ 186B              ; store DE into (HL) and (HL+1)
 997+ 186B 73           DE2HL:      ld      (HL),E          ; LSB of size
 998+ 186C 23                       inc     HL
 999+ 186D 72                       ld      (HL),D          ; MSB of size
1000+ 186E 23                       inc     HL
1001+ 186F C9                       ret                     ; return to caller
1002+ 1870
1003+ 1870
1004+ 1870              ; get DE from (HL) and (HL+1)
1005+ 1870 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
1006+ 1871 23                       inc     HL              ; next location
1007+ 1872 56                       ld      D,(HL)          ; get MSB into D
1008+ 1873 23                       inc     HL              ; next location
1009+ 1874 C9                       ret                     ; return to caller
1010+ 1875
1011+ 1875
1012+ 1875              ; convert a 16/32-bit number into an ASCII string and print it
1013+ 1875              ; inputs: HL pointer to 32-bit number
1014+ 1875 CD 70 18     PRN32ASCII: call    HL2DE           ; load MSB into DE  <-- entry for 32-bit
1015+ 1878 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
1016+ 1879 23                       inc     HL
1017+ 187A 46                       ld      B,(HL)
1018+ 187B C5                       push    BC              ; copy BC...
1019+ 187C DD E1                    pop     IX              ; ...into IX
1020+ 187E FD 21 AE 81  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
1021+ 1882 CD 0E 4E                 call    CLCN32          ; convert number in DEIX into ASCII number
1022+ 1885 21 AE 81                 ld      HL,TPBF1        ; address of ASCII number
1023+ 1888 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
1024+ 1889 B7                       or      A               ; is it $00 (end of string)?
1025+ 188A C8                       ret     Z               ; yes, leave
1026+ 188B CD BC 23                 call    OUTC            ; no, print char
1027+ 188E 23                       inc     HL              ; next char
1028+ 188F 18 F7                    jr      PRNTSIZ         ; repeat
1029+ 1891
1030+ 1891
1031+ 1891              ; convert one or more bytes into memory in hex format
1032+ 1891              ; HL: pointer to number in memory - B: number of bytes to convert
1033+ 1891              ; destroys: A, D, HL
1034+ 1891 50           PRN_HEX:    ld      D,B             ; move bytes into D
1035+ 1892 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1036+ 1893 CD B2 18                 call    BYTEHEX         ; print hex number
1037+ 1896 23                       inc     HL              ; next location
1038+ 1897 15                       dec     D               ; decrement bytes to convert
1039+ 1898 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1040+ 189A C9                       ret
1041+ 189B
1042+ 189B
1043+ 189B              ; convert one or more words into memory in hex format
1044+ 189B              ; IX: pointer to number in memory - B: number of words to convert
1045+ 189B              ; destroys: AF, IX
1046+ 189B D5           PRN_WHEX:   push    DE
1047+ 189C 50                       ld      D,B
1048+ 189D DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1049+ 18A0 CD B2 18                 call    BYTEHEX         ; print hex number
1050+ 18A3 DD 7E 00                 ld      A,(IX)          ; load LSB into A
1051+ 18A6 CD B2 18                 call    BYTEHEX         ; print hex number
1052+ 18A9 DD 23                    inc     IX
1053+ 18AB DD 23                    inc     IX              ; next word
1054+ 18AD 15                       dec     D               ; decrement words to convert
1055+ 18AE 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1056+ 18B0 D1                       pop     DE
1057+ 18B1 C9                       ret
1058+ 18B2
1059+ 18B2
1060+ 18B2              ; print A in hex format
1061+ 18B2 C5           BYTEHEX:    push    BC
1062+ 18B3 D5                       push    DE
1063+ 18B4 CD 5A 4C                 call    BYT2ASC         ; convert to HEX and get back into BC
1064+ 18B7 78                       ld      A,B
1065+ 18B8 CD BC 23                 call    OUTC            ; print left nibble
1066+ 18BB 79                       ld      A,C
1067+ 18BC CD BC 23                 call    OUTC            ; print right nibble
1068+ 18BF D1                       pop     DE
1069+ 18C0 C1                       pop     BC
1070+ 18C1 C9                       ret                     ; return to caller
1071+ 18C2
1072+ 18C2
1073+ 18C2              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9', 'A'-'Z', '-', SPACE
1074+ 18C2              ; input: A -> char to check
1075+ 18C2              ; return: C is set if ERROR, reset otherwise
1076+ 18C2 FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1077+ 18C4 C8                       ret     Z               ; return if equal (C is reset)
1078+ 18C5 FE 2D                    cp      '-'             ; is it a minus?
1079+ 18C7 C8                       ret     Z               ; return if equal
1080+ 18C8 FE 30                    cp      '0'             ; char < '0' ?
1081+ 18CA D8                       ret     C               ; yes, disk name error
1082+ 18CB FE 3A                    cp      ':'             ; is char <= '9' ?
1083+ 18CD 38 07                    jr      C,CHK_C_CF      ; yes, leave
1084+ 18CF E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1085+ 18D1 FE 41                    cp      'A'             ; is char >= 'A' ?
1086+ 18D3 D8                       ret     C               ; no, error
1087+ 18D4 FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1088+ 18D6 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1089+ 18D7 C9           CHK_NAM_LV: ret                     ; return to caller
1090+ 18D8
1091+ 18D8
1092+ 18D8              ; clear I/O buffer
1093+ 18D8 F5           CLRIOBF:    push    AF              ; store AF
1094+ 18D9 C5                       push    BC              ; store BC
1095+ 18DA E5                       push    HL              ; store HL
1096+ 18DB 2A 9A 81                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1097+ 18DE 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1098+ 18E1 AF           CLRBUFF:    xor     A               ; reset A   ----- common part -----
1099+ 18E2 77           RSTIOBF:    ld      (HL),A          ; reset cell
1100+ 18E3 23                       inc     HL              ; next cell
1101+ 18E4 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1102+ 18E6 0D                       dec     C               ; decrement C
1103+ 18E7 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1104+ 18E9 E1                       pop     HL              ; retrieve HL
1105+ 18EA C1                       pop     BC              ; retrieve BC
1106+ 18EB F1                       pop     AF              ; retrieve AF
1107+ 18EC C9                       ret                     ; return to caller
1108+ 18ED
1109+ 18ED
1110+ 18ED              ; clear DOS buffer
1111+ 18ED F5           CLRDOSBF:   push    AF              ; store AF
1112+ 18EE C5                       push    BC              ; store BC
1113+ 18EF E5                       push    HL              ; store HL
1114+ 18F0 2A 98 81                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1115+ 18F3 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1116+ 18F6 C3 E1 18                 jp      CLRBUFF         ; continue to common part
# file closed: ../include/dos/dos-1.02.asm
  84  18F9
  85  18F9              ; include the latest version of the LM80C BASIC interpreter
  86  18F9                  INCLUDE "../include/basic/basic-1.07.asm"
# file opened: ../include/basic/basic-1.07.asm
   1+ 18F9              ; ------------------------------------------------------------------------------
   2+ 18F9              ; LM80C BASIC (32K/64K) - R3.21
   3+ 18F9              ; ------------------------------------------------------------------------------
   4+ 18F9              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18F9              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18F9              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18F9              ; kind of warranty: you can use them at your own risk.
   8+ 18F9              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18F9              ; maintain the copyright notices, include this advice and the note to the
  10+ 18F9              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18F9              ; redistribuite them.
  12+ 18F9              ; https://www.leonardomiliani.com
  13+ 18F9              ;
  14+ 18F9              ; Please support me by visiting the following links:
  15+ 18F9              ; Main project page: https://www.leonardomiliani.com
  16+ 18F9              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18F9              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18F9              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18F9              ; ------------------------------------------------------------------------------
  20+ 18F9              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18F9              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18F9              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18F9
  24+ 18F9
  25+ 18F9              ;------------------------------------------------------------------------------
  26+ 18F9              ;  L M 8 0 C   B A S I C
  27+ 18F9              ;------------------------------------------------------------------------------
  28+ 18F9
  29+ 18F9              ; GENERAL EQUATES
  30+ 18F9
  31+ 18F9              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18F9              CTRLC           equ     $03             ; Control "C"
  33+ 18F9              CTRLG           equ     $07             ; Control "G"
  34+ 18F9              BKSP            equ     $08             ; Back space
  35+ 18F9              LF              equ     $0A             ; Line feed
  36+ 18F9              CS              equ     $0C             ; Clear screen
  37+ 18F9              CR              equ     $0D             ; Carriage return
  38+ 18F9              CTRLO           equ     $0F             ; Control "O"
  39+ 18F9              CTRLQ           equ     $11             ; Control "Q"
  40+ 18F9              CTRLR           equ     $12             ; Control "R"
  41+ 18F9              CTRLS           equ     $13             ; Control "S"
  42+ 18F9              CTRLU           equ     $15             ; Control "U"
  43+ 18F9              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18F9              ESC             equ     $1B             ; Escape
  45+ 18F9              SPC             equ     $20             ; Space
  46+ 18F9              DEL             equ     $7F             ; Delete
  47+ 18F9              INSRT           equ     $1A             ; Insert Key
  48+ 18F9              ; cursor ASCII codes
  49+ 18F9              CRSLFT          equ     $1C             ; cursor left
  50+ 18F9              CRSRGT          equ     $1D             ; cursor right
  51+ 18F9              CRSUP           equ     $1E             ; cursor up
  52+ 18F9              CRSDN           equ     $1F             ; cursor down
  53+ 18F9
  54+ 18F9
  55+ 18F9              ;-------------------------------------------------------------------------
  56+ 18F9              ; BASIC ERROR MESSAGES
  57+ 18F9              ; the interpreter looks for a single-byte code in the following list,
  58+ 18F9              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18F9              ; find where to retrieve the message text in "ERRORS"
  60+ 18F9
  61+ 18F9              ; BASIC ERROR CODE VALUES
  62+ 18F9              ; These values act as an offset to point to the error message into the error table
  63+ 18F9              ; must be incremented by 2 because they point to a word address jump
  64+ 18F9              NF      equ     $00     ; NEXT without FOR
  65+ 18F9              SN      equ     $02     ; Syntax error
  66+ 18F9              RG      equ     $04     ; RETURN without GOSUB
  67+ 18F9              OD      equ     $06     ; Out of DATA
  68+ 18F9              FC      equ     $08     ; Function call error
  69+ 18F9              OV      equ     $0A     ; Overflow
  70+ 18F9              OM      equ     $0C     ; Out of memory
  71+ 18F9              UL      equ     $0E     ; Undefined line number
  72+ 18F9              BS      equ     $10     ; Bad subscript
  73+ 18F9              DD      equ     $12     ; Re-Dimensioned array
  74+ 18F9              DZ      equ     $14     ; Division by zero (/0)
  75+ 18F9              ID      equ     $16     ; Illegal direct
  76+ 18F9              TM      equ     $18     ; Type mis-match
  77+ 18F9              OS      equ     $1A     ; Out of string space
  78+ 18F9              LS      equ     $1C     ; String too long
  79+ 18F9              ST      equ     $1E     ; String formula too complex
  80+ 18F9              CN      equ     $20     ; Can't continue
  81+ 18F9              UF      equ     $22     ; Undefined FN function
  82+ 18F9              MO      equ     $24     ; Missing operand
  83+ 18F9              HX      equ     $26     ; HEX error
  84+ 18F9              BN      equ     $28     ; BIN error
  85+ 18F9              GM      equ     $2A     ; No Graphics Mode
  86+ 18F9              SC      equ     $2C     ; Serial configuration
  87+ 18F9              SA      equ     $2E     ; Serial port already open
  88+ 18F9              SO      equ     $30     ; Serial buffer overrun
  89+ 18F9              HP      equ     $32     ; HELP call
  90+ 18F9              IM      equ     $34     ; Illegal indirect
  91+ 18F9              NR      equ     $36     ; Device not ready
  92+ 18F9              D0      equ     $38     ; DOS not enabled
  93+ 18F9              D1      equ     $3A     ; Disk/File name error
  94+ 18F9              D2      equ     $3C     ; Disk geometry error
  95+ 18F9              D3      equ     $3E     ; Save error
  96+ 18F9              D4      equ     $40     ; Load error
  97+ 18F9              D5      equ     $42     ; Disk full error
  98+ 18F9              D6      equ     $44     ; Duplicate file name error
  99+ 18F9              D7      equ     $46     ; DOS version error
 100+ 18F9              D8      equ     $48     ; File not found error
 101+ 18F9
 102+ 18F9
 103+ 18F9              ; BASIC ERROR POINTER TABLE
 104+ 18F9              ERRTBL: equ $
 105+ 18F9 43 19        NFPTR:  defw    NFMSG
 106+ 18FB 54 19        SNPTR:  defw    SNMSG
 107+ 18FD 5B 19        RGPTR:  defw    RGMSG
 108+ 18FF 70 19        ODPTR:  defw    ODMSG
 109+ 1901 7C 19        FCPTR:  defw    FCMSG
 110+ 1903 92 19        OVPTR:  defw    OVMSG
 111+ 1905 9B 19        OMPTR:  defw    OMMSG
 112+ 1907 A9 19        ULPTR:  defw    ULMSG
 113+ 1909 B8 19        BSPTR:  defw    BSMSG
 114+ 190B C6 19        DDPTR:  defw    DDMSG
 115+ 190D DB 19        DZPTR:  defw    DZMSG
 116+ 190F EC 19        IDPTR:  defw    IDMSG
 117+ 1911 00 1A        TMPTR:  defw    TMMSG
 118+ 1913 0F 1A        OSPTR:  defw    OSMSG
 119+ 1915 23 1A        LSPTR:  defw    LSMSG
 120+ 1917 33 1A        STPTR:  defw    STMSG
 121+ 1919 4E 1A        CNPTR:  defw    CNMSG
 122+ 191B 5D 1A        UFPTR:  defw    UFMSG
 123+ 191D 73 1A        MOPTR:  defw    MOMSG
 124+ 191F 83 1A        HXPTR:  defw    HXMSG
 125+ 1921 8E 1A        BNPTR:  defw    BNMSG
 126+ 1923 99 1A        GMPRT:  defw    GMMSG
 127+ 1925 AA 1A        SCPTR:  defw    SCMSG
 128+ 1927 BF 1A        SAPTR:  defw    SAMSG
 129+ 1929 D8 1A        SOPTR:  defw    SOMSG
 130+ 192B EE 1A        HPPTR:  defw    HPMSG
 131+ 192D F8 1A        IMPRT:  defw    IMMSG
 132+ 192F 0E 1B        NRPRT:  defw    NRMSG
 133+ 1931 1F 1B        D0PTR:  defw    D0MSG
 134+ 1933 2F 1B        D1PRT:  defw    D1MSG
 135+ 1935 3B 1B        D2PRT:  defw    D2MSG
 136+ 1937 49 1B        D3PRT:  defw    D3MSG
 137+ 1939 4E 1B        D4PTR:  defw    D4MSG
 138+ 193B 53 1B        D5PTR:  defw    D5MSG
 139+ 193D 5D 1B        D6PTR:  defw    D6MSG
 140+ 193F 71 1B        D7PRT:  defw    D7MSG
 141+ 1941 7D 1B        D8PTR:  defw    D8MSG
 142+ 1943
 143+ 1943
 144+ 1943              ; BASIC ERROR MESSAGE LIST
 145+ 1943              ERRORS  equ $
 146+ 1943 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 1947 20 57 69 74
 146+ 194B 68 6F 75 74
 146+ 194F 20 46 4F 52
 146+ 1953 00
 147+ 1954 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 1958 61 78 00
 148+ 195B 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 195F 52 4E 20 77
 148+ 1963 69 74 68 6F
 148+ 1967 75 74 20 47
 148+ 196B 4F 53 55 42
 148+ 196F 00
 149+ 1970 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 1974 6F 66 20 44
 149+ 1978 41 54 41 00
 150+ 197C 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 1980 67 61 6C 20
 150+ 1984 46 75 6E 63
 150+ 1988 74 69 6F 6E
 150+ 198C 20 43 61 6C
 150+ 1990 6C 00
 151+ 1992 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1996 66 6C 6F 77
 151+ 199A 00
 152+ 199B 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 199F 6F 66 20 4D
 152+ 19A3 65 6D 6F 72
 152+ 19A7 79 00
 153+ 19A9 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 19AD 66 69 6E 65
 153+ 19B1 64 20 4C 69
 153+ 19B5 6E 65 00
 154+ 19B8 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 19BC 53 75 62 73
 154+ 19C0 63 72 69 70
 154+ 19C4 74 00
 155+ 19C6 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 19CA 69 6D 65 6E
 155+ 19CE 73 69 6F 6E
 155+ 19D2 65 64 20 41
 155+ 19D6 72 72 61 79
 155+ 19DA 00
 156+ 19DB 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 19DF 73 69 6F 6E
 156+ 19E3 20 62 79 20
 156+ 19E7 5A 65 72 6F
 156+ 19EB 00
 157+ 19EC 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 19F0 67 61 6C 20
 157+ 19F4 44 69 72 65
 157+ 19F8 63 74 20 4D
 157+ 19FC 6F 64 65 00
 158+ 1A00 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 1A04 20 4D 69 73
 158+ 1A08 2D 6D 61 74
 158+ 1A0C 63 68 00
 159+ 1A0F 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 1A13 6F 66 20 53
 159+ 1A17 74 72 69 6E
 159+ 1A1B 67 20 53 70
 159+ 1A1F 61 63 65 00
 160+ 1A23 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 1A27 6E 67 20 54
 160+ 1A2B 6F 6F 20 4C
 160+ 1A2F 6F 6E 67 00
 161+ 1A33 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 1A37 6E 67 20 46
 161+ 1A3B 6F 72 6D 75
 161+ 1A3F 6C 61 20 54
 161+ 1A43 6F 6F 20 43
 161+ 1A47 6F 6D 70 6C
 161+ 1A4B 65 78 00
 162+ 1A4E 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A52 74 20 43 6F
 162+ 1A56 6E 74 69 6E
 162+ 1A5A 75 65 00
 163+ 1A5D 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A61 66 69 6E 65
 163+ 1A65 64 20 46 4E
 163+ 1A69 20 46 75 6E
 163+ 1A6D 63 74 69 6F
 163+ 1A71 6E 00
 164+ 1A73 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A77 69 6E 67 20
 164+ 1A7B 4F 70 65 72
 164+ 1A7F 61 6E 64 00
 165+ 1A83 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A87 46 6F 72 6D
 165+ 1A8B 61 74 00
 166+ 1A8E 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A92 46 6F 72 6D
 166+ 1A96 61 74 00
 167+ 1A99 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A9D 72 61 70 68
 167+ 1AA1 69 63 73 20
 167+ 1AA5 4D 6F 64 65
 167+ 1AA9 00
 168+ 1AAA 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1AAE 61 6C 20 43
 168+ 1AB2 6F 6E 66 69
 168+ 1AB6 67 75 72 61
 168+ 1ABA 74 69 6F 6E
 168+ 1ABE 00
 169+ 1ABF 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1AC3 61 6C 20 50
 169+ 1AC7 6F 72 74 20
 169+ 1ACB 41 6C 72 65
 169+ 1ACF 61 64 79 20
 169+ 1AD3 4F 70 65 6E
 169+ 1AD7 00
 170+ 1AD8 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1ADC 61 6C 20 42
 170+ 1AE0 75 66 66 65
 170+ 1AE4 72 20 4F 76
 170+ 1AE8 65 72 72 75
 170+ 1AEC 6E 00
 171+ 1AEE 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1AF2 20 43 61 6C
 171+ 1AF6 6C 00
 172+ 1AF8 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1AFC 67 61 6C 20
 172+ 1B00 49 6E 64 69
 172+ 1B04 72 65 63 74
 172+ 1B08 20 4D 6F 64
 172+ 1B0C 65 00
 173+ 1B0E 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1B12 63 65 20 4E
 173+ 1B16 6F 74 20 52
 173+ 1B1A 65 61 64 79
 173+ 1B1E 00
 174+ 1B1F 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1B23 4E 6F 74 20
 174+ 1B27 45 6E 61 62
 174+ 1B2B 6C 65 64 00
 175+ 1B2F 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1B33 20 53 74 72
 175+ 1B37 69 6E 67 00
 176+ 1B3B 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1B3F 20 47 65 6F
 176+ 1B43 6D 65 74 72
 176+ 1B47 79 00
 177+ 1B49 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1B4D 00
 178+ 1B4E 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B52 00
 179+ 1B53 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B57 20 46 75 6C
 179+ 1B5B 6C 00
 180+ 1B5D 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B61 69 63 61 74
 180+ 1B65 65 20 46 69
 180+ 1B69 6C 65 20 4E
 180+ 1B6D 61 6D 65 00
 181+ 1B71 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B75 56 65 72 73
 181+ 1B79 69 6F 6E 00
 182+ 1B7D 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B81 20 4E 6F 74
 182+ 1B85 20 46 6F 75
 182+ 1B89 6E 64 00
 183+ 1B8C
 184+ 1B8C
 185+ 1B8C              ;-----------------------------------------------------------------------------
 186+ 1B8C              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B8C              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B8C              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B8C
 190+ 1B8C C3 92 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B8F C3 5A 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B92
 193+ 1B92 C3 99 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B95 B0 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B97 75 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B99 21 5E 80     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B9C F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B9D C3 30 4D             jp      INITST          ; Go to initialise
 199+ 1BA0
 200+ 1BA0 21 4A 1F     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1BA3 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1BA6 11 5E 80             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1BA9 ED B0                ldir                    ; Copy data
 204+ 1BAB EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1BAC F9                   ld      SP,HL           ; Temporary stack
 206+ 1BAD CD 13 22             call    CLREG           ; Clear registers and stack
 207+ 1BB0 CD C7 28             call    PRNTCRLF        ; Output CRLF
 208+ 1BB3 32 91 81             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1BB6 32 6E 82             ld      (PROGST),A      ; Initialise program area
 210+ 1BB9 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1BBB 21 DE 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1BBE CD 93 2F             call    PRS             ; Output "Memory size"
 213+ 1BC1 CD 30 22             call    PROMPT          ; Get input with '?'
 214+ 1BC4 CD 44 09             call    CURSOR_ON       ; enable cursor
 215+ 1BC7 CD FA 25             call    GETCHR          ; Get next character
 216+ 1BCA B7                   or      A               ; Set flags
 217+ 1BCB C2 E3 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1BCE 21 D2 82     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1BD1 23           MLOOP:  inc     HL              ; Next byte
 220+ 1BD2 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1BD3 B5                   or      L
 222+ 1BD4 CA F5 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1BD7 7E                   ld      A,(HL)          ; Get contents
 224+ 1BD8 47                   ld      B,A             ; Save it
 225+ 1BD9 2F                   cpl                     ; Flip all bits
 226+ 1BDA 77                   ld      (HL),A          ; Put it back
 227+ 1BDB BE                   cp      (HL)            ; RAM there if same
 228+ 1BDC 70                   ld      (HL),B          ; Restore old contents
 229+ 1BDD CA D1 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1BE0 C3 F5 1B             jp      SETTOP          ; Top of RAM found
 231+ 1BE3
 232+ 1BE3 CD CA 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1BE6 B7                   or      A               ; Set flags on last byte
 234+ 1BE7 C2 B1 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1BEA EB                   ex      DE,HL           ; Address into HL
 236+ 1BEB 2B                   dec     HL              ; Back one byte
 237+ 1BEC 3E D9                ld      A,%11011001     ; Test byte
 238+ 1BEE 46                   ld      B,(HL)          ; Get old contents
 239+ 1BEF 77                   ld      (HL),A          ; Load test byte
 240+ 1BF0 BE                   cp      (HL)            ; RAM there if same
 241+ 1BF1 70                   ld      (HL),B          ; Restore old contents
 242+ 1BF2 C2 BB 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BF5
 244+ 1BF5 CD 59 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BF8 2B                   dec     HL              ; Back one byte
 246+ 1BF9 11 D1 82             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BFC CD AB 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BFF DA BB 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1C02 3A 4A 82             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1C05 1F                   rra                     ; is DOS disabled?
 251+ 1C06 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1C08 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1C0B 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1C0C 22 9A 81             ld      (IOBUFF),HL     ; ...and store address
 255+ 1C0F 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1C12 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1C13 22 98 81             ld      (DOSBFR),HL     ; ...and store address
 258+ 1C16 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1C19 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1C1A 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1C1D 22 96 81             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1C20 19                   add     HL,DE           ; Allocate string space
 263+ 1C21 22 AD 80             ld      (STRSPC),HL     ; Save string space
 264+ 1C24 CD EE 21             call    CLRPTR          ; Clear program area
 265+ 1C27 2A AD 80             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1C2A 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1C2D 19                   add     HL,DE           ; Adjust HL
 268+ 1C2E 11 6E 82             ld      DE,PROGST       ; Start of program text
 269+ 1C31 7D                   ld      A,L             ; Get LSB
 270+ 1C32 93                   sub     E               ; Adjust it
 271+ 1C33 6F                   ld      L,A             ; Re-save
 272+ 1C34 7C                   ld      A,H             ; Get MSB
 273+ 1C35 9A                   sbc     A,D             ; Adjust it
 274+ 1C36 67                   ld      H,A             ; Re-save
 275+ 1C37 E5                   push    HL              ; Save bytes free
 276+ 1C38 21 80 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1C3B CD 93 2F             call    PRS             ; Output string
 278+ 1C3E 3A 4A 82             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1C41 B7                   or      A
 280+ 1C42 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1C44 21 C1 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1C47 CD 93 2F             call    PRS
 283+ 1C4A 21 69 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1C4D CD 93 2F             call    PRS             ; Output string
 285+ 1C50 E1                   pop     HL              ; Get bytes free back
 286+ 1C51 CD 32 3A             call    PRNTHL          ; Output amount of free memory
 287+ 1C54 21 72 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C57 CD 93 2F             call    PRS             ; Output string
 289+ 1C5A
 290+ 1C5A 31 3D 81     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C5D CD 13 22     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C60 CD 59 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C63 CD 44 09             call    CURSOR_ON       ; enable cursor
 294+ 1C66 C3 11 21             jp      PRNTOK          ; Go to get command line
 295+ 1C69
 296+ 1C69 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C6D 20 20 20 20
 296+ 1C71 00
 297+ 1C72 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C76 65 73 20 66
 297+ 1C7A 72 65 65 0D
 297+ 1C7E 0D 00
 298+ 1C80
 299+ 1C80 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.21 ",251,"2021 L.Miliani"
 299+ 1C84 43 20 42 41
 299+ 1C88 53 49 43 20
 299+ 1C8C 33 2E 32 31
 299+ 1C90 20 FB 32 30
 299+ 1C94 32 31 20 4C
 299+ 1C98 2E 4D 69 6C
 299+ 1C9C 69 61 6E 69
 300+ 1CA0 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1CA4 20 42 41 53
 300+ 1CA8 49 43 20 34
 300+ 1CAC 2E 37 20 20
 300+ 1CB0 FB 31 39 37
 300+ 1CB4 38 20 4D 69
 300+ 1CB8 63 72 6F 73
 300+ 1CBC 6F 66 74 0D
 300+ 1CC0 00
 301+ 1CC1 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.02","  Loaded",CR,0
 301+ 1CC5 20 4C 4D 38
 301+ 1CC9 30 43 20 44
 301+ 1CCD 4F 53 20 31
 301+ 1CD1 2E 30 32 20
 301+ 1CD5 20 4C 6F 61
 301+ 1CD9 64 65 64 0D
 301+ 1CDD 00
 302+ 1CDE
 303+ 1CDE 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1CE2 72 79 20 74
 303+ 1CE6 6F 70 00
 304+ 1CE9
 305+ 1CE9              ; The following list reports all the functions supported by the interpreter.
 306+ 1CE9              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1CE9              ; then into the list of the reserved words below, and finally must increment the
 308+ 1CE9              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1CE9              ; function.
 310+ 1CE9
 311+ 1CE9              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1CE9              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1CE9              ; entry here must have the corresponding entry in the tokens list.
 314+ 1CE9 A7 38        FNCTAB: defw    SGN
 315+ 1CEB 3D 2E                defw    TMR         ; added by Leonardo Miliani
 316+ 1CED 6B 39                defw    INT
 317+ 1CEF BD 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1CF1 64 80                defw    USR
 319+ 1CF3 53 2E                defw    FRE
 320+ 1CF5 CE 32                defw    INP
 321+ 1CF7 81 2E                defw    POS
 322+ 1CF9 31 3B                defw    SQR
 323+ 1CFB 10 3C                defw    RND
 324+ 1CFD FB 36                defw    LOG
 325+ 1CFF 7F 3B                defw    EXP
 326+ 1D01 85 3C                defw    COS
 327+ 1D03 8B 3C                defw    SIN
 328+ 1D05 EC 3C                defw    TAN
 329+ 1D07 01 3D                defw    ATN
 330+ 1D09 AA 33                defw    PEEK
 331+ 1D0B 6C 3D                defw    DEEK
 332+ 1D0D B1 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1D0F 80 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1D11 8B 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1D13 9F 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1D15 C5 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1D17 65 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1D19 05 31                defw    LEN
 339+ 1D1B 1D 2F                defw    STR
 340+ 1D1D 95 32                defw    VAL
 341+ 1D1F 14 31                defw    ASC
 342+ 1D21 25 31                defw    CHR
 343+ 1D23 24 4C                defw    HEX         ; added by Grant Searle
 344+ 1D25 B5 4C                defw    BIN         ; added by Grant Searle
 345+ 1D27 35 31                defw    LEFT
 346+ 1D29 5B 32                defw    RIGHT
 347+ 1D2B 65 32                defw    MID
 348+ 1D2D
 349+ 1D2D              ; RESERVED WORD LIST
 350+ 1D2D              ; Here are all the reserved words used by the interpreter
 351+ 1D2D              ; To add custom functions/commands, the user must insert the keyword
 352+ 1D2D              ; in this list, following the schematic
 353+ 1D2D C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1D30 C6 4F 52             defb    'F'+$80,"OR"
 355+ 1D33 CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1D37 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1D3B C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1D3F 54
 358+ 1D40 C4 49 4D             defb    'D'+$80,"IM"
 359+ 1D43 D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1D47 CC 45 54             defb    'L'+$80,"ET"
 361+ 1D4A C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1D4E D2 55 4E             defb    'R'+$80,"UN"
 363+ 1D51 C9 46                defb    'I'+$80,"F"
 364+ 1D53 D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D57 4F 52 45
 365+ 1D5A C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D5E 42
 366+ 1D5F D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D63 52 4E
 367+ 1D65 D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D68 D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D6C CF 55 54             defb    'O'+$80,"UT"
 370+ 1D6F CF 4E                defb    'O'+$80,"N"
 371+ 1D71 C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D75 53
 372+ 1D76 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D7A 45
 373+ 1D7B C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D7F D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D83 C4 45 46             defb    'D'+$80,"EF"
 376+ 1D86 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D8A C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D8E D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D92 45
 379+ 1D93 D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D97 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D9B D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D9F 45 4E
 382+ 1DA1 CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1DA5 54 45
 383+ 1DA7 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1DAB 44
 384+ 1DAC D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1DB0 4D 45
 385+ 1DB2 D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1DB6 45
 386+ 1DB7 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1DBB 52
 387+ 1DBC D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1DC0 C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1DC4 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1DC8 4C 45
 390+ 1DCA D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1DCE 54
 391+ 1DCF D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1DD3 41 4C
 392+ 1DD5 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1DD9 C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1DDC CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1DDF CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1DE2 C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1DE6 4E 54
 397+ 1DE8 D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1DEC 48
 398+ 1DED D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1DF0 D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DF4 54
 400+ 1DF5 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DF9 D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DFD 54
 402+ 1DFE C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1E02 CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1E06 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1E0A 52
 405+ 1E0B CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1E0F D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1E13 CE 45 57             defb    'N'+$80,"EW"
 408+ 1E16 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1E1A D4 4F                defb    'T'+$80,"O"
 410+ 1E1C C6 4E                defb    'F'+$80,"N"
 411+ 1E1E D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1E22 D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1E26 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1E29 D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1E2D                      ; from here: operators
 416+ 1E2D AB                   defb    '+'+$80
 417+ 1E2E AD                   defb    '-'+$80
 418+ 1E2F AA                   defb    '*'+$80
 419+ 1E30 AF                   defb    '/'+$80
 420+ 1E31 A5                   defb    '%'+$80
 421+ 1E32 A3                   defb    '#'+$80
 422+ 1E33 DE                   defb    '^'+$80
 423+ 1E34 C1 4E 44             defb    'A'+$80,"ND"
 424+ 1E37 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1E3A CF 52                defb    'O'+$80,"R"
 426+ 1E3C BE                   defb    '>'+$80
 427+ 1E3D BD                   defb    '='+$80
 428+ 1E3E BC                   defb    '<'+$80
 429+ 1E3F
 430+ 1E3F                      ; from here there are the tokens' FUNCTIONS list
 431+ 1E3F                      ; this list must be coherent with the functions list above
 432+ 1E3F D3 47 4E             defb    'S'+$80,"GN"
 433+ 1E42 D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1E45 C9 4E 54             defb    'I'+$80,"NT"
 435+ 1E48 C1 42 53             defb    'A'+$80,"BS"
 436+ 1E4B D5 53 52             defb    'U'+$80,"SR"
 437+ 1E4E C6 52 45             defb    'F'+$80,"RE"
 438+ 1E51 C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E54 D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E57 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E5A D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E5D CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E60 C5 58 50             defb    'E'+$80,"XP"
 444+ 1E63 C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E66 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E69 D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E6C C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E6F D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E73 C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E77 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E7B 4B
 451+ 1E7C D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E80 54
 452+ 1E81 D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E85 54
 453+ 1E86 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E8A 59
 454+ 1E8B D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E8F 54
 455+ 1E90 C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E94 52
 456+ 1E95 CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E98 D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E9C D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E9F C1 53 43             defb    'A'+$80,"SC"
 460+ 1EA2 C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1EA6 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1EAA C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1EAE CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1EB2 24
 464+ 1EB3 D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1EB7 54 24
 465+ 1EB9 CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1EBD 80                   defb    $80                     ; End-of-list marker
 467+ 1EBE
 468+ 1EBE              ; KEYWORD ADDRESS TABLE
 469+ 1EBE              ; this list must be coherent with the commands'
 470+ 1EBE              ; tokens list above
 471+ 1EBE 44 26        WORDTB: defw    PEND
 472+ 1EC0 41 25                defw    FOR
 473+ 1EC2 40 2A                defw    NEXT
 474+ 1EC4 A3 27                defw    DATA
 475+ 1EC6 3D 29                defw    INPUT
 476+ 1EC8 95 2C                defw    DIM
 477+ 1ECA 77 29                defw    READ
 478+ 1ECC BA 27                defw    LET
 479+ 1ECE 60 27                defw    GOTO
 480+ 1ED0 3B 27                defw    RUN
 481+ 1ED2 32 28                defw    IF
 482+ 1ED4 0A 26                defw    RESTOR
 483+ 1ED6 4F 27                defw    GOSUB
 484+ 1ED8 7E 27                defw    RETURN
 485+ 1EDA A5 27                defw    REM         ; original REM
 486+ 1EDC 42 26                defw    STOP
 487+ 1EDE DA 32                defw    POUT
 488+ 1EE0 14 28                defw    ON
 489+ 1EE2 E7 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1EE4 22 4A                defw    ERASE       ; added by Leonardo Miliani
 491+ 1EE6 82 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1EE8 E0 32                defw    WAIT
 493+ 1EEA 89 2E                defw    DEF
 494+ 1EEC D4 33                defw    POKE
 495+ 1EEE 77 3D                defw    DOKE
 496+ 1EF0 D9 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1EF2 16 34                defw    SREG        ; added by Leonardo Miliani
 498+ 1EF4 64 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1EF6 AD 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1EF8 E4 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1EFA 70 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1EFC 37 34                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1EFE 8E 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1F00 28 3E                defw    COLOR       ; added by Leonardo Miliani
 505+ 1F02 18 41                defw    PLOT        ; added by Leonardo Miliani
 506+ 1F04 AB 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1F06 E4 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1F08 D5 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1F0A EF 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1F0C 2E 47                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1F0E 50 3D                defw    CLS
 512+ 1F10 4C 47                defw    KEY         ; added by Leonardo Miliani
 513+ 1F12 22 33                defw    NMI         ; added by Leonardo Miliani
 514+ 1F14 E4 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1F16 64 3D                defw    WIDTH
 516+ 1F18 7C 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1F1A 1A 4D                defw    RESET       ; new behaviour: now it resets the system
 518+ 1F1C A7 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1F1E 64 28                defw    PRINT
 520+ 1F20 76 26                defw    CONT
 521+ 1F22 18 24                defw    LIST
 522+ 1F24 EF 26                defw    CLEAR
 523+ 1F26 C3 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1F28 5D 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1F2A ED 21                defw    NEW
 526+ 1F2C
 527+ 1F2C              ; RESERVED WORD TOKEN VALUES
 528+ 1F2C              ; if you add a function or command you must increment by 1
 529+ 1F2C              ; the values below. Pay attention that you must increment only the
 530+ 1F2C              ; values AFTER the position where you entered the function/command word
 531+ 1F2C              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1F2C              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1F2C              ; that is before the point where VPOKE has been entered, every entry
 534+ 1F2C              ; after REM has been incremented.
 535+ 1F2C              ; Another example: when TMR has been added, since it's a function, every
 536+ 1F2C              ; entry after & included ZSGN must be checked (read below)
 537+ 1F2C
 538+ 1F2C              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1F2C              ZFOR    equ     $81             ; FOR
 540+ 1F2C              ZDATA   equ     $83             ; DATA
 541+ 1F2C              ZGOTO   equ     $88             ; GOTO
 542+ 1F2C              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1F2C              ZREM    equ     $8E             ; REM
 544+ 1F2C              ZELSE   equ     $AF             ; ELSE
 545+ 1F2C              ZPRINT  equ     $B0             ; PRINT
 546+ 1F2C              ZNEW    equ     $B6             ; NEW
 547+ 1F2C
 548+ 1F2C              ZTAB    equ     $B7             ; TAB
 549+ 1F2C              ZTO     equ     $B8             ; TO
 550+ 1F2C              ZFN     equ     $B9             ; FN
 551+ 1F2C              ZSPC    equ     $BA             ; SPC
 552+ 1F2C              ZTHEN   equ     $BB             ; THEN
 553+ 1F2C              ZNOT    equ     $BC             ; NOT
 554+ 1F2C              ZSTEP   equ     $BD             ; STEP
 555+ 1F2C
 556+ 1F2C              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1F2C              ZMINUS  equ     $BF             ; -
 558+ 1F2C              ZTIMES  equ     $C0             ; *
 559+ 1F2C              ZDIV    equ     $C1             ; /
 560+ 1F2C              ZMOD    equ     $C2             ; %
 561+ 1F2C              ZDINT   equ     $C3             ; #
 562+ 1F2C              ZOR     equ     $C7             ; OR
 563+ 1F2C              ZGTR    equ     $C8             ; >
 564+ 1F2C              ZEQUAL  equ     $C9             ; M
 565+ 1F2C              ZLTH    equ     $CA             ; <
 566+ 1F2C
 567+ 1F2C              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1F2C              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1F2C                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1F2C              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1F2C              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1F2C                                              ;               he/she must increment this pointer by 1
 573+ 1F2C
 574+ 1F2C              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1F2C              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1F2C              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1F2C 79           PRITAB: defb    $79             ; Precedence value
 578+ 1F2D 19 3A                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1F2F
 580+ 1F2F 79                   defb    $79             ; Precedence value
 581+ 1F30 FC 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1F32
 583+ 1F32 7C                   defb    $7C             ; Precedence value
 584+ 1F33 3A 37                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1F35
 586+ 1F35 7C                   defb    $7C             ; Precedence value
 587+ 1F36 EC 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1F38
 589+ 1F38 7C                   defb    $7C             ; Precedence value
 590+ 1F39 97 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1F3B
 592+ 1F3B 7C                   defb    $7C             ; precedence value
 593+ 1F3C 8F 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1F3E
 595+ 1F3E 7F                   defb    $7F             ; Precedence value
 596+ 1F3F 3A 3B                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1F41
 598+ 1F41 50                   defb    $50             ; Precedence value
 599+ 1F42 DE 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1F44
 601+ 1F44 4A                   defb    $4A             ; Precedence value
 602+ 1F45 E6 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1F47
 604+ 1F47 46                   defb    $46             ; Precedence value
 605+ 1F48 E1 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1F4A
 607+ 1F4A
 608+ 1F4A              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1F4A              ; these values are copied into RAM at startup
 610+ 1F4A C3 5A 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1F4D ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1F50 C3 C5 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F53 D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F55 C9                   ret
 615+ 1F56 D6 00                sub     $00             ; Division support routine
 616+ 1F58 6F                   ld      L,A
 617+ 1F59 7C                   ld      A,H
 618+ 1F5A DE 00                sbc     A,$00
 619+ 1F5C 67                   ld      H,A
 620+ 1F5D 78                   ld      A,B
 621+ 1F5E DE 00                sbc     A,$00
 622+ 1F60 47                   ld      B,A
 623+ 1F61 3E 00                ld      A,$00
 624+ 1F63 C9                   ret
 625+ 1F64 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F67 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F6B 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F6F 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F73 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F77 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F7B 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F7F 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F83 D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F87 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F8B DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F8D C9                   ret
 637+ 1F8E FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F8F 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F90 00                   defb    $00             ; No nulls after input bytes
 640+ 1F91 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F92 00 00                defw    $00             ; Array load/save check sum
 642+ 1F94 00                   defb    $00             ; Break not by NMI
 643+ 1F95 00                   defb    $00             ; Break flag
 644+ 1F96 C3 31 23             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F99 D2 82                defw    STLOOK          ; Temp string space
 646+ 1F9B FE FF                defw    -2              ; Current line number (cold)
 647+ 1F9D FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F9F 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1FA0 08                   defb    $08             ; auto-repeat delay
 650+ 1FA1 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1FA5 0D 00 00 00
 650+ 1FA9 00 00 00 00
 650+ 1FAD 00 00 00 00
 651+ 1FB1 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1FB5 00 00 00 00
 651+ 1FB9 00 00 00 00
 651+ 1FBD 00 00 00 00
 652+ 1FC1 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1FC5 45 4E 31 0D
 652+ 1FC9 00 00 00 00
 652+ 1FCD 00 00 00 00
 653+ 1FD1 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1FD5 52 31 2C 31
 653+ 1FD9 35 2C 35 0D
 653+ 1FDD 00 00 00 00
 654+ 1FE1 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1FE5 41 4C 31 2C
 654+ 1FE9 33 38 34 30
 654+ 1FED 30 0D 00 00
 655+ 1FF1 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FF5 45 4E 32 0D
 655+ 1FF9 00 00 00 00
 655+ 1FFD 00 00 00 00
 656+ 2001 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 2005 0D 00 00 00
 656+ 2009 00 00 00 00
 656+ 200D 00 00 00 00
 657+ 2011 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 2015 0D 00 00 00
 657+ 2019 00 00 00 00
 657+ 201D 00 00 00 00
 658+ 2021 6F 82                defw    PROGST+1        ; Start of program text
 659+ 2023              INITBE:
 660+ 2023
 661+ 2023              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 2023
 663+ 2023 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 2027 6F 72 00
 664+ 202A 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 202E 00
 665+ 202F              ZERBYT  equ     $-1             ; A zero byte
 666+ 202F 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 2033 00
 667+ 2034 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 2038 6B 00
 668+ 203A
 669+ 203A 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 203D 39                   add     HL,SP           ; same index as specified
 671+ 203E 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 203F 23                   inc     HL              ; Point to index address
 673+ 2040 FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 2042 C0                   ret     NZ              ; No - exit
 675+ 2043 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 2044 23                   inc     HL
 677+ 2045 46                   ld      B,(HL)
 678+ 2046 23                   inc     HL              ; Point to sign of STEP
 679+ 2047 E5                   push    HL              ; Save pointer to sign
 680+ 2048 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 2049 60                   ld      H,B
 682+ 204A 7A                   ld      A,D             ; See if an index was specified
 683+ 204B B3                   or      E               ; DE = 0 if no index specified
 684+ 204C EB                   ex      DE,HL           ; Specified index into HL
 685+ 204D CA 54 20             jp      Z,INDFND        ; Skip if no index given
 686+ 2050 EB                   ex      DE,HL           ; Index back into DE
 687+ 2051 CD AB 23             call    CPDEHL          ; Compare index with one given
 688+ 2054 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2057 E1                   pop     HL              ; Restore pointer to sign
 690+ 2058 C8                   ret     Z               ; Return if block found
 691+ 2059 09                   add     HL,BC           ; Point to next block
 692+ 205A C3 3E 20             jp      LOKFOR          ; Keep on looking
 693+ 205D
 694+ 205D CD 77 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 2060 C5           MOVSTR: push    BC              ; Save end of source
 696+ 2061 E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 2062 C1                   pop     BC              ; Get end of destination
 698+ 2063 CD AB 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2066 7E                   ld      A,(HL)          ; Get byte
 700+ 2067 02                   ld      (BC),A          ; Move it
 701+ 2068 C8                   ret     Z               ; Exit if all done
 702+ 2069 0B                   dec     BC              ; Next byte to move to
 703+ 206A 2B                   dec     HL              ; Next byte to move
 704+ 206B C3 63 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 206E
 706+ 206E E5           CHKSTK: push    HL              ; Save code string address
 707+ 206F 2A 4F 82             ld      HL,(ARREND)     ; Lowest free memory
 708+ 2072 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 2074 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 2075 09                   add     HL,BC
 711+ 2076 3E                   defb    $3E             ; Skip "push HL"
 712+ 2077 E5           ENFMEM: push    HL              ; Save code string address
 713+ 2078 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 207A 95                   sub     L
 715+ 207B 6F                   ld      L,A
 716+ 207C 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 207E 9C                   sbc     A,H
 718+ 207F DA 86 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 2082 67                   ld      H,A
 720+ 2083 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 2084 E1                   pop     HL              ; Restore code string address
 722+ 2085 D8                   ret     C               ; Return if enough memory
 723+ 2086 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 2088 C3 CB 20             jp      ERROR
 725+ 208B
 726+ 208B
 727+ 208B              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 208B F5           EXITGM: push    AF              ; store AF
 729+ 208C 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
 730+ 208F FE 02                cp      $02             ; G2?
 731+ 2091 CA 98 20             jp      Z,LDG1          ; yes, back to G1
 732+ 2094 FE 03                cp      $03             ; G3?
 733+ 2096 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 2098 E5           LDG1:   push    HL              ; store HL
 735+ 2099 D5                   push    DE              ; store DE
 736+ 209A 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 209D F3                   di                      ; disable INTs
 738+ 209E CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 20A1 FB                   ei                      ; re-enable INTs
 740+ 20A2 3E 01                ld      A,$01           ; activate the...
 741+ 20A4 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 20A7 D1                   pop     DE              ; retrieve DE
 743+ 20A8 E1                   pop     HL              ; retrieve HL
 744+ 20A9 F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 20AA C9                   ret                     ; return to caller
 746+ 20AB
 747+ 20AB
 748+ 20AB 2A D8 81     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 20AE 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 750+ 20B1 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 20B3 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 20B4 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 20B6 01                   defb    $01             ; Skip "ld E,NF"
 754+ 20B7 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 20B9 01                   defb    $01             ; Skip "ld E,DD"
 756+ 20BA 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 20BC 01                   defb    $01             ; Skip "ld E,UF"
 758+ 20BD 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 20BF 01                   defb    $01             ; Skip "ld E,OV
 760+ 20C0 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 20C2 01                   defb    $01             ; Skip "ld E,TM"
 762+ 20C3 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 20C5 01                   defb    $01             ; Skip next statement
 764+ 20C6 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 20C8 01                   defb    $01             ; Skip next statement
 766+ 20C9 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 20CB
 768+ 20CB CD 13 22     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 20CE CD 8B 20             call    EXITGM          ; exit from graphic modes
 770+ 20D1 32 A5 80             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 20D4 CD 44 09             call    CURSOR_ON       ; enable cursor
 772+ 20D7 CD B5 28             call    STTLIN          ; Start new line
 773+ 20DA 21 F9 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 20DD 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 20DE 3E 3F                ld      A,'?'
 776+ 20E0 CD BC 23             call    OUTC            ; Output '?'
 777+ 20E3 19                   add     HL,DE           ; Offset to correct error code
 778+ 20E4 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 20E5 23                   inc     HL              ; by loading LSB,
 780+ 20E6 56                   ld      D,(HL)          ; then MSB
 781+ 20E7 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 20E9 CD 93 2F             call    PRS             ; Output error message
 783+ 20EC 21 23 20             ld      HL,ERRMSG       ; "Error" message
 784+ 20EF CD 93 2F     ERRIN:  call    PRS             ; Output message
 785+ 20F2 2A AF 80             ld      HL,(LINEAT)     ; Get line of error
 786+ 20F5 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20F8 CD AB 23             call    CPDEHL          ; See if cold start error
 788+ 20FB CA 99 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20FE 7C                   ld      A,H             ; Was it a direct error?
 790+ 20FF A5                   and     L               ; Line = -1 if direct error
 791+ 2100 3C                   inc     A
 792+ 2101 CA 0C 21             jp      Z,PTLN          ; Yes, jump over
 793+ 2104 E5                   push    HL              ; indirect mode - store HL
 794+ 2105 2A AF 80             ld      HL,(LINEAT)     ; copy current line number
 795+ 2108 22 B1 80             ld      (HLPLN),HL      ; save in HELP line register
 796+ 210B E1                   pop     HL              ; retrieve HL
 797+ 210C C4 2A 3A     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 210F
 799+ 210F 3E                   defb    $3E             ; Skip "pop BC"
 800+ 2110 C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 2111
 802+ 2111              ; run into direct mode: print OK and get command
 803+ 2111 AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 2112 32 A5 80             ld      (CTLOFG),A      ; Enable output
 805+ 2115 CD B5 28             call    STTLIN          ; Start new line
 806+ 2118 21 2F 20             ld      HL,OKMSG        ; "Ok" message
 807+ 211B CD 93 2F             call    PRS             ; Output "Ok"
 808+ 211E CD 44 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 2121 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 810+ 2124 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 2126 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 2129 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 212C 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 814+ 212F CD 31 23             call    GETLIN          ; Get an input line
 815+ 2132 DA 1E 21             jp      C,GETCMD        ; Get line again if break
 816+ 2135 CD FA 25             call    GETCHR          ; Get first character
 817+ 2138 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 2139 DA B1 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 213C 1F                   rra                     ; recover original char and Carry
 820+ 213D 3C                   inc     A               ; Test if end of line
 821+ 213E 3D                   dec     A               ; Without affecting Carry
 822+ 213F CA 1E 21             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 2142 F5                   push    AF              ; Save Carry status
 824+ 2143 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 825+ 2146 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 2148 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 214B CD 59 09             call    CURSOR_OFF      ; cursor disabled
 828+ 214E CD CA 26             call    ATOH            ; Get line number into DE
 829+ 2151 D5                   push    DE              ; Save line number
 830+ 2152 CD 48 22             call    CRUNCH          ; Tokenise rest of line
 831+ 2155 47                   ld      B,A             ; Length of tokenised line
 832+ 2156 D1                   pop     DE              ; Restore line number
 833+ 2157 F1                   pop     AF              ; Restore Carry
 834+ 2158 D2 DA 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 215B D5                   push    DE              ; Save line number
 836+ 215C C5                   push    BC              ; Save length of tokenised line
 837+ 215D AF                   xor     A
 838+ 215E 32 DB 81             ld      (LSTBIN),A      ; Clear last byte input
 839+ 2161 CD FA 25             call    GETCHR          ; Get next character
 840+ 2164 B7                   or      A               ; Set flags
 841+ 2165 F5                   push    AF              ; And save them
 842+ 2166 CD CD 21             call    SRCHLN          ; Search for line number in DE
 843+ 2169 DA 72 21             jp      C,LINFND        ; Jump if line found
 844+ 216C F1                   pop     AF              ; Get status
 845+ 216D F5                   push    AF              ; And re-save
 846+ 216E CA 79 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 2171 B7                   or      A               ; Clear Carry
 848+ 2172 C5           LINFND: push    BC              ; Save address of line in prog
 849+ 2173 D2 89 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2176 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2177 2A 4B 82             ld      HL,(PROGND)     ; End of program
 852+ 217A 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 217B 02                   ld      (BC),A
 854+ 217C 03                   inc     BC              ; Next destination
 855+ 217D 13                   inc     DE              ; Next source
 856+ 217E CD AB 23             call    CPDEHL          ; All done?
 857+ 2181 C2 7A 21             jp      NZ,SFTPRG       ; More to do
 858+ 2184 60                   ld      H,B             ; HL - New end of program
 859+ 2185 69                   ld      L,C
 860+ 2186 22 4B 82             ld      (PROGND),HL     ; Update end of program
 861+ 2189
 862+ 2189 D1           INEWLN: pop     DE              ; Get address of line,
 863+ 218A F1                   pop     AF              ; Get status
 864+ 218B CA B0 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 218E 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 866+ 2191 E3                   ex      (SP),HL         ; Get length of input line
 867+ 2192 C1                   pop     BC              ; End of program to BC
 868+ 2193 09                   add     HL,BC           ; Find new end
 869+ 2194 E5                   push    HL              ; Save new end
 870+ 2195 CD 5D 20             call    MOVUP           ; Make space for line
 871+ 2198 E1                   pop     HL              ; Restore new end
 872+ 2199 22 4B 82             ld      (PROGND),HL     ; Update end of program pointer
 873+ 219C EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 219D 74                   ld      (HL),H          ; Save MSB
 875+ 219E D1                   pop     DE              ; Get new line number
 876+ 219F 23                   inc     HL              ; Skip pointer
 877+ 21A0 23                   inc     HL
 878+ 21A1 73                   ld      (HL),E          ; Save LSB of line number
 879+ 21A2 23                   inc     HL
 880+ 21A3 72                   ld      (HL),D          ; Save MSB of line number
 881+ 21A4 23                   inc     HL              ; To first byte in line
 882+ 21A5 11 38 81             ld      DE,BUFFER       ; Copy buffer to program
 883+ 21A8 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 21A9 77                   ld      (HL),A          ; Save destinations
 885+ 21AA 23                   inc     HL              ; Next source
 886+ 21AB 13                   inc     DE              ; Next destination
 887+ 21AC B7                   or      A               ; Done?
 888+ 21AD C2 A8 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 21B0 CD F9 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 21B3 23                   inc     HL              ; To LSB of pointer
 891+ 21B4 EB                   ex      DE,HL           ; Address to DE
 892+ 21B5 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 21B6 6B                   ld      L,E
 894+ 21B7 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 21B8 23                   inc     HL              ; To MSB of pointer
 896+ 21B9 B6                   or      (HL)            ; Compare with MSB pointer
 897+ 21BA CA 1E 21             jp      Z,GETCMD        ; Get command line if end
 898+ 21BD 23                   inc     HL              ; To LSB of line number
 899+ 21BE 23                   inc     HL              ; Skip line number
 900+ 21BF 23                   inc     HL              ; Point to first byte in line
 901+ 21C0 AF                   xor     A               ; Looking for 00 byte
 902+ 21C1 BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 21C2 23                   inc     HL              ; Move to next byte
 904+ 21C3 C2 C1 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 21C6 EB                   ex      DE,HL           ; Next line address to HL
 906+ 21C7 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 21C8 23                   inc     HL
 908+ 21C9 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 21CA C3 B5 21             jp      PTRLP           ; Do next line
 910+ 21CD
 911+ 21CD 2A 35 81     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 21D0 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 21D1 4D                   ld      C,L
 914+ 21D2 7E                   ld      A,(HL)          ; Get address of next line
 915+ 21D3 23                   inc     HL
 916+ 21D4 B6                   or      (HL)            ; End of program found?
 917+ 21D5 2B                   dec     HL
 918+ 21D6 C8                   ret     Z               ; Yes - Line not found
 919+ 21D7 23                   inc     HL
 920+ 21D8 23                   inc     HL
 921+ 21D9 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 21DA 23                   inc     HL
 923+ 21DB 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 21DC 6F                   ld      L,A
 925+ 21DD CD AB 23             call    CPDEHL          ; Compare with line in DE
 926+ 21E0 60                   ld      H,B             ; HL = Start of this line
 927+ 21E1 69                   ld      L,C
 928+ 21E2 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 21E3 23                   inc     HL
 930+ 21E4 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 21E5 6F                   ld      L,A             ; Next line to HL
 932+ 21E6 3F                   ccf
 933+ 21E7 C8                   ret     Z               ; Lines found - Exit
 934+ 21E8 3F                   ccf
 935+ 21E9 D0                   ret     NC              ; Line not found,at line after
 936+ 21EA C3 D0 21             jp      SRCHLP          ; Keep looking
 937+ 21ED
 938+ 21ED C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 21EE 2A 35 81     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 21F1 AF                   xor     A               ; Set program area to empty
 941+ 21F2 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21F3 23                   inc     HL
 943+ 21F4 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21F5 23                   inc     HL
 945+ 21F6 22 4B 82             ld      (PROGND),HL     ; Set program end
 946+ 21F9
 947+ 21F9 2A 35 81     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21FC 2B                   dec     HL
 949+ 21FD
 950+ 21FD 22 DD 81     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 2200 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 2203 22 D2 81             ld      (STRBOT),HL     ; Clear string space
 953+ 2206 AF                   xor     A
 954+ 2207 CD 0A 26             call    RESTOR          ; Reset DATA pointers
 955+ 220A 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 956+ 220D 22 4D 82             ld      (VAREND),HL     ; Clear variables
 957+ 2210 22 4F 82             ld      (ARREND),HL     ; Clear arrays
 958+ 2213
 959+ 2213 C1           CLREG:  pop     BC              ; Save return address
 960+ 2214 2A AD 80             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 2217 F9                   ld      SP,HL           ; Set stack
 962+ 2218 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
 963+ 221B 22 C0 81             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 221E AF                   xor     A               ; A = 00
 965+ 221F 6F                   ld      L,A             ; HL = 0000
 966+ 2220 67                   ld      H,A
 967+ 2221 22 E3 81             ld      (CONTAD),HL     ; No CONTinue
 968+ 2224 32 DA 81             ld      (FORFLG),A      ; Clear FOR flag
 969+ 2227 22 53 82             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 222A E5                   push    HL              ; HL = 0000
 971+ 222B C5                   push    BC              ; Put back return
 972+ 222C 2A DD 81     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 222F C9                   ret                     ; Return to execution driver
 974+ 2230
 975+ 2230 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 2232 CD BC 23             call    OUTC            ; Output character
 977+ 2235 3E 00                ld      A,NLLCR         ; null char
 978+ 2237 CD BC 23             call    OUTC            ; Output character
 979+ 223A CD 44 09             call    CURSOR_ON       ; enable cursor
 980+ 223D 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 981+ 2240 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 2242 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 2245 C3 AA 80             jp      RINPUT          ; Get input line
 984+ 2248
 985+ 2248 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 2249 32 95 81             ld      (DATFLG),A      ; Reset literal flag
 987+ 224C 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 224E 11 38 81             ld      DE,BUFFER       ; Start of input buffer
 989+ 2251 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 2252 FE 20                cp      SPC             ; Is it a space?
 991+ 2254 CA D0 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2257 47                   ld      B,A             ; Save character
 993+ 2258 FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 225A CA F0 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 225D B7                   or      A               ; Is it end of buffer?
 996+ 225E CA F7 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 2261 3A 95 81             ld      A,(DATFLG)      ; Get data type
 998+ 2264 B7                   or      A               ; Literal?
 999+ 2265 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2266 C2 D0 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 2269 FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 226B 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 226D CA D0 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 2270 7E                   ld      A,(HL)          ; Get byte again
1005+ 2271 FE 30                cp      '0'             ; Is it less than '0'
1006+ 2273 DA 7B 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2276 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 2278 DA D0 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 227B D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 227C 11 2C 1D             ld      DE,WORDS-1      ; Point to table
1011+ 227F C5                   push    BC              ; Save count
1012+ 2280 01 CC 22             ld      BC,RETNAD       ; Where to return to
1013+ 2283 C5                   push    BC              ; Save return address
1014+ 2284 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2286 7E                   ld      A,(HL)          ; Get byte
1016+ 2287 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 2289 DA 94 22             jp      C,SEARCH        ; Yes - search for words
1018+ 228C FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 228E D2 94 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 2291 E6 5F                and     %01011111       ; Force upper case
1021+ 2293 77                   ld      (HL),A          ; Replace byte
1022+ 2294 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 2295 EB                   ex      DE,HL
1024+ 2296 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2297 B6                   or      (HL)            ; Start of word?
1026+ 2298 F2 96 22             jp      P,GETNXT        ; No - move on
1027+ 229B 04                   inc     B               ; Increment token value
1028+ 229C 7E                   ld      A,(HL)          ; Get byte from table
1029+ 229D E6 7F                and     %01111111       ; Strip bit 7
1030+ 229F C8                   ret     Z               ; Return if end of list
1031+ 22A0 B9                   cp      C               ; Same character as in buffer?
1032+ 22A1 C2 96 22             jp      NZ,GETNXT       ; No - get next word
1033+ 22A4 EB                   ex      DE,HL
1034+ 22A5 E5                   push    HL              ; Save start of word
1035+ 22A6
1036+ 22A6 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 22A7 1A                   ld      A,(DE)          ; Get byte from table
1038+ 22A8 B7                   or      A               ; End of word ?
1039+ 22A9 FA C8 22             jp      M,MATCH         ; Yes - Match found
1040+ 22AC 4F                   ld      C,A             ; Save it
1041+ 22AD 78                   ld      A,B             ; Get token value
1042+ 22AE FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 22B0 C2 B7 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 22B3 CD FA 25             call    GETCHR          ; Get next character
1045+ 22B6 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 22B7 23           NOSPC:  inc     HL              ; Next byte
1047+ 22B8 7E                   ld      A,(HL)          ; Get byte
1048+ 22B9 FE 61                cp      'a'             ; Less than 'a' ?
1049+ 22BB DA C0 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 22BE E6 5F                and     %01011111       ; Make upper case
1051+ 22C0 B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 22C1 CA A6 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 22C4 E1                   pop     HL              ; Get back start of word
1054+ 22C5 C3 94 22             jp      SEARCH          ; Look at next word
1055+ 22C8
1056+ 22C8 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 22C9 F1                   pop     AF              ; Throw away return
1058+ 22CA EB                   ex      DE,HL
1059+ 22CB C9                   ret                     ; Return to "RETNAD"
1060+ 22CC EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 22CD 79                   ld      A,C             ; Get token value
1062+ 22CE C1                   pop     BC              ; Restore buffer length
1063+ 22CF D1                   pop     DE              ; Get destination address
1064+ 22D0 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 22D1 12                   ld      (DE),A          ; Put byte in buffer
1066+ 22D2 13                   inc     DE              ; Move up buffer
1067+ 22D3 0C                   inc     C               ; Increment length of buffer
1068+ 22D4 D6 3A                sub     ':'             ; End of statement?
1069+ 22D6 CA DE 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 22D9 FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 22DB C2 E1 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 22DE 32 95 81     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 22E1 D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 22E3 C2 51 22             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 22E6 47                   ld      B,A             ; Copy rest of buffer
1076+ 22E7 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 22E8 B7                   or      A               ; End of line ?
1078+ 22E9 CA F7 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 22EC B8                   cp      B               ; End of statement ?
1080+ 22ED CA D0 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 22F0 23           CPYLIT: inc     HL              ; Move up source string
1082+ 22F1 12                   ld      (DE),A          ; Save in destination
1083+ 22F2 0C                   inc     C               ; Increment length
1084+ 22F3 13                   inc     DE              ; Move up destination
1085+ 22F4 C3 E7 22             jp      NXTCHR          ; Repeat
1086+ 22F7
1087+ 22F7 21 37 81     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22FA 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22FB 13                   inc     DE
1090+ 22FC 12                   ld      (DE),A          ; A = 00
1091+ 22FD 13                   inc     DE
1092+ 22FE 12                   ld      (DE),A          ; A = 00
1093+ 22FF C9                   ret
1094+ 2300
1095+ 2300 3A A4 80     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 2303 B7                   or      A               ; Is it zero?
1097+ 2304 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 2306 32 A4 80             ld      (NULFLG),A      ; Zero null flag
1099+ 2309 C2 14 23             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 230C 05                   dec     B               ; Decrement length
1101+ 230D CA 31 23             jp      Z,GETLIN        ; Get line again if empty
1102+ 2310 CD BC 23             call    OUTC            ; Output null character
1103+ 2313 3E                   defb    $3E             ; Skip "dec B"
1104+ 2314 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 2315 2B                   dec     HL              ; Back space buffer
1106+ 2316 CA 28 23             jp      Z,OTKLN         ; No buffer - Try again
1107+ 2319 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 231A CD BC 23             call    OUTC            ; Echo it
1109+ 231D C3 3A 23             jp      MORINP          ; Get more input
1110+ 2320
1111+ 2320 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 2321 2B                   dec     HL              ; Back space buffer
1113+ 2322 CD BC 23             call    OUTC            ; Output character in A
1114+ 2325 C2 3A 23             jp      NZ,MORINP       ; Not end - Get more
1115+ 2328 CD BC 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 232B CD C7 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 232E C3 31 23             jp      TTYLIN          ; Get line again
1118+ 2331
1119+ 2331              GETLIN:
1120+ 2331 21 38 81     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 2334 06 01                ld      B,$01           ; Set buffer as empty
1122+ 2336 AF                   xor     A
1123+ 2337 32 A4 80             ld      (NULFLG),A      ; Clear null flag
1124+ 233A CD FD 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 233D 4F                   ld      C,A             ; Save character in C
1126+ 233E FE 7F                cp      DEL             ; Delete character?
1127+ 2340 CA 00 23             jp      Z,DODEL         ; Yes - Process it
1128+ 2343 3A A4 80             ld      A,(NULFLG)      ; Get null flag
1129+ 2346 B7                   or      A               ; Test null flag status
1130+ 2347 CA 53 23             jp      Z,PROCES        ; Reset - Process character
1131+ 234A 3E 00                ld      A,$00           ; Set a null
1132+ 234C CD BC 23             call    OUTC            ; Output null
1133+ 234F AF                   xor     A               ; Clear A
1134+ 2350 32 A4 80             ld      (NULFLG),A      ; Reset null flag
1135+ 2353 79           PROCES: ld      A,C             ; Get character
1136+ 2354 FE 07                cp      CTRLG           ; Bell?
1137+ 2356 CA 93 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 2359 FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 235B CC 88 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 235E 37                   scf                     ; Flag break
1141+ 235F C8                   ret     Z               ; Return if control "C"
1142+ 2360 FE 0D                cp      CR              ; Is it enter?
1143+ 2362 CA BD 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 2365 FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2367 CA 2B 23             jp      Z,KILIN         ; Yes - Get another line
1146+ 236A FE 08                cp      BKSP            ; Is it backspace?
1147+ 236C CA 20 23             jp      Z,DELCHR        ; Yes - Delete character
1148+ 236F FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 2371 C2 8E 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 2374 C5                   push    BC              ; Save buffer length
1151+ 2375 D5                   push    DE              ; Save DE
1152+ 2376 E5                   push    HL              ; Save buffer address
1153+ 2377 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 2379 CD 3F 4D             call    OUTNCR          ; Output and do CRLF
1155+ 237C 21 38 81             ld      HL,BUFFER       ; Point to buffer start
1156+ 237F CD 93 2F             call    PRS             ; Output buffer
1157+ 2382 E1                   pop     HL              ; Restore buffer address
1158+ 2383 D1                   pop     DE              ; Restore DE
1159+ 2384 C1                   pop     BC              ; Restore buffer length
1160+ 2385 C3 3A 23             jp      MORINP          ; Get another character
1161+ 2388 CD 8B 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 238B C3 C7 28             jp      PRNTCRLF        ; output CRLF
1163+ 238E
1164+ 238E FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 2390 DA 3A 23             jp      C,MORINP        ; Yes - Ignore
1166+ 2393 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 2394 FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2396 3E 08                ld      A,BKSP          ; Set a bell
1169+ 2398 D2 A5 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 239B 79                   ld      A,C             ; Get character
1171+ 239C 71                   ld      (HL),C          ; Save in buffer
1172+ 239D 32 DB 81             ld      (LSTBIN),A      ; Save last input byte
1173+ 23A0 23                   inc     HL              ; Move up buffer
1174+ 23A1 04                   inc     B               ; Increment length
1175+ 23A2 C3 3A 23     OUTIT:  jp      MORINP          ; Get another character
1176+ 23A5
1177+ 23A5 CD BC 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 23A8 C3 A2 23             jp      OUTIT           ; get more chars
1179+ 23AB
1180+ 23AB 7C           CPDEHL: ld      A,H             ; Get H
1181+ 23AC 92                   sub     D               ; Compare with D
1182+ 23AD C0                   ret     NZ              ; Different - Exit
1183+ 23AE 7D                   ld      A,L             ; Get L
1184+ 23AF 93                   sub     E               ; Compare with E
1185+ 23B0 C9                   ret                     ; Return status
1186+ 23B1
1187+ 23B1 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 23B2 E3                   ex      (SP),HL         ; Address of test byte
1189+ 23B3 BE                   cp      (HL)            ; Same as in code string?
1190+ 23B4 23                   inc     HL              ; Return address
1191+ 23B5 E3                   ex      (SP),HL         ; Put it back
1192+ 23B6 CA FA 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 23B9 C3 B1 20             jp      SNERR           ; Different - ?SN Error
1194+ 23BC
1195+ 23BC F5           OUTC:   push    AF              ; Save character
1196+ 23BD 3A A5 80             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 23C0 B7                   or      A               ; Is it set?
1198+ 23C1 C2 C8 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 23C4 F1                   pop     AF              ; Restore character
1200+ 23C5 C5                   push    BC              ; Save buffer length
1201+ 23C6 F5                   push    AF              ; Save character
1202+ 23C7 FE 20                cp      SPC             ; Is it a control code?
1203+ 23C9 DA E0 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 23CC 3A A2 80             ld      A,(LWIDTH)      ; Get line width
1205+ 23CF 47                   ld      B,A             ; To B
1206+ 23D0 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1207+ 23D3 04                   inc     B               ; Width 255?
1208+ 23D4 CA DC 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 23D7 05                   dec     B               ; Restore width
1210+ 23D8 B8                   cp      B               ; At end of line?
1211+ 23D9 CC C7 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 23DC 3C           INCLEN: inc     A               ; Move on one character
1213+ 23DD 32 92 81             ld      (CURPOS),A      ; Save new position
1214+ 23E0 AF           DINPOS: xor     A
1215+ 23E1 32 3F 82             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 23E4 F1                   pop     AF              ; Restore character
1217+ 23E5 C1                   pop     BC              ; Restore buffer length
1218+ 23E6 F5                   push    AF
1219+ 23E7 CD EF 23             call    SND2VID         ; send char to video
1220+ 23EA F1                   pop     AF
1221+ 23EB CD 17 4D             call    MONOUT          ; send char to serial if enabled
1222+ 23EE C9                   ret
1223+ 23EF
1224+ 23EF              ; print char to video if cursor is on
1225+ 23EF 32 02 82     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23F2 3A 01 82             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23F5 B7                   or      A               ; is it off?
1228+ 23F6 C8                   ret     Z               ; yes, so return
1229+ 23F7 F3                   di                      ; disable INTs
1230+ 23F8 CD 78 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23FB FB                   ei                      ; re-enable INTs
1232+ 23FC C9                   ret                     ; return to caller
1233+ 23FD
1234+ 23FD CD 4E 3D     CLOTST: call    GETINP          ; Get input character
1235+ 2400 FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 2402 C0                   ret     NZ              ; No don't flip flag
1237+ 2403 3A A5 80             ld      A,(CTLOFG)      ; Get flag
1238+ 2406 2F                   cpl                     ; Flip it
1239+ 2407 32 A5 80             ld      (CTLOFG),A      ; Put it back
1240+ 240A A7                   and     A               ; is output enabled?
1241+ 240B CC 44 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 240E 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1243+ 2411 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 2413 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 2416 AF                   xor     A               ; Null character
1246+ 2417 C9                   ret
1247+ 2418
1248+ 2418              ; LIST: list the program stored into memory
1249+ 2418 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 2419 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 241A CD FA 25             call    GETCHR          ; Get next character
1252+ 241D CA 73 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 2420 FE BF                cp      ZMINUS          ; is it '-'?
1254+ 2422 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 2424 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 2427 CD 14 25             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 242A ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 242E CD B1 23             call    CHKSYN          ; skip '-'
1259+ 2431 BF                   defb    ZMINUS
1260+ 2432 CD CA 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 2435 CD 1A 25             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 2438 ED 43 07 82          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 243C ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 2440 C5                   push    BC              ; store address of line for later use
1265+ 2441 C3 AB 24             jp      LISTLP          ; go listing
1266+ 2444 CD CA 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 2447 ED 53 0B 82  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 244B CD 14 25             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 244E ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 2452 ED 43 07 82          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2456 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2457 CD FA 25             call    GETCHR          ; Get next character
1273+ 245A CA 66 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 245D FE BF                cp      ZMINUS          ; is it '-'?
1275+ 245F CA 8B 24             jp      Z,LST03         ; yes, read ending line
1276+ 2462 C5           LST06:  push    BC              ; store address for later use
1277+ 2463 C3 AB 24             jp      LISTLP          ; jump to list
1278+ 2466 ED 5B 0B 82  LSTNOT: ld      DE,(TMPBFR4)
1279+ 246A CD 14 25             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 246D DA 62 24             jp      C,LST06
1281+ 2470 C3 11 21             jp      PRNTOK
1282+ 2473 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2476 CD 14 25             call    SRCHLIN         ; get address of last line
1284+ 2479 ED 43 07 82          ld      (TMPBFR2),BC    ; store it
1285+ 247D 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 2480 CD 14 25             call    SRCHLIN         ; get address of first line
1287+ 2483 ED 43 05 82          ld      (TMPBFR1),BC    ; store it
1288+ 2487 C5                   push    BC              ; store address of starting line for later use
1289+ 2488 C3 AB 24             jp      LISTLP          ; start printing
1290+ 248B CD B1 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 248E BF                   defb    ZMINUS
1292+ 248F CD CA 26             call    ATOH            ; look for another number (return into DE)
1293+ 2492 7A                   ld      A,D
1294+ 2493 B3                   or      E               ; is line=0?
1295+ 2494 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2496 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 2499 CD 14 25             call    SRCHLIN         ; get address of last line
1298+ 249C C3 A2 24             jp      LST02
1299+ 249F CD 1A 25     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 24A2 ED 43 07 82  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 24A6 ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 24AA C5                   push    BC              ; store it for later use
1303+ 24AB E1           LISTLP: pop     HL              ; Restore address of line
1304+ 24AC 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 24AD 23                   inc     HL
1306+ 24AE 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 24AF 23                   inc     HL
1308+ 24B0 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 24B1 B1                   or      C
1310+ 24B2 CA 11 21             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 24B5 CD 25 26             call    TSTBRK          ; Test for break key
1312+ 24B8 CD 28 25             call    TSTSPC          ; test for space
1313+ 24BB C5                   push    BC              ; Save address of next line
1314+ 24BC 3A FA 81             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 24BF A7                   and     A               ; is it at the beginning of a new line?
1316+ 24C0 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 24C2 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 24C4 CD 17 4D             call    MONOUT          ; to serial if it's open
1319+ 24C7 AF                   xor     A               ; then, set cursor
1320+ 24C8 32 92 81             ld      (CURPOS),A      ; to position 0
1321+ 24CB 18 03                jr      LST07           ; and continue
1322+ 24CD CD C7 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 24D0 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 24D1 23                   inc     HL
1325+ 24D2 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 24D3 23                   inc     HL
1327+ 24D4 E5                   push    HL              ; Save address of line start
1328+ 24D5 EB                   ex      DE,HL           ; Line number to HL
1329+ 24D6 CD 32 3A             call    PRNTHL          ; Output line number in decimal
1330+ 24D9 3E 20                ld      A,SPC           ; Space after line number
1331+ 24DB E1                   pop     HL              ; Restore start of line address
1332+ 24DC CD BC 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 24DF 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 24E0 B7                   or      A               ; End of line?
1335+ 24E1 23                   inc     HL              ; To next byte in line
1336+ 24E2 CA 06 25             jp      Z,NXTLN         ; Yes - check next line
1337+ 24E5 F2 DC 24             jp      P,LSTLP2        ; No token - output it
1338+ 24E8 D6 7F                sub     ZEND-1          ; Find and output word
1339+ 24EA 4F                   ld      C,A             ; Token offset+1 to C
1340+ 24EB 11 2D 1D             ld      DE,WORDS        ; Reserved word list
1341+ 24EE 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 24EF 13                   inc     DE              ; Move on to next
1343+ 24F0 B7                   or      A               ; Is it start of word?
1344+ 24F1 F2 EE 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24F4 0D                   dec     C               ; Count words
1346+ 24F5 C2 EE 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24F8 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24FA CD BC 23             call    OUTC            ; Output character
1349+ 24FD 1A                   ld      A,(DE)          ; Get next character
1350+ 24FE 13                   inc     DE              ; Move on to next
1351+ 24FF B7                   or      A               ; Is it end of word?
1352+ 2500 F2 F8 24             jp      P,OUTWRD        ; No - output the rest
1353+ 2503 C3 DF 24             jp      LSTLP3          ; Next byte in line
1354+ 2506 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 2507 2A 07 82             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 250A CD 45 4D             call    CMP16           ; check if current line is over last printable line
1357+ 250D DA 11 21             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 2510 D5                   push    DE              ; store address of current line
1359+ 2511 C3 AB 24             jp      LISTLP          ; continue listing
1360+ 2514              ; look for the address of a program line
1361+ 2514 E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 2515 CD CD 21             call    SRCHLN          ; search for line number in DE
1363+ 2518 E1                   pop     HL              ; retrieve HL
1364+ 2519 C9                   ret                     ; return to caller
1365+ 251A              ; look for the address of a program line - if the line isn't found,
1366+ 251A              ; it look backward for the previous line
1367+ 251A E5           SRCLN:  push    HL              ; store HL
1368+ 251B CD CD 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 251E DA 26 25             jp      C,LVSRLN        ; found it, leave loop
1370+ 2521 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 2522 7B                   ld      A,E
1372+ 2523 B2                   or      D               ; is line number zero?
1373+ 2524 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 2526 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 2527 C9                   ret                     ; return to caller
1376+ 2528
1377+ 2528              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 2528              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 2528 3A 41 82     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 252B FE 20                cp      SPC             ; Is it SPACE?
1381+ 252D C0                   ret     NZ              ; No, return
1382+ 252E CD 4E 3D     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 2531 FE 20                cp      SPC             ; is it SPACE?
1384+ 2533 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 2535 AF                   xor     A
1386+ 2536 32 41 82             ld      (TMPKEYBFR),A   ; reset key
1387+ 2539 C9                   ret                     ; return to caller
1388+ 253A FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 253C 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 253E C3 5D 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 2541
1392+ 2541
1393+ 2541 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 2543 32 DA 81             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 2546 CD BA 27             call    LET             ; Set up initial index
1396+ 2549 C1                   pop     BC              ; Drop RETurn address
1397+ 254A E5                   push    HL              ; Save code string address
1398+ 254B CD A3 27             call    DATA            ; Get next statement address
1399+ 254E 22 D6 81             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 2551 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 2554 39                   add     HL,SP           ; Point to it
1402+ 2555 CD 3E 20     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 2558 D1                   pop     DE              ; Get code string address
1404+ 2559 C2 71 25             jp      NZ,FORFND       ; No nesting found
1405+ 255C 09                   add     HL,BC           ; Move into "FOR" block
1406+ 255D D5                   push    DE              ; Save code string address
1407+ 255E 2B                   dec     HL
1408+ 255F 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 2560 2B                   dec     HL
1410+ 2561 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 2562 23                   inc     HL
1412+ 2563 23                   inc     HL
1413+ 2564 E5                   push    HL              ; Save block address
1414+ 2565 2A D6 81             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 2568 CD AB 23             call    CPDEHL          ; Compare the FOR loops
1416+ 256B E1                   pop     HL              ; Restore block address
1417+ 256C C2 55 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 256F D1                   pop     DE              ; Restore code string address
1419+ 2570 F9                   ld      SP,HL           ; Remove all nested loops
1420+ 2571
1421+ 2571 EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 2572 0E 08                ld      C,$08
1423+ 2574 CD 6E 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2577 E5                   push    HL              ; Save code string address
1425+ 2578 2A D6 81             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 257B E3                   ex      (SP),HL         ; Save and restore code string
1427+ 257C E5                   push    HL              ; Re-save code string address
1428+ 257D 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
1429+ 2580 E3                   ex      (SP),HL         ; Save and restore code string
1430+ 2581 CD 8E 2A             call    TSTNUM          ; Make sure it's a number
1431+ 2584 CD B1 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2587 B8                   defb    ZTO             ; "TO" token
1433+ 2588 CD 8B 2A             call    GETNUM          ; Get "TO" expression value
1434+ 258B E5                   push    HL              ; Save code string address
1435+ 258C CD E4 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 258F E1                   pop     HL              ; Restore code string address
1437+ 2590 C5                   push    BC              ; Save "TO" value in block
1438+ 2591 D5                   push    DE
1439+ 2592 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 2595 51                   ld      D,C             ; C=0
1441+ 2596 5A                   ld      E,D             ; D=0
1442+ 2597 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 2598 FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 259A 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 259C C2 AD 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 259F CD FA 25             call    GETCHR          ; Jump over "STEP" token
1447+ 25A2 CD 8B 2A             call    GETNUM          ; Get step value
1448+ 25A5 E5                   push    HL              ; Save code string address
1449+ 25A6 CD E4 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 25A9 CD 98 38             call    TSTSGN          ; Test sign of FPREG
1451+ 25AC E1                   pop     HL              ; Restore code string address
1452+ 25AD C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 25AE D5                   push    DE
1454+ 25AF F5                   push    AF              ; Save sign of STEP
1455+ 25B0 33                   inc     SP              ; Don't save flags
1456+ 25B1 E5                   push    HL              ; Save code string address
1457+ 25B2 2A DD 81             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 25B5 E3                   ex      (SP),HL         ; Save and restore code string
1459+ 25B6 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 25B8 C5                   push    BC              ; Save it
1461+ 25B9 33                   inc     SP              ; Don't save C
1462+ 25BA
1463+ 25BA CD 25 26     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 25BD 22 DD 81             ld      (BRKLIN),HL     ; Save code address for break
1465+ 25C0 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 25C1 FE 3A                cp      ':'             ; Multi statement line?
1467+ 25C3 CA DA 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 25C6 B7                   or      A               ; End of line?
1469+ 25C7 C2 B1 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 25CA 23                   inc     HL              ; Point to address of next line
1471+ 25CB 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 25CC 23                   inc     HL
1473+ 25CD B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 25CE CA 4C 26             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 25D1 23                   inc     HL              ; Point to line number
1476+ 25D2 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 25D3 23                   inc     HL
1478+ 25D4 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 25D5 EB                   ex      DE,HL           ; Line number to HL
1480+ 25D6 22 AF 80             ld      (LINEAT),HL     ; Save as current line number
1481+ 25D9 EB                   ex      DE,HL           ; Line number back to DE
1482+ 25DA CD FA 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 25DD 11 BA 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 25E0 D5                   push    DE              ; Save for RETurn
1485+ 25E1 C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 25E2
1487+ 25E2 D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 25E4 DA BA 27             jp      C,LET           ; No - try to assign it
1489+ 25E7 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 25E9 D2 B1 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 25EC 07                   rlca                    ; Double it
1492+ 25ED 4F                   ld      C,A             ; BC = Offset into table
1493+ 25EE 06 00                ld      B,0
1494+ 25F0 EB                   ex      DE,HL           ; Save code string address
1495+ 25F1 21 BE 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25F4 09                   add     HL,BC           ; Point to routine address
1497+ 25F5 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25F6 23                   inc     HL
1499+ 25F7 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25F8 C5                   push    BC              ; Save routine address
1501+ 25F9 EB                   ex      DE,HL           ; Restore code string address
1502+ 25FA
1503+ 25FA              ; get a char from input buffer: exit with NC if character found is
1504+ 25FA              ; not a number; exit with Z if nothing found; char is into A
1505+ 25FA 23           GETCHR: inc     HL              ; Point to next character
1506+ 25FB 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25FC FE 3A                cp      ':'             ; Z if ':'
1508+ 25FE D0                   ret     NC              ; NC if > "9"
1509+ 25FF FE 20                cp      SPC
1510+ 2601 CA FA 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 2604 FE 30                cp      '0'
1512+ 2606 3F                   ccf                     ; NC if < '0'
1513+ 2607 3C                   inc     A               ; Test for zero - Leave carry
1514+ 2608 3D                   dec     A               ; Z if Null
1515+ 2609 C9                   ret
1516+ 260A
1517+ 260A EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 260B 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1519+ 260E CA 1F 26             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 2611 EB                   ex      DE,HL           ; Restore code string address
1521+ 2612 CD CA 26             call    ATOH            ; Get line number to DE
1522+ 2615 E5                   push    HL              ; Save code string address
1523+ 2616 CD CD 21             call    SRCHLN          ; Search for line number in DE
1524+ 2619 60                   ld      H,B             ; HL = Address of line
1525+ 261A 69                   ld      L,C
1526+ 261B D1                   pop     DE              ; Restore code string address
1527+ 261C D2 79 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 261F 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 2620 22 51 82     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 2623 EB                   ex      DE,HL           ; Restore code string address
1531+ 2624 C9                   ret
1532+ 2625
1533+ 2625
1534+ 2625              ; check if CTRL-C is into input buffer
1535+ 2625 DF           TSTBRK: rst     $18             ; Check input status
1536+ 2626 C8                   ret     Z               ; No key, go back
1537+ 2627 D7                   rst     $10             ; Get the key into A
1538+ 2628 FE 1B                cp      ESC             ; Escape key?
1539+ 262A 28 11                jr      Z,BRK           ; Yes, break
1540+ 262C FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 262E 28 0D                jr      Z,BRK           ; Yes, break
1542+ 2630 FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 2632 C0                   ret     NZ              ; Other key, ignore
1544+ 2633
1545+ 2633
1546+ 2633              ; wait for a key while listing
1547+ 2633 D7           STALL:  rst     $10             ; Wait for key
1548+ 2634 FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 2636 C8                   ret     Z               ; Release the chokehold
1550+ 2637 FE 03                cp      CTRLC           ; Second break?
1551+ 2639 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 263B 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 263D
1554+ 263D 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 263F 32 A9 80             ld      (BRKFLG),A      ; Store it
1556+ 2642
1557+ 2642 C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 2643 F6                   defb    $F6             ; Flag "STOP"
1559+ 2644 C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 2645 22 DD 81             ld      (BRKLIN),HL     ; Save point of break
1561+ 2648 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 2649 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 264B C1                   pop     BC              ; Return not needed and more
1564+ 264C 2A AF 80     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 264F F5                   push    AF              ; Save STOP / END status
1566+ 2650 7D                   ld      A,L             ; Is it direct break?
1567+ 2651 A4                   and     H
1568+ 2652 3C                   inc     A               ; Line is -1 if direct break
1569+ 2653 CA 5F 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2656 22 E1 81             ld      (ERRLIN),HL     ; Save line of break
1571+ 2659 2A DD 81             ld      HL,(BRKLIN)     ; Get point of break
1572+ 265C 22 E3 81             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 265F AF           NOLIN:  xor     A
1574+ 2660 32 A5 80             ld      (CTLOFG),A      ; Enable output
1575+ 2663 CD B5 28             call    STTLIN          ; Start a new line
1576+ 2666 F1                   pop     AF              ; Restore STOP / END status
1577+ 2667 21 34 20             ld      HL,BRKMSG       ; "Break" message
1578+ 266A C2 70 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 266D C3 11 21             jp      PRNTOK          ; Go to command mode
1580+ 2670 CD 8B 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 2673 C3 EF 20             jp      ERRIN           ; print message
1582+ 2676
1583+ 2676
1584+ 2676              ; CONTinue after a break/error
1585+ 2676 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 2679 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1587+ 267C 2A E3 81             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 267F 7C                   ld      A,H             ; Is it zero?
1589+ 2680 B5                   or      L
1590+ 2681 1E 20                ld      E,CN            ; ?CN Error
1591+ 2683 CA CB 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2686 EB                   ex      DE,HL           ; Save code string address
1593+ 2687 2A E1 81             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 268A 22 AF 80             ld      (LINEAT),HL     ; Set up current line number
1595+ 268D EB                   ex      DE,HL           ; Restore code string address
1596+ 268E C9                   ret                     ; CONTinue where left off
1597+ 268F
1598+ 268F E5           ACCSUM: push    HL              ; Save address in array
1599+ 2690 2A A6 80             ld      HL,(CHKSUM)     ; Get check sum
1600+ 2693 06 00                ld      B,$00           ; BC - Value of byte
1601+ 2695 4F                   ld      C,A
1602+ 2696 09                   add     HL,BC           ; Add byte to check sum
1603+ 2697 22 A6 80             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 269A E1                   pop     HL              ; Restore address in array
1605+ 269B C9                   ret
1606+ 269C
1607+ 269C 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 269D FE 41                cp      'A'             ; < 'a' ?
1609+ 269F D8                   ret     C               ; Carry set if not letter
1610+ 26A0 FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 26A2 3F                   ccf
1612+ 26A3 C9                   ret                     ; Carry set if not letter
1613+ 26A4
1614+ 26A4 CD FA 25     FPSINT: call    GETCHR          ; Get next character
1615+ 26A7 CD 8B 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 26AA CD 98 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 26AD FA C5 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 26B0 3A 5C 82     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 26B3 FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 26B5 DA 40 39             jp      C,FPINT         ; Yes - convert it
1621+ 26B8 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 26BB 11 00 00             ld      DE,$0000
1623+ 26BE E5                   push    HL              ; Save code string address
1624+ 26BF CD 13 39             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 26C2 E1                   pop     HL              ; Restore code string address
1626+ 26C3 51                   ld      D,C             ; MSB to D
1627+ 26C4 C8                   ret     Z               ; Return if in range
1628+ 26C5 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 26C7 C3 CB 20             jp      ERROR           ; Output error-
1630+ 26CA
1631+ 26CA
1632+ 26CA              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 26CA 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 26CB 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 26CE CD FA 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 26D1 D0                   ret     NC              ; Exit if not a digit
1637+ 26D2 E5                   push    HL              ; Save code string address
1638+ 26D3 F5                   push    AF              ; Save digit
1639+ 26D4 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 26D7 CD AB 23             call    CPDEHL          ; Number in range?
1641+ 26DA DA B1 20             jp      C,SNERR         ; No - ?SN Error
1642+ 26DD 62                   ld      H,D             ; HL = Number
1643+ 26DE 6B                   ld      L,E
1644+ 26DF 19                   add     HL,DE           ; Times 2
1645+ 26E0 29                   add     HL,HL           ; Times 4
1646+ 26E1 19                   add     HL,DE           ; Times 5
1647+ 26E2 29                   add     HL,HL           ; Times 10
1648+ 26E3 F1                   pop     AF              ; Restore digit
1649+ 26E4 D6 30                sub     '0'             ; Make it 0 to 9
1650+ 26E6 5F                   ld      E,A             ; DE = Value of digit
1651+ 26E7 16 00                ld      D,0
1652+ 26E9 19                   add     HL,DE           ; Add to number
1653+ 26EA EB                   ex      DE,HL           ; Number to DE
1654+ 26EB E1                   pop     HL              ; Restore code string address
1655+ 26EC C3 CE 26             jp      GTLNLP          ; Go to next character
1656+ 26EF
1657+ 26EF CA FD 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26F2 CD 8B 2A             call    GETNUM          ; Evaluate a number
1659+ 26F5 CD B0 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26F8 2B                   dec     HL              ; Cancel increment
1661+ 26F9 CD FA 25             call    GETCHR          ; Get next character
1662+ 26FC E5                   push    HL              ; Save code string address
1663+ 26FD 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 2700 CA 18 27             jp      Z,STORED        ; No value given - Use stored
1665+ 2703 E1                   pop     HL              ; Restore code string address
1666+ 2704 CD B1 23             call    CHKSYN          ; Check for comma
1667+ 2707 2C                   defb    ','
1668+ 2708 D5                   push    DE              ; Save number
1669+ 2709 CD 8B 2A             call    GETNUM          ; Evaluate a number
1670+ 270C CD B0 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 270F 2B                   dec     HL              ; Cancel increment
1672+ 2710 CD FA 25             call    GETCHR          ; Get next character
1673+ 2713 C2 B1 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 2716 E3                   ex      (SP),HL         ; Save code string address
1675+ 2717 EB                   ex      DE,HL           ; Number to DE
1676+ 2718 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 2719 93                   sub     E               ; Subtract LSB of string space
1678+ 271A 5F                   ld      E,A             ; Save LSB
1679+ 271B 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 271C 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 271D 57                   ld      D,A             ; Save MSB
1682+ 271E DA 86 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 2721 E5                   push    HL              ; Save RAM top
1684+ 2722 2A 4B 82             ld      HL,(PROGND)     ; Get program end
1685+ 2725 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 2728 09                   add     HL,BC           ; Get lowest address
1687+ 2729 CD AB 23             call    CPDEHL          ; Enough memory?
1688+ 272C D2 86 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 272F EB                   ex      DE,HL           ; RAM top to HL
1690+ 2730 22 AD 80             ld      (STRSPC),HL     ; Set new string space
1691+ 2733 E1                   pop     HL              ; End of memory to use
1692+ 2734 22 96 81             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 2737 E1                   pop     HL              ; Restore code string address
1694+ 2738 C3 FD 21             jp      INTVAR          ; Initialise variables
1695+ 273B
1696+ 273B E5           RUN:    push    HL              ; store HL
1697+ 273C 21 FF FF             ld      HL,-1           ; reset...
1698+ 273F 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1699+ 2742 E1                   pop     HL              ; retrieve HL
1700+ 2743 CA F9 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 2746 CD FD 21             call    INTVAR          ; Initialise variables
1702+ 2749 01 BA 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 274C C3 5F 27             jp      RUNLIN          ; RUN from line number
1704+ 274F
1705+ 274F 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 2751 CD 6E 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 2754 C1                   pop     BC              ; Get return address
1708+ 2755 E5                   push    HL              ; Save code string for RETURN
1709+ 2756 E5                   push    HL              ; And for GOSUB routine
1710+ 2757 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1711+ 275A E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 275B 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 275D F5                   push    AF              ; Save token
1714+ 275E 33                   inc     SP              ; Don't save flags
1715+ 275F
1716+ 275F C5           RUNLIN: push    BC              ; Save return address
1717+ 2760 CD CA 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 2763 CD A5 27             call    REM             ; Get end of line
1719+ 2766 E5                   push    HL              ; Save end of line
1720+ 2767 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1721+ 276A CD AB 23             call    CPDEHL          ; Line after current?
1722+ 276D E1                   pop     HL              ; Restore end of line
1723+ 276E 23                   inc     HL              ; Start of next line
1724+ 276F DC D0 21             call    C,SRCHLP        ; Line is after current line
1725+ 2772 D4 CD 21             call    NC,SRCHLN       ; Line is before current line
1726+ 2775 60                   ld      H,B             ; Set up code string address
1727+ 2776 69                   ld      L,C
1728+ 2777 2B                   dec     HL              ; Incremented after
1729+ 2778 D8                   ret     C               ; Line found
1730+ 2779 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 277B C3 CB 20             jp      ERROR           ; Output error message
1732+ 277E
1733+ 277E C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 277F 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 2781 CD 3A 20             call    BAKSTK          ; Look "GOSUB" block
1736+ 2784 F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 2785 FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2787 1E 04                ld      E,RG            ; ?RG Error
1739+ 2789 C2 CB 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 278C E1                   pop     HL              ; Get RETURN line number
1741+ 278D 22 AF 80             ld      (LINEAT),HL     ; Save as current
1742+ 2790 23                   inc     HL              ; Was it from direct statement?
1743+ 2791 7C                   ld      A,H
1744+ 2792 B5                   or      L               ; Return to line
1745+ 2793 C2 9D 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2796 3A DB 81             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 2799 B7                   or      A               ; If so buffer is corrupted
1748+ 279A C2 10 21             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 279D 21 BA 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 27A0 E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 27A1 3E                   defb    $3E             ; Skip "pop HL"
1752+ 27A2 E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 27A3
1754+ 27A3 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 27A5 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 27A7 06 00                ld      B,$00
1757+ 27A9 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 27AA 48                   ld      C,B
1759+ 27AB 47                   ld      B,A             ; Statement end byte
1760+ 27AC 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 27AD B7                   or      A               ; End of line?
1762+ 27AE C8                   ret     Z               ; Yes - Exit
1763+ 27AF B8                   cp      B               ; End of statement?
1764+ 27B0 C8                   ret     Z               ; Yes - Exit
1765+ 27B1 23                   inc     HL              ; Next byte
1766+ 27B2 FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 27B4 CA A9 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 27B7 C3 AC 27             jp      NXTSTT          ; Keep looking
1769+ 27BA
1770+ 27BA CD 9A 2C     LET:    call    GETVAR          ; Get variable name
1771+ 27BD CD B1 23             call    CHKSYN          ; Make sure "=" follows
1772+ 27C0 C9                   defb    ZEQUAL          ; "=" token
1773+ 27C1 D5                   push    DE              ; Save address of variable
1774+ 27C2 3A 94 81             ld      A,(TYPE)        ; Get data type
1775+ 27C5 F5                   push    AF              ; Save type
1776+ 27C6 CD 9D 2A             call    EVAL            ; Evaluate expression
1777+ 27C9 F1                   pop     AF              ; Restore type
1778+ 27CA E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 27CB 22 DD 81             ld      (BRKLIN),HL     ; Save address of variable
1780+ 27CE 1F                   rra                     ; Adjust type
1781+ 27CF CD 90 2A             call    CHKTYP          ; Check types are the same
1782+ 27D2 CA 0D 28             jp      Z,LETNUM        ; Numeric - Move value
1783+ 27D5 E5           LETSTR: push    HL              ; Save address of string var
1784+ 27D6 2A 59 82             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 27D9 E5                   push    HL              ; Save it on stack
1786+ 27DA 23                   inc     HL              ; Skip over length
1787+ 27DB 23                   inc     HL
1788+ 27DC 5E                   ld      E,(HL)          ; LSB of string address
1789+ 27DD 23                   inc     HL
1790+ 27DE 56                   ld      D,(HL)          ; MSB of string address
1791+ 27DF 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1792+ 27E2 CD AB 23             call    CPDEHL          ; Is string before program?
1793+ 27E5 D2 FC 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 27E8 2A AD 80             ld      HL,(STRSPC)     ; Point to string space
1795+ 27EB CD AB 23             call    CPDEHL          ; Is string literal in program?
1796+ 27EE D1                   pop     DE              ; Restore address of string
1797+ 27EF D2 04 28             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27F2 21 CE 81             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27F5 CD AB 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27F8 D2 04 28             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27FB 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27FC D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27FD CD F4 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 2800 EB                   ex      DE,HL           ; Address of string entry
1805+ 2801 CD 2D 2F             call    SAVSTR          ; Save string in string area
1806+ 2804 CD F4 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 2807 E1                   pop     HL              ; Get string pointer
1808+ 2808 CD F3 38             call    DETHL4          ; Move string pointer to var
1809+ 280B E1                   pop     HL              ; Restore code string address
1810+ 280C C9                   ret
1811+ 280D
1812+ 280D E5           LETNUM: push    HL              ; Save address of variable
1813+ 280E CD F0 38             call    FPTHL           ; Move value to variable
1814+ 2811 D1                   pop     DE              ; Restore address of variable
1815+ 2812 E1                   pop     HL              ; Restore code string address
1816+ 2813 C9                   ret
1817+ 2814
1818+ 2814 CD 11 33     ON:     call    GETINT          ; Get integer 0-255
1819+ 2817 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 2818 47                   ld      B,A             ; Save in B
1821+ 2819 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 281B CA 23 28             jp      Z,ONGO          ; Yes - Find line number
1823+ 281E CD B1 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 2821 88                   defb    ZGOTO           ; "GOTO" token
1825+ 2822 2B                   dec     HL              ; Cancel increment
1826+ 2823 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 2824 0D           ONGOLP: dec     C               ; Count branches
1828+ 2825 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 2826 CA E2 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 2829 CD CB 26             call    GETLN           ; Get line number to DE
1831+ 282C FE 2C                cp      ','             ; Another line number?
1832+ 282E C0                   ret     NZ              ; No - Drop through
1833+ 282F C3 24 28             jp      ONGOLP          ; Yes - loop
1834+ 2832
1835+ 2832 CD 9D 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 2835 7E                   ld      A,(HL)          ; Get token
1837+ 2836 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 2838 CA 40 28             jp      Z,IFGO          ; Yes - Get line
1839+ 283B CD B1 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 283E BB                   defb    ZTHEN           ; "THEN" token
1841+ 283F 2B                   dec     HL              ; Cancel increment
1842+ 2840 CD 8E 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 2843 CD 98 38             call    TSTSGN          ; Test state of expression
1844+ 2846 CA 52 28             jp      Z,IF1           ; False - Jump over
1845+ 2849 CD FA 25     IF0:    call    GETCHR          ; Get next character
1846+ 284C DA 60 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 284F C3 E1 25             jp      IFJMP           ; Otherwise do statement
1848+ 2852 0E AF        IF1:    ld      C,ZELSE
1849+ 2854 CD A7 27             call    REM+2           ; check statement
1850+ 2857 B7                   or      A               ; end of line?
1851+ 2858 C8                   ret     Z               ; yes, leave
1852+ 2859 FE AF                cp      ZELSE
1853+ 285B 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 285D C3 49 28             jp      IF0             ; return to IF
1855+ 2860
1856+ 2860
1857+ 2860 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 2861 CD FA 25             call    GETCHR          ; Get next character
1859+ 2864 CA C7 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2867 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 2868 FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 286A CA EF 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 286D FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 286F CA EF 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 2872 E5                   push    HL              ; Save code string address
1866+ 2873 FE 2C                cp      ','             ; Comma?
1867+ 2875 CA D6 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 2878 FE 3B                cp      ';'             ; Semi-colon?
1869+ 287A CA 13 29             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 287D C1                   pop     BC              ; Code string address to BC
1871+ 287E CD 9D 2A             call    EVAL            ; Evaluate expression
1872+ 2881 E5                   push    HL              ; Save code string address
1873+ 2882 3A 94 81             ld      A,(TYPE)        ; Get variable type
1874+ 2885 B7                   or      A               ; Is it a string variable?
1875+ 2886 C2 AE 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 2889 CD 3D 3A             call    NUMASC          ; Convert number to text
1877+ 288C CD 51 2F             call    CRTST           ; Create temporary string
1878+ 288F 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 2891 2A 59 82             ld      HL,(FPREG)      ; Get length of output
1880+ 2894 34                   inc     (HL)            ; Plus 1 for the space
1881+ 2895 2A 59 82             ld      HL,(FPREG)      ; < Not needed >
1882+ 2898 3A A2 80             ld      A,(LWIDTH)      ; Get width of line
1883+ 289B 47                   ld      B,A             ; To B
1884+ 289C 04                   inc     B               ; Width 255 (No limit)?
1885+ 289D CA AA 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 28A0 04                   inc     B               ; Adjust it
1887+ 28A1 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1888+ 28A4 86                   add     A,(HL)          ; Add length of string
1889+ 28A5 3D                   dec     A               ; Adjust it
1890+ 28A6 B8                   cp      B               ; Will output fit on this line?
1891+ 28A7 D4 C7 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 28AA CD 96 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 28AD AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 28AE C4 96 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 28B1 E1                   pop     HL              ; Restore code string address
1896+ 28B2 C3 60 28             jp      MRPRNT          ; See if more to PRINT
1897+ 28B5
1898+ 28B5 3A 92 81     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 28B8 B7                   or      A               ; Already at start?
1900+ 28B9 C8                   ret     Z               ; Yes - Do nothing
1901+ 28BA C3 C7 28             jp      PRNTCRLF        ; Start a new line
1902+ 28BD
1903+ 28BD AF           ENDINP: xor     A
1904+ 28BE 32 3F 82             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 28C1 77                   ld      (HL),A          ; Mark end of buffer
1906+ 28C2 21 37 81             ld      HL,BUFFER-1     ; Point to buffer
1907+ 28C5 18 0A                jr      CNTEND
1908+ 28C7 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 28C9 CD BC 23             call    OUTC            ; Output character
1910+ 28CC 3E 0A                ld      A,LF            ; Load a LF
1911+ 28CE CD BC 23             call    OUTC            ; Output character
1912+ 28D1 AF           CNTEND: xor     A               ; Set to position 0
1913+ 28D2 32 92 81             ld      (CURPOS),A      ; Store it
1914+ 28D5 C9                   ret                     ; return to caller
1915+ 28D6
1916+ 28D6 3A A3 80     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 28D9 47                   ld      B,A             ; Save in B
1918+ 28DA 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 28DD B8                   cp      B               ; Within the limit?
1920+ 28DE D4 C7 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 28E1 D2 13 29             jp      NC,NEXITM       ; Get next item
1922+ 28E4 D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 28E6 D2 E4 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 28E9 2F                   cpl                     ; Number of null chars to output
1925+ 28EA 0E 00                ld      C,NLLCR         ; null char
1926+ 28EC C3 09 29             jp      ASPCS           ; Output them
1927+ 28EF
1928+ 28EF F5           DOTAB:  push    AF              ; Save token
1929+ 28F0 CD 0E 33             call    FNDNUM          ; Evaluate expression
1930+ 28F3 CD B1 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28F6 29                   defb    ')'
1932+ 28F7 2B                   dec     HL              ; Back space on to ")"
1933+ 28F8 F1                   pop     AF              ; Restore token
1934+ 28F9 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28FB D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28FD E5                   push    HL              ; Save code string address
1937+ 28FE CA 04 29             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 2901 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 2904 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 2905 83                   add     A,E             ; Total number to print
1941+ 2906 D2 13 29             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 2909 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 290A 47                   ld      B,A             ; Save number to print
1944+ 290B 79           SPCLP:  ld      A,C             ; char to print
1945+ 290C CD BC 23             call    OUTC            ; Output character in A
1946+ 290F 05                   dec     B               ; Count them
1947+ 2910 C2 0B 29             jp      NZ,SPCLP        ; Repeat if more
1948+ 2913 E1           NEXITM: pop     HL              ; Restore code string address
1949+ 2914 CD FA 25             call    GETCHR          ; Get next character
1950+ 2917 C3 67 28             jp      PRNTLP          ; More to print
1951+ 291A
1952+ 291A 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 291E 6F 20 66 72
1952+ 2922 6F 6D 20 73
1952+ 2926 74 61 72 74
1952+ 292A 0D 00
1953+ 292C
1954+ 292C 3A DC 81     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 292F B7                   or      A
1956+ 2930 C2 AB 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 2933 C1                   pop     BC              ; Throw away code string addr
1958+ 2934 21 1A 29             ld      HL,REDO         ; "Redo from start" message
1959+ 2937 CD 93 2F             call    PRS             ; Output string
1960+ 293A C3 2C 22             jp      DOAGN           ; Do last INPUT again
1961+ 293D
1962+ 293D CD FE 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 2940 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 2941 FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 2943 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 2945 32 A5 80             ld      (CTLOFG),A      ; Enable output
1967+ 2948 C2 57 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 294B CD 52 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 294E CD B1 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 2951 3B                   defb    ";"
1971+ 2952 E5                   push    HL              ; Save code string address
1972+ 2953 CD 96 2F             call    PRS1            ; Output prompt string
1973+ 2956 3E                   defb    $3E             ; Skip "push HL"
1974+ 2957 E5           NOPMPT: push    HL              ; Save code string address
1975+ 2958 CD 30 22             call    PROMPT          ; Get input with "? " prompt
1976+ 295B C1                   pop     BC              ; Restore code string address
1977+ 295C DA 49 26             jp      C,INPBRK        ; Break pressed - Exit
1978+ 295F 23                   inc     HL              ; Next byte
1979+ 2960 7E                   ld      A,(HL)          ; Get it
1980+ 2961 B7                   or      A               ; End of line?
1981+ 2962 2B                   dec     HL              ; Back again
1982+ 2963 C5                   push    BC              ; Re-save code string address
1983+ 2964 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2967 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 2969 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 296C CD 59 09             call    CURSOR_OFF      ; disable cursor
1987+ 296F CA A2 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 2972 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 2974 C3 7C 29             jp      NXTITM          ; Get next item
1990+ 2977
1991+ 2977 E5           READ:   push    HL              ; Save code string address
1992+ 2978 2A 51 82             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 297B F6                   defb    $F6             ; Flag "READ"
1994+ 297C AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 297D 32 DC 81             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 2980 E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 2981 C3 88 29             jp      GTVLUS          ; Get values
1998+ 2984
1999+ 2984 CD B1 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2987 2C                   defb    ','
2001+ 2988 CD 9A 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 298B E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 298C D5                   push    DE              ; Save variable address
2004+ 298D 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 298E FE 2C                cp      ','             ; Comma?
2006+ 2990 CA B0 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 2993 3A DC 81             ld      A,(READFG)      ; Is it READ?
2008+ 2996 B7                   or      A
2009+ 2997 C2 1C 2A             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 299A 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 299C CD BC 23             call    OUTC            ; Output character
2012+ 299F CD 30 22             call    PROMPT          ; Get INPUT with prompt
2013+ 29A2 D1                   pop     DE              ; Variable address
2014+ 29A3 C1                   pop     BC              ; Code string address
2015+ 29A4 DA 49 26             jp      C,INPBRK        ; Break pressed
2016+ 29A7 23                   inc     HL              ; Point to next DATA byte
2017+ 29A8 7E                   ld      A,(HL)          ; Get byte
2018+ 29A9 B7                   or      A               ; Is it zero (No input) ?
2019+ 29AA 2B                   dec     HL              ; Back space INPUT pointer
2020+ 29AB C5                   push    BC              ; Save code string address
2021+ 29AC CA A2 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 29AF D5                   push    DE              ; Save variable address
2023+ 29B0 3A 94 81     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 29B3 B7                   or      A               ; Is it numeric?
2025+ 29B4 CA DA 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 29B7 CD FA 25             call    GETCHR          ; Get next character
2027+ 29BA 57                   ld      D,A             ; Save input character
2028+ 29BB 47                   ld      B,A             ; Again
2029+ 29BC FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 29BE CA CE 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 29C1 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 29C4 B7                   or      A
2033+ 29C5 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 29C6 CA CB 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 29C9 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 29CB 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 29CD 2B                   dec     HL              ; Back space for DTSTR
2038+ 29CE CD 55 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 29D1 EB                   ex      DE,HL           ; String address to DE
2040+ 29D2 21 E5 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 29D5 E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 29D6 D5                   push    DE              ; Save address of string
2043+ 29D7 C3 D5 27             jp      LETSTR          ; Assign string to variable
2044+ 29DA
2045+ 29DA CD FA 25     INPBIN: call    GETCHR          ; Get next character
2046+ 29DD CD 9F 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 29E0 E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 29E1 CD F0 38             call    FPTHL           ; Move FPREG to variable
2049+ 29E4 E1                   pop     HL              ; Restore input pointer
2050+ 29E5 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 29E6 CD FA 25             call    GETCHR          ; Get next character
2052+ 29E9 CA F1 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 29EC FE 2C                cp      ','             ; Another value?
2054+ 29EE C2 2C 29             jp      NZ,BADINP       ; No - Bad input
2055+ 29F1 E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29F2 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29F3 CD FA 25             call    GETCHR          ; Get next character
2058+ 29F6 C2 84 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29F9 D1                   pop     DE              ; Restore DATA pointer
2060+ 29FA 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29FD B7                   or      A
2062+ 29FE EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29FF C2 20 26             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 2A02 D5                   push    DE              ; Save code string address
2065+ 2A03 B6                   or      (HL)            ; More input given?
2066+ 2A04 21 0C 2A             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 2A07 C4 93 2F             call    NZ,PRS          ; Output string if extra given
2068+ 2A0A E1                   pop     HL              ; Restore code string address
2069+ 2A0B C9                   ret
2070+ 2A0C
2071+ 2A0C 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 2A10 72 61 20 69
2071+ 2A14 67 6E 6F 72
2071+ 2A18 65 64 0D 00
2072+ 2A1C
2073+ 2A1C CD A3 27     FDTLP:  call    DATA            ; Get next statement
2074+ 2A1F B7                   or      A               ; End of line?
2075+ 2A20 C2 35 2A             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 2A23 23                   inc     HL
2077+ 2A24 7E                   ld      A,(HL)          ; End of program?
2078+ 2A25 23                   inc     HL
2079+ 2A26 B6                   or      (HL)            ; 00 00 Ends program
2080+ 2A27 1E 06                ld      E,OD            ; ?OD Error
2081+ 2A29 CA CB 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 2A2C 23                   inc     HL
2083+ 2A2D 5E                   ld      E,(HL)          ; LSB of line number
2084+ 2A2E 23                   inc     HL
2085+ 2A2F 56                   ld      D,(HL)          ; MSB of line number
2086+ 2A30 EB                   ex      DE,HL
2087+ 2A31 22 D8 81             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 2A34 EB                   ex      DE,HL
2089+ 2A35 CD FA 25     FANDT:  call    GETCHR          ; Get next character
2090+ 2A38 FE 83                cp      ZDATA           ; "DATA" token
2091+ 2A3A C2 1C 2A             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 2A3D C3 B0 29             jp      ANTVLU          ; Found - Convert input
2093+ 2A40
2094+ 2A40 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 2A43 C4 9A 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 2A46 22 DD 81             ld      (BRKLIN),HL     ; Save code string address
2097+ 2A49 CD 3A 20             call    BAKSTK          ; Look for "FOR" block
2098+ 2A4C C2 B7 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 2A4F F9                   ld      SP,HL           ; Clear nested loops
2100+ 2A50 D5                   push    DE              ; Save index address
2101+ 2A51 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A52 23                   inc     HL
2103+ 2A53 F5                   push    AF              ; Save sign of STEP
2104+ 2A54 D5                   push    DE              ; Save index address
2105+ 2A55 CD D6 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A58 E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A59 E5                   push    HL              ; Save address of index
2108+ 2A5A CD F2 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A5D E1                   pop     HL              ; Restore address of index
2110+ 2A5E CD F0 38             call    FPTHL           ; Move value to index variable
2111+ 2A61 E1                   pop     HL              ; Restore address of TO value
2112+ 2A62 CD E7 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A65 E5                   push    HL              ; Save address of line of FOR
2114+ 2A66 CD 13 39             call    CMPNUM          ; Compare index with TO value
2115+ 2A69 E1                   pop     HL              ; Restore address of line num
2116+ 2A6A C1                   pop     BC              ; Address of sign of STEP
2117+ 2A6B 90                   sub     B               ; Compare with expected sign
2118+ 2A6C CD E7 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A6F CA 7B 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A72 EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A73 22 AF 80             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A76 69                   ld      L,C             ; Set code string to loop
2123+ 2A77 60                   ld      H,B
2124+ 2A78 C3 B6 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A7B
2126+ 2A7B F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A7C 2A DD 81             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A7F 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A80 FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A82 C2 BA 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A85 CD FA 25             call    GETCHR          ; Position to index name
2132+ 2A88 CD 43 2A             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A8B              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A8B
2135+ 2A8B CD 9D 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A8E F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A8F 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A90 3A 94 81     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A93 8F                   adc     A,A             ; Expected + actual
2140+ 2A94 B7                   or      A               ; Clear carry , set parity
2141+ 2A95 E8                   ret     PE              ; Even parity - Types match
2142+ 2A96 C3 C3 20             jp      TMERR           ; Different types - Error
2143+ 2A99
2144+ 2A99 CD B1 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A9C 28                   defb    '('
2146+ 2A9D 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A9E 16 00                ld      D,$00           ; Precedence value
2148+ 2AA0 D5           EVAL1:  push    DE              ; Save precedence
2149+ 2AA1 0E 01                ld      C,$01
2150+ 2AA3 CD 6E 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2AA6 CD 14 2B             call    OPRND           ; Get next expression value
2152+ 2AA9 22 DF 81     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2AAC 2A DF 81     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2AAF C1                   pop     BC              ; Precedence value and operator
2155+ 2AB0 78                   ld      A,B             ; Get precedence value
2156+ 2AB1 FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2AB3 D4 8E 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2AB6 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2AB7 16 00                ld      D,$00           ; Clear Last relation
2160+ 2AB9 D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2ABB DA D5 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2ABE FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2AC0 D2 D5 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2AC3 FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2AC5 17                   rla                     ; <- Test for legal
2166+ 2AC6 AA                   xor     D               ; <- combinations of < = >
2167+ 2AC7 BA                   cp      D               ; <- by combining last token
2168+ 2AC8 57                   ld      D,A             ; <- with current one
2169+ 2AC9 DA B1 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2ACC 22 D4 81             ld      (CUROPR),HL     ; Save address of current token
2171+ 2ACF CD FA 25             call    GETCHR          ; Get next character
2172+ 2AD2 C3 B9 2A             jp      RLTLP           ; Treat the two as one
2173+ 2AD5
2174+ 2AD5 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2AD6 B7                   or      A
2176+ 2AD7 C2 15 2C             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2ADA 7E                   ld      A,(HL)          ; Get operator token
2178+ 2ADB 22 D4 81             ld      (CUROPR),HL     ; Save operator address
2179+ 2ADE D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2AE0 D8                   ret     C               ; Neither - Exit
2181+ 2AE1 FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2AE3 D0                   ret     NC              ; No - Exit
2183+ 2AE4 5F                   ld      E,A             ; Coded operator
2184+ 2AE5 3A 94 81             ld      A,(TYPE)        ; Get data type
2185+ 2AE8 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2AE9 B3                   or      E               ; Combine with coded operator
2187+ 2AEA 7B                   ld      A,E             ; Get coded operator
2188+ 2AEB CA 89 30             jp      Z,CONCAT        ; String concatenation
2189+ 2AEE 07                   rlca                    ; Times 2
2190+ 2AEF 83                   add     A,E             ; Times 3
2191+ 2AF0 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2AF1 21 2C 1F             ld      HL,PRITAB       ; Precedence table
2193+ 2AF4 19                   add     HL,DE           ; To the operator concerned
2194+ 2AF5 78                   ld      A,B             ; Last operator precedence
2195+ 2AF6 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AF7 BA                   cp      D               ; Compare with eval precedence
2197+ 2AF8 D0                   ret     NC              ; Exit if higher precedence
2198+ 2AF9 23                   inc     HL              ; Point to routine address
2199+ 2AFA CD 8E 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2AFD
2201+ 2AFD C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2AFE 01 AC 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2B01 C5                   push    BC              ; Save on stack for return
2204+ 2B02 43                   ld      B,E             ; Save operator
2205+ 2B03 4A                   ld      C,D             ; Save precedence
2206+ 2B04 CD C9 38             call    STAKFP          ; Move value to stack
2207+ 2B07 58                   ld      E,B             ; Restore operator
2208+ 2B08 51                   ld      D,C             ; Restore precedence
2209+ 2B09 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2B0A 23                   inc     HL
2211+ 2B0B 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2B0C 23                   inc     HL
2213+ 2B0D C5                   push    BC              ; Save routine address
2214+ 2B0E 2A D4 81             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2B11 C3 A0 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2B14
2217+ 2B14 AF           OPRND:  xor     A               ; Get operand routine
2218+ 2B15 32 94 81             ld      (TYPE),A        ; Set numeric expected
2219+ 2B18 CD FA 25             call    GETCHR          ; Get next character
2220+ 2B1B 1E 24                ld      E,MO            ; ?MO Error
2221+ 2B1D CA CB 20             jp      Z,ERROR         ; No operand - Error
2222+ 2B20 DA 9F 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2B23 CD 9C 26             call    CHKLTR          ; See if a letter
2224+ 2B26 D2 7B 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2B29 FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2B2B 20 12                jr      NZ,NOTAMP
2227+ 2B2D CD FA 25             call    GETCHR          ; Get next character
2228+ 2B30 FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2B32 CA 77 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2B35 FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2B37 CA E7 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2B3A 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2B3C CA CB 20             jp      Z,ERROR         ;
2234+ 2B3F FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2B41 CA 14 2B             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2B44 FE 2E                cp      '.'             ; '.' ?
2237+ 2B46 CA 9F 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2B49 FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2B4B CA 6A 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2B4E FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2B50 CA 52 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B53 FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B55 CA 75 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B58 FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B5A CA B6 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B5D D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B5F D2 8C 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B62 CD 99 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B65 CD B1 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B68 29                   defb    ')'
2251+ 2B69 C9                   ret
2252+ 2B6A
2253+ 2B6A 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B6C CD A0 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B6F 2A DF 81             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B72 E5                   push    HL              ; Save next operator address
2257+ 2B73 CD C1 38             call    INVSGN          ; Negate value
2258+ 2B76 CD 8E 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B79 E1                   pop     HL              ; Restore next operator address
2260+ 2B7A C9                   ret
2261+ 2B7B
2262+ 2B7B CD 9A 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B7E E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B7F EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B80 22 59 82             ld      (FPREG),HL      ; Save address of variable
2266+ 2B83 3A 94 81             ld      A,(TYPE)        ; Get type
2267+ 2B86 B7                   or      A               ; Numeric?
2268+ 2B87 CC D6 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B8A E1                   pop     HL              ; Restore code string address
2270+ 2B8B C9                   ret
2271+ 2B8C
2272+ 2B8C 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B8E 07                   rlca                    ; Double function offset
2274+ 2B8F 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B90 C5                   push    BC              ; Save adjusted token value
2276+ 2B91 CD FA 25             call    GETCHR          ; Get next character
2277+ 2B94 79                   ld      A,C             ; Get adjusted token value
2278+ 2B95 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B97 CA C5 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B9A FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B9C CA 65 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B9F FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2BA1 DA BD 2B             jp      C,FNVAL         ; No - Do function
2284+ 2BA4 CD 99 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2BA7 CD B1 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2BAA 2C                   defb    ','
2287+ 2BAB CD 8F 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2BAE EB                   ex      DE,HL           ; Save code string address
2289+ 2BAF 2A 59 82             ld      HL,(FPREG)      ; Get address of string
2290+ 2BB2 E3                   ex      (SP),HL         ; Save address of string
2291+ 2BB3 E5                   push    HL              ; Save adjusted token value
2292+ 2BB4 EB                   ex      DE,HL           ; Restore code string address
2293+ 2BB5 CD 11 33             call    GETINT          ; Get integer 0-255
2294+ 2BB8 EB                   ex      DE,HL           ; Save code string address
2295+ 2BB9 E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2BBA C3 C5 2B             jp      GOFUNC          ; Jump to string function
2297+ 2BBD
2298+ 2BBD CD 62 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2BC0 E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2BC1 11 76 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2BC4 D5                   push    DE              ; Save on stack
2302+ 2BC5 01 E9 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2BC8 09                   add     HL,BC           ; Point to right address
2304+ 2BC9 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2BCA 23                   inc     HL              ;
2306+ 2BCB 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2BCC 69                   ld      L,C             ; Address to HL
2308+ 2BCD E9                   jp      (HL)            ; Jump to function
2309+ 2BCE
2310+ 2BCE 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2BCF FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2BD1 C8                   ret     Z               ; Yes - Return
2313+ 2BD2 FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2BD4 C8                   ret     Z               ; Yes - Return
2315+ 2BD5 14                   inc     D               ; Inc to flag positive exponent
2316+ 2BD6 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2BD8 C8                   ret     Z               ; Yes - Return
2318+ 2BD9 FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2BDB C8                   ret     Z               ; Yes - Return
2320+ 2BDC 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2BDD C9                   ret                     ; Return "NZ"
2322+ 2BDE
2323+ 2BDE              ; execute OR, AND, and XOR operations
2324+ 2BDE AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2BDF 18 07                jr      CNTLGC
2326+ 2BE1 AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2BE2 D6 01                sub     $01
2328+ 2BE4 18 02                jr      CNTLGC
2329+ 2BE6 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2BE7 3C                   inc     A
2331+ 2BE8 F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2BE9 CD 8E 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2BEC CD B0 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2BEF F1                   pop     AF              ; retrieve operand's flags
2335+ 2BF0 EB                   ex      DE,HL           ; <- Get last
2336+ 2BF1 C1                   pop     BC              ; <-  value
2337+ 2BF2 E3                   ex      (SP),HL         ; <-  from
2338+ 2BF3 EB                   ex      DE,HL           ; <-  stack
2339+ 2BF4 CD D9 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BF7 F5                   push    AF              ; store operand's flags
2341+ 2BF8 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BFB F1                   pop     AF              ; retrieve operand's flags
2343+ 2BFC C1                   pop     BC              ; Get value
2344+ 2BFD 79                   ld      A,C             ; Get LSB
2345+ 2BFE 21 74 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2C01 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2C03 A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2C04 4F                   ld      C,A             ; Save LSB
2349+ 2C05 78                   ld      A,B             ; Get MSB
2350+ 2C06 A2                   and     D               ; "AND" MSBs
2351+ 2C07 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2C08 F2 10 2C     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2C0B B3                   or      E               ; "OR" LSBs
2354+ 2C0C 4F                   ld      C,A             ; Save LSB
2355+ 2C0D 78                   ld      A,B             ; Get MSB
2356+ 2C0E B2                   or      D               ; "OR" MSBs
2357+ 2C0F E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2C10 AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2C11 4F                   ld      C,A             ; Save LSB
2360+ 2C12 78                   ld      A,B             ; Get MSB
2361+ 2C13 AA                   xor     D               ; "XOR" MSBs
2362+ 2C14 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2C15
2364+ 2C15 21 27 2C     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2C18 3A 94 81             ld      A,(TYPE)        ; Get data type
2366+ 2C1B 1F                   rra                     ; Carry set = string
2367+ 2C1C 7A                   ld      A,D             ; Get last precedence value
2368+ 2C1D 17                   rla                     ; Times 2 plus carry
2369+ 2C1E 5F                   ld      E,A             ; To E
2370+ 2C1F 16 64                ld      D,$64           ; Relational precedence
2371+ 2C21 78                   ld      A,B             ; Get current precedence
2372+ 2C22 BA                   cp      D               ; Compare with last
2373+ 2C23 D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2C24 C3 FD 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2C27
2376+ 2C27 29 2C        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2C29 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2C2A B7                   or      A
2379+ 2C2B 1F                   rra
2380+ 2C2C C1                   pop     BC              ; Get last expression to BCDE
2381+ 2C2D D1                   pop     DE
2382+ 2C2E F5                   push    AF              ; Save status
2383+ 2C2F CD 90 2A             call    CHKTYP          ; Check that types match
2384+ 2C32 21 6B 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2C35 E5                   push    HL              ; Save for RETurn
2386+ 2C36 CA 13 39             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2C39 AF                   xor     A               ; Compare two strings
2388+ 2C3A 32 94 81             ld      (TYPE),A        ; Set type to numeric
2389+ 2C3D D5                   push    DE              ; Save string name
2390+ 2C3E CD D6 30             call    GSTRCU          ; Get current string
2391+ 2C41 7E                   ld      A,(HL)          ; Get length of string
2392+ 2C42 23                   inc     HL
2393+ 2C43 23                   inc     HL
2394+ 2C44 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2C45 23                   inc     HL
2396+ 2C46 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2C47 D1                   pop     DE              ; Restore string name
2398+ 2C48 C5                   push    BC              ; Save address of string
2399+ 2C49 F5                   push    AF              ; Save length of string
2400+ 2C4A CD DA 30             call    GSTRDE          ; Get second string
2401+ 2C4D CD E7 38             call    LOADFP          ; Get address of second string
2402+ 2C50 F1                   pop     AF              ; Restore length of string 1
2403+ 2C51 57                   ld      D,A             ; Length to D
2404+ 2C52 E1                   pop     HL              ; Restore address of string 1
2405+ 2C53 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C54 B2                   or      D               ; Bytes of string 1 to do
2407+ 2C55 C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C56 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C57 D6 01                sub     $01
2410+ 2C59 D8                   ret     C               ; Exit if end of string 1
2411+ 2C5A AF                   xor     A
2412+ 2C5B BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C5C 3C                   inc     A
2414+ 2C5D D0                   ret     NC              ; Exit if end of string 2
2415+ 2C5E 15                   dec     D               ; Count bytes in string 1
2416+ 2C5F 1D                   dec     E               ; Count bytes in string 2
2417+ 2C60 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C61 BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C62 23                   inc     HL              ; Move up string 1
2420+ 2C63 03                   inc     BC              ; Move up string 2
2421+ 2C64 CA 53 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C67 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C68 C3 A3 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C6B
2425+ 2C6B 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C6C 8F                   adc     A,A             ; Double plus carry
2427+ 2C6D C1                   pop     BC              ; Get other value
2428+ 2C6E A0                   and     B               ; Combine them
2429+ 2C6F C6 FF                add     A,-1            ; Carry set if different
2430+ 2C71 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C72 C3 AA 38             jp      FLGREL          ; Set current value & continue
2432+ 2C75
2433+ 2C75 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C77 CD A0 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C7A CD 8E 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C7D CD B0 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C80 7B                   ld      A,E             ; Get LSB
2438+ 2C81 2F                   cpl                     ; Invert LSB
2439+ 2C82 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C83 7A                   ld      A,D             ; Get MSB
2441+ 2C84 2F                   cpl                     ; Invert MSB
2442+ 2C85 CD 74 2E             call    ACPASS          ; Save AC as current
2443+ 2C88 C1                   pop     BC              ; Clean up stack
2444+ 2C89 C3 AC 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C8C
2446+ 2C8C 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C8D CD FA 25             call    GETCHR          ; Get next character
2448+ 2C90 C8                   ret     Z               ; End of DIM statement
2449+ 2C91 CD B1 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C94 2C                   defb    ','
2451+ 2C95 01 8C 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C98 C5                   push    BC              ; Save on stack
2453+ 2C99 F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C9A AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C9B 32 93 81             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C9E 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C9F CD 9C 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2CA2 DA B1 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2CA5 AF                   xor     A
2460+ 2CA6 4F                   ld      C,A             ; Clear second byte of name
2461+ 2CA7 32 94 81             ld      (TYPE),A        ; Set type to numeric
2462+ 2CAA CD FA 25             call    GETCHR          ; Get next character
2463+ 2CAD DA B6 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2CB0 CD 9C 26             call    CHKLTR          ; See if a letter
2465+ 2CB3 DA C3 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2CB6 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2CB7 CD FA 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2CBA DA B7 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2CBD CD 9C 26             call    CHKLTR          ; See if a letter
2470+ 2CC0 D2 B7 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2CC3 D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2CC5 C2 D2 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2CC8 3C                   inc     A               ; A = 1 (string type)
2474+ 2CC9 32 94 81             ld      (TYPE),A        ; Set type to string
2475+ 2CCC 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2CCD 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2CCE 4F                   ld      C,A             ; Resave second byte on name
2478+ 2CCF CD FA 25             call    GETCHR          ; Get next character
2479+ 2CD2 3A DA 81     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2CD5 3D                   dec     A
2481+ 2CD6 CA 7F 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2CD9 F2 E2 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2CDC 7E                   ld      A,(HL)          ; Get byte again
2484+ 2CDD D6 28                sub     '('             ; Subscripted variable?
2485+ 2CDF CA 57 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2CE2
2487+ 2CE2 AF           NSCFOR: xor     A               ; Simple variable
2488+ 2CE3 32 DA 81             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2CE6 E5                   push    HL              ; Save code string address
2490+ 2CE7 50                   ld      D,B             ; DE = Variable name to find
2491+ 2CE8 59                   ld      E,C
2492+ 2CE9 2A 53 82             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2CEC CD AB 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2CEF 11 55 82             ld      DE,FNARG        ; Point to argument value
2495+ 2CF2 CA 88 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CF5 2A 4D 82             ld      HL,(VAREND)     ; End of variables
2497+ 2CF8 EB                   ex      DE,HL           ; Address of end of search
2498+ 2CF9 2A 4B 82             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CFC CD AB 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CFF CA 15 2D             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2D02 79                   ld      A,C             ; Get second byte of name
2502+ 2D03 96                   sub     (HL)            ; Compare with name in list
2503+ 2D04 23                   inc     HL              ; Move on to first byte
2504+ 2D05 C2 0A 2D             jp      NZ,FNTHR        ; Different - Find another
2505+ 2D08 78                   ld      A,B             ; Get first byte of name
2506+ 2D09 96                   sub     (HL)            ; Compare with name in list
2507+ 2D0A 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2D0B CA 49 2D             jp      Z,RETADR        ; Found - Return address
2509+ 2D0E 23                   inc     HL              ; <- Skip
2510+ 2D0F 23                   inc     HL              ; <- over
2511+ 2D10 23                   inc     HL              ; <- F.P.
2512+ 2D11 23                   inc     HL              ; <- value
2513+ 2D12 C3 FC 2C             jp      FNDVAR          ; Keep looking
2514+ 2D15
2515+ 2D15 E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2D16 E3                   ex      (SP),HL         ; Get return address
2517+ 2D17 D5                   push    DE              ; Save address of variable
2518+ 2D18 11 7E 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2D1B CD AB 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2D1E D1                   pop     DE              ; Restore address of variable
2521+ 2D1F CA 4C 2D             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2D22 E3                   ex      (SP),HL         ; Put back return
2523+ 2D23 E5                   push    HL              ; Save code string address
2524+ 2D24 C5                   push    BC              ; Save variable name
2525+ 2D25 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2D28 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2527+ 2D2B E5                   push    HL              ; Save end of arrays
2528+ 2D2C 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2D2D C1                   pop     BC              ; Source address in BC
2530+ 2D2E E5                   push    HL              ; Save new end address
2531+ 2D2F CD 5D 20             call    MOVUP           ; Move arrays up
2532+ 2D32 E1                   pop     HL              ; Restore new end address
2533+ 2D33 22 4F 82             ld      (ARREND),HL     ; Set new end address
2534+ 2D36 60                   ld      H,B             ; End of variables to HL
2535+ 2D37 69                   ld      L,C
2536+ 2D38 22 4D 82             ld      (VAREND),HL     ; Set new end address
2537+ 2D3B
2538+ 2D3B 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2D3C 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2D3E CD AB 23             call    CPDEHL          ; Done them all?
2541+ 2D41 C2 3B 2D             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2D44 D1                   pop     DE              ; Get variable name
2543+ 2D45 73                   ld      (HL),E          ; Store second character
2544+ 2D46 23                   inc     HL
2545+ 2D47 72                   ld      (HL),D          ; Store first character
2546+ 2D48 23                   inc     HL
2547+ 2D49 EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2D4A E1                   pop     HL              ; Restore code string address
2549+ 2D4B C9                   ret
2550+ 2D4C
2551+ 2D4C 32 5C 82     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2D4F 21 2E 20             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D52 22 59 82             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D55 E1                   pop     HL              ; Restore code string address
2555+ 2D56 C9                   ret
2556+ 2D57
2557+ 2D57 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D58 2A 93 81             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D5B E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D5C 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D5D D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D5E C5                   push    BC              ; Save array name
2563+ 2D5F CD A4 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D62 C1                   pop     BC              ; Restore array name
2565+ 2D63 F1                   pop     AF              ; Get number of dimensions
2566+ 2D64 EB                   ex      DE,HL
2567+ 2D65 E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D66 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D67 EB                   ex      DE,HL
2570+ 2D68 3C                   inc     A               ; Count dimensions
2571+ 2D69 57                   ld      D,A             ; Save in D
2572+ 2D6A 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D6B FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D6D CA 5D 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D70 CD B1 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D73 29                   defb    ')'
2577+ 2D74 22 DF 81             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D77 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D78 22 93 81             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D7B 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D7D D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D7E 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D7F
2584+ 2D7F E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D80 F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D81 2A 4D 82             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D84 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D85 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D86 EB                   ex      DE,HL
2590+ 2D87 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2591+ 2D8A EB                   ex      DE,HL           ; Current array pointer
2592+ 2D8B CD AB 23             call    CPDEHL          ; End of arrays found?
2593+ 2D8E CA B7 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D91 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D92 B9                   cp      C               ; Compare with name given
2596+ 2D93 23                   inc     HL              ; Move on
2597+ 2D94 C2 99 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D97 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D98 B8                   cp      B               ; Compare with name given
2600+ 2D99 23           NXTARY: inc     HL              ; Move on
2601+ 2D9A 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D9B 23                   inc     HL
2603+ 2D9C 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D9D 23                   inc     HL
2605+ 2D9E C2 85 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2DA1 3A 93 81             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2DA4 B7                   or      A
2608+ 2DA5 C2 BA 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2DA8 F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2DA9 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2DAA 4D                   ld      C,L
2612+ 2DAB CA 88 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2DAE 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2DAF CA 15 2E             jp      Z,FINDEL        ; Yes - Find element
2615+ 2DB2 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2DB4 C3 CB 20             jp      ERROR           ; Output error
2617+ 2DB7
2618+ 2DB7 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2DBA F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2DBB CA C5 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2DBE 71                   ld      (HL),C          ; Save second byte of name
2622+ 2DBF 23                   inc     HL
2623+ 2DC0 70                   ld      (HL),B          ; Save first byte of name
2624+ 2DC1 23                   inc     HL
2625+ 2DC2 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2DC3 CD 6E 20             call    CHKSTK          ; Check if enough memory
2627+ 2DC6 23                   inc     HL              ; Point to number of dimensions
2628+ 2DC7 23                   inc     HL
2629+ 2DC8 22 D4 81             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2DCB 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2DCC 23                   inc     HL
2632+ 2DCD 3A 93 81             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2DD0 17                   rla                     ; Carry set = Create
2634+ 2DD1 79                   ld      A,C             ; Get number of dimensions
2635+ 2DD2 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2DD5 D2 DA 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2DD8 C1                   pop     BC              ; Get specified dimension size
2638+ 2DD9 03                   inc     BC              ; Include zero element
2639+ 2DDA 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2DDB 23                   inc     HL
2641+ 2DDC 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2DDD 23                   inc     HL
2643+ 2DDE F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2DDF E5                   push    HL              ; Save address of dim'n size
2645+ 2DE0 CD 84 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2DE3 EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2DE4 E1                   pop     HL              ; Restore address of dimension
2648+ 2DE5 F1                   pop     AF              ; Restore number of dimensions
2649+ 2DE6 3D                   dec     A               ; Count them
2650+ 2DE7 C2 D2 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2DEA F5                   push    AF              ; Save locate/create flag
2652+ 2DEB 42                   ld      B,D             ; MSB of memory needed
2653+ 2DEC 4B                   ld      C,E             ; LSB of memory needed
2654+ 2DED EB                   ex      DE,HL
2655+ 2DEE 19                   add     HL,DE           ; Add bytes to array start
2656+ 2DEF DA 86 20             jp      C,OMERR         ; Too big - Error
2657+ 2DF2 CD 77 20             call    ENFMEM          ; See if enough memory
2658+ 2DF5 22 4F 82             ld      (ARREND),HL     ; Save new end of array
2659+ 2DF8
2660+ 2DF8 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DF9 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DFB CD AB 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DFE C2 F8 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2E01 03                   inc     BC              ; Number of bytes + 1
2665+ 2E02 57                   ld      D,A             ; A=0
2666+ 2E03 2A D4 81             ld      HL,(CUROPR)     ; Get address of array
2667+ 2E06 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2E07 EB                   ex      DE,HL           ; To HL
2669+ 2E08 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2E09 09                   add     HL,BC           ; Add number of bytes
2671+ 2E0A EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2E0B 2B                   dec     HL
2673+ 2E0C 2B                   dec     HL
2674+ 2E0D 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2E0E 23                   inc     HL
2676+ 2E0F 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2E10 23                   inc     HL
2678+ 2E11 F1                   pop     AF              ; Locate / Create?
2679+ 2E12 DA 39 2E             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2E15 47           FINDEL: ld      B,A             ; Find array element
2681+ 2E16 4F                   ld      C,A
2682+ 2E17 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2E18 23                   inc     HL
2684+ 2E19 16                   defb    $16             ; Skip "pop HL"
2685+ 2E1A E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2E1B 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2E1C 23                   inc     HL
2688+ 2E1D 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2E1E 23                   inc     HL
2690+ 2E1F E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2E20 F5                   push    AF              ; Save number of dim'ns
2692+ 2E21 CD AB 23             call    CPDEHL          ; Dimension too large?
2693+ 2E24 D2 B2 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2E27 E5                   push    HL              ; Save index
2695+ 2E28 CD 84 39             call    MLDEBC          ; Multiply previous by size
2696+ 2E2B D1                   pop     DE              ; Index supplied to DE
2697+ 2E2C 19                   add     HL,DE           ; Add index to pointer
2698+ 2E2D F1                   pop     AF              ; Number of dimensions
2699+ 2E2E 3D                   dec     A               ; Count them
2700+ 2E2F 44                   ld      B,H             ; MSB of pointer
2701+ 2E30 4D                   ld      C,L             ; LSB of pointer
2702+ 2E31 C2 1A 2E             jp      NZ,FNDELP       ; More - Keep going
2703+ 2E34 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2E35 29                   add     HL,HL
2705+ 2E36 C1                   pop     BC              ; Start of array
2706+ 2E37 09                   add     HL,BC           ; Point to element
2707+ 2E38 EB                   ex      DE,HL           ; Address of element to DE
2708+ 2E39 2A DF 81     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2E3C C9                   ret
2710+ 2E3D
2711+ 2E3D
2712+ 2E3D              ; returns the value of the 32-bit system tick counter as
2713+ 2E3D              ; two 16-bit words
2714+ 2E3D CD 8E 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2E40 CD B0 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2E43 2A E5 81             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2E46 7B                   ld      A,E
2718+ 2E47 B2                   or      D               ; is it 0?
2719+ 2E48 CA 4E 2E             jp      Z,ENDTMR        ; yes, jump over
2720+ 2E4B 2A E7 81             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2E4E 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2E4F 7C                   ld      A,H             ; ...into AB
2723+ 2E50 C3 75 2E             jp      ABPASS          ; return word into AB
2724+ 2E53
2725+ 2E53
2726+ 2E53              ; returns the free space for BASIC or into the string pool
2727+ 2E53 2A 4F 82     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E56 EB                   ex      DE,HL           ; To DE
2729+ 2E57 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E5A 39                   add     HL,SP           ; Current stack value
2731+ 2E5B 3A 94 81             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E5E B7                   or      A
2733+ 2E5F CA 6F 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E62 CD D6 30             call    GSTRCU          ; Current string to pool
2735+ 2E65 CD D6 2F             call    GARBGE          ; Garbage collection
2736+ 2E68 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E6B EB                   ex      DE,HL           ; To DE
2738+ 2E6C 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E6F 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E70 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E71 4F                   ld      C,A             ; Save difference if C
2742+ 2E72 7C                   ld      A,H             ; Get MSB of end
2743+ 2E73 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E74 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E75 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E76 1E 00                ld      E,$00
2747+ 2E78 21 94 81             ld      HL,TYPE         ; Point to type
2748+ 2E7B 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E7C 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E7E C3 AF 38             jp      RETINT          ; Return the integer
2751+ 2E81
2752+ 2E81              ; returns the X position of the cursor during a print
2753+ 2E81 3A 92 81     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E84              ; return the value in A as a number
2755+ 2E84 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E85 AF                   xor     A               ; Zero A
2757+ 2E86 C3 75 2E             jp      ABPASS          ; Return integer AB
2758+ 2E89
2759+ 2E89 CD 0C 2F     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E8C CD FE 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E8F 01 A3 27             ld      BC,DATA         ; To get next statement
2762+ 2E92 C5                   push    BC              ; Save address for RETurn
2763+ 2E93 D5                   push    DE              ; Save address of function ptr
2764+ 2E94 CD B1 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E97 28                   defb    '('
2766+ 2E98 CD 9A 2C             call    GETVAR          ; Get argument variable name
2767+ 2E9B E5                   push    HL              ; Save code string address
2768+ 2E9C EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E9D 2B                   dec     HL
2770+ 2E9E 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E9F 2B                   dec     HL
2772+ 2EA0 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2EA1 E1                   pop     HL              ; Restore code string address
2774+ 2EA2 CD 8E 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2EA5 CD B1 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2EA8 29                   defb    ')'
2777+ 2EA9 CD B1 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2EAC C9                   defb    ZEQUAL          ; "=" token
2779+ 2EAD 44                   ld      B,H             ; Code string address to BC
2780+ 2EAE 4D                   ld      C,L
2781+ 2EAF E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2EB0 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2EB1 23                   inc     HL
2784+ 2EB2 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2EB3 C3 4B 2F             jp      SVSTAD          ; Save address and do function
2786+ 2EB6
2787+ 2EB6 CD 0C 2F     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2EB9 D5                   push    DE              ; Save function pointer address
2789+ 2EBA CD 62 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2EBD CD 8E 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2EC0 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2EC1 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2EC2 23                   inc     HL
2794+ 2EC3 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2EC4 23                   inc     HL
2796+ 2EC5 7A                   ld      A,D             ; And function DEFined?
2797+ 2EC6 B3                   or      E
2798+ 2EC7 CA BD 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2ECA 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2ECB 23                   inc     HL
2801+ 2ECC 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2ECD 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2ECE E5                   push    HL              ; Save it
2804+ 2ECF 2A 53 82             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2ED2 E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2ED3 22 53 82             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2ED6 2A 57 82             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2ED9 E5                   push    HL              ; Save it
2809+ 2EDA 2A 55 82             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2EDD E5                   push    HL              ; Save it
2811+ 2EDE 21 55 82             ld      HL,FNARG        ; HL = Value of argument
2812+ 2EE1 D5                   push    DE              ; Save FN code string address
2813+ 2EE2 CD F0 38             call    FPTHL           ; Move FPREG to argument
2814+ 2EE5 E1                   pop     HL              ; Get FN code string address
2815+ 2EE6 CD 8B 2A             call    GETNUM          ; Get value from function
2816+ 2EE9 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2EEA CD FA 25             call    GETCHR          ; Get next character
2818+ 2EED C2 B1 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2EF0 E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2EF1 22 55 82             ld      (FNARG),HL      ; Restore it
2821+ 2EF4 E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2EF5 22 57 82             ld      (FNARG+2),HL    ; Restore it
2823+ 2EF8 E1                   pop     HL              ; Get name of old arg
2824+ 2EF9 22 53 82             ld      (FNRGNM),HL     ; Restore it
2825+ 2EFC E1                   pop     HL              ; Restore code string address
2826+ 2EFD C9                   ret
2827+ 2EFE
2828+ 2EFE E5           IDTEST: push    HL              ; Save code string address
2829+ 2EFF 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
2830+ 2F02 23                   inc     HL              ; -1 means direct statement
2831+ 2F03 7C                   ld      A,H
2832+ 2F04 B5                   or      L
2833+ 2F05 E1                   pop     HL              ; Restore code string address
2834+ 2F06 C0                   ret     NZ              ; Return if in program
2835+ 2F07 1E 16                ld      E,ID            ; ?ID Error
2836+ 2F09 C3 CB 20             jp      ERROR
2837+ 2F0C
2838+ 2F0C CD B1 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2F0F B9                   defb    ZFN             ; "FN" token
2840+ 2F10 3E 80                ld      A,$80
2841+ 2F12 32 DA 81             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2F15 B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2F16 47                   ld      B,A             ; in first byte of name
2844+ 2F17 CD 9F 2C             call    GTFNAM          ; Get FN name
2845+ 2F1A C3 8E 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2F1D
2847+ 2F1D CD 8E 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2F20 CD 3D 3A             call    NUMASC          ; Turn number into text
2849+ 2F23 CD 51 2F     STR1:   call    CRTST           ; Create string entry for it
2850+ 2F26 CD D6 30             call    GSTRCU          ; Current string to pool
2851+ 2F29 01 31 31             ld      BC,TOPOOL       ; Save in string pool
2852+ 2F2C C5                   push    BC              ; Save address on stack
2853+ 2F2D
2854+ 2F2D 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2F2E 23                   inc     HL
2856+ 2F2F 23                   inc     HL
2857+ 2F30 E5                   push    HL              ; Save pointer to string
2858+ 2F31 CD AC 2F             call    TESTR           ; See if enough string space
2859+ 2F34 E1                   pop     HL              ; Restore pointer to string
2860+ 2F35 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2F36 23                   inc     HL
2862+ 2F37 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2F38 CD 45 2F             call    CRTMST          ; Create string entry
2864+ 2F3B E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2F3C 6F                   ld      L,A             ; Length of string
2866+ 2F3D CD C9 30             call    TOSTRA          ; Move to string area
2867+ 2F40 D1                   pop     DE              ; Restore pointer to MSB
2868+ 2F41 C9                   ret
2869+ 2F42
2870+ 2F42 CD AC 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2F45 21 CE 81     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2F48 E5                   push    HL              ; Save it
2873+ 2F49 77                   ld      (HL),A          ; Save length of string
2874+ 2F4A 23                   inc     HL
2875+ 2F4B 23           SVSTAD: inc     HL
2876+ 2F4C 73                   ld      (HL),E          ; Save LSB of address
2877+ 2F4D 23                   inc     HL
2878+ 2F4E 72                   ld      (HL),D          ; Save MSB of address
2879+ 2F4F E1                   pop     HL              ; Restore pointer
2880+ 2F50 C9                   ret
2881+ 2F51
2882+ 2F51 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F52 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F54 50                   ld      D,B             ; Quote to D
2885+ 2F55 E5           DTSTR:  push    HL              ; Save start
2886+ 2F56 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F58 23           QTSTLP: inc     HL              ; Move on
2888+ 2F59 7E                   ld      A,(HL)          ; Get byte
2889+ 2F5A 0C                   inc     C               ; Count bytes
2890+ 2F5B B7                   or      A               ; End of line?
2891+ 2F5C CA 67 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F5F BA                   cp      D               ; Terminator D found?
2893+ 2F60 CA 67 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F63 B8                   cp      B               ; Terminator B found?
2895+ 2F64 C2 58 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F67 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F69 CC FA 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F6C E3                   ex      (SP),HL         ; Starting quote
2899+ 2F6D 23                   inc     HL              ; First byte of string
2900+ 2F6E EB                   ex      DE,HL           ; To DE
2901+ 2F6F 79                   ld      A,C             ; Get length
2902+ 2F70 CD 45 2F             call    CRTMST          ; Create string entry
2903+ 2F73 11 CE 81     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F76 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F79 22 59 82             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F7C 3E 01                ld      A,$01
2907+ 2F7E 32 94 81             ld      (TYPE),A        ; Set type to string
2908+ 2F81 CD F3 38             call    DETHL4          ; Move string to pool
2909+ 2F84 CD AB 23             call    CPDEHL          ; Out of string pool?
2910+ 2F87 22 C0 81             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F8A E1                   pop     HL              ; Restore code string address
2912+ 2F8B 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F8C C0                   ret     NZ              ; Return if pool OK
2914+ 2F8D 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F8F C3 CB 20             jp      ERROR           ; String pool overflow
2916+ 2F92
2917+ 2F92 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F93 CD 51 2F     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F96 CD D6 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F99 CD E7 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F9C 1C                   inc     E               ; Length + 1
2922+ 2F9D 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F9E C8                   ret     Z               ; End of string
2924+ 2F9F 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2FA0 CD BC 23             call    OUTC            ; Output character in A
2926+ 2FA3 FE 0D                cp      CR              ; Return?
2927+ 2FA5 CC D1 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2FA8 03                   inc     BC              ; Next byte in string
2929+ 2FA9 C3 9D 2F             jp      PRSLP           ; More characters to output
2930+ 2FAC
2931+ 2FAC B7           TESTR:  or      A               ; Test if enough room
2932+ 2FAD 0E                   defb    $0E             ; No garbage collection done
2933+ 2FAE F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2FAF F5                   push    AF              ; Save status
2935+ 2FB0 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2FB3 EB                   ex      DE,HL           ; To DE
2937+ 2FB4 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2FB7 2F                   cpl                     ; Negate length (Top down)
2939+ 2FB8 4F                   ld      C,A             ; -Length to BC
2940+ 2FB9 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2FBB 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2FBC 23                   inc     HL              ; Plus one for 2's complement
2943+ 2FBD CD AB 23             call    CPDEHL          ; Below string RAM area?
2944+ 2FC0 DA CA 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2FC3 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2FC6 23                   inc     HL              ; Point to first byte of string
2947+ 2FC7 EB                   ex      DE,HL           ; Address to DE
2948+ 2FC8 F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2FC9 C9                   ret
2950+ 2FCA
2951+ 2FCA F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2FCB 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2FCD CA CB 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2FD0 BF                   cp      A               ; Flag garbage collect done
2955+ 2FD1 F5                   push    AF              ; Save status
2956+ 2FD2 01 AE 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2FD5 C5                   push    BC              ; Save for RETurn
2958+ 2FD6 2A 96 81     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2FD9 22 D2 81     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2FDC 21 00 00             ld      HL,$0000
2961+ 2FDF E5                   push    HL              ; Flag no string found
2962+ 2FE0 2A AD 80             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2FE3 E5                   push    HL              ; Save bottom of string space
2964+ 2FE4 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2FE7 EB           GRBLP:  ex      DE,HL
2966+ 2FE8 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2FEB EB                   ex      DE,HL
2968+ 2FEC CD AB 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2FEF 01 E7 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FF2 C2 3B 30             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FF5 2A 4B 82             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FF8 EB           SMPVAR: ex      DE,HL
2973+ 2FF9 2A 4D 82             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FFC EB                   ex      DE,HL
2975+ 2FFD CD AB 23             call    CPDEHL          ; All simple strings done?
2976+ 3000 CA 0E 30             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 3003 7E                   ld      A,(HL)          ; Get type of variable
2978+ 3004 23                   inc     HL
2979+ 3005 23                   inc     HL
2980+ 3006 B7                   or      A               ; "S" flag set if string
2981+ 3007 CD 3E 30             call    STRADD          ; See if string in string area
2982+ 300A C3 F8 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 300D
2984+ 300D C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 300E EB           ARRLP:  ex      DE,HL
2986+ 300F 2A 4F 82             ld      HL,(ARREND)     ; End of string arrays
2987+ 3012 EB                   ex      DE,HL
2988+ 3013 CD AB 23             call    CPDEHL          ; All string arrays done?
2989+ 3016 CA 64 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 3019 CD E7 38             call    LOADFP          ; Get array name to BCDE
2991+ 301C 7B                   ld      A,E             ; Get type of array
2992+ 301D E5                   push    HL              ; Save address of num of dim'ns
2993+ 301E 09                   add     HL,BC           ; Start of next array
2994+ 301F B7                   or      A               ; Test type of array
2995+ 3020 F2 0D 30             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 3023 22 D4 81             ld      (CUROPR),HL     ; Save address of next array
2997+ 3026 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 3027 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 3028 06 00                ld      B,$00
3000+ 302A 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 302B 09                   add     HL,BC
3002+ 302C 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 302D EB           GRBARY: ex      DE,HL
3004+ 302E 2A D4 81             ld      HL,(CUROPR)     ; Get address of next array
3005+ 3031 EB                   ex      DE,HL
3006+ 3032 CD AB 23             call    CPDEHL          ; Is this array finished?
3007+ 3035 CA 0E 30             jp      Z,ARRLP         ; Yes - Get next one
3008+ 3038 01 2D 30             ld      BC,GRBARY       ; Loop until array all done
3009+ 303B C5           STPOOL: push    BC              ; Save return address
3010+ 303C F6 80                or      $80             ; Flag string type
3011+ 303E 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 303F 23                   inc     HL
3013+ 3040 23                   inc     HL
3014+ 3041 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 3042 23                   inc     HL
3016+ 3043 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 3044 23                   inc     HL
3018+ 3045 F0                   ret     P               ; Not a string - Return
3019+ 3046 B7                   or      A               ; Set flags on string length
3020+ 3047 C8                   ret     Z               ; Null string - Return
3021+ 3048 44                   ld      B,H             ; Save variable pointer
3022+ 3049 4D                   ld      C,L
3023+ 304A 2A D2 81             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 304D CD AB 23             call    CPDEHL          ; String been done?
3025+ 3050 60                   ld      H,B             ; Restore variable pointer
3026+ 3051 69                   ld      L,C
3027+ 3052 D8                   ret     C               ; String done - Ignore
3028+ 3053 E1                   pop     HL              ; Return address
3029+ 3054 E3                   ex      (SP),HL         ; Lowest available string area
3030+ 3055 CD AB 23             call    CPDEHL          ; String within string area?
3031+ 3058 E3                   ex      (SP),HL         ; Lowest available string area
3032+ 3059 E5                   push    HL              ; Re-save return address
3033+ 305A 60                   ld      H,B             ; Restore variable pointer
3034+ 305B 69                   ld      L,C
3035+ 305C D0                   ret     NC              ; Outside string area - Ignore
3036+ 305D C1                   pop     BC              ; Get return , Throw 2 away
3037+ 305E F1                   pop     AF              ;
3038+ 305F F1                   pop     AF              ;
3039+ 3060 E5                   push    HL              ; Save variable pointer
3040+ 3061 D5                   push    DE              ; Save address of current
3041+ 3062 C5                   push    BC              ; Put back return address
3042+ 3063 C9                   ret                     ; Go to it
3043+ 3064
3044+ 3064 D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 3065 E1                   pop     HL              ;
3046+ 3066 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3067 B4                   or      H
3048+ 3068 C8                   ret     Z               ; No more to do - Return
3049+ 3069 2B                   dec     HL
3050+ 306A 46                   ld      B,(HL)          ; MSB of address of string
3051+ 306B 2B                   dec     HL
3052+ 306C 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 306D E5                   push    HL              ; Save variable address
3054+ 306E 2B                   dec     HL
3055+ 306F 2B                   dec     HL
3056+ 3070 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 3071 26 00                ld      H,$00
3058+ 3073 09                   add     HL,BC           ; Address of end of string+1
3059+ 3074 50                   ld      D,B             ; String address to DE
3060+ 3075 59                   ld      E,C
3061+ 3076 2B                   dec     HL              ; Last byte in string
3062+ 3077 44                   ld      B,H             ; Address to BC
3063+ 3078 4D                   ld      C,L
3064+ 3079 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 307C CD 60 20             call    MOVSTR          ; Move string to new address
3066+ 307F E1                   pop     HL              ; Restore variable address
3067+ 3080 71                   ld      (HL),C          ; Save new LSB of address
3068+ 3081 23                   inc     HL
3069+ 3082 70                   ld      (HL),B          ; Save new MSB of address
3070+ 3083 69                   ld      L,C             ; Next string area+1 to HL
3071+ 3084 60                   ld      H,B
3072+ 3085 2B                   dec     HL              ; Next string area address
3073+ 3086 C3 D9 2F             jp      GARBLP          ; Look for more strings
3074+ 3089
3075+ 3089 C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 308A E5                   push    HL              ;
3077+ 308B 2A 59 82             ld      HL,(FPREG)      ; Get first string
3078+ 308E E3                   ex      (SP),HL         ; Save first string
3079+ 308F CD 14 2B             call    OPRND           ; Get second string
3080+ 3092 E3                   ex      (SP),HL         ; Restore first string
3081+ 3093 CD 8F 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3096 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3097 E5                   push    HL              ; Save first string
3084+ 3098 2A 59 82             ld      HL,(FPREG)      ; Get second string
3085+ 309B E5                   push    HL              ; Save second string
3086+ 309C 86                   add     A,(HL)          ; Add length of second string
3087+ 309D 1E 1C                ld      E,LS            ; ?LS Error
3088+ 309F DA CB 20             jp      C,ERROR         ; String too long - Error
3089+ 30A2 CD 42 2F             call    MKTMST          ; Make temporary string
3090+ 30A5 D1                   pop     DE              ; Get second string to DE
3091+ 30A6 CD DA 30             call    GSTRDE          ; Move to string pool if needed
3092+ 30A9 E3                   ex      (SP),HL         ; Get first string
3093+ 30AA CD D9 30             call    GSTRHL          ; Move to string pool if needed
3094+ 30AD E5                   push    HL              ; Save first string
3095+ 30AE 2A D0 81             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 30B1 EB                   ex      DE,HL           ; To DE
3097+ 30B2 CD C0 30             call    SSTSA           ; First string to string area
3098+ 30B5 CD C0 30             call    SSTSA           ; Second string to string area
3099+ 30B8 21 A9 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 30BB E3                   ex      (SP),HL         ; Save return,get code string
3101+ 30BC E5                   push    HL              ; Save code string address
3102+ 30BD C3 73 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 30C0
3104+ 30C0 E1           SSTSA:  pop     HL              ; Return address
3105+ 30C1 E3                   ex      (SP),HL         ; Get string block,save return
3106+ 30C2 7E                   ld      A,(HL)          ; Get length of string
3107+ 30C3 23                   inc     HL
3108+ 30C4 23                   inc     HL
3109+ 30C5 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 30C6 23                   inc     HL
3111+ 30C7 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 30C8 6F                   ld      L,A             ; Length to L
3113+ 30C9 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 30CA 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 30CB C8                   ret     Z               ; End of string - Return
3116+ 30CC 0A                   ld      A,(BC)          ; Get source
3117+ 30CD 12                   ld      (DE),A          ; Save destination
3118+ 30CE 03                   inc     BC              ; Next source
3119+ 30CF 13                   inc     DE              ; Next destination
3120+ 30D0 C3 CA 30             jp      TSALP           ; Loop until string moved
3121+ 30D3
3122+ 30D3 CD 8F 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 30D6 2A 59 82     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 30D9 EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 30DA CD F4 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 30DD EB                   ex      DE,HL           ; Restore DE
3127+ 30DE C0                   ret     NZ              ; No - Return
3128+ 30DF D5                   push    DE              ; Save string
3129+ 30E0 50                   ld      D,B             ; String block address to DE
3130+ 30E1 59                   ld      E,C
3131+ 30E2 1B                   dec     DE              ; Point to length
3132+ 30E3 4E                   ld      C,(HL)          ; Get string length
3133+ 30E4 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 30E7 CD AB 23             call    CPDEHL          ; Last one in string area?
3135+ 30EA C2 F2 30             jp      NZ,POPHL        ; No - Return
3136+ 30ED 47                   ld      B,A             ; Clear B (A=0)
3137+ 30EE 09                   add     HL,BC           ; Remove string from str' area
3138+ 30EF 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30F2 E1           POPHL:  pop     HL              ; Restore string
3140+ 30F3 C9                   ret
3141+ 30F4
3142+ 30F4 2A C0 81     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30F7 2B                   dec     HL              ; Back
3144+ 30F8 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30F9 2B                   dec     HL              ; Back
3146+ 30FA 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30FB 2B                   dec     HL              ; Back
3148+ 30FC 2B                   dec     HL              ; Back
3149+ 30FD CD AB 23             call    CPDEHL          ; String last in string pool?
3150+ 3100 C0                   ret     NZ              ; Yes - Leave it
3151+ 3101 22 C0 81             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 3104 C9                   ret
3153+ 3105
3154+ 3105 01 84 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 3108 C5                   push    BC              ; Save address
3156+ 3109 CD D3 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 310C AF                   xor     A
3158+ 310D 57                   ld      D,A             ; Clear D
3159+ 310E 32 94 81             ld      (TYPE),A        ; Set type to numeric
3160+ 3111 7E                   ld      A,(HL)          ; Get length of string
3161+ 3112 B7                   or      A               ; Set status flags
3162+ 3113 C9                   ret
3163+ 3114
3164+ 3114 01 84 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 3117 C5                   push    BC              ; Save address
3166+ 3118 CD 09 31     GTFLNM: call    GETLEN          ; Get length of string
3167+ 311B CA C5 26             jp      Z,FCERR         ; Null string - Error
3168+ 311E 23                   inc     HL
3169+ 311F 23                   inc     HL
3170+ 3120 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 3121 23                   inc     HL
3172+ 3122 56                   ld      D,(HL)          ; Get MSB of address
3173+ 3123 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 3124 C9                   ret
3175+ 3125
3176+ 3125 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 3127 CD 42 2F             call    MKTMST          ; Make a temporary string
3178+ 312A CD 14 33             call    MAKINT          ; Make it integer A
3179+ 312D 2A D0 81             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 3130 73                   ld      (HL),E          ; Save character
3181+ 3131 C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 3132 C3 73 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 3135
3184+ 3135 CD C4 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 3138 AF                   xor     A               ; Start at first byte in string
3186+ 3139 E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 313A 4F                   ld      C,A             ; Starting position in string
3188+ 313B E5           MID1:   push    HL              ; Save string block address
3189+ 313C 7E                   ld      A,(HL)          ; Get length of string
3190+ 313D B8                   cp      B               ; Compare with number given
3191+ 313E DA 43 31             jp      C,ALLFOL        ; All following bytes required
3192+ 3141 78                   ld      A,B             ; Get new length
3193+ 3142 11                   defb    $11             ; Skip "ld C,0"
3194+ 3143 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 3145 C5                   push    BC              ; Save position in string
3196+ 3146 CD AC 2F             call    TESTR           ; See if enough string space
3197+ 3149 C1                   pop     BC              ; Get position in string
3198+ 314A E1                   pop     HL              ; Restore string block address
3199+ 314B E5                   push    HL              ; And re-save it
3200+ 314C 23                   inc     HL
3201+ 314D 23                   inc     HL
3202+ 314E 46                   ld      B,(HL)          ; Get LSB of address
3203+ 314F 23                   inc     HL
3204+ 3150 66                   ld      H,(HL)          ; Get MSB of address
3205+ 3151 68                   ld      L,B             ; HL = address of string
3206+ 3152 06 00                ld      B,$00           ; BC = starting address
3207+ 3154 09                   add     HL,BC           ; Point to that byte
3208+ 3155 44                   ld      B,H             ; BC = source string
3209+ 3156 4D                   ld      C,L
3210+ 3157 CD 45 2F             call    CRTMST          ; Create a string entry
3211+ 315A 6F                   ld      L,A             ; Length of new string
3212+ 315B CD C9 30             call    TOSTRA          ; Move string to string area
3213+ 315E D1                   pop     DE              ; Clear stack
3214+ 315F CD DA 30             call    GSTRDE          ; Move to string pool if needed
3215+ 3162 C3 73 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 3165
3217+ 3165
3218+ 3165              ; INSTR statement - look for a string inside another string
3219+ 3165              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 3165              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 3165              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 3165              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 3165              LNS1    equ     TMPBFR1
3224+ 3165              ADRS1   equ     TMPBFR2
3225+ 3165              LNS2    equ     TMPBFR3
3226+ 3165              ADRS2   equ     TMPBFR4
3227+ 3165              PT      equ     VIDEOBUFF
3228+ 3165              PT1     equ     VIDEOBUFF+2
3229+ 3165              PT2     equ     VIDEOBUFF+4
3230+ 3165              TP      equ     VIDEOBUFF+6
3231+ 3165              TF      equ     VIDEOBUFF+8
3232+ 3165 CD B1 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 3168 28                   defb    '('
3234+ 3169 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 316A CD FA 25             call    GETCHR          ; check if something follows
3236+ 316D CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 3170 CD 9D 2A             call    EVAL            ; Evaluate expression
3238+ 3173 CD 8F 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3176 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 3179 CD D6 30             call    GSTRCU          ; check that a string follows
3241+ 317C CD E7 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 317F ED 53 05 82          ld      (LNS1),DE       ; store values into
3243+ 3183 ED 43 07 82          ld      (ADRS1),BC      ; temp buffers
3244+ 3187 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 318A CD B1 23             call    CHKSYN          ; Make sure ',' follows
3246+ 318D 2C                   defb    ','
3247+ 318E 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 318F CD FA 25             call    GETCHR          ; check if something follows
3249+ 3192 CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 3195 CD 9D 2A             call    EVAL            ; Evaluate expression
3251+ 3198 CD 8F 2A             call    TSTSTR          ; Make sure it's a string
3252+ 319B 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 319E CD D6 30             call    GSTRCU          ; check that a string follows
3254+ 31A1 CD E7 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 31A4 ED 53 09 82          ld      (LNS2),DE       ; store values into
3256+ 31A8 ED 43 0B 82          ld      (ADRS2),BC      ; temp buffers
3257+ 31AC 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 31AF CD B1 23             call    CHKSYN          ; make sure ")" follows
3259+ 31B2 29                   defb    ')'
3260+ 31B3 E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 31B4 FD E1                pop     IY              ; ...into IY
3262+ 31B6 AF                   xor     A               ; reset 10 RAM cells
3263+ 31B7 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 31B9 21 0D 82             ld      HL,PT           ; first cell
3265+ 31BC 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 31BD 23                   inc     HL              ; next cell
3267+ 31BE 10 FC                djnz    EMPTINS         ; repeat
3268+ 31C0 ED 5B 09 82          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 31C4 2A 05 82             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 31C7 CD 45 4D             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 31CA DA 3F 32             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 31CD AF           RPTINST:xor     A               ; reset...
3273+ 31CE 32 13 82             ld      (TP),A          ; ...TP...
3274+ 31D1 32 15 82             ld      (TF),A          ; ...and TF
3275+ 31D4 ED 4B 0D 82          ld      BC,(PT)         ; pointer to S1
3276+ 31D8 2A 07 82             ld      HL,(ADRS1)      ; first cell of S1
3277+ 31DB 09                   add     HL,BC           ; get current position into RAM
3278+ 31DC 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 31DD 2A 0B 82             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 31E0 BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 31E1 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 31E3 3A 0D 82             ld      A,(PT)          ; load current PT
3283+ 31E6 32 13 82             ld      (TP),A          ; TP=PT
3284+ 31E9 32 0F 82             ld      (PT1),A         ; P1=PT
3285+ 31EC AF                   xor     A               ; set...
3286+ 31ED 32 11 82             ld      (PT2),A         ; ...PT2=0
3287+ 31F0 3C                   inc     A               ;
3288+ 31F1 32 15 82             ld      (TF),A          ; set TF=1
3289+ 31F4 ED 4B 0F 82  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31F8 2A 07 82             ld      HL,(ADRS1)      ; load address of S1
3291+ 31FB 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31FC 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31FD ED 4B 11 82          ld      BC,(PT2)        ; load pointer PT2
3294+ 3201 2A 0B 82             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 3204 09                   add     HL,BC           ; find S2(PT2)
3296+ 3205 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 3206 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 3208 21 0F 82             ld      HL,PT1
3299+ 320B 34                   inc     (HL)            ; increment PT1
3300+ 320C 3A 11 82             ld      A,(PT2)
3301+ 320F 3C                   inc     A               ; increment PT2
3302+ 3210 32 11 82             ld      (PT2),A
3303+ 3213 CA 1D 32             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 3216 21 09 82             ld      HL,LNS2         ; len(S2)
3305+ 3219 BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 321A DA F4 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 321D 3A 15 82     CNT1INS:ld      A,(TF)          ; check TF
3308+ 3220 A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 3221 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 3223 2A 05 82             ld      HL,(LNS1)       ; load len(S1)
3311+ 3226 ED 4B 09 82          ld      BC,(LNS2)       ; load len(S2)
3312+ 322A ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 322C ED 5B 0D 82          ld      DE,(PT)         ; load pointer
3314+ 3230 1C                   inc     E               ; PT=PT+1
3315+ 3231 ED 53 0D 82          ld      (PT),DE         ; store new value
3316+ 3235 EB                   ex      DE,HL           ; invert registers
3317+ 3236 CD 45 4D             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 3239 DA CD 31             jp      C,RPTINST       ; repeat if <
3319+ 323C CA CD 31             jp      Z,RPTINST       ; repeat if =
3320+ 323F 3A 15 82     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 3242 A7                   and     A               ; is it 0?
3322+ 3243 CA 4A 32             jp      Z,LVINSTR       ; yes, return 0
3323+ 3246 3A 13 82             ld      A,(TP)          ; return TP...
3324+ 3249 3C                   inc     A               ; ...incremented by 1
3325+ 324A E1           LVINSTR:pop     HL              ; drop original return point
3326+ 324B FD E5                push    IY              ; load current string address from IY into stack
3327+ 324D 11 76 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 3250 D5                   push    DE              ; ...saved on stack
3329+ 3251 C3 84 2E             jp      PASSA           ; return TP
3330+ 3254 AF           CNTZIN: xor     A               ; set...
3331+ 3255 32 15 82             ld      (TF),A          ; TF=0
3332+ 3258 C3 1D 32             jp      CNT1INS         ; continue
3333+ 325B
3334+ 325B
3335+ 325B              ; returns the right portion of a string
3336+ 325B CD C4 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 325E D1                   pop     DE              ; Get string length
3338+ 325F D5                   push    DE              ; And re-save
3339+ 3260 1A                   ld      A,(DE)          ; Get length
3340+ 3261 90                   sub     B               ; Move back N bytes
3341+ 3262 C3 39 31             jp      RIGHT1          ; Go and get sub-string
3342+ 3265
3343+ 3265              ; returns a piece of a string
3344+ 3265 EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3266 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3267 CD C9 32             call    MIDNUM          ; Get number supplied
3347+ 326A 04                   inc     B               ; Is it character zero?
3348+ 326B 05                   dec     B
3349+ 326C CA C5 26             jp      Z,FCERR         ; Yes - Error
3350+ 326F C5                   push    BC              ; Save starting position
3351+ 3270 1E FF                ld      E,$FF           ; All of string
3352+ 3272 FE 29                cp      ')'             ; Any length given?
3353+ 3274 CA 7E 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3277 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3355+ 327A 2C                   defb    ','
3356+ 327B CD 11 33             call    GETINT          ; Get integer 0-255
3357+ 327E CD B1 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 3281 29                   defb    ')'
3359+ 3282 F1                   pop     AF              ; Restore starting position
3360+ 3283 E3                   ex      (SP),HL         ; Get string,save code string
3361+ 3284 01 3B 31             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3287 C5                   push    BC              ; Save for return
3363+ 3288 3D                   dec     A               ; Starting position-1
3364+ 3289 BE                   cp      (HL)            ; Compare with length
3365+ 328A 06 00                ld      B,$00           ; Zero bytes length
3366+ 328C D0                   ret     NC              ; Null string if start past end
3367+ 328D 4F                   ld      C,A             ; Save starting position-1
3368+ 328E 7E                   ld      A,(HL)          ; Get length of string
3369+ 328F 91                   sub     C               ; Subtract start
3370+ 3290 BB                   cp      E               ; Enough string for it?
3371+ 3291 47                   ld      B,A             ; Save maximum length available
3372+ 3292 D8                   ret     C               ; Truncate string if needed
3373+ 3293 43                   ld      B,E             ; Set specified length
3374+ 3294 C9                   ret                     ; Go and create string
3375+ 3295
3376+ 3295
3377+ 3295              ; return the value of a numeric string
3378+ 3295 CD 09 31     VAL:    call    GETLEN          ; Get length of string
3379+ 3298 CA 67 36             jp      Z,RESZER        ; Result zero
3380+ 329B 5F                   ld      E,A             ; Save length
3381+ 329C 23                   inc     HL
3382+ 329D 23                   inc     HL
3383+ 329E 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 329F 23                   inc     HL
3385+ 32A0 66                   ld      H,(HL)          ; Get MSB of address
3386+ 32A1 6F                   ld      L,A             ; HL = String address
3387+ 32A2 E5                   push    HL              ; Save string address
3388+ 32A3 19                   add     HL,DE
3389+ 32A4 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 32A5 72                   ld      (HL),D          ; Zero it to terminate
3391+ 32A6 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 32A7 C5                   push    BC              ; Save end+1 byte
3393+ 32A8 7E                   ld      A,(HL)          ; Get starting byte
3394+ 32A9 FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 32AB C2 B3 32             jp      NZ,VAL1
3396+ 32AE CD 77 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 32B1 18 0D                jr      VAL3
3398+ 32B3 FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 32B5 C2 BD 32             jp      NZ,VAL2
3400+ 32B8 CD E7 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 32BB 18 03                jr      VAL3
3402+ 32BD CD 9F 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 32C0 C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 32C1 E1                   pop     HL              ; Restore end+1 address
3405+ 32C2 70                   ld      (HL),B          ; Put back original byte
3406+ 32C3 C9                   ret
3407+ 32C4
3408+ 32C4 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 32C5 CD B1 23             call    CHKSYN          ; Make sure ")" follows
3410+ 32C8 29                   defb    ')'
3411+ 32C9 C1           MIDNUM: pop     BC              ; Get return address
3412+ 32CA D1                   pop     DE              ; Get number supplied
3413+ 32CB C5                   push    BC              ; Re-save return address
3414+ 32CC 43                   ld      B,E             ; Number to B
3415+ 32CD C9                   ret
3416+ 32CE
3417+ 32CE CD 14 33     INP:    call    MAKINT          ; Make it integer A
3418+ 32D1 32 A0 80             ld      (INPORT),A      ; Set input port
3419+ 32D4 CD 9F 80             call    INPSUB          ; Get input from port
3420+ 32D7 C3 84 2E             jp      PASSA           ; Return integer A
3421+ 32DA
3422+ 32DA CD FE 32     POUT:   call    SETIO           ; Set up port number
3423+ 32DD C3 67 80             jp      OUTSUB          ; Output data and return
3424+ 32E0
3425+ 32E0 CD FE 32     WAIT:   call    SETIO           ; Set up port number
3426+ 32E3 F5                   push    AF              ; Save AND mask
3427+ 32E4 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 32E6 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 32E7 CD FA 25             call    GETCHR          ; Get next character
3430+ 32EA CA F4 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 32ED CD B1 23             call    CHKSYN          ; Make sure ',' follows
3432+ 32F0 2C                   defb    ','
3433+ 32F1 CD 11 33             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32F4 C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32F5 CD 9F 80     WAITLP: call    INPSUB          ; Get input
3436+ 32F8 AB                   xor     E               ; Flip selected bits
3437+ 32F9 A0                   and     B               ; Result non-zero?
3438+ 32FA CA F5 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32FD C9                   ret
3440+ 32FE
3441+ 32FE CD 11 33     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 3301 32 A0 80             ld      (INPORT),A      ; Set input port
3443+ 3304 32 68 80             ld      (OTPORT),A      ; Set output port
3444+ 3307 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3445+ 330A 2C                   defb    ','
3446+ 330B C3 11 33             jp      GETINT          ; Get integer 0-255 and return
3447+ 330E
3448+ 330E CD FA 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 3311 CD 8B 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 3314 CD AA 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 3317 7A                   ld      A,D             ; Get MSB of number
3452+ 3318 B7                   or      A               ; Zero?
3453+ 3319 C2 C5 26             jp      NZ,FCERR        ; No - Error
3454+ 331C 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 331D CD FA 25             call    GETCHR          ; Get next character
3456+ 3320 7B                   ld      A,E             ; Get number to A
3457+ 3321 C9                   ret
3458+ 3322
3459+ 3322
3460+ 3322              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 3322              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 3322 CD 8B 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 3325 CD B0 26             call    DEINT           ; get integer -32768 to 32767
3464+ 3328 7B                   ld      A,E             ; check if address is 0
3465+ 3329 B2                   or      D
3466+ 332A 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 332C F3           DISNMI: di                      ; disable INTs
3468+ 332D CD 59 33             call    NMIDINT         ; disable VDP INT
3469+ 3330 E5                   push    HL              ; store HL
3470+ 3331 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 3334 22 61 80             ld      (NMIUSR),HL     ; store RETN
3472+ 3337 AF                   xor     A
3473+ 3338 32 63 80             ld      (NMIUSR+2),A    ; "NOP"
3474+ 333B 18 11                jr      NMI2            ; execute the last part of code
3475+ 333D E5           NM1:    push    HL              ; store current HL
3476+ 333E EB                   ex      DE,HL           ; move address argument into HL
3477+ 333F F3                   di                      ; disable INTs
3478+ 3340 CD 59 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 3343 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 3345 32 61 80             ld      (NMIUSR),A      ; store it
3481+ 3348 22 62 80             ld      (NMIUSR+1),HL   ; store address
3482+ 334B CD 52 33             call    NMIEINT         ; re-enable VDP INT
3483+ 334E FB           NMI2:   ei                      ; re-enable INTS
3484+ 334F 00                   nop                     ; wait for INTs
3485+ 3350 E1                   pop    HL               ; retrieve HL
3486+ 3351 C9                   ret                     ; return to caller
3487+ 3352              ; enable VDP INT
3488+ 3352 CD 68 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 3355 F6 20                or      %00100000       ; enable VDP INT
3490+ 3357 18 03                jr      NMIINT          ; rest of code is shared
3491+ 3359              ; disable VDP INT
3492+ 3359 CD 68 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 335C D5           NMIINT: push    DE              ; store DE
3494+ 335D 5F                   ld      E,A             ; move value into E
3495+ 335E 3E 01                ld      A,$01           ; VREG #1
3496+ 3360 F3                   di                      ; disable INTs
3497+ 3361 CD D1 06             call    WRITE_VREG      ; disable VDP INT
3498+ 3364 FB                   ei                      ; re-enable INTs
3499+ 3365 00                   nop                     ; wait for INTs being enabled
3500+ 3366 D1                   pop     DE              ; retrieve DE
3501+ 3367 C9                   ret                     ; return to caller
3502+ 3368
3503+ 3368              ; load VREG #1 setting for current screen mode and return it into A
3504+ 3368 E5           NMIVR1: push    HL              ; store HL
3505+ 3369 D5                   push    DE              ; store DE
3506+ 336A 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
3507+ 336D 87                   add     A,A             ; multiply A by 8...
3508+ 336E 87                   add     A,A             ; ...so that reg. A can points..
3509+ 336F 87                   add     A,A             ; to the correct settings
3510+ 3370 3C                   inc     A               ; need to change VREG 1
3511+ 3371 5F                   ld      E,A             ; copy A into E
3512+ 3372 16 00                ld      D,$00           ; reset D
3513+ 3374 21 43 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3377 19                   add     HL,DE           ; ...for current screen mode
3515+ 3378 7E                   ld      A,(HL)          ; load current setting
3516+ 3379 D1                   pop     DE              ; retrieve DE
3517+ 337A E1                   pop     HL              ; retrieve HL
3518+ 337B C9                   ret                     ; return to caller
3519+ 337C
3520+ 337C              ; execute a machine language routine, eventually passing a param into A
3521+ 337C CD 8B 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 337F CD B0 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 3382 ED 53 07 82          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3386 AF                   xor     A               ; reset A
3525+ 3387 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 338A 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 338B CD FA 25             call    GETCHR          ; check next character
3528+ 338E 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 3390 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3530+ 3393 2C                   defb    ','
3531+ 3394 CD 11 33             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3397 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 339A 3A 05 82     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 339D ED 5B 07 82          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 33A1 E5                   push    HL              ; save code string address
3536+ 33A2 EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 33A3 11 A8 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 33A6 D5                   push    DE              ; store into stack
3539+ 33A7 E9                   jp      (HL)            ; call user routine
3540+ 33A8 E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 33A9 C9                   ret                     ; return to caller
3542+ 33AA
3543+ 33AA
3544+ 33AA              ; read the contents of a RAM location
3545+ 33AA CD B0 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 33AD 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 33AE C3 84 2E             jp      PASSA           ; Return into A
3548+ 33B1
3549+ 33B1              ; read the contents of a VRAM location
3550+ 33B1 CD B0 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 33B4 EB                   ex      DE,HL           ; Copy param into HL
3552+ 33B5 F3                   di                      ; Disable interrupts
3553+ 33B6 CD A7 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 33B9 FB                   ei                      ; Re-enable interrupts
3555+ 33BA EB                   ex      DE,HL           ; Restore HL
3556+ 33BB C3 84 2E             jp      PASSA           ; Return value into A
3557+ 33BE
3558+ 33BE              ; recover params for POKE/VPOKE commands
3559+ 33BE              ; returns address into DE and byte to be written into A
3560+ 33BE CD 8B 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 33C1 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 33C4 ED 53 05 82          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 33C8 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3564+ 33CB 2C                   defb    ','
3565+ 33CC CD 11 33             call    GETINT          ; Get integer 0-255
3566+ 33CF ED 5B 05 82          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 33D3 C9                   ret                     ; Return to caller
3568+ 33D4
3569+ 33D4              ; write a byte into a RAM location
3570+ 33D4 CD BE 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 33D7 12                   ld      (DE),A          ; Load it into memory
3572+ 33D8 C9                   ret
3573+ 33D9
3574+ 33D9              ; write a byte into a VRAM location
3575+ 33D9 CD BE 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 33DC EB                   ex      DE,HL           ; Copy address into HL
3577+ 33DD F3                   di                      ; Disable interrupts
3578+ 33DE CD BC 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 33E1 FB                   ei                      ; Re-enable interrupts
3580+ 33E2 EB                   ex      DE,HL           ; Restore HL
3581+ 33E3 C9                   ret                     ; Return to caller
3582+ 33E4
3583+ 33E4              ; position the cursor at a specific X,Y location onto screen
3584+ 33E4 CD 11 33     LOCATE: call    GETINT          ; get the first param into A
3585+ 33E7 E5                   push    HL              ; store HL
3586+ 33E8 21 F5 81             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 33EB 5E                   ld      E,(HL)          ; load screen width into E
3588+ 33EC E1                   pop     HL              ; restore HL
3589+ 33ED BB                   cp      E               ; compare witdh with param
3590+ 33EE D2 C5 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 33F1 32 05 82             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33F4 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33F7 2C                   defb    ','
3594+ 33F8 CD 11 33             call    GETINT          ; Get the second param into A
3595+ 33FB E5                   push    HL              ; store HL
3596+ 33FC 21 F6 81             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33FF 5E                   ld      E,(HL)          ; load screen width into A
3598+ 3400 E1                   pop     HL              ; restore HL
3599+ 3401 BB                   cp      E               ; compare witdh with param
3600+ 3402 D2 C5 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 3405 32 FD 81             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 3408 3A 05 82             ld      A,(TMPBFR1)     ; recover the new X
3603+ 340B 32 FC 81             ld      (SCR_CUR_NX),A  ; store new X
3604+ 340E E5                   push    HL              ; store HL
3605+ 340F F3                   di                      ; disable INTs
3606+ 3410 CD ED 06             call    MOVCRS          ; move cursor to new location
3607+ 3413 FB                   ei                      ; re-enable INTs
3608+ 3414 E1                   pop     HL              ; restore HL
3609+ 3415 C9                   ret                     ; return to caller
3610+ 3416
3611+ 3416              ; write a byte into one of the PSG registers
3612+ 3416 CD 11 33     SREG:   call    GETINT          ; Get register number back into A
3613+ 3419 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 341B D2 C5 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 341E 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 3421 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3617+ 3424 2C                   defb    ','
3618+ 3425 CD 11 33             call    GETINT          ; get second value (0-255), returned into A
3619+ 3428 5F                   ld      E,A             ; store value into E
3620+ 3429 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 342C F3                   di                      ; disable INTs
3622+ 342D 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 342F ED 79                out     (C),A           ; send register # to PSG
3624+ 3431 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 3433 ED 59                out     (C),E           ; send byte to write into selected register
3626+ 3435 FB                   ei                      ; re-enable INTs
3627+ 3436 C9                   ret                     ; return to caller
3628+ 3437
3629+ 3437              ; VOLUME ch,vol
3630+ 3437              ; set the volume for the audio channels
3631+ 3437              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 3437 CD 11 33     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 343A FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 343C D2 C5 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 343F 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 3442 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3637+ 3445 2C                   defb    ','
3638+ 3446 CD 11 33             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 3449 FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 344B D2 C5 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 344E 57                   ld      D,A             ; store volume into D
3642+ 344F 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 3452 A7                   and     A               ; is it 0? (0=every channel)
3644+ 3453 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 3455 06 03                ld      B,$03           ; yes, set every channel
3646+ 3457 1E 08                ld      E,$08           ; register volume of first channel
3647+ 3459 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 345B ED 59                out     (C),E           ; set register #
3649+ 345D 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 345F ED 51                out     (C),D           ; send volume
3651+ 3461 1C                   inc     E               ; next register
3652+ 3462 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 3464 C9                   ret                     ; return to caller
3654+ 3465 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3467 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 3469 ED 79                out     (C),A           ; set register
3657+ 346B 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 346D ED 51                out     (C),D           ; send volume level
3659+ 346F C9                   ret                     ; return to caller
3660+ 3470
3661+ 3470              ; SOUND ch,tone,dur
3662+ 3470              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 3470              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 3470              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 3470 CD 11 33     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 3473 A7                   and     A               ; is it zero?
3667+ 3474 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3476 E5                   push    HL              ; store HL
3669+ 3477 F3                   di                      ; disable INTs
3670+ 3478 CD B5 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 347B FB                   ei                      ; re-enable INTs
3672+ 347C E1                   pop     HL              ; retrieve HL
3673+ 347D C9                   ret                     ; return to caller
3674+ 347E 32 05 82     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 3481 FE 04                cp      $04             ; is channel >3?
3676+ 3483 D2 02 35             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3486 CD B1 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 3489 2C                   defb    ','
3679+ 348A CD 8B 2A             call    GETNUM          ; Get tone frequency
3680+ 348D CD B0 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 3490 ED 53 07 82          ld      (TMPBFR2),DE    ; Store frequency
3682+ 3494 CD B1 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3497 2C                   defb    ','
3684+ 3498 CD 8B 2A             call    GETNUM          ; Get duration
3685+ 349B CD B0 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 349E ED 53 09 82          ld      (TMPBFR3),DE    ; Store duration
3687+ 34A2                                              ; CHECK CHANNEL
3688+ 34A2 3A 05 82             ld      A,(TMPBFR1)     ; recover channel
3689+ 34A5 FE 01                cp      $01             ; is channel <1?
3690+ 34A7 DA C5 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 34AA                                              ; CHECK FREQUENCY
3692+ 34AA ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 34AE 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 34AF FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 34B1 D2 C5 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 34B4                                              ; CHECK DURATION
3697+ 34B4 ED 5B 09 82          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 34B8 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 34B9 E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 34BB C2 C5 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 34BE                                              ;
3702+ 34BE                                              ; SET TONE:
3703+ 34BE                                              ; let's start by setting up the channel
3704+ 34BE 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3705+ 34C1 FE 03                cp      $03             ; is it 3?
3706+ 34C3 20 02                jr      NZ,SND1         ; no, jump over
3707+ 34C5 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 34C7 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 34C8 CD 4F 35             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 34CB                                              ; SET FREQUENCY
3711+ 34CB                                              ; we simply get frequency and subtract from 4096. The result
3712+ 34CB                                              ; is put into register pair of the corresponding freq tone channel
3713+ 34CB ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 34CF E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 34D0 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 34D3 A7                   and     A               ; reset C flag
3717+ 34D4 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 34D6 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3719+ 34D9 3D                   dec     A               ; set A into the range 0~2
3720+ 34DA 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 34DB 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 34DD ED 79                out     (C),A           ; select first register of the pair
3723+ 34DF 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 34E1 ED 69                out     (C),L           ; send high byte
3725+ 34E3 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 34E5 3C                   inc     A               ; second register of the pair
3727+ 34E6 ED 79                out     (C),A           ; select register
3728+ 34E8 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 34EA ED 61                out     (C),H           ; send low byte
3730+ 34EC ED 5B 09 82          ld      DE,(TMPBFR3)    ; recover duration
3731+ 34F0 3A 05 82             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34F3 3D                   dec     A               ; set channel into the range 0~2
3733+ 34F4 87                   add     A,A             ; double A to find the correct offset
3734+ 34F5 21 39 82             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34F8 85                   add     A,L             ; ...the proper...
3736+ 34F9 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34FB 24                   inc     H               ; yes, increment H)
3738+ 34FC 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34FD 73                   ld      (HL),E          ; ...and store the value
3740+ 34FE 23                   inc     HL
3741+ 34FF 72                   ld      (HL),D
3742+ 3500 E1                   pop     HL              ; retrieve HL
3743+ 3501 C9                   ret                     ; Return to caller
3744+ 3502 FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 3504 D2 C5 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 3507 CD B1 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 350A 2C                   defb    ','
3748+ 350B CD 11 33             call    GETINT          ; get integer 0-255 (frequency)
3749+ 350E FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 3510 D2 C5 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 3513 32 07 82             ld      (TMPBFR2),A     ; store freq.
3752+ 3516 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 3517 CD FA 25             call    GETCHR          ; check that nothing follows
3754+ 351A C2 B1 20             jp      NZ,SNERR        ; error if no empty line
3755+ 351D 3A 07 82             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 3520 5F                   ld      E,A             ; store freq into E
3757+ 3521 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 3524 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 3526 FE 03                cp      $03             ; is it 3?
3760+ 3528 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 352A 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 352C 87           NOS1:   add     A,A
3763+ 352D 87                   add     A,A
3764+ 352E 87                   add     A,A             ; let's move A 3 bits to left
3765+ 352F 47                   ld      B,A             ; store channel into B
3766+ 3530 7B                   ld      A,E             ; check if
3767+ 3531 A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 3532 F3                   di                      ; disable INts
3769+ 3533 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 3535 3E 07                ld      A,$07           ; mixer register
3771+ 3537 CD 03 0D             call    SETSNDREG       ; set mixer register
3772+ 353A ED 78                in      A,(C)           ; load current mixer value
3773+ 353C B0                   or      B               ; disable noise
3774+ 353D 18 19                jr      NOS3            ; continue over
3775+ 353F 78           NOS2:   ld      A,B             ; recover channel
3776+ 3540 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 3541 CD 4F 35             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 3544 3E 06                ld      A,$06           ; write into noise register
3779+ 3546 CD 03 0D             call    SETSNDREG       ; set register into PSG
3780+ 3549 7B                   ld      A,E             ; load value for noise frequency
3781+ 354A CD 08 0D             call    WRTSNDREG       ; write data into register $06
3782+ 354D FB                   ei                      ; re-enable INTs
3783+ 354E C9                   ret
3784+ 354F                      ; enable line into mixer of channel stored in A
3785+ 354F 47           WRTSND: ld      B,A             ; move channel into B
3786+ 3550 3E 07                ld      A,$07           ; mixer register
3787+ 3552 CD 03 0D             call    SETSNDREG       ; set mixer register
3788+ 3555 ED 78                in      A,(C)           ; load current value
3789+ 3557 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 3558                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 3558                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 3558                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 3558                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 3558 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 3559 3E 07                ld      A,$07           ; mixer address
3796+ 355B CD 03 0D             call    SETSNDREG       ; set register
3797+ 355E 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 355F CD 08 0D             call    WRTSNDREG       ; send new value for the mixer
3799+ 3562 FB                   ei                      ; re-enable INTs
3800+ 3563 C9                   ret                     ; return to caller
3801+ 3564
3802+ 3564              ; write a byte into one of the VDP registers
3803+ 3564 CD 11 33     VREG:   call    GETINT          ; Get register number back into A
3804+ 3567 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 3569 D2 C5 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 356C 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 356F CD B1 23             call    CHKSYN          ; Make sure ',' follows
3808+ 3572 2C                   defb    ','
3809+ 3573 CD 11 33             call    GETINT          ; get value (0-255)
3810+ 3576 5F                   ld      E,A             ; store value into E
3811+ 3577 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 357A F3                   di                      ; disable INTs
3813+ 357B CD D1 06             call    WRITE_VREG      ; write value into VDP register
3814+ 357E FB                   ei                      ; re-enable INTs
3815+ 357F C9                   ret                     ; return to caller
3816+ 3580
3817+ 3580              ; read the VDP status register and return it into A
3818+ 3580 CD B0 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 3583 F3                   di                      ; disable INTs
3820+ 3584 CD DC 06             call    READ_VSTAT      ; read VDP register status
3821+ 3587 FB                   ei                      ; re-enable INTs
3822+ 3588 C3 84 2E             jp      PASSA           ; Return integer A
3823+ 358B
3824+ 358B              ; read from PSG register and return it into A
3825+ 358B CD B0 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 358E 7B                   ld      A,E             ; consider LSB
3827+ 358F FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 3591 D2 C5 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 3594 F3                   di                      ; disable INts
3830+ 3595 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3597 ED 79                out     (C),A           ; send register to read from
3832+ 3599 ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 359B FB                   ei                      ; re-enable INTs
3834+ 359C C3 84 2E             jp      PASSA           ; return A
3835+ 359F
3836+ 359F              ; read the temp key buffer and return the value of the current key being pressed
3837+ 359F              ; can wait for the number of 100thds of second before to return
3838+ 359F CD FE 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 35A2 CD B0 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 35A5 C5                   push    BC              ; store BC
3841+ 35A6 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 35A9 47                   ld      B,A             ; move it into B
3843+ 35AA 3A E5 81     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 35AD B8                   cp      B               ; ...to let the sniffer collect...
3845+ 35AE 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 35B0 7A                   ld      A,D             ; check the param
3847+ 35B1 B3                   or      E               ; if DE<>0 then...
3848+ 35B2 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 35B4 3A 41 82             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 35B7 18 2A                jr      ENDINK          ; ...return it
3851+ 35B9 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 35BA FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 35BC D2 C5 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 35BF E5                   push    HL              ; store HL
3855+ 35C0 21 09 00             ld      HL,$0009        ; check if value
3856+ 35C3 CD 45 4D             call    CMP16           ; is < 10
3857+ 35C6 E1                   pop     HL              ; retrieve HL
3858+ 35C7 DA CD 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 35CA 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 35CD 3A E5 81     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 35D0 47                   ld      B,A             ; move it into B
3862+ 35D1 3A 41 82     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 35D4 A7                   and     A               ; is it 0?
3864+ 35D5 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 35D7 3A E5 81             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 35DA B8                   cp      B               ; is it the same value?
3867+ 35DB 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 35DD 47                   ld      B,A             ; store new value
3869+ 35DE 1B                   dec     DE              ; no, decrement timer
3870+ 35DF 7A                   ld      A,D             ; check if zero reached
3871+ 35E0 B3                   or      E               ; by ORing D and E
3872+ 35E1 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 35E3 C1           ENDINK: pop     BC              ; restore BC
3874+ 35E4 F5                   push    AF              ; store A
3875+ 35E5 F3                   di                      ; disable INTs
3876+ 35E6 AF                   xor     A               ; clear the...
3877+ 35E7 32 41 82             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 35EA FB                   ei                      ; re-enable INTs
3879+ 35EB F1                   pop     AF              ; retrieve A
3880+ 35EC C3 84 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 35EF
3882+ 35EF
3883+ 35EF 21 16 3B     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35F2 CD E7 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35F5 C3 01 36             jp      FPADD           ; Add BCDE to FPREG
3886+ 35F8
3887+ 35F8
3888+ 35F8 CD E7 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35FB 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35FC C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35FD D1                   pop     DE
3892+ 35FE CD C1 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 3601 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 3602 B7                   or      A               ; Is number zero?
3895+ 3603 C8                   ret     Z               ; Yes - Nothing to add
3896+ 3604 3A 5C 82             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 3607 B7                   or      A               ; Is this number zero?
3898+ 3608 CA D9 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 360B 90                   sub     B               ; BCDE number larger?
3900+ 360C D2 1B 36             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 360F 2F                   cpl                     ; Two's complement
3902+ 3610 3C                   inc     A               ;  FP exponent
3903+ 3611 EB                   ex      DE,HL
3904+ 3612 CD C9 38             call    STAKFP          ; Put FPREG on stack
3905+ 3615 EB                   ex      DE,HL
3906+ 3616 CD D9 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 3619 C1                   pop     BC              ; Restore number from stack
3908+ 361A D1                   pop     DE
3909+ 361B FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 361D D0                   ret     NC              ; Yes - First number is result
3911+ 361E F5                   push    AF              ; Save number of bits to scale
3912+ 361F CD FE 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 3622 67                   ld      H,A             ; Save sign of result
3914+ 3623 F1                   pop     AF              ; Restore scaling factor
3915+ 3624 CD C6 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 3627 B4                   or      H               ; Result to be positive?
3917+ 3628 21 59 82             ld      HL,FPREG        ; Point to FPREG
3918+ 362B F2 41 36             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 362E CD A6 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 3631 D2 87 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 3634 23                   inc     HL              ; Point to exponent
3922+ 3635 34                   inc     (HL)            ; Increment it
3923+ 3636 CA C0 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 3639 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 363B CD DC 36             call    SHRT1           ; Shift result right
3926+ 363E C3 87 36             jp      RONDUP          ; Round it up
3927+ 3641
3928+ 3641 AF           MINCDE: xor     A               ; Clear A and carry
3929+ 3642 90                   sub     B               ; Negate exponent
3930+ 3643 47                   ld      B,A             ; Re-save exponent
3931+ 3644 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 3645 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 3646 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 3647 23                   inc     HL
3935+ 3648 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 3649 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 364A 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 364B 23                   inc     HL
3939+ 364C 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 364D 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 364E 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 364F DC B2 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 3652
3944+ 3652 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 3653 63                   ld      H,E             ; H = LSB
3946+ 3654 AF                   xor     A
3947+ 3655 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3656 79                   ld      A,C             ; Get MSB
3949+ 3657 B7                   or      A               ; Is it zero?
3950+ 3658 C2 74 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 365B 4A                   ld      C,D             ; MSB = NMSB
3952+ 365C 54                   ld      D,H             ; NMSB= LSB
3953+ 365D 65                   ld      H,L             ; LSB = VLSB
3954+ 365E 6F                   ld      L,A             ; VLSB= 0
3955+ 365F 78                   ld      A,B             ; Get exponent
3956+ 3660 D6 08                sub     $08             ; Count 8 bits
3957+ 3662 FE E0                cp      -24-8           ; Was number zero?
3958+ 3664 C2 55 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3667 AF           RESZER: xor     A               ; Result is zero
3960+ 3668 32 5C 82     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 366B C9                   ret
3962+ 366C
3963+ 366C 05           NORMAL: dec     B               ; Count bits
3964+ 366D 29                   add     HL,HL           ; Shift HL left
3965+ 366E 7A                   ld      A,D             ; Get NMSB
3966+ 366F 17                   rla                     ; Shift left with last bit
3967+ 3670 57                   ld      D,A             ; Save NMSB
3968+ 3671 79                   ld      A,C             ; Get MSB
3969+ 3672 8F                   adc     A,A             ; Shift left with last bit
3970+ 3673 4F                   ld      C,A             ; Save MSB
3971+ 3674 F2 6C 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3677 78                   ld      A,B             ; Number of bits shifted
3973+ 3678 5C                   ld      E,H             ; Save HL in EB
3974+ 3679 45                   ld      B,L
3975+ 367A B7                   or      A               ; Any shifting done?
3976+ 367B CA 87 36             jp      Z,RONDUP        ; No - Round it up
3977+ 367E 21 5C 82             ld      HL,FPEXP        ; Point to exponent
3978+ 3681 86                   add     A,(HL)          ; Add shifted bits
3979+ 3682 77                   ld      (HL),A          ; Re-save exponent
3980+ 3683 D2 67 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3686 C8                   ret     Z               ; Result is zero
3982+ 3687 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 3688 21 5C 82     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 368B B7                   or      A               ; Any rounding?
3985+ 368C FC 99 36             call    M,FPROND        ; Yes - Round number up
3986+ 368F 46                   ld      B,(HL)          ; B = Exponent
3987+ 3690 23                   inc     HL
3988+ 3691 7E                   ld      A,(HL)          ; Get sign of result
3989+ 3692 E6 80                and     %10000000       ; Only bit 7 needed
3990+ 3694 A9                   xor     C               ; Set correct sign
3991+ 3695 4F                   ld      C,A             ; Save correct sign in number
3992+ 3696 C3 D9 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 3699
3994+ 3699 1C           FPROND: inc     E               ; Round LSB
3995+ 369A C0                   ret     NZ              ; Return if ok
3996+ 369B 14                   inc     D               ; Round NMSB
3997+ 369C C0                   ret     NZ              ; Return if ok
3998+ 369D 0C                   inc     C               ; Round MSB
3999+ 369E C0                   ret     NZ              ; Return if ok
4000+ 369F 0E 80                ld      C,$80           ; Set normal value
4001+ 36A1 34                   inc     (HL)            ; Increment exponent
4002+ 36A2 C0                   ret     NZ              ; Return if ok
4003+ 36A3 C3 C0 20             jp      OVERR           ; Overflow error
4004+ 36A6
4005+ 36A6 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 36A7 83                   add     A,E             ; Add LSB of BCDE
4007+ 36A8 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 36A9 23                   inc     HL
4009+ 36AA 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 36AB 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 36AC 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 36AD 23                   inc     HL
4013+ 36AE 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 36AF 89                   adc     A,C             ; Add MSB of BCDE
4015+ 36B0 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 36B1 C9                   ret
4017+ 36B2
4018+ 36B2 21 5D 82     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 36B5 7E                   ld      A,(HL)          ; Get sign of result
4020+ 36B6 2F                   cpl                     ; Negate it
4021+ 36B7 77                   ld      (HL),A          ; Put it back
4022+ 36B8 AF                   xor     A
4023+ 36B9 6F                   ld      L,A             ; Set L to zero
4024+ 36BA 90                   sub     B               ; Negate exponent,set carry
4025+ 36BB 47                   ld      B,A             ; Re-save exponent
4026+ 36BC 7D                   ld      A,L             ; Load zero
4027+ 36BD 9B                   sbc     A,E             ; Negate LSB
4028+ 36BE 5F                   ld      E,A             ; Re-save LSB
4029+ 36BF 7D                   ld      A,L             ; Load zero
4030+ 36C0 9A                   sbc     A,D             ; Negate NMSB
4031+ 36C1 57                   ld      D,A             ; Re-save NMSB
4032+ 36C2 7D                   ld      A,L             ; Load zero
4033+ 36C3 99                   sbc     A,C             ; Negate MSB
4034+ 36C4 4F                   ld      C,A             ; Re-save MSB
4035+ 36C5 C9                   ret
4036+ 36C6
4037+ 36C6 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 36C8 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 36CA DA D5 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 36CD 43                   ld      B,E             ; <- Shift
4041+ 36CE 5A                   ld      E,D             ; <- right
4042+ 36CF 51                   ld      D,C             ; <- eight
4043+ 36D0 0E 00                ld      C,$00           ; <- bits
4044+ 36D2 C3 C8 36             jp      SCALLP          ; More bits to shift
4045+ 36D5
4046+ 36D5 C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 36D7 6F                   ld      L,A             ; Save bits to shift
4048+ 36D8 AF           SHRLP:  xor     A               ; Flag for all done
4049+ 36D9 2D                   dec     L               ; All shifting done?
4050+ 36DA C8                   ret     Z               ; Yes - Return
4051+ 36DB 79                   ld      A,C             ; Get MSB
4052+ 36DC 1F           SHRT1:  rra                     ; Shift it right
4053+ 36DD 4F                   ld      C,A             ; Re-save
4054+ 36DE 7A                   ld      A,D             ; Get NMSB
4055+ 36DF 1F                   rra                     ; Shift right with last bit
4056+ 36E0 57                   ld      D,A             ; Re-save it
4057+ 36E1 7B                   ld      A,E             ; Get LSB
4058+ 36E2 1F                   rra                     ; Shift right with last bit
4059+ 36E3 5F                   ld      E,A             ; Re-save it
4060+ 36E4 78                   ld      A,B             ; Get underflow
4061+ 36E5 1F                   rra                     ; Shift right with last bit
4062+ 36E6 47                   ld      B,A             ; Re-save underflow
4063+ 36E7 C3 D8 36             jp      SHRLP           ; More bits to do
4064+ 36EA
4065+ 36EA 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 36EE
4067+ 36EE 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 36EF AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36F3 F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36F7 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36FB
4072+ 36FB CD 98 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36FE B7                   or      A
4074+ 36FF EA C5 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 3702 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4076+ 3705 7E                   ld      A,(HL)          ; Get exponent
4077+ 3706 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 3709 11 F3 04             ld      DE,$04F3
4079+ 370C 90                   sub     B               ; Scale value to be < 1
4080+ 370D F5                   push    AF              ; Save scale factor
4081+ 370E 70                   ld      (HL),B          ; Save new exponent
4082+ 370F D5                   push    DE              ; Save SQR(1/2)
4083+ 3710 C5                   push    BC
4084+ 3711 CD 01 36             call    FPADD           ; Add SQR(1/2) to value
4085+ 3714 C1                   pop     BC              ; Restore SQR(1/2)
4086+ 3715 D1                   pop     DE
4087+ 3716 04                   inc     B               ; Make it SQR(2)
4088+ 3717 CD EE 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 371A 21 EA 36             ld      HL,UNITY        ; Point to 1.
4090+ 371D CD F8 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 3720 21 EE 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 3723 CD E0 3B             call    SUMSER          ; Evaluate sum of series
4093+ 3726 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 3729 11 00 00             ld      DE,$0000
4095+ 372C CD 01 36             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 372F F1                   pop     AF              ; Restore scale factor
4097+ 3730 CD 13 3A             call    RSCALE          ; Re-scale number
4098+ 3733 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 3736 11 18 72             ld      DE,$7218
4100+ 3739 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 373A
4102+ 373A C1           MULT:   pop     BC              ; Get number from stack
4103+ 373B D1                   pop     DE
4104+ 373C CD 98 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 373F C8                   ret     Z               ; Return zero if zero
4106+ 3740 2E 00                ld      L,$00           ; Flag add exponents
4107+ 3742 CD 56 38             call    ADDEXP          ; Add exponents
4108+ 3745 79                   ld      A,C             ; Get MSB of multiplier
4109+ 3746 32 6B 82             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 3749 EB                   ex      DE,HL
4111+ 374A 22 6C 82             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 374D 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 3750 50                   ld      D,B
4114+ 3751 58                   ld      E,B
4115+ 3752 21 52 36             ld      HL,BNORM        ; Address of normalise
4116+ 3755 E5                   push    HL              ; Save for return
4117+ 3756 21 5E 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 3759 E5                   push    HL              ; Save for NMSB,MSB
4119+ 375A E5                   push    HL              ;
4120+ 375B 21 59 82             ld      HL,FPREG        ; Point to number
4121+ 375E 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 375F 23                   inc     HL              ; Point to NMSB
4123+ 3760 B7                   or      A               ; Test LSB
4124+ 3761 CA 8A 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 3764 E5                   push    HL              ; Save address of number
4126+ 3765 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3767 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 3768 67                   ld      H,A             ; Save LSB
4129+ 3769 79                   ld      A,C             ; Get MSB
4130+ 376A D2 78 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 376D E5                   push    HL              ; Save LSB and count
4132+ 376E 2A 6C 82             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 3771 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 3772 EB                   ex      DE,HL           ; Leave sum in DE
4135+ 3773 E1                   pop     HL              ; Restore MSB and count
4136+ 3774 3A 6B 82             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3777 89                   adc     A,C             ; Add MSB
4138+ 3778 1F           NOMADD: rra                     ; Shift MSB right
4139+ 3779 4F                   ld      C,A             ; Re-save MSB
4140+ 377A 7A                   ld      A,D             ; Get NMSB
4141+ 377B 1F                   rra                     ; Shift NMSB right
4142+ 377C 57                   ld      D,A             ; Re-save NMSB
4143+ 377D 7B                   ld      A,E             ; Get LSB
4144+ 377E 1F                   rra                     ; Shift LSB right
4145+ 377F 5F                   ld      E,A             ; Re-save LSB
4146+ 3780 78                   ld      A,B             ; Get VLSB
4147+ 3781 1F                   rra                     ; Shift VLSB right
4148+ 3782 47                   ld      B,A             ; Re-save VLSB
4149+ 3783 2D                   dec     L               ; Count bits multiplied
4150+ 3784 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 3785 C2 67 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 3788 E1           POPHRT: pop     HL              ; Restore address of number
4153+ 3789 C9                   ret
4154+ 378A
4155+ 378A 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 378B 5A                   ld      E,D
4157+ 378C 51                   ld      D,C
4158+ 378D 4F                   ld      C,A
4159+ 378E C9                   ret
4160+ 378F
4161+ 378F
4162+ 378F              ; WORKING ââ
4163+ 378F C1           DINT:   pop     BC              ; Get number from stack
4164+ 3790 D1                   pop     DE
4165+ 3791 CD EE 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 3794 C3 6B 39             jp      INT             ; return INT(FPREG)
4167+ 3797
4168+ 3797
4169+ 3797              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3797              ; A is in stack; B is in FPREG
4171+ 3797              ; math is:
4172+ 3797              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3797 CD 6B 39     MOD:    call    INT             ; B=INT(B)
4174+ 379A CD E4 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 379D ED 53 09 82          ld      (TMPBFR3),DE    ; store B into...
4176+ 37A1 ED 43 0B 82          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 37A5 C1                   pop     BC              ; recover A...
4178+ 37A6 D1                   pop     DE              ; ...from stack
4179+ 37A7 CD D9 38             call    FPBCDE          ; store A into FPREG
4180+ 37AA CD 6B 39             call    INT             ; get integer part: A=INT(A)
4181+ 37AD CD E4 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 37B0 ED 53 05 82          ld      (TMPBFR1),DE    ; store A into...
4183+ 37B4 ED 43 07 82          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 37B8                                              ; begin calculation
4185+ 37B8 2A 09 82             ld      HL,(TMPBFR3)    ; move B...
4186+ 37BB 22 59 82             ld      (FPREG),HL      ; ...from...
4187+ 37BE 2A 0B 82             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 37C1 22 5B 82             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 37C4 CD EE 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 37C7 CD 6B 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 37CA ED 5B 09 82          ld      DE,(TMPBFR3)    ; load B...
4192+ 37CE ED 4B 0B 82          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 37D2 CD 3C 37             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 37D5 ED 5B 05 82          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 37D9 ED 4B 07 82          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 37DD C3 FE 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 37E0
4198+ 37E0
4199+ 37E0 CD C9 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 37E3 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 37E6 11 00 00             ld      DE,$0000
4202+ 37E9 CD D9 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 37EC
4204+ 37EC C1           DIV:    pop     BC              ; Get number from stack
4205+ 37ED D1                   pop     DE
4206+ 37EE CD 98 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 37F1 CA B4 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37F4 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37F6 CD 56 38             call    ADDEXP          ; Subtract exponents
4210+ 37F9 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37FA 34                   inc     (HL)
4212+ 37FB 2B                   dec     HL              ; Point to MSB
4213+ 37FC 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37FD 32 73 80             ld      (DIV3),A        ; Save for subtraction
4215+ 3800 2B                   dec     HL
4216+ 3801 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 3802 32 6F 80             ld      (DIV2),A        ; Save for subtraction
4218+ 3805 2B                   dec     HL
4219+ 3806 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 3807 32 6B 80             ld      (DIV1),A        ; Save for subtraction
4221+ 380A 41                   ld      B,C             ; Get MSB
4222+ 380B EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 380C AF                   xor     A
4224+ 380D 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 380E 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 380F 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 3810 32 76 80             ld      (DIV4),A        ; Clear overflow count
4228+ 3813 E5           DIVLP:  push    HL              ; Save divisor
4229+ 3814 C5                   push    BC
4230+ 3815 7D                   ld      A,L             ; Get LSB of number
4231+ 3816 CD 6A 80             call    DIVSUP          ; Subt' divisor from dividend
4232+ 3819 DE 00                sbc     A,$00           ; Count for overflows
4233+ 381B 3F                   ccf
4234+ 381C D2 26 38             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 381F 32 76 80             ld      (DIV4),A        ; Re-save overflow count
4236+ 3822 F1                   pop     AF              ; Scrap divisor
4237+ 3823 F1                   pop     AF
4238+ 3824 37                   scf                     ; Set carry to
4239+ 3825 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 3826
4241+ 3826 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 3827 E1                   pop     HL
4243+ 3828 79                   ld      A,C             ; Get MSB of quotient
4244+ 3829 3C                   inc     A
4245+ 382A 3D                   dec     A
4246+ 382B 1F                   rra                     ; Bit 0 to bit 7
4247+ 382C FA 88 36             jp      M,RONDB         ; Done - Normalise result
4248+ 382F 17                   rla                     ; Restore carry
4249+ 3830 7B                   ld      A,E             ; Get LSB of quotient
4250+ 3831 17                   rla                     ; Double it
4251+ 3832 5F                   ld      E,A             ; Put it back
4252+ 3833 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 3834 17                   rla                     ; Double it
4254+ 3835 57                   ld      D,A             ; Put it back
4255+ 3836 79                   ld      A,C             ; Get MSB of quotient
4256+ 3837 17                   rla                     ; Double it
4257+ 3838 4F                   ld      C,A             ; Put it back
4258+ 3839 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 383A 78                   ld      A,B             ; Get MSB of divisor
4260+ 383B 17                   rla                     ; Double it
4261+ 383C 47                   ld      B,A             ; Put it back
4262+ 383D 3A 76 80             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 3840 17                   rla                     ; Double it
4264+ 3841 32 76 80             ld      (DIV4),A        ; Put it back
4265+ 3844 79                   ld      A,C             ; Get MSB of quotient
4266+ 3845 B2                   or      D               ; Merge NMSB
4267+ 3846 B3                   or      E               ; Merge LSB
4268+ 3847 C2 13 38             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 384A E5                   push    HL              ; Save divisor
4270+ 384B 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4271+ 384E 35                   dec     (HL)            ; Divide by 2
4272+ 384F E1                   pop     HL              ; Restore divisor
4273+ 3850 C2 13 38             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 3853 C3 C0 20             jp      OVERR           ; Overflow error
4275+ 3856
4276+ 3856
4277+ 3856 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3857 B7                   or      A               ; Test it
4279+ 3858 CA 7A 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 385B 7D                   ld      A,L             ; Get add/subtract flag
4281+ 385C 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4282+ 385F AE                   xor     (HL)            ; Add or subtract it
4283+ 3860 80                   add     A,B             ; Add the other exponent
4284+ 3861 47                   ld      B,A             ; Save new exponent
4285+ 3862 1F                   rra                     ; Test exponent for overflow
4286+ 3863 A8                   xor     B
4287+ 3864 78                   ld      A,B             ; Get exponent
4288+ 3865 F2 79 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 3868 C6 80                add     A,$80           ; Add excess 128
4290+ 386A 77                   ld      (HL),A          ; Save new exponent
4291+ 386B CA 88 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 386E CD FE 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 3871 77                   ld      (HL),A          ; Save new exponent
4294+ 3872 2B                   dec     HL              ; Point to MSB
4295+ 3873 C9                   ret
4296+ 3874
4297+ 3874 CD 98 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3877 2F                   cpl                     ; Invert sign
4299+ 3878 E1                   pop     HL              ; Clean up stack
4300+ 3879 B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 387A E1           OVTST3: pop     HL              ; Clear off return address
4302+ 387B F2 67 36             jp      P,RESZER        ; Result zero
4303+ 387E C3 C0 20             jp      OVERR           ; Overflow error
4304+ 3881
4305+ 3881 CD E4 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 3884 78                   ld      A,B             ; Get exponent
4307+ 3885 B7                   or      A               ; Is it zero?
4308+ 3886 C8                   ret     Z               ; Yes - Result is zero
4309+ 3887 C6 02                add     A,$02           ; Multiply by 4
4310+ 3889 DA C0 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 388C 47                   ld      B,A             ; Re-save exponent
4312+ 388D CD 01 36             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 3890 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4314+ 3893 34                   inc     (HL)            ; Double number (Times 10)
4315+ 3894 C0                   ret     NZ              ; Ok - Return
4316+ 3895 C3 C0 20             jp      OVERR           ; Overflow error
4317+ 3898
4318+ 3898 3A 5C 82     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 389B B7                   or      A
4320+ 389C C8                   ret     Z               ; RETurn if number is zero
4321+ 389D 3A 5B 82             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 38A0 FE                   defb    0FEH            ; Test sign
4323+ 38A1 2F           RETREL: cpl                     ; Invert sign
4324+ 38A2 17                   rla                     ; Sign bit to carry
4325+ 38A3 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 38A4 C0                   ret     NZ              ; Return -1 if negative
4327+ 38A5 3C                   inc     A               ; Bump to +1
4328+ 38A6 C9                   ret                     ; Positive - Return +1
4329+ 38A7
4330+ 38A7 CD 98 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 38AA 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 38AC 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 38AF 21 5C 82     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 38B2 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 38B3 70                   ld      (HL),B          ; Save exponent
4336+ 38B4 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 38B6 23                   inc     HL              ; Point to sign of result
4338+ 38B7 36 80                ld      (HL),$80        ; Set sign of result
4339+ 38B9 17                   rla                     ; Carry = sign of integer
4340+ 38BA C3 4F 36             jp      CONPOS          ; Set sign of result
4341+ 38BD
4342+ 38BD CD 98 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 38C0 F0                   ret     P               ; Return if positive
4344+ 38C1 21 5B 82     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 38C4 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 38C5 EE 80                xor     $80             ; Invert sign of mantissa
4347+ 38C7 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 38C8 C9                   ret
4349+ 38C9
4350+ 38C9 EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 38CA 2A 59 82             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 38CD E3                   ex      (SP),HL         ; Stack them,get return
4353+ 38CE E5                   push    HL              ; Re-save return
4354+ 38CF 2A 5B 82             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 38D2 E3                   ex      (SP),HL         ; Stack them,get return
4356+ 38D3 E5                   push    HL              ; Re-save return
4357+ 38D4 EB                   ex      DE,HL           ; Restore code string address
4358+ 38D5 C9                   ret
4359+ 38D6
4360+ 38D6              ; store F.P. number from BCDE into (FPREG)
4361+ 38D6 CD E7 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 38D9 EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 38DA 22 59 82             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 38DD 60                   ld      H,B             ; Exponent of number
4365+ 38DE 69                   ld      L,C             ; MSB of number
4366+ 38DF 22 5B 82             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 38E2 EB                   ex      DE,HL           ; Restore code string address
4368+ 38E3 C9                   ret
4369+ 38E4
4370+ 38E4              ; load F.P. number from (FPREG) into BCDE
4371+ 38E4 21 59 82     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 38E7 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 38E8 23                   inc     HL
4374+ 38E9 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 38EA 23                   inc     HL
4376+ 38EB 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 38EC 23                   inc     HL
4378+ 38ED 46                   ld      B,(HL)          ; Get exponent of number
4379+ 38EE 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 38EF C9                   ret
4381+ 38F0
4382+ 38F0              ; move floating point from (FPREG) into (HL)
4383+ 38F0 11 59 82     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38F3 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38F5 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38F6 77                   ld      (HL),A          ; Save destination
4387+ 38F7 13                   inc     DE              ; Next source
4388+ 38F8 23                   inc     HL              ; Next destination
4389+ 38F9 05                   dec     B               ; Count bytes
4390+ 38FA C2 F5 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38FD C9                   ret
4392+ 38FE
4393+ 38FE 21 5B 82     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 3901 7E                   ld      A,(HL)          ; Get MSB
4395+ 3902 07                   rlca                    ; Old sign to carry
4396+ 3903 37                   scf                     ; Set MSBit
4397+ 3904 1F                   rra                     ; Set MSBit of MSB
4398+ 3905 77                   ld      (HL),A          ; Save new MSB
4399+ 3906 3F                   ccf                     ; Complement sign
4400+ 3907 1F                   rra                     ; Old sign to carry
4401+ 3908 23                   inc     HL
4402+ 3909 23                   inc     HL
4403+ 390A 77                   ld      (HL),A          ; Set sign of result
4404+ 390B 79                   ld      A,C             ; Get MSB
4405+ 390C 07                   rlca                    ; Old sign to carry
4406+ 390D 37                   scf                     ; Set MSBit
4407+ 390E 1F                   rra                     ; Set MSBit of MSB
4408+ 390F 4F                   ld      C,A             ; Save MSB
4409+ 3910 1F                   rra
4410+ 3911 AE                   xor     (HL)            ; New sign of result
4411+ 3912 C9                   ret
4412+ 3913
4413+ 3913 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 3914 B7                   or      A
4415+ 3915 CA 98 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 3918 21 A1 38             ld      HL,RETREL       ; Return relation routine
4417+ 391B E5                   push    HL              ; Save for return
4418+ 391C CD 98 38             call    TSTSGN          ; Test sign of FPREG
4419+ 391F 79                   ld      A,C             ; Get MSB of number
4420+ 3920 C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 3921 21 5B 82             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 3924 AE                   xor     (HL)            ; Combine signs
4423+ 3925 79                   ld      A,C             ; Get MSB of number
4424+ 3926 F8                   ret     M               ; Exit if signs different
4425+ 3927 CD 2D 39             call    CMPFP           ; Compare FP numbers
4426+ 392A 1F                   rra                     ; Get carry to sign
4427+ 392B A9                   xor     C               ; Combine with MSB of number
4428+ 392C C9                   ret
4429+ 392D
4430+ 392D 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 392E 78                   ld      A,B             ; Get exponent
4432+ 392F BE                   cp      (HL)            ; Compare exponents
4433+ 3930 C0                   ret     NZ              ; Different
4434+ 3931 2B                   dec     HL              ; Point to MBS
4435+ 3932 79                   ld      A,C             ; Get MSB
4436+ 3933 BE                   cp      (HL)            ; Compare MSBs
4437+ 3934 C0                   ret     NZ              ; Different
4438+ 3935 2B                   dec     HL              ; Point to NMSB
4439+ 3936 7A                   ld      A,D             ; Get NMSB
4440+ 3937 BE                   cp      (HL)            ; Compare NMSBs
4441+ 3938 C0                   ret     NZ              ; Different
4442+ 3939 2B                   dec     HL              ; Point to LSB
4443+ 393A 7B                   ld      A,E             ; Get LSB
4444+ 393B 96                   sub     (HL)            ; Compare LSBs
4445+ 393C C0                   ret     NZ              ; Different
4446+ 393D E1                   pop     HL              ; Drop RETurn
4447+ 393E E1                   pop     HL              ; Drop another RETurn
4448+ 393F C9                   ret
4449+ 3940
4450+ 3940 47           FPINT:  ld      B,A             ; <- Move
4451+ 3941 4F                   ld      C,A             ; <- exponent
4452+ 3942 57                   ld      D,A             ; <- to all
4453+ 3943 5F                   ld      E,A             ; <- bits
4454+ 3944 B7                   or      A               ; Test exponent
4455+ 3945 C8                   ret     Z               ; Zero - Return zero
4456+ 3946 E5                   push    HL              ; Save pointer to number
4457+ 3947 CD E4 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 394A CD FE 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 394D AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 394E 67                   ld      H,A             ; Save combined signs
4461+ 394F FC 64 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 3952 3E 98                ld      A,$80+24        ; 24 bits
4463+ 3954 90                   sub     B               ; Bits to shift
4464+ 3955 CD C6 36             call    SCALE           ; Shift BCDE
4465+ 3958 7C                   ld      A,H             ; Get combined sign
4466+ 3959 17                   rla                     ; Sign to carry
4467+ 395A DC 99 36             call    C,FPROND        ; Negative - Round number up
4468+ 395D 06 00                ld      B,$00           ; Zero exponent
4469+ 395F DC B2 36             call    C,COMPL         ; If negative make positive
4470+ 3962 E1                   pop     HL              ; Restore pointer to number
4471+ 3963 C9                   ret
4472+ 3964
4473+ 3964 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 3965 7A                   ld      A,D             ; Test LSBs
4475+ 3966 A3                   and     E
4476+ 3967 3C                   inc     A
4477+ 3968 C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 3969 0B                   dec     BC              ; Decrement MSBs
4479+ 396A C9                   ret
4480+ 396B
4481+ 396B 21 5C 82     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 396E 7E                   ld      A,(HL)          ; Get exponent
4483+ 396F FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 3971 3A 59 82             ld      A,(FPREG)       ; Get LSB
4485+ 3974 D0                   ret     NC              ; Yes - Already integer
4486+ 3975 7E                   ld      A,(HL)          ; Get exponent
4487+ 3976 CD 40 39             call    FPINT           ; F.P to integer
4488+ 3979 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 397B 7B                   ld      A,E             ; Get LSB of number
4490+ 397C F5                   push    AF              ; Save LSB
4491+ 397D 79                   ld      A,C             ; Get MSB of number
4492+ 397E 17                   rla                     ; Sign to carry
4493+ 397F CD 4F 36             call    CONPOS          ; Set sign of result
4494+ 3982 F1                   pop     AF              ; Restore LSB of number
4495+ 3983 C9                   ret
4496+ 3984
4497+ 3984 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3987 78                   ld      A,B             ; Test multiplier
4499+ 3988 B1                   or      C
4500+ 3989 C8                   ret     Z               ; Return zero if zero
4501+ 398A 3E 10                ld      A,$10           ; 16 bits
4502+ 398C 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 398D DA B2 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 3990 EB                   ex      DE,HL
4505+ 3991 29                   add     HL,HL           ; Shift multiplier left
4506+ 3992 EB                   ex      DE,HL
4507+ 3993 D2 9A 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3996 09                   add     HL,BC           ; Add multiplicand
4509+ 3997 DA B2 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 399A 3D           NOMLAD: dec     A               ; Count bits
4511+ 399B C2 8C 39             jp      NZ,MLDBLP       ; More
4512+ 399E C9                   ret
4513+ 399F
4514+ 399F FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 39A1 F5                   push    AF              ; Save it and flags
4516+ 39A2 CA AB 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 39A5 FE 2B                cp      '+'             ; Positive?
4518+ 39A7 CA AB 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 39AA 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 39AB CD 67 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 39AE 47                   ld      B,A             ; Digits after point counter
4522+ 39AF 57                   ld      D,A             ; Sign of exponent
4523+ 39B0 5F                   ld      E,A             ; Exponent of ten
4524+ 39B1 2F                   cpl
4525+ 39B2 4F                   ld      C,A             ; Before or after point flag
4526+ 39B3 CD FA 25     MANLP:  call    GETCHR          ; Get next character
4527+ 39B6 DA FC 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 39B9 FE 2E                cp      '.'
4529+ 39BB CA D7 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 39BE FE 45                cp      'E'
4531+ 39C0 C2 DB 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 39C3 CD FA 25             call    GETCHR          ; Get next character
4533+ 39C6 CD CE 2B             call    SGNEXP          ; Get sign of exponent
4534+ 39C9 CD FA 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 39CC DA 1E 3A             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 39CF 14                   inc     D               ; Is sign negative?
4537+ 39D0 C2 DB 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 39D3 AF                   xor     A
4539+ 39D4 93                   sub     E               ; Negate exponent
4540+ 39D5 5F                   ld      E,A             ; And re-save it
4541+ 39D6 0C                   inc     C               ; Flag end of number
4542+ 39D7 0C           DPOINT: inc     C               ; Flag point passed
4543+ 39D8 CA B3 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 39DB E5           CONEXP: push    HL              ; Save code string address
4545+ 39DC 7B                   ld      A,E             ; Get exponent
4546+ 39DD 90                   sub     B               ; Subtract digits after point
4547+ 39DE F4 F4 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 39E1 F2 EA 39             jp      P,ENDCON        ; Positive - All done
4549+ 39E4 F5                   push    AF              ; Save number of times to /10
4550+ 39E5 CD E0 37             call    DIV10           ; Divide by 10
4551+ 39E8 F1                   pop     AF              ; Restore count
4552+ 39E9 3C                   inc     A               ; Count divides
4553+ 39EA
4554+ 39EA C2 DE 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 39ED D1                   pop     DE              ; Restore code string address
4556+ 39EE F1                   pop     AF              ; Restore sign of number
4557+ 39EF CC C1 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39F2 EB                   ex      DE,HL           ; Code string address to HL
4559+ 39F3 C9                   ret
4560+ 39F4
4561+ 39F4 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39F5 F5           MULTEN: push    AF              ; Save count
4563+ 39F6 CD 81 38             call    MLSP10          ; Multiply number by 10
4564+ 39F9 F1                   pop     AF              ; Restore count
4565+ 39FA 3D                   dec     A               ; Count multiplies
4566+ 39FB C9                   ret
4567+ 39FC
4568+ 39FC D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39FD 57                   ld      D,A             ; Save digit
4570+ 39FE 78                   ld      A,B             ; Get digits after point
4571+ 39FF 89                   adc     A,C             ; Add one if after point
4572+ 3A00 47                   ld      B,A             ; Re-save counter
4573+ 3A01 C5                   push    BC              ; Save point flags
4574+ 3A02 E5                   push    HL              ; Save code string address
4575+ 3A03 D5                   push    DE              ; Save digit
4576+ 3A04 CD 81 38             call    MLSP10          ; Multiply number by 10
4577+ 3A07 F1                   pop     AF              ; Restore digit
4578+ 3A08 D6 30                sub     '0'             ; Make it absolute
4579+ 3A0A CD 13 3A             call    RSCALE          ; Re-scale number
4580+ 3A0D E1                   pop     HL              ; Restore code string address
4581+ 3A0E C1                   pop     BC              ; Restore point flags
4582+ 3A0F D1                   pop     DE              ; Restore sign of exponent
4583+ 3A10 C3 B3 39             jp      MANLP           ; Get another digit
4584+ 3A13
4585+ 3A13 CD C9 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 3A16 CD AA 38             call    FLGREL          ; Digit to add to FPREG
4587+ 3A19 C1           PADD:   pop     BC              ; Restore number
4588+ 3A1A D1                   pop     DE
4589+ 3A1B C3 01 36             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 3A1E
4591+ 3A1E 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 3A1F 07                   rlca                    ; Times 2
4593+ 3A20 07                   rlca                    ; Times 4
4594+ 3A21 83                   add     A,E             ; Times 5
4595+ 3A22 07                   rlca                    ; Times 10
4596+ 3A23 86                   add     A,(HL)          ; Add next digit
4597+ 3A24 D6 30                sub     '0'             ; Make it absolute
4598+ 3A26 5F                   ld      E,A             ; Save new digit
4599+ 3A27 C3 C9 39             jp      EXPLP           ; Look for another digit
4600+ 3A2A
4601+ 3A2A E5           LINEIN: push    HL              ; Save code string address
4602+ 3A2B 21 2A 20             ld      HL,INMSG        ; Output " in "
4603+ 3A2E CD 93 2F             call    PRS             ; Output string at HL
4604+ 3A31 E1                   pop     HL              ; Restore code string address
4605+ 3A32 EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 3A33 AF                   xor     A
4607+ 3A34 06 98                ld      B,$80+24        ; 24 bits
4608+ 3A36 CD AF 38             call    RETINT          ; Return the integer
4609+ 3A39 21 92 2F             ld      HL,PRNUMS       ; Print number string
4610+ 3A3C E5                   push    HL              ; Save for return
4611+ 3A3D              ; conmvert FP number into ASCII chars
4612+ 3A3D 21 5E 82     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 3A40 E5                   push    HL              ; Save for return
4614+ 3A41 CD 98 38             call    TSTSGN          ; Test sign of FPREG
4615+ 3A44 36 20                ld      (HL),SPC        ; Space at start
4616+ 3A46 F2 4B 3A             jp      P,SPCFST        ; Positive - Space to start
4617+ 3A49 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 3A4B 23           SPCFST: inc     HL              ; First byte of number
4619+ 3A4C 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 3A4E CA 01 3B             jp      Z,JSTZER        ; Return '0' if zero
4621+ 3A51 E5                   push    HL              ; Save buffer address
4622+ 3A52 FC C1 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A55 AF                   xor     A               ; Zero A
4624+ 3A56 F5                   push    AF              ; Save it
4625+ 3A57 CD 07 3B             call    RNGTST          ; Test number is in range
4626+ 3A5A 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A5D 11 F8 4F             ld      DE,$4FF8
4628+ 3A60 CD 13 39             call    CMPNUM          ; Compare numbers
4629+ 3A63 B7                   or      A
4630+ 3A64 E2 78 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A67 F1                   pop     AF              ; Restore count
4632+ 3A68 CD F5 39             call    MULTEN          ; Multiply by ten
4633+ 3A6B F5                   push    AF              ; Re-save count
4634+ 3A6C C3 5A 3A             jp      SIXDIG          ; Test it again
4635+ 3A6F
4636+ 3A6F CD E0 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A72 F1                   pop     AF              ; Get count
4638+ 3A73 3C                   inc     A               ; Count divides
4639+ 3A74 F5                   push    AF              ; Re-save count
4640+ 3A75 CD 07 3B             call    RNGTST          ; Test number is in range
4641+ 3A78 CD EF 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A7B 3C                   inc     A
4643+ 3A7C CD 40 39             call    FPINT           ; F.P to integer
4644+ 3A7F CD D9 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A82 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A85 F1                   pop     AF              ; Restore count
4647+ 3A86 81                   add     A,C             ; 6 digits before point
4648+ 3A87 3C                   inc     A               ; Add one
4649+ 3A88 FA 94 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A8B FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A8D D2 94 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A90 3C                   inc     A               ; Adjust for exponent
4653+ 3A91 47                   ld      B,A             ; Exponent of number
4654+ 3A92 3E 02                ld      A,2             ; Make it zero after
4655+ 3A94
4656+ 3A94 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A95 3D                   dec     A
4658+ 3A96 E1                   pop     HL              ; Restore buffer address
4659+ 3A97 F5                   push    AF              ; Save count
4660+ 3A98 11 1A 3B             ld      DE,POWERS       ; Powers of ten
4661+ 3A9B 05                   dec     B               ; Count digits before point
4662+ 3A9C C2 A5 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A9F 36 2E                ld      (HL),'.'        ; Save point
4664+ 3AA1 23                   inc     HL              ; Move on
4665+ 3AA2 36 30                ld      (HL),'0'        ; Save zero
4666+ 3AA4 23                   inc     HL              ; Move on
4667+ 3AA5 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3AA6 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3AA8 CC EE 38             call    Z,INCHL         ; Last digit - move on
4670+ 3AAB C5                   push    BC              ; Save digits before point
4671+ 3AAC E5                   push    HL              ; Save buffer address
4672+ 3AAD D5                   push    DE              ; Save powers of ten
4673+ 3AAE CD E4 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3AB1 E1                   pop     HL              ; Powers of ten table
4675+ 3AB2 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3AB4 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3AB5 7B                   ld      A,E             ; Get LSB
4678+ 3AB6 96                   sub     (HL)            ; Subtract LSB
4679+ 3AB7 5F                   ld      E,A             ; Save LSB
4680+ 3AB8 23                   inc     HL
4681+ 3AB9 7A                   ld      A,D             ; Get NMSB
4682+ 3ABA 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3ABB 57                   ld      D,A             ; Save NMSB
4684+ 3ABC 23                   inc     HL
4685+ 3ABD 79                   ld      A,C             ; Get MSB
4686+ 3ABE 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3ABF 4F                   ld      C,A             ; Save MSB
4688+ 3AC0 2B                   dec     HL              ; Point back to start
4689+ 3AC1 2B                   dec     HL
4690+ 3AC2 D2 B4 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3AC5 CD A6 36             call    PLUCDE          ; Restore number
4692+ 3AC8 23                   inc     HL              ; Start of next number
4693+ 3AC9 CD D9 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3ACC EB                   ex      DE,HL           ; Save point in table
4695+ 3ACD E1                   pop     HL              ; Restore buffer address
4696+ 3ACE 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3ACF 23                   inc     HL              ; And move on
4698+ 3AD0 C1                   pop     BC              ; Restore digit count
4699+ 3AD1 0D                   dec     C               ; Count digits
4700+ 3AD2 C2 A5 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3AD5 05                   dec     B               ; Any decimal part?
4702+ 3AD6 CA E5 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3AD9 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3ADA 7E                   ld      A,(HL)          ; Get character
4705+ 3ADB FE 30                cp      '0'             ; '0' character?
4706+ 3ADD CA D9 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3AE0 FE 2E                cp      '.'             ; A decimal point?
4708+ 3AE2 C4 EE 38             call    NZ,INCHL        ; Move back over digit
4709+ 3AE5
4710+ 3AE5 F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3AE6 CA 04 3B             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3AE9 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3AEB 23                   inc     HL              ; And move on
4714+ 3AEC 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3AEE F2 F5 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3AF1 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3AF3 2F                   cpl                     ; Negate exponent
4718+ 3AF4 3C                   inc     A
4719+ 3AF5 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AF7 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3AF8 D6 0A                sub     $0A             ; Tens digit
4722+ 3AFA D2 F7 3A             jp      NC,EXPTEN       ; More to do
4723+ 3AFD C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3AFF 23                   inc     HL              ; Move on
4725+ 3B00 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3B01 23           JSTZER: inc     HL              ;
4727+ 3B02 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3B03 23                   inc     HL
4729+ 3B04 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3B05 E1                   pop     HL              ; Restore code string address
4731+ 3B06 C9                   ret
4732+ 3B07
4733+ 3B07 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3B0A 11 F7 23             ld      DE,$23F7
4735+ 3B0D CD 13 39             call    CMPNUM          ; Compare numbers
4736+ 3B10 B7                   or      A
4737+ 3B11 E1                   pop     HL              ; Return address to HL
4738+ 3B12 E2 6F 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3B15 E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3B16
4741+ 3B16 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3B1A
4743+ 3B1A A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3B1D 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3B20 E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3B23 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3B26 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3B29 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3B2C
4750+ 3B2C 21 C1 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3B2F E3                   ex      (SP),HL         ; To be done after caller
4752+ 3B30 E9                   jp      (HL)            ; Return to caller
4753+ 3B31
4754+ 3B31 CD C9 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3B34 21 16 3B             ld      HL,HALF         ; Set power to 1/2
4756+ 3B37 CD D6 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3B3A
4758+ 3B3A C1           POWER:  pop     BC              ; Get base
4759+ 3B3B D1                   pop     DE
4760+ 3B3C CD 98 38             call    TSTSGN          ; Test sign of power
4761+ 3B3F 78                   ld      A,B             ; Get exponent of base
4762+ 3B40 CA 7F 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3B43 F2 4A 3B             jp      P,POWER1        ; Positive base - Ok
4764+ 3B46 B7                   or      A               ; Zero to negative power?
4765+ 3B47 CA B4 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3B4A B7           POWER1: or      A               ; Base zero?
4767+ 3B4B CA 68 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3B4E D5                   push    DE              ; Save base
4769+ 3B4F C5                   push    BC
4770+ 3B50 79                   ld      A,C             ; Get MSB of base
4771+ 3B51 F6 7F                or      %01111111       ; Get sign status
4772+ 3B53 CD E4 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B56 F2 67 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B59 D5                   push    DE              ; Save power
4775+ 3B5A C5                   push    BC
4776+ 3B5B CD 6B 39             call    INT             ; Get integer of power
4777+ 3B5E C1                   pop     BC              ; Restore power
4778+ 3B5F D1                   pop     DE
4779+ 3B60 F5                   push    AF              ; MSB of base
4780+ 3B61 CD 13 39             call    CMPNUM          ; Power an integer?
4781+ 3B64 E1                   pop     HL              ; Restore MSB of base
4782+ 3B65 7C                   ld      A,H             ; but don't affect flags
4783+ 3B66 1F                   rra                     ; Exponent odd or even?
4784+ 3B67 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B68 22 5B 82             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B6B E1                   pop     HL              ; LSBs of base
4787+ 3B6C 22 59 82             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B6F DC 2C 3B             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B72 CC C1 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B75 D5                   push    DE              ; Save power
4791+ 3B76 C5                   push    BC
4792+ 3B77 CD FB 36             call    LOG             ; Get LOG of base
4793+ 3B7A C1                   pop     BC              ; Restore power
4794+ 3B7B D1                   pop     DE
4795+ 3B7C CD 3C 37             call    FPMULT          ; Multiply LOG by power
4796+ 3B7F
4797+ 3B7F CD C9 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B82 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B85 11 3B AA             ld      DE,$AA3B
4800+ 3B88 CD 3C 37             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B8B 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4802+ 3B8E FE 88                cp      $80+8           ; Is it in range?
4803+ 3B90 D2 74 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B93 CD 6B 39             call    INT             ; Get INT of FPREG
4805+ 3B96 C6 80                add     A,$80           ; For excess 128
4806+ 3B98 C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B9A DA 74 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B9D F5                   push    AF              ; Save scaling factor
4809+ 3B9E 21 EA 36             ld      HL,UNITY        ; Point to 1.
4810+ 3BA1 CD F2 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3BA4 CD 33 37             call    MULLN2          ; Multiply by LN(2)
4812+ 3BA7 F1                   pop     AF              ; Restore scaling factor
4813+ 3BA8 C1                   pop     BC              ; Restore exponent
4814+ 3BA9 D1                   pop     DE
4815+ 3BAA F5                   push    AF              ; Save scaling factor
4816+ 3BAB CD FE 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3BAE CD C1 38             call    INVSGN          ; Negate result
4818+ 3BB1 21 BF 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3BB4 CD EF 3B             call    SMSER1          ; Sum the series
4820+ 3BB7 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3BBA C1                   pop     BC              ; Scaling factor
4822+ 3BBB 4A                   ld      C,D             ; Zero MSB
4823+ 3BBC C3 3C 37             jp      FPMULT          ; Scale result to correct value
4824+ 3BBF
4825+ 3BBF 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3BC0 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3BC4 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3BC8 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3BCC E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3BD0 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3BD4 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3BD8 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3BDC 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3BE0
4835+ 3BE0 CD C9 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3BE3 11 3A 37             ld      DE,MULT         ; Multiply by "X"
4837+ 3BE6 D5                   push    DE              ; To be done after
4838+ 3BE7 E5                   push    HL              ; Save address of table
4839+ 3BE8 CD E4 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3BEB CD 3C 37             call    FPMULT          ; Square the value
4841+ 3BEE E1                   pop     HL              ; Restore address of table
4842+ 3BEF CD C9 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BF2 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BF3 23                   inc     HL              ; Point to start of table
4845+ 3BF4 CD D6 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BF7 06                   defb    06H             ; Skip "pop AF"
4847+ 3BF8 F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BF9 C1                   pop     BC              ; Restore number
4849+ 3BFA D1                   pop     DE
4850+ 3BFB 3D                   dec     A               ; Cont coefficients
4851+ 3BFC C8                   ret     Z               ; All done
4852+ 3BFD D5                   push    DE              ; Save number
4853+ 3BFE C5                   push    BC
4854+ 3BFF F5                   push    AF              ; Save count
4855+ 3C00 E5                   push    HL              ; Save address in table
4856+ 3C01 CD 3C 37             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3C04 E1                   pop     HL              ; Restore address in table
4858+ 3C05 CD E7 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3C08 E5                   push    HL              ; Save address in table
4860+ 3C09 CD 01 36             call    FPADD           ; Add coefficient to FPREG
4861+ 3C0C E1                   pop     HL              ; Restore address in table
4862+ 3C0D C3 F8 3B             jp      SUMLP           ; More coefficients
4863+ 3C10
4864+ 3C10
4865+ 3C10              ; random number generator
4866+ 3C10              ; a negative argument is used as a seed for the RNG
4867+ 3C10              ; 0 is used to repeat the last random number
4868+ 3C10              ; a positive argument generates a new random number
4869+ 3C10 CD 98 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3C13 21 7A 80             ld      HL,SEED+2       ; Random number seed
4871+ 3C16 FA 71 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3C19 21 9B 80             ld      HL,LSTRND       ; Last random number
4873+ 3C1C CD D6 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3C1F 21 7A 80             ld      HL,SEED+2       ; Random number seed
4875+ 3C22 C8                   ret     Z               ; Return if RND(0)
4876+ 3C23 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3C24 E6 07                and     %00000111       ; 0 to 7
4878+ 3C26 06 00                ld      B,$00
4879+ 3C28 77                   ld      (HL),A          ; Re-save seed
4880+ 3C29 23                   inc     HL              ; Move to coefficient table
4881+ 3C2A 87                   add     A,A             ; 4 bytes
4882+ 3C2B 87                   add     A,A             ; per entry
4883+ 3C2C 4F                   ld      C,A             ; BC = Offset into table
4884+ 3C2D 09                   add     HL,BC           ; Point to coefficient
4885+ 3C2E CD E7 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3C31 CD 3C 37             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3C34 3A 79 80             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3C37 3C                   inc     A               ; Add 1
4889+ 3C38 E6 03                and     %00000011       ; 0 to 3
4890+ 3C3A 06 00                ld      B,$00
4891+ 3C3C FE 01                cp      $01             ; Is it zero?
4892+ 3C3E 88                   adc     A,B             ; Yes - Make it 1
4893+ 3C3F 32 79 80             ld      (SEED+1),A      ; Re-save seed
4894+ 3C42 21 75 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3C45 87                   add     A,A             ; 4 bytes
4896+ 3C46 87                   add     A,A             ; per entry
4897+ 3C47 4F                   ld      C,A             ; BC = Offset into table
4898+ 3C48 09                   add     HL,BC           ; Point to value
4899+ 3C49 CD F2 35             call    ADDPHL          ; Add value to FPREG
4900+ 3C4C CD E4 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3C4F 7B                   ld      A,E             ; Get LSB
4902+ 3C50 59                   ld      E,C             ; LSB = MSB
4903+ 3C51 EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C53 4F                   ld      C,A             ; New MSB
4905+ 3C54 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C56 2B                   dec     HL              ; Point to MSB
4907+ 3C57 46                   ld      B,(HL)          ; Get MSB
4908+ 3C58 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C5A 21 78 80             ld      HL,SEED         ; Random number seed
4910+ 3C5D 34                   inc     (HL)            ; Count seed
4911+ 3C5E 7E                   ld      A,(HL)          ; Get seed
4912+ 3C5F D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C61 C2 68 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C64 77                   ld      (HL),A          ; Zero seed
4915+ 3C65 0C                   inc     C               ; Fillde about
4916+ 3C66 15                   dec     D               ; with the
4917+ 3C67 1C                   inc     E               ; number
4918+ 3C68 CD 52 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C6B 21 9B 80             ld      HL,LSTRND       ; Save random number
4920+ 3C6E C3 F0 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C71
4922+ 3C71 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C72 2B                   dec     HL
4924+ 3C73 77                   ld      (HL),A
4925+ 3C74 2B                   dec     HL
4926+ 3C75 77                   ld      (HL),A
4927+ 3C76 C3 4C 3C             jp      RND1            ; Return RND seed
4928+ 3C79
4929+ 3C79 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C7D 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C81 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C85
4933+ 3C85              ; COS and SIN functions
4934+ 3C85 21 CF 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C88 CD F2 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C8B CD C9 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C8E 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C91 11 DB 0F             ld      DE,$0FDB
4939+ 3C94 CD D9 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C97 C1                   pop     BC              ; Restore angle
4941+ 3C98 D1                   pop     DE
4942+ 3C99 CD EE 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C9C CD C9 38             call    STAKFP          ; Put it on stack
4944+ 3C9F CD 6B 39             call    INT             ; Get INT of result
4945+ 3CA2 C1                   pop     BC              ; Restore number
4946+ 3CA3 D1                   pop     DE
4947+ 3CA4 CD FE 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3CA7 21 D3 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3CAA CD F8 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3CAD CD 98 38             call    TSTSGN          ; Test sign of value
4951+ 3CB0 37                   scf                     ; Flag positive
4952+ 3CB1 F2 BB 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3CB4 CD EF 35             call    ROUND           ; Add 0.5 to value
4954+ 3CB7 CD 98 38             call    TSTSGN          ; Test sign of value
4955+ 3CBA B7                   or      A               ; Flag negative
4956+ 3CBB F5           SIN1:   push    AF              ; Save sign
4957+ 3CBC F4 C1 38             call    P,INVSGN        ; Negate value if positive
4958+ 3CBF 21 D3 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3CC2 CD F2 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3CC5 F1                   pop     AF              ; Restore sign
4961+ 3CC6 D4 C1 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3CC9 21 D7 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3CCC C3 E0 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3CCF
4965+ 3CCF DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3CD3
4967+ 3CD3 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3CD7
4969+ 3CD7 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3CD8 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3CDC 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3CE0 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3CE4 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3CE8 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3CEC
4976+ 3CEC CD C9 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3CEF CD 8B 3C             call    SIN             ; Get SIN of angle
4978+ 3CF2 C1                   pop     BC              ; Restore angle
4979+ 3CF3 E1                   pop     HL
4980+ 3CF4 CD C9 38             call    STAKFP          ; Save SIN of angle
4981+ 3CF7 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CF8 CD D9 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CFB CD 85 3C             call    COS             ; Get COS of angle
4984+ 3CFE C3 EC 37             jp      DIV             ; TAN = SIN / COS
4985+ 3D01
4986+ 3D01 CD 98 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3D04 FC 2C 3B             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3D07 FC C1 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3D0A 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4990+ 3D0D FE 81                cp      81H             ; Number less than 1?
4991+ 3D0F DA 1E 3D             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3D12 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3D15 51                   ld      D,C
4994+ 3D16 59                   ld      E,C
4995+ 3D17 CD EE 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3D1A 21 F8 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3D1D E5                   push    HL              ; Save for angle > 1
4998+ 3D1E 21 28 3D     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3D21 CD E0 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3D24 21 CF 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3D27 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3D28
5003+ 3D28 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3D29 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3D2D 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3D31 FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3D35 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3D39 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3D3D C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3D41 E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3D45 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3D49 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3D4D
5014+ 3D4D
5015+ 3D4D C9           ARET:   ret                     ; A RETurn instruction
5016+ 3D4E
5017+ 3D4E D7           GETINP: rst     $10             ; input a character
5018+ 3D4F C9                   ret
5019+ 3D50
5020+ 3D50 E5           CLS:    push    HL
5021+ 3D51 D5                   push    DE
5022+ 3D52 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D55 FE 02                cp      $02             ; G2 mode?
5024+ 3D57 CC F5 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D5A D1                   pop     DE
5026+ 3D5B E1                   pop     HL
5027+ 3D5C 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D5E CD EF 23             call    SND2VID         ; send to screen
5029+ 3D61 C3 17 4D             jp      MONOUT          ; Output character
5030+ 3D64
5031+ 3D64 CD 11 33     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D67 7B                   ld      A,E             ; Width to A
5033+ 3D68 32 A2 80             ld      (LWIDTH),A      ; Set width
5034+ 3D6B C9                   ret
5035+ 3D6C
5036+ 3D6C
5037+ 3D6C              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D6C              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D6C CD B0 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D6F D5                   push    DE              ; Save number
5041+ 3D70 E1                   pop     HL              ; Number to HL
5042+ 3D71 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D72 23                   inc     HL
5044+ 3D73 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D74 C3 75 2E             jp      ABPASS          ; Return integer AB
5046+ 3D77
5047+ 3D77              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D77              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D77 CD 8B 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D7A CD B0 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D7D D5                   push    DE              ; Save address
5052+ 3D7E CD B1 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D81 2C                   defb    ','
5054+ 3D82 CD 8B 2A             call    GETNUM          ; Get a number
5055+ 3D85 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D88 E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D89 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D8A 23                   inc     HL
5059+ 3D8B 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D8C E1                   pop     HL              ; Restore code string address
5061+ 3D8D C9                   ret
5062+ 3D8E
5063+ 3D8E              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D8E              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D8E CD 8B 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D91 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D94 7A                   ld      A,D             ; load D into A
5068+ 3D95 B3                   or      E               ; are D & E equal to $00?
5069+ 3D96 C8                   ret     Z               ; if yes, then return
5070+ 3D97 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D98 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D9B 47                   ld      B,A             ; move it into B
5073+ 3D9C CD 25 26     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D9F 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3DA2 B8                   cp      B               ; is it the same value?
5076+ 3DA3 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3DA5 47                   ld      B,A             ; no, so store the new value
5078+ 3DA6 1B                   dec     DE              ; decrement interval
5079+ 3DA7 7A                   ld      A,D             ; load D into A
5080+ 3DA8 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3DA9 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3DAB C1                   pop     BC              ; yes, recover BC and continue
5083+ 3DAC C9                   ret
5084+ 3DAD
5085+ 3DAD              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3DAD              ; where X is graphic mode:
5087+ 3DAD              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3DAD              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3DAD              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3DAD              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3DAD              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3DAD AF           SCREEN: xor     A
5093+ 3DAE 32 07 82             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3DB1 CD 11 33             call    GETINT          ; Get integer 0-255
5095+ 3DB4 FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3DB6 D2 C5 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3DB9 32 05 82             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3DBC A7                   and     A               ; is it 0 (text mode)?
5099+ 3DBD CA D9 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3DC0 CD 18 3E     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3DC3 DA CB 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3DC6 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3DC8 32 07 82             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3DCB CD 18 3E     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3DCE DA D9 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3DD1 3A 07 82             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3DD4 F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3DD6 32 07 82             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3DD9 F3           SCVDP:  di                      ; disable INTs
5110+ 3DDA D5                   push    DE              ; store DE
5111+ 3DDB E5                   push    HL              ; store HL
5112+ 3DDC 3A 05 82             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3DDF 5F                   ld      E,A             ; and store it into E
5114+ 3DE0 3A 07 82             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3DE3 57                   ld      D,A             ; and store them into D
5116+ 3DE4 D5                   push    DE              ; store D & E
5117+ 3DE5 CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3DE8 D1                   pop     DE              ; retrieve D & E
5119+ 3DE9 7B                   ld      A,E             ; move graphic mode into A
5120+ 3DEA 87                   add     A,A
5121+ 3DEB 87                   add     A,A
5122+ 3DEC 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3DED 5F                   ld      E,A             ; and pass it into E
5124+ 3DEE D5                   push    DE              ; store sprite flags in E
5125+ 3DEF 16 00                ld      D,$00           ; reset D
5126+ 3DF1 21 44 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DF4 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DF5 D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DF6 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DF7 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DF9 B2                   or      D               ; set size & magn. bits
5132+ 3DFA 5F                   ld      E,A             ; value into E
5133+ 3DFB 3E 01                ld      A,$01           ; reg #1
5134+ 3DFD CD D1 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3E00 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
5136+ 3E03 23                   inc     HL              ; -1 means direct statement
5137+ 3E04 7C                   ld      A,H
5138+ 3E05 B5                   or      L
5139+ 3E06 CC 44 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3E09 FB                   ei                      ; re-enable interrupts
5141+ 3E0A E1                   pop     HL              ; restore HL
5142+ 3E0B D1                   pop     DE              ; restore DE
5143+ 3E0C 3A F6 81             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3E0F FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3E11 D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3E12 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3E14 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3E17 C9                   ret                     ; ...and return to caller
5149+ 3E18
5150+ 3E18              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3E18              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3E18              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3E18 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3E19 CD FA 25             call    GETCHR          ; Get next character
5155+ 3E1C 37                   scf                     ; set carry flag
5156+ 3E1D C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3E1E CD B1 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3E21 2C                   defb    ','
5159+ 3E22 CD 11 33             call    GETINT          ; get value
5160+ 3E25 1F                   rra                     ; Carry=bit #0
5161+ 3E26 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3E27 C9                   ret                     ; return
5163+ 3E28
5164+ 3E28
5165+ 3E28              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3E28              ; a=foreground color / b=background color / c=border color
5167+ 3E28              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3E28              ; the number of arguments is based on the current screen mode
5169+ 3E28 CD 11 33     COLOR:  call    GETINT          ; get first value
5170+ 3E2B CD D1 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3E2E 32 05 82             ld      (TMPBFR1),A     ; store it
5172+ 3E31 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3E34 FE 03                cp      $03             ; is it multicolor mode?
5174+ 3E36 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3E38 3E 0F                ld      A,$0F           ; white for...
5176+ 3E3A 32 03 82             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3E3D 3A 05 82             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3E40 32 09 82             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3E43 18 31                jr      CLRMC           ; jump to set color
5180+ 3E45 CD B1 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3E48 2C                   defb    ','
5182+ 3E49 CD 11 33             call    GETINT          ; get second value
5183+ 3E4C CD D1 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3E4F 32 07 82             ld      (TMPBFR2),A     ; store it
5185+ 3E52 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E55 A7                   and     A               ; is it text mode?
5187+ 3E56 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E58 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E5B 2C                   defb    ','
5190+ 3E5C CD 11 33             call    GETINT          ; get third value
5191+ 3E5F CD D1 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E62 32 09 82             ld      (TMPBFR3),A     ; store it
5193+ 3E65 D5                   push    DE              ; store DE
5194+ 3E66 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E69 FE 01                cp      $01             ; is it G1 mode?
5196+ 3E6B 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E6D FE 02                cp      $02             ; is it G2 mode?
5198+ 3E6F 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E71 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E73 CD C4 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E76 32 09 82     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E79 D5                   push    DE              ; store DE
5203+ 3E7A F3                   di                      ; disable INTs
5204+ 3E7B 18 2E                jr      SETBRCL         ; set colors and exit
5205+ 3E7D CD C4 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E80 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E82 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E84 18 10                jr      LOADCLR         ; load colors
5209+ 3E86 CD C4 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E89 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E8B 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E8D 18 07                jr      LOADCLR         ; load colors
5213+ 3E8F CD C4 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E92 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E94 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E96 E5           LOADCLR:push    HL              ; store HL
5217+ 3E97 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E9A F3                   di                      ; disable INTs
5219+ 3E9B CD 87 06             call    SETVDPADRS
5220+ 3E9E 0E 30                ld      C,VDP_DAT              ; VDP data mode
5221+ 3EA0 ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3EA2 00                   nop
5223+ 3EA3 00                   nop
5224+ 3EA4 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3EA6 15                   dec     D               ; did we fill up all the pages?
5226+ 3EA7 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3EA9 FB                   ei
5228+ 3EAA E1                   pop     HL              ; retrieve HL
5229+ 3EAB 3A 05 82     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3EAE 32 03 82             ld      (FRGNDCLR),A    ; store it
5231+ 3EB1 3A 07 82             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3EB4 32 04 82             ld      (BKGNDCLR),A    ; store it
5233+ 3EB7 3A 09 82             ld      A,(TMPBFR3)     ; recover border color
5234+ 3EBA 5F                   ld      E,A             ; move it into E
5235+ 3EBB 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3EBD F3                   di
5237+ 3EBE CD D1 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3EC1 FB                   ei                      ; re-enable INTs
5239+ 3EC2 D1                   pop     DE              ; retrieve DE
5240+ 3EC3 C9                   ret                     ; return to caller
5241+ 3EC4
5242+ 3EC4
5243+ 3EC4              ; mix 2 color nibbles in 1 byte
5244+ 3EC4 3A 07 82     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3EC7 47                   ld      B,A             ; move it into B
5246+ 3EC8 3A 05 82             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3ECB 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3ECC 87                   add     A,A
5249+ 3ECD 87                   add     A,A
5250+ 3ECE 87                   add     A,A
5251+ 3ECF B0                   or      B               ; put background color into the low nibble of A
5252+ 3ED0 C9                   ret                     ; return to caller
5253+ 3ED1
5254+ 3ED1
5255+ 3ED1              ; check if the color is not 0 and into the range 1~15
5256+ 3ED1 A7           CHKCLR1:and     A               ; is it 0?
5257+ 3ED2 CA B1 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3ED5 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3ED7 D2 B1 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3EDA C9                   ret                     ; param is OK, can return
5261+ 3EDB
5262+ 3EDB
5263+ 3EDB              ; check if in graphics 2 mode
5264+ 3EDB 3A F7 81     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3EDE FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3EE0 C2 EA 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3EE3 C9                   ret                     ; return to caller
5268+ 3EE4
5269+ 3EE4
5270+ 3EE4              ; print a text in screen 2
5271+ 3EE4              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3EE4              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3EE4              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3EE4              ; colors (1~15), resp.
5275+ 3EE4              ; (portions of code are from nippur72)
5276+ 3EE4              GX      equ     TMPBFR3
5277+ 3EE4              GY      equ     TMPBFR4
5278+ 3EE4              TMPCLR  equ     TMPBFR2
5279+ 3EE4              MIXCOL  equ     TMPBFR1
5280+ 3EE4              TMPADR  equ     VIDEOBUFF
5281+ 3EE4              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3EE4              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3EE4              TMPHL   equ     VIDEOBUFF+$06
5284+ 3EE4 CD DB 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3EE7 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3EE8 CD FA 25             call    GETCHR          ; check if something follows
5287+ 3EEB CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3EEE 22 0D 82             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3EF1 CD 9D 2A             call    EVAL            ; Evaluate expression
5290+ 3EF4 CD 8F 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3EF7 22 13 82             ld      (TMPHL),HL      ; store code string pointer
5292+ 3EFA CD D6 30             call    GSTRCU          ; Current string to pool
5293+ 3EFD CD E7 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3F00 ED 43 0F 82          ld      (CHRPNT),BC     ; store string pointer
5295+ 3F04 ED 53 11 82          ld      (NUMCHR),DE     ; store string lenght
5296+ 3F08 2A 13 82             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3F0B CD B1 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3F0E 2C                   defb    ','
5299+ 3F0F CD 11 33             call    GETINT          ; get X coord.
5300+ 3F12 FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3F14 D2 C5 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3F17 32 09 82             ld      (GX),A          ; store into temp. buffer
5303+ 3F1A CD B1 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3F1D 2C                   defb    ','
5305+ 3F1E CD 11 33             call    GETINT          ; get Y coord.
5306+ 3F21 FE 18                cp      $18             ; is it in range 0~23?
5307+ 3F23 D2 C5 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3F26 32 0B 82             ld      (GY),A          ; store into temp. buffer
5309+ 3F29 11 07 82             ld      DE,TMPCLR
5310+ 3F2C 3A 04 82             ld      A,(BKGNDCLR)    ; load background color
5311+ 3F2F 12                   ld      (DE),A          ; store into temp buff
5312+ 3F30 3A 03 82             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3F33 1B                   dec     DE
5314+ 3F34 1B                   dec     DE
5315+ 3F35 12                   ld      (DE),A          ; store into temp buff
5316+ 3F36 CD C2 3F             call    CKCOL           ; check color
5317+ 3F39 CA 41 3F             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3F3C 13                   inc     DE
5319+ 3F3D 13                   inc     DE
5320+ 3F3E CD C2 3F             call    CKCOL           ; check background color
5321+ 3F41 CD C4 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3F44 32 05 82             ld      (MIXCOL),A      ; store mixed colors
5323+ 3F47 E5                   push    HL              ; store code string address
5324+ 3F48 ED 4B 0F 82          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3F4C ED 5B 11 82          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3F50 1C                   inc     E               ; Length + 1
5327+ 3F51 CD 56 3F             call    GPNT            ; print on G2
5328+ 3F54 E1                   pop     HL              ; recover HL
5329+ 3F55 C9                   ret                     ; return to caller
5330+ 3F56 D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F57                      ; calculate VRAM address of first char
5332+ 3F57 3A 09 82             LD      A,(GX)          ; load X
5333+ 3F5A 6F                   ld      L,A             ;
5334+ 3F5B 26 00                ld      H,0             ; HL = X
5335+ 3F5D 29                   add     HL,HL           ;
5336+ 3F5E 29                   add     HL,HL           ;
5337+ 3F5F 29                   add     HL,HL           ; X=X*8
5338+ 3F60 3A 0B 82             ld      A,(GY)          ; load Y
5339+ 3F63 57                   ld      D,A             ; move it into D
5340+ 3F64 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F66 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F67 22 0D 82             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F6A D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F6B 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F6C C8                   ret     Z               ; End of string - return
5346+ 3F6D D5                   push    DE              ; store chars counter
5347+ 3F6E                      ; calculate dest address in color vram
5348+ 3F6E 2A 0D 82             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F71 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F74 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F75 F3                   di                      ; disable INTs
5352+ 3F76                      ; send color settings
5353+ 3F76 CD 87 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F79 3A 05 82             ld      A,(MIXCOL)      ; load color settings
5355+ 3F7C 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F7E 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F80 ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F82 00                   nop                     ; wait...
5359+ 3F83 00                   nop                     ; ...a...
5360+ 3F84 00                   nop                     ; ...while
5361+ 3F85 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F87                      ; calculate source address
5363+ 3F87 2A 0F 82             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F8A 7E                   ld      A,(HL)          ; get char
5365+ 3F8B 23                   inc     HL              ; increment char pointer
5366+ 3F8C 22 0F 82             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F8F 6F                   ld      L,A             ;
5368+ 3F90 26 00                ld      H,$00           ; char into HL
5369+ 3F92 29                   add     HL,HL           ;
5370+ 3F93 29                   add     HL,HL           ;
5371+ 3F94 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F95 11 7B 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F98 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F99 EB                   ex      DE,HL           ; store address into DE
5375+ 3F9A 2A 0D 82     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F9D CD 87 06             call    SETVDPADRS      ; send it to VDP
5377+ 3FA0 EB                   ex      DE,HL           ; restore address into HL
5378+ 3FA1 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3FA3 0E 30                ld      C,VDP_DAT              ; VDP data mode
5380+ 3FA5 ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3FA7 00                   nop                     ; wait...
5382+ 3FA8 00                   nop                     ; ...a...
5383+ 3FA9 00                   nop                     ; ...while
5384+ 3FAA 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3FAC FB                   ei                      ; re-enable INTs
5386+ 3FAD 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3FB0 2A 0D 82             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3FB3 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3FB4 22 0D 82             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3FB7 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3FBA CD 45 4D             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3FBD D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3FBE D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3FBF C3 6B 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3FC2
5396+ 3FC2              ; used by GPRINT to get a color argument (if present)
5397+ 3FC2 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3FC3 CD FA 25             call    GETCHR          ; Get next character
5399+ 3FC6 C8                   ret     Z               ; return if nothing follows
5400+ 3FC7 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3FCA 2C                   defb    ','
5402+ 3FCB D5                   push    DE              ; store DE
5403+ 3FCC CD 11 33             call    GETINT          ; get value
5404+ 3FCF CD D1 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3FD2 D1                   pop     DE              ; retrieve DE
5406+ 3FD3 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3FD4 C9                   ret                     ; return to caller
5408+ 3FD5
5409+ 3FD5
5410+ 3FD5              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3FD5              ; at point X,Y, using default color or, if used, with
5412+ 3FD5              ; color set by C
5413+ 3FD5              ; TMPBFR1       X
5414+ 3FD5              ; TMPBFR2       Y
5415+ 3FD5              ; TMPBFR3       COLOR
5416+ 3FD5              PNT     equ     VIDEOBUFF
5417+ 3FD5              SPA     equ     VIDEOBUFF+$02
5418+ 3FD5              SPB     equ     VIDEOBUFF+$03
5419+ 3FD5              ORGSP   equ     VIDEOBUFF+$04
5420+ 3FD5 CD DB 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3FD8 CD 11 33             call    GETINT          ; get X
5422+ 3FDB 32 05 82             ld      (TMPBFR1),A     ; store X
5423+ 3FDE CD B1 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3FE1 2C                   defb    ','
5425+ 3FE2 CD 11 33             call    GETINT          ; get Y coords,
5426+ 3FE5 FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3FE7 D2 C5 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3FEA 32 07 82             ld      (TMPBFR2),A     ; store Y
5429+ 3FED CD D1 44             call    CLRPRM          ; check if color has been passed
5430+ 3FF0 3A 09 82             ld      A,(TMPBFR3)     ; load color
5431+ 3FF3 A7                   and     A               ; check if 0
5432+ 3FF4 CA C5 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FF7 E5                   push    HL              ; store HL
5434+ 3FF8 C5                   push    BC              ; store BC
5435+ 3FF9 D5                   push    DE              ; store DE
5436+ 3FFA                      ; start algorithm
5437+ 3FFA CD 0D 41             call    PNTRTN          ; check if pixel is already set
5438+ 3FFD C2 B1 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 4000 ED 73 11 82          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 4004 21 01 00             ld      HL,$0001        ; HL=1
5441+ 4007 22 0D 82             ld      (PNT),HL        ; set PNT
5442+ 400A 3A 05 82             ld      A,(TMPBFR1)     ; load starting X...
5443+ 400D 47                   ld      B,A             ; ...into B
5444+ 400E 3A 07 82             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 4011 4F                   ld      C,A             ; ...into C
5446+ 4012 C5                   push    BC              ; store starting X,Y into stack
5447+ 4013                      ; main loop
5448+ 4013 2A 0D 82     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 4016 7C                   ld      A,H             ; check if PNT=0
5450+ 4017 B5                   or      L
5451+ 4018 CA AD 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 401B 2B                   dec     HL              ; no, so decrement PNT...
5453+ 401C 22 0D 82             ld      (PNT),HL        ; ...and store it
5454+ 401F C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 4020 CD B5 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 4023 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 4025 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 4026 A7                   and     A               ; (reached the limit of the screen)
5459+ 4027 CA 2F 40             jp      Z,PAINT1        ; yes, jump over
5460+ 402A 05                   dec     B               ; no, decrement X1...
5461+ 402B C3 20 40             jp      PAINT0          ; ...and repeat
5462+ 402E 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 402F AF           PAINT1: xor     A               ; reset A
5464+ 4030 57                   ld      D,A             ; set SA=0
5465+ 4031 5F                   ld      E,A             ; set SB=0
5466+ 4032 CD B5 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 4035 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 4037 78                   ld      A,B             ; copy X1
5469+ 4038 32 05 82             ld      (TMPBFR1),A     ; into buffer
5470+ 403B 79                   ld      A,C             ; copy Y
5471+ 403C 32 07 82             ld      (TMPBFR2),A     ; into buffer
5472+ 403F CD 33 41             call    CNTPLOT         ; plot pixel X1,Y
5473+ 4042 7A                   ld      A,D             ; load SA into A
5474+ 4043 A7                   and     A               ; SA=0?
5475+ 4044 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 4046 79                   ld      A,C             ; load Y
5477+ 4047 FE 01                cp      $01             ; Y>0?
5478+ 4049 DA 62 40             jp      C,PAINT2        ; no, jump over
5479+ 404C 3D                   dec     A               ; yes, Y=Y-1
5480+ 404D CD B6 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 4050 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 4052 0D                   dec     C               ; Y=Y-1
5483+ 4053 C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 4054 0C                   inc     C               ; retrieve original Y
5485+ 4055 2A 0D 82             ld      HL,(PNT)        ; load PNT
5486+ 4058 23                   inc     HL              ; increment PNT
5487+ 4059 22 0D 82             ld      (PNT),HL        ; store new PNT
5488+ 405C 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 405E 57                   ld      D,A             ; ...store SA into memory
5490+ 405F C3 75 40             jp      PAINT3          ; jump over
5491+ 4062 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 4063 1F                   rra                     ; check if SA=1
5493+ 4064 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 4066 79                   ld      A,C             ; load Y
5495+ 4067 FE 01                cp      $01             ; Y>0?
5496+ 4069 DA 75 40             jp      C,PAINT3        ; no, jump over
5497+ 406C 3D                   dec     A               ; Y=Y-1
5498+ 406D CD B6 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 4070 CA 75 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 4073 AF                   xor     A               ; pixel is on, so...
5501+ 4074 57                   ld      D,A             ; ...set SA=0
5502+ 4075 7B           PAINT3: ld      A,E             ; check if...
5503+ 4076 A7                   and     A               ; SB=0
5504+ 4077 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 4079 79                   ld      A,C             ; load Y
5506+ 407A FE BF                cp      $BF             ; Y<191?
5507+ 407C 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 407E 3C                   inc     A               ; Y=Y+1
5509+ 407F CD B6 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 4082 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 4084 0C                   inc     C               ; Y=Y+1
5512+ 4085 C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 4086 0D                   dec     C               ; retrieve original Y
5514+ 4087 2A 0D 82             ld      HL,(PNT)        ; PNT
5515+ 408A 23                   inc     HL              ; PNT=PNT+1
5516+ 408B 22 0D 82             ld      (PNT),HL        ; store PNT
5517+ 408E 3E 01                ld      A,$01           ; SB=1
5518+ 4090 5F                   ld      E,A             ; set SB
5519+ 4091 C3 A6 40             jp      PAINT5          ; jump over
5520+ 4094 7B           PAINT4: ld      A,E             ; load SB
5521+ 4095 1F                   rra                     ; check if SB=1
5522+ 4096 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 4098 79                   ld      A,C             ; load Y
5524+ 4099 FE BF                cp      $BF             ; Y<191?
5525+ 409B 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 409D 3C                   inc     A               ; Y=Y+1
5527+ 409E CD B6 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 40A1 CA A6 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 40A4 AF                   xor     A               ; pixel is on, so...
5530+ 40A5 5F                   ld      E,A             ; ...set SB=0
5531+ 40A6 04           PAINT5: inc     B               ; X1=X1+1
5532+ 40A7 CA 13 40             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 40AA C3 32 40             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 40AD ED 7B 11 82  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 40B1 D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 40B2 C1                   pop     BC              ; retrieve BC
5537+ 40B3 E1                   pop     HL              ; retrieve HL
5538+ 40B4 C9                   ret                     ; return to caller
5539+ 40B5 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 40B6 32 07 82     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 40B9 78                   ld      A,B             ; copy X1 into A
5542+ 40BA 32 05 82             ld      (TMPBFR1),A     ; store X1
5543+ 40BD C5                   push    BC              ; save X1,Y
5544+ 40BE D5                   push    DE
5545+ 40BF CD 0D 41             call    PNTRTN          ; check if pixel is set/reset
5546+ 40C2 D1                   pop     DE
5547+ 40C3 C1                   pop     BC              ; retrieve X1,Y
5548+ 40C4 C9                   ret                     ; return to caller
5549+ 40C5
5550+ 40C5
5551+ 40C5              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 40C5 CD DB 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 40C8 CD B1 23             call    CHKSYN          ; make sure "(" follows
5554+ 40CB 28                   defb    '('
5555+ 40CC CD 11 33             call    GETINT          ; get X coords.
5556+ 40CF 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 40D2 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5558+ 40D5 2C                   defb    ','
5559+ 40D6 CD 11 33             call    GETINT          ; get Y coords,
5560+ 40D9 FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 40DB D2 C5 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 40DE 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 40E1 CD B1 23             call    CHKSYN          ; make sure ")" follows
5564+ 40E4 29                   defb    ')'
5565+ 40E5 E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 40E6 FD E1                pop     IY              ; ...into IY
5567+ 40E8 CD 0D 41             call    PNTRTN          ; check if pixel is set or reset
5568+ 40EB 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 40ED AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 40EE 47                   ld      B,A             ; ...and B
5571+ 40EF E1           PNTEND: pop     HL              ; drop original return point
5572+ 40F0 FD E5                push    IY              ; load current string address from IY into stack
5573+ 40F2 11 76 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40F5 D5                   push    DE              ; ...saved on stack
5575+ 40F6 C3 75 2E             jp      ABPASS          ; return AB
5576+ 40F9 CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40FB F3                   di
5578+ 40FC CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40FF FB                   ei
5580+ 4100 CB 3F                srl     A               ; shift A...
5581+ 4102 CB 3F                srl     A               ; ...4 times...
5582+ 4104 CB 3F                srl     A               ; ...to move foreground color...
5583+ 4106 CB 3F                srl     A               ; ...into lowest nibble
5584+ 4108 47                   ld      B,A             ; color into B
5585+ 4109 AF                   xor     A               ; reset MSB
5586+ 410A C3 EF 40             jp      PNTEND          ; return AB
5587+ 410D CD 80 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 4110 57                   ld      D,A             ; store pixel index
5589+ 4111 F3                   di                      ; disable INTs
5590+ 4112 CD A7 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 4115 FB                   ei                      ; re-enable INTs
5592+ 4116 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 4117 C9                   ret                     ; return to caller
5594+ 4118
5595+ 4118
5596+ 4118              ; PLOT X,Y[,color]
5597+ 4118              ; plot a pixel in graphic mode 2
5598+ 4118 CD DB 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 411B CD 11 33             call    GETINT          ; get X coords.
5600+ 411E 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 4121 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5602+ 4124 2C                   defb    ','
5603+ 4125 CD 11 33             call    GETINT          ; get Y coords,
5604+ 4128 FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 412A D2 C5 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 412D 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 4130 CD D1 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 4133 E5           CNTPLOT:push    HL              ; store HL
5609+ 4134 C5                   push    BC              ; store BC
5610+ 4135 D5                   push    DE              ; store DE
5611+ 4136 CD 80 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 4139 D2 74 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 413C 57                   ld      D,A             ; move pixel value into D
5614+ 413D 3A 09 82             ld      A,(TMPBFR3)     ; retrieve color
5615+ 4140 A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 4141 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 4143 F3                   di                      ; yes - so, disable INTs
5618+ 4144 CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 4147 FB                   ei                      ; re-enable INTs
5620+ 4148 5F                   ld      E,A             ; store value of cell
5621+ 4149 7A                   ld      A,D             ; retrieve pixel
5622+ 414A 2F                   cpl                     ; revert bits
5623+ 414B A3                   and     E               ; set video pixel to off
5624+ 414C F3                   di                      ; disable INTs
5625+ 414D CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 4150 FB                   ei                      ; re-enable INTs
5627+ 4151 C3 74 41             jp      NOGD            ; leave
5628+ 4154 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 4155 87                   add     A,A             ; in the high nibble
5630+ 4156 87                   add     A,A             ; by adding A to itself
5631+ 4157 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 4158 5F                   ld      E,A             ; move it into E
5633+ 4159 F3                   di                      ; disable INTs
5634+ 415A CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 415D FB                   ei
5636+ 415E B2                   or      D               ; merge new pixel preserving original pattern
5637+ 415F F3                   di
5638+ 4160 CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 4163 FB                   ei
5640+ 4164 CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 4166 F3                   di
5642+ 4167 CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 416A FB                   ei
5644+ 416B E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 416D B3                   or      E               ; set new foreground color
5646+ 416E F3                   di
5647+ 416F CD BC 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 4172 FB                   ei                      ; re-enable INTs
5649+ 4173 00                   nop                     ; wait for INTs to be enabled again
5650+ 4174 D1           NOGD:   pop     DE              ; retrieve DE
5651+ 4175 C1                   pop     BC              ; retrieve BC
5652+ 4176 E1                   pop     HL              ; retrieve HL
5653+ 4177 C9                   ret                     ; return to caller
5654+ 4178 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 417C 08 04 02 01
5655+ 4180                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 4180
5657+ 4180
5658+ 4180              ; compute the VRAM address of the byte containing the pixel
5659+ 4180              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 4180              ; byte address is returned into HL
5661+ 4180              ; pixel is returned into A
5662+ 4180              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 4180                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 4180                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 4180 3A 07 82             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 4183 FE C0                cp      $C0             ; Y>=192?
5667+ 4185 D0                   ret     NC              ; yes, so leave
5668+ 4186 1E 08                ld      E,$08           ; load E with divisor
5669+ 4188 57                   ld      D,A             ; and store into D (dividend)
5670+ 4189 CD 90 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 418C 4F                   ld      C,A             ; store remainder into C
5672+ 418D 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 418E 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 4190 3A 05 82             ld      A,(TMPBFR1)     ; retrieve X
5675+ 4193 57                   ld      D,A             ; and move it into D (dividend)
5676+ 4194 CD 90 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 4197 4F                   ld      C,A             ; store remainder into C
5678+ 4198 7A                   ld      A,D             ; move quotient into A
5679+ 4199 87                   add     A,A             ; multiply quotient by 8
5680+ 419A 87                   add     A,A
5681+ 419B 87                   add     A,A
5682+ 419C 5F                   ld      E,A             ; store result into E
5683+ 419D 16 00                ld      D,$00           ; reset D
5684+ 419F 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 41A0 EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 41A1 21 78 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 41A4 06 00                ld      B,$00           ; reset B
5688+ 41A6 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 41A7 7E                   ld      A,(HL)          ; load pixel data
5690+ 41A8 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 41A9 37                   scf                     ; set Carry for normal exit
5692+ 41AA C9                   ret                     ; return to caller
5693+ 41AB
5694+ 41AB
5695+ 41AB              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 41AB              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 41AB              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 41AB              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 41AB              ; the values. If color is not specified, the foreground color set
5700+ 41AB              ; with COLOR will be used
5701+ 41AB              X1      equ     TMPBFR1
5702+ 41AB              Y1      equ     TMPBFR2
5703+ 41AB              X2      equ     VIDEOBUFF
5704+ 41AB              Y2      equ     VIDEOBUFF+$02
5705+ 41AB              ER      equ     VIDEOBUFF+$04
5706+ 41AB              E2      equ     VIDEOBUFF+$06
5707+ 41AB              SX      equ     VIDEOBUFF+$08
5708+ 41AB              SY      equ     VIDEOBUFF+$0A
5709+ 41AB              DX      equ     VIDEOBUFF+$0C
5710+ 41AB              DY      equ     VIDEOBUFF+$0E
5711+ 41AB CD DB 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 41AE CD B3 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 41B1 CD C2 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 41B4 CD 11 33             call    GETINT          ; get X1 coords.
5715+ 41B7 32 05 82             ld      (X1),A          ; store it into a temp buffer
5716+ 41BA CD B1 23             call    CHKSYN          ; Make sure ',' follows
5717+ 41BD 2C                   defb    ','
5718+ 41BE CD 11 33             call    GETINT          ; get Y1 coords.
5719+ 41C1 FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 41C3 D2 C5 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 41C6 32 07 82             ld      (Y1),A          ; store into a temp buffer
5722+ 41C9 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5723+ 41CC 2C                   defb    ','
5724+ 41CD CD 11 33             call    GETINT          ; get X2 coords.
5725+ 41D0 32 0D 82             ld      (X2),A          ; store it into a temp buffer
5726+ 41D3 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5727+ 41D6 2C                   defb    ','
5728+ 41D7 CD 11 33             call    GETINT          ; get Y2 coords
5729+ 41DA FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 41DC D2 C5 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 41DF 32 0F 82             ld      (Y2),A          ; store it into a temp buffer
5732+ 41E2 CD D1 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 41E5 E5                   push    HL              ; store register we'll use
5734+ 41E6 D5                   push    DE
5735+ 41E7 C5                   push    BC
5736+ 41E8 ED 5B 05 82          ld      DE,(X1)         ; load X1 and
5737+ 41EC 2A 0D 82             ld      HL,(X2)         ; X2
5738+ 41EF B7                   or      A               ; clear CARRY
5739+ 41F0 ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 41F2 CD 86 4D             call    absHL           ; DX=ABS(DX)
5741+ 41F5 22 19 82             ld      (DX),HL         ; store DX
5742+ 41F8 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41FB 2A 05 82             ld      HL,(X1)
5744+ 41FE ED 5B 0D 82          ld      DE,(X2)
5745+ 4202 CD 45 4D             call    CMP16           ; X1<X2?
5746+ 4205 CA 0E 42             jp      Z,X1GR          ; no, X1=X2
5747+ 4208 F2 0E 42             jp      P,X1GR          ; no, X1>X2
5748+ 420B 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 420E ED 43 15 82  X1GR:   ld      (SX),BC         ; store SX
5750+ 4212 ED 5B 07 82          ld      DE,(Y1)
5751+ 4216 2A 0F 82             ld      HL,(Y2)
5752+ 4219 B7                   or      A               ; clear Carry
5753+ 421A ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 421C CD 86 4D             call    absHL           ; DY=ABS(DY)
5755+ 421F 22 1B 82             ld      (DY),HL         ; store DY
5756+ 4222 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 4225 2A 07 82             ld      HL,(Y1)
5758+ 4228 ED 5B 0F 82          ld      DE,(Y2)
5759+ 422C CD 45 4D             call    CMP16           ; is Y1<Y2?
5760+ 422F CA 38 42             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 4232 F2 38 42             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 4235 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 4238 ED 43 17 82  Y1GR:   ld      (SY),BC         ; store SY
5764+ 423C 2A 1B 82             ld      HL,(DY)         ; ER=DY
5765+ 423F CD 89 4D             call    negHL           ; ER=-DY
5766+ 4242 22 11 82             ld      (ER),HL         ; store ER
5767+ 4245 2A 19 82             ld      HL,(DX)
5768+ 4248 ED 5B 1B 82          ld      DE,(DY)
5769+ 424C CD 45 4D             call    CMP16           ; DX>DY?
5770+ 424F CA 5B 42             jp      Z,ER2           ; no, DX=DY
5771+ 4252 FA 5B 42             jp      M,ER2           ; no, DX<DY
5772+ 4255 2A 19 82             ld      HL,(DX)         ; reload DX
5773+ 4258 22 11 82             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 425B 2A 11 82     ER2:    ld      HL,(ER)         ; load ER
5775+ 425E CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 4260 CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 4262 CB 7C                bit     7,H             ; is the number negative?
5778+ 4264 CA 68 42             jp      Z,STRE2         ; no, jump over
5779+ 4267 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 4268 22 11 82     STRE2:  ld      (ER),HL         ; store ER
5781+ 426B CD 33 41     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 426E 2A 05 82             ld      HL,(X1)
5783+ 4271 ED 5B 0D 82          ld      DE,(X2)
5784+ 4275 CD 45 4D             call    CMP16           ; X1=X2?
5785+ 4278 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 427A 2A 07 82             ld      HL,(Y1)         ; yes, so check
5787+ 427D ED 5B 0F 82          ld      DE,(Y2)         ; also Y
5788+ 4281 CD 45 4D             call    CMP16           ; Y1=Y2?
5789+ 4284 CA E0 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 4287 ED 5B 11 82  CNTDRW: ld      DE,(ER)
5791+ 428B ED 53 13 82          ld      (E2),DE         ; E2=ER
5792+ 428F 2A 19 82             ld      HL,(DX)
5793+ 4292 CD 89 4D             call    negHL           ; DX=-DX
5794+ 4295 EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 4296 CD 45 4D             call    CMP16           ; E2>-DX?
5796+ 4299 CA B7 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 429C FA B7 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 429F 2A 11 82             ld      HL,(ER)         ; yes
5799+ 42A2 ED 5B 1B 82          ld      DE,(DY)
5800+ 42A6 B7                   or      A               ; clear CARRY
5801+ 42A7 ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 42A9 22 11 82             ld      (ER),HL
5803+ 42AC 2A 05 82             ld      HL,(X1)
5804+ 42AF ED 5B 15 82          ld      DE,(SX)
5805+ 42B3 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 42B4 22 05 82             ld      (X1),HL
5807+ 42B7 2A 13 82     DXGR:   ld      HL,(E2)
5808+ 42BA ED 5B 1B 82          ld      DE,(DY)
5809+ 42BE CD 45 4D             call    CMP16           ; E2<DY?
5810+ 42C1 CA 6B 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 42C4 F2 6B 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 42C7 2A 11 82             ld      HL,(ER)         ; yes
5813+ 42CA ED 5B 19 82          ld      DE,(DX)
5814+ 42CE 19                   add     HL,DE           ; ER=ER+DX
5815+ 42CF 22 11 82             ld      (ER),HL
5816+ 42D2 2A 07 82             ld      HL,(Y1)
5817+ 42D5 ED 5B 17 82          ld      DE,(SY)
5818+ 42D9 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 42DA 22 07 82             ld      (Y1),HL
5820+ 42DD C3 6B 42             jp      RPTDRW          ; repeat
5821+ 42E0 C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 42E1 D1                   pop     DE              ; retrieve DE
5823+ 42E2 E1                   pop     HL              ; retrieve HL
5824+ 42E3 C9                   ret                     ; return to caller
5825+ 42E4
5826+ 42E4
5827+ 42E4              ; CIRCLE X,Y,R[,C]
5828+ 42E4              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 42E4              ; and radius R, with optional color C. If color is not specified, the
5830+ 42E4              ; foreground color set with COLOR will be used
5831+ 42E4              XC      equ     VIDEOBUFF
5832+ 42E4              YC      equ     VIDEOBUFF+$02
5833+ 42E4              RADIUS  equ     VIDEOBUFF+$04
5834+ 42E4              XI      equ     VIDEOBUFF+$06
5835+ 42E4              YI      equ     VIDEOBUFF+$08
5836+ 42E4              DC      equ     VIDEOBUFF+$0A
5837+ 42E4 CD DB 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 42E7 CD C2 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 42EA CD 11 33             call    GETINT          ; get X coords.
5840+ 42ED 32 0D 82             ld      (XC),A          ; store it into a temp buffer
5841+ 42F0 CD B1 23             call    CHKSYN          ; Make sure ',' follows
5842+ 42F3 2C                   defb    ','
5843+ 42F4 CD 11 33             call    GETINT          ; get Y coords,
5844+ 42F7 32 0F 82             ld      (YC),A          ; store it into a temp buffer
5845+ 42FA CD B1 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42FD 2C                   defb    ','
5847+ 42FE CD 11 33             call    GETINT          ; get radius
5848+ 4301 32 11 82             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 4304 CD D1 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 4307 C5                   push    BC              ; store BC
5851+ 4308 D5                   push    DE              ; store DE
5852+ 4309 E5                   push    HL              ; store HL
5853+ 430A AF                   xor     A               ; clear A,
5854+ 430B 47                   ld      B,A             ; B,
5855+ 430C 4F                   ld      C,A             ; C,
5856+ 430D 57                   ld      D,A             ; D,
5857+ 430E 67                   ld      H,A             ; and H
5858+ 430F ED 43 13 82          ld      (XI),BC         ; clear XI
5859+ 4313 3A 11 82             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 4316 6F                   ld      L,A             ; HL now contains R
5861+ 4317 22 15 82             ld      (YI),HL         ; YI=RADIUS
5862+ 431A 29                   add     HL,HL           ; R*2
5863+ 431B EB                   ex      DE,HL           ; put HL into DE
5864+ 431C 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 431F AF                   xor     A               ; clear Carry
5866+ 4320 ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 4322 22 17 82             ld      (DC),HL         ; store D
5868+ 4325 CD 84 43             call    DRWCRL          ; draw initial point
5869+ 4328 ED 5B 13 82  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 432C 2A 15 82             ld      HL,(YI)         ; load YI
5871+ 432F CD 45 4D             call    CMP16           ; is YI<DI?
5872+ 4332 CA 3B 43             jp      Z,RPTCL1        ; no, YI=XI
5873+ 4335 F2 3B 43             jp      P,RPTCL1        ; no, YI>XI
5874+ 4338 C3 80 43             jp      ENDCRL          ; yes, so we've finished
5875+ 433B 21 13 82     RPTCL1: ld      HL,XI
5876+ 433E 34                   inc     (HL)            ; XI=XI+1
5877+ 433F 2A 17 82             ld      HL,(DC)         ; load D
5878+ 4342 7C                   ld      A,H
5879+ 4343 B5                   or      L               ; is D=0? Yes, jump over
5880+ 4344 CA 68 43             jp      Z,DLSZ
5881+ 4347 CB 7C                bit     7,H             ; is D<0?
5882+ 4349 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 434B ED 5B 15 82          ld      DE,(YI)         ; D>0
5884+ 434F 1B                   dec     DE              ; so, YI=YI-1
5885+ 4350 ED 53 15 82          ld      (YI),DE         ; store YI
5886+ 4354 AF                   xor     A               ; clear Carry
5887+ 4355 2A 13 82             ld      HL,(XI)
5888+ 4358 ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 435A 29                   add     HL,HL
5890+ 435B 29                   add     HL,HL           ; HL=HL*4
5891+ 435C 11 0A 00             ld      DE,10
5892+ 435F 19                   add     HL,DE           ; HL=HL+10
5893+ 4360 ED 5B 17 82          ld      DE,(DC)         ; load D
5894+ 4364 EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 4365 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 4366 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 4368 2A 13 82     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 436B 29                   add     HL,HL
5899+ 436C 29                   add     HL,HL           ; XI=XI*4
5900+ 436D 11 06 00             ld      DE,$0006
5901+ 4370 19                   add     HL,DE
5902+ 4371 ED 5B 17 82          ld      DE,(DC)
5903+ 4375 EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 4376 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 4377 22 17 82     PLTCRL: ld      (DC),HL         ; store new D
5906+ 437A CD 84 43             call    DRWCRL          ; plot pixel
5907+ 437D C3 28 43             jp      RPTCRL          ; repeat
5908+ 4380 E1           ENDCRL: pop     HL
5909+ 4381 D1                   pop     DE
5910+ 4382 C1                   pop     BC
5911+ 4383 C9                   ret                     ; return to caller
5912+ 4384 2A 0D 82     DRWCRL: ld      HL,(XC)
5913+ 4387 ED 5B 13 82          ld      DE,(XI)
5914+ 438B 19                   add     HL,DE           ; X=XC+XI
5915+ 438C 22 05 82             ld      (X1),HL         ; store X
5916+ 438F CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 4392 DA A6 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 4395 2A 0F 82             ld      HL,(YC)
5919+ 4398 ED 5B 15 82          ld      DE,(YI)
5920+ 439C 19                   add     HL,DE           ; Y=YC+YI
5921+ 439D 22 07 82             ld      (Y1),HL         ; store Y
5922+ 43A0 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 43A3 D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 43A6 AF           CNTCL1: xor     A               ; clear Carry
5925+ 43A7 2A 0D 82             ld      HL,(XC)
5926+ 43AA ED 5B 13 82          ld      DE,(XI)
5927+ 43AE ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 43B0 22 05 82             ld      (X1),HL         ; store X
5929+ 43B3 CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 43B6 DA CA 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 43B9 2A 0F 82             ld      HL,(YC)
5932+ 43BC ED 5B 15 82          ld      DE,(YI)
5933+ 43C0 19                   add     HL,DE           ; Y=YC+YI
5934+ 43C1 22 07 82             ld      (Y1),HL         ; store Y
5935+ 43C4 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 43C7 D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 43CA 2A 0D 82     CNTCL2: ld      HL,(XC)
5938+ 43CD ED 5B 13 82          ld      DE,(XI)
5939+ 43D1 19                   add     HL,DE           ; X=XC+XI
5940+ 43D2 22 05 82             ld      (X1),HL         ; store X
5941+ 43D5 CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 43D8 DA EE 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 43DB AF                   xor     A               ; clear Carry
5944+ 43DC 2A 0F 82             ld      HL,(YC)
5945+ 43DF ED 5B 15 82          ld      DE,(YI)
5946+ 43E3 ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 43E5 22 07 82             ld      (Y1),HL         ; store Y
5948+ 43E8 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 43EB D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 43EE AF           CNTCL3: xor     A               ; clear Carry
5951+ 43EF 2A 0D 82             ld      HL,(XC)
5952+ 43F2 ED 5B 13 82          ld      DE,(XI)
5953+ 43F6 ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43F8 22 05 82             ld      (X1),HL         ; store X
5955+ 43FB CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43FE DA 14 44             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 4401 AF                   xor     A               ; clear Carry
5958+ 4402 2A 0F 82             ld      HL,(YC)
5959+ 4405 ED 5B 15 82          ld      DE,(YI)
5960+ 4409 ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 440B 22 07 82             ld      (Y1),HL         ; store Y
5962+ 440E CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 4411 D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 4414 2A 0D 82     CNTCL4: ld      HL,(XC)
5965+ 4417 ED 5B 15 82          ld      DE,(YI)
5966+ 441B 19                   add     HL,DE           ; X=XC+YI
5967+ 441C 22 05 82             ld      (X1),HL         ; store X
5968+ 441F CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 4422 DA 36 44             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 4425 2A 0F 82             ld      HL,(YC)
5971+ 4428 ED 5B 13 82          ld      DE,(XI)
5972+ 442C 19                   add     HL,DE           ; Y=YC+XI
5973+ 442D 22 07 82             ld      (Y1),HL         ; store Y
5974+ 4430 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 4433 D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 4436 AF           CNTCL5: xor     A               ; clear Carry
5977+ 4437 2A 0D 82             ld      HL,(XC)
5978+ 443A ED 5B 15 82          ld      DE,(YI)
5979+ 443E ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 4440 22 05 82             ld      (X1),HL         ; store X
5981+ 4443 CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 4446 DA 5A 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 4449 2A 0F 82             ld      HL,(YC)
5984+ 444C ED 5B 13 82          ld      DE,(XI)
5985+ 4450 19                   add     HL,DE           ; Y=YC+XI
5986+ 4451 22 07 82             ld      (Y1),HL         ; store Y
5987+ 4454 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 4457 D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 445A 2A 0D 82     CNTCL6: ld      HL,(XC)
5990+ 445D ED 5B 15 82          ld      DE,(YI)
5991+ 4461 19                   add     HL,DE           ; X=XC+YI
5992+ 4462 22 05 82             ld      (X1),HL         ; store X
5993+ 4465 CD A3 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 4468 DA 7E 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 446B AF                   xor     A               ; clear Carry
5996+ 446C 2A 0F 82             ld      HL,(YC)
5997+ 446F ED 5B 13 82          ld      DE,(XI)
5998+ 4473 ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 4475 22 07 82             ld      (Y1),HL         ; store Y
6000+ 4478 CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 447B D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 447E AF           CNTCL7: xor     A               ; clear Carry
6003+ 447F 2A 0D 82             ld      HL,(XC)
6004+ 4482 ED 5B 15 82          ld      DE,(YI)
6005+ 4486 ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 4488 22 05 82             ld      (X1),HL         ; store X
6007+ 448B CD A3 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 448E D8                   ret     C               ; if Carry is set, X is not valid
6009+ 448F AF                   xor     A               ; clear Carry
6010+ 4490 2A 0F 82             ld      HL,(YC)
6011+ 4493 ED 5B 13 82          ld      DE,(XI)
6012+ 4497 ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 4499 22 07 82             ld      (Y1),HL         ; store Y
6014+ 449C CD A8 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 449F D4 33 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 44A2 C9                   ret                     ; return to caller
6017+ 44A3
6018+ 44A3              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 44A3              ; input: HL (value to check), can be negative
6020+ 44A3              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 44A3              ; destroys: A
6022+ 44A3 AF           VALIDX: xor     A               ; reset A
6023+ 44A4 B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 44A5 C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 44A6 37                   scf                     ; set Carry flag to raise error
6026+ 44A7 C9                   ret                     ; return to caller
6027+ 44A8
6028+ 44A8 AF           VALIDY: xor     A               ; reset A
6029+ 44A9 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 44AA 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 44AC 37                   scf                     ; no, raise error by setting Carry flag
6032+ 44AD C9                   ret                     ; return to caller
6033+ 44AE 7D           CNTVALY:ld      A,L
6034+ 44AF FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 44B1 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 44B2 C9                   ret                     ; return to caller
6037+ 44B3
6038+ 44B3
6039+ 44B3
6040+ 44B3              ; cleat TMPBFR1-4 buffers before using them
6041+ 44B3 AF           CLRTMBF:xor     A               ; reset A
6042+ 44B4 E5                   push    HL              ; store HL
6043+ 44B5 C5                   push    BC              ; store BC
6044+ 44B6 21 05 82             ld      HL,TMPBFR1      ; address of 1st location
6045+ 44B9 06 08                ld      B,$08           ; 8 locations
6046+ 44BB 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 44BC 23                   inc     HL              ; next location
6048+ 44BD 10 FC                djnz    RPCLTMB         ; repeat
6049+ 44BF C1                   pop     BC              ; retrieve BC
6050+ 44C0 E1                   pop     HL              ; retrieve HL
6051+ 44C1 C9                   ret                     ; return to caller
6052+ 44C2
6053+ 44C2
6054+ 44C2              ; clear VIDEOBUFF before using it as temp buffer
6055+ 44C2 AF           CLRVDBF:xor     A               ; clear A
6056+ 44C3 C5                   push    BC              ; store BC
6057+ 44C4 E5                   push    HL              ; store HL
6058+ 44C5 06 28                ld      B,$28           ; 40 cells
6059+ 44C7 21 0D 82             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 44CA 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 44CB 23                   inc     HL              ; next cell
6062+ 44CC 10 FC                djnz    RPTCVBF         ; repeat
6063+ 44CE E1                   pop     HL              ; retrieve HL
6064+ 44CF C1                   pop     BC              ; retrieve BC
6065+ 44D0 C9                   ret                     ; return to caller
6066+ 44D1
6067+ 44D1
6068+ 44D1              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 44D1              ; commands. If not present, the default foreground color will be used
6070+ 44D1 3A 03 82     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 44D4 32 09 82             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 44D7 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 44D8 CD FA 25             call    GETCHR          ; Get next character
6074+ 44DB C8                   ret     Z               ; return foreground color if nothing follows
6075+ 44DC CD B1 23             call    CHKSYN          ; Make sure ',' follows
6076+ 44DF 2C                   defb    ','
6077+ 44E0 CD 11 33             call    GETINT          ; get value
6078+ 44E3 CD D5 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 44E6 32 09 82             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 44E9 C9                   ret                     ; return to caller
6081+ 44EA
6082+ 44EA
6083+ 44EA              ; no graphics mode error: raised when a graphics command is invoked
6084+ 44EA              ; out of graphic 2 mode.
6085+ 44EA 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 44EC C3 CB 20             jp      ERROR           ; print error
6087+ 44EF
6088+ 44EF
6089+ 44EF              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 44EF              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 44EF              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 44EF              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 44EF              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 44EF              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 44EF              ; they are assumed to be 8,0,1 resp.
6096+ 44EF              PRTNUM  equ     VIDEOBUFF
6097+ 44EF              BPS     equ     PRTNUM+$01
6098+ 44EF              DATABT  equ     BPS+$02
6099+ 44EF              PARBT   equ     DATABT+$01
6100+ 44EF              STPBT   equ     PARBT+$01
6101+ 44EF              SIOBFR  equ     STPBT+$01
6102+ 44EF CD 11 33     SERIAL: call    GETINT          ; get port #
6103+ 44F2 A7                   and     A               ; is it zero?
6104+ 44F3 CA C5 26             jp      Z,FCERR         ; yes, error
6105+ 44F6 FE 03                cp      $03             ; is it 1 or 2?
6106+ 44F8 D2 18 47             jp      NC,SCERR        ; no, error
6107+ 44FB 32 0D 82             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44FE CD B1 23             call    CHKSYN          ; Make sure ',' follows
6109+ 4501 2C                   defb    ','
6110+ 4502 2B                   dec     HL
6111+ 4503 CD FA 25             call    GETCHR          ; check what's following
6112+ 4506 CA B1 20             jp      Z,SNERR         ; error if nothing follows
6113+ 4509 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 450B CD CA 26             call    ATOH            ; get bps (returned into DE)
6115+ 450E 18 0F                jr      CHKZSER         ; jump over
6116+ 4510 CD 8B 2A     SERVAR: call    GETNUM          ; get number
6117+ 4513 CD 98 38             call    TSTSGN          ; check value
6118+ 4516 FA C5 26             jp      M,FCERR         ; negative - illegal function call
6119+ 4519 3A 5C 82             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 451C CD 40 39             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 451F 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 4520 B3                   or      E               ; check if bps=0
6123+ 4521 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 4523                      ; if baud rate is 0, then close the serial comm.
6125+ 4523 3A 0D 82     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 4526 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 4527 C6 22                add     SIO_CA          ; find correct channel
6128+ 4529 4F                   ld      C,A             ; store serial channel
6129+ 452A F3                   di                      ; disable INTs
6130+ 452B AF                   xor     A               ; reset A
6131+ 452C 16 01                ld      D,$01           ; start from WR1
6132+ 452E 06 05                ld      B,$05           ; 5 registers
6133+ 4530 ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 4532 ED 79                out     (C),A           ; reset register
6135+ 4534 14                   inc     D               ; next register
6136+ 4535 10 F9                djnz    RPTRSSR         ; repeat
6137+ 4537 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 4539 ED 79                out     (C),A           ; send command to serial channel
6139+ 453B 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 453D ED 79                out     (C),A           ; send command to serial channel
6141+ 453F FB                   ei                      ; re-enable INTs
6142+ 4540 E5                   push    HL              ; store HL
6143+ 4541 21 47 82             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 4544 DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 4546 CB 41                bit     0,C             ; check serial port
6146+ 4548 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 454A CB B7                res     6,A             ; it's port 1
6148+ 454C CB A7                res     4,A             ; remove possible error LED
6149+ 454E CB 86                res     0,(HL)          ; disable port 1
6150+ 4550 C3 59 45             jp      SERLED          ; jump over
6151+ 4553 CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 4555 CB AF                res     5,A             ; remove possible error LED
6153+ 4557 CB 8E                res     1,(HL)          ; disable port 2
6154+ 4559 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 455B E1                   pop     HL              ; retrieve HL
6156+ 455C C9                   ret                     ; return to caller
6157+ 455D                      ; check if bps=1, meaning reactivate RX on serial
6158+ 455D 7A           CNTSER: ld      A,D
6159+ 455E B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 455F 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 4561 7B                   ld      A,E             ; then by checking that
6162+ 4562 FE 01                cp      $01             ; E=1
6163+ 4564 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 4566 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6165+ 4569 57                   ld      D,A             ; store port on D
6166+ 456A 3A 47 82             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 456D A2                   and     D               ; check status
6168+ 456E CA 18 47             jp      Z,SCERR         ; port not open, raise error
6169+ 4571 F3                   di                      ; disable INTs
6170+ 4572 7A                   ld      A,D             ; move port # into A
6171+ 4573 5F                   ld      E,A             ; and also into E
6172+ 4574 87                   add     A
6173+ 4575 87                   add     A               ; move A to left times 2
6174+ 4576 57                   ld      D,A             ; move value into D
6175+ 4577 3A 47 82             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 457A B2                   or      D               ; re-enable RX
6177+ 457B 32 47 82             ld      (SERIALS_EN),A  ; store new serial status
6178+ 457E 7B                   ld      A,E             ; recover port #
6179+ 457F 3D                   dec     A               ; check port
6180+ 4580 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 4582 CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 4585 DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 4587 CB A7                res     4,A             ; remove error LED
6184+ 4589 C3 93 45             jp      RXEND           ; terminate setting
6185+ 458C CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 458F DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 4591 CB AF                res     5,A             ; remove error LED
6188+ 4593 D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 4595 FB                   ei                      ; re-enable INTs
6190+ 4596 C9                   ret                     ; return to caller
6191+ 4597                      ; set serial port comm.
6192+ 4597 D5           CNTSER2:push    DE              ; store BPS
6193+ 4598 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6194+ 459B 57                   ld      D,A             ; move port # into D
6195+ 459C 3A 47 82             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 459F A2                   and     D               ; by ANDing A with D
6197+ 45A0 D1                   pop     DE              ; retrieve BPS
6198+ 45A1 CA A9 45             jp      Z,CNTSER3       ; not open, continue
6199+ 45A4 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 45A6 C3 CB 20             jp      ERROR           ; and leave
6201+ 45A9 E5           CNTSER3:push    HL              ; store HL
6202+ 45AA 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 45AD CD 45 4D             call    CMP16           ; is bps<=57,600?
6204+ 45B0 E1                   pop     HL              ; but first, recover HL
6205+ 45B1 DA 18 47             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 45B4 ED 53 0E 82          ld      (BPS),DE        ; store bps
6207+ 45B8 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 45B9 CD FA 25             call    GETCHR          ; Get next character
6209+ 45BC CA F4 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 45BF CD B1 23             call    CHKSYN          ; Make sure ',' follows
6211+ 45C2 2C                   defb    ','
6212+ 45C3 CD 11 33             call    GETINT          ; get data bits
6213+ 45C6 FE 05                cp      $05             ; is it <5?
6214+ 45C8 DA 18 47             jp      C,SCERR         ; yes, error
6215+ 45CB FE 09                cp      $09             ; is it >=9?
6216+ 45CD D2 C5 26             jp      NC,FCERR        ; yes, error
6217+ 45D0 32 10 82             ld      (DATABT),A      ; store data bits
6218+ 45D3 CD B1 23             call    CHKSYN          ; Make sure ',' follows
6219+ 45D6 2C                   defb    ','
6220+ 45D7 CD 11 33             call    GETINT          ; get parity bits
6221+ 45DA BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 45DD D2 18 47             jp      NC,SCERR        ; no, error
6223+ 45E0 32 11 82             ld      (PARBT),A       ; store parity
6224+ 45E3 CD B1 23             call    CHKSYN          ; Make sure ',' follows
6225+ 45E6 2C                   defb    ','
6226+ 45E7 CD 11 33             call    GETINT          ; get stop bits
6227+ 45EA FE 03                cp      $03             ; is it >=3?
6228+ 45EC D2 18 47             jp      NC,SCERR        ; yes, error
6229+ 45EF 32 12 82             ld      (STPBT),A       ; store stop bits
6230+ 45F2 18 0D                jr      SETSER          ; jump to set serial
6231+ 45F4 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45F6 32 10 82             ld      (DATABT),A
6233+ 45F9 AF                   xor     A               ; no parity bit
6234+ 45FA 32 11 82             ld      (PARBT),A
6235+ 45FD 3C                   inc     A               ; 1 bit for stop
6236+ 45FE 32 12 82             ld      (STPBT),A
6237+ 4601                      ; check if bps are legal
6238+ 4601 E5           SETSER: push    HL              ; store HL
6239+ 4602 D5                   push    DE              ; store DE
6240+ 4603 DD E5                push    IX              ; store IX
6241+ 4605 DD 21 F3 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 4609 06 0B                ld      B,$0B           ; 11 items
6243+ 460B 0E 00                ld      C,$00           ; reset pointer
6244+ 460D 2A 0E 82     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 4610 DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 4613 DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 4616 CD 45 4D             call    CMP16           ; is it equal?
6248+ 4619 CA 26 46             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 461C DD 23                inc     IX
6250+ 461E DD 23                inc     IX              ; no, go to next entry
6251+ 4620 0C                   inc     C               ; increment pointer
6252+ 4621 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 4623 C3 14 47             jp      SCERR1          ; if nothing found, raise an error
6254+ 4626              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 4626                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 4626                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 4626                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 4626 F3                   di                      ; disable INTs
6259+ 4627 06 00                ld      B,$00           ; reset B
6260+ 4629 21 09 47             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 462C 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 462D 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 462F 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6264+ 4632 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 4633 DA 37 46             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 4636 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 4637 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 4639                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 4639 ED 79                out     (C),A           ; configure CTC channel
6270+ 463B 7E                   ld      A,(HL)          ; load CTC divider
6271+ 463C ED 79                out     (C),A           ; send divider
6272+ 463E                      ; configure SIO
6273+ 463E 21 54 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 4641 11 13 82             ld      DE,SIOBFR       ; into a temp buffer
6275+ 4644 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 4647 ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 4649 3A 18 82             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 464C 47                   ld      B,A             ; move it into B
6279+ 464D 3A 10 82             ld      A,(DATABT)      ; load DATA bits
6280+ 4650 FE 05                cp      $05             ; is it 5 bits?
6281+ 4652 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 4654 CB B0                res     6,B
6283+ 4656 CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 4658 18 19                jr      SETPAR          ; jump to set parity
6285+ 465A FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 465C 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 465E CB F0                set     6,B
6288+ 4660 CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 4662 18 0F                jr      SETPAR          ; jump to set parity
6290+ 4664 FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 4666 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 4668 CB B0                res     6,B
6293+ 466A CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 466C C3 73 46             jp      SETPAR          ; jump to set parity
6295+ 466F CB F0        BITS8:  set     6,B
6296+ 4671 CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 4673 21 48 82     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 4676 3A 0D 82             ld      A,(PRTNUM)      ; check serial port number
6299+ 4679 3D                   dec     A               ; is it port #1?
6300+ 467A CA 7E 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 467D 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 467E 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 467F 32 18 82             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 4682 E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 4684 87                   add     A,A             ; shift left times 1
6306+ 4685 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 4686 3A 12 82             ld      A,(STPBT)       ; load STOP bits
6308+ 4689 87                   add     A,A
6309+ 468A 87                   add     A,A             ; 2 left shifts
6310+ 468B 47                   ld      B,A             ; move forming byte into B
6311+ 468C 3A 11 82             ld      A,(PARBT)       ; load PARITY setting
6312+ 468F A7                   and     A               ; is it 0?
6313+ 4690 CA 9B 46             jp      Z,STRPAR        ; yes, jump over
6314+ 4693 CB C0                set     0,B             ; set PARITY on
6315+ 4695 3D                   dec     A               ; is parity ODD?
6316+ 4696 CA 9B 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 4699 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 469B 3A 16 82     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 469E E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 46A0 B0                   or      B               ; set new STOP & PARITY bits
6321+ 46A1 32 16 82             ld      (SIOBFR+3),A    ; store new value
6322+ 46A4                      ;set up TX and RX:
6323+ 46A4                      ; the followings are settings for channel A
6324+ 46A4 21 13 82             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 46A7 06 06                ld      B,$06           ; 6 bytes to send
6326+ 46A9 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 46AB 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6328+ 46AE 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 46AF DA B3 46             jp      C,SRLCNT        ; port 1, continue
6330+ 46B2 0C                   inc     C               ; port 2, increment address port into C
6331+ 46B3 ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 46B5                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 46B5 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 46B7 51                   ld      D,C             ; store port address into D
6335+ 46B8 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 46BA ED B3                otir                    ; send bytes to SIO
6337+ 46BC                      ; the following are settings for selected channel
6338+ 46BC 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 46BE 4A                   ld      C,D             ; retrieve port address
6340+ 46BF ED 79                out     (C),A
6341+ 46C1 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 46C3                                              ; buffer overrun is special condition
6343+ 46C3 ED 79                out     (C),A
6344+ 46C5 21 47 82             ld      HL,SERIALS_EN
6345+ 46C8 3A 0D 82             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 46CB 3D                   dec     A               ; channel A?
6347+ 46CC 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 46CE CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 46D1 CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 46D3 CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 46D5                      ; back to normal running
6352+ 46D5 FB                   ei                      ; re-enable INTs
6353+ 46D6 DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 46D8 CB F7                set     6,A             ; set status LED on
6355+ 46DA CB A7                res     4,A             ; set error LED off
6356+ 46DC 18 0E                jr      EXNRM           ; leave
6357+ 46DE CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 46E1 CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 46E3 CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 46E5                      ; back to normal running
6361+ 46E5 FB                   ei                      ; re-enable INTs
6362+ 46E6 DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 46E8 CB FF                set     7,A             ; set status LED on
6364+ 46EA CB AF                res     5,A             ; set error LED off
6365+ 46EC D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 46EE DD E1                pop     IX              ; retrieve IX
6367+ 46F0 D1                   pop     DE              ; retrieve DE
6368+ 46F1 E1                   pop     HL              ; retrieve HL
6369+ 46F2 C9                   ret                     ; return to caller
6370+ 46F3
6371+ 46F3              ; allowed bps (Bauds per second)
6372+ 46F3 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46F7 80 70 00 4B
6372+ 46FB 40 38 80 25
6372+ 46FF C0 12 10 0E
6372+ 4703 60 09 B0 04
6372+ 4707 58 02
6373+ 4709              ; corresponding CTC divider
6374+ 4709 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 470D 08 0C 18 20
6374+ 4711 30 60 C0
6375+ 4714
6376+ 4714
6377+ 4714              ; serial configuration error
6378+ 4714 DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 4716 D1                   pop     DE              ; retrieve DE
6380+ 4717 E1                   pop     HL              ; retrieve HL
6381+ 4718 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 471A C3 CB 20             jp      ERROR           ; print error
6383+ 471D
6384+ 471D
6385+ 471D              ; serial buffer overrun
6386+ 471D CD C7 28     SOERR:  call    PRNTCRLF
6387+ 4720 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 4722 C3 CB 20             jp      ERROR
6389+ 4725
6390+ 4725
6391+ 4725              ; check for direct mode:
6392+ 4725              ; Z is set if in direct mode, reset otherwise
6393+ 4725 E5           DIRMOD: push    HL              ; Save code string address
6394+ 4726 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6395+ 4729 23                   inc     HL              ; -1 means direct statement
6396+ 472A 7C                   ld      A,H
6397+ 472B B5                   or      L
6398+ 472C E1                   pop     HL              ; Restore code string address
6399+ 472D C9                   ret
6400+ 472E
6401+ 472E
6402+ 472E              ; HELP lists the line program where an error occured
6403+ 472E CD 25 47     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 4731 C2 47 47             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 4734 E5                   push    HL              ; store HL
6406+ 4735 2A B1 80             ld      HL,(HLPLN)      ; load HELP line
6407+ 4738 23                   inc     HL              ; increment HL
6408+ 4739 7C                   ld      A,H
6409+ 473A B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 473B E1                   pop     HL
6411+ 473C CA 47 47             jp      Z,HLPERR        ; no line found, raise error
6412+ 473F ED 5B B1 80          ld      DE,(HLPLN)      ; recover line
6413+ 4743 C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 4744 C3 47 24             jp      LST01H          ; jump to list line
6415+ 4747 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 4749 C3 CB 20             jp      ERROR           ; raise error
6417+ 474C
6418+ 474C
6419+ 474C              ; KEY command to list/modify function keys and auto-repeat
6420+ 474C 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 474D CD FA 25             call    GETCHR          ; Get next character
6422+ 4750 CA D0 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 4753                      ; change FN keys
6424+ 4753 CD 11 33             call    GETINT          ; get a number
6425+ 4756 A7                   and     A               ; is it 0?
6426+ 4757 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 4759 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 475A D5                   push    DE              ; store HL & DE
6429+ 475B 21 9F 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 475E 11 B3 80             ld      DE,KEYDEL       ; pointer to destination
6431+ 4761 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 4764 ED B0                ldir                    ; restore default texts
6433+ 4766 D1                   pop     DE              ; retrieve DE
6434+ 4767 E1                   pop     HL              ; retrieve HL
6435+ 4768 C9                   ret                     ; return to caller
6436+ 4769 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 476B D2 83 48             jp      NC,SETREP       ; yes - jump over
6438+ 476E 3D                   dec     A               ; FN key in range 0~7
6439+ 476F 87                   add     A,A             ; multiply A...
6440+ 4770 87                   add     A,A             ; ... times 4...
6441+ 4771 87                   add     A,A             ; ... to get the correct...
6442+ 4772 87                   add     A,A             ; ... offset fo FN key text
6443+ 4773 32 05 82             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 4776 AF                   xor     A               ; ...in a...
6445+ 4777 32 06 82             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 477A CD B1 23             call    CHKSYN          ; Make sure ',' follows
6447+ 477D 2C                   defb    ','
6448+ 477E 44 4D                ld      BC,HL           ; copy address into BC
6449+ 4780 CD 9D 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 4783 E5                   push    HL              ; store string pointer
6451+ 4784 3A 94 81             ld      A,(TYPE)        ; Get variable type
6452+ 4787 B7                   or      A               ; Is it a string variable?
6453+ 4788 CA B1 20             jp      Z,SNERR         ; no - syntax error
6454+ 478B CD D6 30             call    GSTRCU          ; Current string to pool
6455+ 478E CD E7 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 4791 7B                   ld      A,E             ; copy length into A
6457+ 4792 FE 11                cp      $11             ; is length > 16?
6458+ 4794 DA 99 47             jp      C,DECLN1        ; no, jump over
6459+ 4797 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 4799 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 479B 93                   sub     E               ; ...null chars needed to fill up...
6462+ 479C 57                   ld      D,A             ; ...the FN key text
6463+ 479D C5                   push    BC              ; store address of string
6464+ 479E ED 4B 05 82          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 47A2 21 B5 80             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 47A5 09                   add     HL,BC           ; get corrected address
6467+ 47A6 C1                   pop     BC              ; retrieve address of string chars
6468+ 47A7 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 47A8 FE 0D                cp      CR              ; return?
6470+ 47AA CA B7 47             jp      Z,CPKEY2        ; yes, store char
6471+ 47AD FE 7B                cp      $7B             ; if char > "z" ?
6472+ 47AF D2 B1 20             jp      NC,SNERR        ; yes - syntax error
6473+ 47B2 FE 20                cp      $20             ; is char < space?
6474+ 47B4 DA B1 20             jp      C,SNERR         ; yes - syntax error
6475+ 47B7 FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 47B9 DA BE 47             jp      C,CPKEY3        ; no, continue
6477+ 47BC E6 5F                and     %01011111       ; set letters to uppercase
6478+ 47BE 77           CPKEY3: ld      (HL),A          ; store char
6479+ 47BF 23                   inc     HL              ; next string char
6480+ 47C0 03                   inc     BC              ; next free cell
6481+ 47C1 1D                   dec     E               ; decrement E
6482+ 47C2 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 47C4 AF                   xor     A               ; null char
6484+ 47C5 14                   inc     D               ; +1 to decrement below
6485+ 47C6 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 47C7 CA CE 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 47CA 77                   ld      (HL),A          ; store it
6488+ 47CB 23                   inc     HL              ; next cell
6489+ 47CC 18 F8                jr      CPKEY1          ; repeat
6490+ 47CE E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 47CF C9                   ret                     ; return to caller
6492+ 47D0                                              ; list FN keys
6493+ 47D0 E5           LSTKEYS:push    HL              ; Save code string address
6494+ 47D1 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6495+ 47D4 23                   inc     HL              ; -1 means direct statement
6496+ 47D5 7C                   ld      A,H
6497+ 47D6 B5                   or      L
6498+ 47D7 E1                   pop     HL              ; Restore code string address
6499+ 47D8 C2 B1 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 47DB E5                   push    HL              ; store HL
6501+ 47DC D5                   push    DE              ; store DE
6502+ 47DD 21 B5 80             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 47E0 0E 01                ld      C,$01           ; 8 function keys
6504+ 47E2 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 47E4 11 A5 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 47E7 CD 74 48             call    PRTCKEY         ; print it
6507+ 47EA 79                   ld      A,C             ; load FN key
6508+ 47EB C6 30                add     $30             ; get number in ASCI code
6509+ 47ED CD BC 23             call    OUTC            ; print it
6510+ 47F0 11 AA 48             ld      DE,CHKEY2       ; message ": ""
6511+ 47F3 CD 74 48             call    PRTCKEY         ; print it
6512+ 47F6 3E 01                ld      A,$01           ; " opened
6513+ 47F8 32 05 82             ld      (TMPBFR1),A
6514+ 47FB 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47FC A7                   and     A               ; is it zero?
6516+ 47FD CA 10 48             jp      Z,CNTLTK        ; yes, go next char
6517+ 4800 CD 5C 48             call    OPNQT           ; check if quotes are opened
6518+ 4803 FE 22                cp      $22             ; check if char is "?
6519+ 4805 CA 25 48             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 4808 FE 0D                cp      CR              ; is it a CR?
6521+ 480A CA 25 48             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 480D CD BC 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 4810 23           CNTLTK: inc     HL              ; next char
6524+ 4811 10 E8                djnz    LDKEY           ; continue until finished
6525+ 4813 CD 4A 48             call    CLSQT           ; check if quotes are still open
6526+ 4816 3E 0D                ld      A,CR            ; go next line
6527+ 4818 CD BC 23             call    OUTC            ; print it
6528+ 481B 0C                   inc     C               ; next FN key
6529+ 481C 79                   ld      A,C             ; check if...
6530+ 481D FE 09                cp      $09             ; finished keys?
6531+ 481F DA E2 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 4822 D1                   pop     DE              ; retrieve DE
6533+ 4823 E1                   pop     HL              ; retrieve HL
6534+ 4824 C9                   ret                     ; return to caller
6535+ 4825 E5           PRTCHR: push    HL              ; store HL
6536+ 4826 CD 4A 48             call    CLSQT           ; check if quotes are closed
6537+ 4829 3E 2B                ld      A,'+'           ; '+' char
6538+ 482B CD BC 23             call    OUTC            ; print it
6539+ 482E 11 AD 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 4831 CD 74 48             call    PRTCKEY         ; print it
6541+ 4834 E1                   pop     HL              ; recover HL
6542+ 4835 23                   inc     HL              ; next char
6543+ 4836 05                   dec     B               ; increment char counter
6544+ 4837 11 B3 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 483A 7E                   ld      A,(HL)          ; load char
6546+ 483B FE 0D                cp      CR              ; is it a RETURN?
6547+ 483D 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 483F 11 B6 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 4842 CD 74 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 4845 3E 29                ld      A,')'           ; char )
6551+ 4847 C3 0D 48             jp      PRTK3           ; continue
6552+ 484A F5           CLSQT:  push    AF              ; store A
6553+ 484B 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6554+ 484E A7                   and     A               ; are they closed?
6555+ 484F 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 4851 3E 22                ld      A,$22           ; no, so close them
6557+ 4853 CD BC 23             call    OUTC            ; print "
6558+ 4856 AF                   xor     A               ; set quotes
6559+ 4857 32 05 82             ld      (TMPBFR1),A     ; as closed
6560+ 485A F1           CLSQT1: pop     AF              ; retrieve A
6561+ 485B C9                   ret                     ; return to caller
6562+ 485C F5           OPNQT:  push    AF              ; store A
6563+ 485D 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6564+ 4860 A7                   and     A               ; are they open?
6565+ 4861 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 4863 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 4865 CD BC 23             call    OUTC            ; print it
6568+ 4868 3E 22                ld      A,$22           ; and then open quotes
6569+ 486A CD BC 23             call    OUTC            ; print them
6570+ 486D 3E 01                ld      A,$01           ; set quotes
6571+ 486F 32 05 82             ld      (TMPBFR1),A     ; as opened
6572+ 4872 F1           OPNQT1: pop     AF              ; retrieve A
6573+ 4873 C9                   ret                     ; return to caller
6574+ 4874 F5           PRTCKEY:push    AF              ; store original char
6575+ 4875 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 4876 A7                   and     A               ; is it 0?
6577+ 4877 CA 81 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 487A CD BC 23             call    OUTC            ; no, print char
6579+ 487D 13                   inc     DE              ; next char
6580+ 487E C3 75 48             jp      PRTK1           ; repeat
6581+ 4881 F1           PRTEND: pop     AF              ; retrieve AF
6582+ 4882 C9                   ret                     ; return to caller
6583+ 4883 FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 4885 C2 B1 20             jp      NZ,SNERR        ; no, raise an error
6585+ 4888 CD B1 23             call    CHKSYN          ; Check for comma
6586+ 488B 2C                   defb    ','
6587+ 488C CD 11 33             call    GETINT          ; get a number
6588+ 488F 32 05 82             ld      (TMPBFR1),A     ; store it
6589+ 4892 CD B1 23             call    CHKSYN          ; Check for comma
6590+ 4895 2C                   defb    ','
6591+ 4896 CD 11 33             call    GETINT          ; get another number
6592+ 4899 E5                   push    HL              ; store HL
6593+ 489A 21 B4 80             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 489D 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 489E 2B                   dec     HL              ; previous cell
6596+ 489F 3A 05 82             ld      A,(TMPBFR1)     ; retrieve value
6597+ 48A2 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 48A3 E1                   pop     HL              ; retrieve HL
6599+ 48A4 C9                   ret
6600+ 48A5 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 48A9 00
6601+ 48AA 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 48AD 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 48B1 28 00
6603+ 48B3 31 33 00     CHKEY4: defb    "13",0
6604+ 48B6 33 34 00     CHKEY5: defb    "34",0
6605+ 48B9
6606+ 48B9
6607+ 48B9              ; check if DOS is enabled
6608+ 48B9 3A 4A 82     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 48BC A7                   and     A               ; check if 0 (NOT enabled)
6610+ 48BD C0                   ret     NZ              ; return if enabled
6611+ 48BE 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 48C0 C3 CB 20             jp      ERROR           ; raise error
6613+ 48C3
6614+ 48C3
6615+ 48C3              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 48C3              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 48C3 CD 16 49     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 48C6 CA E4 48             jp      Z,LOADST        ; number - load a single sector
6619+ 48C9 CD 25 47             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 48CC C2 C6 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 48CF CD F7 4B             call    CHKFN1          ; string - evaluate file name
6622+ 48D2 CD 09 4A             call    CHK1AR          ; check for ",1" argument
6623+ 48D5 22 05 82             ld      (TMPBFR1),HL    ; store HL
6624+ 48D8 21 05 49             ld      HL,TXTLDG       ; loading message
6625+ 48DB CD 93 2F             call    PRS             ; print
6626+ 48DE CD 62 15             call    LODFILE         ; load file into memory
6627+ 48E1 C3 F9 48             jp      LDEND           ; retrieve registers and leave
6628+ 48E4 2A 05 82     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 48E7 CD 2B 49             call    GET3AR          ; get 3 arguments
6630+ 48EA 22 05 82             ld      (TMPBFR1),HL    ; store HL
6631+ 48ED CD 6F 10             call    CF_SETSTR
6632+ 48F0 CD B1 10             call    CF_RD_SEC       ; read sector
6633+ 48F3 38 0B                jr      C,LDERR
6634+ 48F5 CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6635+ 48F8 AF                   xor     A               ; clear Carry
6636+ 48F9 2A 05 82     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6637+ 48FC DA 02 4A             jp      C,DOS_ERR       ; jump if DOS error
6638+ 48FF C9                   ret                     ; return to caller
6639+ 4900 1E 40        LDERR:  ld      E,D4            ; load error
6640+ 4902 C3 CB 20             jp      ERROR
6641+ 4905 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6641+ 4909 69 6E 67 20
6641+ 490D 66 69 6C 65
6641+ 4911 2E 2E 2E 0D
6641+ 4915 00
6642+ 4916
6643+ 4916
6644+ 4916              ; common code for LOAD/SAVE to check the type of operation required
6645+ 4916              ; (load/save a file or a single sector)
6646+ 4916              ; returns Z if argument is a number, NZ if it's a string
6647+ 4916 CD B9 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6648+ 4919 2B                   dec     HL              ; dec 'cos GETCHR INCs
6649+ 491A CD FA 25             call    GETCHR          ; check if something follows
6650+ 491D CA B1 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6651+ 4920 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6652+ 4923 CD 9D 2A             call    EVAL            ; Evaluate expression
6653+ 4926 3A 94 81             ld      A,(TYPE)        ; Get variable type
6654+ 4929 B7                   or      A               ; Is it a string variable?
6655+ 492A C9                   ret                     ; return to caller
6656+ 492B
6657+ 492B
6658+ 492B              ; shared code between LOAD and SAVE
6659+ 492B              ; get 3 arguments after the command LOAD or SAVE
6660+ 492B              ; and load them into appropriate registers
6661+ 492B 2A 05 82     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6662+ 492E CD 11 33             call    GETINT          ; get 1st pointer
6663+ 4931 32 9D 81             ld      (TMPDBF),A      ; store it into a temp buffer
6664+ 4934 CD B1 23             call    CHKSYN          ; Make sure ',' follows
6665+ 4937 2C                   defb    ','
6666+ 4938 CD 11 33             call    GETINT          ; get 2nd pointer
6667+ 493B 32 9E 81             ld      (TMPDBF+1),A    ; store it into a temp buffer
6668+ 493E CD B1 23             call    CHKSYN          ; Make sure ',' follows
6669+ 4941 2C                   defb    ','
6670+ 4942 CD 11 33             call    GETINT          ; get 3rd pointer
6671+ 4945 32 9F 81             ld      (TMPDBF+2),A    ; store it into a temp buffer
6672+ 4948 CD 2D 10             call    CF_INIT         ; init CF card
6673+ 494B DA C9 20             jp      C,NRERR         ; error if device not available/ready
6674+ 494E 3A 9D 81             ld      A,(TMPDBF)      ; retrieve 1st pointer
6675+ 4951 4F                   ld      C,A
6676+ 4952 3A 9E 81             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6677+ 4955 47                   ld      B,A
6678+ 4956 3A 9F 81             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6679+ 4959 5F                   ld      E,A
6680+ 495A 16 00                ld      D,$00           ; set disk
6681+ 495C C9                   ret                     ; return to caller
6682+ 495D
6683+ 495D
6684+ 495D              ; save a file onto the disk
6685+ 495D CD B9 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6686+ 4960 2B                   dec     HL              ; dec 'cos GETCHR INCs
6687+ 4961 CD FA 25             call    GETCHR          ; check if something follows
6688+ 4964 CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6689+ 4967 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6690+ 496A CD 9D 2A             call    EVAL            ; Evaluate expression
6691+ 496D 3A 94 81             ld      A,(TYPE)        ; Get variable type
6692+ 4970 B7                   or      A               ; Is it a string variable?
6693+ 4971 CA B8 49             jp      Z,SAVEST        ; no - load a single sector
6694+ 4974 CD F7 4B             call    CHKFN1          ; yes, evaluate string
6695+ 4977 3E 80                ld      A,$80           ; set BAS for file type
6696+ 4979 32 B4 81             ld      (TPBF4),A
6697+ 497C 2B                   dec     HL              ; dec 'cos GETCHR INCs
6698+ 497D CD FA 25             call    GETCHR          ; check if something follows
6699+ 4980 28 21                jr      Z,SAVE1         ; no, jump over
6700+ 4982 CD B1 23             call    CHKSYN          ; yes - Make sure ',' follows
6701+ 4985 2C                   defb    ','
6702+ 4986 CD 8B 2A             call    GETNUM          ; Get memory address
6703+ 4989 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
6704+ 498C ED 53 B6 81          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6705+ 4990 CD B1 23             call    CHKSYN          ; Make sure ',' follows
6706+ 4993 2C                   defb    ','
6707+ 4994 CD 8B 2A             call    GETNUM          ; Get memory address
6708+ 4997 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
6709+ 499A ED 53 B8 81          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6710+ 499E 3E 81                ld      A,$81           ; set BIN for file type
6711+ 49A0 32 B4 81             ld      (TPBF4),A
6712+ 49A3 CD 25 47     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6713+ 49A6 C2 C6 20             jp      NZ,IMERR        ; raise error if in indirect mode
6714+ 49A9 22 05 82             ld      (TMPBFR1),HL    ; store code string pointer
6715+ 49AC 21 D6 49             ld      HL,TXTSVG       ; loading message
6716+ 49AF CD 93 2F             call    PRS             ; print
6717+ 49B2 CD 09 14             call    SAVFILE         ; load file into memory
6718+ 49B5 C3 CA 49             jp      SVEND           ; retrieve registers and leave
6719+ 49B8 2A 9D 81     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6720+ 49BB CD 2B 49             call    GET3AR          ; get 3 arguments
6721+ 49BE 22 05 82             ld      (TMPBFR1),HL    ; store code string pointer
6722+ 49C1 CD DD 10             call    CF_WR_SEC       ; read sector
6723+ 49C4 38 0B                jr      C,SVERR
6724+ 49C6 CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6725+ 49C9 AF                   xor     A               ; clear Carry
6726+ 49CA 2A 05 82     SVEND:  ld      HL,(TMPBFR1)    ; retrieve code string pointer
6727+ 49CD DA 02 4A             jp      C,DOS_ERR       ; jump if DOS error
6728+ 49D0 C9                   ret                     ; return to caller
6729+ 49D1 1E 3E        SVERR:  ld      E,D3            ; save error
6730+ 49D3 C3 CB 20             jp      ERROR
6731+ 49D6 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6731+ 49DA 6E 67 20 66
6731+ 49DE 69 6C 65 2E
6731+ 49E2 2E 2E 20 0D
6731+ 49E6 00
6732+ 49E7
6733+ 49E7
6734+ 49E7              ; FILES
6735+ 49E7              ; list files on disk
6736+ 49E7 CD B9 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6737+ 49EA CD D8 18             call    CLRIOBF         ; clear I/O buffer
6738+ 49ED CD 2D 10             call    CF_INIT         ; init CF card
6739+ 49F0 DA 02 4A             jp      C,DOS_ERR       ; error if device not available/ready
6740+ 49F3 C5                   push    BC              ; store BC
6741+ 49F4 D5                   push    DE              ; store DE
6742+ 49F5 E5                   push    HL              ; store HL
6743+ 49F6 16 01                ld      D,$01           ; print disk details and file list
6744+ 49F8 CD CB 12             call    LST_FILES       ; list files
6745+ 49FB E1                   pop     HL
6746+ 49FC D1                   pop     DE
6747+ 49FD C1                   pop     BC
6748+ 49FE DA 02 4A             jp      C,DOS_ERR       ; any error?
6749+ 4A01 C9                   ret                     ; return to caller
6750+ 4A02
6751+ 4A02
6752+ 4A02              ; raise a DOS error
6753+ 4A02 3A 9C 81     DOS_ERR:ld      A,(DOSER)       ; load error code
6754+ 4A05 5F                   ld      E,A             ; copy into E
6755+ 4A06 C3 CB 20             jp      ERROR           ; goto error routine
6756+ 4A09
6757+ 4A09
6758+ 4A09              ; check for ",1" argument
6759+ 4A09              ; check if 1 is passed as argument after LOAD and ERASE
6760+ 4A09 AF           CHK1AR: xor     A               ; reset A
6761+ 4A0A 32 B4 81             ld      (TPBF4),A       ; default setting
6762+ 4A0D                                              ; (load=store file in RAM using current BASIC pointers
6763+ 4A0D                                              ; (erase=quick delete)
6764+ 4A0D 2B                   dec     HL              ; dec 'cause GETCHR increments
6765+ 4A0E CD FA 25             call    GETCHR          ; check if something follows
6766+ 4A11 C8                   ret     Z               ; if nothing follows, return
6767+ 4A12 CD B1 23             call    CHKSYN          ; Make sure ',' follows
6768+ 4A15 2C                   defb    ','
6769+ 4A16 CD 11 33             call    GETINT          ; get a value
6770+ 4A19 3D                   dec     A               ; decrement it
6771+ 4A1A C2 B1 20             jp      NZ,SNERR        ; not '1' - raise an error
6772+ 4A1D 3C                   inc     A               ; A=1
6773+ 4A1E 32 B4 81             ld      (TPBF4),A       ; load=store file in RAM using address in file
6774+ 4A21                                              ; erase=full delete
6775+ 4A21 C9                   ret                     ; return to caller
6776+ 4A22
6777+ 4A22
6778+ 4A22              ; ERASE "filename"
6779+ 4A22              ; erase a file from disk
6780+ 4A22 CD B9 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6781+ 4A25 CD ED 4B             call    CHKFLNM         ; check for a disk name
6782+ 4A28 CD 09 4A             call    CHK1AR          ; check for ",1" argument
6783+ 4A2B E5                   push    HL              ; store code string pointer
6784+ 4A2C 21 4F 4A             ld      HL,ERSTX        ; Point to message
6785+ 4A2F CD 93 2F             call    PRS             ; print message for init confirmation
6786+ 4A32 E1                   pop     HL              ; retrieve HL
6787+ 4A33 CD CA 4B             call    CNFREQ          ; ask for confirmation
6788+ 4A36 38 33                jr      C,ABRTDS        ; if Carry set then abort
6789+ 4A38 CD 2D 10             call    CF_INIT         ; init CF card
6790+ 4A3B DA 02 4A             jp      C,DOS_ERR       ; error if device not available/ready
6791+ 4A3E E5                   push    HL              ; store code string pointer
6792+ 4A3F CD 1F 16             call    FIL_ERASE       ; deleted file
6793+ 4A42 E1                   pop     HL
6794+ 4A43 DA 02 4A             jp      C,DOS_ERR       ; leave if error
6795+ 4A46 E5                   push    HL              ; store HL
6796+ 4A47 21 5D 4A             ld      HL,ERASED       ; point to message of file deleted
6797+ 4A4A CD 93 2F             call    PRS             ; print it
6798+ 4A4D E1                   pop     HL              ; retrieve HL
6799+ 4A4E C9                   ret                     ; return to caller
6800+ 4A4F 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6800+ 4A53 74 65 20 66
6800+ 4A57 69 6C 65 3F
6800+ 4A5B 20 00
6801+ 4A5D 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6801+ 4A61 20 64 65 6C
6801+ 4A65 65 74 65 64
6801+ 4A69 0D 00
6802+ 4A6B
6803+ 4A6B
6804+ 4A6B              ; disk operation aborted
6805+ 4A6B 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6806+ 4A6D 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6807+ 4A70 E5                   push    HL              ; store HL
6808+ 4A71 21 79 4A             ld      HL,ABRTXT       ; Point to message
6809+ 4A74 CD 93 2F             call    PRS             ; print message for leaving init procedure
6810+ 4A77 E1                   pop     HL              ; retrieve HL
6811+ 4A78 C9                   ret                     ; return to caller
6812+ 4A79 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6812+ 4A7D 72 74 65 64
6812+ 4A81 00
6813+ 4A82
6814+ 4A82
6815+ 4A82               ; DISK command -------
6816+ 4A82              ; execute several operations on a disk:
6817+ 4A82              ; "F": format/rewrite Master Sector
6818+ 4A82              ; "R": rename disk
6819+ 4A82              ; syntax: DISK "arg1"[,arg2][,1]
6820+ 4A82              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6821+ 4A82 CD 25 47     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6822+ 4A85 C2 C6 20             jp      NZ,IMERR        ; raise error if in indirect mode
6823+ 4A88 CD B9 48             call    CHKDOS          ; check if DOS is enabled
6824+ 4A8B                      ; check first argument
6825+ 4A8B 2B                   dec     HL              ; dec 'cause GETCHR increments
6826+ 4A8C CD FA 25             call    GETCHR          ; check if something follows
6827+ 4A8F CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6828+ 4A92 CD 9D 2A             call    EVAL            ; Evaluate expression
6829+ 4A95 CD 8F 2A             call    TSTSTR          ; Make sure it's a string
6830+ 4A98 22 9D 81             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6831+ 4A9B CD D6 30             call    GSTRCU          ; check that a string follows
6832+ 4A9E CD E7 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6833+ 4AA1 7B                   ld      A,E
6834+ 4AA2 3D                   dec     A               ; lenght must be = 1
6835+ 4AA3 2A 9D 81             ld      HL,(TPHL)       ; retrieve code string pointer
6836+ 4AA6 C2 B1 20             jp      NZ,SNERR
6837+ 4AA9 0A                   ld      A,(BC)          ; load command
6838+ 4AAA E6 5F                and     %01011111       ; Force upper case
6839+ 4AAC FE 46                cp      'F'             ; format command?
6840+ 4AAE CA BE 4A             jp      Z,DSKFRM        ; yes, format disk
6841+ 4AB1 FE 52                cp      'R'             ; rename command?
6842+ 4AB3 CA 98 4B             jp      Z,DSKRNM        ; yes, rename disk
6843+ 4AB6 FE 55                cp      'U'             ; undelete command?
6844+ 4AB8 CA 8B 4B             jp      Z,DSKUND        ; yes undelete files
6845+ 4ABB C3 B1 20             jp      SNERR           ; nothing more - raise a syntax error
6846+ 4ABE
6847+ 4ABE
6848+ 4ABE              ; Format disk or rewrite Master sector
6849+ 4ABE              ; syntax: DISK "F","disk name"[,1]
6850+ 4ABE              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6851+ 4ABE              ; ",1": just rewrite Master sector without overwriting current directory
6852+ 4ABE              ; Format: set up a fresh new file system, re-writing the Master sector and
6853+ 4ABE              ; initializing the directory
6854+ 4ABE              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6855+ 4ABE              ; re-calculating disk geometry
6856+ 4ABE              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6857+ 4ABE              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6858+ 4ABE CD B1 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6859+ 4AC1 2C                   defb    ','
6860+ 4AC2 CD ED 4B             call    CHKFLNM         ; check for file name
6861+ 4AC5 CD 09 4A             call    CHK1AR          ; check if ",1" follows - saved into A
6862+ 4AC8 11 10 4B             ld      DE,MSTTXT       ; format message
6863+ 4ACB B7                   or      A               ; A=0?
6864+ 4ACC 20 03                jr      NZ,CFINIT       ; no, jump over
6865+ 4ACE 11 42 4B             ld      DE,FRMTXT       ; only Master Sector
6866+ 4AD1 E5           CFINIT: push    HL              ; store code string pointer
6867+ 4AD2 62                   ld      H,D             ; Point to message
6868+ 4AD3 6B                   ld      L,E
6869+ 4AD4 CD 93 2F             call    PRS             ; print message for confirmation
6870+ 4AD7 E1                   pop     HL              ; retrieve HL
6871+ 4AD8 CD CA 4B             call    CNFREQ          ; ask for confirmation
6872+ 4ADB DA 6B 4A             jp      C,ABRTDS        ; if Carry set then abort
6873+ 4ADE CD 2D 10     INITDSK:call    CF_INIT         ; init CF card
6874+ 4AE1 DA 02 4A             jp      C,DOS_ERR       ; error if device not available/ready
6875+ 4AE4 C5                   push    BC
6876+ 4AE5 D5                   push    DE
6877+ 4AE6 E5                   push    HL              ; store code string pointer
6878+ 4AE7 CD 1A 11             call    DSK_INIT        ; init disk
6879+ 4AEA E1                   pop     HL
6880+ 4AEB D1                   pop     DE
6881+ 4AEC C1                   pop     BC
6882+ 4AED 30 03                jr      NC,INITFN       ; leave if no errors
6883+ 4AEF C3 02 4A             jp      DOS_ERR         ; raise error
6884+ 4AF2 E5           INITFN: push    HL              ; store code string pointer
6885+ 4AF3 3A 05 82             ld      A,(TMPBFR1)
6886+ 4AF6 B7                   or      A               ; full formatting?
6887+ 4AF7 20 0F                jr      NZ,MSPTOK       ; no
6888+ 4AF9 21 74 4B             ld      HL,FRMTOK       ; yes, Point to message
6889+ 4AFC CD 93 2F             call    PRS             ; print message for init confirmation
6890+ 4AFF D5                   push    DE
6891+ 4B00 16 00                ld      D,$00           ; print only disk details, no file list
6892+ 4B02 CD CB 12             call    LST_FILES       ; print details of disk and list files
6893+ 4B05 D1                   pop     DE
6894+ 4B06 E1                   pop     HL
6895+ 4B07 C9                   ret                     ; return to caller
6896+ 4B08 21 28 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6897+ 4B0B CD 93 2F             call    PRS             ; print message for init confirmation
6898+ 4B0E E1                   pop     HL              ; retrieve code string pointer
6899+ 4B0F C9                   ret                     ; return to caller
6900+ 4B10 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6900+ 4B14 69 74 65 20
6900+ 4B18 4D 61 73 74
6900+ 4B1C 65 72 20 53
6900+ 4B20 65 63 74 6F
6900+ 4B24 72 3F 20 00
6901+ 4B28 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6901+ 4B2C 74 65 72 20
6901+ 4B30 53 65 63 74
6901+ 4B34 6F 72 20 72
6901+ 4B38 65 77 72 69
6901+ 4B3C 74 74 65 6E
6901+ 4B40 0D 00
6902+ 4B42 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6902+ 4B46 49 4E 47 21
6902+ 4B4A 21 20 44 69
6902+ 4B4E 73 6B 20 63
6902+ 4B52 6F 6E 74 65
6902+ 4B56 6E 74 73 20
6902+ 4B5A 77 69 6C 6C
6902+ 4B5E 20 62 65 20
6902+ 4B62 65 72 61 73
6902+ 4B66 65 64 2E 20
6903+ 4B6A 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6903+ 4B6E 65 65 64 3F
6903+ 4B72 20 00
6904+ 4B74 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6904+ 4B78 6D 61 74 74
6904+ 4B7C 69 6E 67 20
6904+ 4B80 63 6F 6D 70
6904+ 4B84 6C 65 74 65
6904+ 4B88 64 0D 00
6905+ 4B8B
6906+ 4B8B
6907+ 4B8B              ; undelete files
6908+ 4B8B              ; look for files marked as "deleted" and undelete them
6909+ 4B8B 2B           DSKUND: dec     HL              ; dec 'cause GETCHR increments
6910+ 4B8C CD FA 25             call    GETCHR          ; check if something follows
6911+ 4B8F C2 B1 20             jp      NZ,SNERR        ; if something else, raise a syntax error
6912+ 4B92 E5                   push    HL
6913+ 4B93 CD 15 17             call    DSKUNDFL        ; undelete files
6914+ 4B96 E1                   pop     HL
6915+ 4B97 C9                   ret
6916+ 4B98
6917+ 4B98
6918+ 4B98              ; disk rename
6919+ 4B98              ; change the name of the disk w/o altering anything else
6920+ 4B98 CD B1 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6921+ 4B9B 2C                   defb    ','
6922+ 4B9C CD ED 4B             call    CHKFLNM         ; check for file name
6923+ 4B9F E5                   push    HL              ; store code string pointer
6924+ 4BA0 21 BC 4B             ld      HL,RNDKTX       ; Point to message
6925+ 4BA3 CD 93 2F             call    PRS             ; print message for confirmation
6926+ 4BA6 E1                   pop     HL              ; retrieve HL
6927+ 4BA7 CD CA 4B             call    CNFREQ          ; ask for confirmation
6928+ 4BAA DA 6B 4A             jp      C,ABRTDS        ; if Carry set then abort
6929+ 4BAD CD 2D 10             call    CF_INIT         ; init CF card
6930+ 4BB0 DA 02 4A             jp      C,DOS_ERR       ; error if device not available/ready
6931+ 4BB3 E5                   push    HL              ; store code string pointer
6932+ 4BB4 CD 4F 12             call    DSK_RNM         ; init disk
6933+ 4BB7 E1                   pop     HL
6934+ 4BB8 DA 02 4A             jp      C,DOS_ERR       ; DOS error
6935+ 4BBB C9                   ret
6936+ 4BBC 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6936+ 4BC0 6D 65 20 64
6936+ 4BC4 69 73 6B 3F
6936+ 4BC8 20 00
6937+ 4BCA
6938+ 4BCA
6939+ 4BCA              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6940+ 4BCA CD 44 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6941+ 4BCD AF                   xor     A
6942+ 4BCE 32 01 82             ld      (PRNTVIDEO),A   ; disable print-on-video
6943+ 4BD1 CD 2A 02             call    RXA             ; look for a pressed key
6944+ 4BD4 FE 03                cp      CTRLC           ; is it RUN STOP?
6945+ 4BD6 28 13                jr      Z,CNFRQN        ; yes, abort operation
6946+ 4BD8 E6 DF                and     %11011111       ; only UPPERCASE char
6947+ 4BDA FE 59                cp      'Y'             ; 'Y'?
6948+ 4BDC 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6949+ 4BDE 3E 01                ld      A,$01           ; re-enable...
6950+ 4BE0 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6951+ 4BE3 CD 1F 03             call    ECHO_CHAR       ; yes, echoes the char
6952+ 4BE6 CD 59 09             call    CURSOR_OFF      ; disable cursor
6953+ 4BE9 AF                   xor     A               ; reset Carry flag
6954+ 4BEA C9                   ret                     ; return to caller
6955+ 4BEB 37           CNFRQN: scf                     ; set Carry flag
6956+ 4BEC C9                   ret                     ; return to caller
6957+ 4BED
6958+ 4BED
6959+ 4BED              ; check that a disk/file name follows
6960+ 4BED 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6961+ 4BEE CD FA 25             call    GETCHR          ; check if something follows
6962+ 4BF1 CA B1 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6963+ 4BF4 CD 9D 2A             call    EVAL            ; Evaluate expression
6964+ 4BF7 CD 8F 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6965+ 4BFA 22 9F 81             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6966+ 4BFD ED 53 A1 81          ld      (TMPDBF+4),DE   ; store DE
6967+ 4C01 ED 43 A3 81          ld      (TMPDBF+6),BC
6968+ 4C05 CD D6 30             call    GSTRCU          ; get current string into pool
6969+ 4C08 CD E7 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6970+ 4C0B 7B                   ld      A,E             ; check if lenght = 0
6971+ 4C0C A7                   and     A               ; null string?
6972+ 4C0D CA B1 20             jp      Z,SNERR         ; yes, syntax error
6973+ 4C10 ED 53 09 82          ld      (DKLNPT),DE     ; no, store lenght
6974+ 4C14 ED 43 07 82          ld      (DKNMPT),BC     ; store address of temp string
6975+ 4C18 2A 9F 81             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6976+ 4C1B ED 5B A1 81          ld      DE,(TMPDBF+4)   ; retrieve DE
6977+ 4C1F ED 4B A3 81          ld      BC,(TMPDBF+6)   ; retrieve BC
6978+ 4C23 C9                   ret                     ; return to caller
6979+ 4C24
6980+ 4C24
6981+ 4C24              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6982+ 4C24 CD 8E 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6983+ 4C27 CD B0 26             call	DEINT           ; Get integer -32768 to 32767
6984+ 4C2A C5                   push	BC              ; Save contents of BC
6985+ 4C2B 21 5E 82             ld      HL,PBUFF        ; load address of PBUFF into HL
6986+ 4C2E 7A                   ld      A,D             ; Get MSB into A
6987+ 4C2F B7                   or      A               ; OR with LSB to see if param=0
6988+ 4C30 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6989+ 4C32 CD 5A 4C             call    BYT2ASC         ; Convert D to ASCII
6990+ 4C35 78                   ld      A,B             ; cechk if B
6991+ 4C36 FE 30                cp      '0'             ; is 0
6992+ 4C38 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6993+ 4C3A 70                   ld      (HL),B          ; Store it to PBUFF
6994+ 4C3B 23                   inc     HL              ; Next location
6995+ 4C3C 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6996+ 4C3D 23                   inc     HL              ; Next location
6997+ 4C3E 7B           HEX2:   ld      A,E             ; Get lower byte
6998+ 4C3F CD 5A 4C             call    BYT2ASC         ; Convert E to ASCII
6999+ 4C42 7A                   ld      A,D
7000+ 4C43 B7                   or      A
7001+ 4C44 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
7002+ 4C46 78                   ld      A,B
7003+ 4C47 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
7004+ 4C49 28 02                jr      Z,HEX4
7005+ 4C4B 70           HEX3:   ld      (HL),B          ; to PBUFF+2
7006+ 4C4C 23                   inc     HL              ; Next location
7007+ 4C4D 71           HEX4:   ld      (HL),C          ; to PBUFF+3
7008+ 4C4E 23                   inc     HL              ; PBUFF+4 to zero
7009+ 4C4F AF                   xor     A               ; Terminating character
7010+ 4C50 77                   ld      (HL),A          ; Store zero to terminate
7011+ 4C51 23                   inc     HL              ; Make sure PBUFF is terminated
7012+ 4C52 77                   ld      (HL),A          ; Store the double zero there
7013+ 4C53 C1                   pop     BC              ; Get BC back
7014+ 4C54 21 5E 82             ld      HL,PBUFF        ; Reset to start of PBUFF
7015+ 4C57 C3 23 2F             jp      STR1            ; Convert the PBUFF to a string and return it
7016+ 4C5A 47           BYT2ASC:ld      B,A             ; Save original value
7017+ 4C5B E6 0F                and     $0F             ; Strip off upper nybble
7018+ 4C5D FE 0A                cp      $0A             ; 0-9?
7019+ 4C5F 38 02                jr      C,ADD30         ; If A-F, add 7 more
7020+ 4C61 C6 07                add     A,$07           ; Bring value up to ASCII A-F
7021+ 4C63 C6 30        ADD30:  add     A,$30           ; And make ASCII
7022+ 4C65 4F                   ld      C,A             ; Save converted char to C
7023+ 4C66 78                   ld      A,B             ; Retrieve original value
7024+ 4C67 0F                   rrca                    ; and Rotate it right
7025+ 4C68 0F                   rrca
7026+ 4C69 0F                   rrca
7027+ 4C6A 0F                   rrca
7028+ 4C6B E6 0F                and     $0F             ; Mask off upper nybble
7029+ 4C6D FE 0A                cp      $0A             ; 0-9? < A hex?
7030+ 4C6F 38 02                jr      C,ADD301        ; Skip Add 7
7031+ 4C71 C6 07                add     A,$07           ; Bring it up to ASCII A-F
7032+ 4C73 C6 30        ADD301: add     A,$30           ; And make it full ASCII
7033+ 4C75 47                   ld      B,A             ; Store high order byte
7034+ 4C76 C9                   ret
7035+ 4C77
7036+ 4C77              ; Convert "&Hnnnn" to FPREG
7037+ 4C77              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7038+ 4C77              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7039+ 4C77 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7040+ 4C78 21 00 00             ld      HL,$0000        ; Zero out the value
7041+ 4C7B CD 90 4C             call    GETHEX          ; Check the number for valid hex
7042+ 4C7E DA B0 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7043+ 4C81 18 05                jr      HEXLP1          ; Convert first character
7044+ 4C83 CD 90 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7045+ 4C86 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7046+ 4C88 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7047+ 4C89 29                   add     HL,HL
7048+ 4C8A 29                   add     HL,HL
7049+ 4C8B 29                   add     HL,HL
7050+ 4C8C B5                   or      L               ; Add in D0-D3 into L
7051+ 4C8D 6F                   ld      L,A             ; Save new value
7052+ 4C8E 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7053+ 4C90
7054+ 4C90 13           GETHEX: inc     DE              ; Next location
7055+ 4C91 1A                   ld      A,(DE)          ; Load character at pointer
7056+ 4C92 FE 20                cp      SPC
7057+ 4C94 CA 90 4C             jp      Z,GETHEX        ; Skip spaces
7058+ 4C97 D6 30                sub     $30             ; Get absolute value
7059+ 4C99 D8                   ret     C               ; < "0", error
7060+ 4C9A FE 0A                cp      $0A
7061+ 4C9C 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7062+ 4C9E D6 07                sub     $07             ; Reduce to A-F
7063+ 4CA0 FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7064+ 4CA2 D8                   ret     C               ; CY set if was :            ; < = > ? @
7065+ 4CA3 FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7066+ 4CA5 3F                   ccf
7067+ 4CA6 C9                   ret                     ; CY set if it wasn't valid hex
7068+ 4CA7
7069+ 4CA7 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7070+ 4CA8 7A                   ld      A,D             ; Load DE into AC
7071+ 4CA9 4B                   ld      C,E             ; For prep to
7072+ 4CAA E5                   push    HL
7073+ 4CAB CD 74 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7074+ 4CAE E1                   pop     HL
7075+ 4CAF C9                   ret
7076+ 4CB0
7077+ 4CB0 DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7078+ 4CB2 C3 CB 20             jp      ERROR
7079+ 4CB5
7080+ 4CB5              ; BIN$(NN) Convert integer to a 1-16 char binary string
7081+ 4CB5 CD 8E 2A     BIN:    call    TSTNUM          ; Verify it's a number
7082+ 4CB8 CD B0 26             call    DEINT           ; Get integer -32768 to 32767
7083+ 4CBB C5           BIN2:   push    BC              ; Save contents of BC
7084+ 4CBC 21 5E 82             ld      HL,PBUFF
7085+ 4CBF 06 11                ld      B,$11           ; One higher than max char count (16+1)
7086+ 4CC1              ZEROSUP:                        ; Suppress leading zeros
7087+ 4CC1 05                   dec     B               ; Max 16 chars
7088+ 4CC2 78                   ld      A,B
7089+ 4CC3 FE 01                cp      $01
7090+ 4CC5 28 08                jr      Z,BITOUT        ; Always output at least one character
7091+ 4CC7 CB 13                rl      E
7092+ 4CC9 CB 12                rl      D
7093+ 4CCB 30 F4                jr      NC,ZEROSUP
7094+ 4CCD 18 04                jr      BITOUT2
7095+ 4CCF CB 13        BITOUT: rl      E
7096+ 4CD1 CB 12                rl      D               ; Top bit now in carry
7097+ 4CD3 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7098+ 4CD5 CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7099+ 4CD7 77                   ld      (HL),A
7100+ 4CD8 23                   inc     HL
7101+ 4CD9 05                   dec     B
7102+ 4CDA 20 F3                jr      NZ,BITOUT
7103+ 4CDC AF                   xor     A               ; Terminating character
7104+ 4CDD 77                   ld      (HL),A          ; Store zero to terminate
7105+ 4CDE 23                   inc     HL              ; Make sure PBUFF is terminated
7106+ 4CDF 77                   ld      (HL),A          ; Store the double zero there
7107+ 4CE0 C1                   pop     BC
7108+ 4CE1 21 5E 82             ld      HL,PBUFF
7109+ 4CE4 C3 23 2F             jp      STR1
7110+ 4CE7
7111+ 4CE7              ; Convert "&Bnnnn" to FPREG
7112+ 4CE7              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7113+ 4CE7 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7114+ 4CE8 21 00 00             ld      HL,$0000        ; Zero out the value
7115+ 4CEB CD 04 4D             call    CHKBIN          ; Check the number for valid bin
7116+ 4CEE DA 12 4D             jp      C,BINERR        ; First value wasn't bin, HX error
7117+ 4CF1 D6 30        BINIT:  sub     '0'
7118+ 4CF3 29                   add     HL,HL           ; Rotate HL left
7119+ 4CF4 B5                   or      L
7120+ 4CF5 6F                   ld      L,A
7121+ 4CF6 CD 04 4D             call    CHKBIN          ; Get second and addtional characters
7122+ 4CF9 30 F6                jr      NC,BINIT        ; Process if a bin character
7123+ 4CFB EB                   ex      DE,HL           ; Value into DE, Code string into HL
7124+ 4CFC 7A                   ld      A,D             ; Load DE into AC
7125+ 4CFD 4B                   ld      C,E             ; For prep to
7126+ 4CFE E5                   push    HL
7127+ 4CFF CD 74 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7128+ 4D02 E1                   pop     HL
7129+ 4D03 C9                   ret
7130+ 4D04
7131+ 4D04              ; Char is in A, NC if char is 0 or 1
7132+ 4D04 13           CHKBIN: inc     DE
7133+ 4D05 1A                   ld      A,(DE)
7134+ 4D06 FE 20                cp      SPC
7135+ 4D08 CA 04 4D             jp      Z,CHKBIN        ; Skip spaces
7136+ 4D0B FE 30                cp      '0'             ; Set C if < '0'
7137+ 4D0D D8                   ret     C
7138+ 4D0E FE 32                cp      '2'
7139+ 4D10 3F                   ccf                     ; Set C if > '1'
7140+ 4D11 C9                   ret
7141+ 4D12
7142+ 4D12 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7143+ 4D14 C3 CB 20             jp      ERROR
7144+ 4D17
7145+ 4D17
7146+ 4D17 C3 08 00     MONOUT: jp      $0008           ; output a char
7147+ 4D1A
7148+ 4D1A
7149+ 4D1A CD 2C 33     RESET:  call    DISNMI          ; disable NMI vector
7150+ 4D1D 3A 47 82             ld      A,(SERIALS_EN)  ; load status of serial lines
7151+ 4D20 E6 11                and     $11             ; are serial ports open?
7152+ 4D22 C4 23 45             call    NZ,RSTSERS      ; yes, reset serials
7153+ 4D25 3A 4A 82             ld      A,(DOS_EN)      ; is DOS enabled
7154+ 4D28 A7                   and     A               ; if enabled, A<>0
7155+ 4D29 C4 A5 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7156+ 4D2C F3                   di                      ; disable INTs
7157+ 4D2D                  IFDEF LM80C64K
7158+ 4D2D ~                    jp      ROM2RAM         ; Restart
7159+ 4D2D                  ELSE
7160+ 4D2D C3 00 00             jp      $0000           ; Restart
7161+ 4D30                  ENDIF
7162+ 4D30
7163+ 4D30
7164+ 4D30 3E 00        INITST: ld      A,$00           ; Clear break flag
7165+ 4D32 32 A9 80             ld      (BRKFLG),A
7166+ 4D35 C3 A0 1B             jp      SYSINIT
7167+ 4D38
7168+ 4D38
7169+ 4D38 F5           TSTBIT: push    AF              ; Save bit mask
7170+ 4D39 A0                   and     B               ; Get common bits
7171+ 4D3A C1                   pop     BC              ; Restore bit mask
7172+ 4D3B B8                   cp      B               ; Same bit set?
7173+ 4D3C 3E 00                ld      A,$00           ; Return 0 in A
7174+ 4D3E C9                   ret
7175+ 4D3F
7176+ 4D3F CD BC 23     OUTNCR: call    OUTC            ; Output character in A
7177+ 4D42 C3 C7 28             jp      PRNTCRLF        ; Output CRLF
7178+ 4D45
# file closed: ../include/basic/basic-1.07.asm
  87  4D45
  88  4D45              ; include utils
  89  4D45                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4D45              ; ------------------------------------------------------------------------------
   2+ 4D45              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4D45              ; ------------------------------------------------------------------------------
   4+ 4D45              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4D45              ; designed by Leonardo Miliani. More info at
   6+ 4D45              ; www DOT leonardomiliani DOT com
   7+ 4D45              ;
   8+ 4D45              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4D45              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4D45              ;
  11+ 4D45              ; * WKT are routines from WikiTI:
  12+ 4D45              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4D45              ;
  14+ 4D45              ; * LAC are routines from Learn@Cemetch
  15+ 4D45              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4D45              ;
  17+ 4D45              ; ------------------------------------------------------------------------------
  18+ 4D45              ; Code Revision:
  19+ 4D45              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4D45              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4D45              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4D45              ;                   transform a 32-bit value into ASCII representation
  23+ 4D45              ;
  24+ 4D45              ; ------------------------------------------------------------------------------
  25+ 4D45
  26+ 4D45              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4D45              ; values can be both signed or unsigned words
  28+ 4D45              ; inputs: HL, DE
  29+ 4D45              ; destroys: A,F,HL
  30+ 4D45              ;
  31+ 4D45              ; returns: Z=1 if HL = DE
  32+ 4D45              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4D45              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4D45              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4D45              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4D45              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4D45              ; Source: ALS
  38+ 4D45
  39+ 4D45 B7           CMP16:  or      A           ; clear CARRY
  40+ 4D46 ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4D48 E0                   ret     PO          ; return if no overflow
  42+ 4D49 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4D4A 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4D4B EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4D4D 37                   scf                 ; ensure a Non-Zero result
  46+ 4D4E 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4D4F                                          ; ZERO flag = 0 for sure
  48+ 4D4F C9                   ret                 ; return
  49+ 4D50
  50+ 4D50              ; ----------------------------------------------------------------------
  51+ 4D50
  52+ 4D50              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4D50              ; signed/unsigned product
  54+ 4D50              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4D50              ; destroys: A,F
  56+ 4D50              ; returns: HL (product)
  57+ 4D50              ; Source: ALS
  58+ 4D50
  59+ 4D50              ; initialize partial product, bit count
  60+ 4D50 C5           MUL16:  push    BC
  61+ 4D51 4D                   ld      C,L         ; BC = multiplier
  62+ 4D52 44                   ld      B,H
  63+ 4D53 21 00 00             ld      HL,0        ; product = 0
  64+ 4D56 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4D58                      ; shift-and-add algorithm
  66+ 4D58                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4D58                      ; shift partial product, multiplier left 1 bit
  68+ 4D58 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4D5A CB 12                rl      D
  70+ 4D5C 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4D5E 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4D5F 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4D60 3D                   dec     A
  74+ 4D61 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4D63                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4D63 B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4D64 F2 68 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D67 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D68 C1           EXMUL16:pop     BC
  80+ 4D69 C9                   ret
  81+ 4D6A
  82+ 4D6A
  83+ 4D6A              ; ----------------------------------------------------------------------
  84+ 4D6A
  85+ 4D6A              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D6A              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D6A              ; destroys: A,F
  88+ 4D6A              ; operation: BC * DE
  89+ 4D6A              ; returns: DEHL (product)
  90+ 4D6A              ; Source: WKT
  91+ 4D6A
  92+ 4D6A 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D6D CB 23                sla     E		; optimised 1st iteration
  94+ 4D6F CB 12                rl      D
  95+ 4D71 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D73 60                   ld      H,B
  97+ 4D74 69                   ld      L,C
  98+ 4D75 3E 0F        MU32_1: ld      A,$0F
  99+ 4D77 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D78 CB 13                rl      E
 101+ 4D7A CB 12                rl      D
 102+ 4D7C 30 04                jr      NC,MU32_2
 103+ 4D7E 09                   add     HL,BC
 104+ 4D7F 30 01                jr      NC,MU32_2
 105+ 4D81 13                   inc     DE
 106+ 4D82 3D           MU32_2: dec     A
 107+ 4D83 20 F2                jr      NZ,MUL_32L
 108+ 4D85 C9                   ret
 109+ 4D86
 110+ 4D86              ; ----------------------------------------------------------------------
 111+ 4D86              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D86              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D86              ;
 114+ 4D86              ; inputs: HL
 115+ 4D86              ; destroys: A
 116+ 4D86              ; operation: ABS(HL)
 117+ 4D86              ; returns: HL with no sign or negated
 118+ 4D86              ; Source: WKT
 119+ 4D86
 120+ 4D86 CB 7C        absHL:  bit     7,H
 121+ 4D88 C8                   ret     Z
 122+ 4D89 AF           negHL:  xor     A
 123+ 4D8A 95                   sub     L
 124+ 4D8B 6F                   ld      L,A
 125+ 4D8C 9F                   sbc     A,A
 126+ 4D8D 94                   sub     H
 127+ 4D8E 67                   ld      H,A
 128+ 4D8F C9                   ret
 129+ 4D90
 130+ 4D90              ; ------------------------------------------------------------------------------
 131+ 4D90
 132+ 4D90              ; 8/8 division
 133+ 4D90              ; INPUT: D (dividend), E (divisor)
 134+ 4D90              ; OPERATION: D/E
 135+ 4D90              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D90 AF           DIV_8_8:    xor     A
 137+ 4D91 C5                       push    BC
 138+ 4D92 06 08                    ld      B,08h
 139+ 4D94 CB 22        DIV_8_8LOOP:sla     D
 140+ 4D96 17                       rla
 141+ 4D97 BB                       cp      E
 142+ 4D98 38 02                    jr      C,$+4
 143+ 4D9A 93                       sub     E
 144+ 4D9B 14                       inc     D
 145+ 4D9C 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D9E C1                       pop     BC
 147+ 4D9F C9                       ret
 148+ 4DA0
 149+ 4DA0              ; ----------------------------------------------------------------------
 150+ 4DA0              ; divide a 16-bit number by an 8-bit number
 151+ 4DA0              ; (16/8 division)
 152+ 4DA0              ;
 153+ 4DA0              ; inputs: HL (Dividend), C (divisor)
 154+ 4DA0              ; destroys: A, B
 155+ 4DA0              ; OPERATION: HL/C
 156+ 4DA0              ; returns: HL (quotient), A (remainder)
 157+ 4DA0              ; source: WKT
 158+ 4DA0
 159+ 4DA0 AF           DIV_16_8:   xor     A
 160+ 4DA1 06 10                    ld      B,16
 161+ 4DA3 29           DIV_16_8LP: add     HL,HL
 162+ 4DA4 17                       rla
 163+ 4DA5 38 03                    jr      C,$+5
 164+ 4DA7 B9                       cp      C
 165+ 4DA8 38 02                    jr      C,$+4
 166+ 4DAA 91                       sub     C
 167+ 4DAB 2C                       inc     L
 168+ 4DAC 10 F5                    djnz    DIV_16_8LP
 169+ 4DAE C9                       ret
 170+ 4DAF
 171+ 4DAF              ; ----------------------------------------------------------------------
 172+ 4DAF              ; divide a 16-bit number by a 16-bit number
 173+ 4DAF              ; (16/16 division)
 174+ 4DAF              ;
 175+ 4DAF              ; inputs: AC (Dividend), DE (divisor)
 176+ 4DAF              ; destroys: HL,A,C
 177+ 4DAF              ; OPERATION: AC/DE
 178+ 4DAF              ; returns: AC (quotient), HL (remainder)
 179+ 4DAF              ; source: WKT
 180+ 4DAF 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4DB2 06 10                    ld      B, 16
 182+ 4DB4 CB 21        DV16_16_LP: sla     C
 183+ 4DB6 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4DB8 17                       rla
 185+ 4DB9 ED 6A                    adc     HL,HL
 186+ 4DBB ED 52                    sbc     HL,DE
 187+ 4DBD 30 02                    jr      NC, $+4
 188+ 4DBF 19                       add     HL,DE
 189+ 4DC0 0D                       dec     C
 190+ 4DC1 10 F1                    djnz    DV16_16_LP
 191+ 4DC3 C9                       ret
 192+ 4DC4
 193+ 4DC4
 194+ 4DC4              ; ----------------------------------------------------------------------
 195+ 4DC4              ; divide a 32-bit number by a 16 bit-number
 196+ 4DC4              ; (32/16 division)
 197+ 4DC4              ;
 198+ 4DC4              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4DC4              ; destroys: HL,IX,BC
 200+ 4DC4              ; OPERATION: ACIX/DE
 201+ 4DC4              ; returns: ACIX (quotient), HL (remainder)
 202+ 4DC4              ; source: WKT
 203+ 4DC4
 204+ 4DC4 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4DC7 06 20                    ld      B,32
 206+ 4DC9 DD 29        DIV_32_16LP:add     IX,IX
 207+ 4DCB CB 11                    rl      C
 208+ 4DCD 17                       rla
 209+ 4DCE ED 6A                    adc     HL,HL
 210+ 4DD0 38 08                    jr      C,DIV_32_16OF
 211+ 4DD2 ED 52                    sbc     HL,DE
 212+ 4DD4 30 07                    jr      NC,DIV_32_16SB
 213+ 4DD6 19                       add     HL,DE
 214+ 4DD7 10 F0                    djnz    DIV_32_16LP
 215+ 4DD9 C9                       ret
 216+ 4DDA B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4DDB ED 52                    sbc     HL,DE
 218+ 4DDD DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4DDF 10 E8                    djnz    DIV_32_16LP
 220+ 4DE1 C9                       ret
 221+ 4DE2
 222+ 4DE2
 223+ 4DE2              ; ----------------------------------------------------------------------
 224+ 4DE2              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4DE2              ;
 226+ 4DE2              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4DE2              ; destroys: AF, BC, DE, HL, IX
 228+ 4DE2              ; outputs: IY (last char in dest. string)
 229+ 4DE2              ; source: MSX Forum
 230+ 4DE2
 231+ 4DE2 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4DE6 0A 00 00 00
 231+ 4DEA 64 00 00 00
 231+ 4DEE E8 03 00 00
 231+ 4DF2 10 27 00 00
 232+ 4DF6 A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4DFA 40 42 0F 00
 232+ 4DFE 80 96 98 00
 232+ 4E02 00 E1 F5 05
 232+ 4E06 00 CA 9A 3B
 233+ 4E0A 00 00 00 00  CLCN32Z:    defs    4
 234+ 4E0E
 235+ 4E0E DD 22 0A 4E  CLCN32:     ld      (CLCN32Z),IX
 236+ 4E12 ED 53 0C 4E              ld      (CLCN32Z+$02),DE
 237+ 4E16 DD 21 06 4E              ld      IX,CLCN32T+$24
 238+ 4E1A 06 09                    ld      B,$09
 239+ 4E1C 0E 00                    ld      C,$00
 240+ 4E1E 3E 30        CLCN321:    ld      A,"0"
 241+ 4E20 B7                       or      A
 242+ 4E21 DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4E24 DD 56 01                 ld      D,(IX+$01)
 244+ 4E27 2A 0A 4E                 ld      HL,(CLCN32Z)
 245+ 4E2A ED 52                    sbc     HL,DE
 246+ 4E2C 22 0A 4E                 ld      (CLCN32Z),HL
 247+ 4E2F DD 5E 02                 ld      E,(IX+$02)
 248+ 4E32 DD 56 03                 ld      D,(IX+$03)
 249+ 4E35 2A 0C 4E                 ld      HL,(CLCN32Z+$02)
 250+ 4E38 ED 52                    sbc     HL,DE
 251+ 4E3A 22 0C 4E                 ld      (CLCN32Z+$02),HL
 252+ 4E3D 38 04                    jr      C,CLCN325
 253+ 4E3F 0C                       inc     C
 254+ 4E40 3C                       inc     A
 255+ 4E41 18 DE                    jr      CLCN322
 256+ 4E43 DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4E46 DD 56 01                 ld      D,(IX+$01)
 258+ 4E49 2A 0A 4E                 ld      HL,(CLCN32Z)
 259+ 4E4C 19                       add     HL,DE
 260+ 4E4D 22 0A 4E                 ld      (CLCN32Z),HL
 261+ 4E50 DD 5E 02                 ld      E,(IX+$02)
 262+ 4E53 DD 56 03                 ld      D,(IX+$03)
 263+ 4E56 2A 0C 4E                 ld      HL,(CLCN32Z+$02)
 264+ 4E59 ED 5A                    adc     HL,DE
 265+ 4E5B 22 0C 4E                 ld      (CLCN32Z+$02),HL
 266+ 4E5E 11 FC FF                 ld      DE,-4
 267+ 4E61 DD 19                    add     IX,DE
 268+ 4E63 0C                       inc     C
 269+ 4E64 0D                       dec     C
 270+ 4E65 28 05                    jr      Z,CLCN323
 271+ 4E67 FD 77 00                 ld      (IY+$00),A
 272+ 4E6A FD 23                    inc     IY
 273+ 4E6C 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E6E 3A 0A 4E                 ld      A,(CLCN32Z)
 275+ 4E71 C6 30                    add     "0"
 276+ 4E73 FD 77 00                 ld      (IY+$00),A
 277+ 4E76 FD 36 01 00              ld      (IY+$01),0
 278+ 4E7A C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E7B
  91  4E7B              ; include the latest version of the font sets
  92  4E7B                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E7B              ; ------------------------------------------------------------------------------
   2+ 4E7B              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E7B              ; ------------------------------------------------------------------------------
   4+ 4E7B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E7B              ; designed by Leonardo Miliani. More info at
   6+ 4E7B              ; www DOT leonardomiliani DOT com
   7+ 4E7B              ; ------------------------------------------------------------------------------
   8+ 4E7B              ; Code Revision:
   9+ 4E7B              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E7B              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E7B              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E7B              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E7B              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E7B              ; R1.5 - 20200524 - New style for char #252
  15+ 4E7B              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E7B              ; ------------------------------------------------------------------------------
  17+ 4E7B              ;
  18+ 4E7B              ;-------------------------------------------------------------------------------
  19+ 4E7B              ;
  20+ 4E7B              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E7B              ;
  22+ 4E7B              ;-------------------------------------------------------------------------------
  23+ 4E7B              ;
  24+ 4E7B              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E7B              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E7B
  27+ 4E7B              CHRST68 equ $
  28+ 4E7B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E7F 00 00 00 00
  29+ 4E83 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E87 00 00 00 00
  30+ 4E8B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E8F 00 00 00 00
  31+ 4E93 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E97 00 00 00 00
  32+ 4E9B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E9F 00 00 00 00
  33+ 4EA3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4EA7 00 00 00 00
  34+ 4EAB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4EAF 00 00 00 00
  35+ 4EB3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4EB7 00 00 00 00
  36+ 4EBB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4EBF 00 00 00 00
  37+ 4EC3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4EC7 00 00 00 00
  38+ 4ECB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4ECF 00 00 00 00
  39+ 4ED3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4ED7 00 00 00 00
  40+ 4EDB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4EDF 00 00 00 00
  41+ 4EE3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4EE7 00 00 00 00
  42+ 4EEB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4EEF 00 00 00 00
  43+ 4EF3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4EF7 00 00 00 00
  44+ 4EFB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4EFF 00 00 00 00
  45+ 4F03 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4F07 00 00 00 00
  46+ 4F0B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4F0F 00 00 00 00
  47+ 4F13 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4F17 00 00 00 00
  48+ 4F1B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4F1F 00 00 00 00
  49+ 4F23 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4F27 00 00 00 00
  50+ 4F2B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4F2F 00 00 00 00
  51+ 4F33 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4F37 00 00 00 00
  52+ 4F3B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4F3F 00 00 00 00
  53+ 4F43 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4F47 00 00 00 00
  54+ 4F4B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4F4F 00 00 00 00
  55+ 4F53 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4F57 00 00 00 00
  56+ 4F5B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4F5F 00 00 00 00
  57+ 4F63 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F67 00 00 00 00
  58+ 4F6B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F6F 00 00 00 00
  59+ 4F73 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F77 00 00 00 00
  60+ 4F7B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F7F 00 00 00 00
  61+ 4F83 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F87 20 00 20 00
  62+ 4F8B 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F8F 00 00 00 00
  63+ 4F93 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F97 F8 50 50 00
  64+ 4F9B 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F9F 28 F0 20 00
  65+ 4FA3 C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4FA7 40 98 18 00
  66+ 4FAB 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4FAF A8 90 68 00
  67+ 4FB3 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4FB7 00 00 00 00
  68+ 4FBB 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4FBF 40 20 10 00
  69+ 4FC3 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4FC7 10 20 40 00
  70+ 4FCB 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4FCF A8 20 00 00
  71+ 4FD3 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4FD7 20 20 00 00
  72+ 4FDB 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4FDF 60 20 40 00
  73+ 4FE3 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4FE7 00 00 00 00
  74+ 4FEB 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4FEF 00 60 60 00
  75+ 4FF3 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4FF7 40 80 00 00
  76+ 4FFB 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4FFF C8 88 70 00
  77+ 5003 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 5007 20 20 70 00
  78+ 500B 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 500F 20 40 F8 00
  79+ 5013 F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 5017 08 88 70 00
  80+ 501B 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 501F F8 10 10 00
  81+ 5023 F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 5027 08 88 70 00
  82+ 502B 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 502F 88 88 70 00
  83+ 5033 F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 5037 40 40 40 00
  84+ 503B 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 503F 88 88 70 00
  85+ 5043 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 5047 08 10 60 00
  86+ 504B 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 504F 30 30 00 00
  87+ 5053 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 5057 30 10 20 00
  88+ 505B 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 505F 40 20 10 00
  89+ 5063 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 5067 F8 00 00 00
  90+ 506B 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 506F 10 20 40 00
  91+ 5073 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 5077 20 00 20 00
  92+ 507B 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 507F A8 A8 70 00
  93+ 5083 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 5087 F8 88 88 00
  94+ 508B F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 508F 88 88 F0 00
  95+ 5093 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 5097 80 88 70 00
  96+ 509B E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 509F 88 90 E0 00
  97+ 50A3 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 50A7 80 80 F8 00
  98+ 50AB F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 50AF 80 80 80 00
  99+ 50B3 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 50B7 88 88 78 00
 100+ 50BB 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 50BF 88 88 88 00
 101+ 50C3 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 50C7 20 20 70 00
 102+ 50CB 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 50CF 10 90 60 00
 103+ 50D3 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 50D7 A0 90 88 00
 104+ 50DB 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 50DF 80 80 F8 00
 105+ 50E3 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 50E7 88 88 88 00
 106+ 50EB 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 50EF 88 88 88 00
 107+ 50F3 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 50F7 88 88 70 00
 108+ 50FB F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 50FF 80 80 80 00
 109+ 5103 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 5107 A8 90 68 00
 110+ 510B F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 510F A0 90 88 00
 111+ 5113 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 5117 08 08 F0 00
 112+ 511B F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 511F 20 20 20 00
 113+ 5123 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 5127 88 88 70 00
 114+ 512B 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 512F 88 50 20 00
 115+ 5133 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 5137 A8 A8 50 00
 116+ 513B 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 513F 50 88 88 00
 117+ 5143 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 5147 20 20 20 00
 118+ 514B F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 514F 40 80 F8 00
 119+ 5153 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 5157 40 40 70 00
 120+ 515B 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 515F 10 08 00 00
 121+ 5163 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 5167 10 10 70 00
 122+ 516B 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 516F 00 00 00 00
 123+ 5173 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 5177 00 00 00 FC
 124+ 517B 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 517F 00 00 00 00
 125+ 5183 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 5187 78 88 78 00
 126+ 518B 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 518F C8 88 F0 00
 127+ 5193 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 5197 80 88 70 00
 128+ 519B 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 519F 98 88 78 00
 129+ 51A3 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 51A7 F8 80 70 00
 130+ 51AB 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 51AF 40 40 40 00
 131+ 51B3 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 51B7 78 08 70 00
 132+ 51BB 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 51BF 88 88 88 00
 133+ 51C3 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 51C7 20 20 20 00
 134+ 51CB 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 51CF 08 88 70 00
 135+ 51D3 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 51D7 C0 A0 90 00
 136+ 51DB 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 51DF 20 20 70 00
 137+ 51E3 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 51E7 A8 88 88 00
 138+ 51EB 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 51EF 88 88 88 00
 139+ 51F3 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 51F7 88 88 70 00
 140+ 51FB 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 51FF F0 80 80 00
 141+ 5203 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 5207 78 08 08 00
 142+ 520B 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 520F 80 80 80 00
 143+ 5213 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 5217 70 08 F0 00
 144+ 521B 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 521F 40 48 30 00
 145+ 5223 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 5227 88 98 68 00
 146+ 522B 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 522F 88 50 20 00
 147+ 5233 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 5237 A8 A8 50 00
 148+ 523B 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 523F 20 50 88 00
 149+ 5243 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 5247 68 08 70 00
 150+ 524B 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 524F 20 40 F8 00
 151+ 5253 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 5257 20 20 10 00
 152+ 525B 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 525F 20 20 20 00
 153+ 5263 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 5267 10 10 20 00
 154+ 526B 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 526F 00 00 00 00
 155+ 5273 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 5277 00 00 00 00
 156+ 527B 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 527F B4 84 78 00
 157+ 5283 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 5287 B4 CC 78 00
 158+ 528B 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 528F FC 78 30 00
 159+ 5293 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 5297 F8 70 20 00
 160+ 529B 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 529F A8 20 70 00
 161+ 52A3 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 52A7 A8 20 70 00
 162+ 52AB 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 52AF FC 30 30 30
 163+ 52B3 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 52B7 3C 30 30 30
 164+ 52BB 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 52BF F0 30 30 30
 165+ 52C3 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 52C7 F0 00 00 00
 166+ 52CB 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 52CF 3C 00 00 00
 167+ 52D3 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 52D7 FC 00 00 00
 168+ 52DB 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 52DF 3C 30 30 30
 169+ 52E3 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 52E7 FC 30 30 30
 170+ 52EB 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 52EF F0 30 30 30
 171+ 52F3 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 52F7 FC 00 00 00
 172+ 52FB 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 52FF 30 30 30 30
 173+ 5303 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 5307 70 60 E0 C0
 174+ 530B C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 530F 38 18 1C 0C
 175+ 5313 CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 5317 30 78 CC CC
 176+ 531B 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 531F 20 20 20 20
 177+ 5323 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 5327 20 20 20 20
 178+ 532B 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 532F 20 20 20 20
 179+ 5333 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 5337 00 00 00 00
 180+ 533B 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 533F 00 00 00 00
 181+ 5343 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 5347 00 00 00 00
 182+ 534B 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 534F 20 20 20 20
 183+ 5353 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 5357 20 20 20 20
 184+ 535B 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 535F 20 20 20 20
 185+ 5363 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 5367 00 00 00 00
 186+ 536B 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 536F 20 20 20 20
 187+ 5373 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 5377 20 40 40 80
 188+ 537B 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 537F 10 08 08 04
 189+ 5383 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 5387 30 48 48 84
 190+ 538B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 538F 00 00 FC FC
 191+ 5393 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 5397 FC FC FC FC
 192+ 539B 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 539F FC FC FC FC
 193+ 53A3 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 53A7 00 00 00 00
 194+ 53AB FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 53AF 00 00 00 00
 195+ 53B3 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 53B7 FC FC 00 00
 196+ 53BB 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 53BF 80 80 80 80
 197+ 53C3 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 53C7 E0 E0 E0 E0
 198+ 53CB F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 53CF F8 F8 F8 F8
 199+ 53D3 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 53D7 04 04 04 04
 200+ 53DB 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 53DF 1C 1C 1C 1C
 201+ 53E3 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 53E7 7C 7C 7C 7C
 202+ 53EB FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 53EF 84 84 84 FC
 203+ 53F3 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 53F7 E0 E0 E0 E0
 204+ 53FB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 53FF 1C 1C 1C 1C
 205+ 5403 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 5407 00 00 00 00
 206+ 540B E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 540F 00 00 00 00
 207+ 5413 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 5417 1C 1C 1C 1C
 208+ 541B 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 541F E0 E0 E0 E0
 209+ 5423 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 5427 78 78 78 78
 210+ 542B CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 542F CC CC CC CC
 211+ 5433 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 5437 00 00 FC FC
 212+ 543B 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 543F FC FC 00 00
 213+ 5443 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 5447 30 30 CC CC
 214+ 544B 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 544F 54 A8 54 A8
 215+ 5453 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 5457 64 30 98 CC
 216+ 545B CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 545F CC 64 30 98
 217+ 5463 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 5467 30 98 CC 64
 218+ 546B 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 546F 64 CC 98 30
 219+ 5473 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 5477 20 00 F8 00
 220+ 547B C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 547F C0 00 F8 00
 221+ 5483 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 5487 18 00 F8 00
 222+ 548B 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 548F A0 60 20 00
 223+ 5493 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 5497 00 00 00 00
 224+ 549B 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 549F 70 00 00 00
 225+ 54A3 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 54A7 00 FC 00 00
 226+ 54AB 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 54AF 54 A8 00 00
 227+ 54B3 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 54B7 E0 C0 80 00
 228+ 54BB FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 54BF 00 00 00 00
 229+ 54C3 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 54C7 1C 0C 04 00
 230+ 54CB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 54CF 00 30 78 FC
 231+ 54D3 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 54D7 20 20 20 00
 232+ 54DB 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 54DF 40 80 00 00
 233+ 54E3 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 54E7 18 10 00 00
 234+ 54EB 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 54EF 24 1C 1C 3C
 235+ 54F3 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 54F7 20 F8 70 20
 236+ 54FB 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 54FF 90 E0 E0 F0
 237+ 5503 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 5507 60 20 00 00
 238+ 550B F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 550F 08 04 00 00
 239+ 5513 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 5517 F0 44 38 00
 240+ 551B 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 551F 28 28 28 00
 241+ 5523 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 5527 1C 20 20 20
 242+ 552B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 552F E0 10 10 10
 243+ 5533 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 5537 00 00 00 00
 244+ 553B 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 553F 00 00 00 00
 245+ 5543 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 5547 3C 30 30 30
 246+ 554B 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 554F F0 30 30 30
 247+ 5553 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 5557 E0 00 00 00
 248+ 555B 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 555F 1C 00 00 00
 249+ 5563 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 5567 48 30 00 00
 250+ 556B 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 556F 78 30 00 00
 251+ 5573 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 5577 FC 78 30 00
 252+ 557B FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 557F E0 C0 80 80
 253+ 5583 FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 5587 1C 0C 04 04
 254+ 558B 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 558F 1C 3C 7C FC
 255+ 5593 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 5597 E0 F0 F8 FC
 256+ 559B 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 559F F0 E0 C0 00
 257+ 55A3 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 55A7 78 CC 00 00
 258+ 55AB 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 55AF 70 20 70 20
 259+ 55B3 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 55B7 90 90 60 00
 260+ 55BB F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 55BF 84 84 84 FC
 261+ 55C3 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 55C7 84 84 84 FC
 262+ 55CB 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 55CF 48 48 48 78
 263+ 55D3 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 55D7 FC B4 B4 FC
 264+ 55DB 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 55DF D4 D4 00 00
 265+ 55E3 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 55E7 78 48 48 48
 266+ 55EB 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 55EF B4 84 78 00
 267+ 55F3 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 55F7 A8 80 00 00
 268+ 55FB 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 55FF A0 88 70 00
 269+ 5603 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 5607 84 84 FC 00
 270+ 560B 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 560F F0 F0 F0 00
 271+ 5613 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 5617 F0 F0 F0 00
 272+ 561B FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 561F 94 94 84 FC
 273+ 5623 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 5627 68 70 80 00
 274+ 562B 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 562F 6C 18 08 00
 275+ 5633 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 5637 20 60 E0 40
 276+ 563B 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 563F E4 68 20 00
 277+ 5643 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 5647 E0 60 20 00
 278+ 564B 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 564F F8 FC F0 90
 279+ 5653 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 5657 B4 84 78 00
 280+ 565B 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 565F 40 48 B0 00
 281+ 5663 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 5667 48 3C 84 78
 282+ 566B 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 566F F8 00 20 00
 283+ 5673 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 5677 FC FC FC FC
 284+ 567B                      ; here ends the ASCII table
 285+ 567B
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  567B                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 567B              ; ------------------------------------------------------------------------------
   2+ 567B              ; LM80C - 8x8 CHARSET - R1.8
   3+ 567B              ; ------------------------------------------------------------------------------
   4+ 567B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 567B              ; designed by Leonardo Miliani. More info at
   6+ 567B              ; www DOT leonardomiliani DOT com
   7+ 567B              ; ------------------------------------------------------------------------------
   8+ 567B              ; Code Revision:
   9+ 567B              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 567B              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 567B              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 567B              ; R1.3 - 20191015 - More graphic chars
  13+ 567B              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 567B              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 567B              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 567B              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 567B              ; R1.8 - 20200524 - New style for char #252
  18+ 567B              ; ------------------------------------------------------------------------------
  19+ 567B              ;
  20+ 567B              ;-------------------------------------------------------------------------------
  21+ 567B              ;
  22+ 567B              ;               8 x 8    C  H  A  R  S  E  T
  23+ 567B              ;
  24+ 567B              ;-------------------------------------------------------------------------------
  25+ 567B              ;
  26+ 567B              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 567B
  28+ 567B              CHRST88 equ $
  29+ 567B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 567F 00 00 00 00
  30+ 5683 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 5687 00 00 00 00
  31+ 568B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 568F 00 00 00 00
  32+ 5693 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 5697 00 00 00 00
  33+ 569B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 569F 00 00 00 00
  34+ 56A3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 56A7 00 00 00 00
  35+ 56AB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 56AF 00 00 00 00
  36+ 56B3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 56B7 00 00 00 00
  37+ 56BB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 56BF 00 00 00 00
  38+ 56C3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 56C7 00 00 00 00
  39+ 56CB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 56CF 00 00 00 00
  40+ 56D3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 56D7 00 00 00 00
  41+ 56DB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 56DF 00 00 00 00
  42+ 56E3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 56E7 00 00 00 00
  43+ 56EB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 56EF 00 00 00 00
  44+ 56F3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 56F7 00 00 00 00
  45+ 56FB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 56FF 00 00 00 00
  46+ 5703 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 5707 00 00 00 00
  47+ 570B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 570F 00 00 00 00
  48+ 5713 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 5717 00 00 00 00
  49+ 571B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 571F 00 00 00 00
  50+ 5723 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 5727 00 00 00 00
  51+ 572B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 572F 00 00 00 00
  52+ 5733 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 5737 00 00 00 00
  53+ 573B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 573F 00 00 00 00
  54+ 5743 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 5747 00 00 00 00
  55+ 574B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 574F 00 00 00 00
  56+ 5753 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 5757 00 00 00 00
  57+ 575B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 575F 00 00 00 00
  58+ 5763 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 5767 00 00 00 00
  59+ 576B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 576F 00 00 00 00
  60+ 5773 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 5777 00 00 00 00
  61+ 577B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 577F 00 00 00 00
  62+ 5783 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 5787 10 00 10 00
  63+ 578B 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 578F 00 00 00 00
  64+ 5793 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 5797 FE 28 28 00
  65+ 579B 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 579F 14 78 10 00
  66+ 57A3 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 57A7 10 26 46 00
  67+ 57AB 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 57AF 4A 44 3A 00
  68+ 57B3 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 57B7 00 00 00 00
  69+ 57BB 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 57BF 20 10 08 00
  70+ 57C3 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 57C7 08 10 20 00
  71+ 57CB 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 57CF 38 54 10 00
  72+ 57D3 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 57D7 10 10 00 00
  73+ 57DB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 57DF 00 18 08 10
  74+ 57E3 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 57E7 00 00 00 00
  75+ 57EB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 57EF 00 18 18 00
  76+ 57F3 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 57F7 10 20 40 00
  77+ 57FB 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 57FF 64 44 38 00
  78+ 5803 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 5807 10 10 7C 00
  79+ 580B 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 580F 10 20 7C 00
  80+ 5813 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 5817 04 44 38 00
  81+ 581B 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 581F 7C 08 08 00
  82+ 5823 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 5827 04 44 38 00
  83+ 582B 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 582F 44 44 38 00
  84+ 5833 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 5837 20 20 20 00
  85+ 583B 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 583F 44 44 38 00
  86+ 5843 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 5847 04 44 38 00
  87+ 584B 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 584F 18 18 00 00
  88+ 5853 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 5857 18 08 10 00
  89+ 585B 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 585F 10 08 04 00
  90+ 5863 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 5867 7E 00 00 00
  91+ 586B 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 586F 08 10 20 00
  92+ 5873 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 5877 10 00 10 00
  93+ 587B 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 587F B8 80 84 78
  94+ 5883 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 5887 7C 44 44 00
  95+ 588B 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 588F 44 44 78 00
  96+ 5893 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 5897 40 44 38 00
  97+ 589B 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 589F 44 44 78 00
  98+ 58A3 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 58A7 40 40 7C 00
  99+ 58AB 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 58AF 40 40 40 00
 100+ 58B3 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 58B7 5C 44 38 00
 101+ 58BB 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 58BF 44 44 44 00
 102+ 58C3 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 58C7 10 10 38 00
 103+ 58CB 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 58CF 04 44 38 00
 104+ 58D3 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 58D7 48 44 44 00
 105+ 58DB 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 58DF 40 40 7C 00
 106+ 58E3 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 58E7 42 42 42 00
 107+ 58EB 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 58EF 44 44 44 00
 108+ 58F3 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 58F7 44 44 38 00
 109+ 58FB 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 58FF 78 40 40 00
 110+ 5903 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 5907 54 48 34 00
 111+ 590B 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 590F 78 48 44 00
 112+ 5913 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 5917 04 04 78 00
 113+ 591B 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 591F 10 10 10 00
 114+ 5923 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 5927 44 44 38 00
 115+ 592B 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 592F 44 28 10 00
 116+ 5933 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 5937 5A 5A 24 00
 117+ 593B 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 593F 28 44 44 00
 118+ 5943 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 5947 10 10 10 00
 119+ 594B 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 594F 20 40 7C 00
 120+ 5953 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 5957 20 20 38 00
 121+ 595B 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 595F 08 04 02 00
 122+ 5963 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 5967 08 08 38 00
 123+ 596B 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 596F 00 00 00 00
 124+ 5973 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 5977 00 00 7E 00
 125+ 597B 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 597F 00 00 00 00
 126+ 5983 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 5987 3C 44 3C 00
 127+ 598B 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 598F 44 44 78 00
 128+ 5993 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 5997 40 44 38 00
 129+ 599B 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 599F 44 44 3C 00
 130+ 59A3 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 59A7 7C 40 38 00
 131+ 59AB 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 59AF 20 20 20 00
 132+ 59B3 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 59B7 44 3C 04 38
 133+ 59BB 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 59BF 44 44 44 00
 134+ 59C3 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 59C7 10 10 10 00
 135+ 59CB 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 59CF 08 08 48 30
 136+ 59D3 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 59D7 60 50 48 00
 137+ 59DB 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 59DF 10 10 38 00
 138+ 59E3 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 59E7 4A 42 42 00
 139+ 59EB 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 59EF 44 44 44 00
 140+ 59F3 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 59F7 44 44 38 00
 141+ 59FB 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 59FF 44 78 40 40
 142+ 5A03 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 5A07 44 3C 04 04
 143+ 5A0B 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 5A0F 40 40 40 00
 144+ 5A13 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 5A17 38 04 78 00
 145+ 5A1B 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 5A1F 20 24 18 00
 146+ 5A23 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 5A27 44 4C 34 00
 147+ 5A2B 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 5A2F 44 28 10 00
 148+ 5A33 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 5A37 54 54 28 00
 149+ 5A3B 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 5A3F 10 28 44 00
 150+ 5A43 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 5A47 4C 34 04 38
 151+ 5A4B 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 5A4F 10 20 7C 00
 152+ 5A53 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 5A57 20 20 18 00
 153+ 5A5B 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 5A5F 10 10 10 00
 154+ 5A63 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A67 08 08 30 00
 155+ 5A6B 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A6F 00 00 00 00
 156+ 5A73 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A77 00 00 00 00
 157+ 5A7B 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A7F A5 99 42 3C
 158+ 5A83 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A87 DB E7 7E 3C
 159+ 5A8B 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A8F 7C 38 10 00
 160+ 5A93 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A97 7C 38 10 00
 161+ 5A9B 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A9F 54 10 7C 00
 162+ 5AA3 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5AA7 D6 10 7C 00
 163+ 5AAB 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5AAF FF 18 18 18
 164+ 5AB3 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5AB7 1F 18 18 18
 165+ 5ABB 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5ABF F8 18 18 18
 166+ 5AC3 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5AC7 F8 00 00 00
 167+ 5ACB 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5ACF 1F 00 00 00
 168+ 5AD3 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5AD7 FF 00 00 00
 169+ 5ADB 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5ADF 1F 18 18 18
 170+ 5AE3 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5AE7 FF 18 18 18
 171+ 5AEB 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5AEF F8 18 18 18
 172+ 5AF3 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5AF7 FF 00 00 00
 173+ 5AFB 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5AFF 18 18 18 18
 174+ 5B03 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5B07 38 70 E0 C0
 175+ 5B0B C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5B0F 1C 0E 07 03
 176+ 5B13 C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5B17 3C 7E E7 C3
 177+ 5B1B 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5B1F 10 10 10 10
 178+ 5B23 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5B27 10 10 10 10
 179+ 5B2B 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5B2F 10 10 10 10
 180+ 5B33 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5B37 00 00 00 00
 181+ 5B3B 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5B3F 00 00 00 00
 182+ 5B43 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5B47 00 00 00 00
 183+ 5B4B 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5B4F 10 10 10 10
 184+ 5B53 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5B57 10 10 10 10
 185+ 5B5B 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5B5F 10 10 10 10
 186+ 5B63 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B67 00 00 00 00
 187+ 5B6B 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B6F 10 10 10 10
 188+ 5B73 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B77 10 20 40 80
 189+ 5B7B 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B7F 08 04 02 01
 190+ 5B83 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B87 18 24 42 81
 191+ 5B8B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B8F 00 00 FF FF
 192+ 5B93 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B97 FF FF FF FF
 193+ 5B9B 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B9F FF FF FF FF
 194+ 5BA3 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5BA7 00 00 00 00
 195+ 5BAB FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5BAF 00 00 00 00
 196+ 5BB3 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5BB7 FF FF 00 00
 197+ 5BBB C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5BBF C0 C0 C0 C0
 198+ 5BC3 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5BC7 F0 F0 F0 F0
 199+ 5BCB FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5BCF FC FC FC FC
 200+ 5BD3 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5BD7 03 03 03 03
 201+ 5BDB 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5BDF 0F 0F 0F 0F
 202+ 5BE3 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5BE7 3F 3F 3F 3F
 203+ 5BEB FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5BEF 81 81 81 FF
 204+ 5BF3 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5BF7 F0 F0 F0 F0
 205+ 5BFB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5BFF 0F 0F 0F 0F
 206+ 5C03 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5C07 00 00 00 00
 207+ 5C0B F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5C0F 00 00 00 00
 208+ 5C13 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5C17 0F 0F 0F 0F
 209+ 5C1B 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5C1F F0 F0 F0 F0
 210+ 5C23 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5C27 3C 3C 3C 3C
 211+ 5C2B C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5C2F C3 C3 C3 C3
 212+ 5C33 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5C37 00 00 FF FF
 213+ 5C3B 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5C3F FF FF 00 00
 214+ 5C43 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5C47 33 33 CC CC
 215+ 5C4B 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5C4F 55 AA 55 AA
 216+ 5C53 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5C57 66 33 99 CC
 217+ 5C5B CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5C5F CC 99 33 66
 218+ 5C63 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C67 33 99 CC 66
 219+ 5C6B 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C6F 66 CC 99 33
 220+ 5C73 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C77 10 00 7C 00
 221+ 5C7B 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C7F 60 00 7E 00
 222+ 5C83 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C87 06 00 7E 00
 223+ 5C8B 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C8F A0 60 20 00
 224+ 5C93 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C97 00 00 00 00
 225+ 5C9B 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C9F 70 00 00 00
 226+ 5CA3 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5CA7 00 7E 00 00
 227+ 5CAB 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5CAF 54 A8 00 00
 228+ 5CB3 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5CB7 E0 C0 80 00
 229+ 5CBB FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5CBF 00 00 00 00
 230+ 5CC3 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5CC7 07 03 01 00
 231+ 5CCB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5CCF 10 38 7C FE
 232+ 5CD3 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5CD7 10 10 10 00
 233+ 5CDB 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5CDF 20 40 00 00
 234+ 5CE3 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5CE7 0C 08 00 00
 235+ 5CEB 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5CEF 0E 0E 1E 00
 236+ 5CF3 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5CF7 7C 38 10 00
 237+ 5CFB 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5CFF E0 E0 F0 00
 238+ 5D03 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5D07 60 20 00 00
 239+ 5D0B F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5D0F 08 04 00 00
 240+ 5D13 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5D17 F0 44 38 00
 241+ 5D1B 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5D1F 28 28 28 00
 242+ 5D23 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5D27 08 10 10 10
 243+ 5D2B 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5D2F 20 10 10 10
 244+ 5D33 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5D37 00 00 00 00
 245+ 5D3B 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5D3F 00 00 00 00
 246+ 5D43 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5D47 0F 1C 18 18
 247+ 5D4B 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5D4F F0 38 18 18
 248+ 5D53 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5D57 E0 00 00 00
 249+ 5D5B 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5D5F 07 00 00 00
 250+ 5D63 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D67 42 42 3C 00
 251+ 5D6B 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D6F 7E 7E 3C 00
 252+ 5D73 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D77 7E 3C 18 00
 253+ 5D7B FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D7F F0 E0 C0 80
 254+ 5D83 FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D87 0F 07 03 01
 255+ 5D8B 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D8F 1F 3F 7F FF
 256+ 5D93 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D97 F8 FC FE FF
 257+ 5D9B 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D9F 78 70 60 00
 258+ 5DA3 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5DA7 3C 66 00 00
 259+ 5DAB 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5DAF 38 10 38 10
 260+ 5DB3 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5DB7 44 44 38 00
 261+ 5DBB 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5DBF 42 42 42 7E
 262+ 5DC3 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5DC7 81 81 81 FF
 263+ 5DCB 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5DCF 54 54 54 7C
 264+ 5DD3 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5DD7 BD AD AD FF
 265+ 5DDB 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5DDF AC AA EA 00
 266+ 5DE3 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5DE7 7E 66 66 66
 267+ 5DEB 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5DEF 9D 81 42 3C
 268+ 5DF3 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5DF7 A5 A2 00 00
 269+ 5DFB 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5DFF 48 42 42 3C
 270+ 5E03 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5E07 99 81 FF 00
 271+ 5E0B 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5E0F 7C 7C 7C 00
 272+ 5E13 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5E17 F8 F8 F8 00
 273+ 5E1B FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5E1F A5 A5 81 FF
 274+ 5E23 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5E27 52 24 58 80
 275+ 5E2B 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5E2F 81 76 0C 04
 276+ 5E33 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5E37 08 18 38 10
 277+ 5E3B 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5E3F F5 F5 31 12
 278+ 5E43 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5E47 F0 F0 30 10
 279+ 5E4B 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5E4F 7C 7E 78 48
 280+ 5E53 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5E57 A1 99 42 3C
 281+ 5E5B 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5E5F 20 22 5C 00
 282+ 5E63 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E67 24 1E 42 3C
 283+ 5E6B 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E6F 7C 00 10 00
 284+ 5E73 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E77 FF FF FF FF
 285+ 5E7B
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E7B                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E7B              ; ------------------------------------------------------------------------------
   2+ 5E7B              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E7B              ; ------------------------------------------------------------------------------
   4+ 5E7B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E7B              ; designed by Leonardo Miliani. More info at
   6+ 5E7B              ; www DOT leonardomiliani DOT com
   7+ 5E7B              ; ------------------------------------------------------------------------------
   8+ 5E7B              ; Code Revision:
   9+ 5E7B              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E7B              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E7B              ; ------------------------------------------------------------------------------
  12+ 5E7B
  13+ 5E7B              LOGOFONT:   equ $
  14+ 5E7B 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E7F 00 00 00 00
  15+ 5E83 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E87 FF FF FF FF
  16+ 5E8B FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E8F 00 00 00 00
  17+ 5E93 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E97 0F 0F 0F 0F
  18+ 5E9B 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E9F FF FF FF FF
  19+ 5EA3 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5EA7 F0 F0 F0 F0
  20+ 5EAB 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5EAF 0F 0F 0F 0F
  21+ 5EB3 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5EB7 F0 F0 F0 F0
  22+ 5EBB F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5EBF 00 00 00 00
  23+ 5EC3 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5EC7 00 00 00 00
  24+ 5ECB 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5ECF FF 07 03 00
  25+ 5ED3 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5ED7 FF E0 C0 00
  26+ 5EDB 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5EDF 19 1F 18 18
  27+ 5EE3 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5EE7 98 F8 18 18
  28+ 5EEB 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5EEF 0F 00 00 00
  29+ 5EF3 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5EF7 1F 1C 18 18
  30+ 5EFB 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5EFF F8 38 18 18
  31+ 5F03 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5F07 F0 00 00 00
  32+ 5F0B 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5F0F FF 00 00 00
  33+ 5F13 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5F17 FF FF FF FF
  34+ 5F1B F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5F1F FF FF FF FF
  35+ 5F23 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5F27 F0 F0 F0 F0
  36+ 5F2B FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5F2F 0F 0F 0F 0F
  37+ 5F33 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5F37 30 00 00 00
  38+ 5F3B
# file closed: ../include/vdp/logo-fonts.asm
  95  5F3B
  96  5F3B              ; include workspace equates
  97  5F3B                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5F3B              ; ------------------------------------------------------------------------------
   2+ 5F3B              ; LM80C 64K - WORKSPACE EQUATES - R1.1
   3+ 5F3B              ; ------------------------------------------------------------------------------
   4+ 5F3B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F3B              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F3B              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F3B              ; kind of warranty: you can use them at your own risk.
   8+ 5F3B              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F3B              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F3B              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F3B              ; redistribuite them.
  12+ 5F3B              ; https://www.leonardomiliani.com
  13+ 5F3B              ;
  14+ 5F3B              ; Please support me by visiting the following links:
  15+ 5F3B              ; Main project page: https://www.leonardomiliani.com
  16+ 5F3B              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F3B              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F3B              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F3B              ; ------------------------------------------------------------------------------
  20+ 5F3B
  21+ 5F3B              ; set starting of RAM based on computer model
  22+ 5F3B                  IFDEF LM80C64K
  23+ 5F3B ~            SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5F3B                  ELSE
  25+ 5F3B              SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5F3B                  ENDIF
  27+ 5F3B
  28+ 5F3B              ;-------------------------------------------------------------------------------
  29+ 5F3B              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5F3B              serRdPtr        equ     serInPtr+2
  31+ 5F3B              serBufUsed      equ     serRdPtr+2
  32+ 5F3B              basicStarted    equ     serBufUsed+1
  33+ 5F3B              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5F3B              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5F3B
  36+ 5F3B              ; BASIC WORK SPACE LOCATIONS
  37+ 5F3B              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5F3B              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5F3B              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5F3B              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5F3B              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5F3B              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5F3B              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5F3B              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5F3B              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5F3B              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5F3B              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5F3B              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5F3B              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5F3B              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5F3B              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5F3B              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5F3B              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5F3B              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5F3B              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5F3B              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5F3B              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5F3B              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5F3B              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5F3B              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5F3B              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5F3B              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5F3B              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5F3B              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5F3B              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5F3B              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5F3B              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5F3B              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5F3B              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5F3B              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5F3B              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5F3B              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5F3B              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5F3B              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5F3B              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5F3B              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5F3B              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5F3B              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5F3B              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5F3B              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5F3B              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5F3B              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5F3B              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5F3B              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5F3B              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5F3B              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5F3B              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5F3B              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5F3B              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5F3B              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5F3B              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5F3B              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5F3B              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5F3B              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5F3B              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5F3B              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5F3B              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5F3B              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5F3B              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5F3B              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5F3B              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5F3B              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5F3B              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5F3B              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5F3B              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5F3B              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5F3B              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5F3B              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5F3B              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5F3B              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5F3B              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5F3B              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5F3B              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5F3B              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5F3B              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5F3B              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5F3B              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5F3B              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5F3B              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5F3B              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5F3B              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5F3B              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5F3B              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5F3B              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5F3B                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5F3B              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5F3B              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5F3B              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5F3B              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5F3B              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5F3B              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5F3B              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5F3B              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5F3B              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5F3B              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5F3B              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5F3B              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5F3B                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5F3B              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5F3B              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5F3B              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5F3B              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5F3B              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5F3B                                                      ; from here there are the RAM locations that
 145+ 5F3B                                                      ; are saved during SAVE
 146+ 5F3B              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5F3B              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5F3B              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5F3B              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5F3B              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5F3B              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5F3B              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5F3B              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5F3B              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5F3B              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5F3B              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5F3B              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5F3B              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5F3B
# file closed: ../include/workspace/workspace-r1.1.asm
  98  5F3B
  99  5F3B              ; END OF ASSEMBLY SOURCE
 100  5F3B              ;-------------------------------------------------------------------------------
 101  5F3B
# file closed: LM80C-firmware-r3.22.asm

Value    Label
------ - -----------------------------------------------------------
0x823D   CHCSNDDTN
0x823B   CHBSNDDTN
0x80A8   NMIFLG
0x4E6C   CLCN323
0x4E43   CLCN325
0x4E21   CLCN322
0x4E1E   CLCN321
0x4E0A   CLCN32Z
0x4DE2   CLCN32T
0x4DDD   DIV_32_16SB
0x4DDA   DIV_32_16OF
0x4DC9   DIV_32_16LP
0x4DB4   DV16_16_LP
0x4DA3   DIV_16_8LP
0x4D94   DIV_8_8LOOP
0x4D82   MU32_2
0x4D77   MUL_32L
0x4D68   EXMUL16
0x4D5F   MLP1
0x4D58   MLP
0x4D38 X TSTBIT
0x4CF1   BINIT
0x4D04   CHKBIN
0x4CD3   BITOUT2
0x4CCF   BITOUT
0x4CC1   ZEROSUP
0x4CBB X BIN2
0x4CA3   NOSUB7
0x4CA7   HEXIT
0x4C83   HEXLP
0x4C88   HEXLP1
0x4CB0   HXERR
0x4C90   GETHEX
0x4C73   ADD301
0x4C63   ADD30
0x4C4D   HEX4
0x4C4B   HEX3
0x4C3C   HEX1
0x4C3E   HEX2
0x4BEB   CNFRQN
0x4BBC   RNDKTX
0x4B28   MSWROK
0x4B74   FRMTOK
0x4B08   MSPTOK
0x4AF2   INITFN
0x4ADE X INITDSK
0x4B42   FRMTXT
0x4AD1   CFINIT
0x4B10   MSTTXT
0x4B8B   DSKUND
0x4B98   DSKRNM
0x4ABE   DSKFRM
0x819D   TPHL
0x4A79   ABRTXT
0x4A5D   ERASED
0x4A6B   ABRTDS
0x4BCA   CNFREQ
0x4A4F   ERSTX
0x4BED   CHKFLNM
0x49D1   SVERR
0x49CA   SVEND
0x49D6   TXTSVG
0x49A3   SAVE1
0x49B8   SAVEST
0x4A02   DOS_ERR
0x4900   LDERR
0x492B   GET3AR
0x48F9   LDEND
0x4905   TXTLDG
0x4A09   CHK1AR
0x4BF7   CHKFN1
0x48E4   LOADST
0x4916   LDSVPT
0x48B9   CHKDOS
0x4881   PRTEND
0x4875   PRTK1
0x4872   OPNQT1
0x485A   CLSQT1
0x48B6   CHKEY5
0x4842   PTCHR1
0x48B3   CHKEY4
0x484A   CLSQT
0x480D   PRTK3
0x4825   PRTCHR
0x485C   OPNQT
0x4810   CNTLTK
0x47FB   LDKEY
0x48AA   CHKEY2
0x4874   PRTCKEY
0x48A5   CHKEY1
0x47E4 X PRTK2
0x47E2   PRTK4
0x47CE   CPKYEND
0x47C6   CPKEY1
0x47BE   CPKEY3
0x47B7   CPKEY2
0x47A7   CPKEY
0x4799   DECLN1
0x4883   SETREP
0x4769   KEYCH
0x47D0   LSTKEYS
0x4747   HLPERR
0x4725   DIRMOD
0x46EC   EXNRM
0x46DE   ENCHB
0x46B3   SRLCNT
0x469B   STRPAR
0x467E   SETPAR2
0x466F   BITS8
0x4664   BITS7
0x4673   SETPAR
0x465A   BITS6
0x4637   SET_CTC
0x4709   CTC_CFG
0x4714   SCERR1
0x4626   SET_PT
0x460D   CKBPS
0x46F3   SUP_BPS
0x4601   SETSER
0x45F4   DEFSER
0x45A9   CNTSER3
0x458C   CNTRX2
0x4597   CNTSER2
0x4559   SERLED
0x4553   SRPT2
0x4530   RPTRSSR
0x4523   RSTSERS
0x455D   CNTSER
0x451F   CHKZSER
0x4510   SERVAR
0x4718   SCERR
0x8213   SIOBFR
0x8212   STPBT
0x8211   PARBT
0x8210   DATABT
0x820E   BPS
0x820D   PRTNUM
0x44CA   RPTCVBF
0x44BB   RPCLTMB
0x44AE   CNTVALY
0x447E   CNTCL7
0x445A   CNTCL6
0x4436   CNTCL5
0x4414   CNTCL4
0x43EE   CNTCL3
0x43CA   CNTCL2
0x44A8   VALIDY
0x43A6   CNTCL1
0x44A3   VALIDX
0x4377   PLTCRL
0x4368   DLSZ
0x4380   ENDCRL
0x433B   RPTCL1
0x4328   RPTCRL
0x4384   DRWCRL
0x8217   DC
0x8215   YI
0x8213   XI
0x820F   YC
0x820D   XC
0x42B7   DXGR
0x42E0   ENDDRAW
0x4287   CNTDRW
0x426B   RPTDRW
0x4268   STRE2
0x425B   ER2
0x4D89   negHL
0x4238   Y1GR
0x420E   X1GR
0x4D86   absHL
0x44C2   CLRVDBF
0x44B3   CLRTMBF
0x8219   DX
0x8217   SY
0x8215   SX
0x8213   E2
0x8211   ER
0x820F   Y2
0x820D   X2
0x8207   Y1
0x8205   X1
0x4D90   DIV_8_8
0x4178   PXLSET
0x4154   CNTPLT1
0x4174   NOGD
0x4180   XY2HL
0x40EF   PNTEND
0x40F9   CTPOINT
0x40A6   PAINT5
0x4075   PAINT3
0x40B6   CHECKPY
0x4062   PAINT2
0x4133   CNTPLOT
0x4032   MNPAINT
0x402F   PAINT1
0x402E   PAINT11
0x40B5   CHECKPA
0x4020   PAINT0
0x40AD   EXITPAI
0x4013   NXTLOOP
0x40B1   EXITPA2
0x410D   PNTRTN
0x44D1   CLRPRM
0x8211   ORGSP
0x8210 X SPB
0x820F X SPA
0x820D   PNT
0x3FA5   GPCPCH1
0x3F9A X GPCPCHR
0x3F80   GPNTCO1
0x3F76 X GPNTCOL
0x3F6B   RPGPNT
0x3F56   GPNT
0x3F41   CNTGPT2
0x3FC2   CKCOL
0x8213   TMPHL
0x8211   NUMCHR
0x820F   CHRPNT
0x820D   TMPADR
0x8205   MIXCOL
0x8207   TMPCLR
0x820B   GY
0x8209   GX
0x44EA   GMERR
0x3EDB   CHKG2M
0x3ED5   CHKCLR0
0x3EA0   RPTLDCL
0x3E96   LOADCLR
0x3EAB   SETBRCL
0x3EC4   MIXCLRS
0x3E8F   CLREX2
0x3E86   CLRG2
0x3E7D   CLRG1
0x3E73   CLRTXT
0x3E76   CLRMC
0x3ED1   CHKCLR1
0x3DCB   CKMAGN
0x3E18   CHKSCAR
0x3DC0 X SETVDP
0x3DD9   SCVDP
0x3D9C   RPTPS
0x3D97 X DIR_PAU
0x3D71 X RECWRD
0x3D4D X ARET
0x3D28   ATNTAB
0x3D1E   ATN1
0x3CD7   SINTAB
0x3CBB   SIN1
0x3CD3   QUARTR
0x3CCF   HALFPI
0x3C68   RND2
0x3C4C   RND1
0x3C79   RNDTAB
0x809B   LSTRND
0x3C71   RESEED
0x8078   SEED
0x3BF8   SUMLP
0x3BEF   SMSER1
0x3BBF   EXPTAB
0x3B67   POWER2
0x3B4A   POWER1
0x3B2C   NEGAFT
0x3AF7   EXPTEN
0x3B04   NOENED
0x3AD9   SUPTLZ
0x3AE5   DOEBIT
0x3AB4   TRYAGN
0x3AA5   DIGTXT
0x3B1A   POWERS
0x3A94   MAKNUM
0x3A6F   GTSIXD
0x3A78   INRNG
0x3A5A   SIXDIG
0x3B07   RNGTST
0x3B01   JSTZER
0x3A4B   SPCFST
0x825E   PBUFF
0x39F5   MULTEN
0x39EA   ENDCON
0x39F4   SCALPL
0x39DE   SCALMI
0x3A1E   EDIGIT
0x39C9   EXPLP
0x39DB   CONEXP
0x39D7   DPOINT
0x39FC   ADDIG
0x39B3   MANLP
0x39AB   CNVNUM
0x398C   MLDBLP
0x3964   DCBCDE
0x392D   CMPFP
0x38F5   DETHLB
0x38EE   INCHL
0x38A1   RETREL
0x3881   MLSP10
0x3874   OVTST1
0x3879   OVTST2
0x387A   OVTST3
0x3826   RESDIV
0x806A   DIVSUP
0x3813   DIVLP
0x8076   DIV4
0x806B   DIV1
0x806F   DIV2
0x8073   DIV3
0x37E0   DIV10
0x3778   NOMADD
0x3767   MUL8LP
0x378A   BYTSFT
0x375E   MULT8
0x826B   MULVAL
0x3856   ADDEXP
0x373C   FPMULT
0x3733   MULLN2
0x3A13   RSCALE
0x3BE0   SUMSER
0x37EE   DVBCDE
0x36EE   LOGTAB
0x36EA   UNITY
0x36D8   SHRLP
0x36D5   SHRITE
0x36C8   SCALLP
0x825D   SGNRES
0x3699   FPROND
0x3688   RONDB
0x366C   NORMAL
0x3668   SAVEXP
0x3674   PNORM
0x364F   CONPOS
0x36DC   SHRT1
0x3687   RONDUP
0x36A6   PLUCDE
0x3641   MINCDE
0x36C6   SCALE
0x38FE   SIGNS
0x361B   NOSWAP
0x35FE   SUBCDE
0x35F8   SUBPHL
0x3601   FPADD
0x3B16   HALF
0x35EF   ROUND
0x35EC X ENDINK2
0x35D1   CHKINK
0x35CD   SRTINK
0x35E3   ENDINK
0x35B9   INKEY2
0x35AA   CMP_A
0x3558   NOS3
0x353F   NOS2
0x352C   NOS1
0x34FC   SNDOVR
0x354F   WRTSND
0x34C7   SND1
0x3459   RPVOLCG
0x3465   VOLCH
0x33BE   PKEPRMS
0x33A8   SYSRET
0x339A   NOSYSPR
0x335C   NMIINT
0x3368   NMIVR1
0x3352   NMIEINT
0x334E   NMI2
0x3359   NMIDINT
0x332C   DISNMI
0x333D   NM1
0x8068   OTPORT
0x32F5   WAITLP
0x32F4   NOXOR
0x8067   OUTSUB
0x32FE   SETIO
0x809F   INPSUB
0x80A0   INPORT
0x32BD   VAL2
0x32C0   VAL3
0x3667   RESZER
0x327E   RSTSTR
0x32C9   MIDNUM
0x324A   LVINSTR
0x3254   CNTZIN
0x31F4   RP2INST
0x321D   CNT1INS
0x31CD   RPTINST
0x323F   RZINSTR
0x821B   DY
0x31BC   EMPTINS
0x8215   TF
0x8213   TP
0x8211   PT2
0x820D   PT
0x820B   ADRS2
0x8209   LNS2
0x8207   ADRS1
0x8205   LNS1
0x3143   ALLFOL
0x313B   MID1
0x4D12   BINERR
0x3139   RIGHT1
0x32C4   LFRGNM
0x3314   MAKINT
0x3118 X GTFLNM
0x3109   GETLEN
0x30F2   POPHL
0x30D3   GETSTR
0x30CA   TSALP
0x30C0   SSTSA
0x30D9   GSTRHL
0x302D   GRBARY
0x3064   SCNEND
0x300D   GNXARY
0x303E   STRADD
0x300E   ARRLP
0x2FF8   SMPVAR
0x303B   STPOOL
0x2FE7   GRBLP
0x2FD9   GARBLP
0x2FCA   TESTOS
0x2FAE   GRBDON
0x2F9D   PRSLP
0x2F92   PRNUMS
0x2F73   TSTOPL
0x2F67   CRTSTE
0x2F58   QTSTLP
0x2F42   MKTMST
0x30C9   TOSTRA
0x2F45   CRTMST
0x2FAC   TESTR
0x3131   TOPOOL
0x2F23   STR1
0x2F4B   SVSTAD
0x2F0C   CHEKFN
0x2E84   PASSA
0x38AF   RETINT
0x2FD6   GARBGE
0x2E6F   FRENUM
0x2E4E   ENDTMR
0x2E1A   FNDELP
0x2E39   ENDDIM
0x2DF8   ZERARY
0x3984   MLDEBC
0x2DDA   DEFSIZ
0x2DD2   CRARLP
0x2DB2   BSERR
0x2E15   FINDEL
0x2D99   NXTARY
0x2DB7   CREARY
0x2D85   FNDARY
0x2D5D   SCPTLP
0x2D3B   ZEROLP
0x2D4C   RETNUL
0x2D49   RETADR
0x2D0A   FNTHR
0x2D15   CFEVAL
0x2CFC   FNDVAR
0x3788   POPHRT
0x8255   FNARG
0x2D57   SBSCPT
0x2CE2   NSCFOR
0x2D7F   ARLDSV
0x2CD2   NOTSTR
0x2CB7   ENDNAM
0x2CC3   CHARTY
0x2CB6   SVNAM2
0x2C9F   GTFNAM
0x8193   LCRFLG
0x2C8C   DIMRET
0x38AA   FLGREL
0x38A3   FLGDIF
0x2C53   CMPSTR
0x30DA   GSTRDE
0x30D6   GSTRCU
0x2C6B   CMPRES
0x2C29   CMPLG1
0x2C27   CMPLOG
0x2C10   PXOR1
0x2C03 X PAND1
0x2C08   POR1
0x2E74   ACPASS
0x38D9   FPBCDE
0x2BE8   CNTLGC
0x2BCE   SGNEXP
0x2BC5   GOFUNC
0x2BBD   FNVAL
0x2B7E   FRMEVL
0x2B76   RETNUM
0x38C1   INVSGN
0x2B62   EVLPAR
0x2B8C   FNOFST
0x2EB6   DOFN
0x2C75   EVNOT
0x2B6A   MINUS
0x4CE7   BINTFP
0x4C77   HEXTFP
0x2B3F   NOTAMP
0x2B7B   CONVAR
0x38C9   STAKFP
0x2AFD   STKTHS
0x3089   CONCAT
0x2C15   TSTRED
0x81D4   CUROPR
0x2AD5   FOPRND
0x2AB9   RLTLP
0x2AAC   EVAL3
0x81DF   NXTOPR
0x2AA9   EVAL2
0x2B14   OPRND
0x2AA0   EVAL1
0x2A99   OPNPAR
0x2A8F   TSTSTR
0x2A7B   KILFOR
0x38E7   LOADFP
0x35F2   ADDPHL
0x38D6   PHLTFP
0x2A43   NEXT1
0x2A35   FANDT
0x2A0C   EXTIG
0x29F1   MORDT
0x399F   ASCTFP
0x29E5   LTSTND
0x2F55   DTSTR
0x29CB   ITMSEP
0x29CE   STRENT
0x29DA   INPBIN
0x2A1C   FDTLP
0x29B0   ANTVLU
0x2984   NEDMOR
0x2988   GTVLUS
0x297C   NXTITM
0x2957   NOPMPT
0x2EFE   IDTEST
0x81DC   READFG
0x292C   BADINP
0x291A   REDO
0x290B   SPCLP
0x2904   DOSPC
0x330E   FNDNUM
0x28E4   ZONELP
0x28D1   CNTEND
0x2F96   PRS1
0x2F51   CRTST
0x3A3D   NUMASC
0x28AE   PRNTST
0x2913   NEXITM
0x28D6   DOCOM
0x28EF   DOTAB
0x2867   PRNTLP
0x2860   MRPRNT
0x2849   IF0
0x2852   IF1
0x2840   IFGO
0x2824   ONGOLP
0x2823   ONGO
0x3311   GETINT
0x38F0   FPTHL
0x38F3   DETHL4
0x2F2D   SAVSTR
0x30F4   BAKTMP
0x81CE   TMPSTR
0x2804   MVSTPT
0x27FC   CRESTR
0x8259   FPREG
0x27D5   LETSTR
0x280D   LETNUM
0x2A90   CHKTYP
0x2A9D   EVAL
0x8194   TYPE
0x2C9A   GETVAR
0x27AC   NXTSTT
0x27A9   NXTSTL
0x27A2   NXTDTA
0x279D   RETLIN
0x275F   RUNLIN
0x2718   STORED
0x26CE   GTLNLP
0x26CB   GETLN
0x3913   CMPNUM
0x3940   FPINT
0x825C   FPEXP
0x26AA   DEPINT
0x26A7 X POSINT
0x3502   NOISUP
0x26A4   FPSINT
0x269C   CHKLTR
0x80A6   CHKSUM
0x268F X ACCSUM
0x2670   ERRINT
0x81E1   ERRLIN
0x265F   NOLIN
0x2649   INPBRK
0x80A9   BRKFLG
0x2633   STALL
0x263D   BRK
0x8251   NXTDAT
0x2620   UPDATA
0x261F   RESTNL
0x25E2   ONJMP
0x25E1   IFJMP
0x264C   ENDPRG
0x25BA   RUNCNT
0x25B6   PUTFID
0x3898   TSTSGN
0x25AD   SAVSTP
0x38E4   BCDEFP
0x2A8B   GETNUM
0x2A8E   TSTNUM
0x2571   FORFND
0x2555   FORSLP
0x81D6   LOOPST
0x253A   CNTWTSP
0x252E   WTSPC
0x2526   LVSRLN
0x251B   SRCLN1
0x24F8   OUTWRD
0x2506   NXTLN
0x24DF   LSTLP3
0x24DC   LSTLP2
0x24D0   LST07
0x24CD   LST08
0x4094   PAINT4
0x24A2   LST02
0x249F   LST05
0x2462   LST06
0x248B   LST03
0x2466   LSTNOT
0x2447   LST01H
0x24AB   LISTLP
0x251A   SRCLN
0x2514   SRCHLIN
0x2444   LST01
0x2473   LSTALL
0x3D4E   GETINP
0x4D17   MONOUT
0x23EF   SND2VID
0x23DC   INCLEN
0x8192   CURPOS
0x80A2   LWIDTH
0x23E0   DINPOS
0x2FC8   POPAF
0x23B1   CHKSYN
0x23A2   OUTIT
0x23A5   OUTNBS
0x4D3F   OUTNCR
0x238E   PUTBUF
0x28BD   ENDINP
0x2388   GMNCR
0x2393   PUTCTL
0x2353   PROCES
0x23FD   CLOTST
0x232B   KILIN
0x2320   DELCHR
0x233A   MORINP
0x2328   OTKLN
0x2314   ECHDEL
0x80A4   NULFLG
0x2300   DODEL
0x22E7   NXTCHR
0x22E1   TSTREM
0x22DE   SETLIT
0x22C0   NOCHNG
0x22B7   NOSPC
0x22C8   MATCH
0x22A6   NXTBYT
0x2296   GETNXT
0x2294   SEARCH
0x22CC   RETNAD
0x227B   FNDWRD
0x22F7   ENDBUF
0x22F0   CPYLIT
0x22D0   MOVDIR
0x2251   CRNCLP
0x8195   DATFLG
0x80AA   RINPUT
0x222C   DOAGN
0x8253   FNRGNM
0x81DA   FORFLG
0x81E3   CONTAD
0x81C0   TMSTPT
0x81C2   TMSTPL
0x824D   VAREND
0x81D2   STRBOT
0x81DD   BRKLIN
0x21FD   INTVAR
0x21D0   SRCHLP
0x8135   BASTXT
0x21C1   FNDEND
0x21B5   PTRLP
0x21F9   RUNFST
0x21A8   MOVBUF
0x21B0   SETPTR
0x217A   SFTPRG
0x2189   INEWLN
0x2779   ULERR
0x2172   LINFND
0x21CD   SRCHLN
0x81DB   LSTBIN
0x25DA   EXCUTE
0x2248   CRUNCH
0x2331   GETLIN
0x211E   GETCMD
0x2110   POPNOK
0x3A2A   LINEIN
0x80B1   HLPLN
0x210C   PTLN
0x20EF   ERRIN
0x28B5   STTLIN
0x80A5   CTLOFG
0x20C9   NRERR
0x20C6   IMERR
0x20C3   TMERR
0x20C0   OVERR
0x20BD   UFERR
0x20BA   DDERR
0x20B7   NFERR
0x20B4   DZERR
0x81D8   DATLIN
0x20AB   DATSNR
0x20A9   LDG1ND
0x2098   LDG1
0x208B   EXITGM
0x20CB   ERROR
0x2086   OMERR
0x824F   ARREND
0x206E   CHKSTK
0x2063   MOVLP
0x2060   MOVSTR
0x2077   ENFMEM
0x205D   MOVUP
0x2054   INDFND
0x203E   LOKFOR
0x203A   BAKSTK
0x2034   BRKMSG
0x202F   OKMSG
0x202E   ZERBYT
0x202A   INMSG
0x2023   ERRMSG
0x1FA1 X DEFFNKS
0x1F9F   AUTORP
0x2331   TTYLIN
0x26C5   FCERR
0x2BE1   POR
0x2BE6   PXOR
0x2BDE   PAND
0x3652   BNORM
0x3B3A   POWER
0x378F   DINT
0x3797   MOD
0x37EC   DIV
0x373A   MULT
0x35FC   PSUB
0x3A19   PADD
0x1F2C   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x21ED   NEW
0x495D   SAVE
0x48C3   LOAD
0x26EF   CLEAR
0x2418   LIST
0x2676   CONT
0x2864   PRINT
0x4D1A   RESET
0x337C   SYS
0x3D64   WIDTH
0x3EE4   GPRINT
0x3322   NMI
0x474C   KEY
0x3D50   CLS
0x472E   HELP
0x44EF   SERIAL
0x3FD5   PAINT
0x42E4   CIRCLE
0x41AB   DRAW
0x4118   PLOT
0x3E28   COLOR
0x3D8E   PAUSE
0x3437   VOLUME
0x3470   SOUND
0x33E4   LOCATE
0x3564   VREG
0x3416   SREG
0x33D9   VPOKE
0x3D77   DOKE
0x33D4   POKE
0x2E89   DEF
0x32E0   WAIT
0x4A82   DISK
0x4A22   ERASE
0x49E7   FILES
0x2814   ON
0x32DA   POUT
0x2642   STOP
0x27A5   REM
0x277E   RETURN
0x274F   GOSUB
0x260A   RESTOR
0x2832   IF
0x273B   RUN
0x2760   GOTO
0x27BA   LET
0x2977   READ
0x2C95   DIM
0x293D   INPUT
0x27A3   DATA
0x2A40   NEXT
0x2541   FOR
0x2644   PEND
0x1EBE   WORDTB
0x1D2D   WORDS
0x3265   MID
0x325B   RIGHT
0x3135   LEFT
0x4CB5   BIN
0x4C24   HEX
0x3125   CHR
0x3114   ASC
0x3295   VAL
0x2F1D   STR
0x4593   RXEND
0x3105   LEN
0x3165   INSTR
0x40C5   POINT
0x359F   INKEY
0x358B   SSTAT
0x3580   VSTAT
0x33B1   VPEEK
0x3D6C   DEEK
0x33AA   PEEK
0x3D01   ATN
0x3CEC   TAN
0x3DAD   SCREEN
0x3C8B   SIN
0x3C85   COS
0x3B7F   EXP
0x36FB   LOG
0x3C10   RND
0x3B31   SQR
0x2E81   POS
0x32CE   INP
0x2E53   FRE
0x820F   PT1
0x8064   USR
0x38BD   ABS_
0x396B   INT
0x2E3D   TMR
0x38A7   SGN
0x1CE9   FNCTAB
0x2111   PRNTOK
0x4759   RESFN
0x1C5D   BRKRET
0x813D   STACK
0x1C72   BFREE
0x3A32   PRNTHL
0x1C69   BLNSPC
0x1CC1   DOSMSG
0x1C4A   SETTP1
0x21EE   CLRPTR
0x80AD   STRSPC
0x8196   LSTRAM
0x1C1A   NODOS
0x23AB   CPDEHL
0x20B1   SNERR
0x26CA   ATOH
0x1BF5   SETTOP
0x1BD1   MLOOP
0x82D2   STLOOK
0x1BE3   TSTMEM
0x25FA   GETCHR
0x2230   PROMPT
0x1CDE   MEMMSG
0x1BBB   MSIZE
0x1BCE   MNOASK
0x347E   CTSNDC
0x826E   PROGST
0x28C7   PRNTCRLF
0x2213   CLREG
0x24EE   FNDTOK
0x2023   INITBE
0x1F4A   INITAB
0x1BA0   SYSINIT
0x805E   WRKSPC
0x2E75   ABPASS
0x28AA   PRNTNB
0x26B0   DEINT
0x1B99   CSTART
0x1C5A   WARMST
0x1B92   STARTB
0x1943 X ERRORS
0x1B7D   D8MSG
0x1941 X D8PTR
0x1B71   D7MSG
0x193F X D7PRT
0x1B5D   D6MSG
0x193D X D6PTR
0x1B53   D5MSG
0x193B X D5PTR
0x1B4E   D4MSG
0x1939 X D4PTR
0x1B49   D3MSG
0x399A   NOMLAD
0x1937 X D3PRT
0x1B3B   D2MSG
0x1935 X D2PRT
0x1B2F   D1MSG
0x1933 X D1PRT
0x1B1F   D0MSG
0x1931 X D0PTR
0x1B0E   NRMSG
0x192F X NRPRT
0x1AF8   IMMSG
0x192D X IMPRT
0x1AEE   HPMSG
0x192B X HPPTR
0x1AD8   SOMSG
0x1ABF   SAMSG
0x1927 X SAPTR
0x1AAA   SCMSG
0x1925 X SCPTR
0x1923 X GMPRT
0x1A8E   BNMSG
0x1921 X BNPTR
0x1A83   HXMSG
0x191F X HXPTR
0x1A73   MOMSG
0x191D X MOPTR
0x191B X UFPTR
0x1A4E   CNMSG
0x1919 X CNPTR
0x1A33   STMSG
0x1917 X STPTR
0x1929 X SOPTR
0x1A23   LSMSG
0x1915 X LSPTR
0x1A0F   OSMSG
0x4D75   MU32_1
0x1913 X OSPTR
0x1A00   TMMSG
0x1911 X TMPTR
0x19EC   IDMSG
0x190F X IDPTR
0x19DB   DZMSG
0x190D X DZPTR
0x19C6   DDMSG
0x190B X DDPTR
0x19B8   BSMSG
0x1909 X BSPTR
0x19A9   ULMSG
0x48AD   CHKEY3
0x1907 X ULPTR
0x199B   OMMSG
0x1905 X OMPTR
0x1992   OVMSG
0x1903 X OVPTR
0x197C   FCMSG
0x1901 X FCPTR
0x1970   ODMSG
0x18FF X ODPTR
0x195B   RGMSG
0x18FD X RGPTR
0x1954   SNMSG
0x18FB X SNPTR
0x1943   NFMSG
0x18F9 X NFPTR
0x18F9   ERRTBL
0x003E   D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x2909   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x18E2   RSTIOBF
0x18E1   CLRBUFF
0x18D7 X CHK_NAM_LV
0x18D6   CHK_C_CF
0x1A5D   UFMSG
0x4C5A   BYT2ASC
0x189D   PRN_WHEX1
0x189B X PRN_WHEX
0x18B2   BYTEHEX
0x1892   PRN_HEX1
0x1891 X PRN_HEX
0x1888   PRNTSIZ
0x4E0E   CLCN32
0x1864   CHKNMVAL3
0x18C2   CHK_NAM
0x1854   CHKNMVAL2
0x8207   DKNMPT
0x8138   BUFFER
0x184E   CHKNMVAL1
0x8209   DKLNPT
0x183F   CHKDSKVAL2
0x183E   CHKDSKVALE
0x1829   CHKDSKVAL1
0x1808   CHATOZE
0x17FD   CH0TO9E
0x17F5   CH0TO9
0x17CE   RND_ID1
0x17C2 X LDMSCT1
0x179B   FNDFREDIR5
0x17A7   FNDFREDIR3
0x177C   FNDFREDIR2
0x1772   FNDFREDIR1
0x1788   FNDFREDIR4
0x1757   DSKUNDTXT
0x173D   DSKUNDPR
0x1800   CHATOZ
0x17E2   RND8
0x1752   DSKUNDFL2
0x1721   DSKUNDFL1
0x32B3   VAL1
0x1715   DSKUNDFL
0x170E   CHKSTNM7
0x1708 X CHKSTNM5
0x1711   FLNTEXS
0x1713   FLEXST
0x16E8   CHKSTNM6
0x16DE   CHKSTNM3
0x16F3   CHKSTNM10
0x16BF   CHKSTNM8
0x16B9 X CHKSTNM2
0x16B3   CHKSTNM1
0x169C   FIL_ERA2
0x1691   FIL_ERA1
0x169F   FIL_ERA3
0x1669   FIL_ERA6
0x1670   FIL_ERA5
0x161F   FIL_ERASE
0x1613   LDFL5
0x161A   LDFLEX
0x15DC   LDFL3
0x15BC   LDFL2
0x15B8   LDFL1
0x159C   LDFL4
0x1562   LODFILE
0x1556   SAVFL12
0x1531 X SAVFL11
0x155D   SAVFLEXT
0x1511   SAVFL4
0x14FF   SAVFL10
0x14E3   SAVFL2
0x14BB   SAVFL9
0x186B   DE2HL
0x1472 X SAVFL7
0x146E   SAVFL6
0x4DAF   DIV_16_16
0x145B   SAVFL1
0x824B   PROGND
0x1453   SAVFL3
0x1762   FNDFREDIR
0x16A9   FILE_EXIST
0x17B0   LDENTRIES
0x1409   SAVFILE
0x13F5 X EXITFLS
0x1878   PRN16ASCII
0x4D6A   MUL_U32
0x1875   PRN32ASCII
0x1870   HL2DE
0x13A6   LSTFILES7
0x138D X LSTFILES5
0x2528   TSTSPC
0x2625   TSTBRK
0x1374 X LSTFILES8
0x187E   PRN16ASCIX
0x1353   LSTFILES21
0x1356   LSTFILESPR
0x13FA   FILETP
0x134B   LSTFILES20
0x132F   LSTFILES3
0x131C   LSTFILES4
0x1316 X LSTFILES2
0x1310   LSTFILES1
0x13B6   PNTSTATS
0x12E4   INPR1
0x2F93   PRS
0x180B   CHKDSKVAL
0x12CB   LST_FILES
0x12C1   TLFLSTX
0x12B0   ALFLSTXT
0x12A5   TLSCTTX
0x1299   DSKNMTX
0x819C   DOSER
0x0046   D7
0x128A   DOSVERSERR
0x0040   D4
0x1286   LODERR
0x0048   D8
0x1282   FLNTFND
0x003A   D1
0x127E   NAMERR
0x0044   D6
0x127A   DUPLERR
0x0042   D5
0x1276   DSKFULL
0x1291   RET_ERR
0x003C   D2
0x16A4   WRT_ERR
0x17BF   LDMSCT
0x124F   DSK_RNM
0x1249   DOS_FT8
0x1236   DOS_FT9
0x1243   DOS_FT10
0x121C   DOS_FTA
0x1247   DOS_FT7
0x23BC   OUTC
0x1272   D2ERR
0x17CB   RND_ID
0x11D3 X DOS_FT5
0x128F   D1ERR
0x1843   CHKNMVAL
0x11AB   DOS_FT2
0x118F X DOS_FT0
0x1190   DOS_FT1
0x1182   DOS_FTC
0x4DC4   DIV_32_16
0x8198   DOSBFR
0x18ED   CLRDOSBF
0x18D8   CLRIOBF
0x111A   DSK_INIT
0x81B8   ENDMEM
0x81B6   SRTMEM
0x81B4   TPBF4
0x8211   RADIUS
0x81B2   TPBF3
0x81B0   TPBF2
0x81AE   TPBF1
0x81AC   RAM_PTR
0x81AA   LSB_SCT
0x81A8   MSB_SCT
0x81A7   SCT_SIZ
0x81A5   BYT_SIZ
0x81A3   NTR_NBR
0x81A1   DIR_SCT
0x819D   DIR_STRT
0x819D   TMPDBF
0x1118   DSKDIRADR
0x1109   DFSCT0
0x10F8   CF_WR_SEC2
0x10F6   CF_WR_SEC1
0x1105   CF_WR_EXIT
0x10DD   CF_WR_SEC
0x10D0   CF_RD_SECT
0x10DA   CF_RD_EXIT
0x3AF5   OUTEXP
0x819A   IOBUFF
0x10C4   CF_RD_CMD
0x10B1   CF_RD_SEC
0x10A5   CF_STANDBY
0x10A2 X CR_DV_ERR
0x10A3   CR_DV_RD_E
0x819F   DAT_STRT
0x1096   CR_DV_RD_1
0x137D   LSTFILES6
0x106F   CF_SETSTR
0x1062   CF_DAT_RDY
0x1060   RETERR
0x1053   CF_CMDRDY
0x1091   CR_DEV_RDY
0x1043   CF_NOP
0x102D   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0F05   CNTFNK
0x0F18   PRNTFNK
0x0F0B   PUTCHRBUF1
0x0EF1   LDFNKEYCHR
0x80B5   FNKEYS
0x80AF   LINEAT
0x1C80   SIGNON
0x0ED8 X LVKBRDCHK
0x0ED1   PNT2VD
0x0EC4   PUTCHRBUF
0x0EB2   SNDKEYTOBFR
0x0ED9   PRNTFNKEY
0x0EAA   CHKFNK
0x0F25   FNKEYSORD
0x0EA4   CNTKBCK
0x0003   CTRLC
0x80B4   AUTOKE
0x3655   BNRMLP
0x0E91   SENDKEY
0x0E62   SETNEWAUTO
0x0ED4   LVKBRDCHK2
0x80B3   KEYDEL
0x0E72   CHKAUTO
0x8244   KEYTMR
0x0E84   NEWKEY
0x0FAD   KBMAP_ALT
0x0FED   KBMAP_CTRL
0x0E29   CHKALT
0x0E30   LOADMAP
0x0F6D   KBMAP_SFT
0x0E20   CHKCTRL
0x0F2D   KBMAP
0x0E0C   CHKLN
0x8243   STATUSKEY
0x8242   LASTKEYPRSD
0x0DF4   ENDCTRLCK
0x0DEE   TESTCTRL
0x0E0A   FINDKEY
0x0DE1   TESTALT
0x8240   KBTMP
0x0DF8   NOKEYPRSD
0x0DB2   RPTKBDRD
0x0DAE   CHECKKBD
0x0DA0   CHECKCTRL
0x8246   CONTROLKEYS
0x0D92   CHECKALT
0x0D52   CNTCHKSND
0x0D17   CHKSNDCH
0x0CE5   RPTWLCMBP
0x0CFB   NOBPDAT
0x0CE2   SENDSND
0x0CF3   WLCBPDAT
0x0D08   WRTSNDREG
0x0D03   SETSNDREG
0x0CC9   SNDREGCFG
0x0CB5   CLRPSGREGS
0x0CB1   EMPTSNDBFR
0x0B63 X VDPMODESETEX2
0x0B5B X VDPMODESETMC
0x0B53 X VDPMODESET2
0x2F52   QTSTR
0x0B4B X VDPMODESET1
0x0B39   SENDCHRPTRNS
0x567B   CHRST88
0x0B37   NXTCHAR
0x4E7B   CHRST68
0x0B18   LDREGVLS
0x0B43   VDPMODESET
0x0B01   RSTVDPRAMREG
0x8239   CHASNDDTN
0x0AF2   EMPTVRM
0x0A86 X CNTNULL2
0x0A79   RPTNLLSRC2
0x4D50   MUL16
0x0A54   ADDNEWLINE
0x0A21   SNDCHRTOBFR
0x0A08   CNTNULL
0x09F8   RPTNLLSRC
0x0A40   PRNTRETURN
0x820B   TMPBFR4
0x8209   TMPBFR3
0x8207   SRTTXT
0x8207   TMPBFR2
0x09CE   RPTEMPTYROW
0x09B3   WRITEBUF
0x098A   LOADNEXTCOL
0x820D   VIDEOBUFF
0x0978   SCROLLNXTRW
0x8237   VIDTMP2
0x8235   VIDTMP1
0x0957   EXITCURSOR_ON
0x0941   EXITCURSORDOWN
0x0921   EXITCURSORRGHT
0x091B   CONTCRSRGT
0x0908   CHCKYPOS2
0x08ED   EXITCURSORUP
0x08C4   CHKYPOS
0x08B1   EXITCURSORLEFT
0x08AE   CONTCRSLFT
0x089D   CHCKYPOS
0x08B3   MVCRS2LFT
0x086E   MVBKSP
0x0881   LVBKSP
0x0020   SPC
0x0839 X ENDINSRT
0x0834   NXTINST
0x4D45   CMP16
0x0823   CHKHL
0x8209   ENDTXT
0x0A61   ENDOFLN
0x8205   CUR_POS
0x0801   PUTCRSCHR
0x0960   SCROLLUP
0x07C1   SETCRSRY
0x104C   CF_BUSY
0x07C2   SETCSRCOORDS
0x07D4   EXITCHAR2VID
0x0798   NXTCPCK
0x078B   RPTCPCK
0x07E1   PLACEHOLDER
0x000A   LF
0x0805   INSERTKEY
0x001A   INSRT
0x0924   CURSORDOWN
0x001F   CRSDN
0x08EF   CURSORRIGHT
0x001D   CRSRGT
0x08D6   CURSORUP
0x001E   CRSUP
0x088A   CURSORLEFT
0x001C   CRSLFT
0x0847   BACKSPACE
0x3E45   CNTCKCL
0x0008   BKSP
0x09DA   CRGRETURN
0x000C   CS
0x0019   HOME
0x075A   CHRTBL
0x4DA0   DIV_16_8
0x0749   HL2XY
0x0A87   POS_TB_CRS_32
0x073B   CONT_POS_CURS
0x0AB7   POS_TB_CRS_40
0x8200   LSTCSRSTA
0x81FF   CRSR_STATE
0x06F3   MOVSHOWCRS
0x0708   NEWCRSRCOORD
0x071D   RSTCHRCRS
0x0726   LOAD_CRSR_POS
0x06DC   READ_VSTAT
0x06D1   WRITE_VREG
0x06BC   WRITE_VIDEO_LOC
0x06A7   READ_VIDEO_LOC
0x06ED   MOVCRS
0x81FC   SCR_CUR_NX
0x0000   NLLCR
0x81FD   SCR_CUR_NY
0x069D   ATHOME
0x06E3   POS_CURSOR
0x0690   CLEARVIDBUF
0x067D   RPTFLL1
0x066A   SNDCLRSET
0x0666   STARTEMPTY
0x0630   CLRG2PTNTBL
0x0615   RPTEMPTYBUF
0x060F   LDCOLSTOEMPTY
0x064F   EMPTYMC
0x061E   EMPTYG2
0x05EC   LVCKSPLK
0x05EE   DOCOLDRESET
0x0D5D   READKBLN
0x05D9 X CHKSPCK
0x05CA   SNDLOGPT
0x36B2   COMPL
0x5E7B   LOGOFONT
0x0CDF   NOBEEP
0x0CD9   WLCMBEEP
0x0595   RPT100
0x05AB   BEEPOFF
0x059F   SETBEEP
0x056B   DEC_D
0x824A   DOS_EN
0x8205   TMPBFR1
0x055A   RPT104
0x05B3   LOADLOGOCHRS
0x0552   RPT103
0x0B6B   LM80CLOGO
0x053C   RPT102
0x0CBC   RSTPSG
0x0539   RPT101
0x05D4   CLRTABLE
0x0587   ERASECLRTBL
0x0674   SETNAMETABLE
0x0B0E   SET_GFX_MODE2
0x81FE   SCR_ORG_CHR
0x05F5   EMPTYVIDBUF
0x0474   LDCLRTBMD1
0x8203   FRGNDCLR
0x0687   SETVDPADRS
0x0505   ENDVDPSET
0x81F8   SCR_NAM_TB
0x80A3   COMMAN
0x81F6   SCR_SIZE_H
0x81F5   SCR_SIZE_W
0x8204   BKGNDCLR
0x81FB   SCR_CURS_Y
0x04FC   LDCLRTBEX2
0x81FA   SCR_CURS_X
0x0B22   LOADCHARSET
0x0412 X TXTMD
0x04C2   EXG2MD
0x049F   MCMD
0x047D   G2MD
0x043C   G1MD
0x81F7   SCR_MODE
0x0AFB   CLR_RAM_REG
0x0B06   SET_GFX_MODE
0x0AE7   EMPTY_VRAM
0x0383   RESTMR
0x0388   CTCCONF
0x035A X SIO_B_SETS
0x0354   SIO_A_SETS
0x0349   COUNTER
0x0347   DEC_E
0x0343   LEDLIGHT
0x1B8F   WARM
0x1B8C   COLD
0x0959   CURSOR_OFF
0x031F   ECHO_CHAR
0x0312   CHECKWARM
0x02FB   CORW
0x0944   CURSOR_ON
0x03D0   MSGTXT2
0x0307   COLDSTART
0x805D   basicStarted
0x0394   MSGTXT1
0x4D30   INITST
0x03ED   initVDP
0x0510   SHOW_LOGO
0x0CAB   initPSG
0x035E   initCTC
0x0339   HELLOWRLD
0x02B1 X INIT_HW2
0x818F   TEMPSTACK
0x0D72   KEYBOARD
0x0D0D   MNGSNDS
0x07E2   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x81E5   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x805A   serRdPtr
0x8000   SERBUF_START
0x0214   NOTWRAP
0x0058   bufWrap
0x8058   serInPtr
0x0208   NOTFULL
0x805C   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x8249   SERBBITS
0x019D   SIO_RTS_OFF
0x8248   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x471D   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x8247   SERIALS_EN
0x01CB   SIO_A_DI
0x1A99   GMMSG
0x0778   CHAR2VID
0x8201   PRNTVIDEO
0x823F   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x8202   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x8241   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x8061   NMIUSR
0x81F2   CTC3IV
0x81EF   CTC2IV
0x81EC   CTC1IV
0x81E9   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x02AE   INIT_HW
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0032   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
