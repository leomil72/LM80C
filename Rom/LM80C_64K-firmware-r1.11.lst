# file opened: LM80C_64K-firmware-r1.11.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C 64K - FIRMWARE - R1.11
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; set name for binary output file
  55  0000                  OUTPUT "LM80C-64K-firmware-r1.11.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C64K
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "1.11"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.01"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT dec     C
  68  0000                  DEFINE LM64K_NOP nop
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000              VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000 ~            VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 C3 EA 5E                     jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0004                  ELSE
  80+ 0004 ~                            jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 02 61                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 05 61                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 08 61                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 0B 61                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 7A 5F                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 ~                            defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 141+ 0090 ~                            defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 142+ 0090                  ELSE
 143+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 143+ 0094 43 20 36 34
 144+ 0098 4B 20 43 4F                  defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 144+ 009C 4C 4F 52 00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$30,$29,$00
 147+ 00AC 32 30 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 31  FWVER:          defm    "FW ","1.11",$20,"2021-03-09",$20,"18:05:00",$00
 152+ 00D4 2E 31 31 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 30 39 20 31
 152+ 00E4 38 3A 30 35
 152+ 00E8 3A 30 30 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 5A 61                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 5A 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 1B 61                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 58 61                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 1A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 57 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A 60 61                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 60 61                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 C9 46                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A 60 61                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 60 61                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A 61 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A 62 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A 61 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A 62 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A 61 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A 62 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A 61 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A 62 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A 75 5F                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A 71 5F     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE 71                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 19 5F                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 71 5F     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 75 5F                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A 60 61                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A 75 5F     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A 73 5F                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE 71                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 19 5F                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 73 5F     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A 75 5F                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 75 5F                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A 60 61                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A 60 61                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A 75 5F     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 1B 61                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 57 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 FE 60                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD C1 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD E9 0C                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A FE 60                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 4E 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 A8 60     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 19 5F                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 71 5F                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 73 5F                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 75 5F                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 60 61                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 ~                            call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C2                  ENDIF
 474+ 02C2 CD 40 03                     call    initCTC         ; configure CTC, then...
 475+ 02C5 CD 87 0C                     call    initPSG         ; ...configure PSG
 476+ 02C8 CD F2 04                     call    SHOW_LOGO       ; show computer logo
 477+ 02CB 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02CD CD D1 03                     call    initVDP         ; set video display
 479+ 02D0 AF                           xor     A
 480+ 02D1 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D3 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D5 FB                           ei                      ; enable interrupts
 483+ 02D6                              ; print system messages
 484+ 02D6 AF                           xor     A               ; A=0 so...
 485+ 02D7 32 58 61                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DA 3C                           inc     A               ; A=1...
 487+ 02DB 32 1A 61                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02DE 21 76 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E1 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E4 3A 76 5F                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02E7 FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02E9 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EB 21 B4 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02EE CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F1 CD 23 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F4 AF                           xor     A
 497+ 02F5 32 1A 61                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02F8 CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FB E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 02FD FE 43                        cp      'C'             ; cold start?
 501+ 02FF 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0301 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0304 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0306 32 76 5F                     ld      (basicStarted),A
 505+ 0309 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030C C3 3A 1B                     jp      COLD            ; start BASIC COLD
 507+ 030F FE 57        CHECKWARM:      cp      'W'
 508+ 0311 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0313 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0316 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 511+ 0319 C3 3D 1B                     jp      WARM            ; start BASIC WARM
 512+ 031C
 513+ 031C              ;-------------------------------------------------------------------------------
 514+ 031C              ; send back char received through ch. A
 515+ 031C 32 1B 61     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 031F AF                           xor     A
 517+ 0320 32 58 61                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0323 F3                           di                      ; disable INTs
 519+ 0324 CD 57 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 0327 3E 0D                        ld      A,CR            ; then set a CR
 521+ 0329 32 1B 61                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032C CD 57 07                     call    CHAR2VID        ; and send it to screen
 523+ 032F FB                           ei                      ; re-enable INTs
 524+ 0330 3E 01                        ld      A,$01
 525+ 0332 32 1A 61                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0335 C9                           ret                     ; return to caller
 527+ 0336
 528+ 0336                  IFDEF LM80C
 529+ 0336 ~            ;-------------------------------------------------------------------------------
 530+ 0336 ~            ; little serial blink with LEDs
 531+ 0336 ~            HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 0336 ~                            ld      A,%11001111     ; set mode 3 (mode control)
 533+ 0336 ~                            out     (PIO_CB),A      ; for PIO port B
 534+ 0336 ~                            xor     A               ; set pins to OUTPUT
 535+ 0336 ~                            out     (PIO_CB),A      ; for port B
 536+ 0336 ~                            inc     A               ; LSB on
 537+ 0336 ~            LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0336 ~                            ld      E,$20           ; little delay
 539+ 0336 ~            DEC_E:          ld      B,$00           ; count to 256
 540+ 0336 ~            COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 0336 ~                            dec     E               ; decrement outer counter
 542+ 0336 ~                            jr      NZ,DEC_E        ; finish delay
 543+ 0336 ~                            sla     A               ; shift reg.A to left 1 bit
 544+ 0336 ~                            dec     C               ; next LED
 545+ 0336 ~                            jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0336 ~                            ret                     ; return to caller
 547+ 0336                  ENDIF
 548+ 0336              ;-------------------------------------------------------------------------------
 549+ 0336              ; Z80 SIO default settings for serial channels
 550+ 0336 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0337 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0338 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0339 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 033A 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 033B E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 033C 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 033D 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 033E 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 033F 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 0340                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 0340                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 0340                                                      ; for special conditions
 563+ 0340              ;------------------------------------------------------------------------------
 564+ 0340              ;               Z80 CTC SETTING UP
 565+ 0340              ;------------------------------------------------------------------------------
 566+ 0340              initCTC:
 567+ 0340 21 6A 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0343 11 02 61                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0346 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0349 ED B0                        ldir                    ; copy data
 571+ 034B              ;CH0, CH1, & CH2 disabled
 572+ 034B 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 034D                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 034D D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 034F D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 0351 D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0353              ;init CH3
 578+ 0353              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0353              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0353 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0355                                                      ; time constant follows; cont. operation; command word
 582+ 0355 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0357 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0359 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 035B 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 035D                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 035D                                                      ; so int vector is 01000xx00
 588+ 035D D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 035F                              ; reset cells of 100ths of a second counter
 590+ 035F AF                           xor     A               ; reset A
 591+ 0360 21 FE 60                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0363 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0365 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0366 23                           inc     HL              ; next cell
 595+ 0367 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0369 C9                           ret
 597+ 036A
 598+ 036A
 599+ 036A              ;------------------------------------------------------------------------------
 600+ 036A              ; jump table for CHx interrupts
 601+ 036A FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 036D FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 0370 FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0373 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0376
 606+ 0376
 607+ 0376              ;------------------------------------------------------------------------------
 608+ 0376              ; welcome messages
 609+ 0376              MSGTXT1:
 610+ 0376                  IFDEF LM80C64K
 611+ 0376 20 20 20 20                  defm    "    LM80C 64K Color Computer",CR
 611+ 037A 4C 4D 38 30
 611+ 037E 43 20 36 34
 611+ 0382 4B 20 43 6F
 611+ 0386 6C 6F 72 20
 611+ 038A 43 6F 6D 70
 611+ 038E 75 74 65 72
 611+ 0392 0D
 612+ 0393                  ELSE
 613+ 0393 ~                            defm    "      LM80C Color Computer",CR
 614+ 0393                  ENDIF
 615+ 0393 20 62 79 20                  defm    " by Leonardo Miliani * FW R","1.11",CR,0
 615+ 0397 4C 65 6F 6E
 615+ 039B 61 72 64 6F
 615+ 039F 20 4D 69 6C
 615+ 03A3 69 61 6E 69
 615+ 03A7 20 2A 20 46
 615+ 03AB 57 20 52 31
 615+ 03AF 2E 31 31 0D
 615+ 03B3 00
 616+ 03B4 0D           MSGTXT2:        defb    CR
 617+ 03B5 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03B9 43 3E 6F 6C
 617+ 03BD 64 20 6F 72
 617+ 03C1 20 3C 57 3E
 617+ 03C5 61 72 6D 20
 617+ 03C9 73 74 61 72
 617+ 03CD 74 3F 20 00
 618+ 03D1
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03D1
  75  03D1              ; incude the latest version of the VDP module
  76  03D1                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03D1              ; ------------------------------------------------------------------------------
   2+ 03D1              ; LM80C - VDP ROUTINES - 1.5
   3+ 03D1              ; ------------------------------------------------------------------------------
   4+ 03D1              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03D1              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03D1              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03D1              ; kind of warranty: you can use them at your own risk.
   8+ 03D1              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03D1              ; maintain the copyright notices, include this advice and the note to the
  10+ 03D1              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03D1              ; redistribuite them.
  12+ 03D1              ; https://www.leonardomiliani.com
  13+ 03D1              ;
  14+ 03D1              ; Please support me by visiting the following links:
  15+ 03D1              ; Main project page: https://www.leonardomiliani.com
  16+ 03D1              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03D1              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03D1              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03D1              ; ------------------------------------------------------------------------------
  20+ 03D1              ;
  21+ 03D1              ;------------------------------------------------------------------------------
  22+ 03D1              ; VDP INITIALISATION
  23+ 03D1              ; initialize VDP for a specific graphics mode
  24+ 03D1              ; INPUT: E -> contains the graphics mode:
  25+ 03D1              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03D1 D5           initVDP:        push    DE              ; store E
  27+ 03D2 CD C5 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03D5 CD E3 0A                     call    SET_GFX_MODE    ; load register settings
  29+ 03D8 CD D8 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03DB D1                           pop     DE              ; restore reg. E
  31+ 03DC AF                           xor     A               ; reset A
  32+ 03DD 47                           ld      B,A             ; reset B (will be used later)
  33+ 03DE 7B                           ld      A,E             ; move E into A
  34+ 03DF 32 10 61                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03E2 FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 03E4 CA 20 04                     jp      Z,G1MD          ; yes, jump over
  37+ 03E7 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 03E9 CA 60 04                     jp      Z,G2MD          ; yes, jump over
  39+ 03EC FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 03EE CA 82 04                     jp      Z,MCMD          ; yes, jump over
  41+ 03F1 FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 03F3 CA A5 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 03F6                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 03F6
  45+ 03F6              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 03F6
  47+ 03F6                              ; TEXT MODE (G0)
  48+ 03F6                              ; load charset
  49+ 03F6 60           TXTMD:          ld      H,B
  50+ 03F7 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 03F8 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 03FB                              ; set cursor & video overlay
  53+ 03FB AF                           xor     A               ; reset A
  54+ 03FC 32 13 61                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 03FF 32 14 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 0402 3E 05                        ld      A,$05           ; light blue
  57+ 0404 32 1D 61                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0407 3E 28                        ld      A,$28
  59+ 0409 32 0E 61                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 040C 3E 18                        ld      A,$18
  61+ 040E 32 0F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 0411 3E 1E                        ld      A,$1E
  63+ 0413 32 BC 5F                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0416 11 00 08                     ld      DE,$0800
  65+ 0419 ED 53 11 61                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 041D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 0420
  68+ 0420                              ; GRAPHICS 1 MODE (G1)
  69+ 0420                              ; load pattern table
  70+ 0420 68           G1MD:           ld      L,B
  71+ 0421 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 0422 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0425                              ; set cursor & video overlay
  74+ 0425 AF                           xor     A               ; position cursor
  75+ 0426 32 13 61                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0429 32 14 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 042C 3E 20                        ld      A,$20
  78+ 042E 32 0E 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 0431 3E 18                        ld      A,$18
  80+ 0433 32 0F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0436 3E 14                        ld      A,$14
  82+ 0438 32 BC 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 043B 11 00 18                     ld      DE,$1800
  84+ 043E ED 53 11 61                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 0442                              ; load color table
  86+ 0442 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0445 CD 66 06                     call    SETVDPADRS
  88+ 0448 3E 01                        ld      A,$01           ; foreground color...
  89+ 044A 32 1C 61                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 044D 3E 0F                        ld      A,$0F           ; background color...
  91+ 044F 32 1D 61                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 0452 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0454 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0456 0D                           dec     C              ; VDP data mode
  95+ 0457 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0459 00                           nop
  97+ 045A 00                           nop
  98+ 045B 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 045D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 0460
 101+ 0460                              ; GRAPHICS 2 MODE (G2)
 102+ 0460 AF           G2MD:           xor     A               ; position cursor
 103+ 0461 32 13 61                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0464 32 14 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0467 32 0E 61                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 046A 3C                           inc     A               ; black on...
 107+ 046B 32 1C 61                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 046E 3E 0F                        ld      A,$0F           ; white on...
 109+ 0470 32 1D 61                     ld      (BKGNDCLR),A    ; ...background
 110+ 0473 3E C0                        ld      A,$C0
 111+ 0475 32 0F 61                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0478 11 00 18                     ld      DE,$1800
 113+ 047B ED 53 11 61                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 047F C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 0482
 116+ 0482                              ; MULTICOLOR MODE (G3)
 117+ 0482 AF           MCMD:           xor     A               ; position cursor
 118+ 0483 32 13 61                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 0486 32 14 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 0489 3E 0F                        ld      A,$0F           ; white color for...
 121+ 048B 32 1D 61                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 048E 32 1C 61                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 0491 3E 40                        ld      A,$40
 124+ 0493 32 0E 61                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 0496 3E 30                        ld      A,$30
 126+ 0498 32 0F 61                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 049B 11 00 08                     ld      DE,$0800
 128+ 049E ED 53 11 61                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04A2 C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04A5
 131+ 04A5                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04A5              EXG2MD:         ; load pattern table
 133+ 04A5 60                           ld      H,B
 134+ 04A6 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04A7 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04AA                              ; set cursor & video overlay
 137+ 04AA AF                           xor     A               ; position cursor
 138+ 04AB 32 13 61                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04AE 32 14 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04B1 3E 20                        ld      A,$20
 141+ 04B3 32 0E 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04B6 3E 18                        ld      A,$18
 143+ 04B8 32 0F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04BB 3E 14                        ld      A,$14
 145+ 04BD 32 BC 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04C0 11 00 38                     ld      DE,$3800
 147+ 04C3 ED 53 11 61                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04C7                               ; load color table
 149+ 04C7 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04CA CD 66 06                     call    SETVDPADRS
 151+ 04CD 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04CF 32 1C 61                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04D2 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04D4 32 1D 61                     ld      (BKGNDCLR),A    ; ...background
 155+ 04D7 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04D9 16 08                        ld      D,$08           ; 8 pages of
 157+ 04DB 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04DD 0D                           dec     C              ; VDP data mode
 159+ 04DE ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04E0 00                           nop
 161+ 04E1 00                           nop
 162+ 04E2 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 04E4 15                           dec     D               ; did we fill up all the cells?
 164+ 04E5 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 04E7                              ; LAST VDP SETTINGS
 166+ 04E7 CD 38 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 04EA CD D8 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 04ED AF                           xor     A
 169+ 04EE 32 17 61                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 04F1 C9                           ret                     ; return to caller
 171+ 04F2
 172+ 04F2
 173+ 04F2              ; show initial logo
 174+ 04F2 CD C5 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 04F5                              ; set VDP for G2 mode
 176+ 04F5 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 04F7 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 04FA CD EB 0A                     call    SET_GFX_MODE2   ; load register settings
 179+ 04FD 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 04FF ED 51                        out     (C),D           ; send data to VDP
 181+ 0501 ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0503                              ; set name table
 183+ 0503 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0506 CD 54 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0509 CD 6C 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 050C                              ; set colors for logo
 187+ 050C 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 050F CD 66 06                     call    SETVDPADRS
 189+ 0512 06 05                        ld      B,$05           ; 5 bands
 190+ 0514 21 B7 05                     ld      HL,CLRTABLE
 191+ 0517 0D                           dec     C              ; set VDP_DAT
 192+ 0518 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 051A 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 051C 7E                           ld      A,(HL)          ; load data
 195+ 051D ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 051F 00                           nop                     ; little delay
 197+ 0520 1D                           dec     E               ; decrement counter
 198+ 0521 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0523 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0525 15                           dec     D               ; decrement char band counter
 201+ 0526 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0528 23                           inc     HL              ; next pattern
 203+ 0529 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 052B                              ; set pattern table
 205+ 052B 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 052E 11 47 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0531 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0533 CD 97 05     RPT103:         call    LOADLOGOCHRS
 209+ 0536 13                           inc     DE              ; next logo pattern
 210+ 0537 10 FA                        djnz    RPT103
 211+ 0539 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 053B CD 97 05     RPT104:         call    LOADLOGOCHRS
 213+ 053E 13                           inc     DE              ; next logo pattern
 214+ 053F 10 FA                        djnz    RPT104
 215+ 0541                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0541 06 02                        ld      B,$02           ; two times
 217+ 0543 AF                           xor     A               ; reset A
 218+ 0544 57                           ld      D,A             ; 256 times
 219+ 0545 5F                           ld      E,A             ; x 256 times
 220+ 0546 32 1E 61                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0549                  IFDEF LM80C64K
 222+ 0549 3C                           inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 054A                  ENDIF
 224+ 054A 32 63 61                     ld      (DOS_EN),A      ; DOS enabled
 225+ 054D 00           DEC_D:          nop                     ; does nothing...
 226+ 054E 00                           nop
 227+ 054F 00                           nop
 228+ 0550 00                           nop
 229+ 0551 00                           nop
 230+ 0552 00                           nop                     ; ...until here
 231+ 0553 1D                           dec     E               ; decrement E
 232+ 0554 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0556 7A                           ld      A,D
 234+ 0557 FE 40                        cp      $40             ; ...equal to 64
 235+ 0559 CC 83 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 055C 15                           dec     D
 237+ 055D 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 055F 3A 1E 61                     ld      A,(TMPBFR1)     ; sound state
 239+ 0562 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0564 C4 8F 05                     call    NZ,BEEPOFF      ; yes
 241+ 0567                  IFDEF LM80C64K
 242+ 0567 CD BC 05                     call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 056A                                                      ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 056A                  ENDIF
 245+ 056A 10 E1                        djnz    DEC_D           ; repeat
 246+ 056C              ERASECLRTBL:    ; erase color table
 247+ 056C 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 056E 16 0A                        ld      D,$0A           ; 10 pages
 249+ 0570 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 0572 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0575 CD 66 06                     call    SETVDPADRS      ; send address
 252+ 0578 0D                           dec     C              ; VDP address for passing data
 253+ 0579 ED 79        RPT100:         out     (C),A           ; send data
 254+ 057B 00                           nop
 255+ 057C 00                           nop                     ; little delay
 256+ 057D 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 057F 15                           dec     D
 258+ 0580 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 0582 C9                           ret                     ; return to caller
 260+ 0583
 261+ 0583              ; play a beep
 262+ 0583 3A 1E 61     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 0586 B7                           or      A               ; is it 0?
 264+ 0587 C0                           ret     NZ              ; no, exit
 265+ 0588 3C                           inc     A               ; flag to 1
 266+ 0589 32 1E 61                     ld      (TMPBFR1),A     ; set sound
 267+ 058C C3 B5 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 058F
 269+ 058F              ; beep off
 270+ 058F 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 0591 32 1E 61                     ld      (TMPBFR1),A     ; set flag
 272+ 0594 C3 BB 0C                     jp      NOBEEP          ; stop beep and return
 273+ 0597
 274+ 0597
 275+ 0597              ; used to load the chars that will compose the logo of the splash screen
 276+ 0597 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 0598 87                           add     A,A
 278+ 0599 87                           add     A,A
 279+ 059A 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 059B C5                           push    BC
 281+ 059C D5                           push    DE              ; store BC and DE
 282+ 059D E5                           push    HL              ; store VRAM address to write to
 283+ 059E 21 15 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05A1 5F                           ld      E,A
 285+ 05A2 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05A4 19                           add     HL,DE           ; get address of pattern data
 287+ 05A5 EB                           ex      DE,HL           ; move address into DE
 288+ 05A6 E1                           pop     HL              ; retrieve VRAM address
 289+ 05A7 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05A9 CD 66 06                     call    SETVDPADRS      ; set VDP address
 291+ 05AC 0D                           dec     C              ; VDP_DAT
 292+ 05AD 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05AE ED 79                        out     (C),A           ; and send to VRAM
 294+ 05B0 13                           inc     DE              ; next byte into RAM
 295+ 05B1 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05B2 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05B4 D1                           pop     DE
 298+ 05B5 C1                           pop     BC              ; retrieve BC & DE
 299+ 05B6 C9                           ret                     ; return to caller
 300+ 05B7              CLRTABLE:       equ $
 301+ 05B7 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05BB 1D
 302+ 05BC
 303+ 05BC
 304+ 05BC              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05BC              ; if yes, then disable DOS functions recovering RAM
 306+ 05BC F5           CHKSPCK:        push    AF
 307+ 05BD 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05BF CD 39 0D                     call    READKBLN        ; read row
 309+ 05C2 CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05C4 CA D1 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05C7 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05C9 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05CB AF                           xor     A               ; yes, so...
 314+ 05CC 32 63 61                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05CF F1           LVCKSPLK:       pop     AF
 316+ 05D0 C9                           ret
 317+ 05D1 AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05D2 32 76 5F                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05D5 C3 00 00                     jp      $0000           ; restart
 320+ 05D8
 321+ 05D8
 322+ 05D8              ; empty video buffer
 323+ 05D8 3A 10 61     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05DB FE 02                        cp      $02             ; is it G2 mode?
 325+ 05DD CA 00 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05E0 FE 03                        cp      $03             ; is it MC mode?
 327+ 05E2 CA 30 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 05E5 3A 0F 61                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 05E8 47                           ld      B,A             ; move rows into B
 330+ 05E9 AF                           xor     A               ; filling char is $00
 331+ 05EA 2A 11 61                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 05ED CD 66 06                     call    SETVDPADRS      ; send address to VDP
 333+ 05F0 0D                           dec     C              ; VDP address for passing data
 334+ 05F1 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 05F2 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 05F5 57                           ld      D,A             ; move A into D
 337+ 05F6 7B                           ld      A,E             ; recover filling char
 338+ 05F7 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 05F9 00                           nop
 340+ 05FA 15                           dec     D               ; decr. D
 341+ 05FB 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 05FD 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 05FF C9                           ret                     ; return to caller
 344+ 0600 2A 11 61     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0603 CD 54 06                     call    SETNAMETABLE    ; set name table
 346+ 0606 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0609 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 348+ 060C AF                           xor     A               ; empty pattern
 349+ 060D 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 060F 47                           ld      B,A             ; 256 bytes for page
 351+ 0610 0D                           dec     C              ; VDP data mode
 352+ 0611 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0613 00                           nop                     ; little delay
 354+ 0614 00                           nop
 355+ 0615 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0617 15                           dec     D               ; next page
 357+ 0618 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 061A 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 061D CD 66 06                     call    SETVDPADRS      ; send address to VDP
 360+ 0620 3A 1C 61                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0623 87                           add     A,A
 362+ 0624 87                           add     A,A
 363+ 0625 87                           add     A,A
 364+ 0626 87                           add     A,A             ; move to high nibble
 365+ 0627 57                           ld      D,A             ; store into D
 366+ 0628 3A 1D 61                     ld      A,(BKGNDCLR)    ; load background color
 367+ 062B B2                           or      D               ; combine with background color
 368+ 062C 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 062E 18 17                        jr      STARTEMPTY
 370+ 0630 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0633 CD 54 06                     call    SETNAMETABLE    ; set name table
 372+ 0636 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0639 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 374+ 063C 3A 1D 61                     ld      A,(BKGNDCLR)    ; load background
 375+ 063F 57                           ld      D,A             ; store into D
 376+ 0640 87                           add     A,A
 377+ 0641 87                           add     A,A
 378+ 0642 87                           add     A,A
 379+ 0643 87                           add     A,A             ; move to high nibble
 380+ 0644 B2                           or      D               ; set background color for high and low nibble
 381+ 0645 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0647 0D           STARTEMPTY:     dec     C              ; VDP address for passing data
 383+ 0648 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 064A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 064C 00                           nop                     ; wait a while
 386+ 064D 00                           nop
 387+ 064E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0650 15                           dec     D               ; have we filled all the pages?
 389+ 0651 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0653 C9                           ret                     ; return to caller
 391+ 0654
 392+ 0654              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0654 CD 66 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0657 0D                           dec     C              ; VDP address for passing data
 395+ 0658 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 065A AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 065B 47                           ld      B,A             ; reset B
 398+ 065C ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 065E 00                           nop
 400+ 065F 3C                           inc     A               ; increment # of name
 401+ 0660 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0662 15                           dec     D               ; did we fill all the pages?
 403+ 0663 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0665 C9                           ret                     ; return to caller
 405+ 0666
 406+ 0666              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0666 0E 31        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0668 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 066A ED 69                        out     (C),L           ; send low and...
 410+ 066C ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 066E C9                           ret                     ; return to caller
 412+ 066F
 413+ 066F              ; clear the video buffer and position the cursor at 0,0
 414+ 066F CD D8 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0672 AF                           xor     A               ; reset A
 416+ 0673 32 13 61                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0676 32 14 61                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 0679 C3 C2 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 067C
 420+ 067C              ; HOME: position the cursor at coords. 0,0
 421+ 067C AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 067D 32 16 61                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 0680 32 15 61                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 0683 C3 CC 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 0686
 426+ 0686              ; load the char or byte at the VRAM position set by HL
 427+ 0686              ; value is returned into A
 428+ 0686 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 0687 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 430+ 0689 44                           ld      B,H
 431+ 068A CB B8                        res     7,B
 432+ 068C CB B0                        res     6,B
 433+ 068E ED 69                        out     (C),L           ; low byte then...
 434+ 0690 ED 41                        out     (C),B           ; high byte
 435+ 0692 0D                           dec     C              ; VDP data mode
 436+ 0693 00                           nop               ; added to compensate shorter instruction
 437+ 0694 00                           nop                     ; wait...
 438+ 0695 00                           nop                     ; ...a while
 439+ 0696 00                           nop
 440+ 0697 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 0699 C1                           pop     BC              ; restore BC
 442+ 069A C9                           ret                     ; return to caller
 443+ 069B
 444+ 069B              ; write a byte at the VRAM position pointed by HL
 445+ 069B              ; value is in A
 446+ 069B C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 069C 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 448+ 069E 44                           ld      B,H             ; copy H into B
 449+ 069F CB B8                        res     7,B
 450+ 06A1 CB F0                        set     6,B             ; write to VRAM
 451+ 06A3 ED 69                        out     (C),L           ; low byte then...
 452+ 06A5 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06A7 0D                           dec     C              ; VDP data mode
 454+ 06A8 00                           nop               ; added to compensate shorter instruction
 455+ 06A9 00                           nop                     ; wait...
 456+ 06AA 00                           nop                     ; ...a while
 457+ 06AB 00                           nop
 458+ 06AC ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06AE C1                           pop     BC              ; restore BC
 460+ 06AF C9                           ret                     ; return to caller
 461+ 06B0
 462+ 06B0              ; write a value into a specific VDP register
 463+ 06B0              ; value is in E, register is in A
 464+ 06B0 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06B1 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06B3 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06B5 ED 59                        out     (C),E           ; send data to VDP
 468+ 06B7 ED 79                        out     (C),A           ; select the destination register
 469+ 06B9 C1                           pop     BC              ; restore BC
 470+ 06BA C9                           ret                     ; return to caller
 471+ 06BB
 472+ 06BB              ; read VDP status register and return value into A
 473+ 06BB C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06BC 0E 31                        ld      C,VDP_SET       ; VDP register access
 475+ 06BE ED 78                        in      A,(C)           ; read status register
 476+ 06C0 C1                           pop     BC              ; restore BC
 477+ 06C1 C9                           ret                     ; return to caller
 478+ 06C2
 479+ 06C2              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06C2 CD 05 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06C5 CD 86 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06C8 32 17 61                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06CB C9                           ret
 484+ 06CC
 485+ 06CC              ; move cursor to new X,Y coordinates
 486+ 06CC CD FC 06     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06CF CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06D2 CD C2 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06D5 3A 18 61                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06D8 A7                           and     A               ; is cursor off?
 491+ 06D9 C8                           ret     Z               ; yes, return
 492+ 06DA 3A 19 61                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06DD F6 20                        or      $20             ; ...set cursor on
 494+ 06DF 32 19 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 06E2 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 06E4 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 06E7
 498+ 06E7
 499+ 06E7              ; set new cursor's coordinates
 500+ 06E7 3A 15 61     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 06EA 32 13 61                     ld      (SCR_CURS_X),A  ; write new X
 502+ 06ED 3A 16 61                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 06F0 32 14 61                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 06F3 3E FF                        ld      A,$FF           ; delete new values
 505+ 06F5 32 15 61                     ld      (SCR_CUR_NX),A  ; of X
 506+ 06F8 32 16 61                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 06FB C9                           ret
 508+ 06FC
 509+ 06FC              ; recover char under the cursor and prints it onto the screen
 510+ 06FC CD 05 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 06FF 3A 17 61                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0702 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0705
 514+ 0705              ; retrieve cursor position from either current coordinates or next place
 515+ 0705              ; return address position into HL
 516+ 0705 3A 14 61     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0708 6F                           ld      L,A             ; move it into reg.L
 518+ 0709 AF                           xor     A               ; reset A
 519+ 070A 67                           ld      H,A             ; reset H
 520+ 070B 47                           ld      B,A             ; reset B
 521+ 070C 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 070D 11 95 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0710 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0713 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0715 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0717 11 65 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 071A 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 071B 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 071C 23                           inc     HL
 530+ 071D 56                           ld      D,(HL)
 531+ 071E 2A 11 61                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0721 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0722 3A 13 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0725 4F                           ld      C,A             ; transfer A into C
 535+ 0726 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0727 C9                           ret
 537+ 0728
 538+ 0728              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0728              ; return them into L,A for X,Y
 540+ 0728 D5           HL2XY:          push    DE              ; store DE
 541+ 0729 ED 5B 11 61                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 072D AF                           xor     A               ; clear Carry
 543+ 072E ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0730 D1                           pop     DE
 545+ 0731 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0734 4F                           ld      C,A             ; move it into C
 547+ 0735 CD 3A 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0738 C9                           ret                     ; return to caller
 549+ 0739
 550+ 0739              ;-------------------------------------------------------------------------------
 551+ 0739              ; char table for jumps
 552+ 0739 19           CHRTBL:         defb    HOME
 553+ 073A 7C 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 073C
 555+ 073C 0C                           defb    CS
 556+ 073D 6F 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 073F
 558+ 073F 0D                           defb    CR
 559+ 0740 B8 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0742
 561+ 0742 08                           defb    BKSP
 562+ 0743 26 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0745
 564+ 0745 1C                           defb    CRSLFT
 565+ 0746 69 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0748
 567+ 0748 1E                           defb    CRSUP
 568+ 0749 B5 08                        defw    CURSORUP        ; move cursor up
 569+ 074B
 570+ 074B 1D                           defb    CRSRGT
 571+ 074C CE 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 074E
 573+ 074E 1F                           defb    CRSDN
 574+ 074F 03 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0751
 576+ 0751 1A                           defb    INSRT
 577+ 0752 E4 07                        defw    INSERTKEY       ; insert a space
 578+ 0754
 579+ 0754 0A                           defb    LF
 580+ 0755 C0 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0757
 582+ 0757              ; send current char to video buffer
 583+ 0757 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0758 C5                           push    BC              ; store BC
 585+ 0759 D5                           push    DE              ; store DE
 586+ 075A E5                           push    HL              ; store HL
 587+ 075B 3A 18 61                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 075E F5                           push    AF              ; into stack
 589+ 075F CD 38 09                     call    CURSOR_OFF      ; cursor off
 590+ 0762 3A 1B 61                     ld      A,(CHR4VID)     ; recover char
 591+ 0765 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0767 21 39 07                     ld      HL,CHRTBL       ; address of key table
 593+ 076A BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 076B 23                           inc     HL              ; beginning of sub-routine address
 595+ 076C 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 076E 5E                           ld      E,(HL)          ; load addres into DE
 597+ 076F 23                           inc     HL
 598+ 0770 56                           ld      D,(HL)
 599+ 0771 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0772 11 B3 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0775 D5                           push    DE              ; store into stack
 602+ 0776 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0777 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0778 23                           inc     HL              ; ...to the next char code
 605+ 0779 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 077B                              ; it'a not a special char, just print it
 607+ 077B CD 05 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 077E 3A 1B 61                     ld      A,(CHR4VID)     ; recover char to print
 609+ 0781 CD 9B 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 0784 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 0787 5F                           ld      E,A             ; store cursor Y into E
 612+ 0788 3A 13 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 078B 3C                           inc     A               ; move 1 step to right
 614+ 078C 21 0E 61                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 078F BE                           cp      (HL)            ; have we reached the most right position?
 616+ 0790 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 0792 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 0793 7B                           ld      A,E             ; move cursor Y into A
 619+ 0794 21 0F 61                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 0797 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 0798 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 079A D5                           push    DE
 623+ 079B CD 3F 09                     call    SCROLLUP        ; scroll screen up
 624+ 079E D1                           pop     DE
 625+ 079F 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07A0 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07A1 32 13 61     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07A4 7B                           ld      A,E             ; recover Y
 629+ 07A5 32 14 61                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07A8 CD C2 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07AB 3A FE 60                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07AE E6 20                        and     $20             ; check cursor state
 633+ 07B0 32 19 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07B3 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07B4 32 1B 61                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07B7 F1                           pop     AF              ; recover cursor state
 637+ 07B8 A7                           and     A               ; was it off (A=0)?
 638+ 07B9 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07BC E1                           pop     HL              ; restore HL
 640+ 07BD D1                           pop     DE              ; restore DE
 641+ 07BE C1                           pop     BC              ; restore BC
 642+ 07BF F1                           pop     AF              ; restore AF
 643+ 07C0 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07C1
 645+ 07C1              ; flash the cursor at the current position
 646+ 07C1              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07C1 3A 18 61     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07C4 A7                           and     A               ; cursor off (A=0)?
 649+ 07C5 C8                           ret     Z               ; yes, return
 650+ 07C6 3A FE 60                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07C9 E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07CB 21 19 61                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07CE BE                           cp      (HL)            ; compare current state with last state
 654+ 07CF C8                           ret     Z               ; same state, no change required - exit
 655+ 07D0 77                           ld      (HL),A          ; save new state
 656+ 07D1 F5                           push    AF              ; store A (keep state for later use)
 657+ 07D2 CD 05 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07D5 F1                           pop     AF              ; recover current state
 659+ 07D6 06 FF                        ld      B,$FF           ; cursor char
 660+ 07D8 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07DA 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07DC 3A 17 61                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 07DF 47                           ld      B,A             ; move char into B
 664+ 07E0 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 07E1 C3 9B 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 07E4
 667+ 07E4
 668+ 07E4              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 07E4              ; 1 cell straight
 670+ 07E4 CD FC 06     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 07E7 CD 05 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 07EA 22 1E 61                     ld      (CUR_POS),HL    ; store it
 673+ 07ED CD 3F 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 07F0                                                      ; DE is the address of the bottom right cell of the screen
 675+ 07F0 22 22 61                     ld      (ENDTXT),HL     ; store it
 676+ 07F3 ED 4B 1E 61                  ld      BC,(CUR_POS)    ; load starting address
 677+ 07F7 AF                           xor     A
 678+ 07F8 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 07FA CA D2 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 07FD 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 07FF 2A 22 61                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0802 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0803 E5                           push    HL
 684+ 0804 CD DF 4C                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0807 E1                           pop     HL
 686+ 0808 D2 13 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 080B CD 86 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 080E 23                           inc     HL              ; next cell
 689+ 080F CD 9B 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0812 2B                           dec     HL              ; decrement to old position
 691+ 0813 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0814 79                           ld      A,C
 693+ 0815 B0                           or      B               ; finished?
 694+ 0816 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0818 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 081A 2A 1E 61                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 081D 32 17 61                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0820 CD 9B 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0823 C3 D2 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0826
 701+ 0826              ; delete the char at the left of the cursor
 702+ 0826 CD FC 06     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 0829 2A 11 61                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 082C 44 4D                        ld      BC,HL           ; store into BC
 705+ 082E CD 05 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0831 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0833 AF                           xor     A               ; reset Carry
 708+ 0834 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0836 CA 60 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 0839 ED 53 1E 61                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 083D CD 3F 0A                     call    ENDOFLN         ; check end of text
 712+ 0840 ED 5B 1E 61                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0844 AF                           xor     A               ; reset Carry
 714+ 0845 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0847 CA 60 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 084A 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 084C EB                           ex      DE,HL           ; copy starting position into HL
 718+ 084D CD 86 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0850 2B                           dec     HL              ; 1 position to left
 720+ 0851 CD 9B 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0854 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0855 23                           inc     HL
 723+ 0856 0B                           dec     BC              ; decrement # of chars
 724+ 0857 79                           ld      A,C
 725+ 0858 B0                           or      B               ; 0 chars?
 726+ 0859 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 085B 2B                           dec     HL
 728+ 085C AF                           xor     A
 729+ 085D CD 9B 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0860 CD 92 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0863 CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0866 C3 D2 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 0869
 734+ 0869
 735+ 0869              ; move cursor to left
 736+ 0869 F5           CURSORLEFT:     push    AF              ; store A
 737+ 086A 3A 13 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 086D A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 086E 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0870 3D                           dec     A               ; no, decrement X
 741+ 0871 32 15 61                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0874 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0877 32 16 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 087A 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 087C 3A 14 61     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 087F A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 0880 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 0882 3D                           dec     A               ; no, decrement Y
 749+ 0883 32 16 61                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 0886 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 0889 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 088A 32 15 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 088D CD CC 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 0890 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 0891 C9                           ret                     ; return to caller
 756+ 0892
 757+ 0892              ; move cursor 1 position to the left
 758+ 0892 3A 13 61     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 0895 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 0896 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 0898 3D                           dec     A               ; no, decrement X
 762+ 0899 32 15 61                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 089C 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 089F 32 16 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08A2 C9                           ret                     ; go on moving cursor
 766+ 08A3 3A 14 61     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08A6 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08A7 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08A9 3D                           dec     A               ; no, decrement Y
 770+ 08AA 32 16 61                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08AD 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08B0 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08B1 32 15 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08B4 C9                           ret                     ; return to caller
 775+ 08B5
 776+ 08B5              ; move cursor up
 777+ 08B5 F5           CURSORUP:       push    AF              ; store A
 778+ 08B6 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08B9 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08BA 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08BC 3D                           dec     A               ; no, decrement Y
 782+ 08BD 32 16 61                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08C0 3A 13 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08C3 32 15 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08C6 CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08C9 CD CC 06                     call    MOVCRS          ; move cursor into new position
 787+ 08CC F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08CD C9                           ret                     ; return to caller
 789+ 08CE
 790+ 08CE
 791+ 08CE              ; move cursor to right
 792+ 08CE F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08CF C5                           push    BC              ; store B
 794+ 08D0 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08D3 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08D4 47                           ld      B,A             ; move A into B
 797+ 08D5 3A 13 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08D8 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08D9 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08DB 3C                           inc     A               ; no, so increment X
 801+ 08DC 32 15 61                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 08DF 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 08E2 32 16 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 08E5 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 08E7 3A 0F 61     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 08EA 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 08EB 47                           ld      B,A             ; move bottom into B
 808+ 08EC 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 08EF B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 08F0 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 08F2 3C                           inc     A               ; no, increment Y
 812+ 08F3 32 16 61                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 08F6 AF                           xor     A               ; move cursor to top left
 814+ 08F7 32 15 61                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 08FA CD FC 06     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 08FD CD CC 06                     call    MOVCRS          ; move cursor into new position
 817+ 0900 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0901 F1                           pop     AF              ; restore A
 819+ 0902 C9                           ret                     ; return to caller
 820+ 0903
 821+ 0903
 822+ 0903              ; move cursor down
 823+ 0903 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0904 C5                           push    BC              ; store B
 825+ 0905 3A 0F 61                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0908 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 0909 47                           ld      B,A             ; move X into B
 828+ 090A 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 090D B8                           cp      B               ; is current cursor position < 23?
 830+ 090E 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0910 3C                           inc     A               ; yes, increment Y
 832+ 0911 32 16 61                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0914 3A 13 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0917 32 15 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 091A CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 091D CD CC 06                     call    MOVCRS          ; move cursor into new position
 837+ 0920 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0921 F1                           pop     AF              ; retrieve A
 839+ 0922 C9                           ret                     ; return to caller
 840+ 0923
 841+ 0923
 842+ 0923              ; set cursor on (visible on screen)
 843+ 0923 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0924 3A 18 61                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0927 B7                           or      A               ; is it on?
 846+ 0928 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 092A 3A 0F 61                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 092D FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 092F 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0931 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0933 32 18 61                     ld      (CRSR_STATE),A  ; set state
 852+ 0936 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0937 C9                           ret                     ; return to caller
 854+ 0938
 855+ 0938              ; set cursor off (invisible on screen)
 856+ 0938 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 0939 AF                           xor     A               ; cursor state OFF
 858+ 093A 32 18 61                     ld      (CRSR_STATE),A  ; set state
 859+ 093D F1                           pop     AF              ; restore AF
 860+ 093E C9                           ret
 861+ 093F
 862+ 093F              ; scroll the screen 1 row up
 863+ 093F AF           SCROLLUP:       xor     A               ; reset A
 864+ 0940 57                           ld      D,A             ; reset D
 865+ 0941 32 1A 61                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0944 2A 11 61                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0947 22 4E 61                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 094A 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 094D 5F                           ld      E,A             ; move width into E
 870+ 094E 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 094F 22 50 61                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0952 3A 0F 61                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0955 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0956 47                           ld      B,A             ; move # of rows into B
 875+ 0957 3A 0E 61     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 095A 5F                           ld      E,A             ; move width into E
 877+ 095B 2A 50 61                     ld      HL,(VIDTMP2)    ; load source address
 878+ 095E 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0960 ED 69                        out     (C),L           ; low byte of source
 880+ 0962 ED 61                        out     (C),H           ; high byte of source
 881+ 0964 21 26 61                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0967 0D                           dec     C              ; VDP data mode
 883+ 0968 00                           nop               ; added to compensate shorter instruction
 884+ 0969 ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 096B 77                           ld      (HL),A          ; store char
 886+ 096C 23                           inc     HL              ; next cell of the buffer
 887+ 096D 1D                           dec     E               ; count the chars to be read
 888+ 096E 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0970 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0973 5F                           ld      E,A             ; move # of rows into E
 891+ 0974 16 00                        ld      D,$00           ; reset D
 892+ 0976 2A 4E 61                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 0979 E5                           push    HL              ; store HL
 894+ 097A 2A 50 61                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 097D 22 4E 61                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 0980 19                           add     HL,DE           ; address of new
 897+ 0981 22 50 61                     ld      (VIDTMP2),HL    ; source row
 898+ 0984 E1                           pop     HL              ; restore address of current destination row
 899+ 0985 CB F4                        set     6,H             ; writing mode
 900+ 0987 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 901+ 0989 ED 69                        out     (C),L           ; low byte
 902+ 098B ED 61                        out     (C),H           ; high byte of address
 903+ 098D 21 26 61                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 0990 0D                           dec     C              ; VDP data mode
 905+ 0991 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 0992 ED 79                        out     (C),A           ; send char
 907+ 0994 23                           inc     HL              ; increment buffer index
 908+ 0995 1D                           dec     E               ; next row
 909+ 0996 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 0998 10 BD                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 099A 3A 0E 61                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 099D 47                           ld      B,A             ; cells to empty into B
 913+ 099E AF                           xor     A               ; null char
 914+ 099F 0E 31                        ld      C,VDP_SET       ; VDP set mode
 915+ 09A1 2A 4E 61                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09A4 CB F4                        set     6,H             ; writing mode
 917+ 09A6 ED 69                        out     (C),L           ; low byte then..
 918+ 09A8 ED 61                        out     (C),H           ; high byte of address
 919+ 09AA 0D                           dec     C              ; VDP data mode
 920+ 09AB 00                           nop               ; delay
 921+ 09AC ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09AE 00                           nop                     ; delay
 923+ 09AF 00                           nop
 924+ 09B0 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09B2 3E 01                        ld      A,$01
 926+ 09B4 32 1A 61                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09B7 C9                           ret                     ; return to caller
 928+ 09B8
 929+ 09B8              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09B8              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09B8              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09B8              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09B8              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09B8              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09B8              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09B8              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09B8 3A 18 61                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09BB 32 24 61                     ld      (TMPBFR4),A     ; store status
 939+ 09BE A7                           and     A               ; is cursor on?
 940+ 09BF C4 38 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09C2 CD FC 06                     call    RSTCHRCRS       ; restore char under it
 942+ 09C5                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09C5 3A 58 61                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09C8 A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09C9 CA 1E 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09CC                              ; first part: look for the beginning of the text line on screen
 947+ 09CC CD 05 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09CF 22 1E 61                     ld      (CUR_POS),HL    ; store it
 949+ 09D2 ED 5B 11 61                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09D6 E5           RPTNLLSRC:      push    HL
 951+ 09D7 CD DF 4C                     call    CMP16           ; check if at "home"
 952+ 09DA E1                           pop     HL
 953+ 09DB CA E6 09                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 09DE 2B                           dec     HL              ; go 1 step back
 955+ 09DF CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 09E2 A7                           and     A               ; is it $00 (null char)?
 957+ 09E3 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 09E5 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 09E6                              ; second part: look for the ending of the text on screen
 960+ 09E6 22 20 61     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 09E9 CD 3F 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 09EC 22 22 61                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 09EF ED 5B 20 61                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 09F3 A7                           and     A               ; clear Carry
 965+ 09F4 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 09F6 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 09F8                              ;---    central part: send the text on the screen to the interpreter
 968+ 09F8 2A 20 61                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 09FB ED 5B 22 61                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 09FF CD 86 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A02 E5                           push    HL
 972+ 0A03 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A06 E1                           pop     HL
 974+ 0A07 23                           inc     HL              ; go to next char
 975+ 0A08 E5                           push    HL              ; store HL
 976+ 0A09 CD DF 4C                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A0C E1                           pop     HL
 978+ 0A0D 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A0F 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A11 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A14 2A 22 61                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A17 CD 28 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A1A 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A1B 32 14 61                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A1E                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A1E AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A1F 32 13 61                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A22 3A 14 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A25 3C                           inc     A               ; new row
 990+ 0A26 21 0F 61                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A29 BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A2A 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A2C 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A2D F5                           push    AF              ; (store A)
 995+ 0A2E CD 3F 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A31 F1                           pop     AF              ; (retrieve A)
 997+ 0A32 32 14 61     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A35 3A 24 61                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A38 A7                           and     A               ; was it off (A=0)?
1000+ 0A39 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A3C C3 C2 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A3F
1003+ 0A3F              ; find end of text line
1004+ 0A3F              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A3F              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A3F 3A 0F 61     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A42 5F                           ld      E,A             ; load screen height into DE
1008+ 0A43 3A 0E 61                     ld      A,(SCR_SIZE_W)
1009+ 0A46 6F                           ld      L,A             ; load screen width into HL
1010+ 0A47 AF                           xor     A
1011+ 0A48 67                           ld      H,A
1012+ 0A49 57                           ld      D,A
1013+ 0A4A CD EA 4C                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A4D ED 5B 11 61                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A51 19                           add     HL,DE           ; get the address...
1016+ 0A52 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A53 EB                           ex      DE,HL           ; store address into DE
1018+ 0A54 2A 1E 61                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A57 E5           RPTNLLSRC2:     push    HL
1020+ 0A58 CD DF 4C                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A5B E1                           pop     HL
1022+ 0A5C C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A5D 23                           inc     HL              ; 1 more step forward
1024+ 0A5E CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A61 A7                           and     A               ; is it $00 (null char)?
1026+ 0A62 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A64 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A65
1029+ 0A65
1030+ 0A65              ; ------------------------------------------------------------------------------
1031+ 0A65                              ; this table contains the values of the offsets to be added to
1032+ 0A65                              ; the starting address of the name table to find the correct
1033+ 0A65                              ; value of the first cell of the corresponding row
1034+ 0A65                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A65                              ; table for graphics 1 text mode: 32 cols
1036+ 0A65 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A69 40 00 60 00
1036+ 0A6D 80 00 A0 00
1036+ 0A71 C0 00 E0 00
1037+ 0A75 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A79 40 01 60 01
1037+ 0A7D 80 01 A0 01
1037+ 0A81 C0 01 E0 01
1038+ 0A85 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0A89 40 02 60 02
1038+ 0A8D 80 02 A0 02
1038+ 0A91 C0 02 E0 02
1039+ 0A95                              ; table for pure text mode: 40 cols
1040+ 0A95 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0A99 50 00 78 00
1040+ 0A9D A0 00 C8 00
1040+ 0AA1 F0 00 18 01
1041+ 0AA5 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0AA9 90 01 B8 01
1041+ 0AAD E0 01 08 02
1041+ 0AB1 30 02 58 02
1042+ 0AB5 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0AB9 D0 02 F8 02
1042+ 0ABD 20 03 48 03
1042+ 0AC1 70 03 98 03
1043+ 0AC5
1044+ 0AC5              ; ------------------------------------------------------------------------------
1045+ 0AC5              ; reset VRAM
1046+ 0AC5 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AC6 67                           ld      H,A
1048+ 0AC7 6F                           ld      L,A             ; reset HL
1049+ 0AC8 CD 66 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0ACB 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0ACD 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0ACE 0D                           dec     C              ; VDP data mode
1053+ 0ACF ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AD1 14                           inc     D               ; next cell
1055+ 0AD2 00                           nop
1056+ 0AD3 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AD5 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AD7 C9                           ret                     ; return to caller
1059+ 0AD8
1060+ 0AD8              ; clear video registers in SRAM
1061+ 0AD8 21 0E 61     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0ADB AF                           xor     A               ; $00 to clean the registers
1063+ 0ADC 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0ADE 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0ADF 23                           inc     HL              ; next register
1066+ 0AE0 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0AE2 C9                           ret                     ; return to caller
1068+ 0AE3
1069+ 0AE3              ; ------------------------------------------------------------------------------
1070+ 0AE3              ; set a specific graphics mode, passed into reg. E
1071+ 0AE3 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0AE5 CB 23                        sla     E               ; multiply E by 8..
1073+ 0AE7 CB 23                        sla     E               ; so that reg. E can point..
1074+ 0AE9 CB 23                        sla     E               ; to the correct settings
1075+ 0AEB 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0AED 21 1F 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0AF0 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0AF1 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0AF3 0E 31                        ld      C,VDP_SET       ; VDP set
1080+ 0AF5 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0AF6 ED 51                        out     (C),D           ; send data to VDP
1082+ 0AF8 ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0AFA 3C                           inc     A               ; next register
1084+ 0AFB 23                           inc     HL              ; next value
1085+ 0AFC 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0AFE C9                           ret
1087+ 0AFF
1088+ 0AFF              ; ------------------------------------------------------------------------------
1089+ 0AFF              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0AFF                              ; reg. HL contains address of pattern table into VRAM
1091+ 0AFF 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B01 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B03 0E 31                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B05 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B07 ED 61                        out     (C),H           ; send high byte
1096+ 0B09 0D                           dec     C              ; VDP data mode
1097+ 0B0A 21 15 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B0D A7                           and     A               ; is it text mode (A=0)?
1099+ 0B0E 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B10 21 15 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B13 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B15 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B16 ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B18 23                           inc     HL              ; inc byte pointer
1105+ 0B19 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B1A 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B1C 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B1E C9                           ret                     ; return to caller
1109+ 0B1F
1110+ 0B1F              ;------------------------------------------------------------------------------
1111+ 0B1F              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B1F              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B1F              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B1F
1115+ 0B1F                              ; VDP register settings for a text display
1116+ 0B1F 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B20 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B21 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B22 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B23 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B24 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B25 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B26 F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B27
1125+ 0B27              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B27 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B28 C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B29 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B2A 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B2B 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B2C 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B2D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B2E 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B2F
1135+ 0B2F              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B2F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B30 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B31 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B32 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B33 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B34 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B35 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B36 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B37
1145+ 0B37              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B37 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B38 CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B39 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B3A 00                           defb    $00             ; reg.3: don't care
1150+ 0B3B 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B3C 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B3D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B3E 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B3F
1155+ 0B3F              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B3F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B40 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B41 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B42 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B43 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B44 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B45 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B46 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B47
1165+ 0B47              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B47                              ; 1st band
1167+ 0B47 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B4B 00 00 00 00
1167+ 0B4F 00 00 00 00
1167+ 0B53 00 00 00 00
1167+ 0B57 00 00 00 00
1167+ 0B5B 00 00 00 00
1167+ 0B5F 00 00 00 00
1167+ 0B63 00 00 00 00
1168+ 0B67 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B6B 0B 10 00 00
1168+ 0B6F 00 00 00 00
1168+ 0B73 00 00 00 00
1168+ 0B77 00 00 00 00
1168+ 0B7B 00 00 00 00
1168+ 0B7F 00 00 00 00
1168+ 0B83 00 00 00 00
1169+ 0B87                              ; 2nd band
1170+ 0B87 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0B8B 00 0C 00 00
1170+ 0B8F 00 01 00 00
1170+ 0B93 00 14 00 00
1170+ 0B97 06 05 06 15
1170+ 0B9B 16 07 06 15
1170+ 0B9F 16 07 06 01
1170+ 0BA3 01 07 00 00
1171+ 0BA7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BAB 00 0C 00 00
1171+ 0BAF 00 01 00 00
1171+ 0BB3 00 01 14 06
1171+ 0BB7 01 05 03 05
1171+ 0BBB 03 05 03 05
1171+ 0BBF 03 05 03 05
1171+ 0BC3 03 05 00 00
1172+ 0BC7                              ; 3rd band
1173+ 0BC7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BCB 00 0C 00 00
1173+ 0BCF 00 01 00 00
1173+ 0BD3 00 01 01 01
1173+ 0BD7 01 05 09 14
1173+ 0BDB 13 08 03 05
1173+ 0BDF 13 05 03 05
1173+ 0BE3 00 00 00 00
1174+ 0BE7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0BEB 00 0C 00 00
1174+ 0BEF 00 01 00 00
1174+ 0BF3 00 01 00 08
1174+ 0BF7 03 05 06 15
1174+ 0BFB 16 07 03 01
1174+ 0BFF 16 05 03 05
1174+ 0C03 00 00 00 00
1175+ 0C07                              ; 4th band
1176+ 0C07 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C0B 00 0C 00 00
1176+ 0C0F 00 01 00 00
1176+ 0C13 00 01 00 00
1176+ 0C17 03 05 03 05
1176+ 0C1B 03 05 03 05
1176+ 0C1F 03 05 03 05
1176+ 0C23 03 05 00 00
1177+ 0C27 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C2B 00 0C 00 00
1177+ 0C2F 00 01 04 04
1177+ 0C33 00 01 00 00
1177+ 0C37 03 05 09 14
1177+ 0C3B 13 08 09 14
1177+ 0C3F 13 08 09 01
1177+ 0C43 01 08 00 00
1178+ 0C47                              ; 5th band
1179+ 0C47 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C4B 12 11 00 00
1179+ 0C4F 00 00 00 00
1179+ 0C53 00 00 00 00
1179+ 0C57 00 00 00 00
1179+ 0C5B 00 00 00 00
1179+ 0C5F 00 00 00 00
1179+ 0C63 00 00 00 00
1180+ 0C67 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C6B 00 00 00 00
1180+ 0C6F 00 00 00 00
1180+ 0C73 00 00 00 00
1180+ 0C77 00 00 00 00
1180+ 0C7B 00 00 00 00
1180+ 0C7F 00 00 00 00
1180+ 0C83 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0C87
  78  0C87              ; incude the latest version of the PSG module
  79  0C87                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0C87              ; ------------------------------------------------------------------------------
   2+ 0C87              ; LM80C - PSG ROUTINES - 1.1
   3+ 0C87              ; ------------------------------------------------------------------------------
   4+ 0C87              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0C87              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0C87              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0C87              ; kind of warranty: you can use them at your own risk.
   8+ 0C87              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0C87              ; maintain the copyright notices, include this advice and the note to the
  10+ 0C87              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0C87              ; redistribuite them.
  12+ 0C87              ; https://www.leonardomiliani.com
  13+ 0C87              ;
  14+ 0C87              ; Please support me by visiting the following links:
  15+ 0C87              ; Main project page: https://www.leonardomiliani.com
  16+ 0C87              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0C87              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0C87              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0C87              ; ------------------------------------------------------------------------------
  20+ 0C87              ;
  21+ 0C87              ; ------------------------------------------------------------------------------
  22+ 0C87
  23+ 0C87              ;------------------------------------------------------------------------------
  24+ 0C87
  25+ 0C87              ; configure the PSG
  26+ 0C87 21 52 61     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0C8A 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0C8C AF                           xor     A               ; reset A
  29+ 0C8D 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0C8E 23                           inc     HL              ; next register
  31+ 0C8F 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0C91 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0C93 21 A5 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0C96 16 00                        ld      D,$00           ; first register
  35+ 0C98 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0C99 CD DF 0C                     call    SETSNDREG       ; select register
  37+ 0C9C 7E                           ld      A,(HL)          ; load value
  38+ 0C9D CD E4 0C                     call    WRTSNDREG       ; write to register
  39+ 0CA0 14                           inc     D               ; next register
  40+ 0CA1 23                           inc     HL              ; next value
  41+ 0CA2 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CA4 C9                           ret                     ; return to caller
  43+ 0CA5
  44+ 0CA5 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CA9 00 00 00 BF
  45+ 0CAD 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CB1 00 00 FF FF
  46+ 0CB5                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CB5
  48+ 0CB5
  49+ 0CB5              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CB5 21 CF 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CB8 C3 BE 0C                     jp      SENDSND
  52+ 0CBB 21 D7 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CBE C5           SENDSND:        push    BC
  54+ 0CBF 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CC1 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CC2 CD DF 0C                     call    SETSNDREG
  57+ 0CC5 23                           inc     HL              ; next cell
  58+ 0CC6 7E                           ld      A,(HL)          ; read value
  59+ 0CC7 CD E4 0C                     call    WRTSNDREG
  60+ 0CCA 23                           inc     HL
  61+ 0CCB 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CCD C1                           pop     BC
  63+ 0CCE C9                           ret                     ; return to caller
  64+ 0CCF
  65+ 0CCF 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CD3 05 00 0A 0F
  66+ 0CD7 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CDB 0A 00 07 BF
  67+ 0CDF
  68+ 0CDF
  69+ 0CDF              ; select register on PSG
  70+ 0CDF 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0CE1 ED 79                        out     (C),A           ; set register
  72+ 0CE3 C9                           ret                     ; return to caller
  73+ 0CE4
  74+ 0CE4              ; send data to PSG
  75+ 0CE4 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0CE6 ED 79                        out     (C),A           ; send data
  77+ 0CE8 C9                           ret                     ; return to caller
  78+ 0CE9
  79+ 0CE9              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0CE9              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0CE9              ; shut off the audio channel whose counter has reached 0.
  82+ 0CE9              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0CE9 DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0CEB DD 21 52 61                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0CEF 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0CF1 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0CF3 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0CF6 DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0CF9 7B                           ld      A,E             ; load E into A
  90+ 0CFA B2                           or      D               ; check that DE=0
  91+ 0CFB 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0CFD 1B                           dec     DE              ; no, so decrement DE
  93+ 0CFE 7B                           ld      A,E             ; reload E into A...
  94+ 0CFF DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D02 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D05 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D06 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D08                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D08                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D08                                                      ; then set 0 into its tone registers
 101+ 0D08 16 07                        ld      D,$07           ; mixer register
 102+ 0D0A 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D0C ED 51                        out     (C),D           ; set mixer register
 104+ 0D0E ED 78                        in      A,(C)           ; load current value
 105+ 0D10 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D11 ED 51                        out     (C),D           ; select mixer register
 107+ 0D13 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D15 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D17 3E 03                        ld      A,$03           ; three channels
 110+ 0D19 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D1A 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D1B 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D1D ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D1F 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D21 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D23 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D25 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D27 3C                           inc     A               ; next tone register
 119+ 0D28 ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D2A 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D2C ED 69                        out     (C),L           ; write 0 into register
 122+ 0D2E DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D30 DD 23                        inc     IX              ; ...next channel...
 124+ 0D32 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D34 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D36 DD E1                        pop     IX              ; restore IX
 127+ 0D38 C9                           ret                     ; return to caller
 128+ 0D39
 129+ 0D39              ; read a specific row of the keyboard matrix, set by A
 130+ 0D39              ; return read into A
 131+ 0D39 C5           READKBLN:       push    BC              ; store BC
 132+ 0D3A 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D3C 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D3E ED 41                        out     (C),B           ; select reg #15
 135+ 0D40 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D42 ED 79                        out     (C),A           ; activate the row
 137+ 0D44 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D46 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D48 ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D4A ED 78                        in      A,(C)           ; read register #14
 141+ 0D4C C1                           pop     BC              ; retrieve BC
 142+ 0D4D C9                           ret
 143+ 0D4E
 144+ 0D4E              ; read the keyboard matrix to look for a key pressure
 145+ 0D4E 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D50 06 07                        ld      B,$07           ; set register #7...
 147+ 0D52 ED 41                        out     (C),B           ; ...to work with
 148+ 0D54 ED 78                        in      A,(C)           ; read register #7
 149+ 0D56 CB FF                        set     7,A             ; port A set to output
 150+ 0D58 CB B7                        res     6,A             ; port B set to input
 151+ 0D5A ED 41                        out     (C),B           ; set register #7
 152+ 0D5C 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D5E ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D60                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D60 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D62 CD 39 0D                     call    READKBLN        ; read row
 157+ 0D65 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D67 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D69 21 5F 61                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D6C 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D6E 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D70 CD 39 0D                     call    READKBLN        ; read ALT row
 163+ 0D73 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D75 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D77 21 5F 61                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D7A 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0D7C 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0D7E CD 39 0D                     call    READKBLN        ; read CTRL row
 169+ 0D81 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0D83 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0D85 21 5F 61                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0D88 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0D8A 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0D8C 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0D8E 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0D90 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0D92 ED 51                        out     (C),D           ; select reg. #15
 178+ 0D94 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0D96 ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0D98 5F                           ld      E,A             ; save current line into E
 181+ 0D99 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0D9B 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0D9D ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0D9F 00                           nop
 185+ 0DA0 ED 78                        in      A,(C)           ; read register #14
 186+ 0DA2 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DA4 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DA6                              ; check control keys
 189+ 0DA6 32 59 61                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DA9 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DAA FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DAC 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DAE 3A 59 61                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DB1 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DB3 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DB5 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DB7 FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DB9 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DBB 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DBD FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DBF 3A 59 61                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DC2 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DC4 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DC6 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DC8 CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DCA CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DCC 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DCE CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DD0 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DD2 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DD4 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DD5 0F                           rrca                    ; rotate right by 1
 213+ 0DD6 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DD8 AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DD9 32 5B 61                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0DDC 32 5F 61                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0DDF 32 58 61                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0DE2 32 5C 61                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0DE5 C9                           ret                     ; ...and leave
 220+ 0DE6 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0DE8 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0DE9 CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0DEB 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0DED 3A 5F 61                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0DF0 21 09 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0DF3 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0DF5 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0DF7 21 49 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0DFA 18 10                        jr      LOADMAP         ; and load it
 230+ 0DFC FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0DFE 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E00 21 C9 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E03 18 07                        jr      LOADMAP         ; and load it
 234+ 0E05 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E07 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E09 21 89 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E0C 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E0D 48                           ld      C,B             ; move B into C and...
 239+ 0E0E CB 21                        sla     C               ; ...multiply it...
 240+ 0E10 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E12 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E14 06 00                        ld      B,$00           ; reset B
 243+ 0E16 09                           add     HL,BC           ; find the address of the current row
 244+ 0E17 50                           ld      D,B             ; reset D
 245+ 0E18 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E19 3A 5B 61                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E1C BE                           cp      (HL)            ; is it the same key?
 248+ 0E1D 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E1F 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E21 2A FE 60                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E24 ED 5B 5D 61                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E28 3A 5C 61                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E2B FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E2D 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E2F AF                           xor     A               ; clear Carry
 256+ 0E30 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E32 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E34 3A CC 5F                     ld      A,(KEYDEL)
 259+ 0E37 5F                           ld      E,A
 260+ 0E38 CD DF 4C                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E3B DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E3E 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E40 32 5C 61                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E43 2A FE 60                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E46 22 5D 61                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E49 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E4B C3 6D 0E                     jp      SENDKEY         ; send key
 268+ 0E4E AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E4F ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E51 16 00                        ld      D,$00
 271+ 0E53 3A CD 5F                     ld      A,(AUTOKE)
 272+ 0E56 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E57 CD DF 4C                     call    CMP16           ; check if interval is greater than delay
 274+ 0E5A DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E5D C3 3E 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E60 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E61 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E62 32 5C 61                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E65 ED 4B FE 60                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E69 ED 43 5D 61                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E6D 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E6E 32 5B 61                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E71 32 5A 61                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E74 32 1B 61                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E77 FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E79 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E7B CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0E7E 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0E80 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0E83 21 01 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0E86 BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0E87 CA B5 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0E8A 0C                           inc     C               ; next FN key
 294+ 0E8B 23                           inc     HL              ; next FN key code
 295+ 0E8C 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0E8E 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0E90 32 58 61                     ld      (KBDNPT),A      ; to keyboard
 298+ 0E93 3A 1A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0E96 B7                           or      A               ; is the print-on-video disabled?
 300+ 0E97 CA A0 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0E9A 3A 18 61                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0E9D B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0E9E 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EA0 AF           PUTCHRBUF:      xor     A
 305+ 0EA1 32 58 61                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EA4 3A 5A 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0EA7 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0EAA C3 B0 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0EAD CD 57 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0EB0 AF           LVKBRDCHK2:     xor     A
 311+ 0EB1 32 5F 61                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0EB4 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0EB5                              ; manage FN keys
 314+ 0EB5 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EB6 2A C8 5F                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EB9 23                           inc     HL              ; -1 means direct statement
 317+ 0EBA 7C                           ld      A,H
 318+ 0EBB B5                           or      L
 319+ 0EBC 7A                           ld      A,D             ; retrieve char
 320+ 0EBD 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EBF 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EC0 87                           add     A,A
 323+ 0EC1 87                           add     A,A
 324+ 0EC2 87                           add     A,A
 325+ 0EC3 87                           add     A,A             ; FN key number * 16
 326+ 0EC4 4F                           ld      C,A             ; move it into C
 327+ 0EC5 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EC7 21 CE 5F                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0ECA 09                           add     HL,BC           ; get correct text address
 330+ 0ECB 06 10                        ld      B,$10           ; 16 chars
 331+ 0ECD 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0ECE A7                           and     A               ; null char?
 333+ 0ECF CA B0 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0ED2 57                           ld      D,A             ; pass char into D
 335+ 0ED3 3A 1A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0ED6 B7                           or      A               ; is the print-on-video disabled?
 337+ 0ED7 CA E7 0E                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EDA 3A 18 61                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0EDD B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0EDE C4 F4 0E                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0EE1 23           CNTFNK:         inc     HL              ; next char
 342+ 0EE2 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0EE4 C3 B0 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0EE7 AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0EE8 32 58 61                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0EEB 7A                           ld      A,D             ; retrieve char
 347+ 0EEC E5                           push    HL              ; store HL
 348+ 0EED CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0EF0 E1                           pop     HL              ; retrieve HL
 350+ 0EF1 C3 E1 0E                     jp      CNTFNK          ; repeat
 351+ 0EF4 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0EF5 32 1B 61                     ld      (CHR4VID),A     ; store char for printing
 353+ 0EF8 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0EFA 32 58 61                     ld      (KBDNPT),A      ; to keyboard
 355+ 0EFD CD 57 07                     call    CHAR2VID        ; print on screen
 356+ 0F00 C9                           ret                     ; return to caller
 357+ 0F01
 358+ 0F01
 359+ 0F01              ;-----------------------------------------------------------------------
 360+ 0F01 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F05 06 16 17 18
 361+ 0F09              ;-----------------------------------------------------------------------
 362+ 0F09              ; key codes
 363+ 0F09 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F0D 20 10 71 32
 364+ 0F11 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F15 7A 73 65 34
 365+ 0F19 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F1D 63 66 74 36
 366+ 0F21 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F25 62 68 75 38
 367+ 0F29 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F2D 6D 6B 6F 30
 368+ 0F31 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F35 2E 3A 2D 1E
 369+ 0F39 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F3D 1B 3D 2B 1D
 370+ 0F41 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F45 01 02 04 18
 371+ 0F49
 372+ 0F49              ; shifted codes - not all the keys have the shifted version
 373+ 0F49 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F4D 20 10 51 22
 374+ 0F51 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F55 5A 53 45 24
 375+ 0F59 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F5D 43 46 54 26
 376+ 0F61 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F65 42 48 55 28
 377+ 0F69 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F6D 4D 4B 4F 5E
 378+ 0F71 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F75 3E 5B 5F 1E
 379+ 0F79 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0F7D 1B C6 2B 1D
 380+ 0F81 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0F85 05 06 16 17
 381+ 0F89
 382+ 0F89              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0F89 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0F8D 20 10 DE C4
 384+ 0F91 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0F95 83 82 A5 34
 385+ 0F99 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0F9D 9D A3 A8 36
 386+ 0FA1 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FA5 9E AC D5 38
 387+ 0FA9 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FAD A0 D7 87 C3
 388+ 0FB1 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FB5 C0 7B 90 1E
 389+ 0FB9 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FBD 1B D1 94 1D
 390+ 0FC1 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FC5 05 06 16 17
 391+ 0FC9
 392+ 0FC9              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FC9 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FCD 20 10 9A 32
 394+ 0FD1 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FD5 98 96 99 34
 395+ 0FD9 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 0FDD B1 AF A5 36
 396+ 0FE1 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 0FE5 B3 A9 A7 38
 397+ 0FE9 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 0FED AB B5 A4 30
 398+ 0FF1 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 0FF5 2E 3A BA 1E
 399+ 0FF9 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 0FFD 1B D4 B9 1D
 400+ 1001 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1005 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  1009
  81  1009              ; include the latest versions of the CF & DOS modules
  82  1009                  INCLUDE "../include/dos/bios-1.01.asm"
# file opened: ../include/dos/bios-1.01.asm
   1+ 1009              ; ------------------------------------------------------------------------------
   2+ 1009              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 1009              ; ------------------------------------------------------------------------------
   4+ 1009              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1009              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1009              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1009              ; kind of warranty: you can use them at your own risk.
   8+ 1009              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1009              ; maintain the copyright notices, include this advice and the note to the
  10+ 1009              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1009              ; redistribuite them.
  12+ 1009              ; https://www.leonardomiliani.com
  13+ 1009              ;
  14+ 1009              ; Please support me by visiting the following links:
  15+ 1009              ; Main project page: https://www.leonardomiliani.com
  16+ 1009              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1009              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1009              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1009              ; ------------------------------------------------------------------------------
  20+ 1009              ;
  21+ 1009              ; ------------------------------------------------------------------------------
  22+ 1009              ; Code Revision:
  23+ 1009              ; R1.0  - 20210307 - first release
  24+ 1009              ; R1.01 - 2021xxxx -
  25+ 1009              ;
  26+ 1009              ;------------------------------------------------------------------------------
  27+ 1009
  28+ 1009              ; equates for CF at port $50
  29+ 1009              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  30+ 1009              CF_ERR:         equ %01010001   ; ($51) Error (R)
  31+ 1009              CF_FTR:         equ %01010001   ; ($51) Features (W)
  32+ 1009              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  33+ 1009              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  34+ 1009              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  35+ 1009              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  36+ 1009              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  37+ 1009              CF_STAT:        equ %01010111   ; ($57) Status (R)
  38+ 1009              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  39+ 1009
  40+ 1009
  41+ 1009              ;------------------------------------------------------------------------------
  42+ 1009              ; R O U T I N E S
  43+ 1009              ;------------------------------------------------------------------------------
  44+ 1009
  45+ 1009              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  46+ 1009 CD 1F 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  47+ 100C CD 6D 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  48+ 100F D8                       ret     C               ; no card or I/O error, leave
  49+ 1010 3E 01                    ld      A,$01           ; 8-bit mode
  50+ 1012 D3 51                    out     (CF_FTR),A      ; set mode
  51+ 1014 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  52+ 1017 3E EF                    ld      A,$EF           ; command to set mode
  53+ 1019 D3 57                    out     (CF_CMD),A      ; execute command
  54+ 101B CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  55+ 101E C9                       ret                     ; return to caller
  56+ 101F
  57+ 101F
  58+ 101F              ; a NOP command, just used to wake up the CF card
  59+ 101F 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  60+ 1021 D3 51                    out     (CF_FTR),A      ; send it
  61+ 1023 3E EF                    ld      A,$EF           ; set mode command
  62+ 1025 D3 57                    out     (CF_CMD),A      ; execute NOP
  63+ 1027 C9                       ret                     ; return to caller
  64+ 1028
  65+ 1028
  66+ 1028              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  67+ 1028 DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  68+ 102A 07                       rlca                    ; copy bit #7 into the Carry
  69+ 102B DA 28 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  70+ 102E C9                       ret                     ; bit #7 cleared - return to caller
  71+ 102F
  72+ 102F
  73+ 102F              ; check that CF is ready to get commands
  74+ 102F DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  75+ 1031 CB 47                    bit     0,A             ; any error?
  76+ 1033 20 07                    jr      NZ,RETERR       ; yes, return error
  77+ 1035 E6 C0                    and     %11000000       ; check only bits #6 & #7
  78+ 1037 EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  79+ 1039 20 F4                    jr      NZ,CF_CMDRDY    ; wait
  80+ 103B C9                       ret                     ; return to caller
  81+ 103C 37           RETERR:     scf                     ; set carry flag
  82+ 103D C9                       ret                     ; return
  83+ 103E
  84+ 103E
  85+ 103E              ; wait until data is ready to be read
  86+ 103E DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  87+ 1040 CB 47                    bit     0,A             ; any error?
  88+ 1042 20 F8                    jr      NZ,RETERR       ; yes, return error
  89+ 1044 E6 88                    and     %10001000       ; check only bits #7 & #3
  90+ 1046 EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  91+ 1048 20 F4                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  92+ 104A C9                       ret                     ; return to caller
  93+ 104B
  94+ 104B
  95+ 104B              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
  96+ 104B CD 2F 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
  97+ 104E 3E 01                    ld      A,$01           ; 1 sector at a time
  98+ 1050 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
  99+ 1052 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 100+ 1055 79                       ld      A,C             ; load LBA0 byte
 101+ 1056 D3 53                    out     (CF_LBA0),A     ; send it
 102+ 1058 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 103+ 105B 78                       ld      A,B             ; load LBA1 byte
 104+ 105C D3 54                    out     (CF_LBA1),A     ; send it
 105+ 105E CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 106+ 1061 7B                       ld      A,E             ; load LBA2 byte
 107+ 1062 D3 55                    out     (CF_LBA2),A     ; send it
 108+ 1064 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 109+ 1067 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 110+ 1069 B2                       or      D               ; add LBA sector
 111+ 106A D3 56                    out     (CF_LBA3),A     ; send it
 112+ 106C C9                       ret                     ; return to caller
 113+ 106D
 114+ 106D
 115+ 106D              ; check if device is available & ready - try a bit of times, then exit with
 116+ 106D              ; error if no response, otherwise wait until device is ready
 117+ 106D              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 118+ 106D C5           CR_DEV_RDY: push    BC              ; store HL
 119+ 106E 06 00                    ld      B,$00           ; 256 tries
 120+ 1070 0E 57                    ld      C,CF_STAT       ; address of status register
 121+ 1072 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 122+ 1074 FE 40                    cp      %01000000       ; busy=0, rdy=1
 123+ 1076 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 124+ 1078 FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 125+ 107A 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 126+ 107C 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 127+ 107E 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 128+ 107F C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 129+ 1080 C9                       ret                     ; return to caller
 130+ 1081
 131+ 1081
 132+ 1081              ; put the CF into stand-by mode
 133+ 1081 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 134+ 1083 D3 56                    out 	(CF_LBA3),A     ; send configuration
 135+ 1085 3E 92                    ld      A,$92           ; standby mode
 136+ 1087 D3 57                    out     (CF_CMD),A      ; send command
 137+ 1089 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
 138+ 108C C9                       ret                     ; return to caller
 139+ 108D
 140+ 108D
 141+ 108D              ;***************************************************************************
 142+ 108D              ; CF_RD_SEC
 143+ 108D              ; Function: load a sector (512 bytes) into RAM buffer.
 144+ 108D              ;***************************************************************************
 145+ 108D CD 2F 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 146+ 1090 D8                       ret     C               ; return if error
 147+ 1091 3E 20                    ld      A,$20           ; Prepare read command
 148+ 1093 D3 57                    out     (CF_CMD),A      ; Send read command
 149+ 1095 CD 3E 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 150+ 1098 D8                       ret     C               ; return if error
 151+ 1099 DB 57                    in      A,(CF_STAT)     ; Read status
 152+ 109B E6 01                    and     %00000001       ; mask off error bit
 153+ 109D C2 8D 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 154+ 10A0              ; read CF buffer after it's been filled up by a previous command
 155+ 10A0              ; and store data into the I/O buffer
 156+ 10A0 C5           CF_RD_CMD:  push    BC              ; store BC
 157+ 10A1 E5                       push    HL              ; store HL
 158+ 10A2 2A B3 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 159+ 10A5 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 160+ 10A7 CD 3E 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 161+ 10AA 38 0A                    jr      C,CF_RD_EXIT
 162+ 10AC DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 163+ 10AE 77                       ld      (HL),A          ; store into buffer
 164+ 10AF 23                       inc     HL              ; next location
 165+ 10B0 DB 50                    in      A,(CF_DATA)     ; get another byte
 166+ 10B2 77                       ld      (HL),A          ; store it
 167+ 10B3 23                       inc     HL              ; next location
 168+ 10B4 10 F6                    djnz    CF_RD_SECT      ; repeat
 169+ 10B6 E1           CF_RD_EXIT: pop     HL              ; retrieve HL
 170+ 10B7 C1                       pop     BC              ; retrieve BC
 171+ 10B8 C9                       ret                     ; return to caller
 172+ 10B9
 173+ 10B9
 174+ 10B9              ;***************************************************************************
 175+ 10B9              ; CF_WR_SEC
 176+ 10B9              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 177+ 10B9              ;***************************************************************************
 178+ 10B9 C5           CF_WR_SEC:  push    BC              ; store BC
 179+ 10BA D5                       push    DE              ; store DE
 180+ 10BB E5                       push    HL              ; store HL
 181+ 10BC CD 4B 10                 call    CF_SETSTR       ; set sector
 182+ 10BF CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 183+ 10C2 38 1D                    jr      C,CF_WR_EXIT               ; return if error
 184+ 10C4 3E 30                    ld      A,$30           ; set write command
 185+ 10C6 D3 57                    out     (CF_CMD),A      ; send command
 186+ 10C8 CD 3E 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 187+ 10CB 38 14                    jr      C,CF_WR_EXIT    ; return if error
 188+ 10CD 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10D0 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10D2 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10D4 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10D5 D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10D7 23                       inc     HL              ; next location
 194+ 10D8 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10DA 1D                       dec     E               ; 2 cycles
 196+ 10DB 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 10DD CD 28 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 10E0 AF                       xor     A               ; clear Carry
 199+ 10E1 E1           CF_WR_EXIT: pop     HL              ; retrieve HL
 200+ 10E2 D1                       pop     DE              ; retrieve DE
 201+ 10E3 C1                       pop     BC              ; retrieve BC
 202+ 10E4 C9                       ret                     ; return to caller
 203+ 10E5
# file closed: ../include/dos/bios-1.01.asm
  83  10E5                  INCLUDE "../include/dos/dos-1.01.asm"
# file opened: ../include/dos/dos-1.01.asm
   1+ 10E5              ; ------------------------------------------------------------------------------
   2+ 10E5              ; LM80C 64K - DOS ROUTINES - R1.01
   3+ 10E5              ; ------------------------------------------------------------------------------
   4+ 10E5              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 10E5              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 10E5              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 10E5              ; kind of warranty: you can use them at your own risk.
   8+ 10E5              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 10E5              ; maintain the copyright notices, include this advice and the note to the
  10+ 10E5              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 10E5              ; redistribuite them.
  12+ 10E5              ; https://www.leonardomiliani.com
  13+ 10E5              ;
  14+ 10E5              ; Please support me by visiting the following links:
  15+ 10E5              ; Main project page: https://www.leonardomiliani.com
  16+ 10E5              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 10E5              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 10E5              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 10E5              ; ------------------------------------------------------------------------------
  20+ 10E5              ;
  21+ 10E5              ; ------------------------------------------------------------------------------
  22+ 10E5              ; Code Revision:
  23+ 10E5              ; R1.0  - 20210306 - first release
  24+ 10E5              ; R1.01 - 2021xxxx -
  25+ 10E5              ;
  26+ 10E5              ;------------------------------------------------------------------------------
  27+ 10E5
  28+ 10E5
  29+ 10E5 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.01",$00     ; disk header
  29+ 10E9 43 20 44 4F
  29+ 10ED 53 00 31 2E
  29+ 10F1 30 31 00
  30+ 10F4 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  31+ 10F6
  32+ 10F6              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  33+ 10F6              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  34+ 10F6              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  35+ 10F6              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  36+ 10F6              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  37+ 10F6              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  38+ 10F6              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  39+ 10F6              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  40+ 10F6              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  41+ 10F6              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  42+ 10F6              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  43+ 10F6              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  44+ 10F6              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  45+ 10F6              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  46+ 10F6              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  47+ 10F6
  48+ 10F6              ; *****************************************************************************
  49+ 10F6              ; D I S K    I N I T
  50+ 10F6              ; Functions: format a disk creating a fresh new file system on disk or
  51+ 10F6              ;            rewrite only the Master Sector
  52+ 10F6              ; *****************************************************************************
  53+ 10F6 3A CD 60     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  54+ 10F9 32 1E 61                 ld      (TMPBFR1),A     ; save onto another location for later use
  55+ 10FC CD 86 18                 call    CLRIOBF         ; clear I/O buffer
  56+ 10FF CD 9B 18                 call    CLRDOSBF        ; clear DOS buffer
  57+ 1102 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  58+ 1104 D3 56                    out 	(CF_LBA3),A     ; send configuration
  59+ 1106 3E EC                    ld      A,$EC           ; select "drive ID" command
  60+ 1108 D3 57                    out     (CF_CMD),A      ; send command
  61+ 110A CD 3E 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  62+ 110D CD A0 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  63+ 1110 ED 5B B1 60              ld      DE,(DOSBFR)     ; address of default conf. buffer
  64+ 1114 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  65+ 1117 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  66+ 111A 09                       add     HL,BC           ; set into HL
  67+ 111B 0E 04                    ld      C,$04           ; 4 bytes to copy
  68+ 111D ED B0                    ldir                    ; copy (DE is auto-incremented)
  69+ 111F 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  70+ 1122 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  71+ 1125 09                       add     HL,BC           ; get position of data
  72+ 1126 ED B0                    ldir                    ; copy (DE is auto-incremented)
  73+ 1128 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  74+ 112B 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  75+ 112E 09                       add     HL,BC           ; get position of data
  76+ 112F 0E 02                    ld      C,$02           ; 2 bytes to copy
  77+ 1131 ED B0                    ldir                    ; copy (DE is auto-incremented)
  78+ 1133 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  79+ 1136 01 06 00                 ld      BC,$0006        ; address of number of heads
  80+ 1139 09                       add     HL,BC           ; get position of data
  81+ 113A 0E 02                    ld      C,$02           ; 2 bytes to copy
  82+ 113C ED B0                    ldir                    ; copy (DE is auto-incremented)
  83+ 113E                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  84+ 113E ED 53 CD 60              ld      (TPBF4),DE      ; store current pointer to temp. def. conf. buffer
  85+ 1142 2A B1 60                 ld      HL,(DOSBFR)     ; load first 2 BYTES
  86+ 1145 4E                       ld      C,(HL)          ; load into AC
  87+ 1146 23                       inc     HL
  88+ 1147 7E                       ld      A,(HL)
  89+ 1148 23                       inc     HL
  90+ 1149 5E                       ld      E,(HL)          ; load into DE
  91+ 114A 23                       inc     HL
  92+ 114B 56                       ld      D,(HL)
  93+ 114C D5                       push    DE              ; move DE into IX
  94+ 114D DD E1                    pop     IX
  95+ 114F 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  96+ 1152 CD 5E 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  97+ 1155 47                       ld      B,A             ; now result is into BCIX
  98+ 1156 B1                       or      C               ; BC=$0000?
  99+ 1157 28 05                    jr      Z,DOS_FTC       ; yes, but.....
 100+ 1159 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 101+ 115C 18 0E                    jr      DOS_FT1         ; jump over
 102+ 115E DD E5        DOS_FTC:    push    IX              ; move IX into DE
 103+ 1160 D1                       pop     DE              ; now result is into BCDE
 104+ 1161 7C                       ld      A,H             ; remainder = zero?
 105+ 1162 B5                       or      L
 106+ 1163 CA 6C 11                 jp      Z,DOS_FT1       ; yes, jump over
 107+ 1166 13                       inc     DE              ; no, increment DE
 108+ 1167 7A                       ld      A,D             ; check if DE is zero
 109+ 1168 B3                       or      E
 110+ 1169 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 111+ 116B 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 112+ 116C 2A CD 60     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 113+ 116F 73                       ld      (HL),E          ; store # of entries
 114+ 1170 23                       inc     HL
 115+ 1171 72                       ld      (HL),D
 116+ 1172 23                       inc     HL
 117+ 1173 D5                       push    DE              ; store entries
 118+ 1174 EB                       ex      DE,HL           ; copy current pointer into DE
 119+ 1175 21 F4 10                 ld      HL,DSKDIRADR    ; address of directory start
 120+ 1178 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 121+ 117B ED B0                    ldir                    ; copy into buffer
 122+ 117D                          ; now we calculate the starting sector of data area
 123+ 117D E1                       pop     HL              ; entries into HL
 124+ 117E 0E 10                    ld      C,$10           ; 16 entries per sector
 125+ 1180 CD 3A 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 126+ 1183 B7                       or      A               ; remainder = 0?
 127+ 1184 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 128+ 1186 23                       inc     HL              ; increment sectors
 129+ 1187 E5           DOS_FT2:    push    HL              ; store size of directory
 130+ 1188 FD E1                    pop     IY              ; into IY
 131+ 118A 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 132+ 118B EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 133+ 118C 73                       ld      (HL),E          ; store starting of
 134+ 118D 23                       inc     HL              ; data area
 135+ 118E 72                       ld      (HL),D          ; into buffer
 136+ 118F                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 137+ 118F CD 86 18                 call    CLRIOBF         ; clear I/O buffer
 138+ 1192 21 E5 10                 ld      HL,DFSCT0       ; address of disk header string
 139+ 1195 ED 5B B3 60              ld      DE,(IOBUFF)     ; address of I/O buffer
 140+ 1199 01 0F 00                 ld      BC,$000F        ; 15 chars
 141+ 119C ED B0                    ldir                    ; copy header into buffer
 142+ 119E 2A B1 60                 ld      HL,(DOSBFR)     ; first part of configuration
 143+ 11A1 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 144+ 11A4 ED B0                    ldir                    ; copy (DE is auto-incremented)
 145+ 11A6 AF                       xor     A               ; A=$0
 146+ 11A7 12                       ld      (DE),A          ; marker at $1F
 147+ 11A8 13                       inc     DE
 148+ 11A9 CD F0 17                 call    CHKNMVAL;DOS_LDNAM       ; copy disk name into buffer
 149+ 11AC DA 73 12                 jp      C,D1ERR         ; disk name error
 150+ 11AF CD 81 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 151+ 11B2 2A B3 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 152+ 11B5 54                       ld      D,H             ; copy into DE...
 153+ 11B6 5D                       ld      E,L             ; ...for later use
 154+ 11B7 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 155+ 11BA 09                       add     HL,BC           ; ...of the I/O buffer
 156+ 11BB 3E 38                    ld      A,'8'           ; write marker "80"
 157+ 11BD 77                       ld      (HL),A          ; ...
 158+ 11BE 23                       inc     HL              ; ...
 159+ 11BF 3E 30                    ld      A,'0'           ; ...
 160+ 11C1 77                       ld      (HL),A          ; ...into last 2 locations
 161+ 11C2 EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 162+ 11C3 AF                       xor     A               ; reset A - set sector # to $00000000
 163+ 11C4 47                       ld      B,A             ; LBA0=0
 164+ 11C5 4F                       ld      C,A             ; LBA1=0
 165+ 11C6 57                       ld      D,A             ; LBA2=0
 166+ 11C7 5F                       ld      E,A             ; LBA3=0
 167+ 11C8 CD B9 10                 call    CF_WR_SEC       ; write sector to CF
 168+ 11CB DA 56 12                 jp      C,D2ERR
 169+ 11CE                          ; check if only re-writing of Master Sector was need
 170+ 11CE 3A 1E 61                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 171+ 11D1 3D                       dec     A               ; A=1?
 172+ 11D2 C8                       ret     Z               ; yes, finished job
 173+ 11D3                          ; erase directory -----------------------------
 174+ 11D3                          ; create a progress bar
 175+ 11D3 3E 0D                    ld      A,CR            ; new line
 176+ 11D5 CD 6A 23                 call    OUTC
 177+ 11D8 FD E5                    push    IY              ; copy directory's size
 178+ 11DA E1                       pop     HL              ; into HL
 179+ 11DB 01 18 00                 ld      BC,$0018        ; 24 steps
 180+ 11DE CD 3A 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 181+ 11E1 E5                       push    HL              ; store result
 182+ 11E2 DD E1                    pop     IX              ; into IX
 183+ 11E4 EB                       ex      DE,HL           ; and into DE
 184+ 11E5 3E 2D                    ld      A,'-'           ; print a progress bar
 185+ 11E7 CD 23 12                 call    DOS_FT7         ; print it
 186+ 11EA 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 187+ 11EC CD 23 12                 call    DOS_FT7         ; come back to beginning of line
 188+ 11EF FD E5                    push    IY              ; copy directory's size
 189+ 11F1 E1                       pop     HL              ; into HL
 190+ 11F2 01 01 00                 ld      BC,$0001        ; first sector of directory
 191+ 11F5 CD 86 18                 call    CLRIOBF         ; clear I/O buffer
 192+ 11F8 D5           DOS_FTA:    push    DE              ; store counter
 193+ 11F9 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 194+ 11FC CD B9 10                 call    CF_WR_SEC       ; write sector to CF
 195+ 11FF DA 1F 12                 jp      C,DOS_FT10      ; error occured
 196+ 1202 03                       inc     BC              ; next sector
 197+ 1203 2B                       dec     HL              ; decrement HL
 198+ 1204 D1                       pop     DE              ; retrieve counter
 199+ 1205 1B                       dec     DE              ; decrement counter
 200+ 1206 7B                       ld      A,E
 201+ 1207 B2                       or      D               ; check if counter is zero
 202+ 1208 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 203+ 120A 3E 2A                    ld      A,'*'           ; yes, print char
 204+ 120C CD 6A 23                 call    OUTC
 205+ 120F DD E5                    push    IX              ; re-set counter
 206+ 1211 D1                       pop     DE
 207+ 1212 7C           DOS_FT9:    ld      A,H             ; check if...
 208+ 1213 B5                       or      L               ; ...HL = 0
 209+ 1214 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 210+ 1216 3E 0D                    ld      A,CR            ; return
 211+ 1218 CD 6A 23                 call    OUTC            ; next line
 212+ 121B CD 81 10                 call    CF_STANDBY      ; set CF into stand-by mode
 213+ 121E C9                       ret
 214+ 121F D1           DOS_FT10:   pop     DE
 215+ 1220 C3 56 12                 jp      D2ERR           ; disk geometry error
 216+ 1223
 217+ 1223              ; print 24 chars
 218+ 1223 06 18        DOS_FT7:    ld      B,$18           ; 24 chars
 219+ 1225 CD 6A 23     DOS_FT8:    call    OUTC            ; move cursor
 220+ 1228 10 FB                    djnz    DOS_FT8         ; repeat
 221+ 122A C9                       ret                     ; return to caller
 222+ 122B
 223+ 122B
 224+ 122B              ; *****************************************************************************
 225+ 122B              ; D I S K    R E N A M E
 226+ 122B              ;******************************************************************************
 227+ 122B CD 86 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 228+ 122E CD 9B 18                 call    CLRDOSBF        ; clear DOS buf
 229+ 1231 11 00 00                 ld      DE,$0000        ; MSB sector
 230+ 1234 42                       ld      B,D             ; LSB sector
 231+ 1235 4A                       ld      C,D
 232+ 1236 CD 4B 10                 call    CF_SETSTR       ; set sector
 233+ 1239 CD 8D 10                 call    CF_RD_SEC       ; read sector
 234+ 123C 2A B3 60                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 235+ 123F 01 20 00                 ld      BC,$0020        ; offset for disk name
 236+ 1242 09                       add     HL,BC           ; get pointer
 237+ 1243 EB                       ex      DE,HL           ; copy pointer into DE
 238+ 1244 CD F0 17                 call    CHKNMVAL        ; copy disk name into buffer
 239+ 1247 DA 73 12                 jp      C,D1ERR         ; disk name error
 240+ 124A 11 00 00                 ld      DE,$0000        ; reset MSB sector
 241+ 124D 42                       ld      B,D             ; reset LSB sector
 242+ 124E 4A                       ld      C,D
 243+ 124F CD B9 10                 call    CF_WR_SEC       ; write sector
 244+ 1252 DA B2 16                 jp      C,WRT_ERR       ; error?
 245+ 1255 C9                       ret                     ; no, return to caller
 246+ 1256
 247+ 1256
 248+ 1256              ; *****************************************************************************
 249+ 1256              ; DOS ERRORS
 250+ 1256              ; *****************************************************************************
 251+ 1256 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 252+ 1258 18 1B                    jr      RET_ERR
 253+ 125A 3E 42        DSKFULL:    ld      A,D5            ; disk full error
 254+ 125C 18 17                    jr      RET_ERR
 255+ 125E 3E 44        DUPLERR:    ld      A,D6            ; duplicate file name
 256+ 1260 18 13                    jr      RET_ERR
 257+ 1262 3E 3A        NAMERR:     ld      A,D1            ; file name error
 258+ 1264 18 0F                    jr      RET_ERR
 259+ 1266 3E 48        FLNTFND:    ld      A,D8            ; file not found
 260+ 1268 18 0B                    jr      RET_ERR
 261+ 126A 3E 40        LODERR:     ld      A,D4            ; generic load error
 262+ 126C 18 07                    jr      RET_ERR
 263+ 126E 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 264+ 1270 C3 75 12                 jp      RET_ERR
 265+ 1273 3E 3A        D1ERR:      ld      A,D1            ; name string error
 266+ 1275 32 B5 60     RET_ERR:    ld      (DOSER),A       ; store DOS error
 267+ 1278 CD 81 10                 call    CF_STANDBY      ; set CF into stand-by
 268+ 127B 37                       scf                     ; set Carry for error
 269+ 127C C9                       ret                     ; return to caller
 270+ 127D
 271+ 127D              ; *****************************************************************************
 272+ 127D              ; L I S T    F I L E S
 273+ 127D              ; Function: print details of disk and list files
 274+ 127D              ; Input: D: $00=only disk details; $01=file list, too
 275+ 127D              ; *****************************************************************************
 276+ 127D 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 276+ 1281 20 6E 61 6D
 276+ 1285 65 3A 20 00
 277+ 1289 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 277+ 128D 74 6F 72 73
 277+ 1291 3A 20 00
 278+ 1294 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 278+ 1298 6F 77 65 64
 278+ 129C 20 66 69 6C
 278+ 12A0 65 73 3A 20
 278+ 12A4 00
 279+ 12A5 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 279+ 12A9 65 28 73 29
 279+ 12AD 0D 00
 280+ 12AF CD B8 17     LST_FILES:  call    CHKDSKVAL       ; check DOS version
 281+ 12B2 DA 6E 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 282+ 12B5 D5                       push    DE              ; store D
 283+ 12B6 01 00 00                 ld      BC,$0000        ; point to sector #0
 284+ 12B9 11 00 00                 ld      DE,$0000
 285+ 12BC CD 4B 10                 call    CF_SETSTR       ; set sector
 286+ 12BF CD 8D 10                 call    CF_RD_SEC       ; read sector
 287+ 12C2 21 7D 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 288+ 12C5 CD 41 2F                 call    PRS             ; print it
 289+ 12C8 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 290+ 12CB 11 20 00                 ld      DE,$0020        ; position of disk name
 291+ 12CE 19                       add     HL,DE           ; get address
 292+ 12CF 06 10                    ld      B,$10           ; 16 chars
 293+ 12D1 7E           INPR1:      ld      A,(HL)          ; load char
 294+ 12D2 CD 6A 23                 call    OUTC            ; print it
 295+ 12D5 23                       inc     HL
 296+ 12D6 10 F9                    djnz    INPR1           ; repeat
 297+ 12D8 3E 0D                    ld      A,CR
 298+ 12DA CD 6A 23                 call    OUTC            ; carriage return
 299+ 12DD D1                       pop     DE              ; retrieve D
 300+ 12DE DD 21 00 00              ld      IX,$0000        ; reset file counter
 301+ 12E2 7A                       ld      A,D
 302+ 12E3 B7                       or      A               ; is D=0?
 303+ 12E4 CA A3 13                 jp      Z,PNTSTATS      ; yes, jump over
 304+ 12E7                          ; print list of files
 305+ 12E7 2A B3 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 306+ 12EA 11 0F 00                 ld      DE,$000F        ; point to details of disk
 307+ 12ED 19                       add     HL,DE           ; find address
 308+ 12EE ED 5B B1 60              ld      DE,(DOSBFR)     ; store into DOS buffer
 309+ 12F2 01 20 00                 ld      BC,$0020        ; 32 bytes
 310+ 12F5 ED B0                    ldir                    ; copy
 311+ 12F7 11 00 00                 ld      DE,$0000        ; beginning...
 312+ 12FA 01 01 00                 ld      BC,$0001        ; ...of directory
 313+ 12FD CD 4B 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 314+ 1300 CD 8D 10                 call    CF_RD_SEC       ; read sector
 315+ 1303 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 316+ 1305 FD 2A B3 60              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 317+ 1309 FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 318+ 130C B7                       or      A               ; is it an empty entry ($00)?
 319+ 130D 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 320+ 130F FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 321+ 1311 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 322+ 1313 C5                       push    BC              ; this is a valid entry - so, store BC
 323+ 1314 FD E5                    push    IY              ; store IY
 324+ 1316 E5                       push    HL              ; store HL
 325+ 1317 D5                       push    DE              ; store DE
 326+ 1318 DD E5                    push    IX              ; store IX
 327+ 131A 06 10                    ld      B,$10           ; 16 chars to read and print
 328+ 131C FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 329+ 131F CD 6A 23                 call    OUTC            ; print char
 330+ 1322 FD 23                    inc     IY              ; next char
 331+ 1324 10 F6                    djnz    LSTFILES3       ; repeat
 332+ 1326 3E 20                    ld      A,SPC
 333+ 1328 CD 6A 23                 call    OUTC            ; print space
 334+ 132B FD 7E 00                 ld      A,(IY)          ; file type
 335+ 132E D6 80                    sub     $80             ; types start from $80
 336+ 1330 B7                       or      A               ; BAS type ($00)?
 337+ 1331 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 338+ 1333 21 E7 13                 ld      HL,FILETP       ; print "BAS"
 339+ 1336 18 0B                    jr      LSTFILESPR
 340+ 1338 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 341+ 1339 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 342+ 133B 21 EC 13                 ld      HL,FILETP+5     ; print "BIN "
 343+ 133E 18 03                    jr      LSTFILESPR
 344+ 1340 21 F1 13     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 345+ 1343 CD 41 2F     LSTFILESPR: call    PRS
 346+ 1346 11 00 00                 ld      DE,$0000        ; MSB = $0000
 347+ 1349 01 08 00                 ld      BC,$0008
 348+ 134C FD 09                    add     IY,BC           ; point to file size in bytes
 349+ 134E FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 350+ 1351 FD 23                    inc     IY
 351+ 1353 FD 46 00                 ld      B,(IY)          ; then MSB
 352+ 1356 C5                       push    BC              ; copy...
 353+ 1357 DD E1                    pop     IX              ; ...into IX
 354+ 1359 CD 2C 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 355+ 135C 3E 0D                    ld      A,CR
 356+ 135E CD 6A 23                 call    OUTC            ; print carriage return
 357+ 1361 DD E1        LSTFILES8:  pop     IX
 358+ 1363 D1                       pop     DE
 359+ 1364 E1                       pop     HL
 360+ 1365 FD E1                    pop     IY              ; retrieve IY
 361+ 1367 C1                       pop     BC              ; retrieve BC
 362+ 1368 DD 23                    inc     IX              ; increment file counter
 363+ 136A CD D3 25     LSTFILES6:  call    TSTBRK          ; Test for break key
 364+ 136D CD D6 24                 call    TSTSPC          ; test for space
 365+ 1370 C5                       push    BC              ; store sector counter
 366+ 1371 01 20 00                 ld      BC,$0020        ; dir entry size
 367+ 1374 FD 09                    add     IY,BC           ; next entry in current sector
 368+ 1376 C1                       pop     BC              ; retrieve sector counter
 369+ 1377 2D                       dec     L               ; decrement entry counter
 370+ 1378 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 371+ 137A 03           LSTFILES5:  inc     BC              ; increment sector counter
 372+ 137B 78                       ld      A,B             ; check if BC=$0000
 373+ 137C B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 374+ 137D 28 14                    jr      Z,LSTFILES7     ; yes, exit
 375+ 137F D5                       push    DE              ; store MSB of sector pointer
 376+ 1380 2A B1 60                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 377+ 1383 11 0E 00                 ld      DE,$000E        ; point to data area
 378+ 1386 19                       add     HL,DE           ; find address in memory
 379+ 1387 5E                       ld      E,(HL)          ; load data area sector...
 380+ 1388 23                       inc     HL
 381+ 1389 56                       ld      D,(HL)          ; ...into DE
 382+ 138A 60                       ld      H,B             ; copy current sector
 383+ 138B 69                       ld      L,C             ; into HL
 384+ 138C CD DF 4C                 call    CMP16           ; is current sector < data area sector?
 385+ 138F D1                       pop     DE              ; retrieve MSB of sector pointer
 386+ 1390 DA FD 12                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 387+ 1393 11 00 00     LSTFILES7:  ld      DE,$0000
 388+ 1396 DD E5                    push    IX
 389+ 1398 CD 2C 18                 call    PRN16ASCIX      ; print number of files from DEIX
 390+ 139B 21 A5 12                 ld      HL,TLFLSTX
 391+ 139E CD 41 2F                 call    PRS             ; print "file(s)"
 392+ 13A1 DD E1                    pop     IX
 393+ 13A3 21 89 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 394+ 13A6 CD 41 2F                 call    PRS             ; print message
 395+ 13A9 2A B1 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 396+ 13AC DD E5                    push    IX              ; store number of entries
 397+ 13AE CD 22 18                 call    PRN32ASCII      ; print size
 398+ 13B1 3E 2F                    ld      A,'/'
 399+ 13B3 CD 6A 23                 call    OUTC            ; print a "/""
 400+ 13B6 D1                       pop     DE              ; copy number of entries into DE
 401+ 13B7 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 402+ 13BA CD 04 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 403+ 13BD ED 53 C7 60              ld      (TPBF1),DE      ; store results
 404+ 13C1 22 C9 60                 ld      (TPBF2),HL
 405+ 13C4 21 C7 60                 ld      HL,TPBF1        ; print results
 406+ 13C7 CD 22 18                 call    PRN32ASCII
 407+ 13CA 21 94 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 408+ 13CD CD 41 2F                 call    PRS             ; print message
 409+ 13D0 2A B1 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 410+ 13D3 01 0A 00                 ld      BC,$000A        ; address of allowed files
 411+ 13D6 09                       add     HL,BC           ; find pointer
 412+ 13D7 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 413+ 13DA CD 26 18                 call    PRN16ASCII      ; print max files
 414+ 13DD 3E 0D                    ld      A,CR
 415+ 13DF CD 6A 23                 call    OUTC            ; print a carriage return
 416+ 13E2 CD 81 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 417+ 13E5 AF                       xor     A               ; clear Carry flag
 418+ 13E6 C9                       ret                     ; return to caller
 419+ 13E7 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 419+ 13EB 00
 420+ 13EC 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 420+ 13F0 00
 421+ 13F1 3F 3F 3F 20              defb    "??? ",0        ; unkown
 421+ 13F5 00
 422+ 13F6
 423+ 13F6
 424+ 13F6              ; *****************************************************************************
 425+ 13F6              ; S A V E    F I L E
 426+ 13F6              ; save current BASIC program onto a file
 427+ 13F6              ; *****************************************************************************
 428+ 13F6 CD 86 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 429+ 13F9 CD B8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 430+ 13FC DA 6E 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 431+ 13FF 2A B3 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 432+ 1402 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 433+ 1405 09                       add     HL,BC           ; get address
 434+ 1406 CD 1D 18                 call    HL2DE           ; get entries into DE
 435+ 1409 ED 53 BC 60              ld      (NTR_NBR),DE    ; store
 436+ 140D CD 1D 18                 call    HL2DE           ; get start of directory into DE
 437+ 1410 ED 53 B6 60              ld      (DIR_STRT),DE   ; store
 438+ 1414 CD 1D 18                 call    HL2DE           ; get start of data area into DE
 439+ 1417 ED 53 B8 60              ld      (DAT_STRT),DE   ; store
 440+ 141B CD 86 18                 call    CLRIOBF         ; clear IO buffer
 441+ 141E CD 9B 18                 call    CLRDOSBF        ; clear DOS buffer
 442+ 1421 ED 5B B1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 443+ 1425 CD F0 17                 call    CHKNMVAL        ; check and copy file name
 444+ 1428 DA 62 12                 jp      C,NAMERR        ; if Carry, file name error
 445+ 142B CD B7 16                 call    FILE_EXIST      ; check for name already present in dir
 446+ 142E DA 5E 12                 jp      C,DUPLERR       ; name is present - error
 447+ 1431 CD 23 17                 call    FNDFREDIR       ; find a free entry in the directory
 448+ 1434 DA 5A 12                 jp      C,DSKFULL       ; no entry, disk full error
 449+ 1437 3A CD 60                 ld      A,(TPBF4)       ; check what to save
 450+ 143A FE 80                    cp      $80             ; BASIC program?
 451+ 143C C2 4B 14                 jp      NZ,SAVFL3       ; no, jump over
 452+ 143F                          ; BASIC area to save starts at PROGND and ends at (PROGND)
 453+ 143F 2A 64 61                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 454+ 1442 11 64 61                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 455+ 1445 ED 53 CF 60              ld      (SRTMEM),DE     ; copy DE
 456+ 1449 18 08                    jr      SAVFL1
 457+ 144B 2A D1 60     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 458+ 144E 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 459+ 144F ED 5B CF 60              ld      DE,(SRTMEM)     ; DE <= start of portion
 460+ 1453                          ; compute how many sectors/blocks are needed to save file
 461+ 1453 AF           SAVFL1:     xor     A               ; reset Carry
 462+ 1454 ED 52                    sbc     HL,DE           ; get how many bytes to save
 463+ 1456 22 BE 60                 ld      (BYT_SIZ),HL    ; store into memory
 464+ 1459 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 465+ 145C 7C                       ld      A,H             ; move lenght...
 466+ 145D 4D                       ld      C,L             ; ...into AC
 467+ 145E CD 49 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 468+ 1461 7C                       ld      A,H             ; check if...
 469+ 1462 B5                       or      L               ; ...remainder (HL) is 0
 470+ 1463 28 01                    jr      Z,SAVFL6        ; yes, jump over
 471+ 1465 03                       inc     BC              ; no, so we need another sector
 472+ 1466 79           SAVFL6:     ld      A,C
 473+ 1467 32 C0 60                 ld      (SCT_SIZ),A     ; store into memory
 474+ 146A              SAVFL7:     ; start saving on disk
 475+ 146A 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 476+ 146D ED 4B BA 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 477+ 1471 CD 4B 10                 call    CF_SETSTR       ; set sector to read
 478+ 1474 CD 8D 10                 call    CF_RD_SEC       ; read sector
 479+ 1477 ED 5B BC 60              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 480+ 147B 7B                       ld      A,E             ; load entry LSB into A
 481+ 147C E6 0F                    and     %00001111       ; be sure to get only low nibble
 482+ 147E 87                       add     A,A             ; multiply times 32
 483+ 147F 87                       add     A,A
 484+ 1480 87                       add     A,A
 485+ 1481 87                       add     A,A
 486+ 1482 87                       add     A,A
 487+ 1483 4F                       ld      C,A             ; copy into C
 488+ 1484 06 00                    ld      B,$00           ; reset B
 489+ 1486                          ; set name
 490+ 1486 2A B3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 491+ 1489 09                       add     HL,BC           ; add offset to get address of entry
 492+ 148A ED 5B B1 60              ld      DE,(DOSBFR)     ; pointer to file name
 493+ 148E 01 10 00                 ld      BC,$0010        ; 16 chars
 494+ 1491 EB                       ex      DE,HL           ; move source into HL and destination into DE
 495+ 1492 ED B0                    ldir                    ; copy file name
 496+ 1494 EB                       ex      DE,HL           ; move current buffer pointer into HL
 497+ 1495 3A CD 60                 ld      A,(TPBF4)       ; load the type of file
 498+ 1498 77                       ld      (HL),A          ; store it
 499+ 1499 23                       inc     HL
 500+ 149A AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 501+ 149B 77                       ld      (HL),A
 502+ 149C 23                       inc     HL
 503+ 149D ED 5B BC 60              ld      DE,(NTR_NBR)    ; reload entry number
 504+ 14A1 CD 18 18                 call    DE2HL           ; store entry into buffer
 505+ 14A4 E5                       push    HL              ; store pointer
 506+ 14A5 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 507+ 14A8 CD 04 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 508+ 14AB ED 4B B8 60              ld      BC,(DAT_STRT)   ; load start of data
 509+ 14AF 09                       add     HL,BC           ; add sector of data area
 510+ 14B0 30 01                    jr      NC,SAVFL9       ; overflow?
 511+ 14B2 13                       inc     DE              ; yes, increment DE
 512+ 14B3 ED 53 C1 60  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 513+ 14B7 22 C3 60                 ld      (LSB_SCT),HL    ; store LSB of sector
 514+ 14BA E1                       pop     HL              ; retrieve pointer
 515+ 14BB CD 18 18                 call    DE2HL           ; also copy MSB of sector into entry
 516+ 14BE ED 5B C3 60              ld      DE,(LSB_SCT)    ; retrieve LSB
 517+ 14C2 CD 18 18                 call    DE2HL           ; also copy LSB of sector into entry
 518+ 14C5 ED 5B BE 60              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 519+ 14C9 CD 18 18                 call    DE2HL           ; copy file size into buffer
 520+ 14CC 3A C0 60                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 521+ 14CF 77                       ld      (HL),A          ; copy into buffer
 522+ 14D0 23                       inc     HL              ; next location
 523+ 14D1 ED 5B CF 60              ld      DE,(SRTMEM)     ; start of address of file in RAM
 524+ 14D5 CD 18 18                 call    DE2HL           ; copy into buffer
 525+ 14D8 06 03                    ld      B,$03           ; remaining chars...
 526+ 14DA AF                       xor     A               ; ...set to $00
 527+ 14DB 77           SAVFL2:     ld      (HL),A          ; reset byte
 528+ 14DC 23                       inc     HL              ; next cell
 529+ 14DD 10 FC                    djnz    SAVFL2          ; repeat
 530+ 14DF                          ; save entry into directory
 531+ 14DF 11 00 00                 ld      DE,$0000        ; block 0
 532+ 14E2 ED 4B BA 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 533+ 14E6 CD B9 10                 call    CF_WR_SEC       ; write new entry into directory
 534+ 14E9 DA 56 12                 jp      C,D2ERR         ; error occured
 535+ 14EC CD 86 18                 call    CLRIOBF         ; clear I/O buffer
 536+ 14EF                          ; start saving RAM
 537+ 14EF ED 5B CF 60              ld      DE,(SRTMEM)     ; load start of RAM
 538+ 14F3 ED 53 C5 60              ld      (RAM_PTR),DE    ; store
 539+ 14F7 CD 86 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 540+ 14FA 2A BE 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 541+ 14FD 11 00 02                 ld      DE,$0200        ; are they < 512?
 542+ 1500 CD DF 4C                 call    CMP16
 543+ 1503 30 04                    jr      NC,SAVFL4       ; no, jump over
 544+ 1505 ED 5B BE 60              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 545+ 1509 4B           SAVFL4:     ld      C,E             ; bytes to copy
 546+ 150A 42                       ld      B,D             ; into BC
 547+ 150B 2A C5 60                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 548+ 150E ED 5B B3 60              ld      DE,(IOBUFF)     ; load start of I/O buffer
 549+ 1512 ED B0                    ldir                    ; copy data
 550+ 1514 ED 5B C1 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 551+ 1518 ED 4B C3 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 552+ 151C                          ;call    CF_SETSTR       ; set sector
 553+ 151C CD B9 10                 call    CF_WR_SEC       ; write sector
 554+ 151F DA B2 16                 jp      C,WRT_ERR
 555+ 1522 21 C0 60                 ld      HL,SCT_SIZ      ; sector counter
 556+ 1525 35                       dec     (HL)            ; copied all the sectors?
 557+ 1526 CA 55 15                 jp      Z,SAVFLEXT      ; yes, exit
 558+ 1529 2A C5 60     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 559+ 152C 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 560+ 152F 19                       add     HL,DE           ; calculate next starting address
 561+ 1530 22 C5 60                 ld      (RAM_PTR),HL    ; store next block
 562+ 1533 AF                       xor     A               ; reset Carry
 563+ 1534 2A BE 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 564+ 1537 ED 52                    sbc     HL,DE           ; subtract copied bytes
 565+ 1539 22 BE 60                 ld      (BYT_SIZ),HL    ; store left bytes
 566+ 153C ED 4B C3 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 567+ 1540 03                       inc     BC              ; next sector
 568+ 1541 78                       ld      A,B             ; BC=$0000?
 569+ 1542 B1                       or      C
 570+ 1543 20 09                    jr      NZ,SAVFL12      ; no, jump over
 571+ 1545 ED 5B C1 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 572+ 1549 13                       inc     DE              ; increment DE
 573+ 154A ED 53 C1 60              ld      (MSB_SCT),DE    ; store new MSB of sector
 574+ 154E ED 43 C3 60  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 575+ 1552 C3 F7 14                 jp      SAVFL10         ; repeat
 576+ 1555 CD 81 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 577+ 1558 AF                       xor     A               ; clear Carry flag
 578+ 1559 C9                       ret                     ; return to caller
 579+ 155A
 580+ 155A
 581+ 155A              ; *****************************************************************************
 582+ 155A              ; F I L E    L O A D
 583+ 155A              ; load a file from the disk into the memory
 584+ 155A              ; *****************************************************************************
 585+ 155A CD 86 18     LODFILE:    call    CLRIOBF         ; clear I/O
 586+ 155D CD B8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 587+ 1560 DA 6E 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 588+ 1563 2A B3 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 589+ 1566 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 590+ 1569 09                       add     HL,BC           ; get address
 591+ 156A CD 1D 18                 call    HL2DE           ; get entries into DE
 592+ 156D ED 53 BC 60              ld      (NTR_NBR),DE    ; store
 593+ 1571 CD 86 18                 call    CLRIOBF         ; clear IO buffer
 594+ 1574 CD 9B 18                 call    CLRDOSBF        ; clear DOS buffer
 595+ 1577 ED 5B B1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 596+ 157B CD F0 17                 call    CHKNMVAL        ; check and copy file name
 597+ 157E DA 62 12                 jp      C,NAMERR        ; if Carry, file name error
 598+ 1581 CD B7 16                 call    FILE_EXIST      ; check if file exists
 599+ 1584 D2 66 12                 jp      NC,FLNTFND      ; file not found - error
 600+ 1587 DD E5                    push    IX              ; copy pointer to file...
 601+ 1589 E1                       pop     HL              ; ...into HL
 602+ 158A 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 603+ 158D 09                       add     HL,BC           ; ...by getting pointer to file details
 604+ 158E 7E                       ld      A,(HL)          ; load file type
 605+ 158F FE 80                    cp      $80             ; 'BAS' type?
 606+ 1591 28 0C                    jr      Z,LDFL4         ; yes, jump over
 607+ 1593 FE 81                    cp      $81             ; 'BIN' type?
 608+ 1595 C2 6A 12                 jp      NZ,LODERR       ; no, raise error
 609+ 1598 3A CD 60                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 610+ 159B B7                       or      A               ; did the user set this?
 611+ 159C CA 6A 12                 jp      Z,LODERR        ; no, raise an error
 612+ 159F 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 613+ 15A1 09                       add     HL,BC           ; point to starting sector
 614+ 15A2 11 C1 60                 ld      DE,MSB_SCT      ; point to store sector address of file
 615+ 15A5 ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 616+ 15A7 11 BE 60                 ld      DE,BYT_SIZ      ; point to store size of file
 617+ 15AA 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 618+ 15AD ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 619+ 15AF 11 64 61                 ld      DE,PROGND       ; load start of BASIC RAM
 620+ 15B2 3A CD 60                 ld      A,(TPBF4)       ; check where to save the data from
 621+ 15B5 B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 622+ 15B6 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 623+ 15B8 5E                       ld      E,(HL)          ; no, load RAM address from disk - LSB...
 624+ 15B9 23                       inc     HL
 625+ 15BA 56                       ld      D,(HL)          ; ...then MSB
 626+ 15BB ED 53 C5 60  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 627+ 15BF                          ; start loading from disk
 628+ 15BF CD 86 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 629+ 15C2 ED 5B C1 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 630+ 15C6 ED 4B C3 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 631+ 15CA CD 4B 10                 call    CF_SETSTR       ; set sector
 632+ 15CD CD 8D 10                 call    CF_RD_SEC       ; read sector
 633+ 15D0 2A BE 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 634+ 15D3 11 00 02                 ld      DE,$0200        ; are they < 512?
 635+ 15D6 CD DF 4C                 call    CMP16
 636+ 15D9 30 04                    jr      NC,LDFL3        ; no, jump over
 637+ 15DB ED 5B BE 60              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 638+ 15DF 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 639+ 15E0 42                       ld      B,D             ; ...into BC
 640+ 15E1 2A B3 60                 ld      HL,(IOBUFF)     ; point to I/O buffer
 641+ 15E4 ED 5B C5 60              ld      DE,(RAM_PTR)    ; point to RAM where to save
 642+ 15E8 ED B0                    ldir                    ; copy data
 643+ 15EA 21 C0 60                 ld      HL,SCT_SIZ      ; sector counter
 644+ 15ED 35                       dec     (HL)            ; copied all the sectors?
 645+ 15EE CA 1D 16                 jp      Z,LDFLEX        ; yes, exit
 646+ 15F1 2A C5 60                 ld      HL,(RAM_PTR)    ; pointer to RAM
 647+ 15F4 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 648+ 15F7 19                       add     HL,DE           ; calculate next starting address
 649+ 15F8 22 C5 60                 ld      (RAM_PTR),HL    ; store next block
 650+ 15FB AF                       xor     A               ; reset Carry
 651+ 15FC 2A BE 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 652+ 15FF ED 52                    sbc     HL,DE           ; subtract copied bytes
 653+ 1601 22 BE 60                 ld      (BYT_SIZ),HL    ; store left bytes
 654+ 1604 ED 4B C3 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 655+ 1608 03                       inc     BC              ; next sector
 656+ 1609 78                       ld      A,B             ; BC=$0000?
 657+ 160A B1                       or      C
 658+ 160B 20 09                    jr      NZ,LDFL5        ; no, jump over
 659+ 160D ED 5B C1 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 660+ 1611 13                       inc     DE              ; increment DE
 661+ 1612 ED 53 C1 60              ld      (MSB_SCT),DE    ; store new MSB of sector
 662+ 1616 ED 43 C3 60  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 663+ 161A C3 BF 15                 jp      LDFL2           ; repeat
 664+ 161D CD 81 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 665+ 1620 AF                       xor     A               ; clear Carry flag
 666+ 1621 C9                       ret                     ; return to caller
 667+ 1622
 668+ 1622
 669+ 1622              ; *****************************************************************************
 670+ 1622              ; F I L E    E R A S E
 671+ 1622              ; erase a file from disk, freeing its block
 672+ 1622              ; *****************************************************************************
 673+ 1622 CD 86 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 674+ 1625 CD B8 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 675+ 1628 DA 6E 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 676+ 162B 2A B3 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 677+ 162E 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 678+ 1631 09                       add     HL,BC           ; get address
 679+ 1632 CD 1D 18                 call    HL2DE           ; get entries into DE
 680+ 1635 ED 53 BC 60              ld      (NTR_NBR),DE    ; store
 681+ 1639 CD 86 18                 call    CLRIOBF         ; clear IO buffer
 682+ 163C CD 9B 18                 call    CLRDOSBF        ; clear DOS buffer
 683+ 163F ED 5B B1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 684+ 1643 CD F0 17                 call    CHKNMVAL        ; check and copy file name
 685+ 1646 DA 62 12                 jp      C,NAMERR        ; if Carry, file name error
 686+ 1649 CD B7 16                 call    FILE_EXIST      ; check if file exists
 687+ 164C D2 66 12                 jp      NC,FLNTFND      ; file not found - error
 688+ 164F DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 689+ 1652 DD 56 15                 ld      D,(IX+$15)
 690+ 1655 DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 691+ 1658 DD 46 17                 ld      B,(IX+$17)
 692+ 165B ED 53 C1 60              ld      (MSB_SCT),DE    ; store DE
 693+ 165F ED 43 C3 60              ld      (LSB_SCT),BC    ; store BC
 694+ 1663 DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 695+ 1666 32 C0 60                 ld      (SCT_SIZ),A     ; store it
 696+ 1669 3E 7F                    ld      A,$7F           ; marker for file deleted
 697+ 166B DD 77 00                 ld      (IX),A          ; set file as deleted (quick erase)
 698+ 166E 3A CD 60                 ld      A,(TPBF4)       ; check for quick or full delete
 699+ 1671 B7                       or      A               ; A=0 quick erase
 700+ 1672 28 0A                    jr      Z,FIL_ERA5      ; jump if quick erase
 701+ 1674 AF                       xor     A               ; clear A
 702+ 1675 06 20                    ld      B,$20           ; full erase - clean entry (32 cells)
 703+ 1677 DD 77 00     FIL_ERA6:   ld      (IX),A          ; reset cell
 704+ 167A DD 23                    inc     IX              ; next cell
 705+ 167C 10 F9                    djnz    FIL_ERA6        ; repeat
 706+ 167E ED 5B C9 60  FIL_ERA5:   ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 707+ 1682 ED 4B CB 60              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 708+ 1686 CD B9 10                 call    CF_WR_SEC       ; write sector
 709+ 1689 38 27                    jr      C,WRT_ERR
 710+ 168B 3A CD 60                 ld      A,(TPBF4)       ; check for quick or full delete
 711+ 168E B7                       or      A               ; if A=0 then quick erase
 712+ 168F 28 1C                    jr      Z,FIL_ERA3      ; yes, leave
 713+ 1691 CD 86 18                 call    CLRIOBF         ; no, full delete - clear I/O buffer
 714+ 1694 ED 5B C1 60              ld      DE,(MSB_SCT)    ; load MSB of 1st sector of file block
 715+ 1698 ED 4B C3 60              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 716+ 169C 21 C0 60                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 717+ 169F CD B9 10     FIL_ERA1:   call    CF_WR_SEC       ; erase sector
 718+ 16A2 38 0E                    jr      C,WRT_ERR
 719+ 16A4 03                       inc     BC              ; next sector
 720+ 16A5 78                       ld      A,B             ; is LSB rolled back to 0?
 721+ 16A6 B1                       or      C
 722+ 16A7 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 723+ 16A9 13                       inc     DE              ; yes, increment MSB
 724+ 16AA 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 725+ 16AB 20 F2                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 726+ 16AD CD 81 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 727+ 16B0 AF                       xor     A               ; clear Carry
 728+ 16B1 C9                       ret
 729+ 16B2 CD 81 10     WRT_ERR:    call    CF_STANDBY
 730+ 16B5 37                       scf
 731+ 16B6 C9                       ret
 732+ 16B7
 733+ 16B7
 734+ 16B7              ; *****************************************************************************
 735+ 16B7              ; F I L E    C H E C K
 736+ 16B7              ; check if file name already exists in directory
 737+ 16B7              ; file name must be stored from (DOSBFR) for 16 chars
 738+ 16B7              ; *****************************************************************************
 739+ 16B7 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 740+ 16BA 01 01 00                 ld      BC,$0001        ; ...of directory
 741+ 16BD FD 2A BC 60              ld      IY,(NTR_NBR)    ; load max entries
 742+ 16C1 CD 4B 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 743+ 16C4 CD 8D 10                 call    CF_RD_SEC       ; read sector
 744+ 16C7 DD 2A B3 60  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 745+ 16CB 2E 10                    ld      L,$10           ; reset entry counter
 746+ 16CD DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 747+ 16D0 B7                       or      A               ; is it $00 (empty entry)?
 748+ 16D1 CA 01 17                 jp      Z,CHKSTNM10     ; yes, jump over
 749+ 16D4 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 750+ 16D6 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 751+ 16D8 22 C7 60                 ld      (TPBF1),HL      ; store HL
 752+ 16DB ED 53 C9 60              ld      (TPBF2),DE      ; store DE
 753+ 16DF ED 43 CB 60              ld      (TPBF3),BC      ; store BC
 754+ 16E3 DD E5                    push    IX              ; copy IX...
 755+ 16E5 E1                       pop     HL              ; ...into HL
 756+ 16E6 ED 5B B1 60              ld      DE,(DOSBFR)     ; beginning of name file
 757+ 16EA 06 10                    ld      B,$10           ; 16 chars to check
 758+ 16EC 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 759+ 16ED ED A1                    cpi                     ; compare with name from user
 760+ 16EF 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 761+ 16F1 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 762+ 16F2 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 763+ 16F4 18 2B                    jr      FLEXST          ; file exists in dir
 764+ 16F6 2A C7 60     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 765+ 16F9 ED 5B C9 60              ld      DE,(TPBF2)      ; retrieve DE
 766+ 16FD ED 4B CB 60              ld      BC,(TPBF3)      ; retrieve sector counter
 767+ 1701 FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 768+ 1703 E5                       push    HL              ; preserve current entry
 769+ 1704 FD E5                    push    IY              ; copy max allowed files...
 770+ 1706 E1                       pop     HL              ; ...into HL
 771+ 1707 7C                       ld      A,H             ; chech if entries...
 772+ 1708 B5                       or      L               ; ...are finished
 773+ 1709 E1                       pop     HL              ; (retrieve current entry)
 774+ 170A 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 775+ 170C C5                       push    BC              ; store bc
 776+ 170D 01 20 00                 ld      BC,$0020        ; dir entry size
 777+ 1710 DD 09                    add     IX,BC           ; next entry in current sector
 778+ 1712 C1                       pop     BC              ; retrieve BC
 779+ 1713 2D                       dec     L               ; decrement entry counter
 780+ 1714 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 781+ 1716 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 782+ 1717 79                       ld      A,C             ; check if...
 783+ 1718 B0                       or      B               ; BC=$0000?
 784+ 1719 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 785+ 171B 13                       inc     DE              ; yes, increment DE (MSB)
 786+ 171C C3 C1 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 787+ 171F AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 788+ 1720 C9                       ret                     ; return
 789+ 1721 37           FLEXST:     scf                     ; file is present - set Carry flag for error
 790+ 1722 C9                       ret
 791+ 1723
 792+ 1723
 793+ 1723              ; *****************************************************************************
 794+ 1723              ; FIND A FREE ENTRY
 795+ 1723              ; find a free entry in the directory to store a new file
 796+ 1723              ; *****************************************************************************
 797+ 1723 01 00 00     FNDFREDIR:  ld      BC,$0000        ; point to sector #0
 798+ 1726 11 00 00                 ld      DE,$0000
 799+ 1729 CD 4B 10                 call    CF_SETSTR       ; set sector
 800+ 172C CD 8D 10                 call    CF_RD_SEC       ; read sector
 801+ 172F 2A B3 60                 ld      HL,(IOBUFF)     ; address of I/O buffer
 802+ 1732 11 19 00                 ld      DE,$0019        ; pointer to number of allowed files (same of allowed blocks)
 803+ 1735 19                       add     HL,DE           ; find address
 804+ 1736 5E                       ld      E,(HL)          ; load max entries into DE
 805+ 1737 23                       inc     HL
 806+ 1738 56                       ld      D,(HL)
 807+ 1739 D5                       push    DE              ; copy number of entries...
 808+ 173A FD E1                    pop     IY              ; ...into IY
 809+ 173C 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 810+ 173F 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 811+ 1740 58                       ld      E,B
 812+ 1741 60                       ld      H,B             ; HL=$0000 (entry counter)
 813+ 1742 68                       ld      L,B
 814+ 1743 CD 4B 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 815+ 1746 CD 8D 10                 call    CF_RD_SEC       ; read sector
 816+ 1749 DD 2A B3 60              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 817+ 174D DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 818+ 1750 FD 2B                    dec     IY              ; decrement number of entries
 819+ 1752 B7                       or      A               ; is it $00 (empty entry)?
 820+ 1753 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 821+ 1755 FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 822+ 1757 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 823+ 1759 C5                       push    BC              ; no, store BC
 824+ 175A 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 825+ 175D DD 09                    add     IX,BC           ; next entry in current sector
 826+ 175F C1                       pop     BC              ; retrieve sector pointer
 827+ 1760 23                       inc     HL              ; increment entry counter
 828+ 1761 7D                       ld      A,L
 829+ 1762 E6 0F                    and     %00001111       ; just done 16 entries?
 830+ 1764 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 831+ 1766 03                       inc     BC              ; entries in this sector finished .. goto next sector
 832+ 1767 78                       ld      A,B             ; check if...
 833+ 1768 B1                       or      C               ; ...BC=$000
 834+ 1769 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 835+ 176B 13                       inc     DE              ; yes, increment DE (MSB)
 836+ 176C E5           FNDFREDIR5: push    HL              ; preserve current entry
 837+ 176D FD E5                    push    IY              ; copy max allowed files...
 838+ 176F D1                       pop     DE              ; ...into HL
 839+ 1770 CD DF 4C                 call    CMP16           ; check if reached max allowed entries
 840+ 1773 E1                       pop     HL              ; (retrieve current entry)
 841+ 1774 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 842+ 1776 37                       scf                     ; entries are finished, raise an error
 843+ 1777 C9                       ret                     ; return
 844+ 1778 ED 43 BA 60  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 845+ 177C 22 BC 60                 ld      (NTR_NBR),HL    ; store entry number
 846+ 177F AF                       xor     A               ; reset Carry
 847+ 1780 C9                       ret
 848+ 1781
 849+ 1781
 850+ 1781              ; *****************************************************************************
 851+ 1781              ;   U T I L I T I E S
 852+ 1781              ; *****************************************************************************
 853+ 1781
 854+ 1781              ; generate random disk ID
 855+ 1781 2A CD 60     RND_ID:     ld      HL,(TPBF4)      ; retrieve pointer to beginning of name
 856+ 1784 7E                       ld      A,(HL)          ; get first char
 857+ 1785 12                       ld      (DE),A          ; copy it to disk ID
 858+ 1786 13                       inc     DE              ; inc pointer
 859+ 1787 CD 9C 17                 call    RND8            ; get a random char
 860+ 178A CD AD 17                 call    CH0TO9          ; get a number from 0 to 9
 861+ 178D 12                       ld      (DE),A          ; store it
 862+ 178E 13                       inc     DE              ; inc pointer
 863+ 178F 23                       inc     HL              ; next disk name char
 864+ 1790 7E                       ld      A,(HL)          ; get second char from disk name
 865+ 1791 12                       ld      (DE),A          ; store it
 866+ 1792 13                       inc     DE              ; inc pointer
 867+ 1793 CD 9C 17                 call    RND8            ; get a random char
 868+ 1796 CD AD 17                 call    CH0TO9          ; get a number from 0 to 9
 869+ 1799 12                       ld      (DE),A          ; store it
 870+ 179A 13                       inc     DE              ; inc pointer
 871+ 179B C9                       ret                     ; return to caller
 872+ 179C
 873+ 179C
 874+ 179C              ; generate a pseudo-random number from TMR and R register
 875+ 179C 3A FE 60     RND8:       ld      A,(TMRCNT)      ; load LSB of sys-timer
 876+ 179F 47                       ld      B,A             ; copy into B
 877+ 17A0 ED 5F                    ld      A,R             ; load refresh register
 878+ 17A2 A8                       xor     B               ; A xor B
 879+ 17A3 47                       ld      B,A             ; copy into B
 880+ 17A4 0F                       rrca                    ; multiply by 32
 881+ 17A5 0F                       rrca
 882+ 17A6 0F                       rrca
 883+ 17A7 EE 1F                    xor     $1F
 884+ 17A9 80                       add     A,B
 885+ 17AA DE FF                    sbc     A,255           ; carry
 886+ 17AC C9                       ret                     ; return to caller
 887+ 17AD
 888+ 17AD
 889+ 17AD              ; char ported into 0-9 interval
 890+ 17AD E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 891+ 17AF FE 0A                    cp      $0A             ; is it < 10?
 892+ 17B1 38 02                    jr      C,CH0TO9E       ; yes, jump over
 893+ 17B3 D6 0A                    sub     $0A             ; subract 10
 894+ 17B5 C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 895+ 17B7 C9                       ret
 896+ 17B8
 897+ 17B8
 898+ 17B8              ; first check DOS validity then load disk details
 899+ 17B8 CD 09 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 900+ 17BB D8                       ret     C               ; if errors, leave
 901+ 17BC C5                       push    BC              ; store BC
 902+ 17BD D5                       push    DE              ; store DE
 903+ 17BE E5                       push    HL              ; store HL
 904+ 17BF 01 00 00                 ld      BC,$0000        ; reset LSB of sector
 905+ 17C2 50                       ld      D,B             ; reset MSB of sector
 906+ 17C3 58                       ld      E,B
 907+ 17C4 CD 4B 10                 call    CF_SETSTR       ; set sector #0
 908+ 17C7 CD 8D 10                 call    CF_RD_SEC       ; read sector
 909+ 17CA 2A B3 60                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 910+ 17CD 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 911+ 17D0 19                       add     HL,DE
 912+ 17D1 11 EF 10                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 913+ 17D4 06 04                    ld      B,$04           ; 4 chars
 914+ 17D6 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 915+ 17D7 BE                       cp      (HL)            ; compare with disk DOS version
 916+ 17D8 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 917+ 17DA 13                       inc     DE              ; next source
 918+ 17DB 23                       inc     HL              ; next comparison
 919+ 17DC 10 F8                    djnz    CHKDSKVAL1      ; repeat
 920+ 17DE 2A B1 60                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 921+ 17E1 11 1D 00                 ld      DE,$001D        ; point to address of data area
 922+ 17E4 19                       add     HL,DE           ; set pointer to beginning of identifies
 923+ 17E5 5E                       ld      E,(HL)          ; load LSB
 924+ 17E6 23                       inc     HL              ; increment pointer
 925+ 17E7 56                       ld      D,(HL)          ; load MSB: DE now has the first sector of data area
 926+ 17E8 AF                       xor     A               ; no error - clear Carry flag
 927+ 17E9 18 01                    jr      CHKDSKVAL2      ; jump over
 928+ 17EB 37           CHKDSKVALE: scf                     ; error - set carry flag
 929+ 17EC E1           CHKDSKVAL2: pop     HL
 930+ 17ED D1                       pop     DE
 931+ 17EE C1                       pop     BC
 932+ 17EF C9                       ret                     ; return to caller
 933+ 17F0
 934+ 17F0
 935+ 17F0              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 936+ 17F0              ; Ipnputs: DE: pointer to dest. buffer
 937+ 17F0              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 938+ 17F0              ; destroys: A, BC, DE, HL
 939+ 17F0 ED 4B 22 61  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 940+ 17F4 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 941+ 17F5 FE 11                    cp      $11             ; is it <=16?
 942+ 17F7 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 943+ 17F9 0E 10                    ld      C,$10           ; no, get only 16 chars
 944+ 17FB 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 945+ 17FC 0E 10                    ld      C,$10           ; char counter
 946+ 17FE 2A 20 61                 ld      HL,(DKNMPT)     ; pointer to disk name
 947+ 1801 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 948+ 1802 CD 70 18                 call    CHK_NAM         ; check if valid
 949+ 1805 D8                       ret     C               ; no, file name error
 950+ 1806 12                       ld      (DE),A          ; yes, store char
 951+ 1807 13                       inc     DE              ; next I/O location
 952+ 1808 23                       inc     HL              ; next disk name char
 953+ 1809 0D                       dec     C               ; decrement number of chars copied
 954+ 180A 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 955+ 180C 79                       ld      A,C             ; check if there are no empty chars in file
 956+ 180D B7                       or      A
 957+ 180E C8                       ret     Z               ; yes, job finished - return
 958+ 180F 3E 20                    ld      A,SPC           ; no, padding required
 959+ 1811 12           CHKNMVAL3:  ld      (DE),A          ; store char
 960+ 1812 13                       inc     DE              ; next location
 961+ 1813 0D                       dec     C               ; check if padding is over
 962+ 1814 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 963+ 1816 AF                       xor     A               ; clear Carry flag
 964+ 1817 C9                       ret                     ; return to caller
 965+ 1818
 966+ 1818
 967+ 1818              ; store DE into (HL) and (HL+1)
 968+ 1818 73           DE2HL:      ld      (HL),E          ; LSB of size
 969+ 1819 23                       inc     HL
 970+ 181A 72                       ld      (HL),D          ; MSB of size
 971+ 181B 23                       inc     HL
 972+ 181C C9                       ret                     ; return to caller
 973+ 181D
 974+ 181D
 975+ 181D              ; get DE from (HL) and (HL+1)
 976+ 181D 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
 977+ 181E 23                       inc     HL              ; next location
 978+ 181F 56                       ld      D,(HL)          ; get MSB into D
 979+ 1820 23                       inc     HL              ; next location
 980+ 1821 C9                       ret                     ; return to caller
 981+ 1822
 982+ 1822
 983+ 1822              ; convert a 16/32-bit number into an ASCII string and print it
 984+ 1822              ; inputs: HL pointer to 32-bit number
 985+ 1822 5E           PRN32ASCII: ld      E,(HL)          ; load MSB into DE  <-- entry for 32-bit
 986+ 1823 23                       inc     HL
 987+ 1824 56                       ld      D,(HL)
 988+ 1825 23                       inc     HL
 989+ 1826 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
 990+ 1827 23                       inc     HL
 991+ 1828 46                       ld      B,(HL)
 992+ 1829 C5                       push    BC              ; copy BC...
 993+ 182A DD E1                    pop     IX              ; ...into IX
 994+ 182C FD 21 C7 60  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
 995+ 1830 CD A8 4D                 call    CLCN32          ; convert number in DEIX into ASCII number
 996+ 1833 21 C7 60                 ld      HL,TPBF1        ; address of ASCII number
 997+ 1836 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
 998+ 1837 B7                       or      A               ; is it $00 (end of string)?
 999+ 1838 C8                       ret     Z               ; yes, leave
1000+ 1839 CD 6A 23                 call    OUTC            ; no, print char
1001+ 183C 23                       inc     HL              ; next char
1002+ 183D 18 F7                    jr      PRNTSIZ         ; repeat
1003+ 183F
1004+ 183F
1005+ 183F              ; convert one or more bytes into memory in hex format
1006+ 183F              ; HL: pointer to number in memory - B: number of bytes to convert
1007+ 183F              ; destroys: A, D, HL
1008+ 183F 50           PRN_HEX:    ld      D,B             ; move bytes into D
1009+ 1840 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1010+ 1841 CD 60 18                 call    BYTEHEX         ; print hex number
1011+ 1844 23                       inc     HL              ; next location
1012+ 1845 15                       dec     D               ; decrement bytes to convert
1013+ 1846 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1014+ 1848 C9                       ret
1015+ 1849
1016+ 1849
1017+ 1849              ; convert one or more words into memory in hex format
1018+ 1849              ; IX: pointer to number in memory - B: number of words to convert
1019+ 1849              ; destroys: AF, IX
1020+ 1849 D5           PRN_WHEX:   push    DE
1021+ 184A 50                       ld      D,B
1022+ 184B DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1023+ 184E CD 60 18                 call    BYTEHEX         ; print hex number
1024+ 1851 DD 7E 00                 ld      A,(IX)          ; load LSB into A
1025+ 1854 CD 60 18                 call    BYTEHEX         ; print hex number
1026+ 1857 DD 23                    inc     IX
1027+ 1859 DD 23                    inc     IX              ; next word
1028+ 185B 15                       dec     D               ; decrement words to convert
1029+ 185C 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1030+ 185E D1                       pop     DE
1031+ 185F C9                       ret
1032+ 1860
1033+ 1860
1034+ 1860              ; print A in hex format
1035+ 1860 C5           BYTEHEX:    push    BC
1036+ 1861 D5                       push    DE
1037+ 1862 CD F4 4B                 call    BYT2ASC         ; convert to HEX and get back into BC
1038+ 1865 78                       ld      A,B
1039+ 1866 CD 6A 23                 call    OUTC            ; print left nibble
1040+ 1869 79                       ld      A,C
1041+ 186A CD 6A 23                 call    OUTC            ; print right nibble
1042+ 186D D1                       pop     DE
1043+ 186E C1                       pop     BC
1044+ 186F C9                       ret                     ; return to caller
1045+ 1870
1046+ 1870
1047+ 1870              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9' and 'A'-'Z'
1048+ 1870              ; input: A -> char to check
1049+ 1870              ; return: C is set if ERROR, reset otherwise
1050+ 1870 FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1051+ 1872 C8                       ret     Z               ; return if equal (C is reset)
1052+ 1873 FE 2D                    cp      '-'             ; is it a minus?
1053+ 1875 C8                       ret     Z               ; return if equal
1054+ 1876 FE 30                    cp      '0'             ; char < '0' ?
1055+ 1878 D8                       ret     C               ; yes, disk name error
1056+ 1879 FE 3A                    cp      ':'             ; is char <= '9' ?
1057+ 187B 38 07                    jr      C,CHK_C_CF      ; yes, leave
1058+ 187D E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1059+ 187F FE 41                    cp      'A'             ; is char >= 'A' ?
1060+ 1881 D8                       ret     C               ; no, error
1061+ 1882 FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1062+ 1884 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1063+ 1885 C9           CHK_NAM_LV: ret                     ; return to caller
1064+ 1886
1065+ 1886
1066+ 1886
1067+ 1886              ; clear I/O buffer
1068+ 1886 F5           CLRIOBF:    push    AF              ; store AF
1069+ 1887 C5                       push    BC              ; store BC
1070+ 1888 E5                       push    HL              ; store HL
1071+ 1889 2A B3 60                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1072+ 188C 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1073+ 188F AF           CLRBUFF:    xor     A               ; reset A
1074+ 1890 77           RSTIOBF:    ld      (HL),A          ; reset cell
1075+ 1891 23                       inc     HL              ; next cell
1076+ 1892 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1077+ 1894 0D                       dec     C               ; decrement C
1078+ 1895 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1079+ 1897 E1                       pop     HL              ; retrieve HL
1080+ 1898 C1                       pop     BC              ; retrieve BC
1081+ 1899 F1                       pop     AF              ; retrieve AF
1082+ 189A C9                       ret                     ; return to caller
1083+ 189B
1084+ 189B
1085+ 189B              ; clear DOS buffer
1086+ 189B F5           CLRDOSBF:   push    AF
1087+ 189C C5                       push    BC
1088+ 189D E5                       push    HL
1089+ 189E 2A B1 60                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1090+ 18A1 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1091+ 18A4 C3 8F 18                 jp      CLRBUFF         ; continue
# file closed: ../include/dos/dos-1.01.asm
  84  18A7
  85  18A7              ; include the latest version of the LM80C 64K BASIC interpreter
  86  18A7                  INCLUDE "../include/basic/basic-1.06.asm"
# file opened: ../include/basic/basic-1.06.asm
   1+ 18A7              ; ------------------------------------------------------------------------------
   2+ 18A7              ; LM80C BASIC (32K/64K) - R3.20
   3+ 18A7              ; ------------------------------------------------------------------------------
   4+ 18A7              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18A7              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18A7              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18A7              ; kind of warranty: you can use them at your own risk.
   8+ 18A7              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18A7              ; maintain the copyright notices, include this advice and the note to the
  10+ 18A7              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18A7              ; redistribuite them.
  12+ 18A7              ; https://www.leonardomiliani.com
  13+ 18A7              ;
  14+ 18A7              ; Please support me by visiting the following links:
  15+ 18A7              ; Main project page: https://www.leonardomiliani.com
  16+ 18A7              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18A7              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18A7              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18A7              ; ------------------------------------------------------------------------------
  20+ 18A7              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18A7              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18A7              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18A7
  24+ 18A7
  25+ 18A7              ;------------------------------------------------------------------------------
  26+ 18A7              ;  L M 8 0 C   B A S I C
  27+ 18A7              ;------------------------------------------------------------------------------
  28+ 18A7
  29+ 18A7              ; GENERAL EQUATES
  30+ 18A7
  31+ 18A7              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18A7              CTRLC           equ     $03             ; Control "C"
  33+ 18A7              CTRLG           equ     $07             ; Control "G"
  34+ 18A7              BKSP            equ     $08             ; Back space
  35+ 18A7              LF              equ     $0A             ; Line feed
  36+ 18A7              CS              equ     $0C             ; Clear screen
  37+ 18A7              CR              equ     $0D             ; Carriage return
  38+ 18A7              CTRLO           equ     $0F             ; Control "O"
  39+ 18A7              CTRLQ           equ     $11             ; Control "Q"
  40+ 18A7              CTRLR           equ     $12             ; Control "R"
  41+ 18A7              CTRLS           equ     $13             ; Control "S"
  42+ 18A7              CTRLU           equ     $15             ; Control "U"
  43+ 18A7              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18A7              ESC             equ     $1B             ; Escape
  45+ 18A7              SPC             equ     $20             ; Space
  46+ 18A7              DEL             equ     $7F             ; Delete
  47+ 18A7              INSRT           equ     $1A             ; Insert Key
  48+ 18A7              ; cursor ASCII codes
  49+ 18A7              CRSLFT          equ     $1C             ; cursor left
  50+ 18A7              CRSRGT          equ     $1D             ; cursor right
  51+ 18A7              CRSUP           equ     $1E             ; cursor up
  52+ 18A7              CRSDN           equ     $1F             ; cursor down
  53+ 18A7
  54+ 18A7
  55+ 18A7              ;-------------------------------------------------------------------------
  56+ 18A7              ; BASIC ERROR MESSAGES
  57+ 18A7              ; the interpreter looks for a single-byte code in the following list,
  58+ 18A7              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18A7              ; find where to retrieve the message text in "ERRORS"
  60+ 18A7
  61+ 18A7              ; BASIC ERROR CODE VALUES
  62+ 18A7              ; These values act as an offset to point to the error message into the error table
  63+ 18A7              ; must be incremented by 2 because they point to a word address jump
  64+ 18A7              NF      equ     $00     ; NEXT without FOR
  65+ 18A7              SN      equ     $02     ; Syntax error
  66+ 18A7              RG      equ     $04     ; RETURN without GOSUB
  67+ 18A7              OD      equ     $06     ; Out of DATA
  68+ 18A7              FC      equ     $08     ; Function call error
  69+ 18A7              OV      equ     $0A     ; Overflow
  70+ 18A7              OM      equ     $0C     ; Out of memory
  71+ 18A7              UL      equ     $0E     ; Undefined line number
  72+ 18A7              BS      equ     $10     ; Bad subscript
  73+ 18A7              DD      equ     $12     ; Re-Dimensioned array
  74+ 18A7              DZ      equ     $14     ; Division by zero (/0)
  75+ 18A7              ID      equ     $16     ; Illegal direct
  76+ 18A7              TM      equ     $18     ; Type mis-match
  77+ 18A7              OS      equ     $1A     ; Out of string space
  78+ 18A7              LS      equ     $1C     ; String too long
  79+ 18A7              ST      equ     $1E     ; String formula too complex
  80+ 18A7              CN      equ     $20     ; Can't continue
  81+ 18A7              UF      equ     $22     ; Undefined FN function
  82+ 18A7              MO      equ     $24     ; Missing operand
  83+ 18A7              HX      equ     $26     ; HEX error
  84+ 18A7              BN      equ     $28     ; BIN error
  85+ 18A7              GM      equ     $2A     ; No Graphics Mode
  86+ 18A7              SC      equ     $2C     ; Serial configuration
  87+ 18A7              SA      equ     $2E     ; Serial port already open
  88+ 18A7              SO      equ     $30     ; Serial buffer overrun
  89+ 18A7              HP      equ     $32     ; HELP call
  90+ 18A7              IM      equ     $34     ; Illegal indirect
  91+ 18A7              NR      equ     $36     ; Device not ready
  92+ 18A7              D0      equ     $38     ; DOS not enabled
  93+ 18A7              D1      equ     $3A     ; Disk/File name error
  94+ 18A7              D2      equ     $3C     ; Disk geometry error
  95+ 18A7              D3      equ     $3E     ; Save error
  96+ 18A7              D4      equ     $40     ; Load error
  97+ 18A7              D5      equ     $42     ; Disk full error
  98+ 18A7              D6      equ     $44     ; Duplicate file name error
  99+ 18A7              D7      equ     $46     ; DOS version error
 100+ 18A7              D8      equ     $48     ; File not found error
 101+ 18A7
 102+ 18A7
 103+ 18A7              ; BASIC ERROR POINTER TABLE
 104+ 18A7              ERRTBL: equ $
 105+ 18A7 F1 18        NFPTR:  defw    NFMSG
 106+ 18A9 02 19        SNPTR:  defw    SNMSG
 107+ 18AB 09 19        RGPTR:  defw    RGMSG
 108+ 18AD 1E 19        ODPTR:  defw    ODMSG
 109+ 18AF 2A 19        FCPTR:  defw    FCMSG
 110+ 18B1 40 19        OVPTR:  defw    OVMSG
 111+ 18B3 49 19        OMPTR:  defw    OMMSG
 112+ 18B5 57 19        ULPTR:  defw    ULMSG
 113+ 18B7 66 19        BSPTR:  defw    BSMSG
 114+ 18B9 74 19        DDPTR:  defw    DDMSG
 115+ 18BB 89 19        DZPTR:  defw    DZMSG
 116+ 18BD 9A 19        IDPTR:  defw    IDMSG
 117+ 18BF AE 19        TMPTR:  defw    TMMSG
 118+ 18C1 BD 19        OSPTR:  defw    OSMSG
 119+ 18C3 D1 19        LSPTR:  defw    LSMSG
 120+ 18C5 E1 19        STPTR:  defw    STMSG
 121+ 18C7 FC 19        CNPTR:  defw    CNMSG
 122+ 18C9 0B 1A        UFPTR:  defw    UFMSG
 123+ 18CB 21 1A        MOPTR:  defw    MOMSG
 124+ 18CD 31 1A        HXPTR:  defw    HXMSG
 125+ 18CF 3C 1A        BNPTR:  defw    BNMSG
 126+ 18D1 47 1A        GMPRT:  defw    GMMSG
 127+ 18D3 58 1A        SCPTR:  defw    SCMSG
 128+ 18D5 6D 1A        SAPTR:  defw    SAMSG
 129+ 18D7 86 1A        SOPTR:  defw    SOMSG
 130+ 18D9 9C 1A        HPPTR:  defw    HPMSG
 131+ 18DB A6 1A        IMPRT:  defw    IMMSG
 132+ 18DD BC 1A        NRPRT:  defw    NRMSG
 133+ 18DF CD 1A        D0PTR:  defw    D0MSG
 134+ 18E1 DD 1A        D1PRT:  defw    D1MSG
 135+ 18E3 E9 1A        D2PRT:  defw    D2MSG
 136+ 18E5 F7 1A        D3PRT:  defw    D3MSG
 137+ 18E7 FC 1A        D4PTR:  defw    D4MSG
 138+ 18E9 01 1B        D5PTR:  defw    D5MSG
 139+ 18EB 0B 1B        D6PTR:  defw    D6MSG
 140+ 18ED 1F 1B        D7PRT:  defw    D7MSG
 141+ 18EF 2B 1B        D8PTR:  defw    D8MSG
 142+ 18F1
 143+ 18F1
 144+ 18F1              ; BASIC ERROR MESSAGE LIST
 145+ 18F1              ERRORS  equ $
 146+ 18F1 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 18F5 20 57 69 74
 146+ 18F9 68 6F 75 74
 146+ 18FD 20 46 4F 52
 146+ 1901 00
 147+ 1902 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 1906 61 78 00
 148+ 1909 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 190D 52 4E 20 77
 148+ 1911 69 74 68 6F
 148+ 1915 75 74 20 47
 148+ 1919 4F 53 55 42
 148+ 191D 00
 149+ 191E 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 1922 6F 66 20 44
 149+ 1926 41 54 41 00
 150+ 192A 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 192E 67 61 6C 20
 150+ 1932 46 75 6E 63
 150+ 1936 74 69 6F 6E
 150+ 193A 20 43 61 6C
 150+ 193E 6C 00
 151+ 1940 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1944 66 6C 6F 77
 151+ 1948 00
 152+ 1949 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 194D 6F 66 20 4D
 152+ 1951 65 6D 6F 72
 152+ 1955 79 00
 153+ 1957 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 195B 66 69 6E 65
 153+ 195F 64 20 4C 69
 153+ 1963 6E 65 00
 154+ 1966 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 196A 53 75 62 73
 154+ 196E 63 72 69 70
 154+ 1972 74 00
 155+ 1974 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 1978 69 6D 65 6E
 155+ 197C 73 69 6F 6E
 155+ 1980 65 64 20 41
 155+ 1984 72 72 61 79
 155+ 1988 00
 156+ 1989 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 198D 73 69 6F 6E
 156+ 1991 20 62 79 20
 156+ 1995 5A 65 72 6F
 156+ 1999 00
 157+ 199A 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 199E 67 61 6C 20
 157+ 19A2 44 69 72 65
 157+ 19A6 63 74 20 4D
 157+ 19AA 6F 64 65 00
 158+ 19AE 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 19B2 20 4D 69 73
 158+ 19B6 2D 6D 61 74
 158+ 19BA 63 68 00
 159+ 19BD 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 19C1 6F 66 20 53
 159+ 19C5 74 72 69 6E
 159+ 19C9 67 20 53 70
 159+ 19CD 61 63 65 00
 160+ 19D1 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 19D5 6E 67 20 54
 160+ 19D9 6F 6F 20 4C
 160+ 19DD 6F 6E 67 00
 161+ 19E1 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 19E5 6E 67 20 46
 161+ 19E9 6F 72 6D 75
 161+ 19ED 6C 61 20 54
 161+ 19F1 6F 6F 20 43
 161+ 19F5 6F 6D 70 6C
 161+ 19F9 65 78 00
 162+ 19FC 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A00 74 20 43 6F
 162+ 1A04 6E 74 69 6E
 162+ 1A08 75 65 00
 163+ 1A0B 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A0F 66 69 6E 65
 163+ 1A13 64 20 46 4E
 163+ 1A17 20 46 75 6E
 163+ 1A1B 63 74 69 6F
 163+ 1A1F 6E 00
 164+ 1A21 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A25 69 6E 67 20
 164+ 1A29 4F 70 65 72
 164+ 1A2D 61 6E 64 00
 165+ 1A31 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A35 46 6F 72 6D
 165+ 1A39 61 74 00
 166+ 1A3C 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A40 46 6F 72 6D
 166+ 1A44 61 74 00
 167+ 1A47 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A4B 72 61 70 68
 167+ 1A4F 69 63 73 20
 167+ 1A53 4D 6F 64 65
 167+ 1A57 00
 168+ 1A58 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1A5C 61 6C 20 43
 168+ 1A60 6F 6E 66 69
 168+ 1A64 67 75 72 61
 168+ 1A68 74 69 6F 6E
 168+ 1A6C 00
 169+ 1A6D 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1A71 61 6C 20 50
 169+ 1A75 6F 72 74 20
 169+ 1A79 41 6C 72 65
 169+ 1A7D 61 64 79 20
 169+ 1A81 4F 70 65 6E
 169+ 1A85 00
 170+ 1A86 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1A8A 61 6C 20 42
 170+ 1A8E 75 66 66 65
 170+ 1A92 72 20 4F 76
 170+ 1A96 65 72 72 75
 170+ 1A9A 6E 00
 171+ 1A9C 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1AA0 20 43 61 6C
 171+ 1AA4 6C 00
 172+ 1AA6 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1AAA 67 61 6C 20
 172+ 1AAE 49 6E 64 69
 172+ 1AB2 72 65 63 74
 172+ 1AB6 20 4D 6F 64
 172+ 1ABA 65 00
 173+ 1ABC 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1AC0 63 65 20 4E
 173+ 1AC4 6F 74 20 52
 173+ 1AC8 65 61 64 79
 173+ 1ACC 00
 174+ 1ACD 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1AD1 4E 6F 74 20
 174+ 1AD5 45 6E 61 62
 174+ 1AD9 6C 65 64 00
 175+ 1ADD 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1AE1 20 53 74 72
 175+ 1AE5 69 6E 67 00
 176+ 1AE9 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1AED 20 47 65 6F
 176+ 1AF1 6D 65 74 72
 176+ 1AF5 79 00
 177+ 1AF7 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1AFB 00
 178+ 1AFC 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B00 00
 179+ 1B01 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B05 20 46 75 6C
 179+ 1B09 6C 00
 180+ 1B0B 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B0F 69 63 61 74
 180+ 1B13 65 20 46 69
 180+ 1B17 6C 65 20 4E
 180+ 1B1B 61 6D 65 00
 181+ 1B1F 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B23 56 65 72 73
 181+ 1B27 69 6F 6E 00
 182+ 1B2B 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B2F 20 4E 6F 74
 182+ 1B33 20 46 6F 75
 182+ 1B37 6E 64 00
 183+ 1B3A
 184+ 1B3A
 185+ 1B3A              ;-----------------------------------------------------------------------------
 186+ 1B3A              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B3A              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B3A              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B3A
 190+ 1B3A C3 40 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B3D C3 08 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B40
 193+ 1B40 C3 47 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B43 5E 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B45 23 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B47 21 77 5F     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B4A F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B4B C3 CA 4C             jp      INITST          ; Go to initialise
 199+ 1B4E
 200+ 1B4E 21 F8 1E     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1B51 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1B54 11 77 5F             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1B57 ED B0                ldir                    ; Copy data
 204+ 1B59 EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1B5A F9                   ld      SP,HL           ; Temporary stack
 206+ 1B5B CD C1 21             call    CLREG           ; Clear registers and stack
 207+ 1B5E CD 75 28             call    PRNTCRLF        ; Output CRLF
 208+ 1B61 32 AA 60             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1B64 32 87 61             ld      (PROGST),A      ; Initialise program area
 210+ 1B67 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1B69 21 8C 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1B6C CD 41 2F             call    PRS             ; Output "Memory size"
 213+ 1B6F CD DE 21             call    PROMPT          ; Get input with '?'
 214+ 1B72 CD 23 09             call    CURSOR_ON       ; enable cursor
 215+ 1B75 CD A8 25             call    GETCHR          ; Get next character
 216+ 1B78 B7                   or      A               ; Set flags
 217+ 1B79 C2 91 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1B7C 21 EB 61     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1B7F 23           MLOOP:  inc     HL              ; Next byte
 220+ 1B80 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1B81 B5                   or      L
 222+ 1B82 CA A3 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1B85 7E                   ld      A,(HL)          ; Get contents
 224+ 1B86 47                   ld      B,A             ; Save it
 225+ 1B87 2F                   cpl                     ; Flip all bits
 226+ 1B88 77                   ld      (HL),A          ; Put it back
 227+ 1B89 BE                   cp      (HL)            ; RAM there if same
 228+ 1B8A 70                   ld      (HL),B          ; Restore old contents
 229+ 1B8B CA 7F 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1B8E C3 A3 1B             jp      SETTOP          ; Top of RAM found
 231+ 1B91
 232+ 1B91 CD 78 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1B94 B7                   or      A               ; Set flags on last byte
 234+ 1B95 C2 5F 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1B98 EB                   ex      DE,HL           ; Address into HL
 236+ 1B99 2B                   dec     HL              ; Back one byte
 237+ 1B9A 3E D9                ld      A,%11011001     ; Test byte
 238+ 1B9C 46                   ld      B,(HL)          ; Get old contents
 239+ 1B9D 77                   ld      (HL),A          ; Load test byte
 240+ 1B9E BE                   cp      (HL)            ; RAM there if same
 241+ 1B9F 70                   ld      (HL),B          ; Restore old contents
 242+ 1BA0 C2 69 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BA3
 244+ 1BA3 CD 38 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BA6 2B                   dec     HL              ; Back one byte
 246+ 1BA7 11 EA 61             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BAA CD 59 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BAD DA 69 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1BB0 3A 63 61             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1BB3 1F                   rra                     ; is DOS disabled?
 251+ 1BB4 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1BB6 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1BB9 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1BBA 22 B3 60             ld      (IOBUFF),HL     ; ...and store address
 255+ 1BBD 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1BC0 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1BC1 22 B1 60             ld      (DOSBFR),HL     ; ...and store address
 258+ 1BC4 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1BC7 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1BC8 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1BCB 22 AF 60             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1BCE 19                   add     HL,DE           ; Allocate string space
 263+ 1BCF 22 C6 5F             ld      (STRSPC),HL     ; Save string space
 264+ 1BD2 CD 9C 21             call    CLRPTR          ; Clear program area
 265+ 1BD5 2A C6 5F             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1BD8 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1BDB 19                   add     HL,DE           ; Adjust HL
 268+ 1BDC 11 87 61             ld      DE,PROGST       ; Start of program text
 269+ 1BDF 7D                   ld      A,L             ; Get LSB
 270+ 1BE0 93                   sub     E               ; Adjust it
 271+ 1BE1 6F                   ld      L,A             ; Re-save
 272+ 1BE2 7C                   ld      A,H             ; Get MSB
 273+ 1BE3 9A                   sbc     A,D             ; Adjust it
 274+ 1BE4 67                   ld      H,A             ; Re-save
 275+ 1BE5 E5                   push    HL              ; Save bytes free
 276+ 1BE6 21 2E 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1BE9 CD 41 2F             call    PRS             ; Output string
 278+ 1BEC 3A 63 61             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1BEF B7                   or      A
 280+ 1BF0 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1BF2 21 6F 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1BF5 CD 41 2F             call    PRS
 283+ 1BF8 21 17 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1BFB CD 41 2F             call    PRS             ; Output string
 285+ 1BFE E1                   pop     HL              ; Get bytes free back
 286+ 1BFF CD E0 39             call    PRNTHL          ; Output amount of free memory
 287+ 1C02 21 20 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C05 CD 41 2F             call    PRS             ; Output string
 289+ 1C08
 290+ 1C08 31 56 60     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C0B CD C1 21     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C0E CD 05 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C11 CD 23 09             call    CURSOR_ON       ; enable cursor
 294+ 1C14 C3 BF 20             jp      PRNTOK          ; Go to get command line
 295+ 1C17
 296+ 1C17 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C1B 20 20 20 20
 296+ 1C1F 00
 297+ 1C20 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C24 65 73 20 66
 297+ 1C28 72 65 65 0D
 297+ 1C2C 0D 00
 298+ 1C2E
 299+ 1C2E 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.20 ",251,"2021 L.Miliani"
 299+ 1C32 43 20 42 41
 299+ 1C36 53 49 43 20
 299+ 1C3A 33 2E 32 30
 299+ 1C3E 20 FB 32 30
 299+ 1C42 32 31 20 4C
 299+ 1C46 2E 4D 69 6C
 299+ 1C4A 69 61 6E 69
 300+ 1C4E 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1C52 20 42 41 53
 300+ 1C56 49 43 20 34
 300+ 1C5A 2E 37 20 20
 300+ 1C5E FB 31 39 37
 300+ 1C62 38 20 4D 69
 300+ 1C66 63 72 6F 73
 300+ 1C6A 6F 66 74 0D
 300+ 1C6E 00
 301+ 1C6F 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.01","  Loaded",CR,0
 301+ 1C73 20 4C 4D 38
 301+ 1C77 30 43 20 44
 301+ 1C7B 4F 53 20 31
 301+ 1C7F 2E 30 31 20
 301+ 1C83 20 4C 6F 61
 301+ 1C87 64 65 64 0D
 301+ 1C8B 00
 302+ 1C8C
 303+ 1C8C 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1C90 72 79 20 74
 303+ 1C94 6F 70 00
 304+ 1C97
 305+ 1C97              ; The following list reports all the functions supported by the interpreter.
 306+ 1C97              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1C97              ; then into the list of the reserved words below, and finally must increment the
 308+ 1C97              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1C97              ; function.
 310+ 1C97
 311+ 1C97              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1C97              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1C97              ; entry here must have the corresponding entry in the tokens list.
 314+ 1C97 55 38        FNCTAB: defw    SGN
 315+ 1C99 EB 2D                defw    TMR         ; added by Leonardo Miliani
 316+ 1C9B 19 39                defw    INT
 317+ 1C9D 6B 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1C9F 7D 5F                defw    USR
 319+ 1CA1 01 2E                defw    FRE
 320+ 1CA3 7C 32                defw    INP
 321+ 1CA5 2F 2E                defw    POS
 322+ 1CA7 DF 3A                defw    SQR
 323+ 1CA9 BE 3B                defw    RND
 324+ 1CAB A9 36                defw    LOG
 325+ 1CAD 2D 3B                defw    EXP
 326+ 1CAF 33 3C                defw    COS
 327+ 1CB1 39 3C                defw    SIN
 328+ 1CB3 9A 3C                defw    TAN
 329+ 1CB5 AF 3C                defw    ATN
 330+ 1CB7 58 33                defw    PEEK
 331+ 1CB9 1A 3D                defw    DEEK
 332+ 1CBB 5F 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1CBD 2E 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1CBF 39 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1CC1 4D 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1CC3 71 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1CC5 13 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1CC7 B3 30                defw    LEN
 339+ 1CC9 CB 2E                defw    STR
 340+ 1CCB 43 32                defw    VAL
 341+ 1CCD C2 30                defw    ASC
 342+ 1CCF D3 30                defw    CHR
 343+ 1CD1 BE 4B                defw    HEX         ; added by Grant Searle
 344+ 1CD3 4F 4C                defw    BIN         ; added by Grant Searle
 345+ 1CD5 E3 30                defw    LEFT
 346+ 1CD7 09 32                defw    RIGHT
 347+ 1CD9 13 32                defw    MID
 348+ 1CDB
 349+ 1CDB              ; RESERVED WORD LIST
 350+ 1CDB              ; Here are all the reserved words used by the interpreter
 351+ 1CDB              ; To add custom functions/commands, the user must insert the keyword
 352+ 1CDB              ; in this list, following the schematic
 353+ 1CDB C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1CDE C6 4F 52             defb    'F'+$80,"OR"
 355+ 1CE1 CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1CE5 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1CE9 C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1CED 54
 358+ 1CEE C4 49 4D             defb    'D'+$80,"IM"
 359+ 1CF1 D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1CF5 CC 45 54             defb    'L'+$80,"ET"
 361+ 1CF8 C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1CFC D2 55 4E             defb    'R'+$80,"UN"
 363+ 1CFF C9 46                defb    'I'+$80,"F"
 364+ 1D01 D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D05 4F 52 45
 365+ 1D08 C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D0C 42
 366+ 1D0D D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D11 52 4E
 367+ 1D13 D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D16 D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D1A CF 55 54             defb    'O'+$80,"UT"
 370+ 1D1D CF 4E                defb    'O'+$80,"N"
 371+ 1D1F C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D23 53
 372+ 1D24 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D28 45
 373+ 1D29 C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D2D D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D31 C4 45 46             defb    'D'+$80,"EF"
 376+ 1D34 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D38 C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D3C D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D40 45
 379+ 1D41 D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D45 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D49 D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D4D 45 4E
 382+ 1D4F CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1D53 54 45
 383+ 1D55 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1D59 44
 384+ 1D5A D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1D5E 4D 45
 385+ 1D60 D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1D64 45
 386+ 1D65 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1D69 52
 387+ 1D6A D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1D6E C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1D72 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1D76 4C 45
 390+ 1D78 D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1D7C 54
 391+ 1D7D D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1D81 41 4C
 392+ 1D83 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1D87 C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1D8A CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1D8D CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1D90 C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1D94 4E 54
 397+ 1D96 D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1D9A 48
 398+ 1D9B D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1D9E D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DA2 54
 400+ 1DA3 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DA7 D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DAB 54
 402+ 1DAC C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1DB0 CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1DB4 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1DB8 52
 405+ 1DB9 CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1DBD D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1DC1 CE 45 57             defb    'N'+$80,"EW"
 408+ 1DC4 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1DC8 D4 4F                defb    'T'+$80,"O"
 410+ 1DCA C6 4E                defb    'F'+$80,"N"
 411+ 1DCC D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1DD0 D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1DD4 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1DD7 D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1DDB                      ; from here: operators
 416+ 1DDB AB                   defb    '+'+$80
 417+ 1DDC AD                   defb    '-'+$80
 418+ 1DDD AA                   defb    '*'+$80
 419+ 1DDE AF                   defb    '/'+$80
 420+ 1DDF A5                   defb    '%'+$80
 421+ 1DE0 A3                   defb    '#'+$80
 422+ 1DE1 DE                   defb    '^'+$80
 423+ 1DE2 C1 4E 44             defb    'A'+$80,"ND"
 424+ 1DE5 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1DE8 CF 52                defb    'O'+$80,"R"
 426+ 1DEA BE                   defb    '>'+$80
 427+ 1DEB BD                   defb    '='+$80
 428+ 1DEC BC                   defb    '<'+$80
 429+ 1DED
 430+ 1DED                      ; from here there are the tokens' FUNCTIONS list
 431+ 1DED                      ; this list must be coherent with the functions list above
 432+ 1DED D3 47 4E             defb    'S'+$80,"GN"
 433+ 1DF0 D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1DF3 C9 4E 54             defb    'I'+$80,"NT"
 435+ 1DF6 C1 42 53             defb    'A'+$80,"BS"
 436+ 1DF9 D5 53 52             defb    'U'+$80,"SR"
 437+ 1DFC C6 52 45             defb    'F'+$80,"RE"
 438+ 1DFF C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E02 D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E05 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E08 D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E0B CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E0E C5 58 50             defb    'E'+$80,"XP"
 444+ 1E11 C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E14 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E17 D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E1A C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E1D D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E21 C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E25 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E29 4B
 451+ 1E2A D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E2E 54
 452+ 1E2F D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E33 54
 453+ 1E34 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E38 59
 454+ 1E39 D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E3D 54
 455+ 1E3E C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E42 52
 456+ 1E43 CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E46 D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E4A D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E4D C1 53 43             defb    'A'+$80,"SC"
 460+ 1E50 C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1E54 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1E58 C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1E5C CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1E60 24
 464+ 1E61 D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1E65 54 24
 465+ 1E67 CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1E6B 80                   defb    $80                     ; End-of-list marker
 467+ 1E6C
 468+ 1E6C              ; KEYWORD ADDRESS TABLE
 469+ 1E6C              ; this list must be coherent with the commands'
 470+ 1E6C              ; tokens list above
 471+ 1E6C F2 25        WORDTB: defw    PEND
 472+ 1E6E EF 24                defw    FOR
 473+ 1E70 EE 29                defw    NEXT
 474+ 1E72 51 27                defw    DATA
 475+ 1E74 EB 28                defw    INPUT
 476+ 1E76 43 2C                defw    DIM
 477+ 1E78 25 29                defw    READ
 478+ 1E7A 68 27                defw    LET
 479+ 1E7C 0E 27                defw    GOTO
 480+ 1E7E E9 26                defw    RUN
 481+ 1E80 E0 27                defw    IF
 482+ 1E82 B8 25                defw    RESTOR
 483+ 1E84 FD 26                defw    GOSUB
 484+ 1E86 2C 27                defw    RETURN
 485+ 1E88 53 27                defw    REM         ; original REM
 486+ 1E8A F0 25                defw    STOP
 487+ 1E8C 88 32                defw    POUT
 488+ 1E8E C2 27                defw    ON
 489+ 1E90 93 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1E92 CE 49                defw    ERASE       ; added by Leonardo Miliani
 491+ 1E94 2E 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1E96 8E 32                defw    WAIT
 493+ 1E98 37 2E                defw    DEF
 494+ 1E9A 82 33                defw    POKE
 495+ 1E9C 25 3D                defw    DOKE
 496+ 1E9E 87 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1EA0 C4 33                defw    SREG        ; added by Leonardo Miliani
 498+ 1EA2 12 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1EA4 5B 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1EA6 92 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1EA8 1E 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1EAA E5 33                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1EAC 3C 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1EAE D6 3D                defw    COLOR       ; added by Leonardo Miliani
 505+ 1EB0 C4 40                defw    PLOT        ; added by Leonardo Miliani
 506+ 1EB2 57 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1EB4 90 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1EB6 81 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1EB8 9B 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1EBA DA 46                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1EBC FE 3C                defw    CLS
 512+ 1EBE F8 46                defw    KEY         ; added by Leonardo Miliani
 513+ 1EC0 D0 32                defw    NMI         ; added by Leonardo Miliani
 514+ 1EC2 91 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1EC4 12 3D                defw    WIDTH
 516+ 1EC6 2A 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1EC8 B4 4C                defw    RESET       ; new behaviour: now it resets the system
 518+ 1ECA 55 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1ECC 12 28                defw    PRINT
 520+ 1ECE 24 26                defw    CONT
 521+ 1ED0 C6 23                defw    LIST
 522+ 1ED2 9D 26                defw    CLEAR
 523+ 1ED4 6F 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1ED6 09 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1ED8 9B 21                defw    NEW
 526+ 1EDA
 527+ 1EDA              ; RESERVED WORD TOKEN VALUES
 528+ 1EDA              ; if you add a function or command you must increment by 1
 529+ 1EDA              ; the values below. Pay attention that you must increment only the
 530+ 1EDA              ; values AFTER the position where you entered the function/command word
 531+ 1EDA              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1EDA              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1EDA              ; that is before the point where VPOKE has been entered, every entry
 534+ 1EDA              ; after REM has been incremented.
 535+ 1EDA              ; Another example: when TMR has been added, since it's a function, every
 536+ 1EDA              ; entry after & included ZSGN must be checked (read below)
 537+ 1EDA
 538+ 1EDA              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1EDA              ZFOR    equ     $81             ; FOR
 540+ 1EDA              ZDATA   equ     $83             ; DATA
 541+ 1EDA              ZGOTO   equ     $88             ; GOTO
 542+ 1EDA              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1EDA              ZREM    equ     $8E             ; REM
 544+ 1EDA              ZELSE   equ     $AF             ; ELSE
 545+ 1EDA              ZPRINT  equ     $B0             ; PRINT
 546+ 1EDA              ZNEW    equ     $B6             ; NEW
 547+ 1EDA
 548+ 1EDA              ZTAB    equ     $B7             ; TAB
 549+ 1EDA              ZTO     equ     $B8             ; TO
 550+ 1EDA              ZFN     equ     $B9             ; FN
 551+ 1EDA              ZSPC    equ     $BA             ; SPC
 552+ 1EDA              ZTHEN   equ     $BB             ; THEN
 553+ 1EDA              ZNOT    equ     $BC             ; NOT
 554+ 1EDA              ZSTEP   equ     $BD             ; STEP
 555+ 1EDA
 556+ 1EDA              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1EDA              ZMINUS  equ     $BF             ; -
 558+ 1EDA              ZTIMES  equ     $C0             ; *
 559+ 1EDA              ZDIV    equ     $C1             ; /
 560+ 1EDA              ZMOD    equ     $C2             ; %
 561+ 1EDA              ZDINT   equ     $C3             ; #
 562+ 1EDA              ZOR     equ     $C7             ; OR
 563+ 1EDA              ZGTR    equ     $C8             ; >
 564+ 1EDA              ZEQUAL  equ     $C9             ; M
 565+ 1EDA              ZLTH    equ     $CA             ; <
 566+ 1EDA
 567+ 1EDA              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1EDA              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1EDA                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1EDA              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1EDA              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1EDA                                              ;               he/she must increment this pointer by 1
 573+ 1EDA
 574+ 1EDA              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1EDA              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1EDA              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1EDA 79           PRITAB: defb    $79             ; Precedence value
 578+ 1EDB C7 39                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1EDD
 580+ 1EDD 79                   defb    $79             ; Precedence value
 581+ 1EDE AA 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1EE0
 583+ 1EE0 7C                   defb    $7C             ; Precedence value
 584+ 1EE1 E8 36                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1EE3
 586+ 1EE3 7C                   defb    $7C             ; Precedence value
 587+ 1EE4 9A 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1EE6
 589+ 1EE6 7C                   defb    $7C             ; Precedence value
 590+ 1EE7 45 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1EE9
 592+ 1EE9 7C                   defb    $7C             ; precedence value
 593+ 1EEA 3D 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1EEC
 595+ 1EEC 7F                   defb    $7F             ; Precedence value
 596+ 1EED E8 3A                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1EEF
 598+ 1EEF 50                   defb    $50             ; Precedence value
 599+ 1EF0 8C 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1EF2
 601+ 1EF2 4A                   defb    $4A             ; Precedence value
 602+ 1EF3 94 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1EF5
 604+ 1EF5 46                   defb    $46             ; Precedence value
 605+ 1EF6 8F 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1EF8
 607+ 1EF8
 608+ 1EF8              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1EF8              ; these values are copied into RAM at startup
 610+ 1EF8 C3 08 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1EFB ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1EFE C3 73 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F01 D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F03 C9                   ret
 615+ 1F04 D6 00                sub     $00             ; Division support routine
 616+ 1F06 6F                   ld      L,A
 617+ 1F07 7C                   ld      A,H
 618+ 1F08 DE 00                sbc     A,$00
 619+ 1F0A 67                   ld      H,A
 620+ 1F0B 78                   ld      A,B
 621+ 1F0C DE 00                sbc     A,$00
 622+ 1F0E 47                   ld      B,A
 623+ 1F0F 3E 00                ld      A,$00
 624+ 1F11 C9                   ret
 625+ 1F12 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F15 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F19 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F1D 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F21 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F25 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F29 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F2D 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F31 D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F35 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F39 DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F3B C9                   ret
 637+ 1F3C FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F3D 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F3E 00                   defb    $00             ; No nulls after input bytes
 640+ 1F3F 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F40 00 00                defw    $00             ; Array load/save check sum
 642+ 1F42 00                   defb    $00             ; Break not by NMI
 643+ 1F43 00                   defb    $00             ; Break flag
 644+ 1F44 C3 DF 22             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F47 EB 61                defw    STLOOK          ; Temp string space
 646+ 1F49 FE FF                defw    -2              ; Current line number (cold)
 647+ 1F4B FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F4D 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1F4E 08                   defb    $08             ; auto-repeat delay
 650+ 1F4F 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1F53 0D 00 00 00
 650+ 1F57 00 00 00 00
 650+ 1F5B 00 00 00 00
 651+ 1F5F 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1F63 00 00 00 00
 651+ 1F67 00 00 00 00
 651+ 1F6B 00 00 00 00
 652+ 1F6F 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1F73 45 4E 31 0D
 652+ 1F77 00 00 00 00
 652+ 1F7B 00 00 00 00
 653+ 1F7F 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1F83 52 31 2C 31
 653+ 1F87 35 2C 35 0D
 653+ 1F8B 00 00 00 00
 654+ 1F8F 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1F93 41 4C 31 2C
 654+ 1F97 33 38 34 30
 654+ 1F9B 30 0D 00 00
 655+ 1F9F 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FA3 45 4E 32 0D
 655+ 1FA7 00 00 00 00
 655+ 1FAB 00 00 00 00
 656+ 1FAF 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 1FB3 0D 00 00 00
 656+ 1FB7 00 00 00 00
 656+ 1FBB 00 00 00 00
 657+ 1FBF 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 1FC3 0D 00 00 00
 657+ 1FC7 00 00 00 00
 657+ 1FCB 00 00 00 00
 658+ 1FCF 88 61                defw    PROGST+1        ; Start of program text
 659+ 1FD1              INITBE:
 660+ 1FD1
 661+ 1FD1              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 1FD1
 663+ 1FD1 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 1FD5 6F 72 00
 664+ 1FD8 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 1FDC 00
 665+ 1FDD              ZERBYT  equ     $-1             ; A zero byte
 666+ 1FDD 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 1FE1 00
 667+ 1FE2 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 1FE6 6B 00
 668+ 1FE8
 669+ 1FE8 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 1FEB 39                   add     HL,SP           ; same index as specified
 671+ 1FEC 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 1FED 23                   inc     HL              ; Point to index address
 673+ 1FEE FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 1FF0 C0                   ret     NZ              ; No - exit
 675+ 1FF1 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 1FF2 23                   inc     HL
 677+ 1FF3 46                   ld      B,(HL)
 678+ 1FF4 23                   inc     HL              ; Point to sign of STEP
 679+ 1FF5 E5                   push    HL              ; Save pointer to sign
 680+ 1FF6 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 1FF7 60                   ld      H,B
 682+ 1FF8 7A                   ld      A,D             ; See if an index was specified
 683+ 1FF9 B3                   or      E               ; DE = 0 if no index specified
 684+ 1FFA EB                   ex      DE,HL           ; Specified index into HL
 685+ 1FFB CA 02 20             jp      Z,INDFND        ; Skip if no index given
 686+ 1FFE EB                   ex      DE,HL           ; Index back into DE
 687+ 1FFF CD 59 23             call    CPDEHL          ; Compare index with one given
 688+ 2002 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2005 E1                   pop     HL              ; Restore pointer to sign
 690+ 2006 C8                   ret     Z               ; Return if block found
 691+ 2007 09                   add     HL,BC           ; Point to next block
 692+ 2008 C3 EC 1F             jp      LOKFOR          ; Keep on looking
 693+ 200B
 694+ 200B CD 25 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 200E C5           MOVSTR: push    BC              ; Save end of source
 696+ 200F E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 2010 C1                   pop     BC              ; Get end of destination
 698+ 2011 CD 59 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2014 7E                   ld      A,(HL)          ; Get byte
 700+ 2015 02                   ld      (BC),A          ; Move it
 701+ 2016 C8                   ret     Z               ; Exit if all done
 702+ 2017 0B                   dec     BC              ; Next byte to move to
 703+ 2018 2B                   dec     HL              ; Next byte to move
 704+ 2019 C3 11 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 201C
 706+ 201C E5           CHKSTK: push    HL              ; Save code string address
 707+ 201D 2A 68 61             ld      HL,(ARREND)     ; Lowest free memory
 708+ 2020 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 2022 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 2023 09                   add     HL,BC
 711+ 2024 3E                   defb    $3E             ; Skip "push HL"
 712+ 2025 E5           ENFMEM: push    HL              ; Save code string address
 713+ 2026 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 2028 95                   sub     L
 715+ 2029 6F                   ld      L,A
 716+ 202A 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 202C 9C                   sbc     A,H
 718+ 202D DA 34 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 2030 67                   ld      H,A
 720+ 2031 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 2032 E1                   pop     HL              ; Restore code string address
 722+ 2033 D8                   ret     C               ; Return if enough memory
 723+ 2034 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 2036 C3 79 20             jp      ERROR
 725+ 2039
 726+ 2039
 727+ 2039              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 2039 F5           EXITGM: push    AF              ; store AF
 729+ 203A 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
 730+ 203D FE 02                cp      $02             ; G2?
 731+ 203F CA 46 20             jp      Z,LDG1          ; yes, back to G1
 732+ 2042 FE 03                cp      $03             ; G3?
 733+ 2044 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 2046 E5           LDG1:   push    HL              ; store HL
 735+ 2047 D5                   push    DE              ; store DE
 736+ 2048 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 204B F3                   di                      ; disable INTs
 738+ 204C CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 204F FB                   ei                      ; re-enable INTs
 740+ 2050 3E 01                ld      A,$01           ; activate the...
 741+ 2052 32 1A 61             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 2055 D1                   pop     DE              ; retrieve DE
 743+ 2056 E1                   pop     HL              ; retrieve HL
 744+ 2057 F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 2058 C9                   ret                     ; return to caller
 746+ 2059
 747+ 2059
 748+ 2059 2A F1 60     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 205C 22 C8 5F             ld      (LINEAT),HL     ; Save as current line
 750+ 205F 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 2061 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 2062 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 2064 01                   defb    $01             ; Skip "ld E,NF"
 754+ 2065 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 2067 01                   defb    $01             ; Skip "ld E,DD"
 756+ 2068 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 206A 01                   defb    $01             ; Skip "ld E,UF"
 758+ 206B 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 206D 01                   defb    $01             ; Skip "ld E,OV
 760+ 206E 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 2070 01                   defb    $01             ; Skip "ld E,TM"
 762+ 2071 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 2073 01                   defb    $01             ; Skip next statement
 764+ 2074 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 2076 01                   defb    $01             ; Skip next statement
 766+ 2077 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 2079
 768+ 2079 CD C1 21     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 207C CD 39 20             call    EXITGM          ; exit from graphic modes
 770+ 207F 32 BE 5F             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 2082 CD 23 09             call    CURSOR_ON       ; enable cursor
 772+ 2085 CD 63 28             call    STTLIN          ; Start new line
 773+ 2088 21 A7 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 208B 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 208C 3E 3F                ld      A,'?'
 776+ 208E CD 6A 23             call    OUTC            ; Output '?'
 777+ 2091 19                   add     HL,DE           ; Offset to correct error code
 778+ 2092 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 2093 23                   inc     HL              ; by loading LSB,
 780+ 2094 56                   ld      D,(HL)          ; then MSB
 781+ 2095 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 2097 CD 41 2F             call    PRS             ; Output error message
 783+ 209A 21 D1 1F             ld      HL,ERRMSG       ; "Error" message
 784+ 209D CD 41 2F     ERRIN:  call    PRS             ; Output message
 785+ 20A0 2A C8 5F             ld      HL,(LINEAT)     ; Get line of error
 786+ 20A3 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20A6 CD 59 23             call    CPDEHL          ; See if cold start error
 788+ 20A9 CA 47 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20AC 7C                   ld      A,H             ; Was it a direct error?
 790+ 20AD A5                   and     L               ; Line = -1 if direct error
 791+ 20AE 3C                   inc     A
 792+ 20AF CA BA 20             jp      Z,PTLN          ; Yes, jump over
 793+ 20B2 E5                   push    HL              ; indirect mode - store HL
 794+ 20B3 2A C8 5F             ld      HL,(LINEAT)     ; copy current line number
 795+ 20B6 22 CA 5F             ld      (HLPLN),HL      ; save in HELP line register
 796+ 20B9 E1                   pop     HL              ; retrieve HL
 797+ 20BA C4 D8 39     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 20BD
 799+ 20BD 3E                   defb    $3E             ; Skip "pop BC"
 800+ 20BE C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 20BF
 802+ 20BF              ; run into direct mode: print OK and get command
 803+ 20BF AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 20C0 32 BE 5F             ld      (CTLOFG),A      ; Enable output
 805+ 20C3 CD 63 28             call    STTLIN          ; Start new line
 806+ 20C6 21 DD 1F             ld      HL,OKMSG        ; "Ok" message
 807+ 20C9 CD 41 2F             call    PRS             ; Output "Ok"
 808+ 20CC CD 23 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 20CF 3A 60 61             ld      A,(SERIALS_EN)  ; load serial state
 810+ 20D2 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 20D4 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 20D7 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 20DA 22 C8 5F             ld      (LINEAT),HL     ; Save as current line
 814+ 20DD CD DF 22             call    GETLIN          ; Get an input line
 815+ 20E0 DA CC 20             jp      C,GETCMD        ; Get line again if break
 816+ 20E3 CD A8 25             call    GETCHR          ; Get first character
 817+ 20E6 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 20E7 DA 5F 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 20EA 1F                   rra                     ; recover original char and Carry
 820+ 20EB 3C                   inc     A               ; Test if end of line
 821+ 20EC 3D                   dec     A               ; Without affecting Carry
 822+ 20ED CA CC 20             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 20F0 F5                   push    AF              ; Save Carry status
 824+ 20F1 3A 60 61             ld      A,(SERIALS_EN)  ; load serial state
 825+ 20F4 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 20F6 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 20F9 CD 38 09             call    CURSOR_OFF      ; cursor disabled
 828+ 20FC CD 78 26             call    ATOH            ; Get line number into DE
 829+ 20FF D5                   push    DE              ; Save line number
 830+ 2100 CD F6 21             call    CRUNCH          ; Tokenise rest of line
 831+ 2103 47                   ld      B,A             ; Length of tokenised line
 832+ 2104 D1                   pop     DE              ; Restore line number
 833+ 2105 F1                   pop     AF              ; Restore Carry
 834+ 2106 D2 88 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 2109 D5                   push    DE              ; Save line number
 836+ 210A C5                   push    BC              ; Save length of tokenised line
 837+ 210B AF                   xor     A
 838+ 210C 32 F4 60             ld      (LSTBIN),A      ; Clear last byte input
 839+ 210F CD A8 25             call    GETCHR          ; Get next character
 840+ 2112 B7                   or      A               ; Set flags
 841+ 2113 F5                   push    AF              ; And save them
 842+ 2114 CD 7B 21             call    SRCHLN          ; Search for line number in DE
 843+ 2117 DA 20 21             jp      C,LINFND        ; Jump if line found
 844+ 211A F1                   pop     AF              ; Get status
 845+ 211B F5                   push    AF              ; And re-save
 846+ 211C CA 27 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 211F B7                   or      A               ; Clear Carry
 848+ 2120 C5           LINFND: push    BC              ; Save address of line in prog
 849+ 2121 D2 37 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2124 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2125 2A 64 61             ld      HL,(PROGND)     ; End of program
 852+ 2128 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 2129 02                   ld      (BC),A
 854+ 212A 03                   inc     BC              ; Next destination
 855+ 212B 13                   inc     DE              ; Next source
 856+ 212C CD 59 23             call    CPDEHL          ; All done?
 857+ 212F C2 28 21             jp      NZ,SFTPRG       ; More to do
 858+ 2132 60                   ld      H,B             ; HL - New end of program
 859+ 2133 69                   ld      L,C
 860+ 2134 22 64 61             ld      (PROGND),HL     ; Update end of program
 861+ 2137
 862+ 2137 D1           INEWLN: pop     DE              ; Get address of line,
 863+ 2138 F1                   pop     AF              ; Get status
 864+ 2139 CA 5E 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 213C 2A 64 61             ld      HL,(PROGND)     ; Get end of program
 866+ 213F E3                   ex      (SP),HL         ; Get length of input line
 867+ 2140 C1                   pop     BC              ; End of program to BC
 868+ 2141 09                   add     HL,BC           ; Find new end
 869+ 2142 E5                   push    HL              ; Save new end
 870+ 2143 CD 0B 20             call    MOVUP           ; Make space for line
 871+ 2146 E1                   pop     HL              ; Restore new end
 872+ 2147 22 64 61             ld      (PROGND),HL     ; Update end of program pointer
 873+ 214A EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 214B 74                   ld      (HL),H          ; Save MSB
 875+ 214C D1                   pop     DE              ; Get new line number
 876+ 214D 23                   inc     HL              ; Skip pointer
 877+ 214E 23                   inc     HL
 878+ 214F 73                   ld      (HL),E          ; Save LSB of line number
 879+ 2150 23                   inc     HL
 880+ 2151 72                   ld      (HL),D          ; Save MSB of line number
 881+ 2152 23                   inc     HL              ; To first byte in line
 882+ 2153 11 51 60             ld      DE,BUFFER       ; Copy buffer to program
 883+ 2156 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 2157 77                   ld      (HL),A          ; Save destinations
 885+ 2158 23                   inc     HL              ; Next source
 886+ 2159 13                   inc     DE              ; Next destination
 887+ 215A B7                   or      A               ; Done?
 888+ 215B C2 56 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 215E CD A7 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 2161 23                   inc     HL              ; To LSB of pointer
 891+ 2162 EB                   ex      DE,HL           ; Address to DE
 892+ 2163 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 2164 6B                   ld      L,E
 894+ 2165 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 2166 23                   inc     HL              ; To MSB of pointer
 896+ 2167 B6                   or      (HL)            ; Compare with MSB pointer
 897+ 2168 CA CC 20             jp      Z,GETCMD        ; Get command line if end
 898+ 216B 23                   inc     HL              ; To LSB of line number
 899+ 216C 23                   inc     HL              ; Skip line number
 900+ 216D 23                   inc     HL              ; Point to first byte in line
 901+ 216E AF                   xor     A               ; Looking for 00 byte
 902+ 216F BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 2170 23                   inc     HL              ; Move to next byte
 904+ 2171 C2 6F 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 2174 EB                   ex      DE,HL           ; Next line address to HL
 906+ 2175 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 2176 23                   inc     HL
 908+ 2177 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 2178 C3 63 21             jp      PTRLP           ; Do next line
 910+ 217B
 911+ 217B 2A 4E 60     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 217E 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 217F 4D                   ld      C,L
 914+ 2180 7E                   ld      A,(HL)          ; Get address of next line
 915+ 2181 23                   inc     HL
 916+ 2182 B6                   or      (HL)            ; End of program found?
 917+ 2183 2B                   dec     HL
 918+ 2184 C8                   ret     Z               ; Yes - Line not found
 919+ 2185 23                   inc     HL
 920+ 2186 23                   inc     HL
 921+ 2187 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 2188 23                   inc     HL
 923+ 2189 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 218A 6F                   ld      L,A
 925+ 218B CD 59 23             call    CPDEHL          ; Compare with line in DE
 926+ 218E 60                   ld      H,B             ; HL = Start of this line
 927+ 218F 69                   ld      L,C
 928+ 2190 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 2191 23                   inc     HL
 930+ 2192 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 2193 6F                   ld      L,A             ; Next line to HL
 932+ 2194 3F                   ccf
 933+ 2195 C8                   ret     Z               ; Lines found - Exit
 934+ 2196 3F                   ccf
 935+ 2197 D0                   ret     NC              ; Line not found,at line after
 936+ 2198 C3 7E 21             jp      SRCHLP          ; Keep looking
 937+ 219B
 938+ 219B C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 219C 2A 4E 60     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 219F AF                   xor     A               ; Set program area to empty
 941+ 21A0 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21A1 23                   inc     HL
 943+ 21A2 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21A3 23                   inc     HL
 945+ 21A4 22 64 61             ld      (PROGND),HL     ; Set program end
 946+ 21A7
 947+ 21A7 2A 4E 60     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21AA 2B                   dec     HL
 949+ 21AB
 950+ 21AB 22 F6 60     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 21AE 2A AF 60             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 21B1 22 EB 60             ld      (STRBOT),HL     ; Clear string space
 953+ 21B4 AF                   xor     A
 954+ 21B5 CD B8 25             call    RESTOR          ; Reset DATA pointers
 955+ 21B8 2A 64 61             ld      HL,(PROGND)     ; Get end of program
 956+ 21BB 22 66 61             ld      (VAREND),HL     ; Clear variables
 957+ 21BE 22 68 61             ld      (ARREND),HL     ; Clear arrays
 958+ 21C1
 959+ 21C1 C1           CLREG:  pop     BC              ; Save return address
 960+ 21C2 2A C6 5F             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 21C5 F9                   ld      SP,HL           ; Set stack
 962+ 21C6 21 DB 60             ld      HL,TMSTPL       ; Temporary string pool
 963+ 21C9 22 D9 60             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 21CC AF                   xor     A               ; A = 00
 965+ 21CD 6F                   ld      L,A             ; HL = 0000
 966+ 21CE 67                   ld      H,A
 967+ 21CF 22 FC 60             ld      (CONTAD),HL     ; No CONTinue
 968+ 21D2 32 F3 60             ld      (FORFLG),A      ; Clear FOR flag
 969+ 21D5 22 6C 61             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 21D8 E5                   push    HL              ; HL = 0000
 971+ 21D9 C5                   push    BC              ; Put back return
 972+ 21DA 2A F6 60     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 21DD C9                   ret                     ; Return to execution driver
 974+ 21DE
 975+ 21DE 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 21E0 CD 6A 23             call    OUTC            ; Output character
 977+ 21E3 3E 00                ld      A,NLLCR         ; null char
 978+ 21E5 CD 6A 23             call    OUTC            ; Output character
 979+ 21E8 CD 23 09             call    CURSOR_ON       ; enable cursor
 980+ 21EB 3A 60 61             ld      A,(SERIALS_EN)  ; load serial state
 981+ 21EE EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 21F0 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 21F3 C3 C3 5F             jp      RINPUT          ; Get input line
 984+ 21F6
 985+ 21F6 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 21F7 32 AE 60             ld      (DATFLG),A      ; Reset literal flag
 987+ 21FA 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 21FC 11 51 60             ld      DE,BUFFER       ; Start of input buffer
 989+ 21FF 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 2200 FE 20                cp      SPC             ; Is it a space?
 991+ 2202 CA 7E 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2205 47                   ld      B,A             ; Save character
 993+ 2206 FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 2208 CA 9E 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 220B B7                   or      A               ; Is it end of buffer?
 996+ 220C CA A5 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 220F 3A AE 60             ld      A,(DATFLG)      ; Get data type
 998+ 2212 B7                   or      A               ; Literal?
 999+ 2213 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2214 C2 7E 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 2217 FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 2219 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 221B CA 7E 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 221E 7E                   ld      A,(HL)          ; Get byte again
1005+ 221F FE 30                cp      '0'             ; Is it less than '0'
1006+ 2221 DA 29 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2224 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 2226 DA 7E 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 2229 D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 222A 11 DA 1C             ld      DE,WORDS-1      ; Point to table
1011+ 222D C5                   push    BC              ; Save count
1012+ 222E 01 7A 22             ld      BC,RETNAD       ; Where to return to
1013+ 2231 C5                   push    BC              ; Save return address
1014+ 2232 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2234 7E                   ld      A,(HL)          ; Get byte
1016+ 2235 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 2237 DA 42 22             jp      C,SEARCH        ; Yes - search for words
1018+ 223A FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 223C D2 42 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 223F E6 5F                and     %01011111       ; Force upper case
1021+ 2241 77                   ld      (HL),A          ; Replace byte
1022+ 2242 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 2243 EB                   ex      DE,HL
1024+ 2244 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2245 B6                   or      (HL)            ; Start of word?
1026+ 2246 F2 44 22             jp      P,GETNXT        ; No - move on
1027+ 2249 04                   inc     B               ; Increment token value
1028+ 224A 7E                   ld      A,(HL)          ; Get byte from table
1029+ 224B E6 7F                and     %01111111       ; Strip bit 7
1030+ 224D C8                   ret     Z               ; Return if end of list
1031+ 224E B9                   cp      C               ; Same character as in buffer?
1032+ 224F C2 44 22             jp      NZ,GETNXT       ; No - get next word
1033+ 2252 EB                   ex      DE,HL
1034+ 2253 E5                   push    HL              ; Save start of word
1035+ 2254
1036+ 2254 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 2255 1A                   ld      A,(DE)          ; Get byte from table
1038+ 2256 B7                   or      A               ; End of word ?
1039+ 2257 FA 76 22             jp      M,MATCH         ; Yes - Match found
1040+ 225A 4F                   ld      C,A             ; Save it
1041+ 225B 78                   ld      A,B             ; Get token value
1042+ 225C FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 225E C2 65 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 2261 CD A8 25             call    GETCHR          ; Get next character
1045+ 2264 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 2265 23           NOSPC:  inc     HL              ; Next byte
1047+ 2266 7E                   ld      A,(HL)          ; Get byte
1048+ 2267 FE 61                cp      'a'             ; Less than 'a' ?
1049+ 2269 DA 6E 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 226C E6 5F                and     %01011111       ; Make upper case
1051+ 226E B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 226F CA 54 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 2272 E1                   pop     HL              ; Get back start of word
1054+ 2273 C3 42 22             jp      SEARCH          ; Look at next word
1055+ 2276
1056+ 2276 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 2277 F1                   pop     AF              ; Throw away return
1058+ 2278 EB                   ex      DE,HL
1059+ 2279 C9                   ret                     ; Return to "RETNAD"
1060+ 227A EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 227B 79                   ld      A,C             ; Get token value
1062+ 227C C1                   pop     BC              ; Restore buffer length
1063+ 227D D1                   pop     DE              ; Get destination address
1064+ 227E 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 227F 12                   ld      (DE),A          ; Put byte in buffer
1066+ 2280 13                   inc     DE              ; Move up buffer
1067+ 2281 0C                   inc     C               ; Increment length of buffer
1068+ 2282 D6 3A                sub     ':'             ; End of statement?
1069+ 2284 CA 8C 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 2287 FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 2289 C2 8F 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 228C 32 AE 60     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 228F D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 2291 C2 FF 21             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 2294 47                   ld      B,A             ; Copy rest of buffer
1076+ 2295 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 2296 B7                   or      A               ; End of line ?
1078+ 2297 CA A5 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 229A B8                   cp      B               ; End of statement ?
1080+ 229B CA 7E 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 229E 23           CPYLIT: inc     HL              ; Move up source string
1082+ 229F 12                   ld      (DE),A          ; Save in destination
1083+ 22A0 0C                   inc     C               ; Increment length
1084+ 22A1 13                   inc     DE              ; Move up destination
1085+ 22A2 C3 95 22             jp      NXTCHR          ; Repeat
1086+ 22A5
1087+ 22A5 21 50 60     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22A8 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22A9 13                   inc     DE
1090+ 22AA 12                   ld      (DE),A          ; A = 00
1091+ 22AB 13                   inc     DE
1092+ 22AC 12                   ld      (DE),A          ; A = 00
1093+ 22AD C9                   ret
1094+ 22AE
1095+ 22AE 3A BD 5F     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 22B1 B7                   or      A               ; Is it zero?
1097+ 22B2 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 22B4 32 BD 5F             ld      (NULFLG),A      ; Zero null flag
1099+ 22B7 C2 C2 22             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 22BA 05                   dec     B               ; Decrement length
1101+ 22BB CA DF 22             jp      Z,GETLIN        ; Get line again if empty
1102+ 22BE CD 6A 23             call    OUTC            ; Output null character
1103+ 22C1 3E                   defb    $3E             ; Skip "dec B"
1104+ 22C2 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 22C3 2B                   dec     HL              ; Back space buffer
1106+ 22C4 CA D6 22             jp      Z,OTKLN         ; No buffer - Try again
1107+ 22C7 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 22C8 CD 6A 23             call    OUTC            ; Echo it
1109+ 22CB C3 E8 22             jp      MORINP          ; Get more input
1110+ 22CE
1111+ 22CE 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 22CF 2B                   dec     HL              ; Back space buffer
1113+ 22D0 CD 6A 23             call    OUTC            ; Output character in A
1114+ 22D3 C2 E8 22             jp      NZ,MORINP       ; Not end - Get more
1115+ 22D6 CD 6A 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 22D9 CD 75 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 22DC C3 DF 22             jp      TTYLIN          ; Get line again
1118+ 22DF
1119+ 22DF              GETLIN:
1120+ 22DF 21 51 60     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 22E2 06 01                ld      B,$01           ; Set buffer as empty
1122+ 22E4 AF                   xor     A
1123+ 22E5 32 BD 5F             ld      (NULFLG),A      ; Clear null flag
1124+ 22E8 CD AB 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 22EB 4F                   ld      C,A             ; Save character in C
1126+ 22EC FE 7F                cp      DEL             ; Delete character?
1127+ 22EE CA AE 22             jp      Z,DODEL         ; Yes - Process it
1128+ 22F1 3A BD 5F             ld      A,(NULFLG)      ; Get null flag
1129+ 22F4 B7                   or      A               ; Test null flag status
1130+ 22F5 CA 01 23             jp      Z,PROCES        ; Reset - Process character
1131+ 22F8 3E 00                ld      A,$00           ; Set a null
1132+ 22FA CD 6A 23             call    OUTC            ; Output null
1133+ 22FD AF                   xor     A               ; Clear A
1134+ 22FE 32 BD 5F             ld      (NULFLG),A      ; Reset null flag
1135+ 2301 79           PROCES: ld      A,C             ; Get character
1136+ 2302 FE 07                cp      CTRLG           ; Bell?
1137+ 2304 CA 41 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 2307 FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 2309 CC 36 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 230C 37                   scf                     ; Flag break
1141+ 230D C8                   ret     Z               ; Return if control "C"
1142+ 230E FE 0D                cp      CR              ; Is it enter?
1143+ 2310 CA 6B 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 2313 FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2315 CA D9 22             jp      Z,KILIN         ; Yes - Get another line
1146+ 2318 FE 08                cp      BKSP            ; Is it backspace?
1147+ 231A CA CE 22             jp      Z,DELCHR        ; Yes - Delete character
1148+ 231D FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 231F C2 3C 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 2322 C5                   push    BC              ; Save buffer length
1151+ 2323 D5                   push    DE              ; Save DE
1152+ 2324 E5                   push    HL              ; Save buffer address
1153+ 2325 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 2327 CD D9 4C             call    OUTNCR          ; Output and do CRLF
1155+ 232A 21 51 60             ld      HL,BUFFER       ; Point to buffer start
1156+ 232D CD 41 2F             call    PRS             ; Output buffer
1157+ 2330 E1                   pop     HL              ; Restore buffer address
1158+ 2331 D1                   pop     DE              ; Restore DE
1159+ 2332 C1                   pop     BC              ; Restore buffer length
1160+ 2333 C3 E8 22             jp      MORINP          ; Get another character
1161+ 2336 CD 39 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 2339 C3 75 28             jp      PRNTCRLF        ; output CRLF
1163+ 233C
1164+ 233C FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 233E DA E8 22             jp      C,MORINP        ; Yes - Ignore
1166+ 2341 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 2342 FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2344 3E 08                ld      A,BKSP          ; Set a bell
1169+ 2346 D2 53 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 2349 79                   ld      A,C             ; Get character
1171+ 234A 71                   ld      (HL),C          ; Save in buffer
1172+ 234B 32 F4 60             ld      (LSTBIN),A      ; Save last input byte
1173+ 234E 23                   inc     HL              ; Move up buffer
1174+ 234F 04                   inc     B               ; Increment length
1175+ 2350 C3 E8 22     OUTIT:  jp      MORINP          ; Get another character
1176+ 2353
1177+ 2353 CD 6A 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 2356 C3 50 23             jp      OUTIT           ; get more chars
1179+ 2359
1180+ 2359 7C           CPDEHL: ld      A,H             ; Get H
1181+ 235A 92                   sub     D               ; Compare with D
1182+ 235B C0                   ret     NZ              ; Different - Exit
1183+ 235C 7D                   ld      A,L             ; Get L
1184+ 235D 93                   sub     E               ; Compare with E
1185+ 235E C9                   ret                     ; Return status
1186+ 235F
1187+ 235F 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 2360 E3                   ex      (SP),HL         ; Address of test byte
1189+ 2361 BE                   cp      (HL)            ; Same as in code string?
1190+ 2362 23                   inc     HL              ; Return address
1191+ 2363 E3                   ex      (SP),HL         ; Put it back
1192+ 2364 CA A8 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 2367 C3 5F 20             jp      SNERR           ; Different - ?SN Error
1194+ 236A
1195+ 236A F5           OUTC:   push    AF              ; Save character
1196+ 236B 3A BE 5F             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 236E B7                   or      A               ; Is it set?
1198+ 236F C2 76 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 2372 F1                   pop     AF              ; Restore character
1200+ 2373 C5                   push    BC              ; Save buffer length
1201+ 2374 F5                   push    AF              ; Save character
1202+ 2375 FE 20                cp      SPC             ; Is it a control code?
1203+ 2377 DA 8E 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 237A 3A BB 5F             ld      A,(LWIDTH)      ; Get line width
1205+ 237D 47                   ld      B,A             ; To B
1206+ 237E 3A AB 60             ld      A,(CURPOS)      ; Get cursor position
1207+ 2381 04                   inc     B               ; Width 255?
1208+ 2382 CA 8A 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 2385 05                   dec     B               ; Restore width
1210+ 2386 B8                   cp      B               ; At end of line?
1211+ 2387 CC 75 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 238A 3C           INCLEN: inc     A               ; Move on one character
1213+ 238B 32 AB 60             ld      (CURPOS),A      ; Save new position
1214+ 238E AF           DINPOS: xor     A
1215+ 238F 32 58 61             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 2392 F1                   pop     AF              ; Restore character
1217+ 2393 C1                   pop     BC              ; Restore buffer length
1218+ 2394 F5                   push    AF
1219+ 2395 CD 9D 23             call    SND2VID         ; send char to video
1220+ 2398 F1                   pop     AF
1221+ 2399 CD B1 4C             call    MONOUT          ; send char to serial if enabled
1222+ 239C C9                   ret
1223+ 239D
1224+ 239D              ; print char to video if cursor is on
1225+ 239D 32 1B 61     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23A0 3A 1A 61             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23A3 B7                   or      A               ; is it off?
1228+ 23A4 C8                   ret     Z               ; yes, so return
1229+ 23A5 F3                   di                      ; disable INTs
1230+ 23A6 CD 57 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23A9 FB                   ei                      ; re-enable INTs
1232+ 23AA C9                   ret                     ; return to caller
1233+ 23AB
1234+ 23AB CD FC 3C     CLOTST: call    GETINP          ; Get input character
1235+ 23AE FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 23B0 C0                   ret     NZ              ; No don't flip flag
1237+ 23B1 3A BE 5F             ld      A,(CTLOFG)      ; Get flag
1238+ 23B4 2F                   cpl                     ; Flip it
1239+ 23B5 32 BE 5F             ld      (CTLOFG),A      ; Put it back
1240+ 23B8 A7                   and     A               ; is output enabled?
1241+ 23B9 CC 23 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 23BC 3A 60 61             ld      A,(SERIALS_EN)  ; load serial state
1243+ 23BF EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 23C1 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 23C4 AF                   xor     A               ; Null character
1246+ 23C5 C9                   ret
1247+ 23C6
1248+ 23C6              ; LIST: list the program stored into memory
1249+ 23C6 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 23C7 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 23C8 CD A8 25             call    GETCHR          ; Get next character
1252+ 23CB CA 21 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 23CE FE BF                cp      ZMINUS          ; is it '-'?
1254+ 23D0 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 23D2 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 23D5 CD C2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 23D8 ED 43 1E 61          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 23DC CD 5F 23             call    CHKSYN          ; skip '-'
1259+ 23DF BF                   defb    ZMINUS
1260+ 23E0 CD 78 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 23E3 CD C8 24             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 23E6 ED 43 20 61          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 23EA ED 4B 1E 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 23EE C5                   push    BC              ; store address of line for later use
1265+ 23EF C3 59 24             jp      LISTLP          ; go listing
1266+ 23F2 CD 78 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 23F5 ED 53 24 61  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 23F9 CD C2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 23FC ED 43 1E 61          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 2400 ED 43 20 61          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2404 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2405 CD A8 25             call    GETCHR          ; Get next character
1273+ 2408 CA 14 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 240B FE BF                cp      ZMINUS          ; is it '-'?
1275+ 240D CA 39 24             jp      Z,LST03         ; yes, read ending line
1276+ 2410 C5           LST06:  push    BC              ; store address for later use
1277+ 2411 C3 59 24             jp      LISTLP          ; jump to list
1278+ 2414 ED 5B 24 61  LSTNOT: ld      DE,(TMPBFR4)
1279+ 2418 CD C2 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 241B DA 10 24             jp      C,LST06
1281+ 241E C3 BF 20             jp      PRNTOK
1282+ 2421 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2424 CD C2 24             call    SRCHLIN         ; get address of last line
1284+ 2427 ED 43 20 61          ld      (TMPBFR2),BC    ; store it
1285+ 242B 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 242E CD C2 24             call    SRCHLIN         ; get address of first line
1287+ 2431 ED 43 1E 61          ld      (TMPBFR1),BC    ; store it
1288+ 2435 C5                   push    BC              ; store address of starting line for later use
1289+ 2436 C3 59 24             jp      LISTLP          ; start printing
1290+ 2439 CD 5F 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 243C BF                   defb    ZMINUS
1292+ 243D CD 78 26             call    ATOH            ; look for another number (return into DE)
1293+ 2440 7A                   ld      A,D
1294+ 2441 B3                   or      E               ; is line=0?
1295+ 2442 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2444 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 2447 CD C2 24             call    SRCHLIN         ; get address of last line
1298+ 244A C3 50 24             jp      LST02
1299+ 244D CD C8 24     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 2450 ED 43 20 61  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 2454 ED 4B 1E 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 2458 C5                   push    BC              ; store it for later use
1303+ 2459 E1           LISTLP: pop     HL              ; Restore address of line
1304+ 245A 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 245B 23                   inc     HL
1306+ 245C 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 245D 23                   inc     HL
1308+ 245E 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 245F B1                   or      C
1310+ 2460 CA BF 20             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 2463 CD D3 25             call    TSTBRK          ; Test for break key
1312+ 2466 CD D6 24             call    TSTSPC          ; test for space
1313+ 2469 C5                   push    BC              ; Save address of next line
1314+ 246A 3A 13 61             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 246D A7                   and     A               ; is it at the beginning of a new line?
1316+ 246E 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 2470 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 2472 CD B1 4C             call    MONOUT          ; to serial if it's open
1319+ 2475 AF                   xor     A               ; then, set cursor
1320+ 2476 32 AB 60             ld      (CURPOS),A      ; to position 0
1321+ 2479 18 03                jr      LST07           ; and continue
1322+ 247B CD 75 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 247E 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 247F 23                   inc     HL
1325+ 2480 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 2481 23                   inc     HL
1327+ 2482 E5                   push    HL              ; Save address of line start
1328+ 2483 EB                   ex      DE,HL           ; Line number to HL
1329+ 2484 CD E0 39             call    PRNTHL          ; Output line number in decimal
1330+ 2487 3E 20                ld      A,SPC           ; Space after line number
1331+ 2489 E1                   pop     HL              ; Restore start of line address
1332+ 248A CD 6A 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 248D 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 248E B7                   or      A               ; End of line?
1335+ 248F 23                   inc     HL              ; To next byte in line
1336+ 2490 CA B4 24             jp      Z,NXTLN         ; Yes - check next line
1337+ 2493 F2 8A 24             jp      P,LSTLP2        ; No token - output it
1338+ 2496 D6 7F                sub     ZEND-1          ; Find and output word
1339+ 2498 4F                   ld      C,A             ; Token offset+1 to C
1340+ 2499 11 DB 1C             ld      DE,WORDS        ; Reserved word list
1341+ 249C 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 249D 13                   inc     DE              ; Move on to next
1343+ 249E B7                   or      A               ; Is it start of word?
1344+ 249F F2 9C 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24A2 0D                   dec     C               ; Count words
1346+ 24A3 C2 9C 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24A6 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24A8 CD 6A 23             call    OUTC            ; Output character
1349+ 24AB 1A                   ld      A,(DE)          ; Get next character
1350+ 24AC 13                   inc     DE              ; Move on to next
1351+ 24AD B7                   or      A               ; Is it end of word?
1352+ 24AE F2 A6 24             jp      P,OUTWRD        ; No - output the rest
1353+ 24B1 C3 8D 24             jp      LSTLP3          ; Next byte in line
1354+ 24B4 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 24B5 2A 20 61             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 24B8 CD DF 4C             call    CMP16           ; check if current line is over last printable line
1357+ 24BB DA BF 20             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 24BE D5                   push    DE              ; store address of current line
1359+ 24BF C3 59 24             jp      LISTLP          ; continue listing
1360+ 24C2              ; look for the address of a program line
1361+ 24C2 E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 24C3 CD 7B 21             call    SRCHLN          ; search for line number in DE
1363+ 24C6 E1                   pop     HL              ; retrieve HL
1364+ 24C7 C9                   ret                     ; return to caller
1365+ 24C8              ; look for the address of a program line - if the line isn't found,
1366+ 24C8              ; it look backward for the previous line
1367+ 24C8 E5           SRCLN:  push    HL              ; store HL
1368+ 24C9 CD 7B 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 24CC DA D4 24             jp      C,LVSRLN        ; found it, leave loop
1370+ 24CF 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 24D0 7B                   ld      A,E
1372+ 24D1 B2                   or      D               ; is line number zero?
1373+ 24D2 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 24D4 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 24D5 C9                   ret                     ; return to caller
1376+ 24D6
1377+ 24D6              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 24D6              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 24D6 3A 5A 61     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 24D9 FE 20                cp      SPC             ; Is it SPACE?
1381+ 24DB C0                   ret     NZ              ; No, return
1382+ 24DC CD FC 3C     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 24DF FE 20                cp      SPC             ; is it SPACE?
1384+ 24E1 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 24E3 AF                   xor     A
1386+ 24E4 32 5A 61             ld      (TMPKEYBFR),A   ; reset key
1387+ 24E7 C9                   ret                     ; return to caller
1388+ 24E8 FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 24EA 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 24EC C3 0B 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 24EF
1392+ 24EF
1393+ 24EF 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 24F1 32 F3 60             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 24F4 CD 68 27             call    LET             ; Set up initial index
1396+ 24F7 C1                   pop     BC              ; Drop RETurn address
1397+ 24F8 E5                   push    HL              ; Save code string address
1398+ 24F9 CD 51 27             call    DATA            ; Get next statement address
1399+ 24FC 22 EF 60             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 24FF 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 2502 39                   add     HL,SP           ; Point to it
1402+ 2503 CD EC 1F     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 2506 D1                   pop     DE              ; Get code string address
1404+ 2507 C2 1F 25             jp      NZ,FORFND       ; No nesting found
1405+ 250A 09                   add     HL,BC           ; Move into "FOR" block
1406+ 250B D5                   push    DE              ; Save code string address
1407+ 250C 2B                   dec     HL
1408+ 250D 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 250E 2B                   dec     HL
1410+ 250F 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 2510 23                   inc     HL
1412+ 2511 23                   inc     HL
1413+ 2512 E5                   push    HL              ; Save block address
1414+ 2513 2A EF 60             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 2516 CD 59 23             call    CPDEHL          ; Compare the FOR loops
1416+ 2519 E1                   pop     HL              ; Restore block address
1417+ 251A C2 03 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 251D D1                   pop     DE              ; Restore code string address
1419+ 251E F9                   ld      SP,HL           ; Remove all nested loops
1420+ 251F
1421+ 251F EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 2520 0E 08                ld      C,$08
1423+ 2522 CD 1C 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2525 E5                   push    HL              ; Save code string address
1425+ 2526 2A EF 60             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 2529 E3                   ex      (SP),HL         ; Save and restore code string
1427+ 252A E5                   push    HL              ; Re-save code string address
1428+ 252B 2A C8 5F             ld      HL,(LINEAT)     ; Get current line number
1429+ 252E E3                   ex      (SP),HL         ; Save and restore code string
1430+ 252F CD 3C 2A             call    TSTNUM          ; Make sure it's a number
1431+ 2532 CD 5F 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2535 B8                   defb    ZTO             ; "TO" token
1433+ 2536 CD 39 2A             call    GETNUM          ; Get "TO" expression value
1434+ 2539 E5                   push    HL              ; Save code string address
1435+ 253A CD 92 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 253D E1                   pop     HL              ; Restore code string address
1437+ 253E C5                   push    BC              ; Save "TO" value in block
1438+ 253F D5                   push    DE
1439+ 2540 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 2543 51                   ld      D,C             ; C=0
1441+ 2544 5A                   ld      E,D             ; D=0
1442+ 2545 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 2546 FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 2548 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 254A C2 5B 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 254D CD A8 25             call    GETCHR          ; Jump over "STEP" token
1447+ 2550 CD 39 2A             call    GETNUM          ; Get step value
1448+ 2553 E5                   push    HL              ; Save code string address
1449+ 2554 CD 92 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 2557 CD 46 38             call    TSTSGN          ; Test sign of FPREG
1451+ 255A E1                   pop     HL              ; Restore code string address
1452+ 255B C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 255C D5                   push    DE
1454+ 255D F5                   push    AF              ; Save sign of STEP
1455+ 255E 33                   inc     SP              ; Don't save flags
1456+ 255F E5                   push    HL              ; Save code string address
1457+ 2560 2A F6 60             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 2563 E3                   ex      (SP),HL         ; Save and restore code string
1459+ 2564 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 2566 C5                   push    BC              ; Save it
1461+ 2567 33                   inc     SP              ; Don't save C
1462+ 2568
1463+ 2568 CD D3 25     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 256B 22 F6 60             ld      (BRKLIN),HL     ; Save code address for break
1465+ 256E 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 256F FE 3A                cp      ':'             ; Multi statement line?
1467+ 2571 CA 88 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 2574 B7                   or      A               ; End of line?
1469+ 2575 C2 5F 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 2578 23                   inc     HL              ; Point to address of next line
1471+ 2579 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 257A 23                   inc     HL
1473+ 257B B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 257C CA FA 25             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 257F 23                   inc     HL              ; Point to line number
1476+ 2580 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 2581 23                   inc     HL
1478+ 2582 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 2583 EB                   ex      DE,HL           ; Line number to HL
1480+ 2584 22 C8 5F             ld      (LINEAT),HL     ; Save as current line number
1481+ 2587 EB                   ex      DE,HL           ; Line number back to DE
1482+ 2588 CD A8 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 258B 11 68 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 258E D5                   push    DE              ; Save for RETurn
1485+ 258F C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 2590
1487+ 2590 D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 2592 DA 68 27             jp      C,LET           ; No - try to assign it
1489+ 2595 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 2597 D2 5F 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 259A 07                   rlca                    ; Double it
1492+ 259B 4F                   ld      C,A             ; BC = Offset into table
1493+ 259C 06 00                ld      B,0
1494+ 259E EB                   ex      DE,HL           ; Save code string address
1495+ 259F 21 6C 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25A2 09                   add     HL,BC           ; Point to routine address
1497+ 25A3 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25A4 23                   inc     HL
1499+ 25A5 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25A6 C5                   push    BC              ; Save routine address
1501+ 25A7 EB                   ex      DE,HL           ; Restore code string address
1502+ 25A8
1503+ 25A8              ; get a char from input buffer: exit with NC if character found is
1504+ 25A8              ; not a number; exit with Z if nothing found; char is into A
1505+ 25A8 23           GETCHR: inc     HL              ; Point to next character
1506+ 25A9 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25AA FE 3A                cp      ':'             ; Z if ':'
1508+ 25AC D0                   ret     NC              ; NC if > "9"
1509+ 25AD FE 20                cp      SPC
1510+ 25AF CA A8 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 25B2 FE 30                cp      '0'
1512+ 25B4 3F                   ccf                     ; NC if < '0'
1513+ 25B5 3C                   inc     A               ; Test for zero - Leave carry
1514+ 25B6 3D                   dec     A               ; Z if Null
1515+ 25B7 C9                   ret
1516+ 25B8
1517+ 25B8 EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 25B9 2A 4E 60             ld      HL,(BASTXT)     ; Point to start of program
1519+ 25BC CA CD 25             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 25BF EB                   ex      DE,HL           ; Restore code string address
1521+ 25C0 CD 78 26             call    ATOH            ; Get line number to DE
1522+ 25C3 E5                   push    HL              ; Save code string address
1523+ 25C4 CD 7B 21             call    SRCHLN          ; Search for line number in DE
1524+ 25C7 60                   ld      H,B             ; HL = Address of line
1525+ 25C8 69                   ld      L,C
1526+ 25C9 D1                   pop     DE              ; Restore code string address
1527+ 25CA D2 27 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 25CD 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 25CE 22 6A 61     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 25D1 EB                   ex      DE,HL           ; Restore code string address
1531+ 25D2 C9                   ret
1532+ 25D3
1533+ 25D3
1534+ 25D3              ; check if CTRL-C is into input buffer
1535+ 25D3 DF           TSTBRK: rst     $18             ; Check input status
1536+ 25D4 C8                   ret     Z               ; No key, go back
1537+ 25D5 D7                   rst     $10             ; Get the key into A
1538+ 25D6 FE 1B                cp      ESC             ; Escape key?
1539+ 25D8 28 11                jr      Z,BRK           ; Yes, break
1540+ 25DA FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 25DC 28 0D                jr      Z,BRK           ; Yes, break
1542+ 25DE FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 25E0 C0                   ret     NZ              ; Other key, ignore
1544+ 25E1
1545+ 25E1
1546+ 25E1              ; wait for a key while listing
1547+ 25E1 D7           STALL:  rst     $10             ; Wait for key
1548+ 25E2 FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 25E4 C8                   ret     Z               ; Release the chokehold
1550+ 25E5 FE 03                cp      CTRLC           ; Second break?
1551+ 25E7 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 25E9 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 25EB
1554+ 25EB 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 25ED 32 C2 5F             ld      (BRKFLG),A      ; Store it
1556+ 25F0
1557+ 25F0 C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 25F1 F6                   defb    $F6             ; Flag "STOP"
1559+ 25F2 C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 25F3 22 F6 60             ld      (BRKLIN),HL     ; Save point of break
1561+ 25F6 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 25F7 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 25F9 C1                   pop     BC              ; Return not needed and more
1564+ 25FA 2A C8 5F     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 25FD F5                   push    AF              ; Save STOP / END status
1566+ 25FE 7D                   ld      A,L             ; Is it direct break?
1567+ 25FF A4                   and     H
1568+ 2600 3C                   inc     A               ; Line is -1 if direct break
1569+ 2601 CA 0D 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2604 22 FA 60             ld      (ERRLIN),HL     ; Save line of break
1571+ 2607 2A F6 60             ld      HL,(BRKLIN)     ; Get point of break
1572+ 260A 22 FC 60             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 260D AF           NOLIN:  xor     A
1574+ 260E 32 BE 5F             ld      (CTLOFG),A      ; Enable output
1575+ 2611 CD 63 28             call    STTLIN          ; Start a new line
1576+ 2614 F1                   pop     AF              ; Restore STOP / END status
1577+ 2615 21 E2 1F             ld      HL,BRKMSG       ; "Break" message
1578+ 2618 C2 1E 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 261B C3 BF 20             jp      PRNTOK          ; Go to command mode
1580+ 261E CD 39 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 2621 C3 9D 20             jp      ERRIN           ; print message
1582+ 2624
1583+ 2624
1584+ 2624              ; CONTinue after a break/error
1585+ 2624 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 2627 22 CA 5F             ld      (HLPLN),HL      ; ...HELP line register
1587+ 262A 2A FC 60             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 262D 7C                   ld      A,H             ; Is it zero?
1589+ 262E B5                   or      L
1590+ 262F 1E 20                ld      E,CN            ; ?CN Error
1591+ 2631 CA 79 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2634 EB                   ex      DE,HL           ; Save code string address
1593+ 2635 2A FA 60             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 2638 22 C8 5F             ld      (LINEAT),HL     ; Set up current line number
1595+ 263B EB                   ex      DE,HL           ; Restore code string address
1596+ 263C C9                   ret                     ; CONTinue where left off
1597+ 263D
1598+ 263D E5           ACCSUM: push    HL              ; Save address in array
1599+ 263E 2A BF 5F             ld      HL,(CHKSUM)     ; Get check sum
1600+ 2641 06 00                ld      B,$00           ; BC - Value of byte
1601+ 2643 4F                   ld      C,A
1602+ 2644 09                   add     HL,BC           ; Add byte to check sum
1603+ 2645 22 BF 5F             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 2648 E1                   pop     HL              ; Restore address in array
1605+ 2649 C9                   ret
1606+ 264A
1607+ 264A 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 264B FE 41                cp      'A'             ; < 'a' ?
1609+ 264D D8                   ret     C               ; Carry set if not letter
1610+ 264E FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 2650 3F                   ccf
1612+ 2651 C9                   ret                     ; Carry set if not letter
1613+ 2652
1614+ 2652 CD A8 25     FPSINT: call    GETCHR          ; Get next character
1615+ 2655 CD 39 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 2658 CD 46 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 265B FA 73 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 265E 3A 75 61     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 2661 FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 2663 DA EE 38             jp      C,FPINT         ; Yes - convert it
1621+ 2666 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 2669 11 00 00             ld      DE,$0000
1623+ 266C E5                   push    HL              ; Save code string address
1624+ 266D CD C1 38             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 2670 E1                   pop     HL              ; Restore code string address
1626+ 2671 51                   ld      D,C             ; MSB to D
1627+ 2672 C8                   ret     Z               ; Return if in range
1628+ 2673 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 2675 C3 79 20             jp      ERROR           ; Output error-
1630+ 2678
1631+ 2678
1632+ 2678              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 2678 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 2679 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 267C CD A8 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 267F D0                   ret     NC              ; Exit if not a digit
1637+ 2680 E5                   push    HL              ; Save code string address
1638+ 2681 F5                   push    AF              ; Save digit
1639+ 2682 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 2685 CD 59 23             call    CPDEHL          ; Number in range?
1641+ 2688 DA 5F 20             jp      C,SNERR         ; No - ?SN Error
1642+ 268B 62                   ld      H,D             ; HL = Number
1643+ 268C 6B                   ld      L,E
1644+ 268D 19                   add     HL,DE           ; Times 2
1645+ 268E 29                   add     HL,HL           ; Times 4
1646+ 268F 19                   add     HL,DE           ; Times 5
1647+ 2690 29                   add     HL,HL           ; Times 10
1648+ 2691 F1                   pop     AF              ; Restore digit
1649+ 2692 D6 30                sub     '0'             ; Make it 0 to 9
1650+ 2694 5F                   ld      E,A             ; DE = Value of digit
1651+ 2695 16 00                ld      D,0
1652+ 2697 19                   add     HL,DE           ; Add to number
1653+ 2698 EB                   ex      DE,HL           ; Number to DE
1654+ 2699 E1                   pop     HL              ; Restore code string address
1655+ 269A C3 7C 26             jp      GTLNLP          ; Go to next character
1656+ 269D
1657+ 269D CA AB 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26A0 CD 39 2A             call    GETNUM          ; Evaluate a number
1659+ 26A3 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26A6 2B                   dec     HL              ; Cancel increment
1661+ 26A7 CD A8 25             call    GETCHR          ; Get next character
1662+ 26AA E5                   push    HL              ; Save code string address
1663+ 26AB 2A AF 60             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 26AE CA C6 26             jp      Z,STORED        ; No value given - Use stored
1665+ 26B1 E1                   pop     HL              ; Restore code string address
1666+ 26B2 CD 5F 23             call    CHKSYN          ; Check for comma
1667+ 26B5 2C                   defb    ','
1668+ 26B6 D5                   push    DE              ; Save number
1669+ 26B7 CD 39 2A             call    GETNUM          ; Evaluate a number
1670+ 26BA CD 5E 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 26BD 2B                   dec     HL              ; Cancel increment
1672+ 26BE CD A8 25             call    GETCHR          ; Get next character
1673+ 26C1 C2 5F 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 26C4 E3                   ex      (SP),HL         ; Save code string address
1675+ 26C5 EB                   ex      DE,HL           ; Number to DE
1676+ 26C6 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 26C7 93                   sub     E               ; Subtract LSB of string space
1678+ 26C8 5F                   ld      E,A             ; Save LSB
1679+ 26C9 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 26CA 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 26CB 57                   ld      D,A             ; Save MSB
1682+ 26CC DA 34 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 26CF E5                   push    HL              ; Save RAM top
1684+ 26D0 2A 64 61             ld      HL,(PROGND)     ; Get program end
1685+ 26D3 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 26D6 09                   add     HL,BC           ; Get lowest address
1687+ 26D7 CD 59 23             call    CPDEHL          ; Enough memory?
1688+ 26DA D2 34 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 26DD EB                   ex      DE,HL           ; RAM top to HL
1690+ 26DE 22 C6 5F             ld      (STRSPC),HL     ; Set new string space
1691+ 26E1 E1                   pop     HL              ; End of memory to use
1692+ 26E2 22 AF 60             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 26E5 E1                   pop     HL              ; Restore code string address
1694+ 26E6 C3 AB 21             jp      INTVAR          ; Initialise variables
1695+ 26E9
1696+ 26E9 E5           RUN:    push    HL              ; store HL
1697+ 26EA 21 FF FF             ld      HL,-1           ; reset...
1698+ 26ED 22 CA 5F             ld      (HLPLN),HL      ; ...HELP line register
1699+ 26F0 E1                   pop     HL              ; retrieve HL
1700+ 26F1 CA A7 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 26F4 CD AB 21             call    INTVAR          ; Initialise variables
1702+ 26F7 01 68 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 26FA C3 0D 27             jp      RUNLIN          ; RUN from line number
1704+ 26FD
1705+ 26FD 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 26FF CD 1C 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 2702 C1                   pop     BC              ; Get return address
1708+ 2703 E5                   push    HL              ; Save code string for RETURN
1709+ 2704 E5                   push    HL              ; And for GOSUB routine
1710+ 2705 2A C8 5F             ld      HL,(LINEAT)     ; Get current line
1711+ 2708 E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 2709 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 270B F5                   push    AF              ; Save token
1714+ 270C 33                   inc     SP              ; Don't save flags
1715+ 270D
1716+ 270D C5           RUNLIN: push    BC              ; Save return address
1717+ 270E CD 78 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 2711 CD 53 27             call    REM             ; Get end of line
1719+ 2714 E5                   push    HL              ; Save end of line
1720+ 2715 2A C8 5F             ld      HL,(LINEAT)     ; Get current line
1721+ 2718 CD 59 23             call    CPDEHL          ; Line after current?
1722+ 271B E1                   pop     HL              ; Restore end of line
1723+ 271C 23                   inc     HL              ; Start of next line
1724+ 271D DC 7E 21             call    C,SRCHLP        ; Line is after current line
1725+ 2720 D4 7B 21             call    NC,SRCHLN       ; Line is before current line
1726+ 2723 60                   ld      H,B             ; Set up code string address
1727+ 2724 69                   ld      L,C
1728+ 2725 2B                   dec     HL              ; Incremented after
1729+ 2726 D8                   ret     C               ; Line found
1730+ 2727 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 2729 C3 79 20             jp      ERROR           ; Output error message
1732+ 272C
1733+ 272C C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 272D 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 272F CD E8 1F             call    BAKSTK          ; Look "GOSUB" block
1736+ 2732 F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 2733 FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2735 1E 04                ld      E,RG            ; ?RG Error
1739+ 2737 C2 79 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 273A E1                   pop     HL              ; Get RETURN line number
1741+ 273B 22 C8 5F             ld      (LINEAT),HL     ; Save as current
1742+ 273E 23                   inc     HL              ; Was it from direct statement?
1743+ 273F 7C                   ld      A,H
1744+ 2740 B5                   or      L               ; Return to line
1745+ 2741 C2 4B 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2744 3A F4 60             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 2747 B7                   or      A               ; If so buffer is corrupted
1748+ 2748 C2 BE 20             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 274B 21 68 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 274E E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 274F 3E                   defb    $3E             ; Skip "pop HL"
1752+ 2750 E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 2751
1754+ 2751 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 2753 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 2755 06 00                ld      B,$00
1757+ 2757 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 2758 48                   ld      C,B
1759+ 2759 47                   ld      B,A             ; Statement end byte
1760+ 275A 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 275B B7                   or      A               ; End of line?
1762+ 275C C8                   ret     Z               ; Yes - Exit
1763+ 275D B8                   cp      B               ; End of statement?
1764+ 275E C8                   ret     Z               ; Yes - Exit
1765+ 275F 23                   inc     HL              ; Next byte
1766+ 2760 FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 2762 CA 57 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 2765 C3 5A 27             jp      NXTSTT          ; Keep looking
1769+ 2768
1770+ 2768 CD 48 2C     LET:    call    GETVAR          ; Get variable name
1771+ 276B CD 5F 23             call    CHKSYN          ; Make sure "=" follows
1772+ 276E C9                   defb    ZEQUAL          ; "=" token
1773+ 276F D5                   push    DE              ; Save address of variable
1774+ 2770 3A AD 60             ld      A,(TYPE)        ; Get data type
1775+ 2773 F5                   push    AF              ; Save type
1776+ 2774 CD 4B 2A             call    EVAL            ; Evaluate expression
1777+ 2777 F1                   pop     AF              ; Restore type
1778+ 2778 E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 2779 22 F6 60             ld      (BRKLIN),HL     ; Save address of variable
1780+ 277C 1F                   rra                     ; Adjust type
1781+ 277D CD 3E 2A             call    CHKTYP          ; Check types are the same
1782+ 2780 CA BB 27             jp      Z,LETNUM        ; Numeric - Move value
1783+ 2783 E5           LETSTR: push    HL              ; Save address of string var
1784+ 2784 2A 72 61             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 2787 E5                   push    HL              ; Save it on stack
1786+ 2788 23                   inc     HL              ; Skip over length
1787+ 2789 23                   inc     HL
1788+ 278A 5E                   ld      E,(HL)          ; LSB of string address
1789+ 278B 23                   inc     HL
1790+ 278C 56                   ld      D,(HL)          ; MSB of string address
1791+ 278D 2A 4E 60             ld      HL,(BASTXT)     ; Point to start of program
1792+ 2790 CD 59 23             call    CPDEHL          ; Is string before program?
1793+ 2793 D2 AA 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 2796 2A C6 5F             ld      HL,(STRSPC)     ; Point to string space
1795+ 2799 CD 59 23             call    CPDEHL          ; Is string literal in program?
1796+ 279C D1                   pop     DE              ; Restore address of string
1797+ 279D D2 B2 27             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27A0 21 E7 60             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27A3 CD 59 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27A6 D2 B2 27             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27A9 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27AA D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27AB CD A2 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 27AE EB                   ex      DE,HL           ; Address of string entry
1805+ 27AF CD DB 2E             call    SAVSTR          ; Save string in string area
1806+ 27B2 CD A2 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 27B5 E1                   pop     HL              ; Get string pointer
1808+ 27B6 CD A1 38             call    DETHL4          ; Move string pointer to var
1809+ 27B9 E1                   pop     HL              ; Restore code string address
1810+ 27BA C9                   ret
1811+ 27BB
1812+ 27BB E5           LETNUM: push    HL              ; Save address of variable
1813+ 27BC CD 9E 38             call    FPTHL           ; Move value to variable
1814+ 27BF D1                   pop     DE              ; Restore address of variable
1815+ 27C0 E1                   pop     HL              ; Restore code string address
1816+ 27C1 C9                   ret
1817+ 27C2
1818+ 27C2 CD BF 32     ON:     call    GETINT          ; Get integer 0-255
1819+ 27C5 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 27C6 47                   ld      B,A             ; Save in B
1821+ 27C7 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 27C9 CA D1 27             jp      Z,ONGO          ; Yes - Find line number
1823+ 27CC CD 5F 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 27CF 88                   defb    ZGOTO           ; "GOTO" token
1825+ 27D0 2B                   dec     HL              ; Cancel increment
1826+ 27D1 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 27D2 0D           ONGOLP: dec     C               ; Count branches
1828+ 27D3 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 27D4 CA 90 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 27D7 CD 79 26             call    GETLN           ; Get line number to DE
1831+ 27DA FE 2C                cp      ','             ; Another line number?
1832+ 27DC C0                   ret     NZ              ; No - Drop through
1833+ 27DD C3 D2 27             jp      ONGOLP          ; Yes - loop
1834+ 27E0
1835+ 27E0 CD 4B 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 27E3 7E                   ld      A,(HL)          ; Get token
1837+ 27E4 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 27E6 CA EE 27             jp      Z,IFGO          ; Yes - Get line
1839+ 27E9 CD 5F 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 27EC BB                   defb    ZTHEN           ; "THEN" token
1841+ 27ED 2B                   dec     HL              ; Cancel increment
1842+ 27EE CD 3C 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 27F1 CD 46 38             call    TSTSGN          ; Test state of expression
1844+ 27F4 CA 00 28             jp      Z,IF1           ; False - Jump over
1845+ 27F7 CD A8 25     IF0:    call    GETCHR          ; Get next character
1846+ 27FA DA 0E 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 27FD C3 8F 25             jp      IFJMP           ; Otherwise do statement
1848+ 2800 0E AF        IF1:    ld      C,ZELSE
1849+ 2802 CD 55 27             call    REM+2           ; check statement
1850+ 2805 B7                   or      A               ; end of line?
1851+ 2806 C8                   ret     Z               ; yes, leave
1852+ 2807 FE AF                cp      ZELSE
1853+ 2809 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 280B C3 F7 27             jp      IF0             ; return to IF
1855+ 280E
1856+ 280E
1857+ 280E 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 280F CD A8 25             call    GETCHR          ; Get next character
1859+ 2812 CA 75 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2815 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 2816 FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 2818 CA 9D 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 281B FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 281D CA 9D 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 2820 E5                   push    HL              ; Save code string address
1866+ 2821 FE 2C                cp      ','             ; Comma?
1867+ 2823 CA 84 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 2826 FE 3B                cp      ';'             ; Semi-colon?
1869+ 2828 CA C1 28             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 282B C1                   pop     BC              ; Code string address to BC
1871+ 282C CD 4B 2A             call    EVAL            ; Evaluate expression
1872+ 282F E5                   push    HL              ; Save code string address
1873+ 2830 3A AD 60             ld      A,(TYPE)        ; Get variable type
1874+ 2833 B7                   or      A               ; Is it a string variable?
1875+ 2834 C2 5C 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 2837 CD EB 39             call    NUMASC          ; Convert number to text
1877+ 283A CD FF 2E             call    CRTST           ; Create temporary string
1878+ 283D 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 283F 2A 72 61             ld      HL,(FPREG)      ; Get length of output
1880+ 2842 34                   inc     (HL)            ; Plus 1 for the space
1881+ 2843 2A 72 61             ld      HL,(FPREG)      ; < Not needed >
1882+ 2846 3A BB 5F             ld      A,(LWIDTH)      ; Get width of line
1883+ 2849 47                   ld      B,A             ; To B
1884+ 284A 04                   inc     B               ; Width 255 (No limit)?
1885+ 284B CA 58 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 284E 04                   inc     B               ; Adjust it
1887+ 284F 3A AB 60             ld      A,(CURPOS)      ; Get cursor position
1888+ 2852 86                   add     A,(HL)          ; Add length of string
1889+ 2853 3D                   dec     A               ; Adjust it
1890+ 2854 B8                   cp      B               ; Will output fit on this line?
1891+ 2855 D4 75 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 2858 CD 44 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 285B AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 285C C4 44 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 285F E1                   pop     HL              ; Restore code string address
1896+ 2860 C3 0E 28             jp      MRPRNT          ; See if more to PRINT
1897+ 2863
1898+ 2863 3A AB 60     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 2866 B7                   or      A               ; Already at start?
1900+ 2867 C8                   ret     Z               ; Yes - Do nothing
1901+ 2868 C3 75 28             jp      PRNTCRLF        ; Start a new line
1902+ 286B
1903+ 286B AF           ENDINP: xor     A
1904+ 286C 32 58 61             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 286F 77                   ld      (HL),A          ; Mark end of buffer
1906+ 2870 21 50 60             ld      HL,BUFFER-1     ; Point to buffer
1907+ 2873 18 0A                jr      CNTEND
1908+ 2875 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 2877 CD 6A 23             call    OUTC            ; Output character
1910+ 287A 3E 0A                ld      A,LF            ; Load a LF
1911+ 287C CD 6A 23             call    OUTC            ; Output character
1912+ 287F AF           CNTEND: xor     A               ; Set to position 0
1913+ 2880 32 AB 60             ld      (CURPOS),A      ; Store it
1914+ 2883 C9                   ret                     ; return to caller
1915+ 2884
1916+ 2884 3A BC 5F     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 2887 47                   ld      B,A             ; Save in B
1918+ 2888 3A 13 61             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 288B B8                   cp      B               ; Within the limit?
1920+ 288C D4 75 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 288F D2 C1 28             jp      NC,NEXITM       ; Get next item
1922+ 2892 D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 2894 D2 92 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 2897 2F                   cpl                     ; Number of null chars to output
1925+ 2898 0E 00                ld      C,NLLCR         ; null char
1926+ 289A C3 B7 28             jp      ASPCS           ; Output them
1927+ 289D
1928+ 289D F5           DOTAB:  push    AF              ; Save token
1929+ 289E CD BC 32             call    FNDNUM          ; Evaluate expression
1930+ 28A1 CD 5F 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28A4 29                   defb    ')'
1932+ 28A5 2B                   dec     HL              ; Back space on to ")"
1933+ 28A6 F1                   pop     AF              ; Restore token
1934+ 28A7 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28A9 D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28AB E5                   push    HL              ; Save code string address
1937+ 28AC CA B2 28             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 28AF 3A 13 61             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 28B2 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 28B3 83                   add     A,E             ; Total number to print
1941+ 28B4 D2 C1 28             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 28B7 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 28B8 47                   ld      B,A             ; Save number to print
1944+ 28B9 79           SPCLP:  ld      A,C             ; char to print
1945+ 28BA CD 6A 23             call    OUTC            ; Output character in A
1946+ 28BD 05                   dec     B               ; Count them
1947+ 28BE C2 B9 28             jp      NZ,SPCLP        ; Repeat if more
1948+ 28C1 E1           NEXITM: pop     HL              ; Restore code string address
1949+ 28C2 CD A8 25             call    GETCHR          ; Get next character
1950+ 28C5 C3 15 28             jp      PRNTLP          ; More to print
1951+ 28C8
1952+ 28C8 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 28CC 6F 20 66 72
1952+ 28D0 6F 6D 20 73
1952+ 28D4 74 61 72 74
1952+ 28D8 0D 00
1953+ 28DA
1954+ 28DA 3A F5 60     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 28DD B7                   or      A
1956+ 28DE C2 59 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 28E1 C1                   pop     BC              ; Throw away code string addr
1958+ 28E2 21 C8 28             ld      HL,REDO         ; "Redo from start" message
1959+ 28E5 CD 41 2F             call    PRS             ; Output string
1960+ 28E8 C3 DA 21             jp      DOAGN           ; Do last INPUT again
1961+ 28EB
1962+ 28EB CD AC 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 28EE 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 28EF FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 28F1 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 28F3 32 BE 5F             ld      (CTLOFG),A      ; Enable output
1967+ 28F6 C2 05 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 28F9 CD 00 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 28FC CD 5F 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 28FF 3B                   defb    ";"
1971+ 2900 E5                   push    HL              ; Save code string address
1972+ 2901 CD 44 2F             call    PRS1            ; Output prompt string
1973+ 2904 3E                   defb    $3E             ; Skip "push HL"
1974+ 2905 E5           NOPMPT: push    HL              ; Save code string address
1975+ 2906 CD DE 21             call    PROMPT          ; Get input with "? " prompt
1976+ 2909 C1                   pop     BC              ; Restore code string address
1977+ 290A DA F7 25             jp      C,INPBRK        ; Break pressed - Exit
1978+ 290D 23                   inc     HL              ; Next byte
1979+ 290E 7E                   ld      A,(HL)          ; Get it
1980+ 290F B7                   or      A               ; End of line?
1981+ 2910 2B                   dec     HL              ; Back again
1982+ 2911 C5                   push    BC              ; Re-save code string address
1983+ 2912 3A 60 61             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2915 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 2917 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 291A CD 38 09             call    CURSOR_OFF      ; disable cursor
1987+ 291D CA 50 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 2920 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 2922 C3 2A 29             jp      NXTITM          ; Get next item
1990+ 2925
1991+ 2925 E5           READ:   push    HL              ; Save code string address
1992+ 2926 2A 6A 61             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 2929 F6                   defb    $F6             ; Flag "READ"
1994+ 292A AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 292B 32 F5 60             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 292E E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 292F C3 36 29             jp      GTVLUS          ; Get values
1998+ 2932
1999+ 2932 CD 5F 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2935 2C                   defb    ','
2001+ 2936 CD 48 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 2939 E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 293A D5                   push    DE              ; Save variable address
2004+ 293B 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 293C FE 2C                cp      ','             ; Comma?
2006+ 293E CA 5E 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 2941 3A F5 60             ld      A,(READFG)      ; Is it READ?
2008+ 2944 B7                   or      A
2009+ 2945 C2 CA 29             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 2948 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 294A CD 6A 23             call    OUTC            ; Output character
2012+ 294D CD DE 21             call    PROMPT          ; Get INPUT with prompt
2013+ 2950 D1                   pop     DE              ; Variable address
2014+ 2951 C1                   pop     BC              ; Code string address
2015+ 2952 DA F7 25             jp      C,INPBRK        ; Break pressed
2016+ 2955 23                   inc     HL              ; Point to next DATA byte
2017+ 2956 7E                   ld      A,(HL)          ; Get byte
2018+ 2957 B7                   or      A               ; Is it zero (No input) ?
2019+ 2958 2B                   dec     HL              ; Back space INPUT pointer
2020+ 2959 C5                   push    BC              ; Save code string address
2021+ 295A CA 50 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 295D D5                   push    DE              ; Save variable address
2023+ 295E 3A AD 60     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 2961 B7                   or      A               ; Is it numeric?
2025+ 2962 CA 88 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 2965 CD A8 25             call    GETCHR          ; Get next character
2027+ 2968 57                   ld      D,A             ; Save input character
2028+ 2969 47                   ld      B,A             ; Again
2029+ 296A FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 296C CA 7C 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 296F 3A F5 60             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 2972 B7                   or      A
2033+ 2973 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 2974 CA 79 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 2977 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 2979 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 297B 2B                   dec     HL              ; Back space for DTSTR
2038+ 297C CD 03 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 297F EB                   ex      DE,HL           ; String address to DE
2040+ 2980 21 93 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 2983 E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 2984 D5                   push    DE              ; Save address of string
2043+ 2985 C3 83 27             jp      LETSTR          ; Assign string to variable
2044+ 2988
2045+ 2988 CD A8 25     INPBIN: call    GETCHR          ; Get next character
2046+ 298B CD 4D 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 298E E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 298F CD 9E 38             call    FPTHL           ; Move FPREG to variable
2049+ 2992 E1                   pop     HL              ; Restore input pointer
2050+ 2993 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 2994 CD A8 25             call    GETCHR          ; Get next character
2052+ 2997 CA 9F 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 299A FE 2C                cp      ','             ; Another value?
2054+ 299C C2 DA 28             jp      NZ,BADINP       ; No - Bad input
2055+ 299F E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29A0 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29A1 CD A8 25             call    GETCHR          ; Get next character
2058+ 29A4 C2 32 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29A7 D1                   pop     DE              ; Restore DATA pointer
2060+ 29A8 3A F5 60             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29AB B7                   or      A
2062+ 29AC EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29AD C2 CE 25             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 29B0 D5                   push    DE              ; Save code string address
2065+ 29B1 B6                   or      (HL)            ; More input given?
2066+ 29B2 21 BA 29             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 29B5 C4 41 2F             call    NZ,PRS          ; Output string if extra given
2068+ 29B8 E1                   pop     HL              ; Restore code string address
2069+ 29B9 C9                   ret
2070+ 29BA
2071+ 29BA 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 29BE 72 61 20 69
2071+ 29C2 67 6E 6F 72
2071+ 29C6 65 64 0D 00
2072+ 29CA
2073+ 29CA CD 51 27     FDTLP:  call    DATA            ; Get next statement
2074+ 29CD B7                   or      A               ; End of line?
2075+ 29CE C2 E3 29             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 29D1 23                   inc     HL
2077+ 29D2 7E                   ld      A,(HL)          ; End of program?
2078+ 29D3 23                   inc     HL
2079+ 29D4 B6                   or      (HL)            ; 00 00 Ends program
2080+ 29D5 1E 06                ld      E,OD            ; ?OD Error
2081+ 29D7 CA 79 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 29DA 23                   inc     HL
2083+ 29DB 5E                   ld      E,(HL)          ; LSB of line number
2084+ 29DC 23                   inc     HL
2085+ 29DD 56                   ld      D,(HL)          ; MSB of line number
2086+ 29DE EB                   ex      DE,HL
2087+ 29DF 22 F1 60             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 29E2 EB                   ex      DE,HL
2089+ 29E3 CD A8 25     FANDT:  call    GETCHR          ; Get next character
2090+ 29E6 FE 83                cp      ZDATA           ; "DATA" token
2091+ 29E8 C2 CA 29             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 29EB C3 5E 29             jp      ANTVLU          ; Found - Convert input
2093+ 29EE
2094+ 29EE 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 29F1 C4 48 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 29F4 22 F6 60             ld      (BRKLIN),HL     ; Save code string address
2097+ 29F7 CD E8 1F             call    BAKSTK          ; Look for "FOR" block
2098+ 29FA C2 65 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 29FD F9                   ld      SP,HL           ; Clear nested loops
2100+ 29FE D5                   push    DE              ; Save index address
2101+ 29FF 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A00 23                   inc     HL
2103+ 2A01 F5                   push    AF              ; Save sign of STEP
2104+ 2A02 D5                   push    DE              ; Save index address
2105+ 2A03 CD 84 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A06 E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A07 E5                   push    HL              ; Save address of index
2108+ 2A08 CD A0 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A0B E1                   pop     HL              ; Restore address of index
2110+ 2A0C CD 9E 38             call    FPTHL           ; Move value to index variable
2111+ 2A0F E1                   pop     HL              ; Restore address of TO value
2112+ 2A10 CD 95 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A13 E5                   push    HL              ; Save address of line of FOR
2114+ 2A14 CD C1 38             call    CMPNUM          ; Compare index with TO value
2115+ 2A17 E1                   pop     HL              ; Restore address of line num
2116+ 2A18 C1                   pop     BC              ; Address of sign of STEP
2117+ 2A19 90                   sub     B               ; Compare with expected sign
2118+ 2A1A CD 95 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A1D CA 29 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A20 EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A21 22 C8 5F             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A24 69                   ld      L,C             ; Set code string to loop
2123+ 2A25 60                   ld      H,B
2124+ 2A26 C3 64 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A29
2126+ 2A29 F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A2A 2A F6 60             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A2D 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A2E FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A30 C2 68 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A33 CD A8 25             call    GETCHR          ; Position to index name
2132+ 2A36 CD F1 29             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A39              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A39
2135+ 2A39 CD 4B 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A3C F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A3D 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A3E 3A AD 60     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A41 8F                   adc     A,A             ; Expected + actual
2140+ 2A42 B7                   or      A               ; Clear carry , set parity
2141+ 2A43 E8                   ret     PE              ; Even parity - Types match
2142+ 2A44 C3 71 20             jp      TMERR           ; Different types - Error
2143+ 2A47
2144+ 2A47 CD 5F 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A4A 28                   defb    '('
2146+ 2A4B 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A4C 16 00                ld      D,$00           ; Precedence value
2148+ 2A4E D5           EVAL1:  push    DE              ; Save precedence
2149+ 2A4F 0E 01                ld      C,$01
2150+ 2A51 CD 1C 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2A54 CD C2 2A             call    OPRND           ; Get next expression value
2152+ 2A57 22 F8 60     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2A5A 2A F8 60     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2A5D C1                   pop     BC              ; Precedence value and operator
2155+ 2A5E 78                   ld      A,B             ; Get precedence value
2156+ 2A5F FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2A61 D4 3C 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2A64 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2A65 16 00                ld      D,$00           ; Clear Last relation
2160+ 2A67 D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2A69 DA 83 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2A6C FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2A6E D2 83 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2A71 FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2A73 17                   rla                     ; <- Test for legal
2166+ 2A74 AA                   xor     D               ; <- combinations of < = >
2167+ 2A75 BA                   cp      D               ; <- by combining last token
2168+ 2A76 57                   ld      D,A             ; <- with current one
2169+ 2A77 DA 5F 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2A7A 22 ED 60             ld      (CUROPR),HL     ; Save address of current token
2171+ 2A7D CD A8 25             call    GETCHR          ; Get next character
2172+ 2A80 C3 67 2A             jp      RLTLP           ; Treat the two as one
2173+ 2A83
2174+ 2A83 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2A84 B7                   or      A
2176+ 2A85 C2 C3 2B             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2A88 7E                   ld      A,(HL)          ; Get operator token
2178+ 2A89 22 ED 60             ld      (CUROPR),HL     ; Save operator address
2179+ 2A8C D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2A8E D8                   ret     C               ; Neither - Exit
2181+ 2A8F FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2A91 D0                   ret     NC              ; No - Exit
2183+ 2A92 5F                   ld      E,A             ; Coded operator
2184+ 2A93 3A AD 60             ld      A,(TYPE)        ; Get data type
2185+ 2A96 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2A97 B3                   or      E               ; Combine with coded operator
2187+ 2A98 7B                   ld      A,E             ; Get coded operator
2188+ 2A99 CA 37 30             jp      Z,CONCAT        ; String concatenation
2189+ 2A9C 07                   rlca                    ; Times 2
2190+ 2A9D 83                   add     A,E             ; Times 3
2191+ 2A9E 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2A9F 21 DA 1E             ld      HL,PRITAB       ; Precedence table
2193+ 2AA2 19                   add     HL,DE           ; To the operator concerned
2194+ 2AA3 78                   ld      A,B             ; Last operator precedence
2195+ 2AA4 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AA5 BA                   cp      D               ; Compare with eval precedence
2197+ 2AA6 D0                   ret     NC              ; Exit if higher precedence
2198+ 2AA7 23                   inc     HL              ; Point to routine address
2199+ 2AA8 CD 3C 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2AAB
2201+ 2AAB C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2AAC 01 5A 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2AAF C5                   push    BC              ; Save on stack for return
2204+ 2AB0 43                   ld      B,E             ; Save operator
2205+ 2AB1 4A                   ld      C,D             ; Save precedence
2206+ 2AB2 CD 77 38             call    STAKFP          ; Move value to stack
2207+ 2AB5 58                   ld      E,B             ; Restore operator
2208+ 2AB6 51                   ld      D,C             ; Restore precedence
2209+ 2AB7 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2AB8 23                   inc     HL
2211+ 2AB9 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2ABA 23                   inc     HL
2213+ 2ABB C5                   push    BC              ; Save routine address
2214+ 2ABC 2A ED 60             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2ABF C3 4E 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2AC2
2217+ 2AC2 AF           OPRND:  xor     A               ; Get operand routine
2218+ 2AC3 32 AD 60             ld      (TYPE),A        ; Set numeric expected
2219+ 2AC6 CD A8 25             call    GETCHR          ; Get next character
2220+ 2AC9 1E 24                ld      E,MO            ; ?MO Error
2221+ 2ACB CA 79 20             jp      Z,ERROR         ; No operand - Error
2222+ 2ACE DA 4D 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2AD1 CD 4A 26             call    CHKLTR          ; See if a letter
2224+ 2AD4 D2 29 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2AD7 FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2AD9 20 12                jr      NZ,NOTAMP
2227+ 2ADB CD A8 25             call    GETCHR          ; Get next character
2228+ 2ADE FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2AE0 CA 11 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2AE3 FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2AE5 CA 81 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2AE8 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2AEA CA 79 20             jp      Z,ERROR         ;
2234+ 2AED FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2AEF CA C2 2A             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2AF2 FE 2E                cp      '.'             ; '.' ?
2237+ 2AF4 CA 4D 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2AF7 FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2AF9 CA 18 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2AFC FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2AFE CA 00 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B01 FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B03 CA 23 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B06 FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B08 CA 64 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B0B D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B0D D2 3A 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B10 CD 47 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B13 CD 5F 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B16 29                   defb    ')'
2251+ 2B17 C9                   ret
2252+ 2B18
2253+ 2B18 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B1A CD 4E 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B1D 2A F8 60             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B20 E5                   push    HL              ; Save next operator address
2257+ 2B21 CD 6F 38             call    INVSGN          ; Negate value
2258+ 2B24 CD 3C 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B27 E1                   pop     HL              ; Restore next operator address
2260+ 2B28 C9                   ret
2261+ 2B29
2262+ 2B29 CD 48 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B2C E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B2D EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B2E 22 72 61             ld      (FPREG),HL      ; Save address of variable
2266+ 2B31 3A AD 60             ld      A,(TYPE)        ; Get type
2267+ 2B34 B7                   or      A               ; Numeric?
2268+ 2B35 CC 84 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B38 E1                   pop     HL              ; Restore code string address
2270+ 2B39 C9                   ret
2271+ 2B3A
2272+ 2B3A 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B3C 07                   rlca                    ; Double function offset
2274+ 2B3D 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B3E C5                   push    BC              ; Save adjusted token value
2276+ 2B3F CD A8 25             call    GETCHR          ; Get next character
2277+ 2B42 79                   ld      A,C             ; Get adjusted token value
2278+ 2B43 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B45 CA 71 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B48 FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B4A CA 13 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B4D FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2B4F DA 6B 2B             jp      C,FNVAL         ; No - Do function
2284+ 2B52 CD 47 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2B55 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2B58 2C                   defb    ','
2287+ 2B59 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2B5C EB                   ex      DE,HL           ; Save code string address
2289+ 2B5D 2A 72 61             ld      HL,(FPREG)      ; Get address of string
2290+ 2B60 E3                   ex      (SP),HL         ; Save address of string
2291+ 2B61 E5                   push    HL              ; Save adjusted token value
2292+ 2B62 EB                   ex      DE,HL           ; Restore code string address
2293+ 2B63 CD BF 32             call    GETINT          ; Get integer 0-255
2294+ 2B66 EB                   ex      DE,HL           ; Save code string address
2295+ 2B67 E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2B68 C3 73 2B             jp      GOFUNC          ; Jump to string function
2297+ 2B6B
2298+ 2B6B CD 10 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2B6E E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2B6F 11 24 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2B72 D5                   push    DE              ; Save on stack
2302+ 2B73 01 97 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2B76 09                   add     HL,BC           ; Point to right address
2304+ 2B77 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2B78 23                   inc     HL              ;
2306+ 2B79 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2B7A 69                   ld      L,C             ; Address to HL
2308+ 2B7B E9                   jp      (HL)            ; Jump to function
2309+ 2B7C
2310+ 2B7C 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2B7D FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2B7F C8                   ret     Z               ; Yes - Return
2313+ 2B80 FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2B82 C8                   ret     Z               ; Yes - Return
2315+ 2B83 14                   inc     D               ; Inc to flag positive exponent
2316+ 2B84 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2B86 C8                   ret     Z               ; Yes - Return
2318+ 2B87 FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2B89 C8                   ret     Z               ; Yes - Return
2320+ 2B8A 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2B8B C9                   ret                     ; Return "NZ"
2322+ 2B8C
2323+ 2B8C              ; execute OR, AND, and XOR operations
2324+ 2B8C AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2B8D 18 07                jr      CNTLGC
2326+ 2B8F AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2B90 D6 01                sub     $01
2328+ 2B92 18 02                jr      CNTLGC
2329+ 2B94 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2B95 3C                   inc     A
2331+ 2B96 F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2B97 CD 3C 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2B9A CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2B9D F1                   pop     AF              ; retrieve operand's flags
2335+ 2B9E EB                   ex      DE,HL           ; <- Get last
2336+ 2B9F C1                   pop     BC              ; <-  value
2337+ 2BA0 E3                   ex      (SP),HL         ; <-  from
2338+ 2BA1 EB                   ex      DE,HL           ; <-  stack
2339+ 2BA2 CD 87 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BA5 F5                   push    AF              ; store operand's flags
2341+ 2BA6 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BA9 F1                   pop     AF              ; retrieve operand's flags
2343+ 2BAA C1                   pop     BC              ; Get value
2344+ 2BAB 79                   ld      A,C             ; Get LSB
2345+ 2BAC 21 22 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2BAF 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2BB1 A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2BB2 4F                   ld      C,A             ; Save LSB
2349+ 2BB3 78                   ld      A,B             ; Get MSB
2350+ 2BB4 A2                   and     D               ; "AND" MSBs
2351+ 2BB5 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2BB6 F2 BE 2B     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2BB9 B3                   or      E               ; "OR" LSBs
2354+ 2BBA 4F                   ld      C,A             ; Save LSB
2355+ 2BBB 78                   ld      A,B             ; Get MSB
2356+ 2BBC B2                   or      D               ; "OR" MSBs
2357+ 2BBD E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2BBE AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2BBF 4F                   ld      C,A             ; Save LSB
2360+ 2BC0 78                   ld      A,B             ; Get MSB
2361+ 2BC1 AA                   xor     D               ; "XOR" MSBs
2362+ 2BC2 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2BC3
2364+ 2BC3 21 D5 2B     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2BC6 3A AD 60             ld      A,(TYPE)        ; Get data type
2366+ 2BC9 1F                   rra                     ; Carry set = string
2367+ 2BCA 7A                   ld      A,D             ; Get last precedence value
2368+ 2BCB 17                   rla                     ; Times 2 plus carry
2369+ 2BCC 5F                   ld      E,A             ; To E
2370+ 2BCD 16 64                ld      D,$64           ; Relational precedence
2371+ 2BCF 78                   ld      A,B             ; Get current precedence
2372+ 2BD0 BA                   cp      D               ; Compare with last
2373+ 2BD1 D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2BD2 C3 AB 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2BD5
2376+ 2BD5 D7 2B        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2BD7 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2BD8 B7                   or      A
2379+ 2BD9 1F                   rra
2380+ 2BDA C1                   pop     BC              ; Get last expression to BCDE
2381+ 2BDB D1                   pop     DE
2382+ 2BDC F5                   push    AF              ; Save status
2383+ 2BDD CD 3E 2A             call    CHKTYP          ; Check that types match
2384+ 2BE0 21 19 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2BE3 E5                   push    HL              ; Save for RETurn
2386+ 2BE4 CA C1 38             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2BE7 AF                   xor     A               ; Compare two strings
2388+ 2BE8 32 AD 60             ld      (TYPE),A        ; Set type to numeric
2389+ 2BEB D5                   push    DE              ; Save string name
2390+ 2BEC CD 84 30             call    GSTRCU          ; Get current string
2391+ 2BEF 7E                   ld      A,(HL)          ; Get length of string
2392+ 2BF0 23                   inc     HL
2393+ 2BF1 23                   inc     HL
2394+ 2BF2 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2BF3 23                   inc     HL
2396+ 2BF4 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2BF5 D1                   pop     DE              ; Restore string name
2398+ 2BF6 C5                   push    BC              ; Save address of string
2399+ 2BF7 F5                   push    AF              ; Save length of string
2400+ 2BF8 CD 88 30             call    GSTRDE          ; Get second string
2401+ 2BFB CD 95 38             call    LOADFP          ; Get address of second string
2402+ 2BFE F1                   pop     AF              ; Restore length of string 1
2403+ 2BFF 57                   ld      D,A             ; Length to D
2404+ 2C00 E1                   pop     HL              ; Restore address of string 1
2405+ 2C01 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C02 B2                   or      D               ; Bytes of string 1 to do
2407+ 2C03 C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C04 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C05 D6 01                sub     $01
2410+ 2C07 D8                   ret     C               ; Exit if end of string 1
2411+ 2C08 AF                   xor     A
2412+ 2C09 BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C0A 3C                   inc     A
2414+ 2C0B D0                   ret     NC              ; Exit if end of string 2
2415+ 2C0C 15                   dec     D               ; Count bytes in string 1
2416+ 2C0D 1D                   dec     E               ; Count bytes in string 2
2417+ 2C0E 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C0F BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C10 23                   inc     HL              ; Move up string 1
2420+ 2C11 03                   inc     BC              ; Move up string 2
2421+ 2C12 CA 01 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C15 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C16 C3 51 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C19
2425+ 2C19 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C1A 8F                   adc     A,A             ; Double plus carry
2427+ 2C1B C1                   pop     BC              ; Get other value
2428+ 2C1C A0                   and     B               ; Combine them
2429+ 2C1D C6 FF                add     A,-1            ; Carry set if different
2430+ 2C1F 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C20 C3 58 38             jp      FLGREL          ; Set current value & continue
2432+ 2C23
2433+ 2C23 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C25 CD 4E 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C28 CD 3C 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C2B CD 5E 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C2E 7B                   ld      A,E             ; Get LSB
2438+ 2C2F 2F                   cpl                     ; Invert LSB
2439+ 2C30 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C31 7A                   ld      A,D             ; Get MSB
2441+ 2C32 2F                   cpl                     ; Invert MSB
2442+ 2C33 CD 22 2E             call    ACPASS          ; Save AC as current
2443+ 2C36 C1                   pop     BC              ; Clean up stack
2444+ 2C37 C3 5A 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C3A
2446+ 2C3A 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C3B CD A8 25             call    GETCHR          ; Get next character
2448+ 2C3E C8                   ret     Z               ; End of DIM statement
2449+ 2C3F CD 5F 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C42 2C                   defb    ','
2451+ 2C43 01 3A 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C46 C5                   push    BC              ; Save on stack
2453+ 2C47 F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C48 AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C49 32 AC 60             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C4C 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C4D CD 4A 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2C50 DA 5F 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2C53 AF                   xor     A
2460+ 2C54 4F                   ld      C,A             ; Clear second byte of name
2461+ 2C55 32 AD 60             ld      (TYPE),A        ; Set type to numeric
2462+ 2C58 CD A8 25             call    GETCHR          ; Get next character
2463+ 2C5B DA 64 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2C5E CD 4A 26             call    CHKLTR          ; See if a letter
2465+ 2C61 DA 71 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2C64 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2C65 CD A8 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2C68 DA 65 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2C6B CD 4A 26             call    CHKLTR          ; See if a letter
2470+ 2C6E D2 65 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2C71 D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2C73 C2 80 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2C76 3C                   inc     A               ; A = 1 (string type)
2474+ 2C77 32 AD 60             ld      (TYPE),A        ; Set type to string
2475+ 2C7A 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2C7B 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2C7C 4F                   ld      C,A             ; Resave second byte on name
2478+ 2C7D CD A8 25             call    GETCHR          ; Get next character
2479+ 2C80 3A F3 60     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2C83 3D                   dec     A
2481+ 2C84 CA 2D 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2C87 F2 90 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2C8A 7E                   ld      A,(HL)          ; Get byte again
2484+ 2C8B D6 28                sub     '('             ; Subscripted variable?
2485+ 2C8D CA 05 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2C90
2487+ 2C90 AF           NSCFOR: xor     A               ; Simple variable
2488+ 2C91 32 F3 60             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2C94 E5                   push    HL              ; Save code string address
2490+ 2C95 50                   ld      D,B             ; DE = Variable name to find
2491+ 2C96 59                   ld      E,C
2492+ 2C97 2A 6C 61             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2C9A CD 59 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2C9D 11 6E 61             ld      DE,FNARG        ; Point to argument value
2495+ 2CA0 CA 36 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CA3 2A 66 61             ld      HL,(VAREND)     ; End of variables
2497+ 2CA6 EB                   ex      DE,HL           ; Address of end of search
2498+ 2CA7 2A 64 61             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CAA CD 59 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CAD CA C3 2C             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2CB0 79                   ld      A,C             ; Get second byte of name
2502+ 2CB1 96                   sub     (HL)            ; Compare with name in list
2503+ 2CB2 23                   inc     HL              ; Move on to first byte
2504+ 2CB3 C2 B8 2C             jp      NZ,FNTHR        ; Different - Find another
2505+ 2CB6 78                   ld      A,B             ; Get first byte of name
2506+ 2CB7 96                   sub     (HL)            ; Compare with name in list
2507+ 2CB8 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2CB9 CA F7 2C             jp      Z,RETADR        ; Found - Return address
2509+ 2CBC 23                   inc     HL              ; <- Skip
2510+ 2CBD 23                   inc     HL              ; <- over
2511+ 2CBE 23                   inc     HL              ; <- F.P.
2512+ 2CBF 23                   inc     HL              ; <- value
2513+ 2CC0 C3 AA 2C             jp      FNDVAR          ; Keep looking
2514+ 2CC3
2515+ 2CC3 E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2CC4 E3                   ex      (SP),HL         ; Get return address
2517+ 2CC5 D5                   push    DE              ; Save address of variable
2518+ 2CC6 11 2C 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2CC9 CD 59 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2CCC D1                   pop     DE              ; Restore address of variable
2521+ 2CCD CA FA 2C             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2CD0 E3                   ex      (SP),HL         ; Put back return
2523+ 2CD1 E5                   push    HL              ; Save code string address
2524+ 2CD2 C5                   push    BC              ; Save variable name
2525+ 2CD3 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2CD6 2A 68 61             ld      HL,(ARREND)     ; End of arrays
2527+ 2CD9 E5                   push    HL              ; Save end of arrays
2528+ 2CDA 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2CDB C1                   pop     BC              ; Source address in BC
2530+ 2CDC E5                   push    HL              ; Save new end address
2531+ 2CDD CD 0B 20             call    MOVUP           ; Move arrays up
2532+ 2CE0 E1                   pop     HL              ; Restore new end address
2533+ 2CE1 22 68 61             ld      (ARREND),HL     ; Set new end address
2534+ 2CE4 60                   ld      H,B             ; End of variables to HL
2535+ 2CE5 69                   ld      L,C
2536+ 2CE6 22 66 61             ld      (VAREND),HL     ; Set new end address
2537+ 2CE9
2538+ 2CE9 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2CEA 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2CEC CD 59 23             call    CPDEHL          ; Done them all?
2541+ 2CEF C2 E9 2C             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2CF2 D1                   pop     DE              ; Get variable name
2543+ 2CF3 73                   ld      (HL),E          ; Store second character
2544+ 2CF4 23                   inc     HL
2545+ 2CF5 72                   ld      (HL),D          ; Store first character
2546+ 2CF6 23                   inc     HL
2547+ 2CF7 EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2CF8 E1                   pop     HL              ; Restore code string address
2549+ 2CF9 C9                   ret
2550+ 2CFA
2551+ 2CFA 32 75 61     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2CFD 21 DC 1F             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D00 22 72 61             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D03 E1                   pop     HL              ; Restore code string address
2555+ 2D04 C9                   ret
2556+ 2D05
2557+ 2D05 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D06 2A AC 60             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D09 E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D0A 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D0B D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D0C C5                   push    BC              ; Save array name
2563+ 2D0D CD 52 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D10 C1                   pop     BC              ; Restore array name
2565+ 2D11 F1                   pop     AF              ; Get number of dimensions
2566+ 2D12 EB                   ex      DE,HL
2567+ 2D13 E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D14 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D15 EB                   ex      DE,HL
2570+ 2D16 3C                   inc     A               ; Count dimensions
2571+ 2D17 57                   ld      D,A             ; Save in D
2572+ 2D18 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D19 FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D1B CA 0B 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D1E CD 5F 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D21 29                   defb    ')'
2577+ 2D22 22 F8 60             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D25 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D26 22 AC 60             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D29 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D2B D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D2C 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D2D
2584+ 2D2D E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D2E F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D2F 2A 66 61             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D32 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D33 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D34 EB                   ex      DE,HL
2590+ 2D35 2A 68 61             ld      HL,(ARREND)     ; End of arrays
2591+ 2D38 EB                   ex      DE,HL           ; Current array pointer
2592+ 2D39 CD 59 23             call    CPDEHL          ; End of arrays found?
2593+ 2D3C CA 65 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D3F 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D40 B9                   cp      C               ; Compare with name given
2596+ 2D41 23                   inc     HL              ; Move on
2597+ 2D42 C2 47 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D45 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D46 B8                   cp      B               ; Compare with name given
2600+ 2D47 23           NXTARY: inc     HL              ; Move on
2601+ 2D48 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D49 23                   inc     HL
2603+ 2D4A 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D4B 23                   inc     HL
2605+ 2D4C C2 33 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2D4F 3A AC 60             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2D52 B7                   or      A
2608+ 2D53 C2 68 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2D56 F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2D57 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2D58 4D                   ld      C,L
2612+ 2D59 CA 36 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2D5C 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2D5D CA C3 2D             jp      Z,FINDEL        ; Yes - Find element
2615+ 2D60 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2D62 C3 79 20             jp      ERROR           ; Output error
2617+ 2D65
2618+ 2D65 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2D68 F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2D69 CA 73 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2D6C 71                   ld      (HL),C          ; Save second byte of name
2622+ 2D6D 23                   inc     HL
2623+ 2D6E 70                   ld      (HL),B          ; Save first byte of name
2624+ 2D6F 23                   inc     HL
2625+ 2D70 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2D71 CD 1C 20             call    CHKSTK          ; Check if enough memory
2627+ 2D74 23                   inc     HL              ; Point to number of dimensions
2628+ 2D75 23                   inc     HL
2629+ 2D76 22 ED 60             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2D79 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2D7A 23                   inc     HL
2632+ 2D7B 3A AC 60             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2D7E 17                   rla                     ; Carry set = Create
2634+ 2D7F 79                   ld      A,C             ; Get number of dimensions
2635+ 2D80 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2D83 D2 88 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2D86 C1                   pop     BC              ; Get specified dimension size
2638+ 2D87 03                   inc     BC              ; Include zero element
2639+ 2D88 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2D89 23                   inc     HL
2641+ 2D8A 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2D8B 23                   inc     HL
2643+ 2D8C F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2D8D E5                   push    HL              ; Save address of dim'n size
2645+ 2D8E CD 32 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2D91 EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2D92 E1                   pop     HL              ; Restore address of dimension
2648+ 2D93 F1                   pop     AF              ; Restore number of dimensions
2649+ 2D94 3D                   dec     A               ; Count them
2650+ 2D95 C2 80 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2D98 F5                   push    AF              ; Save locate/create flag
2652+ 2D99 42                   ld      B,D             ; MSB of memory needed
2653+ 2D9A 4B                   ld      C,E             ; LSB of memory needed
2654+ 2D9B EB                   ex      DE,HL
2655+ 2D9C 19                   add     HL,DE           ; Add bytes to array start
2656+ 2D9D DA 34 20             jp      C,OMERR         ; Too big - Error
2657+ 2DA0 CD 25 20             call    ENFMEM          ; See if enough memory
2658+ 2DA3 22 68 61             ld      (ARREND),HL     ; Save new end of array
2659+ 2DA6
2660+ 2DA6 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DA7 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DA9 CD 59 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DAC C2 A6 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2DAF 03                   inc     BC              ; Number of bytes + 1
2665+ 2DB0 57                   ld      D,A             ; A=0
2666+ 2DB1 2A ED 60             ld      HL,(CUROPR)     ; Get address of array
2667+ 2DB4 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2DB5 EB                   ex      DE,HL           ; To HL
2669+ 2DB6 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2DB7 09                   add     HL,BC           ; Add number of bytes
2671+ 2DB8 EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2DB9 2B                   dec     HL
2673+ 2DBA 2B                   dec     HL
2674+ 2DBB 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2DBC 23                   inc     HL
2676+ 2DBD 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2DBE 23                   inc     HL
2678+ 2DBF F1                   pop     AF              ; Locate / Create?
2679+ 2DC0 DA E7 2D             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2DC3 47           FINDEL: ld      B,A             ; Find array element
2681+ 2DC4 4F                   ld      C,A
2682+ 2DC5 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2DC6 23                   inc     HL
2684+ 2DC7 16                   defb    $16             ; Skip "pop HL"
2685+ 2DC8 E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2DC9 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2DCA 23                   inc     HL
2688+ 2DCB 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2DCC 23                   inc     HL
2690+ 2DCD E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2DCE F5                   push    AF              ; Save number of dim'ns
2692+ 2DCF CD 59 23             call    CPDEHL          ; Dimension too large?
2693+ 2DD2 D2 60 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2DD5 E5                   push    HL              ; Save index
2695+ 2DD6 CD 32 39             call    MLDEBC          ; Multiply previous by size
2696+ 2DD9 D1                   pop     DE              ; Index supplied to DE
2697+ 2DDA 19                   add     HL,DE           ; Add index to pointer
2698+ 2DDB F1                   pop     AF              ; Number of dimensions
2699+ 2DDC 3D                   dec     A               ; Count them
2700+ 2DDD 44                   ld      B,H             ; MSB of pointer
2701+ 2DDE 4D                   ld      C,L             ; LSB of pointer
2702+ 2DDF C2 C8 2D             jp      NZ,FNDELP       ; More - Keep going
2703+ 2DE2 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2DE3 29                   add     HL,HL
2705+ 2DE4 C1                   pop     BC              ; Start of array
2706+ 2DE5 09                   add     HL,BC           ; Point to element
2707+ 2DE6 EB                   ex      DE,HL           ; Address of element to DE
2708+ 2DE7 2A F8 60     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2DEA C9                   ret
2710+ 2DEB
2711+ 2DEB
2712+ 2DEB              ; returns the value of the 32-bit system tick counter as
2713+ 2DEB              ; two 16-bit words
2714+ 2DEB CD 3C 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2DEE CD 5E 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2DF1 2A FE 60             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2DF4 7B                   ld      A,E
2718+ 2DF5 B2                   or      D               ; is it 0?
2719+ 2DF6 CA FC 2D             jp      Z,ENDTMR        ; yes, jump over
2720+ 2DF9 2A 00 61             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2DFC 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2DFD 7C                   ld      A,H             ; ...into AB
2723+ 2DFE C3 23 2E             jp      ABPASS          ; return word into AB
2724+ 2E01
2725+ 2E01
2726+ 2E01              ; returns the free space for BASIC or into the string pool
2727+ 2E01 2A 68 61     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E04 EB                   ex      DE,HL           ; To DE
2729+ 2E05 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E08 39                   add     HL,SP           ; Current stack value
2731+ 2E09 3A AD 60             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E0C B7                   or      A
2733+ 2E0D CA 1D 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E10 CD 84 30             call    GSTRCU          ; Current string to pool
2735+ 2E13 CD 84 2F             call    GARBGE          ; Garbage collection
2736+ 2E16 2A C6 5F             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E19 EB                   ex      DE,HL           ; To DE
2738+ 2E1A 2A EB 60             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E1D 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E1E 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E1F 4F                   ld      C,A             ; Save difference if C
2742+ 2E20 7C                   ld      A,H             ; Get MSB of end
2743+ 2E21 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E22 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E23 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E24 1E 00                ld      E,$00
2747+ 2E26 21 AD 60             ld      HL,TYPE         ; Point to type
2748+ 2E29 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E2A 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E2C C3 5D 38             jp      RETINT          ; Return the integer
2751+ 2E2F
2752+ 2E2F              ; returns the X position of the cursor during a print
2753+ 2E2F 3A AB 60     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E32              ; return the value in A as a number
2755+ 2E32 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E33 AF                   xor     A               ; Zero A
2757+ 2E34 C3 23 2E             jp      ABPASS          ; Return integer AB
2758+ 2E37
2759+ 2E37 CD BA 2E     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E3A CD AC 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E3D 01 51 27             ld      BC,DATA         ; To get next statement
2762+ 2E40 C5                   push    BC              ; Save address for RETurn
2763+ 2E41 D5                   push    DE              ; Save address of function ptr
2764+ 2E42 CD 5F 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E45 28                   defb    '('
2766+ 2E46 CD 48 2C             call    GETVAR          ; Get argument variable name
2767+ 2E49 E5                   push    HL              ; Save code string address
2768+ 2E4A EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E4B 2B                   dec     HL
2770+ 2E4C 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E4D 2B                   dec     HL
2772+ 2E4E 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2E4F E1                   pop     HL              ; Restore code string address
2774+ 2E50 CD 3C 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2E53 CD 5F 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2E56 29                   defb    ')'
2777+ 2E57 CD 5F 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2E5A C9                   defb    ZEQUAL          ; "=" token
2779+ 2E5B 44                   ld      B,H             ; Code string address to BC
2780+ 2E5C 4D                   ld      C,L
2781+ 2E5D E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2E5E 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2E5F 23                   inc     HL
2784+ 2E60 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2E61 C3 F9 2E             jp      SVSTAD          ; Save address and do function
2786+ 2E64
2787+ 2E64 CD BA 2E     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2E67 D5                   push    DE              ; Save function pointer address
2789+ 2E68 CD 10 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2E6B CD 3C 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2E6E E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2E6F 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2E70 23                   inc     HL
2794+ 2E71 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2E72 23                   inc     HL
2796+ 2E73 7A                   ld      A,D             ; And function DEFined?
2797+ 2E74 B3                   or      E
2798+ 2E75 CA 6B 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2E78 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2E79 23                   inc     HL
2801+ 2E7A 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2E7B 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2E7C E5                   push    HL              ; Save it
2804+ 2E7D 2A 6C 61             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2E80 E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2E81 22 6C 61             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2E84 2A 70 61             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2E87 E5                   push    HL              ; Save it
2809+ 2E88 2A 6E 61             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2E8B E5                   push    HL              ; Save it
2811+ 2E8C 21 6E 61             ld      HL,FNARG        ; HL = Value of argument
2812+ 2E8F D5                   push    DE              ; Save FN code string address
2813+ 2E90 CD 9E 38             call    FPTHL           ; Move FPREG to argument
2814+ 2E93 E1                   pop     HL              ; Get FN code string address
2815+ 2E94 CD 39 2A             call    GETNUM          ; Get value from function
2816+ 2E97 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2E98 CD A8 25             call    GETCHR          ; Get next character
2818+ 2E9B C2 5F 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2E9E E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2E9F 22 6E 61             ld      (FNARG),HL      ; Restore it
2821+ 2EA2 E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2EA3 22 70 61             ld      (FNARG+2),HL    ; Restore it
2823+ 2EA6 E1                   pop     HL              ; Get name of old arg
2824+ 2EA7 22 6C 61             ld      (FNRGNM),HL     ; Restore it
2825+ 2EAA E1                   pop     HL              ; Restore code string address
2826+ 2EAB C9                   ret
2827+ 2EAC
2828+ 2EAC E5           IDTEST: push    HL              ; Save code string address
2829+ 2EAD 2A C8 5F             ld      HL,(LINEAT)     ; Get current line number
2830+ 2EB0 23                   inc     HL              ; -1 means direct statement
2831+ 2EB1 7C                   ld      A,H
2832+ 2EB2 B5                   or      L
2833+ 2EB3 E1                   pop     HL              ; Restore code string address
2834+ 2EB4 C0                   ret     NZ              ; Return if in program
2835+ 2EB5 1E 16                ld      E,ID            ; ?ID Error
2836+ 2EB7 C3 79 20             jp      ERROR
2837+ 2EBA
2838+ 2EBA CD 5F 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2EBD B9                   defb    ZFN             ; "FN" token
2840+ 2EBE 3E 80                ld      A,$80
2841+ 2EC0 32 F3 60             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2EC3 B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2EC4 47                   ld      B,A             ; in first byte of name
2844+ 2EC5 CD 4D 2C             call    GTFNAM          ; Get FN name
2845+ 2EC8 C3 3C 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2ECB
2847+ 2ECB CD 3C 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2ECE CD EB 39             call    NUMASC          ; Turn number into text
2849+ 2ED1 CD FF 2E     STR1:   call    CRTST           ; Create string entry for it
2850+ 2ED4 CD 84 30             call    GSTRCU          ; Current string to pool
2851+ 2ED7 01 DF 30             ld      BC,TOPOOL       ; Save in string pool
2852+ 2EDA C5                   push    BC              ; Save address on stack
2853+ 2EDB
2854+ 2EDB 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2EDC 23                   inc     HL
2856+ 2EDD 23                   inc     HL
2857+ 2EDE E5                   push    HL              ; Save pointer to string
2858+ 2EDF CD 5A 2F             call    TESTR           ; See if enough string space
2859+ 2EE2 E1                   pop     HL              ; Restore pointer to string
2860+ 2EE3 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2EE4 23                   inc     HL
2862+ 2EE5 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2EE6 CD F3 2E             call    CRTMST          ; Create string entry
2864+ 2EE9 E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2EEA 6F                   ld      L,A             ; Length of string
2866+ 2EEB CD 77 30             call    TOSTRA          ; Move to string area
2867+ 2EEE D1                   pop     DE              ; Restore pointer to MSB
2868+ 2EEF C9                   ret
2869+ 2EF0
2870+ 2EF0 CD 5A 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2EF3 21 E7 60     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2EF6 E5                   push    HL              ; Save it
2873+ 2EF7 77                   ld      (HL),A          ; Save length of string
2874+ 2EF8 23                   inc     HL
2875+ 2EF9 23           SVSTAD: inc     HL
2876+ 2EFA 73                   ld      (HL),E          ; Save LSB of address
2877+ 2EFB 23                   inc     HL
2878+ 2EFC 72                   ld      (HL),D          ; Save MSB of address
2879+ 2EFD E1                   pop     HL              ; Restore pointer
2880+ 2EFE C9                   ret
2881+ 2EFF
2882+ 2EFF 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F00 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F02 50                   ld      D,B             ; Quote to D
2885+ 2F03 E5           DTSTR:  push    HL              ; Save start
2886+ 2F04 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F06 23           QTSTLP: inc     HL              ; Move on
2888+ 2F07 7E                   ld      A,(HL)          ; Get byte
2889+ 2F08 0C                   inc     C               ; Count bytes
2890+ 2F09 B7                   or      A               ; End of line?
2891+ 2F0A CA 15 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F0D BA                   cp      D               ; Terminator D found?
2893+ 2F0E CA 15 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F11 B8                   cp      B               ; Terminator B found?
2895+ 2F12 C2 06 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F15 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F17 CC A8 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F1A E3                   ex      (SP),HL         ; Starting quote
2899+ 2F1B 23                   inc     HL              ; First byte of string
2900+ 2F1C EB                   ex      DE,HL           ; To DE
2901+ 2F1D 79                   ld      A,C             ; Get length
2902+ 2F1E CD F3 2E             call    CRTMST          ; Create string entry
2903+ 2F21 11 E7 60     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F24 2A D9 60             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F27 22 72 61             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F2A 3E 01                ld      A,$01
2907+ 2F2C 32 AD 60             ld      (TYPE),A        ; Set type to string
2908+ 2F2F CD A1 38             call    DETHL4          ; Move string to pool
2909+ 2F32 CD 59 23             call    CPDEHL          ; Out of string pool?
2910+ 2F35 22 D9 60             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F38 E1                   pop     HL              ; Restore code string address
2912+ 2F39 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F3A C0                   ret     NZ              ; Return if pool OK
2914+ 2F3B 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F3D C3 79 20             jp      ERROR           ; String pool overflow
2916+ 2F40
2917+ 2F40 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F41 CD FF 2E     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F44 CD 84 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F47 CD 95 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F4A 1C                   inc     E               ; Length + 1
2922+ 2F4B 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F4C C8                   ret     Z               ; End of string
2924+ 2F4D 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2F4E CD 6A 23             call    OUTC            ; Output character in A
2926+ 2F51 FE 0D                cp      CR              ; Return?
2927+ 2F53 CC 7F 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2F56 03                   inc     BC              ; Next byte in string
2929+ 2F57 C3 4B 2F             jp      PRSLP           ; More characters to output
2930+ 2F5A
2931+ 2F5A B7           TESTR:  or      A               ; Test if enough room
2932+ 2F5B 0E                   defb    $0E             ; No garbage collection done
2933+ 2F5C F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2F5D F5                   push    AF              ; Save status
2935+ 2F5E 2A C6 5F             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2F61 EB                   ex      DE,HL           ; To DE
2937+ 2F62 2A EB 60             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2F65 2F                   cpl                     ; Negate length (Top down)
2939+ 2F66 4F                   ld      C,A             ; -Length to BC
2940+ 2F67 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2F69 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2F6A 23                   inc     HL              ; Plus one for 2's complement
2943+ 2F6B CD 59 23             call    CPDEHL          ; Below string RAM area?
2944+ 2F6E DA 78 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2F71 22 EB 60             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2F74 23                   inc     HL              ; Point to first byte of string
2947+ 2F75 EB                   ex      DE,HL           ; Address to DE
2948+ 2F76 F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2F77 C9                   ret
2950+ 2F78
2951+ 2F78 F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2F79 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2F7B CA 79 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2F7E BF                   cp      A               ; Flag garbage collect done
2955+ 2F7F F5                   push    AF              ; Save status
2956+ 2F80 01 5C 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2F83 C5                   push    BC              ; Save for RETurn
2958+ 2F84 2A AF 60     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2F87 22 EB 60     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2F8A 21 00 00             ld      HL,$0000
2961+ 2F8D E5                   push    HL              ; Flag no string found
2962+ 2F8E 2A C6 5F             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2F91 E5                   push    HL              ; Save bottom of string space
2964+ 2F92 21 DB 60             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2F95 EB           GRBLP:  ex      DE,HL
2966+ 2F96 2A D9 60             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2F99 EB                   ex      DE,HL
2968+ 2F9A CD 59 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2F9D 01 95 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FA0 C2 E9 2F             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FA3 2A 64 61             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FA6 EB           SMPVAR: ex      DE,HL
2973+ 2FA7 2A 66 61             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FAA EB                   ex      DE,HL
2975+ 2FAB CD 59 23             call    CPDEHL          ; All simple strings done?
2976+ 2FAE CA BC 2F             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 2FB1 7E                   ld      A,(HL)          ; Get type of variable
2978+ 2FB2 23                   inc     HL
2979+ 2FB3 23                   inc     HL
2980+ 2FB4 B7                   or      A               ; "S" flag set if string
2981+ 2FB5 CD EC 2F             call    STRADD          ; See if string in string area
2982+ 2FB8 C3 A6 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 2FBB
2984+ 2FBB C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 2FBC EB           ARRLP:  ex      DE,HL
2986+ 2FBD 2A 68 61             ld      HL,(ARREND)     ; End of string arrays
2987+ 2FC0 EB                   ex      DE,HL
2988+ 2FC1 CD 59 23             call    CPDEHL          ; All string arrays done?
2989+ 2FC4 CA 12 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 2FC7 CD 95 38             call    LOADFP          ; Get array name to BCDE
2991+ 2FCA 7B                   ld      A,E             ; Get type of array
2992+ 2FCB E5                   push    HL              ; Save address of num of dim'ns
2993+ 2FCC 09                   add     HL,BC           ; Start of next array
2994+ 2FCD B7                   or      A               ; Test type of array
2995+ 2FCE F2 BB 2F             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 2FD1 22 ED 60             ld      (CUROPR),HL     ; Save address of next array
2997+ 2FD4 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 2FD5 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 2FD6 06 00                ld      B,$00
3000+ 2FD8 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 2FD9 09                   add     HL,BC
3002+ 2FDA 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 2FDB EB           GRBARY: ex      DE,HL
3004+ 2FDC 2A ED 60             ld      HL,(CUROPR)     ; Get address of next array
3005+ 2FDF EB                   ex      DE,HL
3006+ 2FE0 CD 59 23             call    CPDEHL          ; Is this array finished?
3007+ 2FE3 CA BC 2F             jp      Z,ARRLP         ; Yes - Get next one
3008+ 2FE6 01 DB 2F             ld      BC,GRBARY       ; Loop until array all done
3009+ 2FE9 C5           STPOOL: push    BC              ; Save return address
3010+ 2FEA F6 80                or      $80             ; Flag string type
3011+ 2FEC 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 2FED 23                   inc     HL
3013+ 2FEE 23                   inc     HL
3014+ 2FEF 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 2FF0 23                   inc     HL
3016+ 2FF1 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 2FF2 23                   inc     HL
3018+ 2FF3 F0                   ret     P               ; Not a string - Return
3019+ 2FF4 B7                   or      A               ; Set flags on string length
3020+ 2FF5 C8                   ret     Z               ; Null string - Return
3021+ 2FF6 44                   ld      B,H             ; Save variable pointer
3022+ 2FF7 4D                   ld      C,L
3023+ 2FF8 2A EB 60             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 2FFB CD 59 23             call    CPDEHL          ; String been done?
3025+ 2FFE 60                   ld      H,B             ; Restore variable pointer
3026+ 2FFF 69                   ld      L,C
3027+ 3000 D8                   ret     C               ; String done - Ignore
3028+ 3001 E1                   pop     HL              ; Return address
3029+ 3002 E3                   ex      (SP),HL         ; Lowest available string area
3030+ 3003 CD 59 23             call    CPDEHL          ; String within string area?
3031+ 3006 E3                   ex      (SP),HL         ; Lowest available string area
3032+ 3007 E5                   push    HL              ; Re-save return address
3033+ 3008 60                   ld      H,B             ; Restore variable pointer
3034+ 3009 69                   ld      L,C
3035+ 300A D0                   ret     NC              ; Outside string area - Ignore
3036+ 300B C1                   pop     BC              ; Get return , Throw 2 away
3037+ 300C F1                   pop     AF              ;
3038+ 300D F1                   pop     AF              ;
3039+ 300E E5                   push    HL              ; Save variable pointer
3040+ 300F D5                   push    DE              ; Save address of current
3041+ 3010 C5                   push    BC              ; Put back return address
3042+ 3011 C9                   ret                     ; Go to it
3043+ 3012
3044+ 3012 D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 3013 E1                   pop     HL              ;
3046+ 3014 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3015 B4                   or      H
3048+ 3016 C8                   ret     Z               ; No more to do - Return
3049+ 3017 2B                   dec     HL
3050+ 3018 46                   ld      B,(HL)          ; MSB of address of string
3051+ 3019 2B                   dec     HL
3052+ 301A 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 301B E5                   push    HL              ; Save variable address
3054+ 301C 2B                   dec     HL
3055+ 301D 2B                   dec     HL
3056+ 301E 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 301F 26 00                ld      H,$00
3058+ 3021 09                   add     HL,BC           ; Address of end of string+1
3059+ 3022 50                   ld      D,B             ; String address to DE
3060+ 3023 59                   ld      E,C
3061+ 3024 2B                   dec     HL              ; Last byte in string
3062+ 3025 44                   ld      B,H             ; Address to BC
3063+ 3026 4D                   ld      C,L
3064+ 3027 2A EB 60             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 302A CD 0E 20             call    MOVSTR          ; Move string to new address
3066+ 302D E1                   pop     HL              ; Restore variable address
3067+ 302E 71                   ld      (HL),C          ; Save new LSB of address
3068+ 302F 23                   inc     HL
3069+ 3030 70                   ld      (HL),B          ; Save new MSB of address
3070+ 3031 69                   ld      L,C             ; Next string area+1 to HL
3071+ 3032 60                   ld      H,B
3072+ 3033 2B                   dec     HL              ; Next string area address
3073+ 3034 C3 87 2F             jp      GARBLP          ; Look for more strings
3074+ 3037
3075+ 3037 C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 3038 E5                   push    HL              ;
3077+ 3039 2A 72 61             ld      HL,(FPREG)      ; Get first string
3078+ 303C E3                   ex      (SP),HL         ; Save first string
3079+ 303D CD C2 2A             call    OPRND           ; Get second string
3080+ 3040 E3                   ex      (SP),HL         ; Restore first string
3081+ 3041 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3044 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3045 E5                   push    HL              ; Save first string
3084+ 3046 2A 72 61             ld      HL,(FPREG)      ; Get second string
3085+ 3049 E5                   push    HL              ; Save second string
3086+ 304A 86                   add     A,(HL)          ; Add length of second string
3087+ 304B 1E 1C                ld      E,LS            ; ?LS Error
3088+ 304D DA 79 20             jp      C,ERROR         ; String too long - Error
3089+ 3050 CD F0 2E             call    MKTMST          ; Make temporary string
3090+ 3053 D1                   pop     DE              ; Get second string to DE
3091+ 3054 CD 88 30             call    GSTRDE          ; Move to string pool if needed
3092+ 3057 E3                   ex      (SP),HL         ; Get first string
3093+ 3058 CD 87 30             call    GSTRHL          ; Move to string pool if needed
3094+ 305B E5                   push    HL              ; Save first string
3095+ 305C 2A E9 60             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 305F EB                   ex      DE,HL           ; To DE
3097+ 3060 CD 6E 30             call    SSTSA           ; First string to string area
3098+ 3063 CD 6E 30             call    SSTSA           ; Second string to string area
3099+ 3066 21 57 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 3069 E3                   ex      (SP),HL         ; Save return,get code string
3101+ 306A E5                   push    HL              ; Save code string address
3102+ 306B C3 21 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 306E
3104+ 306E E1           SSTSA:  pop     HL              ; Return address
3105+ 306F E3                   ex      (SP),HL         ; Get string block,save return
3106+ 3070 7E                   ld      A,(HL)          ; Get length of string
3107+ 3071 23                   inc     HL
3108+ 3072 23                   inc     HL
3109+ 3073 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 3074 23                   inc     HL
3111+ 3075 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 3076 6F                   ld      L,A             ; Length to L
3113+ 3077 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 3078 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 3079 C8                   ret     Z               ; End of string - Return
3116+ 307A 0A                   ld      A,(BC)          ; Get source
3117+ 307B 12                   ld      (DE),A          ; Save destination
3118+ 307C 03                   inc     BC              ; Next source
3119+ 307D 13                   inc     DE              ; Next destination
3120+ 307E C3 78 30             jp      TSALP           ; Loop until string moved
3121+ 3081
3122+ 3081 CD 3D 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 3084 2A 72 61     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 3087 EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 3088 CD A2 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 308B EB                   ex      DE,HL           ; Restore DE
3127+ 308C C0                   ret     NZ              ; No - Return
3128+ 308D D5                   push    DE              ; Save string
3129+ 308E 50                   ld      D,B             ; String block address to DE
3130+ 308F 59                   ld      E,C
3131+ 3090 1B                   dec     DE              ; Point to length
3132+ 3091 4E                   ld      C,(HL)          ; Get string length
3133+ 3092 2A EB 60             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 3095 CD 59 23             call    CPDEHL          ; Last one in string area?
3135+ 3098 C2 A0 30             jp      NZ,POPHL        ; No - Return
3136+ 309B 47                   ld      B,A             ; Clear B (A=0)
3137+ 309C 09                   add     HL,BC           ; Remove string from str' area
3138+ 309D 22 EB 60             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30A0 E1           POPHL:  pop     HL              ; Restore string
3140+ 30A1 C9                   ret
3141+ 30A2
3142+ 30A2 2A D9 60     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30A5 2B                   dec     HL              ; Back
3144+ 30A6 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30A7 2B                   dec     HL              ; Back
3146+ 30A8 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30A9 2B                   dec     HL              ; Back
3148+ 30AA 2B                   dec     HL              ; Back
3149+ 30AB CD 59 23             call    CPDEHL          ; String last in string pool?
3150+ 30AE C0                   ret     NZ              ; Yes - Leave it
3151+ 30AF 22 D9 60             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 30B2 C9                   ret
3153+ 30B3
3154+ 30B3 01 32 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 30B6 C5                   push    BC              ; Save address
3156+ 30B7 CD 81 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 30BA AF                   xor     A
3158+ 30BB 57                   ld      D,A             ; Clear D
3159+ 30BC 32 AD 60             ld      (TYPE),A        ; Set type to numeric
3160+ 30BF 7E                   ld      A,(HL)          ; Get length of string
3161+ 30C0 B7                   or      A               ; Set status flags
3162+ 30C1 C9                   ret
3163+ 30C2
3164+ 30C2 01 32 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 30C5 C5                   push    BC              ; Save address
3166+ 30C6 CD B7 30     GTFLNM: call    GETLEN          ; Get length of string
3167+ 30C9 CA 73 26             jp      Z,FCERR         ; Null string - Error
3168+ 30CC 23                   inc     HL
3169+ 30CD 23                   inc     HL
3170+ 30CE 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 30CF 23                   inc     HL
3172+ 30D0 56                   ld      D,(HL)          ; Get MSB of address
3173+ 30D1 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 30D2 C9                   ret
3175+ 30D3
3176+ 30D3 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 30D5 CD F0 2E             call    MKTMST          ; Make a temporary string
3178+ 30D8 CD C2 32             call    MAKINT          ; Make it integer A
3179+ 30DB 2A E9 60             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 30DE 73                   ld      (HL),E          ; Save character
3181+ 30DF C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 30E0 C3 21 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 30E3
3184+ 30E3 CD 72 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 30E6 AF                   xor     A               ; Start at first byte in string
3186+ 30E7 E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 30E8 4F                   ld      C,A             ; Starting position in string
3188+ 30E9 E5           MID1:   push    HL              ; Save string block address
3189+ 30EA 7E                   ld      A,(HL)          ; Get length of string
3190+ 30EB B8                   cp      B               ; Compare with number given
3191+ 30EC DA F1 30             jp      C,ALLFOL        ; All following bytes required
3192+ 30EF 78                   ld      A,B             ; Get new length
3193+ 30F0 11                   defb    $11             ; Skip "ld C,0"
3194+ 30F1 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 30F3 C5                   push    BC              ; Save position in string
3196+ 30F4 CD 5A 2F             call    TESTR           ; See if enough string space
3197+ 30F7 C1                   pop     BC              ; Get position in string
3198+ 30F8 E1                   pop     HL              ; Restore string block address
3199+ 30F9 E5                   push    HL              ; And re-save it
3200+ 30FA 23                   inc     HL
3201+ 30FB 23                   inc     HL
3202+ 30FC 46                   ld      B,(HL)          ; Get LSB of address
3203+ 30FD 23                   inc     HL
3204+ 30FE 66                   ld      H,(HL)          ; Get MSB of address
3205+ 30FF 68                   ld      L,B             ; HL = address of string
3206+ 3100 06 00                ld      B,$00           ; BC = starting address
3207+ 3102 09                   add     HL,BC           ; Point to that byte
3208+ 3103 44                   ld      B,H             ; BC = source string
3209+ 3104 4D                   ld      C,L
3210+ 3105 CD F3 2E             call    CRTMST          ; Create a string entry
3211+ 3108 6F                   ld      L,A             ; Length of new string
3212+ 3109 CD 77 30             call    TOSTRA          ; Move string to string area
3213+ 310C D1                   pop     DE              ; Clear stack
3214+ 310D CD 88 30             call    GSTRDE          ; Move to string pool if needed
3215+ 3110 C3 21 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 3113
3217+ 3113
3218+ 3113              ; INSTR statement - look for a string inside another string
3219+ 3113              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 3113              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 3113              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 3113              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 3113              LNS1    equ     TMPBFR1
3224+ 3113              ADRS1   equ     TMPBFR2
3225+ 3113              LNS2    equ     TMPBFR3
3226+ 3113              ADRS2   equ     TMPBFR4
3227+ 3113              PT      equ     VIDEOBUFF
3228+ 3113              PT1     equ     VIDEOBUFF+2
3229+ 3113              PT2     equ     VIDEOBUFF+4
3230+ 3113              TP      equ     VIDEOBUFF+6
3231+ 3113              TF      equ     VIDEOBUFF+8
3232+ 3113 CD 5F 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 3116 28                   defb    '('
3234+ 3117 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 3118 CD A8 25             call    GETCHR          ; check if something follows
3236+ 311B CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 311E CD 4B 2A             call    EVAL            ; Evaluate expression
3238+ 3121 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3124 22 26 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 3127 CD 84 30             call    GSTRCU          ; check that a string follows
3241+ 312A CD 95 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 312D ED 53 1E 61          ld      (LNS1),DE       ; store values into
3243+ 3131 ED 43 20 61          ld      (ADRS1),BC      ; temp buffers
3244+ 3135 2A 26 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 3138 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3246+ 313B 2C                   defb    ','
3247+ 313C 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 313D CD A8 25             call    GETCHR          ; check if something follows
3249+ 3140 CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 3143 CD 4B 2A             call    EVAL            ; Evaluate expression
3251+ 3146 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
3252+ 3149 22 26 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 314C CD 84 30             call    GSTRCU          ; check that a string follows
3254+ 314F CD 95 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 3152 ED 53 22 61          ld      (LNS2),DE       ; store values into
3256+ 3156 ED 43 24 61          ld      (ADRS2),BC      ; temp buffers
3257+ 315A 2A 26 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 315D CD 5F 23             call    CHKSYN          ; make sure ")" follows
3259+ 3160 29                   defb    ')'
3260+ 3161 E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 3162 FD E1                pop     IY              ; ...into IY
3262+ 3164 AF                   xor     A               ; reset 10 RAM cells
3263+ 3165 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 3167 21 26 61             ld      HL,PT           ; first cell
3265+ 316A 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 316B 23                   inc     HL              ; next cell
3267+ 316C 10 FC                djnz    EMPTINS         ; repeat
3268+ 316E ED 5B 22 61          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 3172 2A 1E 61             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 3175 CD DF 4C             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 3178 DA ED 31             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 317B AF           RPTINST:xor     A               ; reset...
3273+ 317C 32 2C 61             ld      (TP),A          ; ...TP...
3274+ 317F 32 2E 61             ld      (TF),A          ; ...and TF
3275+ 3182 ED 4B 26 61          ld      BC,(PT)         ; pointer to S1
3276+ 3186 2A 20 61             ld      HL,(ADRS1)      ; first cell of S1
3277+ 3189 09                   add     HL,BC           ; get current position into RAM
3278+ 318A 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 318B 2A 24 61             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 318E BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 318F 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 3191 3A 26 61             ld      A,(PT)          ; load current PT
3283+ 3194 32 2C 61             ld      (TP),A          ; TP=PT
3284+ 3197 32 28 61             ld      (PT1),A         ; P1=PT
3285+ 319A AF                   xor     A               ; set...
3286+ 319B 32 2A 61             ld      (PT2),A         ; ...PT2=0
3287+ 319E 3C                   inc     A               ;
3288+ 319F 32 2E 61             ld      (TF),A          ; set TF=1
3289+ 31A2 ED 4B 28 61  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31A6 2A 20 61             ld      HL,(ADRS1)      ; load address of S1
3291+ 31A9 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31AA 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31AB ED 4B 2A 61          ld      BC,(PT2)        ; load pointer PT2
3294+ 31AF 2A 24 61             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 31B2 09                   add     HL,BC           ; find S2(PT2)
3296+ 31B3 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 31B4 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 31B6 21 28 61             ld      HL,PT1
3299+ 31B9 34                   inc     (HL)            ; increment PT1
3300+ 31BA 3A 2A 61             ld      A,(PT2)
3301+ 31BD 3C                   inc     A               ; increment PT2
3302+ 31BE 32 2A 61             ld      (PT2),A
3303+ 31C1 CA CB 31             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 31C4 21 22 61             ld      HL,LNS2         ; len(S2)
3305+ 31C7 BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 31C8 DA A2 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 31CB 3A 2E 61     CNT1INS:ld      A,(TF)          ; check TF
3308+ 31CE A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 31CF 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 31D1 2A 1E 61             ld      HL,(LNS1)       ; load len(S1)
3311+ 31D4 ED 4B 22 61          ld      BC,(LNS2)       ; load len(S2)
3312+ 31D8 ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 31DA ED 5B 26 61          ld      DE,(PT)         ; load pointer
3314+ 31DE 1C                   inc     E               ; PT=PT+1
3315+ 31DF ED 53 26 61          ld      (PT),DE         ; store new value
3316+ 31E3 EB                   ex      DE,HL           ; invert registers
3317+ 31E4 CD DF 4C             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 31E7 DA 7B 31             jp      C,RPTINST       ; repeat if <
3319+ 31EA CA 7B 31             jp      Z,RPTINST       ; repeat if =
3320+ 31ED 3A 2E 61     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 31F0 A7                   and     A               ; is it 0?
3322+ 31F1 CA F8 31             jp      Z,LVINSTR       ; yes, return 0
3323+ 31F4 3A 2C 61             ld      A,(TP)          ; return TP...
3324+ 31F7 3C                   inc     A               ; ...incremented by 1
3325+ 31F8 E1           LVINSTR:pop     HL              ; drop original return point
3326+ 31F9 FD E5                push    IY              ; load current string address from IY into stack
3327+ 31FB 11 24 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 31FE D5                   push    DE              ; ...saved on stack
3329+ 31FF C3 32 2E             jp      PASSA           ; return TP
3330+ 3202 AF           CNTZIN: xor     A               ; set...
3331+ 3203 32 2E 61             ld      (TF),A          ; TF=0
3332+ 3206 C3 CB 31             jp      CNT1INS         ; continue
3333+ 3209
3334+ 3209
3335+ 3209              ; returns the right portion of a string
3336+ 3209 CD 72 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 320C D1                   pop     DE              ; Get string length
3338+ 320D D5                   push    DE              ; And re-save
3339+ 320E 1A                   ld      A,(DE)          ; Get length
3340+ 320F 90                   sub     B               ; Move back N bytes
3341+ 3210 C3 E7 30             jp      RIGHT1          ; Go and get sub-string
3342+ 3213
3343+ 3213              ; returns a piece of a string
3344+ 3213 EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3214 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3215 CD 77 32             call    MIDNUM          ; Get number supplied
3347+ 3218 04                   inc     B               ; Is it character zero?
3348+ 3219 05                   dec     B
3349+ 321A CA 73 26             jp      Z,FCERR         ; Yes - Error
3350+ 321D C5                   push    BC              ; Save starting position
3351+ 321E 1E FF                ld      E,$FF           ; All of string
3352+ 3220 FE 29                cp      ')'             ; Any length given?
3353+ 3222 CA 2C 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3225 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3355+ 3228 2C                   defb    ','
3356+ 3229 CD BF 32             call    GETINT          ; Get integer 0-255
3357+ 322C CD 5F 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 322F 29                   defb    ')'
3359+ 3230 F1                   pop     AF              ; Restore starting position
3360+ 3231 E3                   ex      (SP),HL         ; Get string,save code string
3361+ 3232 01 E9 30             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3235 C5                   push    BC              ; Save for return
3363+ 3236 3D                   dec     A               ; Starting position-1
3364+ 3237 BE                   cp      (HL)            ; Compare with length
3365+ 3238 06 00                ld      B,$00           ; Zero bytes length
3366+ 323A D0                   ret     NC              ; Null string if start past end
3367+ 323B 4F                   ld      C,A             ; Save starting position-1
3368+ 323C 7E                   ld      A,(HL)          ; Get length of string
3369+ 323D 91                   sub     C               ; Subtract start
3370+ 323E BB                   cp      E               ; Enough string for it?
3371+ 323F 47                   ld      B,A             ; Save maximum length available
3372+ 3240 D8                   ret     C               ; Truncate string if needed
3373+ 3241 43                   ld      B,E             ; Set specified length
3374+ 3242 C9                   ret                     ; Go and create string
3375+ 3243
3376+ 3243
3377+ 3243              ; return the value of a numeric string
3378+ 3243 CD B7 30     VAL:    call    GETLEN          ; Get length of string
3379+ 3246 CA 15 36             jp      Z,RESZER        ; Result zero
3380+ 3249 5F                   ld      E,A             ; Save length
3381+ 324A 23                   inc     HL
3382+ 324B 23                   inc     HL
3383+ 324C 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 324D 23                   inc     HL
3385+ 324E 66                   ld      H,(HL)          ; Get MSB of address
3386+ 324F 6F                   ld      L,A             ; HL = String address
3387+ 3250 E5                   push    HL              ; Save string address
3388+ 3251 19                   add     HL,DE
3389+ 3252 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 3253 72                   ld      (HL),D          ; Zero it to terminate
3391+ 3254 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 3255 C5                   push    BC              ; Save end+1 byte
3393+ 3256 7E                   ld      A,(HL)          ; Get starting byte
3394+ 3257 FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 3259 C2 61 32             jp      NZ,VAL1
3396+ 325C CD 11 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 325F 18 0D                jr      VAL3
3398+ 3261 FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 3263 C2 6B 32             jp      NZ,VAL2
3400+ 3266 CD 81 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 3269 18 03                jr      VAL3
3402+ 326B CD 4D 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 326E C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 326F E1                   pop     HL              ; Restore end+1 address
3405+ 3270 70                   ld      (HL),B          ; Put back original byte
3406+ 3271 C9                   ret
3407+ 3272
3408+ 3272 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 3273 CD 5F 23             call    CHKSYN          ; Make sure ")" follows
3410+ 3276 29                   defb    ')'
3411+ 3277 C1           MIDNUM: pop     BC              ; Get return address
3412+ 3278 D1                   pop     DE              ; Get number supplied
3413+ 3279 C5                   push    BC              ; Re-save return address
3414+ 327A 43                   ld      B,E             ; Number to B
3415+ 327B C9                   ret
3416+ 327C
3417+ 327C CD C2 32     INP:    call    MAKINT          ; Make it integer A
3418+ 327F 32 B9 5F             ld      (INPORT),A      ; Set input port
3419+ 3282 CD B8 5F             call    INPSUB          ; Get input from port
3420+ 3285 C3 32 2E             jp      PASSA           ; Return integer A
3421+ 3288
3422+ 3288 CD AC 32     POUT:   call    SETIO           ; Set up port number
3423+ 328B C3 80 5F             jp      OUTSUB          ; Output data and return
3424+ 328E
3425+ 328E CD AC 32     WAIT:   call    SETIO           ; Set up port number
3426+ 3291 F5                   push    AF              ; Save AND mask
3427+ 3292 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 3294 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 3295 CD A8 25             call    GETCHR          ; Get next character
3430+ 3298 CA A2 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 329B CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3432+ 329E 2C                   defb    ','
3433+ 329F CD BF 32             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32A2 C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32A3 CD B8 5F     WAITLP: call    INPSUB          ; Get input
3436+ 32A6 AB                   xor     E               ; Flip selected bits
3437+ 32A7 A0                   and     B               ; Result non-zero?
3438+ 32A8 CA A3 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32AB C9                   ret
3440+ 32AC
3441+ 32AC CD BF 32     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 32AF 32 B9 5F             ld      (INPORT),A      ; Set input port
3443+ 32B2 32 81 5F             ld      (OTPORT),A      ; Set output port
3444+ 32B5 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3445+ 32B8 2C                   defb    ','
3446+ 32B9 C3 BF 32             jp      GETINT          ; Get integer 0-255 and return
3447+ 32BC
3448+ 32BC CD A8 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 32BF CD 39 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 32C2 CD 58 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 32C5 7A                   ld      A,D             ; Get MSB of number
3452+ 32C6 B7                   or      A               ; Zero?
3453+ 32C7 C2 73 26             jp      NZ,FCERR        ; No - Error
3454+ 32CA 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 32CB CD A8 25             call    GETCHR          ; Get next character
3456+ 32CE 7B                   ld      A,E             ; Get number to A
3457+ 32CF C9                   ret
3458+ 32D0
3459+ 32D0
3460+ 32D0              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 32D0              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 32D0 CD 39 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 32D3 CD 5E 26             call    DEINT           ; get integer -32768 to 32767
3464+ 32D6 7B                   ld      A,E             ; check if address is 0
3465+ 32D7 B2                   or      D
3466+ 32D8 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 32DA F3           DISNMI: di                      ; disable INTs
3468+ 32DB CD 07 33             call    NMIDINT         ; disable VDP INT
3469+ 32DE E5                   push    HL              ; store HL
3470+ 32DF 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 32E2 22 7A 5F             ld      (NMIUSR),HL     ; store RETN
3472+ 32E5 AF                   xor     A
3473+ 32E6 32 7C 5F             ld      (NMIUSR+2),A    ; "NOP"
3474+ 32E9 18 11                jr      NMI2            ; execute the last part of code
3475+ 32EB E5           NM1:    push    HL              ; store current HL
3476+ 32EC EB                   ex      DE,HL           ; move address argument into HL
3477+ 32ED F3                   di                      ; disable INTs
3478+ 32EE CD 07 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 32F1 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 32F3 32 7A 5F             ld      (NMIUSR),A      ; store it
3481+ 32F6 22 7B 5F             ld      (NMIUSR+1),HL   ; store address
3482+ 32F9 CD 00 33             call    NMIEINT         ; re-enable VDP INT
3483+ 32FC FB           NMI2:   ei                      ; re-enable INTS
3484+ 32FD 00                   nop                     ; wait for INTs
3485+ 32FE E1                   pop    HL               ; retrieve HL
3486+ 32FF C9                   ret                     ; return to caller
3487+ 3300              ; enable VDP INT
3488+ 3300 CD 16 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 3303 F6 20                or      %00100000       ; enable VDP INT
3490+ 3305 18 03                jr      NMIINT          ; rest of code is shared
3491+ 3307              ; disable VDP INT
3492+ 3307 CD 16 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 330A D5           NMIINT: push    DE              ; store DE
3494+ 330B 5F                   ld      E,A             ; move value into E
3495+ 330C 3E 01                ld      A,$01           ; VREG #1
3496+ 330E F3                   di                      ; disable INTs
3497+ 330F CD B0 06             call    WRITE_VREG      ; disable VDP INT
3498+ 3312 FB                   ei                      ; re-enable INTs
3499+ 3313 00                   nop                     ; wait for INTs being enabled
3500+ 3314 D1                   pop     DE              ; retrieve DE
3501+ 3315 C9                   ret                     ; return to caller
3502+ 3316
3503+ 3316              ; load VREG #1 setting for current screen mode and return it into A
3504+ 3316 E5           NMIVR1: push    HL              ; store HL
3505+ 3317 D5                   push    DE              ; store DE
3506+ 3318 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
3507+ 331B 87                   add     A,A             ; multiply A by 8...
3508+ 331C 87                   add     A,A             ; ...so that reg. A can points..
3509+ 331D 87                   add     A,A             ; to the correct settings
3510+ 331E 3C                   inc     A               ; need to change VREG 1
3511+ 331F 5F                   ld      E,A             ; copy A into E
3512+ 3320 16 00                ld      D,$00           ; reset D
3513+ 3322 21 1F 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3325 19                   add     HL,DE           ; ...for current screen mode
3515+ 3326 7E                   ld      A,(HL)          ; load current setting
3516+ 3327 D1                   pop     DE              ; retrieve DE
3517+ 3328 E1                   pop     HL              ; retrieve HL
3518+ 3329 C9                   ret                     ; return to caller
3519+ 332A
3520+ 332A              ; execute a machine language routine, eventually passing a param into A
3521+ 332A CD 39 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 332D CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 3330 ED 53 20 61          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3334 AF                   xor     A               ; reset A
3525+ 3335 32 1E 61             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 3338 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 3339 CD A8 25             call    GETCHR          ; check next character
3528+ 333C 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 333E CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3530+ 3341 2C                   defb    ','
3531+ 3342 CD BF 32             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3345 32 1E 61             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 3348 3A 1E 61     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 334B ED 5B 20 61          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 334F E5                   push    HL              ; save code string address
3536+ 3350 EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 3351 11 56 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 3354 D5                   push    DE              ; store into stack
3539+ 3355 E9                   jp      (HL)            ; call user routine
3540+ 3356 E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 3357 C9                   ret                     ; return to caller
3542+ 3358
3543+ 3358
3544+ 3358              ; read the contents of a RAM location
3545+ 3358 CD 5E 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 335B 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 335C C3 32 2E             jp      PASSA           ; Return into A
3548+ 335F
3549+ 335F              ; read the contents of a VRAM location
3550+ 335F CD 5E 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 3362 EB                   ex      DE,HL           ; Copy param into HL
3552+ 3363 F3                   di                      ; Disable interrupts
3553+ 3364 CD 86 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 3367 FB                   ei                      ; Re-enable interrupts
3555+ 3368 EB                   ex      DE,HL           ; Restore HL
3556+ 3369 C3 32 2E             jp      PASSA           ; Return value into A
3557+ 336C
3558+ 336C              ; recover params for POKE/VPOKE commands
3559+ 336C              ; returns address into DE and byte to be written into A
3560+ 336C CD 39 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 336F CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 3372 ED 53 1E 61          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 3376 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3564+ 3379 2C                   defb    ','
3565+ 337A CD BF 32             call    GETINT          ; Get integer 0-255
3566+ 337D ED 5B 1E 61          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 3381 C9                   ret                     ; Return to caller
3568+ 3382
3569+ 3382              ; write a byte into a RAM location
3570+ 3382 CD 6C 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 3385 12                   ld      (DE),A          ; Load it into memory
3572+ 3386 C9                   ret
3573+ 3387
3574+ 3387              ; write a byte into a VRAM location
3575+ 3387 CD 6C 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 338A EB                   ex      DE,HL           ; Copy address into HL
3577+ 338B F3                   di                      ; Disable interrupts
3578+ 338C CD 9B 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 338F FB                   ei                      ; Re-enable interrupts
3580+ 3390 EB                   ex      DE,HL           ; Restore HL
3581+ 3391 C9                   ret                     ; Return to caller
3582+ 3392
3583+ 3392              ; position the cursor at a specific X,Y location onto screen
3584+ 3392 CD BF 32     LOCATE: call    GETINT          ; get the first param into A
3585+ 3395 E5                   push    HL              ; store HL
3586+ 3396 21 0E 61             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 3399 5E                   ld      E,(HL)          ; load screen width into E
3588+ 339A E1                   pop     HL              ; restore HL
3589+ 339B BB                   cp      E               ; compare witdh with param
3590+ 339C D2 73 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 339F 32 1E 61             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33A2 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33A5 2C                   defb    ','
3594+ 33A6 CD BF 32             call    GETINT          ; Get the second param into A
3595+ 33A9 E5                   push    HL              ; store HL
3596+ 33AA 21 0F 61             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33AD 5E                   ld      E,(HL)          ; load screen width into A
3598+ 33AE E1                   pop     HL              ; restore HL
3599+ 33AF BB                   cp      E               ; compare witdh with param
3600+ 33B0 D2 73 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 33B3 32 16 61             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 33B6 3A 1E 61             ld      A,(TMPBFR1)     ; recover the new X
3603+ 33B9 32 15 61             ld      (SCR_CUR_NX),A  ; store new X
3604+ 33BC E5                   push    HL              ; store HL
3605+ 33BD F3                   di                      ; disable INTs
3606+ 33BE CD CC 06             call    MOVCRS          ; move cursor to new location
3607+ 33C1 FB                   ei                      ; re-enable INTs
3608+ 33C2 E1                   pop     HL              ; restore HL
3609+ 33C3 C9                   ret                     ; return to caller
3610+ 33C4
3611+ 33C4              ; write a byte into one of the PSG registers
3612+ 33C4 CD BF 32     SREG:   call    GETINT          ; Get register number back into A
3613+ 33C7 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 33C9 D2 73 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 33CC 32 1E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 33CF CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3617+ 33D2 2C                   defb    ','
3618+ 33D3 CD BF 32             call    GETINT          ; get second value (0-255), returned into A
3619+ 33D6 5F                   ld      E,A             ; store value into E
3620+ 33D7 3A 1E 61             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 33DA F3                   di                      ; disable INTs
3622+ 33DB 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 33DD ED 79                out     (C),A           ; send register # to PSG
3624+ 33DF 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 33E1 ED 59                out     (C),E           ; send byte to write into selected register
3626+ 33E3 FB                   ei                      ; re-enable INTs
3627+ 33E4 C9                   ret                     ; return to caller
3628+ 33E5
3629+ 33E5              ; VOLUME ch,vol
3630+ 33E5              ; set the volume for the audio channels
3631+ 33E5              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 33E5 CD BF 32     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 33E8 FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 33EA D2 73 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 33ED 32 1E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 33F0 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3637+ 33F3 2C                   defb    ','
3638+ 33F4 CD BF 32             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 33F7 FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 33F9 D2 73 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 33FC 57                   ld      D,A             ; store volume into D
3642+ 33FD 3A 1E 61             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 3400 A7                   and     A               ; is it 0? (0=every channel)
3644+ 3401 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 3403 06 03                ld      B,$03           ; yes, set every channel
3646+ 3405 1E 08                ld      E,$08           ; register volume of first channel
3647+ 3407 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 3409 ED 59                out     (C),E           ; set register #
3649+ 340B 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 340D ED 51                out     (C),D           ; send volume
3651+ 340F 1C                   inc     E               ; next register
3652+ 3410 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 3412 C9                   ret                     ; return to caller
3654+ 3413 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3415 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 3417 ED 79                out     (C),A           ; set register
3657+ 3419 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 341B ED 51                out     (C),D           ; send volume level
3659+ 341D C9                   ret                     ; return to caller
3660+ 341E
3661+ 341E              ; SOUND ch,tone,dur
3662+ 341E              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 341E              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 341E              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 341E CD BF 32     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 3421 A7                   and     A               ; is it zero?
3667+ 3422 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3424 E5                   push    HL              ; store HL
3669+ 3425 F3                   di                      ; disable INTs
3670+ 3426 CD 91 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 3429 FB                   ei                      ; re-enable INTs
3672+ 342A E1                   pop     HL              ; retrieve HL
3673+ 342B C9                   ret                     ; return to caller
3674+ 342C 32 1E 61     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 342F FE 04                cp      $04             ; is channel >3?
3676+ 3431 D2 B0 34             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3434 CD 5F 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 3437 2C                   defb    ','
3679+ 3438 CD 39 2A             call    GETNUM          ; Get tone frequency
3680+ 343B CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 343E ED 53 20 61          ld      (TMPBFR2),DE    ; Store frequency
3682+ 3442 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3445 2C                   defb    ','
3684+ 3446 CD 39 2A             call    GETNUM          ; Get duration
3685+ 3449 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 344C ED 53 22 61          ld      (TMPBFR3),DE    ; Store duration
3687+ 3450                                              ; CHECK CHANNEL
3688+ 3450 3A 1E 61             ld      A,(TMPBFR1)     ; recover channel
3689+ 3453 FE 01                cp      $01             ; is channel <1?
3690+ 3455 DA 73 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 3458                                              ; CHECK FREQUENCY
3692+ 3458 ED 5B 20 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 345C 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 345D FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 345F D2 73 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 3462                                              ; CHECK DURATION
3697+ 3462 ED 5B 22 61          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 3466 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 3467 E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 3469 C2 73 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 346C                                              ;
3702+ 346C                                              ; SET TONE:
3703+ 346C                                              ; let's start by setting up the channel
3704+ 346C 3A 1E 61             ld      A,(TMPBFR1)     ; restore channel value
3705+ 346F FE 03                cp      $03             ; is it 3?
3706+ 3471 20 02                jr      NZ,SND1         ; no, jump over
3707+ 3473 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 3475 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 3476 CD FD 34             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 3479                                              ; SET FREQUENCY
3711+ 3479                                              ; we simply get frequency and subtract from 4096. The result
3712+ 3479                                              ; is put into register pair of the corresponding freq tone channel
3713+ 3479 ED 5B 20 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 347D E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 347E 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 3481 A7                   and     A               ; reset C flag
3717+ 3482 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 3484 3A 1E 61             ld      A,(TMPBFR1)     ; restore channel value
3719+ 3487 3D                   dec     A               ; set A into the range 0~2
3720+ 3488 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 3489 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 348B ED 79                out     (C),A           ; select first register of the pair
3723+ 348D 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 348F ED 69                out     (C),L           ; send high byte
3725+ 3491 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 3493 3C                   inc     A               ; second register of the pair
3727+ 3494 ED 79                out     (C),A           ; select register
3728+ 3496 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 3498 ED 61                out     (C),H           ; send low byte
3730+ 349A ED 5B 22 61          ld      DE,(TMPBFR3)    ; recover duration
3731+ 349E 3A 1E 61             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34A1 3D                   dec     A               ; set channel into the range 0~2
3733+ 34A2 87                   add     A,A             ; double A to find the correct offset
3734+ 34A3 21 52 61             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34A6 85                   add     A,L             ; ...the proper...
3736+ 34A7 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34A9 24                   inc     H               ; yes, increment H)
3738+ 34AA 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34AB 73                   ld      (HL),E          ; ...and store the value
3740+ 34AC 23                   inc     HL
3741+ 34AD 72                   ld      (HL),D
3742+ 34AE E1                   pop     HL              ; retrieve HL
3743+ 34AF C9                   ret                     ; Return to caller
3744+ 34B0 FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 34B2 D2 73 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 34B5 CD 5F 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 34B8 2C                   defb    ','
3748+ 34B9 CD BF 32             call    GETINT          ; get integer 0-255 (frequency)
3749+ 34BC FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 34BE D2 73 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 34C1 32 20 61             ld      (TMPBFR2),A     ; store freq.
3752+ 34C4 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 34C5 CD A8 25             call    GETCHR          ; check that nothing follows
3754+ 34C8 C2 5F 20             jp      NZ,SNERR        ; error if no empty line
3755+ 34CB 3A 20 61             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 34CE 5F                   ld      E,A             ; store freq into E
3757+ 34CF 3A 1E 61             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 34D2 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 34D4 FE 03                cp      $03             ; is it 3?
3760+ 34D6 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 34D8 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 34DA 87           NOS1:   add     A,A
3763+ 34DB 87                   add     A,A
3764+ 34DC 87                   add     A,A             ; let's move A 3 bits to left
3765+ 34DD 47                   ld      B,A             ; store channel into B
3766+ 34DE 7B                   ld      A,E             ; check if
3767+ 34DF A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 34E0 F3                   di                      ; disable INts
3769+ 34E1 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 34E3 3E 07                ld      A,$07           ; mixer register
3771+ 34E5 CD DF 0C             call    SETSNDREG       ; set mixer register
3772+ 34E8 ED 78                in      A,(C)           ; load current mixer value
3773+ 34EA B0                   or      B               ; disable noise
3774+ 34EB 18 19                jr      NOS3            ; continue over
3775+ 34ED 78           NOS2:   ld      A,B             ; recover channel
3776+ 34EE 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 34EF CD FD 34             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 34F2 3E 06                ld      A,$06           ; write into noise register
3779+ 34F4 CD DF 0C             call    SETSNDREG       ; set register into PSG
3780+ 34F7 7B                   ld      A,E             ; load value for noise frequency
3781+ 34F8 CD E4 0C             call    WRTSNDREG       ; write data into register $06
3782+ 34FB FB                   ei                      ; re-enable INTs
3783+ 34FC C9                   ret
3784+ 34FD                      ; enable line into mixer of channel stored in A
3785+ 34FD 47           WRTSND: ld      B,A             ; move channel into B
3786+ 34FE 3E 07                ld      A,$07           ; mixer register
3787+ 3500 CD DF 0C             call    SETSNDREG       ; set mixer register
3788+ 3503 ED 78                in      A,(C)           ; load current value
3789+ 3505 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 3506                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 3506                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 3506                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 3506                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 3506 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 3507 3E 07                ld      A,$07           ; mixer address
3796+ 3509 CD DF 0C             call    SETSNDREG       ; set register
3797+ 350C 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 350D CD E4 0C             call    WRTSNDREG       ; send new value for the mixer
3799+ 3510 FB                   ei                      ; re-enable INTs
3800+ 3511 C9                   ret                     ; return to caller
3801+ 3512
3802+ 3512              ; write a byte into one of the VDP registers
3803+ 3512 CD BF 32     VREG:   call    GETINT          ; Get register number back into A
3804+ 3515 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 3517 D2 73 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 351A 32 1E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 351D CD 5F 23             call    CHKSYN          ; Make sure ',' follows
3808+ 3520 2C                   defb    ','
3809+ 3521 CD BF 32             call    GETINT          ; get value (0-255)
3810+ 3524 5F                   ld      E,A             ; store value into E
3811+ 3525 3A 1E 61             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 3528 F3                   di                      ; disable INTs
3813+ 3529 CD B0 06             call    WRITE_VREG      ; write value into VDP register
3814+ 352C FB                   ei                      ; re-enable INTs
3815+ 352D C9                   ret                     ; return to caller
3816+ 352E
3817+ 352E              ; read the VDP status register and return it into A
3818+ 352E CD 5E 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 3531 F3                   di                      ; disable INTs
3820+ 3532 CD BB 06             call    READ_VSTAT      ; read VDP register status
3821+ 3535 FB                   ei                      ; re-enable INTs
3822+ 3536 C3 32 2E             jp      PASSA           ; Return integer A
3823+ 3539
3824+ 3539              ; read from PSG register and return it into A
3825+ 3539 CD 5E 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 353C 7B                   ld      A,E             ; consider LSB
3827+ 353D FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 353F D2 73 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 3542 F3                   di                      ; disable INts
3830+ 3543 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3545 ED 79                out     (C),A           ; send register to read from
3832+ 3547 ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 3549 FB                   ei                      ; re-enable INTs
3834+ 354A C3 32 2E             jp      PASSA           ; return A
3835+ 354D
3836+ 354D              ; read the temp key buffer and return the value of the current key being pressed
3837+ 354D              ; can wait for the number of 100thds of second before to return
3838+ 354D CD AC 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 3550 CD 5E 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 3553 C5                   push    BC              ; store BC
3841+ 3554 3A FE 60             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 3557 47                   ld      B,A             ; move it into B
3843+ 3558 3A FE 60     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 355B B8                   cp      B               ; ...to let the sniffer collect...
3845+ 355C 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 355E 7A                   ld      A,D             ; check the param
3847+ 355F B3                   or      E               ; if DE<>0 then...
3848+ 3560 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 3562 3A 5A 61             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 3565 18 2A                jr      ENDINK          ; ...return it
3851+ 3567 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 3568 FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 356A D2 73 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 356D E5                   push    HL              ; store HL
3855+ 356E 21 09 00             ld      HL,$0009        ; check if value
3856+ 3571 CD DF 4C             call    CMP16           ; is < 10
3857+ 3574 E1                   pop     HL              ; retrieve HL
3858+ 3575 DA 7B 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 3578 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 357B 3A FE 60     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 357E 47                   ld      B,A             ; move it into B
3862+ 357F 3A 5A 61     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 3582 A7                   and     A               ; is it 0?
3864+ 3583 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 3585 3A FE 60             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 3588 B8                   cp      B               ; is it the same value?
3867+ 3589 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 358B 47                   ld      B,A             ; store new value
3869+ 358C 1B                   dec     DE              ; no, decrement timer
3870+ 358D 7A                   ld      A,D             ; check if zero reached
3871+ 358E B3                   or      E               ; by ORing D and E
3872+ 358F 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 3591 C1           ENDINK: pop     BC              ; restore BC
3874+ 3592 F5                   push    AF              ; store A
3875+ 3593 F3                   di                      ; disable INTs
3876+ 3594 AF                   xor     A               ; clear the...
3877+ 3595 32 5A 61             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 3598 FB                   ei                      ; re-enable INTs
3879+ 3599 F1                   pop     AF              ; retrieve A
3880+ 359A C3 32 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 359D
3882+ 359D
3883+ 359D 21 C4 3A     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35A0 CD 95 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35A3 C3 AF 35             jp      FPADD           ; Add BCDE to FPREG
3886+ 35A6
3887+ 35A6
3888+ 35A6 CD 95 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35A9 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35AA C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35AB D1                   pop     DE
3892+ 35AC CD 6F 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 35AF 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 35B0 B7                   or      A               ; Is number zero?
3895+ 35B1 C8                   ret     Z               ; Yes - Nothing to add
3896+ 35B2 3A 75 61             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 35B5 B7                   or      A               ; Is this number zero?
3898+ 35B6 CA 87 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 35B9 90                   sub     B               ; BCDE number larger?
3900+ 35BA D2 C9 35             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 35BD 2F                   cpl                     ; Two's complement
3902+ 35BE 3C                   inc     A               ;  FP exponent
3903+ 35BF EB                   ex      DE,HL
3904+ 35C0 CD 77 38             call    STAKFP          ; Put FPREG on stack
3905+ 35C3 EB                   ex      DE,HL
3906+ 35C4 CD 87 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 35C7 C1                   pop     BC              ; Restore number from stack
3908+ 35C8 D1                   pop     DE
3909+ 35C9 FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 35CB D0                   ret     NC              ; Yes - First number is result
3911+ 35CC F5                   push    AF              ; Save number of bits to scale
3912+ 35CD CD AC 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 35D0 67                   ld      H,A             ; Save sign of result
3914+ 35D1 F1                   pop     AF              ; Restore scaling factor
3915+ 35D2 CD 74 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 35D5 B4                   or      H               ; Result to be positive?
3917+ 35D6 21 72 61             ld      HL,FPREG        ; Point to FPREG
3918+ 35D9 F2 EF 35             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 35DC CD 54 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 35DF D2 35 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 35E2 23                   inc     HL              ; Point to exponent
3922+ 35E3 34                   inc     (HL)            ; Increment it
3923+ 35E4 CA 6E 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 35E7 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 35E9 CD 8A 36             call    SHRT1           ; Shift result right
3926+ 35EC C3 35 36             jp      RONDUP          ; Round it up
3927+ 35EF
3928+ 35EF AF           MINCDE: xor     A               ; Clear A and carry
3929+ 35F0 90                   sub     B               ; Negate exponent
3930+ 35F1 47                   ld      B,A             ; Re-save exponent
3931+ 35F2 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 35F3 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 35F4 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 35F5 23                   inc     HL
3935+ 35F6 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 35F7 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 35F8 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 35F9 23                   inc     HL
3939+ 35FA 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 35FB 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 35FC 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 35FD DC 60 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 3600
3944+ 3600 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 3601 63                   ld      H,E             ; H = LSB
3946+ 3602 AF                   xor     A
3947+ 3603 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3604 79                   ld      A,C             ; Get MSB
3949+ 3605 B7                   or      A               ; Is it zero?
3950+ 3606 C2 22 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 3609 4A                   ld      C,D             ; MSB = NMSB
3952+ 360A 54                   ld      D,H             ; NMSB= LSB
3953+ 360B 65                   ld      H,L             ; LSB = VLSB
3954+ 360C 6F                   ld      L,A             ; VLSB= 0
3955+ 360D 78                   ld      A,B             ; Get exponent
3956+ 360E D6 08                sub     $08             ; Count 8 bits
3957+ 3610 FE E0                cp      -24-8           ; Was number zero?
3958+ 3612 C2 03 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3615 AF           RESZER: xor     A               ; Result is zero
3960+ 3616 32 75 61     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 3619 C9                   ret
3962+ 361A
3963+ 361A 05           NORMAL: dec     B               ; Count bits
3964+ 361B 29                   add     HL,HL           ; Shift HL left
3965+ 361C 7A                   ld      A,D             ; Get NMSB
3966+ 361D 17                   rla                     ; Shift left with last bit
3967+ 361E 57                   ld      D,A             ; Save NMSB
3968+ 361F 79                   ld      A,C             ; Get MSB
3969+ 3620 8F                   adc     A,A             ; Shift left with last bit
3970+ 3621 4F                   ld      C,A             ; Save MSB
3971+ 3622 F2 1A 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3625 78                   ld      A,B             ; Number of bits shifted
3973+ 3626 5C                   ld      E,H             ; Save HL in EB
3974+ 3627 45                   ld      B,L
3975+ 3628 B7                   or      A               ; Any shifting done?
3976+ 3629 CA 35 36             jp      Z,RONDUP        ; No - Round it up
3977+ 362C 21 75 61             ld      HL,FPEXP        ; Point to exponent
3978+ 362F 86                   add     A,(HL)          ; Add shifted bits
3979+ 3630 77                   ld      (HL),A          ; Re-save exponent
3980+ 3631 D2 15 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3634 C8                   ret     Z               ; Result is zero
3982+ 3635 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 3636 21 75 61     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 3639 B7                   or      A               ; Any rounding?
3985+ 363A FC 47 36             call    M,FPROND        ; Yes - Round number up
3986+ 363D 46                   ld      B,(HL)          ; B = Exponent
3987+ 363E 23                   inc     HL
3988+ 363F 7E                   ld      A,(HL)          ; Get sign of result
3989+ 3640 E6 80                and     %10000000       ; Only bit 7 needed
3990+ 3642 A9                   xor     C               ; Set correct sign
3991+ 3643 4F                   ld      C,A             ; Save correct sign in number
3992+ 3644 C3 87 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 3647
3994+ 3647 1C           FPROND: inc     E               ; Round LSB
3995+ 3648 C0                   ret     NZ              ; Return if ok
3996+ 3649 14                   inc     D               ; Round NMSB
3997+ 364A C0                   ret     NZ              ; Return if ok
3998+ 364B 0C                   inc     C               ; Round MSB
3999+ 364C C0                   ret     NZ              ; Return if ok
4000+ 364D 0E 80                ld      C,$80           ; Set normal value
4001+ 364F 34                   inc     (HL)            ; Increment exponent
4002+ 3650 C0                   ret     NZ              ; Return if ok
4003+ 3651 C3 6E 20             jp      OVERR           ; Overflow error
4004+ 3654
4005+ 3654 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 3655 83                   add     A,E             ; Add LSB of BCDE
4007+ 3656 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 3657 23                   inc     HL
4009+ 3658 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 3659 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 365A 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 365B 23                   inc     HL
4013+ 365C 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 365D 89                   adc     A,C             ; Add MSB of BCDE
4015+ 365E 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 365F C9                   ret
4017+ 3660
4018+ 3660 21 76 61     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 3663 7E                   ld      A,(HL)          ; Get sign of result
4020+ 3664 2F                   cpl                     ; Negate it
4021+ 3665 77                   ld      (HL),A          ; Put it back
4022+ 3666 AF                   xor     A
4023+ 3667 6F                   ld      L,A             ; Set L to zero
4024+ 3668 90                   sub     B               ; Negate exponent,set carry
4025+ 3669 47                   ld      B,A             ; Re-save exponent
4026+ 366A 7D                   ld      A,L             ; Load zero
4027+ 366B 9B                   sbc     A,E             ; Negate LSB
4028+ 366C 5F                   ld      E,A             ; Re-save LSB
4029+ 366D 7D                   ld      A,L             ; Load zero
4030+ 366E 9A                   sbc     A,D             ; Negate NMSB
4031+ 366F 57                   ld      D,A             ; Re-save NMSB
4032+ 3670 7D                   ld      A,L             ; Load zero
4033+ 3671 99                   sbc     A,C             ; Negate MSB
4034+ 3672 4F                   ld      C,A             ; Re-save MSB
4035+ 3673 C9                   ret
4036+ 3674
4037+ 3674 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 3676 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 3678 DA 83 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 367B 43                   ld      B,E             ; <- Shift
4041+ 367C 5A                   ld      E,D             ; <- right
4042+ 367D 51                   ld      D,C             ; <- eight
4043+ 367E 0E 00                ld      C,$00           ; <- bits
4044+ 3680 C3 76 36             jp      SCALLP          ; More bits to shift
4045+ 3683
4046+ 3683 C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 3685 6F                   ld      L,A             ; Save bits to shift
4048+ 3686 AF           SHRLP:  xor     A               ; Flag for all done
4049+ 3687 2D                   dec     L               ; All shifting done?
4050+ 3688 C8                   ret     Z               ; Yes - Return
4051+ 3689 79                   ld      A,C             ; Get MSB
4052+ 368A 1F           SHRT1:  rra                     ; Shift it right
4053+ 368B 4F                   ld      C,A             ; Re-save
4054+ 368C 7A                   ld      A,D             ; Get NMSB
4055+ 368D 1F                   rra                     ; Shift right with last bit
4056+ 368E 57                   ld      D,A             ; Re-save it
4057+ 368F 7B                   ld      A,E             ; Get LSB
4058+ 3690 1F                   rra                     ; Shift right with last bit
4059+ 3691 5F                   ld      E,A             ; Re-save it
4060+ 3692 78                   ld      A,B             ; Get underflow
4061+ 3693 1F                   rra                     ; Shift right with last bit
4062+ 3694 47                   ld      B,A             ; Re-save underflow
4063+ 3695 C3 86 36             jp      SHRLP           ; More bits to do
4064+ 3698
4065+ 3698 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 369C
4067+ 369C 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 369D AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36A1 F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36A5 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36A9
4072+ 36A9 CD 46 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36AC B7                   or      A
4074+ 36AD EA 73 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 36B0 21 75 61             ld      HL,FPEXP        ; Point to exponent
4076+ 36B3 7E                   ld      A,(HL)          ; Get exponent
4077+ 36B4 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 36B7 11 F3 04             ld      DE,$04F3
4079+ 36BA 90                   sub     B               ; Scale value to be < 1
4080+ 36BB F5                   push    AF              ; Save scale factor
4081+ 36BC 70                   ld      (HL),B          ; Save new exponent
4082+ 36BD D5                   push    DE              ; Save SQR(1/2)
4083+ 36BE C5                   push    BC
4084+ 36BF CD AF 35             call    FPADD           ; Add SQR(1/2) to value
4085+ 36C2 C1                   pop     BC              ; Restore SQR(1/2)
4086+ 36C3 D1                   pop     DE
4087+ 36C4 04                   inc     B               ; Make it SQR(2)
4088+ 36C5 CD 9C 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 36C8 21 98 36             ld      HL,UNITY        ; Point to 1.
4090+ 36CB CD A6 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 36CE 21 9C 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 36D1 CD 8E 3B             call    SUMSER          ; Evaluate sum of series
4093+ 36D4 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 36D7 11 00 00             ld      DE,$0000
4095+ 36DA CD AF 35             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 36DD F1                   pop     AF              ; Restore scale factor
4097+ 36DE CD C1 39             call    RSCALE          ; Re-scale number
4098+ 36E1 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 36E4 11 18 72             ld      DE,$7218
4100+ 36E7 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 36E8
4102+ 36E8 C1           MULT:   pop     BC              ; Get number from stack
4103+ 36E9 D1                   pop     DE
4104+ 36EA CD 46 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 36ED C8                   ret     Z               ; Return zero if zero
4106+ 36EE 2E 00                ld      L,$00           ; Flag add exponents
4107+ 36F0 CD 04 38             call    ADDEXP          ; Add exponents
4108+ 36F3 79                   ld      A,C             ; Get MSB of multiplier
4109+ 36F4 32 84 61             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 36F7 EB                   ex      DE,HL
4111+ 36F8 22 85 61             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 36FB 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 36FE 50                   ld      D,B
4114+ 36FF 58                   ld      E,B
4115+ 3700 21 00 36             ld      HL,BNORM        ; Address of normalise
4116+ 3703 E5                   push    HL              ; Save for return
4117+ 3704 21 0C 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 3707 E5                   push    HL              ; Save for NMSB,MSB
4119+ 3708 E5                   push    HL              ;
4120+ 3709 21 72 61             ld      HL,FPREG        ; Point to number
4121+ 370C 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 370D 23                   inc     HL              ; Point to NMSB
4123+ 370E B7                   or      A               ; Test LSB
4124+ 370F CA 38 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 3712 E5                   push    HL              ; Save address of number
4126+ 3713 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3715 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 3716 67                   ld      H,A             ; Save LSB
4129+ 3717 79                   ld      A,C             ; Get MSB
4130+ 3718 D2 26 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 371B E5                   push    HL              ; Save LSB and count
4132+ 371C 2A 85 61             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 371F 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 3720 EB                   ex      DE,HL           ; Leave sum in DE
4135+ 3721 E1                   pop     HL              ; Restore MSB and count
4136+ 3722 3A 84 61             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3725 89                   adc     A,C             ; Add MSB
4138+ 3726 1F           NOMADD: rra                     ; Shift MSB right
4139+ 3727 4F                   ld      C,A             ; Re-save MSB
4140+ 3728 7A                   ld      A,D             ; Get NMSB
4141+ 3729 1F                   rra                     ; Shift NMSB right
4142+ 372A 57                   ld      D,A             ; Re-save NMSB
4143+ 372B 7B                   ld      A,E             ; Get LSB
4144+ 372C 1F                   rra                     ; Shift LSB right
4145+ 372D 5F                   ld      E,A             ; Re-save LSB
4146+ 372E 78                   ld      A,B             ; Get VLSB
4147+ 372F 1F                   rra                     ; Shift VLSB right
4148+ 3730 47                   ld      B,A             ; Re-save VLSB
4149+ 3731 2D                   dec     L               ; Count bits multiplied
4150+ 3732 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 3733 C2 15 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 3736 E1           POPHRT: pop     HL              ; Restore address of number
4153+ 3737 C9                   ret
4154+ 3738
4155+ 3738 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 3739 5A                   ld      E,D
4157+ 373A 51                   ld      D,C
4158+ 373B 4F                   ld      C,A
4159+ 373C C9                   ret
4160+ 373D
4161+ 373D
4162+ 373D              ; WORKING ââ
4163+ 373D C1           DINT:   pop     BC              ; Get number from stack
4164+ 373E D1                   pop     DE
4165+ 373F CD 9C 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 3742 C3 19 39             jp      INT             ; return INT(FPREG)
4167+ 3745
4168+ 3745
4169+ 3745              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3745              ; A is in stack; B is in FPREG
4171+ 3745              ; math is:
4172+ 3745              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3745 CD 19 39     MOD:    call    INT             ; B=INT(B)
4174+ 3748 CD 92 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 374B ED 53 22 61          ld      (TMPBFR3),DE    ; store B into...
4176+ 374F ED 43 24 61          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 3753 C1                   pop     BC              ; recover A...
4178+ 3754 D1                   pop     DE              ; ...from stack
4179+ 3755 CD 87 38             call    FPBCDE          ; store A into FPREG
4180+ 3758 CD 19 39             call    INT             ; get integer part: A=INT(A)
4181+ 375B CD 92 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 375E ED 53 1E 61          ld      (TMPBFR1),DE    ; store A into...
4183+ 3762 ED 43 20 61          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 3766                                              ; begin calculation
4185+ 3766 2A 22 61             ld      HL,(TMPBFR3)    ; move B...
4186+ 3769 22 72 61             ld      (FPREG),HL      ; ...from...
4187+ 376C 2A 24 61             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 376F 22 74 61             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 3772 CD 9C 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 3775 CD 19 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 3778 ED 5B 22 61          ld      DE,(TMPBFR3)    ; load B...
4192+ 377C ED 4B 24 61          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 3780 CD EA 36             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 3783 ED 5B 1E 61          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 3787 ED 4B 20 61          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 378B C3 AC 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 378E
4198+ 378E
4199+ 378E CD 77 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 3791 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 3794 11 00 00             ld      DE,$0000
4202+ 3797 CD 87 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 379A
4204+ 379A C1           DIV:    pop     BC              ; Get number from stack
4205+ 379B D1                   pop     DE
4206+ 379C CD 46 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 379F CA 62 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37A2 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37A4 CD 04 38             call    ADDEXP          ; Subtract exponents
4210+ 37A7 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37A8 34                   inc     (HL)
4212+ 37A9 2B                   dec     HL              ; Point to MSB
4213+ 37AA 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37AB 32 8C 5F             ld      (DIV3),A        ; Save for subtraction
4215+ 37AE 2B                   dec     HL
4216+ 37AF 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 37B0 32 88 5F             ld      (DIV2),A        ; Save for subtraction
4218+ 37B3 2B                   dec     HL
4219+ 37B4 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 37B5 32 84 5F             ld      (DIV1),A        ; Save for subtraction
4221+ 37B8 41                   ld      B,C             ; Get MSB
4222+ 37B9 EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 37BA AF                   xor     A
4224+ 37BB 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 37BC 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 37BD 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 37BE 32 8F 5F             ld      (DIV4),A        ; Clear overflow count
4228+ 37C1 E5           DIVLP:  push    HL              ; Save divisor
4229+ 37C2 C5                   push    BC
4230+ 37C3 7D                   ld      A,L             ; Get LSB of number
4231+ 37C4 CD 83 5F             call    DIVSUP          ; Subt' divisor from dividend
4232+ 37C7 DE 00                sbc     A,$00           ; Count for overflows
4233+ 37C9 3F                   ccf
4234+ 37CA D2 D4 37             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 37CD 32 8F 5F             ld      (DIV4),A        ; Re-save overflow count
4236+ 37D0 F1                   pop     AF              ; Scrap divisor
4237+ 37D1 F1                   pop     AF
4238+ 37D2 37                   scf                     ; Set carry to
4239+ 37D3 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 37D4
4241+ 37D4 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 37D5 E1                   pop     HL
4243+ 37D6 79                   ld      A,C             ; Get MSB of quotient
4244+ 37D7 3C                   inc     A
4245+ 37D8 3D                   dec     A
4246+ 37D9 1F                   rra                     ; Bit 0 to bit 7
4247+ 37DA FA 36 36             jp      M,RONDB         ; Done - Normalise result
4248+ 37DD 17                   rla                     ; Restore carry
4249+ 37DE 7B                   ld      A,E             ; Get LSB of quotient
4250+ 37DF 17                   rla                     ; Double it
4251+ 37E0 5F                   ld      E,A             ; Put it back
4252+ 37E1 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 37E2 17                   rla                     ; Double it
4254+ 37E3 57                   ld      D,A             ; Put it back
4255+ 37E4 79                   ld      A,C             ; Get MSB of quotient
4256+ 37E5 17                   rla                     ; Double it
4257+ 37E6 4F                   ld      C,A             ; Put it back
4258+ 37E7 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 37E8 78                   ld      A,B             ; Get MSB of divisor
4260+ 37E9 17                   rla                     ; Double it
4261+ 37EA 47                   ld      B,A             ; Put it back
4262+ 37EB 3A 8F 5F             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 37EE 17                   rla                     ; Double it
4264+ 37EF 32 8F 5F             ld      (DIV4),A        ; Put it back
4265+ 37F2 79                   ld      A,C             ; Get MSB of quotient
4266+ 37F3 B2                   or      D               ; Merge NMSB
4267+ 37F4 B3                   or      E               ; Merge LSB
4268+ 37F5 C2 C1 37             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 37F8 E5                   push    HL              ; Save divisor
4270+ 37F9 21 75 61             ld      HL,FPEXP        ; Point to exponent
4271+ 37FC 35                   dec     (HL)            ; Divide by 2
4272+ 37FD E1                   pop     HL              ; Restore divisor
4273+ 37FE C2 C1 37             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 3801 C3 6E 20             jp      OVERR           ; Overflow error
4275+ 3804
4276+ 3804
4277+ 3804 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3805 B7                   or      A               ; Test it
4279+ 3806 CA 28 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 3809 7D                   ld      A,L             ; Get add/subtract flag
4281+ 380A 21 75 61             ld      HL,FPEXP        ; Point to exponent
4282+ 380D AE                   xor     (HL)            ; Add or subtract it
4283+ 380E 80                   add     A,B             ; Add the other exponent
4284+ 380F 47                   ld      B,A             ; Save new exponent
4285+ 3810 1F                   rra                     ; Test exponent for overflow
4286+ 3811 A8                   xor     B
4287+ 3812 78                   ld      A,B             ; Get exponent
4288+ 3813 F2 27 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 3816 C6 80                add     A,$80           ; Add excess 128
4290+ 3818 77                   ld      (HL),A          ; Save new exponent
4291+ 3819 CA 36 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 381C CD AC 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 381F 77                   ld      (HL),A          ; Save new exponent
4294+ 3820 2B                   dec     HL              ; Point to MSB
4295+ 3821 C9                   ret
4296+ 3822
4297+ 3822 CD 46 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3825 2F                   cpl                     ; Invert sign
4299+ 3826 E1                   pop     HL              ; Clean up stack
4300+ 3827 B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 3828 E1           OVTST3: pop     HL              ; Clear off return address
4302+ 3829 F2 15 36             jp      P,RESZER        ; Result zero
4303+ 382C C3 6E 20             jp      OVERR           ; Overflow error
4304+ 382F
4305+ 382F CD 92 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 3832 78                   ld      A,B             ; Get exponent
4307+ 3833 B7                   or      A               ; Is it zero?
4308+ 3834 C8                   ret     Z               ; Yes - Result is zero
4309+ 3835 C6 02                add     A,$02           ; Multiply by 4
4310+ 3837 DA 6E 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 383A 47                   ld      B,A             ; Re-save exponent
4312+ 383B CD AF 35             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 383E 21 75 61             ld      HL,FPEXP        ; Point to exponent
4314+ 3841 34                   inc     (HL)            ; Double number (Times 10)
4315+ 3842 C0                   ret     NZ              ; Ok - Return
4316+ 3843 C3 6E 20             jp      OVERR           ; Overflow error
4317+ 3846
4318+ 3846 3A 75 61     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 3849 B7                   or      A
4320+ 384A C8                   ret     Z               ; RETurn if number is zero
4321+ 384B 3A 74 61             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 384E FE                   defb    0FEH            ; Test sign
4323+ 384F 2F           RETREL: cpl                     ; Invert sign
4324+ 3850 17                   rla                     ; Sign bit to carry
4325+ 3851 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 3852 C0                   ret     NZ              ; Return -1 if negative
4327+ 3853 3C                   inc     A               ; Bump to +1
4328+ 3854 C9                   ret                     ; Positive - Return +1
4329+ 3855
4330+ 3855 CD 46 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 3858 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 385A 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 385D 21 75 61     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 3860 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 3861 70                   ld      (HL),B          ; Save exponent
4336+ 3862 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 3864 23                   inc     HL              ; Point to sign of result
4338+ 3865 36 80                ld      (HL),$80        ; Set sign of result
4339+ 3867 17                   rla                     ; Carry = sign of integer
4340+ 3868 C3 FD 35             jp      CONPOS          ; Set sign of result
4341+ 386B
4342+ 386B CD 46 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 386E F0                   ret     P               ; Return if positive
4344+ 386F 21 74 61     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 3872 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 3873 EE 80                xor     $80             ; Invert sign of mantissa
4347+ 3875 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 3876 C9                   ret
4349+ 3877
4350+ 3877 EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 3878 2A 72 61             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 387B E3                   ex      (SP),HL         ; Stack them,get return
4353+ 387C E5                   push    HL              ; Re-save return
4354+ 387D 2A 74 61             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 3880 E3                   ex      (SP),HL         ; Stack them,get return
4356+ 3881 E5                   push    HL              ; Re-save return
4357+ 3882 EB                   ex      DE,HL           ; Restore code string address
4358+ 3883 C9                   ret
4359+ 3884
4360+ 3884              ; store F.P. number from BCDE into (FPREG)
4361+ 3884 CD 95 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 3887 EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 3888 22 72 61             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 388B 60                   ld      H,B             ; Exponent of number
4365+ 388C 69                   ld      L,C             ; MSB of number
4366+ 388D 22 74 61             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 3890 EB                   ex      DE,HL           ; Restore code string address
4368+ 3891 C9                   ret
4369+ 3892
4370+ 3892              ; load F.P. number from (FPREG) into BCDE
4371+ 3892 21 72 61     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 3895 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 3896 23                   inc     HL
4374+ 3897 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 3898 23                   inc     HL
4376+ 3899 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 389A 23                   inc     HL
4378+ 389B 46                   ld      B,(HL)          ; Get exponent of number
4379+ 389C 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 389D C9                   ret
4381+ 389E
4382+ 389E              ; move floating point from (FPREG) into (HL)
4383+ 389E 11 72 61     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38A1 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38A3 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38A4 77                   ld      (HL),A          ; Save destination
4387+ 38A5 13                   inc     DE              ; Next source
4388+ 38A6 23                   inc     HL              ; Next destination
4389+ 38A7 05                   dec     B               ; Count bytes
4390+ 38A8 C2 A3 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38AB C9                   ret
4392+ 38AC
4393+ 38AC 21 74 61     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 38AF 7E                   ld      A,(HL)          ; Get MSB
4395+ 38B0 07                   rlca                    ; Old sign to carry
4396+ 38B1 37                   scf                     ; Set MSBit
4397+ 38B2 1F                   rra                     ; Set MSBit of MSB
4398+ 38B3 77                   ld      (HL),A          ; Save new MSB
4399+ 38B4 3F                   ccf                     ; Complement sign
4400+ 38B5 1F                   rra                     ; Old sign to carry
4401+ 38B6 23                   inc     HL
4402+ 38B7 23                   inc     HL
4403+ 38B8 77                   ld      (HL),A          ; Set sign of result
4404+ 38B9 79                   ld      A,C             ; Get MSB
4405+ 38BA 07                   rlca                    ; Old sign to carry
4406+ 38BB 37                   scf                     ; Set MSBit
4407+ 38BC 1F                   rra                     ; Set MSBit of MSB
4408+ 38BD 4F                   ld      C,A             ; Save MSB
4409+ 38BE 1F                   rra
4410+ 38BF AE                   xor     (HL)            ; New sign of result
4411+ 38C0 C9                   ret
4412+ 38C1
4413+ 38C1 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 38C2 B7                   or      A
4415+ 38C3 CA 46 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 38C6 21 4F 38             ld      HL,RETREL       ; Return relation routine
4417+ 38C9 E5                   push    HL              ; Save for return
4418+ 38CA CD 46 38             call    TSTSGN          ; Test sign of FPREG
4419+ 38CD 79                   ld      A,C             ; Get MSB of number
4420+ 38CE C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 38CF 21 74 61             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 38D2 AE                   xor     (HL)            ; Combine signs
4423+ 38D3 79                   ld      A,C             ; Get MSB of number
4424+ 38D4 F8                   ret     M               ; Exit if signs different
4425+ 38D5 CD DB 38             call    CMPFP           ; Compare FP numbers
4426+ 38D8 1F                   rra                     ; Get carry to sign
4427+ 38D9 A9                   xor     C               ; Combine with MSB of number
4428+ 38DA C9                   ret
4429+ 38DB
4430+ 38DB 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 38DC 78                   ld      A,B             ; Get exponent
4432+ 38DD BE                   cp      (HL)            ; Compare exponents
4433+ 38DE C0                   ret     NZ              ; Different
4434+ 38DF 2B                   dec     HL              ; Point to MBS
4435+ 38E0 79                   ld      A,C             ; Get MSB
4436+ 38E1 BE                   cp      (HL)            ; Compare MSBs
4437+ 38E2 C0                   ret     NZ              ; Different
4438+ 38E3 2B                   dec     HL              ; Point to NMSB
4439+ 38E4 7A                   ld      A,D             ; Get NMSB
4440+ 38E5 BE                   cp      (HL)            ; Compare NMSBs
4441+ 38E6 C0                   ret     NZ              ; Different
4442+ 38E7 2B                   dec     HL              ; Point to LSB
4443+ 38E8 7B                   ld      A,E             ; Get LSB
4444+ 38E9 96                   sub     (HL)            ; Compare LSBs
4445+ 38EA C0                   ret     NZ              ; Different
4446+ 38EB E1                   pop     HL              ; Drop RETurn
4447+ 38EC E1                   pop     HL              ; Drop another RETurn
4448+ 38ED C9                   ret
4449+ 38EE
4450+ 38EE 47           FPINT:  ld      B,A             ; <- Move
4451+ 38EF 4F                   ld      C,A             ; <- exponent
4452+ 38F0 57                   ld      D,A             ; <- to all
4453+ 38F1 5F                   ld      E,A             ; <- bits
4454+ 38F2 B7                   or      A               ; Test exponent
4455+ 38F3 C8                   ret     Z               ; Zero - Return zero
4456+ 38F4 E5                   push    HL              ; Save pointer to number
4457+ 38F5 CD 92 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 38F8 CD AC 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 38FB AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 38FC 67                   ld      H,A             ; Save combined signs
4461+ 38FD FC 12 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 3900 3E 98                ld      A,$80+24        ; 24 bits
4463+ 3902 90                   sub     B               ; Bits to shift
4464+ 3903 CD 74 36             call    SCALE           ; Shift BCDE
4465+ 3906 7C                   ld      A,H             ; Get combined sign
4466+ 3907 17                   rla                     ; Sign to carry
4467+ 3908 DC 47 36             call    C,FPROND        ; Negative - Round number up
4468+ 390B 06 00                ld      B,$00           ; Zero exponent
4469+ 390D DC 60 36             call    C,COMPL         ; If negative make positive
4470+ 3910 E1                   pop     HL              ; Restore pointer to number
4471+ 3911 C9                   ret
4472+ 3912
4473+ 3912 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 3913 7A                   ld      A,D             ; Test LSBs
4475+ 3914 A3                   and     E
4476+ 3915 3C                   inc     A
4477+ 3916 C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 3917 0B                   dec     BC              ; Decrement MSBs
4479+ 3918 C9                   ret
4480+ 3919
4481+ 3919 21 75 61     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 391C 7E                   ld      A,(HL)          ; Get exponent
4483+ 391D FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 391F 3A 72 61             ld      A,(FPREG)       ; Get LSB
4485+ 3922 D0                   ret     NC              ; Yes - Already integer
4486+ 3923 7E                   ld      A,(HL)          ; Get exponent
4487+ 3924 CD EE 38             call    FPINT           ; F.P to integer
4488+ 3927 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 3929 7B                   ld      A,E             ; Get LSB of number
4490+ 392A F5                   push    AF              ; Save LSB
4491+ 392B 79                   ld      A,C             ; Get MSB of number
4492+ 392C 17                   rla                     ; Sign to carry
4493+ 392D CD FD 35             call    CONPOS          ; Set sign of result
4494+ 3930 F1                   pop     AF              ; Restore LSB of number
4495+ 3931 C9                   ret
4496+ 3932
4497+ 3932 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3935 78                   ld      A,B             ; Test multiplier
4499+ 3936 B1                   or      C
4500+ 3937 C8                   ret     Z               ; Return zero if zero
4501+ 3938 3E 10                ld      A,$10           ; 16 bits
4502+ 393A 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 393B DA 60 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 393E EB                   ex      DE,HL
4505+ 393F 29                   add     HL,HL           ; Shift multiplier left
4506+ 3940 EB                   ex      DE,HL
4507+ 3941 D2 48 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3944 09                   add     HL,BC           ; Add multiplicand
4509+ 3945 DA 60 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 3948 3D           NOMLAD: dec     A               ; Count bits
4511+ 3949 C2 3A 39             jp      NZ,MLDBLP       ; More
4512+ 394C C9                   ret
4513+ 394D
4514+ 394D FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 394F F5                   push    AF              ; Save it and flags
4516+ 3950 CA 59 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 3953 FE 2B                cp      '+'             ; Positive?
4518+ 3955 CA 59 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 3958 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 3959 CD 15 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 395C 47                   ld      B,A             ; Digits after point counter
4522+ 395D 57                   ld      D,A             ; Sign of exponent
4523+ 395E 5F                   ld      E,A             ; Exponent of ten
4524+ 395F 2F                   cpl
4525+ 3960 4F                   ld      C,A             ; Before or after point flag
4526+ 3961 CD A8 25     MANLP:  call    GETCHR          ; Get next character
4527+ 3964 DA AA 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 3967 FE 2E                cp      '.'
4529+ 3969 CA 85 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 396C FE 45                cp      'E'
4531+ 396E C2 89 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 3971 CD A8 25             call    GETCHR          ; Get next character
4533+ 3974 CD 7C 2B             call    SGNEXP          ; Get sign of exponent
4534+ 3977 CD A8 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 397A DA CC 39             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 397D 14                   inc     D               ; Is sign negative?
4537+ 397E C2 89 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 3981 AF                   xor     A
4539+ 3982 93                   sub     E               ; Negate exponent
4540+ 3983 5F                   ld      E,A             ; And re-save it
4541+ 3984 0C                   inc     C               ; Flag end of number
4542+ 3985 0C           DPOINT: inc     C               ; Flag point passed
4543+ 3986 CA 61 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 3989 E5           CONEXP: push    HL              ; Save code string address
4545+ 398A 7B                   ld      A,E             ; Get exponent
4546+ 398B 90                   sub     B               ; Subtract digits after point
4547+ 398C F4 A2 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 398F F2 98 39             jp      P,ENDCON        ; Positive - All done
4549+ 3992 F5                   push    AF              ; Save number of times to /10
4550+ 3993 CD 8E 37             call    DIV10           ; Divide by 10
4551+ 3996 F1                   pop     AF              ; Restore count
4552+ 3997 3C                   inc     A               ; Count divides
4553+ 3998
4554+ 3998 C2 8C 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 399B D1                   pop     DE              ; Restore code string address
4556+ 399C F1                   pop     AF              ; Restore sign of number
4557+ 399D CC 6F 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39A0 EB                   ex      DE,HL           ; Code string address to HL
4559+ 39A1 C9                   ret
4560+ 39A2
4561+ 39A2 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39A3 F5           MULTEN: push    AF              ; Save count
4563+ 39A4 CD 2F 38             call    MLSP10          ; Multiply number by 10
4564+ 39A7 F1                   pop     AF              ; Restore count
4565+ 39A8 3D                   dec     A               ; Count multiplies
4566+ 39A9 C9                   ret
4567+ 39AA
4568+ 39AA D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39AB 57                   ld      D,A             ; Save digit
4570+ 39AC 78                   ld      A,B             ; Get digits after point
4571+ 39AD 89                   adc     A,C             ; Add one if after point
4572+ 39AE 47                   ld      B,A             ; Re-save counter
4573+ 39AF C5                   push    BC              ; Save point flags
4574+ 39B0 E5                   push    HL              ; Save code string address
4575+ 39B1 D5                   push    DE              ; Save digit
4576+ 39B2 CD 2F 38             call    MLSP10          ; Multiply number by 10
4577+ 39B5 F1                   pop     AF              ; Restore digit
4578+ 39B6 D6 30                sub     '0'             ; Make it absolute
4579+ 39B8 CD C1 39             call    RSCALE          ; Re-scale number
4580+ 39BB E1                   pop     HL              ; Restore code string address
4581+ 39BC C1                   pop     BC              ; Restore point flags
4582+ 39BD D1                   pop     DE              ; Restore sign of exponent
4583+ 39BE C3 61 39             jp      MANLP           ; Get another digit
4584+ 39C1
4585+ 39C1 CD 77 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 39C4 CD 58 38             call    FLGREL          ; Digit to add to FPREG
4587+ 39C7 C1           PADD:   pop     BC              ; Restore number
4588+ 39C8 D1                   pop     DE
4589+ 39C9 C3 AF 35             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 39CC
4591+ 39CC 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 39CD 07                   rlca                    ; Times 2
4593+ 39CE 07                   rlca                    ; Times 4
4594+ 39CF 83                   add     A,E             ; Times 5
4595+ 39D0 07                   rlca                    ; Times 10
4596+ 39D1 86                   add     A,(HL)          ; Add next digit
4597+ 39D2 D6 30                sub     '0'             ; Make it absolute
4598+ 39D4 5F                   ld      E,A             ; Save new digit
4599+ 39D5 C3 77 39             jp      EXPLP           ; Look for another digit
4600+ 39D8
4601+ 39D8 E5           LINEIN: push    HL              ; Save code string address
4602+ 39D9 21 D8 1F             ld      HL,INMSG        ; Output " in "
4603+ 39DC CD 41 2F             call    PRS             ; Output string at HL
4604+ 39DF E1                   pop     HL              ; Restore code string address
4605+ 39E0 EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 39E1 AF                   xor     A
4607+ 39E2 06 98                ld      B,$80+24        ; 24 bits
4608+ 39E4 CD 5D 38             call    RETINT          ; Return the integer
4609+ 39E7 21 40 2F             ld      HL,PRNUMS       ; Print number string
4610+ 39EA E5                   push    HL              ; Save for return
4611+ 39EB              ; conmvert FP number into ASCII chars
4612+ 39EB 21 77 61     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 39EE E5                   push    HL              ; Save for return
4614+ 39EF CD 46 38             call    TSTSGN          ; Test sign of FPREG
4615+ 39F2 36 20                ld      (HL),SPC        ; Space at start
4616+ 39F4 F2 F9 39             jp      P,SPCFST        ; Positive - Space to start
4617+ 39F7 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 39F9 23           SPCFST: inc     HL              ; First byte of number
4619+ 39FA 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 39FC CA AF 3A             jp      Z,JSTZER        ; Return '0' if zero
4621+ 39FF E5                   push    HL              ; Save buffer address
4622+ 3A00 FC 6F 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A03 AF                   xor     A               ; Zero A
4624+ 3A04 F5                   push    AF              ; Save it
4625+ 3A05 CD B5 3A             call    RNGTST          ; Test number is in range
4626+ 3A08 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A0B 11 F8 4F             ld      DE,$4FF8
4628+ 3A0E CD C1 38             call    CMPNUM          ; Compare numbers
4629+ 3A11 B7                   or      A
4630+ 3A12 E2 26 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A15 F1                   pop     AF              ; Restore count
4632+ 3A16 CD A3 39             call    MULTEN          ; Multiply by ten
4633+ 3A19 F5                   push    AF              ; Re-save count
4634+ 3A1A C3 08 3A             jp      SIXDIG          ; Test it again
4635+ 3A1D
4636+ 3A1D CD 8E 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A20 F1                   pop     AF              ; Get count
4638+ 3A21 3C                   inc     A               ; Count divides
4639+ 3A22 F5                   push    AF              ; Re-save count
4640+ 3A23 CD B5 3A             call    RNGTST          ; Test number is in range
4641+ 3A26 CD 9D 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A29 3C                   inc     A
4643+ 3A2A CD EE 38             call    FPINT           ; F.P to integer
4644+ 3A2D CD 87 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A30 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A33 F1                   pop     AF              ; Restore count
4647+ 3A34 81                   add     A,C             ; 6 digits before point
4648+ 3A35 3C                   inc     A               ; Add one
4649+ 3A36 FA 42 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A39 FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A3B D2 42 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A3E 3C                   inc     A               ; Adjust for exponent
4653+ 3A3F 47                   ld      B,A             ; Exponent of number
4654+ 3A40 3E 02                ld      A,2             ; Make it zero after
4655+ 3A42
4656+ 3A42 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A43 3D                   dec     A
4658+ 3A44 E1                   pop     HL              ; Restore buffer address
4659+ 3A45 F5                   push    AF              ; Save count
4660+ 3A46 11 C8 3A             ld      DE,POWERS       ; Powers of ten
4661+ 3A49 05                   dec     B               ; Count digits before point
4662+ 3A4A C2 53 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A4D 36 2E                ld      (HL),'.'        ; Save point
4664+ 3A4F 23                   inc     HL              ; Move on
4665+ 3A50 36 30                ld      (HL),'0'        ; Save zero
4666+ 3A52 23                   inc     HL              ; Move on
4667+ 3A53 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3A54 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3A56 CC 9C 38             call    Z,INCHL         ; Last digit - move on
4670+ 3A59 C5                   push    BC              ; Save digits before point
4671+ 3A5A E5                   push    HL              ; Save buffer address
4672+ 3A5B D5                   push    DE              ; Save powers of ten
4673+ 3A5C CD 92 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3A5F E1                   pop     HL              ; Powers of ten table
4675+ 3A60 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3A62 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3A63 7B                   ld      A,E             ; Get LSB
4678+ 3A64 96                   sub     (HL)            ; Subtract LSB
4679+ 3A65 5F                   ld      E,A             ; Save LSB
4680+ 3A66 23                   inc     HL
4681+ 3A67 7A                   ld      A,D             ; Get NMSB
4682+ 3A68 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3A69 57                   ld      D,A             ; Save NMSB
4684+ 3A6A 23                   inc     HL
4685+ 3A6B 79                   ld      A,C             ; Get MSB
4686+ 3A6C 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3A6D 4F                   ld      C,A             ; Save MSB
4688+ 3A6E 2B                   dec     HL              ; Point back to start
4689+ 3A6F 2B                   dec     HL
4690+ 3A70 D2 62 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3A73 CD 54 36             call    PLUCDE          ; Restore number
4692+ 3A76 23                   inc     HL              ; Start of next number
4693+ 3A77 CD 87 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3A7A EB                   ex      DE,HL           ; Save point in table
4695+ 3A7B E1                   pop     HL              ; Restore buffer address
4696+ 3A7C 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3A7D 23                   inc     HL              ; And move on
4698+ 3A7E C1                   pop     BC              ; Restore digit count
4699+ 3A7F 0D                   dec     C               ; Count digits
4700+ 3A80 C2 53 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3A83 05                   dec     B               ; Any decimal part?
4702+ 3A84 CA 93 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3A87 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3A88 7E                   ld      A,(HL)          ; Get character
4705+ 3A89 FE 30                cp      '0'             ; '0' character?
4706+ 3A8B CA 87 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3A8E FE 2E                cp      '.'             ; A decimal point?
4708+ 3A90 C4 9C 38             call    NZ,INCHL        ; Move back over digit
4709+ 3A93
4710+ 3A93 F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3A94 CA B2 3A             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3A97 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3A99 23                   inc     HL              ; And move on
4714+ 3A9A 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3A9C F2 A3 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3A9F 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3AA1 2F                   cpl                     ; Negate exponent
4718+ 3AA2 3C                   inc     A
4719+ 3AA3 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AA5 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3AA6 D6 0A                sub     $0A             ; Tens digit
4722+ 3AA8 D2 A5 3A             jp      NC,EXPTEN       ; More to do
4723+ 3AAB C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3AAD 23                   inc     HL              ; Move on
4725+ 3AAE 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3AAF 23           JSTZER: inc     HL              ;
4727+ 3AB0 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3AB1 23                   inc     HL
4729+ 3AB2 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3AB3 E1                   pop     HL              ; Restore code string address
4731+ 3AB4 C9                   ret
4732+ 3AB5
4733+ 3AB5 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3AB8 11 F7 23             ld      DE,$23F7
4735+ 3ABB CD C1 38             call    CMPNUM          ; Compare numbers
4736+ 3ABE B7                   or      A
4737+ 3ABF E1                   pop     HL              ; Return address to HL
4738+ 3AC0 E2 1D 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3AC3 E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3AC4
4741+ 3AC4 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3AC8
4743+ 3AC8 A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3ACB 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3ACE E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3AD1 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3AD4 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3AD7 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3ADA
4750+ 3ADA 21 6F 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3ADD E3                   ex      (SP),HL         ; To be done after caller
4752+ 3ADE E9                   jp      (HL)            ; Return to caller
4753+ 3ADF
4754+ 3ADF CD 77 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3AE2 21 C4 3A             ld      HL,HALF         ; Set power to 1/2
4756+ 3AE5 CD 84 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3AE8
4758+ 3AE8 C1           POWER:  pop     BC              ; Get base
4759+ 3AE9 D1                   pop     DE
4760+ 3AEA CD 46 38             call    TSTSGN          ; Test sign of power
4761+ 3AED 78                   ld      A,B             ; Get exponent of base
4762+ 3AEE CA 2D 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3AF1 F2 F8 3A             jp      P,POWER1        ; Positive base - Ok
4764+ 3AF4 B7                   or      A               ; Zero to negative power?
4765+ 3AF5 CA 62 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3AF8 B7           POWER1: or      A               ; Base zero?
4767+ 3AF9 CA 16 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3AFC D5                   push    DE              ; Save base
4769+ 3AFD C5                   push    BC
4770+ 3AFE 79                   ld      A,C             ; Get MSB of base
4771+ 3AFF F6 7F                or      %01111111       ; Get sign status
4772+ 3B01 CD 92 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B04 F2 15 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B07 D5                   push    DE              ; Save power
4775+ 3B08 C5                   push    BC
4776+ 3B09 CD 19 39             call    INT             ; Get integer of power
4777+ 3B0C C1                   pop     BC              ; Restore power
4778+ 3B0D D1                   pop     DE
4779+ 3B0E F5                   push    AF              ; MSB of base
4780+ 3B0F CD C1 38             call    CMPNUM          ; Power an integer?
4781+ 3B12 E1                   pop     HL              ; Restore MSB of base
4782+ 3B13 7C                   ld      A,H             ; but don't affect flags
4783+ 3B14 1F                   rra                     ; Exponent odd or even?
4784+ 3B15 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B16 22 74 61             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B19 E1                   pop     HL              ; LSBs of base
4787+ 3B1A 22 72 61             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B1D DC DA 3A             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B20 CC 6F 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B23 D5                   push    DE              ; Save power
4791+ 3B24 C5                   push    BC
4792+ 3B25 CD A9 36             call    LOG             ; Get LOG of base
4793+ 3B28 C1                   pop     BC              ; Restore power
4794+ 3B29 D1                   pop     DE
4795+ 3B2A CD EA 36             call    FPMULT          ; Multiply LOG by power
4796+ 3B2D
4797+ 3B2D CD 77 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B30 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B33 11 3B AA             ld      DE,$AA3B
4800+ 3B36 CD EA 36             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B39 3A 75 61             ld      A,(FPEXP)       ; Get exponent
4802+ 3B3C FE 88                cp      $80+8           ; Is it in range?
4803+ 3B3E D2 22 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B41 CD 19 39             call    INT             ; Get INT of FPREG
4805+ 3B44 C6 80                add     A,$80           ; For excess 128
4806+ 3B46 C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B48 DA 22 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B4B F5                   push    AF              ; Save scaling factor
4809+ 3B4C 21 98 36             ld      HL,UNITY        ; Point to 1.
4810+ 3B4F CD A0 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3B52 CD E1 36             call    MULLN2          ; Multiply by LN(2)
4812+ 3B55 F1                   pop     AF              ; Restore scaling factor
4813+ 3B56 C1                   pop     BC              ; Restore exponent
4814+ 3B57 D1                   pop     DE
4815+ 3B58 F5                   push    AF              ; Save scaling factor
4816+ 3B59 CD AC 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3B5C CD 6F 38             call    INVSGN          ; Negate result
4818+ 3B5F 21 6D 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3B62 CD 9D 3B             call    SMSER1          ; Sum the series
4820+ 3B65 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3B68 C1                   pop     BC              ; Scaling factor
4822+ 3B69 4A                   ld      C,D             ; Zero MSB
4823+ 3B6A C3 EA 36             jp      FPMULT          ; Scale result to correct value
4824+ 3B6D
4825+ 3B6D 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3B6E 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3B72 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3B76 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3B7A E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3B7E 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3B82 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3B86 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3B8A 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3B8E
4835+ 3B8E CD 77 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3B91 11 E8 36             ld      DE,MULT         ; Multiply by "X"
4837+ 3B94 D5                   push    DE              ; To be done after
4838+ 3B95 E5                   push    HL              ; Save address of table
4839+ 3B96 CD 92 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3B99 CD EA 36             call    FPMULT          ; Square the value
4841+ 3B9C E1                   pop     HL              ; Restore address of table
4842+ 3B9D CD 77 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BA0 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BA1 23                   inc     HL              ; Point to start of table
4845+ 3BA2 CD 84 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BA5 06                   defb    06H             ; Skip "pop AF"
4847+ 3BA6 F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BA7 C1                   pop     BC              ; Restore number
4849+ 3BA8 D1                   pop     DE
4850+ 3BA9 3D                   dec     A               ; Cont coefficients
4851+ 3BAA C8                   ret     Z               ; All done
4852+ 3BAB D5                   push    DE              ; Save number
4853+ 3BAC C5                   push    BC
4854+ 3BAD F5                   push    AF              ; Save count
4855+ 3BAE E5                   push    HL              ; Save address in table
4856+ 3BAF CD EA 36             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3BB2 E1                   pop     HL              ; Restore address in table
4858+ 3BB3 CD 95 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3BB6 E5                   push    HL              ; Save address in table
4860+ 3BB7 CD AF 35             call    FPADD           ; Add coefficient to FPREG
4861+ 3BBA E1                   pop     HL              ; Restore address in table
4862+ 3BBB C3 A6 3B             jp      SUMLP           ; More coefficients
4863+ 3BBE
4864+ 3BBE
4865+ 3BBE              ; random number generator
4866+ 3BBE              ; a negative argument is used as a seed for the RNG
4867+ 3BBE              ; 0 is used to repeat the last random number
4868+ 3BBE              ; a positive argument generates a new random number
4869+ 3BBE CD 46 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3BC1 21 93 5F             ld      HL,SEED+2       ; Random number seed
4871+ 3BC4 FA 1F 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3BC7 21 B4 5F             ld      HL,LSTRND       ; Last random number
4873+ 3BCA CD 84 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3BCD 21 93 5F             ld      HL,SEED+2       ; Random number seed
4875+ 3BD0 C8                   ret     Z               ; Return if RND(0)
4876+ 3BD1 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3BD2 E6 07                and     %00000111       ; 0 to 7
4878+ 3BD4 06 00                ld      B,$00
4879+ 3BD6 77                   ld      (HL),A          ; Re-save seed
4880+ 3BD7 23                   inc     HL              ; Move to coefficient table
4881+ 3BD8 87                   add     A,A             ; 4 bytes
4882+ 3BD9 87                   add     A,A             ; per entry
4883+ 3BDA 4F                   ld      C,A             ; BC = Offset into table
4884+ 3BDB 09                   add     HL,BC           ; Point to coefficient
4885+ 3BDC CD 95 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3BDF CD EA 36             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3BE2 3A 92 5F             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3BE5 3C                   inc     A               ; Add 1
4889+ 3BE6 E6 03                and     %00000011       ; 0 to 3
4890+ 3BE8 06 00                ld      B,$00
4891+ 3BEA FE 01                cp      $01             ; Is it zero?
4892+ 3BEC 88                   adc     A,B             ; Yes - Make it 1
4893+ 3BED 32 92 5F             ld      (SEED+1),A      ; Re-save seed
4894+ 3BF0 21 23 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3BF3 87                   add     A,A             ; 4 bytes
4896+ 3BF4 87                   add     A,A             ; per entry
4897+ 3BF5 4F                   ld      C,A             ; BC = Offset into table
4898+ 3BF6 09                   add     HL,BC           ; Point to value
4899+ 3BF7 CD A0 35             call    ADDPHL          ; Add value to FPREG
4900+ 3BFA CD 92 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3BFD 7B                   ld      A,E             ; Get LSB
4902+ 3BFE 59                   ld      E,C             ; LSB = MSB
4903+ 3BFF EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C01 4F                   ld      C,A             ; New MSB
4905+ 3C02 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C04 2B                   dec     HL              ; Point to MSB
4907+ 3C05 46                   ld      B,(HL)          ; Get MSB
4908+ 3C06 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C08 21 91 5F             ld      HL,SEED         ; Random number seed
4910+ 3C0B 34                   inc     (HL)            ; Count seed
4911+ 3C0C 7E                   ld      A,(HL)          ; Get seed
4912+ 3C0D D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C0F C2 16 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C12 77                   ld      (HL),A          ; Zero seed
4915+ 3C13 0C                   inc     C               ; Fillde about
4916+ 3C14 15                   dec     D               ; with the
4917+ 3C15 1C                   inc     E               ; number
4918+ 3C16 CD 00 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C19 21 B4 5F             ld      HL,LSTRND       ; Save random number
4920+ 3C1C C3 9E 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C1F
4922+ 3C1F 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C20 2B                   dec     HL
4924+ 3C21 77                   ld      (HL),A
4925+ 3C22 2B                   dec     HL
4926+ 3C23 77                   ld      (HL),A
4927+ 3C24 C3 FA 3B             jp      RND1            ; Return RND seed
4928+ 3C27
4929+ 3C27 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C2B 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C2F 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C33
4933+ 3C33              ; COS and SIN functions
4934+ 3C33 21 7D 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C36 CD A0 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C39 CD 77 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C3C 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C3F 11 DB 0F             ld      DE,$0FDB
4939+ 3C42 CD 87 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C45 C1                   pop     BC              ; Restore angle
4941+ 3C46 D1                   pop     DE
4942+ 3C47 CD 9C 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C4A CD 77 38             call    STAKFP          ; Put it on stack
4944+ 3C4D CD 19 39             call    INT             ; Get INT of result
4945+ 3C50 C1                   pop     BC              ; Restore number
4946+ 3C51 D1                   pop     DE
4947+ 3C52 CD AC 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3C55 21 81 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3C58 CD A6 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3C5B CD 46 38             call    TSTSGN          ; Test sign of value
4951+ 3C5E 37                   scf                     ; Flag positive
4952+ 3C5F F2 69 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3C62 CD 9D 35             call    ROUND           ; Add 0.5 to value
4954+ 3C65 CD 46 38             call    TSTSGN          ; Test sign of value
4955+ 3C68 B7                   or      A               ; Flag negative
4956+ 3C69 F5           SIN1:   push    AF              ; Save sign
4957+ 3C6A F4 6F 38             call    P,INVSGN        ; Negate value if positive
4958+ 3C6D 21 81 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3C70 CD A0 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3C73 F1                   pop     AF              ; Restore sign
4961+ 3C74 D4 6F 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3C77 21 85 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3C7A C3 8E 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3C7D
4965+ 3C7D DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3C81
4967+ 3C81 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3C85
4969+ 3C85 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3C86 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3C8A 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3C8E 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3C92 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3C96 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3C9A
4976+ 3C9A CD 77 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3C9D CD 39 3C             call    SIN             ; Get SIN of angle
4978+ 3CA0 C1                   pop     BC              ; Restore angle
4979+ 3CA1 E1                   pop     HL
4980+ 3CA2 CD 77 38             call    STAKFP          ; Save SIN of angle
4981+ 3CA5 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CA6 CD 87 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CA9 CD 33 3C             call    COS             ; Get COS of angle
4984+ 3CAC C3 9A 37             jp      DIV             ; TAN = SIN / COS
4985+ 3CAF
4986+ 3CAF CD 46 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3CB2 FC DA 3A             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3CB5 FC 6F 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3CB8 3A 75 61             ld      A,(FPEXP)       ; Get exponent
4990+ 3CBB FE 81                cp      81H             ; Number less than 1?
4991+ 3CBD DA CC 3C             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3CC0 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3CC3 51                   ld      D,C
4994+ 3CC4 59                   ld      E,C
4995+ 3CC5 CD 9C 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3CC8 21 A6 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3CCB E5                   push    HL              ; Save for angle > 1
4998+ 3CCC 21 D6 3C     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3CCF CD 8E 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3CD2 21 7D 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3CD5 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3CD6
5003+ 3CD6 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3CD7 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3CDB 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3CDF FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3CE3 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3CE7 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3CEB C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3CEF E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3CF3 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3CF7 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3CFB
5014+ 3CFB
5015+ 3CFB C9           ARET:   ret                     ; A RETurn instruction
5016+ 3CFC
5017+ 3CFC D7           GETINP: rst     $10             ; input a character
5018+ 3CFD C9                   ret
5019+ 3CFE
5020+ 3CFE E5           CLS:    push    HL
5021+ 3CFF D5                   push    DE
5022+ 3D00 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D03 FE 02                cp      $02             ; G2 mode?
5024+ 3D05 CC D8 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D08 D1                   pop     DE
5026+ 3D09 E1                   pop     HL
5027+ 3D0A 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D0C CD 9D 23             call    SND2VID         ; send to screen
5029+ 3D0F C3 B1 4C             jp      MONOUT          ; Output character
5030+ 3D12
5031+ 3D12 CD BF 32     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D15 7B                   ld      A,E             ; Width to A
5033+ 3D16 32 BB 5F             ld      (LWIDTH),A      ; Set width
5034+ 3D19 C9                   ret
5035+ 3D1A
5036+ 3D1A
5037+ 3D1A              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D1A              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D1A CD 5E 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D1D D5                   push    DE              ; Save number
5041+ 3D1E E1                   pop     HL              ; Number to HL
5042+ 3D1F 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D20 23                   inc     HL
5044+ 3D21 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D22 C3 23 2E             jp      ABPASS          ; Return integer AB
5046+ 3D25
5047+ 3D25              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D25              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D25 CD 39 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D28 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D2B D5                   push    DE              ; Save address
5052+ 3D2C CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D2F 2C                   defb    ','
5054+ 3D30 CD 39 2A             call    GETNUM          ; Get a number
5055+ 3D33 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D36 E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D37 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D38 23                   inc     HL
5059+ 3D39 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D3A E1                   pop     HL              ; Restore code string address
5061+ 3D3B C9                   ret
5062+ 3D3C
5063+ 3D3C              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D3C              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D3C CD 39 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D3F CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D42 7A                   ld      A,D             ; load D into A
5068+ 3D43 B3                   or      E               ; are D & E equal to $00?
5069+ 3D44 C8                   ret     Z               ; if yes, then return
5070+ 3D45 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D46 3A FE 60             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D49 47                   ld      B,A             ; move it into B
5073+ 3D4A CD D3 25     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D4D 3A FE 60             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3D50 B8                   cp      B               ; is it the same value?
5076+ 3D51 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3D53 47                   ld      B,A             ; no, so store the new value
5078+ 3D54 1B                   dec     DE              ; decrement interval
5079+ 3D55 7A                   ld      A,D             ; load D into A
5080+ 3D56 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3D57 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3D59 C1                   pop     BC              ; yes, recover BC and continue
5083+ 3D5A C9                   ret
5084+ 3D5B
5085+ 3D5B              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3D5B              ; where X is graphic mode:
5087+ 3D5B              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3D5B              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3D5B              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3D5B              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3D5B              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3D5B AF           SCREEN: xor     A
5093+ 3D5C 32 20 61             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3D5F CD BF 32             call    GETINT          ; Get integer 0-255
5095+ 3D62 FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3D64 D2 73 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3D67 32 1E 61             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3D6A A7                   and     A               ; is it 0 (text mode)?
5099+ 3D6B CA 87 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3D6E CD C6 3D     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3D71 DA 79 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3D74 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3D76 32 20 61             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3D79 CD C6 3D     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3D7C DA 87 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3D7F 3A 20 61             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3D82 F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3D84 32 20 61             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3D87 F3           SCVDP:  di                      ; disable INTs
5110+ 3D88 D5                   push    DE              ; store DE
5111+ 3D89 E5                   push    HL              ; store HL
5112+ 3D8A 3A 1E 61             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3D8D 5F                   ld      E,A             ; and store it into E
5114+ 3D8E 3A 20 61             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3D91 57                   ld      D,A             ; and store them into D
5116+ 3D92 D5                   push    DE              ; store D & E
5117+ 3D93 CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3D96 D1                   pop     DE              ; retrieve D & E
5119+ 3D97 7B                   ld      A,E             ; move graphic mode into A
5120+ 3D98 87                   add     A,A
5121+ 3D99 87                   add     A,A
5122+ 3D9A 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3D9B 5F                   ld      E,A             ; and pass it into E
5124+ 3D9C D5                   push    DE              ; store sprite flags in E
5125+ 3D9D 16 00                ld      D,$00           ; reset D
5126+ 3D9F 21 20 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DA2 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DA3 D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DA4 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DA5 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DA7 B2                   or      D               ; set size & magn. bits
5132+ 3DA8 5F                   ld      E,A             ; value into E
5133+ 3DA9 3E 01                ld      A,$01           ; reg #1
5134+ 3DAB CD B0 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3DAE 2A C8 5F             ld      HL,(LINEAT)     ; Get current line number
5136+ 3DB1 23                   inc     HL              ; -1 means direct statement
5137+ 3DB2 7C                   ld      A,H
5138+ 3DB3 B5                   or      L
5139+ 3DB4 CC 23 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3DB7 FB                   ei                      ; re-enable interrupts
5141+ 3DB8 E1                   pop     HL              ; restore HL
5142+ 3DB9 D1                   pop     DE              ; restore DE
5143+ 3DBA 3A 0F 61             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3DBD FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3DBF D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3DC0 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3DC2 32 1A 61             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3DC5 C9                   ret                     ; ...and return to caller
5149+ 3DC6
5150+ 3DC6              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3DC6              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3DC6              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3DC6 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3DC7 CD A8 25             call    GETCHR          ; Get next character
5155+ 3DCA 37                   scf                     ; set carry flag
5156+ 3DCB C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3DCC CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3DCF 2C                   defb    ','
5159+ 3DD0 CD BF 32             call    GETINT          ; get value
5160+ 3DD3 1F                   rra                     ; Carry=bit #0
5161+ 3DD4 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3DD5 C9                   ret                     ; return
5163+ 3DD6
5164+ 3DD6
5165+ 3DD6              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3DD6              ; a=foreground color / b=background color / c=border color
5167+ 3DD6              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3DD6              ; the number of arguments is based on the current screen mode
5169+ 3DD6 CD BF 32     COLOR:  call    GETINT          ; get first value
5170+ 3DD9 CD 7E 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3DDC 32 1E 61             ld      (TMPBFR1),A     ; store it
5172+ 3DDF 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3DE2 FE 03                cp      $03             ; is it multicolor mode?
5174+ 3DE4 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3DE6 3E 0F                ld      A,$0F           ; white for...
5176+ 3DE8 32 1C 61             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3DEB 3A 1E 61             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3DEE 32 22 61             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3DF1 18 31                jr      CLRMC           ; jump to set color
5180+ 3DF3 CD 5F 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3DF6 2C                   defb    ','
5182+ 3DF7 CD BF 32             call    GETINT          ; get second value
5183+ 3DFA CD 7E 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3DFD 32 20 61             ld      (TMPBFR2),A     ; store it
5185+ 3E00 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E03 A7                   and     A               ; is it text mode?
5187+ 3E04 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E06 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E09 2C                   defb    ','
5190+ 3E0A CD BF 32             call    GETINT          ; get third value
5191+ 3E0D CD 7E 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E10 32 22 61             ld      (TMPBFR3),A     ; store it
5193+ 3E13 D5                   push    DE              ; store DE
5194+ 3E14 3A 10 61             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E17 FE 01                cp      $01             ; is it G1 mode?
5196+ 3E19 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E1B FE 02                cp      $02             ; is it G2 mode?
5198+ 3E1D 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E1F 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E21 CD 71 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E24 32 22 61     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E27 D5                   push    DE              ; store DE
5203+ 3E28 F3                   di                      ; disable INTs
5204+ 3E29 18 2D                jr      SETBRCL         ; set colors and exit
5205+ 3E2B CD 71 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E2E 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E30 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E32 18 10                jr      LOADCLR         ; load colors
5209+ 3E34 CD 71 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E37 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E39 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E3B 18 07                jr      LOADCLR         ; load colors
5213+ 3E3D CD 71 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E40 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E42 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E44 E5           LOADCLR:push    HL              ; store HL
5217+ 3E45 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E48 F3                   di                      ; disable INTs
5219+ 3E49 CD 66 06             call    SETVDPADRS
5220+ 3E4C 0D                   dec     C              ; VDP data mode
5221+ 3E4D ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3E4F 00                   nop
5223+ 3E50 00                   nop
5224+ 3E51 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3E53 15                   dec     D               ; did we fill up all the pages?
5226+ 3E54 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3E56 FB                   ei
5228+ 3E57 E1                   pop     HL              ; retrieve HL
5229+ 3E58 3A 1E 61     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3E5B 32 1C 61             ld      (FRGNDCLR),A    ; store it
5231+ 3E5E 3A 20 61             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3E61 32 1D 61             ld      (BKGNDCLR),A    ; store it
5233+ 3E64 3A 22 61             ld      A,(TMPBFR3)     ; recover border color
5234+ 3E67 5F                   ld      E,A             ; move it into E
5235+ 3E68 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3E6A F3                   di
5237+ 3E6B CD B0 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3E6E FB                   ei                      ; re-enable INTs
5239+ 3E6F D1                   pop     DE              ; retrieve DE
5240+ 3E70 C9                   ret                     ; return to caller
5241+ 3E71
5242+ 3E71
5243+ 3E71              ; mix 2 color nibbles in 1 byte
5244+ 3E71 3A 20 61     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3E74 47                   ld      B,A             ; move it into B
5246+ 3E75 3A 1E 61             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3E78 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3E79 87                   add     A,A
5249+ 3E7A 87                   add     A,A
5250+ 3E7B 87                   add     A,A
5251+ 3E7C B0                   or      B               ; put background color into the low nibble of A
5252+ 3E7D C9                   ret                     ; return to caller
5253+ 3E7E
5254+ 3E7E
5255+ 3E7E              ; check if the color is not 0 and into the range 1~15
5256+ 3E7E A7           CHKCLR1:and     A               ; is it 0?
5257+ 3E7F CA 5F 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3E82 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3E84 D2 5F 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3E87 C9                   ret                     ; param is OK, can return
5261+ 3E88
5262+ 3E88
5263+ 3E88              ; check if in graphics 2 mode
5264+ 3E88 3A 10 61     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3E8B FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3E8D C2 96 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3E90 C9                   ret                     ; return to caller
5268+ 3E91
5269+ 3E91
5270+ 3E91              ; print a text in screen 2
5271+ 3E91              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3E91              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3E91              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3E91              ; colors (1~15), resp.
5275+ 3E91              ; (portions of code are from nippur72)
5276+ 3E91              GX      equ     TMPBFR3
5277+ 3E91              GY      equ     TMPBFR4
5278+ 3E91              TMPCLR  equ     TMPBFR2
5279+ 3E91              MIXCOL  equ     TMPBFR1
5280+ 3E91              TMPADR  equ     VIDEOBUFF
5281+ 3E91              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3E91              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3E91              TMPHL   equ     VIDEOBUFF+$06
5284+ 3E91 CD 88 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3E94 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3E95 CD A8 25             call    GETCHR          ; check if something follows
5287+ 3E98 CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3E9B 22 26 61             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3E9E CD 4B 2A             call    EVAL            ; Evaluate expression
5290+ 3EA1 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3EA4 22 2C 61             ld      (TMPHL),HL      ; store code string pointer
5292+ 3EA7 CD 84 30             call    GSTRCU          ; Current string to pool
5293+ 3EAA CD 95 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3EAD ED 43 28 61          ld      (CHRPNT),BC     ; store string pointer
5295+ 3EB1 ED 53 2A 61          ld      (NUMCHR),DE     ; store string lenght
5296+ 3EB5 2A 2C 61             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3EB8 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3EBB 2C                   defb    ','
5299+ 3EBC CD BF 32             call    GETINT          ; get X coord.
5300+ 3EBF FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3EC1 D2 73 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3EC4 32 22 61             ld      (GX),A          ; store into temp. buffer
5303+ 3EC7 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3ECA 2C                   defb    ','
5305+ 3ECB CD BF 32             call    GETINT          ; get Y coord.
5306+ 3ECE FE 18                cp      $18             ; is it in range 0~23?
5307+ 3ED0 D2 73 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3ED3 32 24 61             ld      (GY),A          ; store into temp. buffer
5309+ 3ED6 11 20 61             ld      DE,TMPCLR
5310+ 3ED9 3A 1D 61             ld      A,(BKGNDCLR)    ; load background color
5311+ 3EDC 12                   ld      (DE),A          ; store into temp buff
5312+ 3EDD 3A 1C 61             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3EE0 1B                   dec     DE
5314+ 3EE1 1B                   dec     DE
5315+ 3EE2 12                   ld      (DE),A          ; store into temp buff
5316+ 3EE3 CD 6E 3F             call    CKCOL           ; check color
5317+ 3EE6 CA EE 3E             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3EE9 13                   inc     DE
5319+ 3EEA 13                   inc     DE
5320+ 3EEB CD 6E 3F             call    CKCOL           ; check background color
5321+ 3EEE CD 71 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3EF1 32 1E 61             ld      (MIXCOL),A      ; store mixed colors
5323+ 3EF4 E5                   push    HL              ; store code string address
5324+ 3EF5 ED 4B 28 61          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3EF9 ED 5B 2A 61          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3EFD 1C                   inc     E               ; Length + 1
5327+ 3EFE CD 03 3F             call    GPNT            ; print on G2
5328+ 3F01 E1                   pop     HL              ; recover HL
5329+ 3F02 C9                   ret                     ; return to caller
5330+ 3F03 D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F04                      ; calculate VRAM address of first char
5332+ 3F04 3A 22 61             LD      A,(GX)          ; load X
5333+ 3F07 6F                   ld      L,A             ;
5334+ 3F08 26 00                ld      H,0             ; HL = X
5335+ 3F0A 29                   add     HL,HL           ;
5336+ 3F0B 29                   add     HL,HL           ;
5337+ 3F0C 29                   add     HL,HL           ; X=X*8
5338+ 3F0D 3A 24 61             ld      A,(GY)          ; load Y
5339+ 3F10 57                   ld      D,A             ; move it into D
5340+ 3F11 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F13 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F14 22 26 61             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F17 D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F18 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F19 C8                   ret     Z               ; End of string - return
5346+ 3F1A D5                   push    DE              ; store chars counter
5347+ 3F1B                      ; calculate dest address in color vram
5348+ 3F1B 2A 26 61             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F1E 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F21 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F22 F3                   di                      ; disable INTs
5352+ 3F23                      ; send color settings
5353+ 3F23 CD 66 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F26 3A 1E 61             ld      A,(MIXCOL)      ; load color settings
5355+ 3F29 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F2B 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F2D ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F2F 00                   nop                     ; wait...
5359+ 3F30 00                   nop                     ; ...a...
5360+ 3F31 00                   nop                     ; ...while
5361+ 3F32 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F34                      ; calculate source address
5363+ 3F34 2A 28 61             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F37 7E                   ld      A,(HL)          ; get char
5365+ 3F38 23                   inc     HL              ; increment char pointer
5366+ 3F39 22 28 61             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F3C 6F                   ld      L,A             ;
5368+ 3F3D 26 00                ld      H,$00           ; char into HL
5369+ 3F3F 29                   add     HL,HL           ;
5370+ 3F40 29                   add     HL,HL           ;
5371+ 3F41 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F42 11 15 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F45 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F46 EB                   ex      DE,HL           ; store address into DE
5375+ 3F47 2A 26 61     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F4A CD 66 06             call    SETVDPADRS      ; send it to VDP
5377+ 3F4D EB                   ex      DE,HL           ; restore address into HL
5378+ 3F4E 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3F50 0D                   dec     C              ; VDP data mode
5380+ 3F51 ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3F53 00                   nop                     ; wait...
5382+ 3F54 00                   nop                     ; ...a...
5383+ 3F55 00                   nop                     ; ...while
5384+ 3F56 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3F58 FB                   ei                      ; re-enable INTs
5386+ 3F59 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3F5C 2A 26 61             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3F5F 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3F60 22 26 61             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3F63 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3F66 CD DF 4C             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3F69 D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3F6A D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3F6B C3 18 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3F6E
5396+ 3F6E              ; used by GPRINT to get a color argument (if present)
5397+ 3F6E 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3F6F CD A8 25             call    GETCHR          ; Get next character
5399+ 3F72 C8                   ret     Z               ; return if nothing follows
5400+ 3F73 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3F76 2C                   defb    ','
5402+ 3F77 D5                   push    DE              ; store DE
5403+ 3F78 CD BF 32             call    GETINT          ; get value
5404+ 3F7B CD 7E 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3F7E D1                   pop     DE              ; retrieve DE
5406+ 3F7F 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3F80 C9                   ret                     ; return to caller
5408+ 3F81
5409+ 3F81
5410+ 3F81              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3F81              ; at point X,Y, using default color or, if used, with
5412+ 3F81              ; color set by C
5413+ 3F81              ; TMPBFR1       X
5414+ 3F81              ; TMPBFR2       Y
5415+ 3F81              ; TMPBFR3       COLOR
5416+ 3F81              PNT     equ     VIDEOBUFF
5417+ 3F81              SPA     equ     VIDEOBUFF+$02
5418+ 3F81              SPB     equ     VIDEOBUFF+$03
5419+ 3F81              ORGSP   equ     VIDEOBUFF+$04
5420+ 3F81 CD 88 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3F84 CD BF 32             call    GETINT          ; get X
5422+ 3F87 32 1E 61             ld      (TMPBFR1),A     ; store X
5423+ 3F8A CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3F8D 2C                   defb    ','
5425+ 3F8E CD BF 32             call    GETINT          ; get Y coords,
5426+ 3F91 FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3F93 D2 73 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3F96 32 20 61             ld      (TMPBFR2),A     ; store Y
5429+ 3F99 CD 7D 44             call    CLRPRM          ; check if color has been passed
5430+ 3F9C 3A 22 61             ld      A,(TMPBFR3)     ; load color
5431+ 3F9F A7                   and     A               ; check if 0
5432+ 3FA0 CA 73 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FA3 E5                   push    HL              ; store HL
5434+ 3FA4 C5                   push    BC              ; store BC
5435+ 3FA5 D5                   push    DE              ; store DE
5436+ 3FA6                      ; start algorithm
5437+ 3FA6 CD B9 40             call    PNTRTN          ; check if pixel is already set
5438+ 3FA9 C2 5D 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 3FAC ED 73 2A 61          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 3FB0 21 01 00             ld      HL,$0001        ; HL=1
5441+ 3FB3 22 26 61             ld      (PNT),HL        ; set PNT
5442+ 3FB6 3A 1E 61             ld      A,(TMPBFR1)     ; load starting X...
5443+ 3FB9 47                   ld      B,A             ; ...into B
5444+ 3FBA 3A 20 61             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 3FBD 4F                   ld      C,A             ; ...into C
5446+ 3FBE C5                   push    BC              ; store starting X,Y into stack
5447+ 3FBF                      ; main loop
5448+ 3FBF 2A 26 61     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 3FC2 7C                   ld      A,H             ; check if PNT=0
5450+ 3FC3 B5                   or      L
5451+ 3FC4 CA 59 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 3FC7 2B                   dec     HL              ; no, so decrement PNT...
5453+ 3FC8 22 26 61             ld      (PNT),HL        ; ...and store it
5454+ 3FCB C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 3FCC CD 61 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 3FCF 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 3FD1 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 3FD2 A7                   and     A               ; (reached the limit of the screen)
5459+ 3FD3 CA DB 3F             jp      Z,PAINT1        ; yes, jump over
5460+ 3FD6 05                   dec     B               ; no, decrement X1...
5461+ 3FD7 C3 CC 3F             jp      PAINT0          ; ...and repeat
5462+ 3FDA 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 3FDB AF           PAINT1: xor     A               ; reset A
5464+ 3FDC 57                   ld      D,A             ; set SA=0
5465+ 3FDD 5F                   ld      E,A             ; set SB=0
5466+ 3FDE CD 61 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 3FE1 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 3FE3 78                   ld      A,B             ; copy X1
5469+ 3FE4 32 1E 61             ld      (TMPBFR1),A     ; into buffer
5470+ 3FE7 79                   ld      A,C             ; copy Y
5471+ 3FE8 32 20 61             ld      (TMPBFR2),A     ; into buffer
5472+ 3FEB CD DF 40             call    CNTPLOT         ; plot pixel X1,Y
5473+ 3FEE 7A                   ld      A,D             ; load SA into A
5474+ 3FEF A7                   and     A               ; SA=0?
5475+ 3FF0 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 3FF2 79                   ld      A,C             ; load Y
5477+ 3FF3 FE 01                cp      $01             ; Y>0?
5478+ 3FF5 DA 0E 40             jp      C,PAINT2        ; no, jump over
5479+ 3FF8 3D                   dec     A               ; yes, Y=Y-1
5480+ 3FF9 CD 62 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 3FFC 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 3FFE 0D                   dec     C               ; Y=Y-1
5483+ 3FFF C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 4000 0C                   inc     C               ; retrieve original Y
5485+ 4001 2A 26 61             ld      HL,(PNT)        ; load PNT
5486+ 4004 23                   inc     HL              ; increment PNT
5487+ 4005 22 26 61             ld      (PNT),HL        ; store new PNT
5488+ 4008 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 400A 57                   ld      D,A             ; ...store SA into memory
5490+ 400B C3 21 40             jp      PAINT3          ; jump over
5491+ 400E 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 400F 1F                   rra                     ; check if SA=1
5493+ 4010 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 4012 79                   ld      A,C             ; load Y
5495+ 4013 FE 01                cp      $01             ; Y>0?
5496+ 4015 DA 21 40             jp      C,PAINT3        ; no, jump over
5497+ 4018 3D                   dec     A               ; Y=Y-1
5498+ 4019 CD 62 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 401C CA 21 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 401F AF                   xor     A               ; pixel is on, so...
5501+ 4020 57                   ld      D,A             ; ...set SA=0
5502+ 4021 7B           PAINT3: ld      A,E             ; check if...
5503+ 4022 A7                   and     A               ; SB=0
5504+ 4023 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 4025 79                   ld      A,C             ; load Y
5506+ 4026 FE BF                cp      $BF             ; Y<191?
5507+ 4028 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 402A 3C                   inc     A               ; Y=Y+1
5509+ 402B CD 62 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 402E 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 4030 0C                   inc     C               ; Y=Y+1
5512+ 4031 C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 4032 0D                   dec     C               ; retrieve original Y
5514+ 4033 2A 26 61             ld      HL,(PNT)        ; PNT
5515+ 4036 23                   inc     HL              ; PNT=PNT+1
5516+ 4037 22 26 61             ld      (PNT),HL        ; store PNT
5517+ 403A 3E 01                ld      A,$01           ; SB=1
5518+ 403C 5F                   ld      E,A             ; set SB
5519+ 403D C3 52 40             jp      PAINT5          ; jump over
5520+ 4040 7B           PAINT4: ld      A,E             ; load SB
5521+ 4041 1F                   rra                     ; check if SB=1
5522+ 4042 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 4044 79                   ld      A,C             ; load Y
5524+ 4045 FE BF                cp      $BF             ; Y<191?
5525+ 4047 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 4049 3C                   inc     A               ; Y=Y+1
5527+ 404A CD 62 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 404D CA 52 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 4050 AF                   xor     A               ; pixel is on, so...
5530+ 4051 5F                   ld      E,A             ; ...set SB=0
5531+ 4052 04           PAINT5: inc     B               ; X1=X1+1
5532+ 4053 CA BF 3F             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 4056 C3 DE 3F             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 4059 ED 7B 2A 61  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 405D D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 405E C1                   pop     BC              ; retrieve BC
5537+ 405F E1                   pop     HL              ; retrieve HL
5538+ 4060 C9                   ret                     ; return to caller
5539+ 4061 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 4062 32 20 61     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 4065 78                   ld      A,B             ; copy X1 into A
5542+ 4066 32 1E 61             ld      (TMPBFR1),A     ; store X1
5543+ 4069 C5                   push    BC              ; save X1,Y
5544+ 406A D5                   push    DE
5545+ 406B CD B9 40             call    PNTRTN          ; check if pixel is set/reset
5546+ 406E D1                   pop     DE
5547+ 406F C1                   pop     BC              ; retrieve X1,Y
5548+ 4070 C9                   ret                     ; return to caller
5549+ 4071
5550+ 4071
5551+ 4071              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 4071 CD 88 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 4074 CD 5F 23             call    CHKSYN          ; make sure "(" follows
5554+ 4077 28                   defb    '('
5555+ 4078 CD BF 32             call    GETINT          ; get X coords.
5556+ 407B 32 1E 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 407E CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5558+ 4081 2C                   defb    ','
5559+ 4082 CD BF 32             call    GETINT          ; get Y coords,
5560+ 4085 FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 4087 D2 73 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 408A 32 20 61             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 408D CD 5F 23             call    CHKSYN          ; make sure ")" follows
5564+ 4090 29                   defb    ')'
5565+ 4091 E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 4092 FD E1                pop     IY              ; ...into IY
5567+ 4094 CD B9 40             call    PNTRTN          ; check if pixel is set or reset
5568+ 4097 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 4099 AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 409A 47                   ld      B,A             ; ...and B
5571+ 409B E1           PNTEND: pop     HL              ; drop original return point
5572+ 409C FD E5                push    IY              ; load current string address from IY into stack
5573+ 409E 11 24 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40A1 D5                   push    DE              ; ...saved on stack
5575+ 40A2 C3 23 2E             jp      ABPASS          ; return AB
5576+ 40A5 CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40A7 F3                   di
5578+ 40A8 CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40AB FB                   ei
5580+ 40AC CB 3F                srl     A               ; shift A...
5581+ 40AE CB 3F                srl     A               ; ...4 times...
5582+ 40B0 CB 3F                srl     A               ; ...to move foreground color...
5583+ 40B2 CB 3F                srl     A               ; ...into lowest nibble
5584+ 40B4 47                   ld      B,A             ; color into B
5585+ 40B5 AF                   xor     A               ; reset MSB
5586+ 40B6 C3 9B 40             jp      PNTEND          ; return AB
5587+ 40B9 CD 2C 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 40BC 57                   ld      D,A             ; store pixel index
5589+ 40BD F3                   di                      ; disable INTs
5590+ 40BE CD 86 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 40C1 FB                   ei                      ; re-enable INTs
5592+ 40C2 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 40C3 C9                   ret                     ; return to caller
5594+ 40C4
5595+ 40C4
5596+ 40C4              ; PLOT X,Y[,color]
5597+ 40C4              ; plot a pixel in graphic mode 2
5598+ 40C4 CD 88 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 40C7 CD BF 32             call    GETINT          ; get X coords.
5600+ 40CA 32 1E 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 40CD CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5602+ 40D0 2C                   defb    ','
5603+ 40D1 CD BF 32             call    GETINT          ; get Y coords,
5604+ 40D4 FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 40D6 D2 73 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 40D9 32 20 61             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 40DC CD 7D 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 40DF E5           CNTPLOT:push    HL              ; store HL
5609+ 40E0 C5                   push    BC              ; store BC
5610+ 40E1 D5                   push    DE              ; store DE
5611+ 40E2 CD 2C 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 40E5 D2 20 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 40E8 57                   ld      D,A             ; move pixel value into D
5614+ 40E9 3A 22 61             ld      A,(TMPBFR3)     ; retrieve color
5615+ 40EC A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 40ED 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 40EF F3                   di                      ; yes - so, disable INTs
5618+ 40F0 CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 40F3 FB                   ei                      ; re-enable INTs
5620+ 40F4 5F                   ld      E,A             ; store value of cell
5621+ 40F5 7A                   ld      A,D             ; retrieve pixel
5622+ 40F6 2F                   cpl                     ; revert bits
5623+ 40F7 A3                   and     E               ; set video pixel to off
5624+ 40F8 F3                   di                      ; disable INTs
5625+ 40F9 CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 40FC FB                   ei                      ; re-enable INTs
5627+ 40FD C3 20 41             jp      NOGD            ; leave
5628+ 4100 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 4101 87                   add     A,A             ; in the high nibble
5630+ 4102 87                   add     A,A             ; by adding A to itself
5631+ 4103 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 4104 5F                   ld      E,A             ; move it into E
5633+ 4105 F3                   di                      ; disable INTs
5634+ 4106 CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 4109 FB                   ei
5636+ 410A B2                   or      D               ; merge new pixel preserving original pattern
5637+ 410B F3                   di
5638+ 410C CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 410F FB                   ei
5640+ 4110 CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 4112 F3                   di
5642+ 4113 CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 4116 FB                   ei
5644+ 4117 E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 4119 B3                   or      E               ; set new foreground color
5646+ 411A F3                   di
5647+ 411B CD 9B 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 411E FB                   ei                      ; re-enable INTs
5649+ 411F 00                   nop                     ; wait for INTs to be enabled again
5650+ 4120 D1           NOGD:   pop     DE              ; retrieve DE
5651+ 4121 C1                   pop     BC              ; retrieve BC
5652+ 4122 E1                   pop     HL              ; retrieve HL
5653+ 4123 C9                   ret                     ; return to caller
5654+ 4124 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 4128 08 04 02 01
5655+ 412C                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 412C
5657+ 412C
5658+ 412C              ; compute the VRAM address of the byte containing the pixel
5659+ 412C              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 412C              ; byte address is returned into HL
5661+ 412C              ; pixel is returned into A
5662+ 412C              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 412C                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 412C                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 412C 3A 20 61             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 412F FE C0                cp      $C0             ; Y>=192?
5667+ 4131 D0                   ret     NC              ; yes, so leave
5668+ 4132 1E 08                ld      E,$08           ; load E with divisor
5669+ 4134 57                   ld      D,A             ; and store into D (dividend)
5670+ 4135 CD 2A 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 4138 4F                   ld      C,A             ; store remainder into C
5672+ 4139 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 413A 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 413C 3A 1E 61             ld      A,(TMPBFR1)     ; retrieve X
5675+ 413F 57                   ld      D,A             ; and move it into D (dividend)
5676+ 4140 CD 2A 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 4143 4F                   ld      C,A             ; store remainder into C
5678+ 4144 7A                   ld      A,D             ; move quotient into A
5679+ 4145 87                   add     A,A             ; multiply quotient by 8
5680+ 4146 87                   add     A,A
5681+ 4147 87                   add     A,A
5682+ 4148 5F                   ld      E,A             ; store result into E
5683+ 4149 16 00                ld      D,$00           ; reset D
5684+ 414B 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 414C EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 414D 21 24 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 4150 06 00                ld      B,$00           ; reset B
5688+ 4152 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 4153 7E                   ld      A,(HL)          ; load pixel data
5690+ 4154 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 4155 37                   scf                     ; set Carry for normal exit
5692+ 4156 C9                   ret                     ; return to caller
5693+ 4157
5694+ 4157
5695+ 4157              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 4157              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 4157              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 4157              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 4157              ; the values. If color is not specified, the foreground color set
5700+ 4157              ; with COLOR will be used
5701+ 4157              X1      equ     TMPBFR1
5702+ 4157              Y1      equ     TMPBFR2
5703+ 4157              X2      equ     VIDEOBUFF
5704+ 4157              Y2      equ     VIDEOBUFF+$02
5705+ 4157              ER      equ     VIDEOBUFF+$04
5706+ 4157              E2      equ     VIDEOBUFF+$06
5707+ 4157              SX      equ     VIDEOBUFF+$08
5708+ 4157              SY      equ     VIDEOBUFF+$0A
5709+ 4157              DX      equ     VIDEOBUFF+$0C
5710+ 4157              DY      equ     VIDEOBUFF+$0E
5711+ 4157 CD 88 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 415A CD 5F 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 415D CD 6E 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 4160 CD BF 32             call    GETINT          ; get X1 coords.
5715+ 4163 32 1E 61             ld      (X1),A          ; store it into a temp buffer
5716+ 4166 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5717+ 4169 2C                   defb    ','
5718+ 416A CD BF 32             call    GETINT          ; get Y1 coords.
5719+ 416D FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 416F D2 73 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 4172 32 20 61             ld      (Y1),A          ; store into a temp buffer
5722+ 4175 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5723+ 4178 2C                   defb    ','
5724+ 4179 CD BF 32             call    GETINT          ; get X2 coords.
5725+ 417C 32 26 61             ld      (X2),A          ; store it into a temp buffer
5726+ 417F CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5727+ 4182 2C                   defb    ','
5728+ 4183 CD BF 32             call    GETINT          ; get Y2 coords
5729+ 4186 FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 4188 D2 73 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 418B 32 28 61             ld      (Y2),A          ; store it into a temp buffer
5732+ 418E CD 7D 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 4191 E5                   push    HL              ; store register we'll use
5734+ 4192 D5                   push    DE
5735+ 4193 C5                   push    BC
5736+ 4194 ED 5B 1E 61          ld      DE,(X1)         ; load X1 and
5737+ 4198 2A 26 61             ld      HL,(X2)         ; X2
5738+ 419B B7                   or      A               ; clear CARRY
5739+ 419C ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 419E CD 20 4D             call    absHL           ; DX=ABS(DX)
5741+ 41A1 22 32 61             ld      (DX),HL         ; store DX
5742+ 41A4 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41A7 2A 1E 61             ld      HL,(X1)
5744+ 41AA ED 5B 26 61          ld      DE,(X2)
5745+ 41AE CD DF 4C             call    CMP16           ; X1<X2?
5746+ 41B1 CA BA 41             jp      Z,X1GR          ; no, X1=X2
5747+ 41B4 F2 BA 41             jp      P,X1GR          ; no, X1>X2
5748+ 41B7 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 41BA ED 43 2E 61  X1GR:   ld      (SX),BC         ; store SX
5750+ 41BE ED 5B 20 61          ld      DE,(Y1)
5751+ 41C2 2A 28 61             ld      HL,(Y2)
5752+ 41C5 B7                   or      A               ; clear Carry
5753+ 41C6 ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 41C8 CD 20 4D             call    absHL           ; DY=ABS(DY)
5755+ 41CB 22 34 61             ld      (DY),HL         ; store DY
5756+ 41CE 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 41D1 2A 20 61             ld      HL,(Y1)
5758+ 41D4 ED 5B 28 61          ld      DE,(Y2)
5759+ 41D8 CD DF 4C             call    CMP16           ; is Y1<Y2?
5760+ 41DB CA E4 41             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 41DE F2 E4 41             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 41E1 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 41E4 ED 43 30 61  Y1GR:   ld      (SY),BC         ; store SY
5764+ 41E8 2A 34 61             ld      HL,(DY)         ; ER=DY
5765+ 41EB CD 23 4D             call    negHL           ; ER=-DY
5766+ 41EE 22 2A 61             ld      (ER),HL         ; store ER
5767+ 41F1 2A 32 61             ld      HL,(DX)
5768+ 41F4 ED 5B 34 61          ld      DE,(DY)
5769+ 41F8 CD DF 4C             call    CMP16           ; DX>DY?
5770+ 41FB CA 07 42             jp      Z,ER2           ; no, DX=DY
5771+ 41FE FA 07 42             jp      M,ER2           ; no, DX<DY
5772+ 4201 2A 32 61             ld      HL,(DX)         ; reload DX
5773+ 4204 22 2A 61             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 4207 2A 2A 61     ER2:    ld      HL,(ER)         ; load ER
5775+ 420A CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 420C CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 420E CB 7C                bit     7,H             ; is the number negative?
5778+ 4210 CA 14 42             jp      Z,STRE2         ; no, jump over
5779+ 4213 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 4214 22 2A 61     STRE2:  ld      (ER),HL         ; store ER
5781+ 4217 CD DF 40     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 421A 2A 1E 61             ld      HL,(X1)
5783+ 421D ED 5B 26 61          ld      DE,(X2)
5784+ 4221 CD DF 4C             call    CMP16           ; X1=X2?
5785+ 4224 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 4226 2A 20 61             ld      HL,(Y1)         ; yes, so check
5787+ 4229 ED 5B 28 61          ld      DE,(Y2)         ; also Y
5788+ 422D CD DF 4C             call    CMP16           ; Y1=Y2?
5789+ 4230 CA 8C 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 4233 ED 5B 2A 61  CNTDRW: ld      DE,(ER)
5791+ 4237 ED 53 2C 61          ld      (E2),DE         ; E2=ER
5792+ 423B 2A 32 61             ld      HL,(DX)
5793+ 423E CD 23 4D             call    negHL           ; DX=-DX
5794+ 4241 EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 4242 CD DF 4C             call    CMP16           ; E2>-DX?
5796+ 4245 CA 63 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 4248 FA 63 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 424B 2A 2A 61             ld      HL,(ER)         ; yes
5799+ 424E ED 5B 34 61          ld      DE,(DY)
5800+ 4252 B7                   or      A               ; clear CARRY
5801+ 4253 ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 4255 22 2A 61             ld      (ER),HL
5803+ 4258 2A 1E 61             ld      HL,(X1)
5804+ 425B ED 5B 2E 61          ld      DE,(SX)
5805+ 425F 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 4260 22 1E 61             ld      (X1),HL
5807+ 4263 2A 2C 61     DXGR:   ld      HL,(E2)
5808+ 4266 ED 5B 34 61          ld      DE,(DY)
5809+ 426A CD DF 4C             call    CMP16           ; E2<DY?
5810+ 426D CA 17 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 4270 F2 17 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 4273 2A 2A 61             ld      HL,(ER)         ; yes
5813+ 4276 ED 5B 32 61          ld      DE,(DX)
5814+ 427A 19                   add     HL,DE           ; ER=ER+DX
5815+ 427B 22 2A 61             ld      (ER),HL
5816+ 427E 2A 20 61             ld      HL,(Y1)
5817+ 4281 ED 5B 30 61          ld      DE,(SY)
5818+ 4285 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 4286 22 20 61             ld      (Y1),HL
5820+ 4289 C3 17 42             jp      RPTDRW          ; repeat
5821+ 428C C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 428D D1                   pop     DE              ; retrieve DE
5823+ 428E E1                   pop     HL              ; retrieve HL
5824+ 428F C9                   ret                     ; return to caller
5825+ 4290
5826+ 4290
5827+ 4290              ; CIRCLE X,Y,R[,C]
5828+ 4290              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 4290              ; and radius R, with optional color C. If color is not specified, the
5830+ 4290              ; foreground color set with COLOR will be used
5831+ 4290              XC      equ     VIDEOBUFF
5832+ 4290              YC      equ     VIDEOBUFF+$02
5833+ 4290              RADIUS  equ     VIDEOBUFF+$04
5834+ 4290              XI      equ     VIDEOBUFF+$06
5835+ 4290              YI      equ     VIDEOBUFF+$08
5836+ 4290              DC      equ     VIDEOBUFF+$0A
5837+ 4290 CD 88 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 4293 CD 6E 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 4296 CD BF 32             call    GETINT          ; get X coords.
5840+ 4299 32 26 61             ld      (XC),A          ; store it into a temp buffer
5841+ 429C CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5842+ 429F 2C                   defb    ','
5843+ 42A0 CD BF 32             call    GETINT          ; get Y coords,
5844+ 42A3 32 28 61             ld      (YC),A          ; store it into a temp buffer
5845+ 42A6 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42A9 2C                   defb    ','
5847+ 42AA CD BF 32             call    GETINT          ; get radius
5848+ 42AD 32 2A 61             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 42B0 CD 7D 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 42B3 C5                   push    BC              ; store BC
5851+ 42B4 D5                   push    DE              ; store DE
5852+ 42B5 E5                   push    HL              ; store HL
5853+ 42B6 AF                   xor     A               ; clear A,
5854+ 42B7 47                   ld      B,A             ; B,
5855+ 42B8 4F                   ld      C,A             ; C,
5856+ 42B9 57                   ld      D,A             ; D,
5857+ 42BA 67                   ld      H,A             ; and H
5858+ 42BB ED 43 2C 61          ld      (XI),BC         ; clear XI
5859+ 42BF 3A 2A 61             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 42C2 6F                   ld      L,A             ; HL now contains R
5861+ 42C3 22 2E 61             ld      (YI),HL         ; YI=RADIUS
5862+ 42C6 29                   add     HL,HL           ; R*2
5863+ 42C7 EB                   ex      DE,HL           ; put HL into DE
5864+ 42C8 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 42CB AF                   xor     A               ; clear Carry
5866+ 42CC ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 42CE 22 30 61             ld      (DC),HL         ; store D
5868+ 42D1 CD 30 43             call    DRWCRL          ; draw initial point
5869+ 42D4 ED 5B 2C 61  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 42D8 2A 2E 61             ld      HL,(YI)         ; load YI
5871+ 42DB CD DF 4C             call    CMP16           ; is YI<DI?
5872+ 42DE CA E7 42             jp      Z,RPTCL1        ; no, YI=XI
5873+ 42E1 F2 E7 42             jp      P,RPTCL1        ; no, YI>XI
5874+ 42E4 C3 2C 43             jp      ENDCRL          ; yes, so we've finished
5875+ 42E7 21 2C 61     RPTCL1: ld      HL,XI
5876+ 42EA 34                   inc     (HL)            ; XI=XI+1
5877+ 42EB 2A 30 61             ld      HL,(DC)         ; load D
5878+ 42EE 7C                   ld      A,H
5879+ 42EF B5                   or      L               ; is D=0? Yes, jump over
5880+ 42F0 CA 14 43             jp      Z,DLSZ
5881+ 42F3 CB 7C                bit     7,H             ; is D<0?
5882+ 42F5 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 42F7 ED 5B 2E 61          ld      DE,(YI)         ; D>0
5884+ 42FB 1B                   dec     DE              ; so, YI=YI-1
5885+ 42FC ED 53 2E 61          ld      (YI),DE         ; store YI
5886+ 4300 AF                   xor     A               ; clear Carry
5887+ 4301 2A 2C 61             ld      HL,(XI)
5888+ 4304 ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 4306 29                   add     HL,HL
5890+ 4307 29                   add     HL,HL           ; HL=HL*4
5891+ 4308 11 0A 00             ld      DE,10
5892+ 430B 19                   add     HL,DE           ; HL=HL+10
5893+ 430C ED 5B 30 61          ld      DE,(DC)         ; load D
5894+ 4310 EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 4311 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 4312 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 4314 2A 2C 61     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 4317 29                   add     HL,HL
5899+ 4318 29                   add     HL,HL           ; XI=XI*4
5900+ 4319 11 06 00             ld      DE,$0006
5901+ 431C 19                   add     HL,DE
5902+ 431D ED 5B 30 61          ld      DE,(DC)
5903+ 4321 EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 4322 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 4323 22 30 61     PLTCRL: ld      (DC),HL         ; store new D
5906+ 4326 CD 30 43             call    DRWCRL          ; plot pixel
5907+ 4329 C3 D4 42             jp      RPTCRL          ; repeat
5908+ 432C E1           ENDCRL: pop     HL
5909+ 432D D1                   pop     DE
5910+ 432E C1                   pop     BC
5911+ 432F C9                   ret                     ; return to caller
5912+ 4330 2A 26 61     DRWCRL: ld      HL,(XC)
5913+ 4333 ED 5B 2C 61          ld      DE,(XI)
5914+ 4337 19                   add     HL,DE           ; X=XC+XI
5915+ 4338 22 1E 61             ld      (X1),HL         ; store X
5916+ 433B CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 433E DA 52 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 4341 2A 28 61             ld      HL,(YC)
5919+ 4344 ED 5B 2E 61          ld      DE,(YI)
5920+ 4348 19                   add     HL,DE           ; Y=YC+YI
5921+ 4349 22 20 61             ld      (Y1),HL         ; store Y
5922+ 434C CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 434F D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 4352 AF           CNTCL1: xor     A               ; clear Carry
5925+ 4353 2A 26 61             ld      HL,(XC)
5926+ 4356 ED 5B 2C 61          ld      DE,(XI)
5927+ 435A ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 435C 22 1E 61             ld      (X1),HL         ; store X
5929+ 435F CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 4362 DA 76 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 4365 2A 28 61             ld      HL,(YC)
5932+ 4368 ED 5B 2E 61          ld      DE,(YI)
5933+ 436C 19                   add     HL,DE           ; Y=YC+YI
5934+ 436D 22 20 61             ld      (Y1),HL         ; store Y
5935+ 4370 CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 4373 D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 4376 2A 26 61     CNTCL2: ld      HL,(XC)
5938+ 4379 ED 5B 2C 61          ld      DE,(XI)
5939+ 437D 19                   add     HL,DE           ; X=XC+XI
5940+ 437E 22 1E 61             ld      (X1),HL         ; store X
5941+ 4381 CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 4384 DA 9A 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 4387 AF                   xor     A               ; clear Carry
5944+ 4388 2A 28 61             ld      HL,(YC)
5945+ 438B ED 5B 2E 61          ld      DE,(YI)
5946+ 438F ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 4391 22 20 61             ld      (Y1),HL         ; store Y
5948+ 4394 CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 4397 D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 439A AF           CNTCL3: xor     A               ; clear Carry
5951+ 439B 2A 26 61             ld      HL,(XC)
5952+ 439E ED 5B 2C 61          ld      DE,(XI)
5953+ 43A2 ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43A4 22 1E 61             ld      (X1),HL         ; store X
5955+ 43A7 CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43AA DA C0 43             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 43AD AF                   xor     A               ; clear Carry
5958+ 43AE 2A 28 61             ld      HL,(YC)
5959+ 43B1 ED 5B 2E 61          ld      DE,(YI)
5960+ 43B5 ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 43B7 22 20 61             ld      (Y1),HL         ; store Y
5962+ 43BA CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 43BD D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 43C0 2A 26 61     CNTCL4: ld      HL,(XC)
5965+ 43C3 ED 5B 2E 61          ld      DE,(YI)
5966+ 43C7 19                   add     HL,DE           ; X=XC+YI
5967+ 43C8 22 1E 61             ld      (X1),HL         ; store X
5968+ 43CB CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 43CE DA E2 43             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 43D1 2A 28 61             ld      HL,(YC)
5971+ 43D4 ED 5B 2C 61          ld      DE,(XI)
5972+ 43D8 19                   add     HL,DE           ; Y=YC+XI
5973+ 43D9 22 20 61             ld      (Y1),HL         ; store Y
5974+ 43DC CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 43DF D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 43E2 AF           CNTCL5: xor     A               ; clear Carry
5977+ 43E3 2A 26 61             ld      HL,(XC)
5978+ 43E6 ED 5B 2E 61          ld      DE,(YI)
5979+ 43EA ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 43EC 22 1E 61             ld      (X1),HL         ; store X
5981+ 43EF CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 43F2 DA 06 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 43F5 2A 28 61             ld      HL,(YC)
5984+ 43F8 ED 5B 2C 61          ld      DE,(XI)
5985+ 43FC 19                   add     HL,DE           ; Y=YC+XI
5986+ 43FD 22 20 61             ld      (Y1),HL         ; store Y
5987+ 4400 CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 4403 D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 4406 2A 26 61     CNTCL6: ld      HL,(XC)
5990+ 4409 ED 5B 2E 61          ld      DE,(YI)
5991+ 440D 19                   add     HL,DE           ; X=XC+YI
5992+ 440E 22 1E 61             ld      (X1),HL         ; store X
5993+ 4411 CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 4414 DA 2A 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 4417 AF                   xor     A               ; clear Carry
5996+ 4418 2A 28 61             ld      HL,(YC)
5997+ 441B ED 5B 2C 61          ld      DE,(XI)
5998+ 441F ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 4421 22 20 61             ld      (Y1),HL         ; store Y
6000+ 4424 CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 4427 D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 442A AF           CNTCL7: xor     A               ; clear Carry
6003+ 442B 2A 26 61             ld      HL,(XC)
6004+ 442E ED 5B 2E 61          ld      DE,(YI)
6005+ 4432 ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 4434 22 1E 61             ld      (X1),HL         ; store X
6007+ 4437 CD 4F 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 443A D8                   ret     C               ; if Carry is set, X is not valid
6009+ 443B AF                   xor     A               ; clear Carry
6010+ 443C 2A 28 61             ld      HL,(YC)
6011+ 443F ED 5B 2C 61          ld      DE,(XI)
6012+ 4443 ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 4445 22 20 61             ld      (Y1),HL         ; store Y
6014+ 4448 CD 54 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 444B D4 DF 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 444E C9                   ret                     ; return to caller
6017+ 444F
6018+ 444F              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 444F              ; input: HL (value to check), can be negative
6020+ 444F              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 444F              ; destroys: A
6022+ 444F AF           VALIDX: xor     A               ; reset A
6023+ 4450 B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 4451 C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 4452 37                   scf                     ; set Carry flag to raise error
6026+ 4453 C9                   ret                     ; return to caller
6027+ 4454
6028+ 4454 AF           VALIDY: xor     A               ; reset A
6029+ 4455 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 4456 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 4458 37                   scf                     ; no, raise error by setting Carry flag
6032+ 4459 C9                   ret                     ; return to caller
6033+ 445A 7D           CNTVALY:ld      A,L
6034+ 445B FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 445D 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 445E C9                   ret                     ; return to caller
6037+ 445F
6038+ 445F
6039+ 445F
6040+ 445F              ; cleat TMPBFR1-4 buffers before using them
6041+ 445F AF           CLRTMBF:xor     A               ; reset A
6042+ 4460 E5                   push    HL              ; store HL
6043+ 4461 C5                   push    BC              ; store BC
6044+ 4462 21 1E 61             ld      HL,TMPBFR1      ; address of 1st location
6045+ 4465 06 08                ld      B,$08           ; 8 locations
6046+ 4467 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 4468 23                   inc     HL              ; next location
6048+ 4469 10 FC                djnz    RPCLTMB         ; repeat
6049+ 446B C1                   pop     BC              ; retrieve BC
6050+ 446C E1                   pop     HL              ; retrieve HL
6051+ 446D C9                   ret                     ; return to caller
6052+ 446E
6053+ 446E
6054+ 446E              ; clear VIDEOBUFF before using it as temp buffer
6055+ 446E AF           CLRVDBF:xor     A               ; clear A
6056+ 446F C5                   push    BC              ; store BC
6057+ 4470 E5                   push    HL              ; store HL
6058+ 4471 06 28                ld      B,$28           ; 40 cells
6059+ 4473 21 26 61             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 4476 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 4477 23                   inc     HL              ; next cell
6062+ 4478 10 FC                djnz    RPTCVBF         ; repeat
6063+ 447A E1                   pop     HL              ; retrieve HL
6064+ 447B C1                   pop     BC              ; retrieve BC
6065+ 447C C9                   ret                     ; return to caller
6066+ 447D
6067+ 447D
6068+ 447D              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 447D              ; commands. If not present, the default foreground color will be used
6070+ 447D 3A 1C 61     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 4480 32 22 61             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 4483 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 4484 CD A8 25             call    GETCHR          ; Get next character
6074+ 4487 C8                   ret     Z               ; return foreground color if nothing follows
6075+ 4488 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6076+ 448B 2C                   defb    ','
6077+ 448C CD BF 32             call    GETINT          ; get value
6078+ 448F CD 82 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 4492 32 22 61             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 4495 C9                   ret                     ; return to caller
6081+ 4496
6082+ 4496
6083+ 4496              ; no graphics mode error: raised when a graphics command is invoked
6084+ 4496              ; out of graphic 2 mode.
6085+ 4496 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 4498 C3 79 20             jp      ERROR           ; print error
6087+ 449B
6088+ 449B
6089+ 449B              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 449B              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 449B              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 449B              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 449B              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 449B              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 449B              ; they are assumed to be 8,0,1 resp.
6096+ 449B              PRTNUM  equ     VIDEOBUFF
6097+ 449B              BPS     equ     PRTNUM+$01
6098+ 449B              DATABT  equ     BPS+$02
6099+ 449B              PARBT   equ     DATABT+$01
6100+ 449B              STPBT   equ     PARBT+$01
6101+ 449B              SIOBFR  equ     STPBT+$01
6102+ 449B CD BF 32     SERIAL: call    GETINT          ; get port #
6103+ 449E A7                   and     A               ; is it zero?
6104+ 449F CA 73 26             jp      Z,FCERR         ; yes, error
6105+ 44A2 FE 03                cp      $03             ; is it 1 or 2?
6106+ 44A4 D2 C4 46             jp      NC,SCERR        ; no, error
6107+ 44A7 32 26 61             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44AA CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6109+ 44AD 2C                   defb    ','
6110+ 44AE 2B                   dec     HL
6111+ 44AF CD A8 25             call    GETCHR          ; check what's following
6112+ 44B2 CA 5F 20             jp      Z,SNERR         ; error if nothing follows
6113+ 44B5 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 44B7 CD 78 26             call    ATOH            ; get bps (returned into DE)
6115+ 44BA 18 0F                jr      CHKZSER         ; jump over
6116+ 44BC CD 39 2A     SERVAR: call    GETNUM          ; get number
6117+ 44BF CD 46 38             call    TSTSGN          ; check value
6118+ 44C2 FA 73 26             jp      M,FCERR         ; negative - illegal function call
6119+ 44C5 3A 75 61             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 44C8 CD EE 38             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 44CB 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 44CC B3                   or      E               ; check if bps=0
6123+ 44CD 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 44CF                      ; if baud rate is 0, then close the serial comm.
6125+ 44CF 3A 26 61     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 44D2 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 44D3 C6 22                add     SIO_CA          ; find correct channel
6128+ 44D5 4F                   ld      C,A             ; store serial channel
6129+ 44D6 F3                   di                      ; disable INTs
6130+ 44D7 AF                   xor     A               ; reset A
6131+ 44D8 16 01                ld      D,$01           ; start from WR1
6132+ 44DA 06 05                ld      B,$05           ; 5 registers
6133+ 44DC ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 44DE ED 79                out     (C),A           ; reset register
6135+ 44E0 14                   inc     D               ; next register
6136+ 44E1 10 F9                djnz    RPTRSSR         ; repeat
6137+ 44E3 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 44E5 ED 79                out     (C),A           ; send command to serial channel
6139+ 44E7 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 44E9 ED 79                out     (C),A           ; send command to serial channel
6141+ 44EB FB                   ei                      ; re-enable INTs
6142+ 44EC E5                   push    HL              ; store HL
6143+ 44ED 21 60 61             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 44F0 DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 44F2 CB 41                bit     0,C             ; check serial port
6146+ 44F4 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 44F6 CB B7                res     6,A             ; it's port 1
6148+ 44F8 CB A7                res     4,A             ; remove possible error LED
6149+ 44FA CB 86                res     0,(HL)          ; disable port 1
6150+ 44FC C3 05 45             jp      SERLED          ; jump over
6151+ 44FF CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 4501 CB AF                res     5,A             ; remove possible error LED
6153+ 4503 CB 8E                res     1,(HL)          ; disable port 2
6154+ 4505 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 4507 E1                   pop     HL              ; retrieve HL
6156+ 4508 C9                   ret                     ; return to caller
6157+ 4509                      ; check if bps=1, meaning reactivate RX on serial
6158+ 4509 7A           CNTSER: ld      A,D
6159+ 450A B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 450B 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 450D 7B                   ld      A,E             ; then by checking that
6162+ 450E FE 01                cp      $01             ; E=1
6163+ 4510 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 4512 3A 26 61             ld      A,(PRTNUM)      ; load port number
6165+ 4515 57                   ld      D,A             ; store port on D
6166+ 4516 3A 60 61             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 4519 A2                   and     D               ; check status
6168+ 451A CA C4 46             jp      Z,SCERR         ; port not open, raise error
6169+ 451D F3                   di                      ; disable INTs
6170+ 451E 7A                   ld      A,D             ; move port # into A
6171+ 451F 5F                   ld      E,A             ; and also into E
6172+ 4520 87                   add     A
6173+ 4521 87                   add     A               ; move A to left times 2
6174+ 4522 57                   ld      D,A             ; move value into D
6175+ 4523 3A 60 61             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 4526 B2                   or      D               ; re-enable RX
6177+ 4527 32 60 61             ld      (SERIALS_EN),A  ; store new serial status
6178+ 452A 7B                   ld      A,E             ; recover port #
6179+ 452B 3D                   dec     A               ; check port
6180+ 452C 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 452E CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 4531 DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 4533 CB A7                res     4,A             ; remove error LED
6184+ 4535 C3 3F 45             jp      RXEND           ; terminate setting
6185+ 4538 CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 453B DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 453D CB AF                res     5,A             ; remove error LED
6188+ 453F D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 4541 FB                   ei                      ; re-enable INTs
6190+ 4542 C9                   ret                     ; return to caller
6191+ 4543                      ; set serial port comm.
6192+ 4543 D5           CNTSER2:push    DE              ; store BPS
6193+ 4544 3A 26 61             ld      A,(PRTNUM)      ; load port number
6194+ 4547 57                   ld      D,A             ; move port # into D
6195+ 4548 3A 60 61             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 454B A2                   and     D               ; by ANDing A with D
6197+ 454C D1                   pop     DE              ; retrieve BPS
6198+ 454D CA 55 45             jp      Z,CNTSER3       ; not open, continue
6199+ 4550 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 4552 C3 79 20             jp      ERROR           ; and leave
6201+ 4555 E5           CNTSER3:push    HL              ; store HL
6202+ 4556 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 4559 CD DF 4C             call    CMP16           ; is bps<=57,600?
6204+ 455C E1                   pop     HL              ; but first, recover HL
6205+ 455D DA C4 46             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 4560 ED 53 27 61          ld      (BPS),DE        ; store bps
6207+ 4564 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 4565 CD A8 25             call    GETCHR          ; Get next character
6209+ 4568 CA A0 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 456B CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6211+ 456E 2C                   defb    ','
6212+ 456F CD BF 32             call    GETINT          ; get data bits
6213+ 4572 FE 05                cp      $05             ; is it <5?
6214+ 4574 DA C4 46             jp      C,SCERR         ; yes, error
6215+ 4577 FE 09                cp      $09             ; is it >=9?
6216+ 4579 D2 73 26             jp      NC,FCERR        ; yes, error
6217+ 457C 32 29 61             ld      (DATABT),A      ; store data bits
6218+ 457F CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6219+ 4582 2C                   defb    ','
6220+ 4583 CD BF 32             call    GETINT          ; get parity bits
6221+ 4586 BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 4589 D2 C4 46             jp      NC,SCERR        ; no, error
6223+ 458C 32 2A 61             ld      (PARBT),A       ; store parity
6224+ 458F CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6225+ 4592 2C                   defb    ','
6226+ 4593 CD BF 32             call    GETINT          ; get stop bits
6227+ 4596 FE 03                cp      $03             ; is it >=3?
6228+ 4598 D2 C4 46             jp      NC,SCERR        ; yes, error
6229+ 459B 32 2B 61             ld      (STPBT),A       ; store stop bits
6230+ 459E 18 0D                jr      SETSER          ; jump to set serial
6231+ 45A0 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45A2 32 29 61             ld      (DATABT),A
6233+ 45A5 AF                   xor     A               ; no parity bit
6234+ 45A6 32 2A 61             ld      (PARBT),A
6235+ 45A9 3C                   inc     A               ; 1 bit for stop
6236+ 45AA 32 2B 61             ld      (STPBT),A
6237+ 45AD                      ; check if bps are legal
6238+ 45AD E5           SETSER: push    HL              ; store HL
6239+ 45AE D5                   push    DE              ; store DE
6240+ 45AF DD E5                push    IX              ; store IX
6241+ 45B1 DD 21 9F 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 45B5 06 0B                ld      B,$0B           ; 11 items
6243+ 45B7 0E 00                ld      C,$00           ; reset pointer
6244+ 45B9 2A 27 61     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 45BC DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 45BF DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 45C2 CD DF 4C             call    CMP16           ; is it equal?
6248+ 45C5 CA D2 45             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 45C8 DD 23                inc     IX
6250+ 45CA DD 23                inc     IX              ; no, go to next entry
6251+ 45CC 0C                   inc     C               ; increment pointer
6252+ 45CD 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 45CF C3 C0 46             jp      SCERR1          ; if nothing found, raise an error
6254+ 45D2              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 45D2                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 45D2                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 45D2                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 45D2 F3                   di                      ; disable INTs
6259+ 45D3 06 00                ld      B,$00           ; reset B
6260+ 45D5 21 B5 46             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 45D8 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 45D9 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 45DB 3A 26 61             ld      A,(PRTNUM)      ; load port number
6264+ 45DE 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 45DF DA E3 45             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 45E2 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 45E3 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 45E5                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 45E5 ED 79                out     (C),A           ; configure CTC channel
6270+ 45E7 7E                   ld      A,(HL)          ; load CTC divider
6271+ 45E8 ED 79                out     (C),A           ; send divider
6272+ 45EA                      ; configure SIO
6273+ 45EA 21 36 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 45ED 11 2C 61             ld      DE,SIOBFR       ; into a temp buffer
6275+ 45F0 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 45F3 ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 45F5 3A 31 61             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 45F8 47                   ld      B,A             ; move it into B
6279+ 45F9 3A 29 61             ld      A,(DATABT)      ; load DATA bits
6280+ 45FC FE 05                cp      $05             ; is it 5 bits?
6281+ 45FE 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 4600 CB B0                res     6,B
6283+ 4602 CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 4604 18 19                jr      SETPAR          ; jump to set parity
6285+ 4606 FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 4608 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 460A CB F0                set     6,B
6288+ 460C CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 460E 18 0F                jr      SETPAR          ; jump to set parity
6290+ 4610 FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 4612 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 4614 CB B0                res     6,B
6293+ 4616 CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 4618 C3 1F 46             jp      SETPAR          ; jump to set parity
6295+ 461B CB F0        BITS8:  set     6,B
6296+ 461D CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 461F 21 61 61     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 4622 3A 26 61             ld      A,(PRTNUM)      ; check serial port number
6299+ 4625 3D                   dec     A               ; is it port #1?
6300+ 4626 CA 2A 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 4629 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 462A 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 462B 32 31 61             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 462E E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 4630 87                   add     A,A             ; shift left times 1
6306+ 4631 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 4632 3A 2B 61             ld      A,(STPBT)       ; load STOP bits
6308+ 4635 87                   add     A,A
6309+ 4636 87                   add     A,A             ; 2 left shifts
6310+ 4637 47                   ld      B,A             ; move forming byte into B
6311+ 4638 3A 2A 61             ld      A,(PARBT)       ; load PARITY setting
6312+ 463B A7                   and     A               ; is it 0?
6313+ 463C CA 47 46             jp      Z,STRPAR        ; yes, jump over
6314+ 463F CB C0                set     0,B             ; set PARITY on
6315+ 4641 3D                   dec     A               ; is parity ODD?
6316+ 4642 CA 47 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 4645 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 4647 3A 2F 61     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 464A E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 464C B0                   or      B               ; set new STOP & PARITY bits
6321+ 464D 32 2F 61             ld      (SIOBFR+3),A    ; store new value
6322+ 4650                      ;set up TX and RX:
6323+ 4650                      ; the followings are settings for channel A
6324+ 4650 21 2C 61             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 4653 06 06                ld      B,$06           ; 6 bytes to send
6326+ 4655 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 4657 3A 26 61             ld      A,(PRTNUM)      ; load port number
6328+ 465A 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 465B DA 5F 46             jp      C,SRLCNT        ; port 1, continue
6330+ 465E 0C                   inc     C               ; port 2, increment address port into C
6331+ 465F ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 4661                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 4661 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 4663 51                   ld      D,C             ; store port address into D
6335+ 4664 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 4666 ED B3                otir                    ; send bytes to SIO
6337+ 4668                      ; the following are settings for selected channel
6338+ 4668 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 466A 4A                   ld      C,D             ; retrieve port address
6340+ 466B ED 79                out     (C),A
6341+ 466D 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 466F                                              ; buffer overrun is special condition
6343+ 466F ED 79                out     (C),A
6344+ 4671 21 60 61             ld      HL,SERIALS_EN
6345+ 4674 3A 26 61             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 4677 3D                   dec     A               ; channel A?
6347+ 4678 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 467A CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 467D CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 467F CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 4681                      ; back to normal running
6352+ 4681 FB                   ei                      ; re-enable INTs
6353+ 4682 DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 4684 CB F7                set     6,A             ; set status LED on
6355+ 4686 CB A7                res     4,A             ; set error LED off
6356+ 4688 18 0E                jr      EXNRM           ; leave
6357+ 468A CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 468D CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 468F CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 4691                      ; back to normal running
6361+ 4691 FB                   ei                      ; re-enable INTs
6362+ 4692 DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 4694 CB FF                set     7,A             ; set status LED on
6364+ 4696 CB AF                res     5,A             ; set error LED off
6365+ 4698 D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 469A DD E1                pop     IX              ; retrieve IX
6367+ 469C D1                   pop     DE              ; retrieve DE
6368+ 469D E1                   pop     HL              ; retrieve HL
6369+ 469E C9                   ret                     ; return to caller
6370+ 469F
6371+ 469F              ; allowed bps (Bauds per second)
6372+ 469F 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46A3 80 70 00 4B
6372+ 46A7 40 38 80 25
6372+ 46AB C0 12 10 0E
6372+ 46AF 60 09 B0 04
6372+ 46B3 58 02
6373+ 46B5              ; corresponding CTC divider
6374+ 46B5 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 46B9 08 0C 18 20
6374+ 46BD 30 60 C0
6375+ 46C0
6376+ 46C0
6377+ 46C0              ; serial configuration error
6378+ 46C0 DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 46C2 D1                   pop     DE              ; retrieve DE
6380+ 46C3 E1                   pop     HL              ; retrieve HL
6381+ 46C4 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 46C6 C3 79 20             jp      ERROR           ; print error
6383+ 46C9
6384+ 46C9
6385+ 46C9              ; serial buffer overrun
6386+ 46C9 CD 75 28     SOERR:  call    PRNTCRLF
6387+ 46CC 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 46CE C3 79 20             jp      ERROR
6389+ 46D1
6390+ 46D1
6391+ 46D1              ; check for direct mode:
6392+ 46D1              ; Z is set if in direct mode, reset otherwise
6393+ 46D1 E5           DIRMOD: push    HL              ; Save code string address
6394+ 46D2 2A C8 5F             ld      HL,(LINEAT)     ; Get current line number
6395+ 46D5 23                   inc     HL              ; -1 means direct statement
6396+ 46D6 7C                   ld      A,H
6397+ 46D7 B5                   or      L
6398+ 46D8 E1                   pop     HL              ; Restore code string address
6399+ 46D9 C9                   ret
6400+ 46DA
6401+ 46DA
6402+ 46DA              ; HELP lists the line program where an error occured
6403+ 46DA CD D1 46     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 46DD C2 F3 46             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 46E0 E5                   push    HL              ; store HL
6406+ 46E1 2A CA 5F             ld      HL,(HLPLN)      ; load HELP line
6407+ 46E4 23                   inc     HL              ; increment HL
6408+ 46E5 7C                   ld      A,H
6409+ 46E6 B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 46E7 E1                   pop     HL
6411+ 46E8 CA F3 46             jp      Z,HLPERR        ; no line found, raise error
6412+ 46EB ED 5B CA 5F          ld      DE,(HLPLN)      ; recover line
6413+ 46EF C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 46F0 C3 F5 23             jp      LST01H          ; jump to list line
6415+ 46F3 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 46F5 C3 79 20             jp      ERROR           ; raise error
6417+ 46F8
6418+ 46F8
6419+ 46F8              ; KEY command to list/modify function keys and auto-repeat
6420+ 46F8 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 46F9 CD A8 25             call    GETCHR          ; Get next character
6422+ 46FC CA 7C 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 46FF                      ; change FN keys
6424+ 46FF CD BF 32             call    GETINT          ; get a number
6425+ 4702 A7                   and     A               ; is it 0?
6426+ 4703 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 4705 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 4706 D5                   push    DE              ; store HL & DE
6429+ 4707 21 4D 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 470A 11 CC 5F             ld      DE,KEYDEL       ; pointer to destination
6431+ 470D 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 4710 ED B0                ldir                    ; restore default texts
6433+ 4712 D1                   pop     DE              ; retrieve DE
6434+ 4713 E1                   pop     HL              ; retrieve HL
6435+ 4714 C9                   ret                     ; return to caller
6436+ 4715 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 4717 D2 2F 48             jp      NC,SETREP       ; yes - jump over
6438+ 471A 3D                   dec     A               ; FN key in range 0~7
6439+ 471B 87                   add     A,A             ; multiply A...
6440+ 471C 87                   add     A,A             ; ... times 4...
6441+ 471D 87                   add     A,A             ; ... to get the correct...
6442+ 471E 87                   add     A,A             ; ... offset fo FN key text
6443+ 471F 32 1E 61             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 4722 AF                   xor     A               ; ...in a...
6445+ 4723 32 1F 61             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 4726 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6447+ 4729 2C                   defb    ','
6448+ 472A 44 4D                ld      BC,HL           ; copy address into BC
6449+ 472C CD 4B 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 472F E5                   push    HL              ; store string pointer
6451+ 4730 3A AD 60             ld      A,(TYPE)        ; Get variable type
6452+ 4733 B7                   or      A               ; Is it a string variable?
6453+ 4734 CA 5F 20             jp      Z,SNERR         ; no - syntax error
6454+ 4737 CD 84 30             call    GSTRCU          ; Current string to pool
6455+ 473A CD 95 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 473D 7B                   ld      A,E             ; copy length into A
6457+ 473E FE 11                cp      $11             ; is length > 16?
6458+ 4740 DA 45 47             jp      C,DECLN1        ; no, jump over
6459+ 4743 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 4745 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 4747 93                   sub     E               ; ...null chars needed to fill up...
6462+ 4748 57                   ld      D,A             ; ...the FN key text
6463+ 4749 C5                   push    BC              ; store address of string
6464+ 474A ED 4B 1E 61          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 474E 21 CE 5F             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 4751 09                   add     HL,BC           ; get corrected address
6467+ 4752 C1                   pop     BC              ; retrieve address of string chars
6468+ 4753 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 4754 FE 0D                cp      CR              ; return?
6470+ 4756 CA 63 47             jp      Z,CPKEY2        ; yes, store char
6471+ 4759 FE 7B                cp      $7B             ; if char > "z" ?
6472+ 475B D2 5F 20             jp      NC,SNERR        ; yes - syntax error
6473+ 475E FE 20                cp      $20             ; is char < space?
6474+ 4760 DA 5F 20             jp      C,SNERR         ; yes - syntax error
6475+ 4763 FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 4765 DA 6A 47             jp      C,CPKEY3        ; no, continue
6477+ 4768 E6 5F                and     %01011111       ; set letters to uppercase
6478+ 476A 77           CPKEY3: ld      (HL),A          ; store char
6479+ 476B 23                   inc     HL              ; next string char
6480+ 476C 03                   inc     BC              ; next free cell
6481+ 476D 1D                   dec     E               ; decrement E
6482+ 476E 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 4770 AF                   xor     A               ; null char
6484+ 4771 14                   inc     D               ; +1 to decrement below
6485+ 4772 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 4773 CA 7A 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 4776 77                   ld      (HL),A          ; store it
6488+ 4777 23                   inc     HL              ; next cell
6489+ 4778 18 F8                jr      CPKEY1          ; repeat
6490+ 477A E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 477B C9                   ret                     ; return to caller
6492+ 477C                                              ; list FN keys
6493+ 477C E5           LSTKEYS:push    HL              ; Save code string address
6494+ 477D 2A C8 5F             ld      HL,(LINEAT)     ; Get current line number
6495+ 4780 23                   inc     HL              ; -1 means direct statement
6496+ 4781 7C                   ld      A,H
6497+ 4782 B5                   or      L
6498+ 4783 E1                   pop     HL              ; Restore code string address
6499+ 4784 C2 5F 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 4787 E5                   push    HL              ; store HL
6501+ 4788 D5                   push    DE              ; store DE
6502+ 4789 21 CE 5F             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 478C 0E 01                ld      C,$01           ; 8 function keys
6504+ 478E 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 4790 11 51 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 4793 CD 20 48             call    PRTCKEY         ; print it
6507+ 4796 79                   ld      A,C             ; load FN key
6508+ 4797 C6 30                add     $30             ; get number in ASCI code
6509+ 4799 CD 6A 23             call    OUTC            ; print it
6510+ 479C 11 56 48             ld      DE,CHKEY2       ; message ": ""
6511+ 479F CD 20 48             call    PRTCKEY         ; print it
6512+ 47A2 3E 01                ld      A,$01           ; " opened
6513+ 47A4 32 1E 61             ld      (TMPBFR1),A
6514+ 47A7 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47A8 A7                   and     A               ; is it zero?
6516+ 47A9 CA BC 47             jp      Z,CNTLTK        ; yes, go next char
6517+ 47AC CD 08 48             call    OPNQT           ; check if quotes are opened
6518+ 47AF FE 22                cp      $22             ; check if char is "?
6519+ 47B1 CA D1 47             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 47B4 FE 0D                cp      CR              ; is it a CR?
6521+ 47B6 CA D1 47             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 47B9 CD 6A 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 47BC 23           CNTLTK: inc     HL              ; next char
6524+ 47BD 10 E8                djnz    LDKEY           ; continue until finished
6525+ 47BF CD F6 47             call    CLSQT           ; check if quotes are still open
6526+ 47C2 3E 0D                ld      A,CR            ; go next line
6527+ 47C4 CD 6A 23             call    OUTC            ; print it
6528+ 47C7 0C                   inc     C               ; next FN key
6529+ 47C8 79                   ld      A,C             ; check if...
6530+ 47C9 FE 09                cp      $09             ; finished keys?
6531+ 47CB DA 8E 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 47CE D1                   pop     DE              ; retrieve DE
6533+ 47CF E1                   pop     HL              ; retrieve HL
6534+ 47D0 C9                   ret                     ; return to caller
6535+ 47D1 E5           PRTCHR: push    HL              ; store HL
6536+ 47D2 CD F6 47             call    CLSQT           ; check if quotes are closed
6537+ 47D5 3E 2B                ld      A,'+'           ; '+' char
6538+ 47D7 CD 6A 23             call    OUTC            ; print it
6539+ 47DA 11 59 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 47DD CD 20 48             call    PRTCKEY         ; print it
6541+ 47E0 E1                   pop     HL              ; recover HL
6542+ 47E1 23                   inc     HL              ; next char
6543+ 47E2 05                   dec     B               ; increment char counter
6544+ 47E3 11 5F 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 47E6 7E                   ld      A,(HL)          ; load char
6546+ 47E7 FE 0D                cp      CR              ; is it a RETURN?
6547+ 47E9 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 47EB 11 62 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 47EE CD 20 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 47F1 3E 29                ld      A,')'           ; char )
6551+ 47F3 C3 B9 47             jp      PRTK3           ; continue
6552+ 47F6 F5           CLSQT:  push    AF              ; store A
6553+ 47F7 3A 1E 61             ld      A,(TMPBFR1)     ; quote status
6554+ 47FA A7                   and     A               ; are they closed?
6555+ 47FB 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 47FD 3E 22                ld      A,$22           ; no, so close them
6557+ 47FF CD 6A 23             call    OUTC            ; print "
6558+ 4802 AF                   xor     A               ; set quotes
6559+ 4803 32 1E 61             ld      (TMPBFR1),A     ; as closed
6560+ 4806 F1           CLSQT1: pop     AF              ; retrieve A
6561+ 4807 C9                   ret                     ; return to caller
6562+ 4808 F5           OPNQT:  push    AF              ; store A
6563+ 4809 3A 1E 61             ld      A,(TMPBFR1)     ; quote status
6564+ 480C A7                   and     A               ; are they open?
6565+ 480D 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 480F 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 4811 CD 6A 23             call    OUTC            ; print it
6568+ 4814 3E 22                ld      A,$22           ; and then open quotes
6569+ 4816 CD 6A 23             call    OUTC            ; print them
6570+ 4819 3E 01                ld      A,$01           ; set quotes
6571+ 481B 32 1E 61             ld      (TMPBFR1),A     ; as opened
6572+ 481E F1           OPNQT1: pop     AF              ; retrieve A
6573+ 481F C9                   ret                     ; return to caller
6574+ 4820 F5           PRTCKEY:push    AF              ; store original char
6575+ 4821 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 4822 A7                   and     A               ; is it 0?
6577+ 4823 CA 2D 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 4826 CD 6A 23             call    OUTC            ; no, print char
6579+ 4829 13                   inc     DE              ; next char
6580+ 482A C3 21 48             jp      PRTK1           ; repeat
6581+ 482D F1           PRTEND: pop     AF              ; retrieve AF
6582+ 482E C9                   ret                     ; return to caller
6583+ 482F FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 4831 C2 5F 20             jp      NZ,SNERR        ; no, raise an error
6585+ 4834 CD 5F 23             call    CHKSYN          ; Check for comma
6586+ 4837 2C                   defb    ','
6587+ 4838 CD BF 32             call    GETINT          ; get a number
6588+ 483B 32 1E 61             ld      (TMPBFR1),A     ; store it
6589+ 483E CD 5F 23             call    CHKSYN          ; Check for comma
6590+ 4841 2C                   defb    ','
6591+ 4842 CD BF 32             call    GETINT          ; get another number
6592+ 4845 E5                   push    HL              ; store HL
6593+ 4846 21 CD 5F             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 4849 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 484A 2B                   dec     HL              ; previous cell
6596+ 484B 3A 1E 61             ld      A,(TMPBFR1)     ; retrieve value
6597+ 484E 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 484F E1                   pop     HL              ; retrieve HL
6599+ 4850 C9                   ret
6600+ 4851 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 4855 00
6601+ 4856 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 4859 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 485D 28 00
6603+ 485F 31 33 00     CHKEY4: defb    "13",0
6604+ 4862 33 34 00     CHKEY5: defb    "34",0
6605+ 4865
6606+ 4865
6607+ 4865              ; check if DOS is enabled
6608+ 4865 3A 63 61     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 4868 A7                   and     A               ; check if 0 (NOT enabled)
6610+ 4869 C0                   ret     NZ              ; return if enabled
6611+ 486A 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 486C C3 79 20             jp      ERROR           ; raise error
6613+ 486F
6614+ 486F
6615+ 486F              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 486F              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 486F CD C2 48     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 4872 CA 90 48             jp      Z,LOADST        ; number - load a single sector
6619+ 4875 CD D1 46             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 4878 C2 74 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 487B CD 91 4B             call    CHKFN1          ; string - evaluate file name
6622+ 487E CD B5 49             call    CHK1AR          ; check for ",1" argument
6623+ 4881 22 1E 61             ld      (TMPBFR1),HL    ; store HL
6624+ 4884 21 B1 48             ld      HL,TXTLDG       ; loading message
6625+ 4887 CD 41 2F             call    PRS             ; print
6626+ 488A CD 5A 15             call    LODFILE         ; load file into memory
6627+ 488D C3 A5 48             jp      LDEND           ; retrieve registers and leave
6628+ 4890 2A 1E 61     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 4893 CD D7 48             call    GET3AR          ; get 3 arguments
6630+ 4896 22 1E 61             ld      (TMPBFR1),HL    ; store HL
6631+ 4899 CD 4B 10             call    CF_SETSTR
6632+ 489C CD 8D 10             call    CF_RD_SEC       ; read sector
6633+ 489F 38 0B                jr      C,LDERR
6634+ 48A1 CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6635+ 48A4 AF                   xor     A               ; clear Carry
6636+ 48A5 2A 1E 61     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6637+ 48A8 DA AE 49             jp      C,DOS_ERR       ; jump if DOS error
6638+ 48AB C9                   ret                     ; return to caller
6639+ 48AC 1E 40        LDERR:  ld      E,D4            ; load error
6640+ 48AE C3 79 20             jp      ERROR
6641+ 48B1 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6641+ 48B5 69 6E 67 20
6641+ 48B9 66 69 6C 65
6641+ 48BD 2E 2E 2E 0D
6641+ 48C1 00
6642+ 48C2
6643+ 48C2
6644+ 48C2              ; common code for LOAD/SAVE to check the type of operation required
6645+ 48C2              ; (load/save a file or a single sector)
6646+ 48C2              ; returns Z if argument is a number, NZ if it's a string
6647+ 48C2 CD 65 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6648+ 48C5 2B                   dec     HL              ; dec 'cos GETCHR INCs
6649+ 48C6 CD A8 25             call    GETCHR          ; check if something follows
6650+ 48C9 CA 5F 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6651+ 48CC 22 1E 61             ld      (TMPBFR1),HL    ; save current code string pointer
6652+ 48CF CD 4B 2A             call    EVAL            ; Evaluate expression
6653+ 48D2 3A AD 60             ld      A,(TYPE)        ; Get variable type
6654+ 48D5 B7                   or      A               ; Is it a string variable?
6655+ 48D6 C9                   ret                     ; return to caller
6656+ 48D7
6657+ 48D7
6658+ 48D7              ; shared code between LOAD and SAVE
6659+ 48D7              ; get 3 arguments after the command LOAD or SAVE
6660+ 48D7              ; and load them into appropriate registers
6661+ 48D7 2A 1E 61     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6662+ 48DA CD BF 32             call    GETINT          ; get 1st pointer
6663+ 48DD 32 B6 60             ld      (TMPDBF),A      ; store it into a temp buffer
6664+ 48E0 CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6665+ 48E3 2C                   defb    ','
6666+ 48E4 CD BF 32             call    GETINT          ; get 2nd pointer
6667+ 48E7 32 B7 60             ld      (TMPDBF+1),A    ; store it into a temp buffer
6668+ 48EA CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6669+ 48ED 2C                   defb    ','
6670+ 48EE CD BF 32             call    GETINT          ; get 3rd pointer
6671+ 48F1 32 B8 60             ld      (TMPDBF+2),A    ; store it into a temp buffer
6672+ 48F4 CD 09 10             call    CF_INIT         ; init CF card
6673+ 48F7 DA 77 20             jp      C,NRERR         ; error if device not available/ready
6674+ 48FA 3A B6 60             ld      A,(TMPDBF)      ; retrieve 1st pointer
6675+ 48FD 4F                   ld      C,A
6676+ 48FE 3A B7 60             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6677+ 4901 47                   ld      B,A
6678+ 4902 3A B8 60             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6679+ 4905 5F                   ld      E,A
6680+ 4906 16 00                ld      D,$00           ; set disk
6681+ 4908 C9                   ret                     ; return to caller
6682+ 4909
6683+ 4909
6684+ 4909              ; save a file onto the disk
6685+ 4909 CD 65 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6686+ 490C 2B                   dec     HL              ; dec 'cos GETCHR INCs
6687+ 490D CD A8 25             call    GETCHR          ; check if something follows
6688+ 4910 CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6689+ 4913 22 1E 61             ld      (TMPBFR1),HL    ; save current code string pointer
6690+ 4916 CD 4B 2A             call    EVAL            ; Evaluate expression
6691+ 4919 3A AD 60             ld      A,(TYPE)        ; Get variable type
6692+ 491C B7                   or      A               ; Is it a string variable?
6693+ 491D CA 64 49             jp      Z,SAVEST        ; no - load a single sector
6694+ 4920 CD 91 4B             call    CHKFN1          ; yes, evaluate string
6695+ 4923 3E 80                ld      A,$80           ; set BAS for file type
6696+ 4925 32 CD 60             ld      (TPBF4),A
6697+ 4928 2B                   dec     HL              ; dec 'cos GETCHR INCs
6698+ 4929 CD A8 25             call    GETCHR          ; check if something follows
6699+ 492C 28 21                jr      Z,SAVE1         ; no, jump over
6700+ 492E CD 5F 23             call    CHKSYN          ; yes - Make sure ',' follows
6701+ 4931 2C                   defb    ','
6702+ 4932 CD 39 2A             call    GETNUM          ; Get memory address
6703+ 4935 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
6704+ 4938 ED 53 CF 60          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6705+ 493C CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6706+ 493F 2C                   defb    ','
6707+ 4940 CD 39 2A             call    GETNUM          ; Get memory address
6708+ 4943 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
6709+ 4946 ED 53 D1 60          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6710+ 494A 3E 81                ld      A,$81           ; set BIN for file type
6711+ 494C 32 CD 60             ld      (TPBF4),A
6712+ 494F CD D1 46     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6713+ 4952 C2 74 20             jp      NZ,IMERR        ; raise error if in indirect mode
6714+ 4955 22 1E 61             ld      (TMPBFR1),HL    ; store code string pointer
6715+ 4958 21 82 49             ld      HL,TXTSVG       ; loading message
6716+ 495B CD 41 2F             call    PRS             ; print
6717+ 495E CD F6 13             call    SAVFILE         ; load file into memory
6718+ 4961 C3 76 49             jp      SVEND           ; retrieve registers and leave
6719+ 4964 2A B6 60     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6720+ 4967 CD D7 48             call    GET3AR          ; get 3 arguments
6721+ 496A 22 1E 61             ld      (TMPBFR1),HL    ; store code string pointer
6722+ 496D CD B9 10             call    CF_WR_SEC       ; read sector
6723+ 4970 38 0B                jr      C,SVERR
6724+ 4972 CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6725+ 4975 AF                   xor     A               ; clear Carry
6726+ 4976 2A 1E 61     SVEND:  ld      HL,(TMPBFR1)    ; retrieve code string pointer
6727+ 4979 DA AE 49             jp      C,DOS_ERR       ; jump if DOS error
6728+ 497C C9                   ret                     ; return to caller
6729+ 497D 1E 3E        SVERR:  ld      E,D3            ; save error
6730+ 497F C3 79 20             jp      ERROR
6731+ 4982 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6731+ 4986 6E 67 20 66
6731+ 498A 69 6C 65 2E
6731+ 498E 2E 2E 20 0D
6731+ 4992 00
6732+ 4993
6733+ 4993
6734+ 4993              ; FILES
6735+ 4993              ; list files on disk
6736+ 4993 CD 65 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6737+ 4996 CD 86 18             call    CLRIOBF         ; clear I/O buffer
6738+ 4999 CD 09 10             call    CF_INIT         ; init CF card
6739+ 499C DA AE 49             jp      C,DOS_ERR       ; error if device not available/ready
6740+ 499F C5                   push    BC              ; store BC
6741+ 49A0 D5                   push    DE              ; store DE
6742+ 49A1 E5                   push    HL              ; store HL
6743+ 49A2 16 01                ld      D,$01           ; print disk details and file list
6744+ 49A4 CD AF 12             call    LST_FILES       ; list files
6745+ 49A7 E1                   pop     HL
6746+ 49A8 D1                   pop     DE
6747+ 49A9 C1                   pop     BC
6748+ 49AA DA AE 49             jp      C,DOS_ERR       ; any error?
6749+ 49AD C9                   ret                     ; return to caller
6750+ 49AE
6751+ 49AE
6752+ 49AE              ; raise a DOS error
6753+ 49AE 3A B5 60     DOS_ERR:ld      A,(DOSER)       ; load error code
6754+ 49B1 5F                   ld      E,A             ; copy into E
6755+ 49B2 C3 79 20             jp      ERROR           ; goto error routine
6756+ 49B5
6757+ 49B5
6758+ 49B5              ; check for ",1" argument
6759+ 49B5              ; check if 1 is passed as argument after LOAD and ERASE
6760+ 49B5 AF           CHK1AR: xor     A               ; reset A
6761+ 49B6 32 CD 60             ld      (TPBF4),A       ; default setting
6762+ 49B9                                              ; (load=store file in RAM using current BASIC pointers
6763+ 49B9                                              ; (erase=quick delete)
6764+ 49B9 2B                   dec     HL              ; dec 'cause GETCHR increments
6765+ 49BA CD A8 25             call    GETCHR          ; check if something follows
6766+ 49BD C8                   ret     Z               ; if nothing follows, return
6767+ 49BE CD 5F 23             call    CHKSYN          ; Make sure ',' follows
6768+ 49C1 2C                   defb    ','
6769+ 49C2 CD BF 32             call    GETINT          ; get a value
6770+ 49C5 3D                   dec     A               ; decrement it
6771+ 49C6 C2 5F 20             jp      NZ,SNERR        ; not '1' - raise an error
6772+ 49C9 3C                   inc     A               ; A=1
6773+ 49CA 32 CD 60             ld      (TPBF4),A       ; load=store file in RAM using address in file
6774+ 49CD                                              ; erase=full delete
6775+ 49CD C9                   ret                     ; return to caller
6776+ 49CE
6777+ 49CE
6778+ 49CE              ; ERASE "filename"
6779+ 49CE              ; erase a file from disk
6780+ 49CE CD 65 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6781+ 49D1 CD 87 4B             call    CHKFLNM         ; check for a disk name
6782+ 49D4 CD B5 49             call    CHK1AR          ; check for ",1" argument
6783+ 49D7 E5                   push    HL              ; store code string pointer
6784+ 49D8 21 FB 49             ld      HL,ERSTX        ; Point to message
6785+ 49DB CD 41 2F             call    PRS             ; print message for init confirmation
6786+ 49DE E1                   pop     HL              ; retrieve HL
6787+ 49DF CD 64 4B             call    CNFREQ          ; ask for confirmation
6788+ 49E2 38 33                jr      C,ABRTDS        ; if Carry set then abort
6789+ 49E4 CD 09 10             call    CF_INIT         ; init CF card
6790+ 49E7 DA AE 49             jp      C,DOS_ERR       ; error if device not available/ready
6791+ 49EA E5                   push    HL              ; store code string pointer
6792+ 49EB CD 22 16             call    FIL_ERASE       ; deleted file
6793+ 49EE E1                   pop     HL
6794+ 49EF DA AE 49             jp      C,DOS_ERR       ; leave if error
6795+ 49F2 E5                   push    HL              ; store HL
6796+ 49F3 21 09 4A             ld      HL,ERASED       ; point to message of file deleted
6797+ 49F6 CD 41 2F             call    PRS             ; print it
6798+ 49F9 E1                   pop     HL              ; retrieve HL
6799+ 49FA C9                   ret                     ; return to caller
6800+ 49FB 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6800+ 49FF 74 65 20 66
6800+ 4A03 69 6C 65 3F
6800+ 4A07 20 00
6801+ 4A09 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6801+ 4A0D 20 64 65 6C
6801+ 4A11 65 74 65 64
6801+ 4A15 0D 00
6802+ 4A17
6803+ 4A17
6804+ 4A17              ; disk operation aborted
6805+ 4A17 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6806+ 4A19 32 1A 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6807+ 4A1C E5                   push    HL              ; store HL
6808+ 4A1D 21 25 4A             ld      HL,ABRTXT       ; Point to message
6809+ 4A20 CD 41 2F             call    PRS             ; print message for leaving init procedure
6810+ 4A23 E1                   pop     HL              ; retrieve HL
6811+ 4A24 C9                   ret                     ; return to caller
6812+ 4A25 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6812+ 4A29 72 74 65 64
6812+ 4A2D 00
6813+ 4A2E
6814+ 4A2E
6815+ 4A2E               ; DISK command -------
6816+ 4A2E              ; execute several operations on a disk:
6817+ 4A2E              ; "F": format/rewrite Master Sector
6818+ 4A2E              ; "R": rename disk
6819+ 4A2E              ; syntax: DISK "arg1"[,arg2][,1]
6820+ 4A2E              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6821+ 4A2E CD D1 46     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6822+ 4A31 C2 74 20             jp      NZ,IMERR        ; raise error if in indirect mode
6823+ 4A34 CD 65 48             call    CHKDOS          ; check if DOS is enabled
6824+ 4A37                      ; check first argument
6825+ 4A37 2B                   dec     HL              ; dec 'cause GETCHR increments
6826+ 4A38 CD A8 25             call    GETCHR          ; check if something follows
6827+ 4A3B CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6828+ 4A3E CD 4B 2A             call    EVAL            ; Evaluate expression
6829+ 4A41 CD 3D 2A             call    TSTSTR          ; Make sure it's a string
6830+ 4A44 22 B6 60             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6831+ 4A47 CD 84 30             call    GSTRCU          ; check that a string follows
6832+ 4A4A CD 95 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6833+ 4A4D 7B                   ld      A,E
6834+ 4A4E 3D                   dec     A               ; lenght must be = 1
6835+ 4A4F 2A B6 60             ld      HL,(TPHL)       ; retrieve code string pointer
6836+ 4A52 C2 5F 20             jp      NZ,SNERR
6837+ 4A55 0A                   ld      A,(BC)          ; load command
6838+ 4A56 E6 5F                and     %01011111       ; Force upper case
6839+ 4A58 FE 46                cp      'F'             ; format command?
6840+ 4A5A CA 65 4A             jp      Z,DSKFRM        ; yes, format disk
6841+ 4A5D FE 52                cp      'R'             ; rename command?
6842+ 4A5F CA 32 4B             jp      Z,DSKRNM        ; yes, rename disk
6843+ 4A62 C3 5F 20             jp      SNERR           ; raise a syntax error
6844+ 4A65
6845+ 4A65
6846+ 4A65              ; Format disk or rewrite Master sector
6847+ 4A65              ; syntax: DISK "F","disk name"[,1]
6848+ 4A65              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6849+ 4A65              ; ",1": just rewrite Master sector without overwriting current directory
6850+ 4A65              ; Format: set up a fresh new file system, re-writing the Master sector and
6851+ 4A65              ; initializing the directory
6852+ 4A65              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6853+ 4A65              ; re-calculating disk geometry
6854+ 4A65              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6855+ 4A65              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6856+ 4A65 CD 5F 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6857+ 4A68 2C                   defb    ','
6858+ 4A69 CD 87 4B             call    CHKFLNM         ; check for file name
6859+ 4A6C CD B5 49             call    CHK1AR          ; check if ",1" follows - saved into A
6860+ 4A6F 11 B7 4A             ld      DE,MSTTXT       ; format message
6861+ 4A72 B7                   or      A               ; A=0?
6862+ 4A73 20 03                jr      NZ,CFINIT       ; no, jump over
6863+ 4A75 11 CF 4A             ld      DE,FRMTXT       ; only Master Sector
6864+ 4A78 E5           CFINIT: push    HL              ; store code string pointer
6865+ 4A79 62                   ld      H,D             ; Point to message
6866+ 4A7A 6B                   ld      L,E
6867+ 4A7B CD 41 2F             call    PRS             ; print message for confirmation
6868+ 4A7E E1                   pop     HL              ; retrieve HL
6869+ 4A7F CD 64 4B             call    CNFREQ          ; ask for confirmation
6870+ 4A82 DA 17 4A             jp      C,ABRTDS        ; if Carry set then abort
6871+ 4A85 CD 09 10     INITDSK:call    CF_INIT         ; init CF card
6872+ 4A88 DA AE 49             jp      C,DOS_ERR       ; error if device not available/ready
6873+ 4A8B C5                   push    BC
6874+ 4A8C D5                   push    DE
6875+ 4A8D E5                   push    HL              ; store code string pointer
6876+ 4A8E CD F6 10             call    DSK_INIT        ; init disk
6877+ 4A91 E1                   pop     HL
6878+ 4A92 D1                   pop     DE
6879+ 4A93 C1                   pop     BC
6880+ 4A94 30 03                jr      NC,INITFN       ; leave if no errors
6881+ 4A96 C3 AE 49             jp      DOS_ERR         ; raise error
6882+ 4A99 E5           INITFN: push    HL              ; store code string pointer
6883+ 4A9A 3A 1E 61             ld      A,(TMPBFR1)
6884+ 4A9D B7                   or      A               ; full formatting?
6885+ 4A9E 20 0F                jr      NZ,MSPTOK       ; no
6886+ 4AA0 21 01 4B             ld      HL,FRMTOK       ; yes, Point to message
6887+ 4AA3 CD 41 2F             call    PRS             ; print message for init confirmation
6888+ 4AA6 D5                   push    DE
6889+ 4AA7 16 00                ld      D,$00           ; print only disk details, no file list
6890+ 4AA9 CD AF 12             call    LST_FILES       ; print details of disk and list files
6891+ 4AAC D1                   pop     DE
6892+ 4AAD E1                   pop     HL
6893+ 4AAE C9                   ret                     ; return to caller
6894+ 4AAF 21 18 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6895+ 4AB2 CD 41 2F             call    PRS             ; print message for init confirmation
6896+ 4AB5 E1                   pop     HL              ; retrieve code string pointer
6897+ 4AB6 C9                   ret                     ; return to caller
6898+ 4AB7 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6898+ 4ABB 69 74 65 20
6898+ 4ABF 4D 61 73 74
6898+ 4AC3 65 72 20 53
6898+ 4AC7 65 63 74 6F
6898+ 4ACB 72 3F 20 00
6899+ 4ACF 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6899+ 4AD3 49 4E 47 21
6899+ 4AD7 21 20 44 69
6899+ 4ADB 73 6B 20 63
6899+ 4ADF 6F 6E 74 65
6899+ 4AE3 6E 74 73 20
6899+ 4AE7 77 69 6C 6C
6899+ 4AEB 20 62 65 20
6899+ 4AEF 65 72 61 73
6899+ 4AF3 65 64 2E 20
6900+ 4AF7 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6900+ 4AFB 65 65 64 3F
6900+ 4AFF 20 00
6901+ 4B01 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6901+ 4B05 6D 61 74 74
6901+ 4B09 69 6E 67 20
6901+ 4B0D 63 6F 6D 70
6901+ 4B11 6C 65 74 65
6901+ 4B15 64 0D 00
6902+ 4B18 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6902+ 4B1C 74 65 72 20
6902+ 4B20 53 65 63 74
6902+ 4B24 6F 72 20 72
6902+ 4B28 65 77 72 69
6902+ 4B2C 74 74 65 6E
6902+ 4B30 0D 00
6903+ 4B32
6904+ 4B32
6905+ 4B32              ; disk rename
6906+ 4B32 CD 5F 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6907+ 4B35 2C                   defb    ','
6908+ 4B36 CD 87 4B             call    CHKFLNM         ; check for file name
6909+ 4B39 E5                   push    HL              ; store code string pointer
6910+ 4B3A 21 56 4B             ld      HL,RNDKTX       ; Point to message
6911+ 4B3D CD 41 2F             call    PRS             ; print message for confirmation
6912+ 4B40 E1                   pop     HL              ; retrieve HL
6913+ 4B41 CD 64 4B             call    CNFREQ          ; ask for confirmation
6914+ 4B44 DA 17 4A             jp      C,ABRTDS        ; if Carry set then abort
6915+ 4B47 CD 09 10             call    CF_INIT         ; init CF card
6916+ 4B4A DA AE 49             jp      C,DOS_ERR       ; error if device not available/ready
6917+ 4B4D E5                   push    HL              ; store code string pointer
6918+ 4B4E CD 2B 12             call    DSK_RNM         ; init disk
6919+ 4B51 E1                   pop     HL
6920+ 4B52 DA AE 49             jp      C,DOS_ERR       ; DOS error
6921+ 4B55 C9                   ret
6922+ 4B56 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6922+ 4B5A 6D 65 20 64
6922+ 4B5E 69 73 6B 3F
6922+ 4B62 20 00
6923+ 4B64
6924+ 4B64
6925+ 4B64              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6926+ 4B64 CD 23 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6927+ 4B67 AF                   xor     A
6928+ 4B68 32 1A 61             ld      (PRNTVIDEO),A   ; disable print-on-video
6929+ 4B6B CD 2A 02             call    RXA             ; look for a pressed key
6930+ 4B6E FE 03                cp      CTRLC           ; is it RUN STOP?
6931+ 4B70 28 13                jr      Z,CNFRQN        ; yes, abort operation
6932+ 4B72 E6 DF                and     %11011111       ; only UPPERCASE char
6933+ 4B74 FE 59                cp      'Y'             ; 'Y'?
6934+ 4B76 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6935+ 4B78 3E 01                ld      A,$01           ; re-enable...
6936+ 4B7A 32 1A 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6937+ 4B7D CD 1C 03             call    ECHO_CHAR       ; yes, echoes the char
6938+ 4B80 CD 38 09             call    CURSOR_OFF      ; disable cursor
6939+ 4B83 AF                   xor     A               ; reset Carry flag
6940+ 4B84 C9                   ret                     ; return to caller
6941+ 4B85 37           CNFRQN: scf                     ; set Carry flag
6942+ 4B86 C9                   ret                     ; return to caller
6943+ 4B87
6944+ 4B87
6945+ 4B87              ; check that a disk/file name follows
6946+ 4B87 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6947+ 4B88 CD A8 25             call    GETCHR          ; check if something follows
6948+ 4B8B CA 5F 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6949+ 4B8E CD 4B 2A             call    EVAL            ; Evaluate expression
6950+ 4B91 CD 3D 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6951+ 4B94 22 B8 60             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6952+ 4B97 ED 53 BA 60          ld      (TMPDBF+4),DE   ; store DE
6953+ 4B9B ED 43 BC 60          ld      (TMPDBF+6),BC
6954+ 4B9F CD 84 30             call    GSTRCU          ; get current string into pool
6955+ 4BA2 CD 95 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6956+ 4BA5 7B                   ld      A,E             ; check if lenght = 0
6957+ 4BA6 A7                   and     A               ; null string?
6958+ 4BA7 CA 5F 20             jp      Z,SNERR         ; yes, syntax error
6959+ 4BAA ED 53 22 61          ld      (DKLNPT),DE     ; no, store lenght
6960+ 4BAE ED 43 20 61          ld      (DKNMPT),BC     ; store address of temp string
6961+ 4BB2 2A B8 60             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6962+ 4BB5 ED 5B BA 60          ld      DE,(TMPDBF+4)   ; retrieve DE
6963+ 4BB9 ED 4B BC 60          ld      BC,(TMPDBF+6)   ; retrieve BC
6964+ 4BBD C9                   ret                     ; return to caller
6965+ 4BBE
6966+ 4BBE
6967+ 4BBE              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6968+ 4BBE CD 3C 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6969+ 4BC1 CD 5E 26             call	DEINT           ; Get integer -32768 to 32767
6970+ 4BC4 C5                   push	BC              ; Save contents of BC
6971+ 4BC5 21 77 61             ld      HL,PBUFF        ; load address of PBUFF into HL
6972+ 4BC8 7A                   ld      A,D             ; Get MSB into A
6973+ 4BC9 B7                   or      A               ; OR with LSB to see if param=0
6974+ 4BCA 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6975+ 4BCC CD F4 4B             call    BYT2ASC         ; Convert D to ASCII
6976+ 4BCF 78                   ld      A,B             ; cechk if B
6977+ 4BD0 FE 30                cp      '0'             ; is 0
6978+ 4BD2 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6979+ 4BD4 70                   ld      (HL),B          ; Store it to PBUFF
6980+ 4BD5 23                   inc     HL              ; Next location
6981+ 4BD6 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6982+ 4BD7 23                   inc     HL              ; Next location
6983+ 4BD8 7B           HEX2:   ld      A,E             ; Get lower byte
6984+ 4BD9 CD F4 4B             call    BYT2ASC         ; Convert E to ASCII
6985+ 4BDC 7A                   ld      A,D
6986+ 4BDD B7                   or      A
6987+ 4BDE 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
6988+ 4BE0 78                   ld      A,B
6989+ 4BE1 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
6990+ 4BE3 28 02                jr      Z,HEX4
6991+ 4BE5 70           HEX3:   ld      (HL),B          ; to PBUFF+2
6992+ 4BE6 23                   inc     HL              ; Next location
6993+ 4BE7 71           HEX4:   ld      (HL),C          ; to PBUFF+3
6994+ 4BE8 23                   inc     HL              ; PBUFF+4 to zero
6995+ 4BE9 AF                   xor     A               ; Terminating character
6996+ 4BEA 77                   ld      (HL),A          ; Store zero to terminate
6997+ 4BEB 23                   inc     HL              ; Make sure PBUFF is terminated
6998+ 4BEC 77                   ld      (HL),A          ; Store the double zero there
6999+ 4BED C1                   pop     BC              ; Get BC back
7000+ 4BEE 21 77 61             ld      HL,PBUFF        ; Reset to start of PBUFF
7001+ 4BF1 C3 D1 2E             jp      STR1            ; Convert the PBUFF to a string and return it
7002+ 4BF4 47           BYT2ASC:ld      B,A             ; Save original value
7003+ 4BF5 E6 0F                and     $0F             ; Strip off upper nybble
7004+ 4BF7 FE 0A                cp      $0A             ; 0-9?
7005+ 4BF9 38 02                jr      C,ADD30         ; If A-F, add 7 more
7006+ 4BFB C6 07                add     A,$07           ; Bring value up to ASCII A-F
7007+ 4BFD C6 30        ADD30:  add     A,$30           ; And make ASCII
7008+ 4BFF 4F                   ld      C,A             ; Save converted char to C
7009+ 4C00 78                   ld      A,B             ; Retrieve original value
7010+ 4C01 0F                   rrca                    ; and Rotate it right
7011+ 4C02 0F                   rrca
7012+ 4C03 0F                   rrca
7013+ 4C04 0F                   rrca
7014+ 4C05 E6 0F                and     $0F             ; Mask off upper nybble
7015+ 4C07 FE 0A                cp      $0A             ; 0-9? < A hex?
7016+ 4C09 38 02                jr      C,ADD301        ; Skip Add 7
7017+ 4C0B C6 07                add     A,$07           ; Bring it up to ASCII A-F
7018+ 4C0D C6 30        ADD301: add     A,$30           ; And make it full ASCII
7019+ 4C0F 47                   ld      B,A             ; Store high order byte
7020+ 4C10 C9                   ret
7021+ 4C11
7022+ 4C11              ; Convert "&Hnnnn" to FPREG
7023+ 4C11              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7024+ 4C11              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7025+ 4C11 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7026+ 4C12 21 00 00             ld      HL,$0000        ; Zero out the value
7027+ 4C15 CD 2A 4C             call    GETHEX          ; Check the number for valid hex
7028+ 4C18 DA 4A 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7029+ 4C1B 18 05                jr      HEXLP1          ; Convert first character
7030+ 4C1D CD 2A 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7031+ 4C20 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7032+ 4C22 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7033+ 4C23 29                   add     HL,HL
7034+ 4C24 29                   add     HL,HL
7035+ 4C25 29                   add     HL,HL
7036+ 4C26 B5                   or      L               ; Add in D0-D3 into L
7037+ 4C27 6F                   ld      L,A             ; Save new value
7038+ 4C28 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7039+ 4C2A
7040+ 4C2A 13           GETHEX: inc     DE              ; Next location
7041+ 4C2B 1A                   ld      A,(DE)          ; Load character at pointer
7042+ 4C2C FE 20                cp      SPC
7043+ 4C2E CA 2A 4C             jp      Z,GETHEX        ; Skip spaces
7044+ 4C31 D6 30                sub     $30             ; Get absolute value
7045+ 4C33 D8                   ret     C               ; < "0", error
7046+ 4C34 FE 0A                cp      $0A
7047+ 4C36 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7048+ 4C38 D6 07                sub     $07             ; Reduce to A-F
7049+ 4C3A FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7050+ 4C3C D8                   ret     C               ; CY set if was :            ; < = > ? @
7051+ 4C3D FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7052+ 4C3F 3F                   ccf
7053+ 4C40 C9                   ret                     ; CY set if it wasn't valid hex
7054+ 4C41
7055+ 4C41 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7056+ 4C42 7A                   ld      A,D             ; Load DE into AC
7057+ 4C43 4B                   ld      C,E             ; For prep to
7058+ 4C44 E5                   push    HL
7059+ 4C45 CD 22 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7060+ 4C48 E1                   pop     HL
7061+ 4C49 C9                   ret
7062+ 4C4A
7063+ 4C4A DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7064+ 4C4C C3 79 20             jp      ERROR
7065+ 4C4F
7066+ 4C4F              ; BIN$(NN) Convert integer to a 1-16 char binary string
7067+ 4C4F CD 3C 2A     BIN:    call    TSTNUM          ; Verify it's a number
7068+ 4C52 CD 5E 26             call    DEINT           ; Get integer -32768 to 32767
7069+ 4C55 C5           BIN2:   push    BC              ; Save contents of BC
7070+ 4C56 21 77 61             ld      HL,PBUFF
7071+ 4C59 06 11                ld      B,$11           ; One higher than max char count (16+1)
7072+ 4C5B              ZEROSUP:                        ; Suppress leading zeros
7073+ 4C5B 05                   dec     B               ; Max 16 chars
7074+ 4C5C 78                   ld      A,B
7075+ 4C5D FE 01                cp      $01
7076+ 4C5F 28 08                jr      Z,BITOUT        ; Always output at least one character
7077+ 4C61 CB 13                rl      E
7078+ 4C63 CB 12                rl      D
7079+ 4C65 30 F4                jr      NC,ZEROSUP
7080+ 4C67 18 04                jr      BITOUT2
7081+ 4C69 CB 13        BITOUT: rl      E
7082+ 4C6B CB 12                rl      D               ; Top bit now in carry
7083+ 4C6D 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7084+ 4C6F CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7085+ 4C71 77                   ld      (HL),A
7086+ 4C72 23                   inc     HL
7087+ 4C73 05                   dec     B
7088+ 4C74 20 F3                jr      NZ,BITOUT
7089+ 4C76 AF                   xor     A               ; Terminating character
7090+ 4C77 77                   ld      (HL),A          ; Store zero to terminate
7091+ 4C78 23                   inc     HL              ; Make sure PBUFF is terminated
7092+ 4C79 77                   ld      (HL),A          ; Store the double zero there
7093+ 4C7A C1                   pop     BC
7094+ 4C7B 21 77 61             ld      HL,PBUFF
7095+ 4C7E C3 D1 2E             jp      STR1
7096+ 4C81
7097+ 4C81              ; Convert "&Bnnnn" to FPREG
7098+ 4C81              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7099+ 4C81 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7100+ 4C82 21 00 00             ld      HL,$0000        ; Zero out the value
7101+ 4C85 CD 9E 4C             call    CHKBIN          ; Check the number for valid bin
7102+ 4C88 DA AC 4C             jp      C,BINERR        ; First value wasn't bin, HX error
7103+ 4C8B D6 30        BINIT:  sub     '0'
7104+ 4C8D 29                   add     HL,HL           ; Rotate HL left
7105+ 4C8E B5                   or      L
7106+ 4C8F 6F                   ld      L,A
7107+ 4C90 CD 9E 4C             call    CHKBIN          ; Get second and addtional characters
7108+ 4C93 30 F6                jr      NC,BINIT        ; Process if a bin character
7109+ 4C95 EB                   ex      DE,HL           ; Value into DE, Code string into HL
7110+ 4C96 7A                   ld      A,D             ; Load DE into AC
7111+ 4C97 4B                   ld      C,E             ; For prep to
7112+ 4C98 E5                   push    HL
7113+ 4C99 CD 22 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7114+ 4C9C E1                   pop     HL
7115+ 4C9D C9                   ret
7116+ 4C9E
7117+ 4C9E              ; Char is in A, NC if char is 0 or 1
7118+ 4C9E 13           CHKBIN: inc     DE
7119+ 4C9F 1A                   ld      A,(DE)
7120+ 4CA0 FE 20                cp      SPC
7121+ 4CA2 CA 9E 4C             jp      Z,CHKBIN        ; Skip spaces
7122+ 4CA5 FE 30                cp      '0'             ; Set C if < '0'
7123+ 4CA7 D8                   ret     C
7124+ 4CA8 FE 32                cp      '2'
7125+ 4CAA 3F                   ccf                     ; Set C if > '1'
7126+ 4CAB C9                   ret
7127+ 4CAC
7128+ 4CAC 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7129+ 4CAE C3 79 20             jp      ERROR
7130+ 4CB1
7131+ 4CB1
7132+ 4CB1 C3 08 00     MONOUT: jp      $0008           ; output a char
7133+ 4CB4
7134+ 4CB4
7135+ 4CB4 CD DA 32     RESET:  call    DISNMI          ; disable NMI vector
7136+ 4CB7 3A 60 61             ld      A,(SERIALS_EN)  ; load status of serial lines
7137+ 4CBA E6 11                and     $11             ; are serial ports open?
7138+ 4CBC C4 CF 44             call    NZ,RSTSERS      ; yes, reset serials
7139+ 4CBF 3A 63 61             ld      A,(DOS_EN)      ; is DOS enabled
7140+ 4CC2 A7                   and     A               ; if enabled, A<>0
7141+ 4CC3 C4 81 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7142+ 4CC6 F3                   di                      ; disable INTs
7143+ 4CC7                  IFDEF LM80C64K
7144+ 4CC7 C3 EA 5E             jp      ROM2RAM         ; Restart
7145+ 4CCA                  ELSE
7146+ 4CCA ~                    jp      $0000           ; Restart
7147+ 4CCA                  ENDIF
7148+ 4CCA
7149+ 4CCA
7150+ 4CCA 3E 00        INITST: ld      A,$00           ; Clear break flag
7151+ 4CCC 32 C2 5F             ld      (BRKFLG),A
7152+ 4CCF C3 4E 1B             jp      SYSINIT
7153+ 4CD2
7154+ 4CD2
7155+ 4CD2 F5           TSTBIT: push    AF              ; Save bit mask
7156+ 4CD3 A0                   and     B               ; Get common bits
7157+ 4CD4 C1                   pop     BC              ; Restore bit mask
7158+ 4CD5 B8                   cp      B               ; Same bit set?
7159+ 4CD6 3E 00                ld      A,$00           ; Return 0 in A
7160+ 4CD8 C9                   ret
7161+ 4CD9
7162+ 4CD9 CD 6A 23     OUTNCR: call    OUTC            ; Output character in A
7163+ 4CDC C3 75 28             jp      PRNTCRLF        ; Output CRLF
7164+ 4CDF
# file closed: ../include/basic/basic-1.06.asm
  87  4CDF
  88  4CDF              ; include utils
  89  4CDF                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4CDF              ; ------------------------------------------------------------------------------
   2+ 4CDF              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4CDF              ; ------------------------------------------------------------------------------
   4+ 4CDF              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4CDF              ; designed by Leonardo Miliani. More info at
   6+ 4CDF              ; www DOT leonardomiliani DOT com
   7+ 4CDF              ;
   8+ 4CDF              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4CDF              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4CDF              ;
  11+ 4CDF              ; * WKT are routines from WikiTI:
  12+ 4CDF              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4CDF              ;
  14+ 4CDF              ; * LAC are routines from Learn@Cemetch
  15+ 4CDF              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4CDF              ;
  17+ 4CDF              ; ------------------------------------------------------------------------------
  18+ 4CDF              ; Code Revision:
  19+ 4CDF              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4CDF              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4CDF              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4CDF              ;                   transform a 32-bit value into ASCII representation
  23+ 4CDF              ;
  24+ 4CDF              ; ------------------------------------------------------------------------------
  25+ 4CDF
  26+ 4CDF              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4CDF              ; values can be both signed or unsigned words
  28+ 4CDF              ; inputs: HL, DE
  29+ 4CDF              ; destroys: A,F,HL
  30+ 4CDF              ;
  31+ 4CDF              ; returns: Z=1 if HL = DE
  32+ 4CDF              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4CDF              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4CDF              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4CDF              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4CDF              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4CDF              ; Source: ALS
  38+ 4CDF
  39+ 4CDF B7           CMP16:  or      A           ; clear CARRY
  40+ 4CE0 ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4CE2 E0                   ret     PO          ; return if no overflow
  42+ 4CE3 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4CE4 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4CE5 EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4CE7 37                   scf                 ; ensure a Non-Zero result
  46+ 4CE8 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4CE9                                          ; ZERO flag = 0 for sure
  48+ 4CE9 C9                   ret                 ; return
  49+ 4CEA
  50+ 4CEA              ; ----------------------------------------------------------------------
  51+ 4CEA
  52+ 4CEA              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4CEA              ; signed/unsigned product
  54+ 4CEA              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4CEA              ; destroys: A,F
  56+ 4CEA              ; returns: HL (product)
  57+ 4CEA              ; Source: ALS
  58+ 4CEA
  59+ 4CEA              ; initialize partial product, bit count
  60+ 4CEA C5           MUL16:  push    BC
  61+ 4CEB 4D                   ld      C,L         ; BC = multiplier
  62+ 4CEC 44                   ld      B,H
  63+ 4CED 21 00 00             ld      HL,0        ; product = 0
  64+ 4CF0 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4CF2                      ; shift-and-add algorithm
  66+ 4CF2                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4CF2                      ; shift partial product, multiplier left 1 bit
  68+ 4CF2 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4CF4 CB 12                rl      D
  70+ 4CF6 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4CF8 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4CF9 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4CFA 3D                   dec     A
  74+ 4CFB 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4CFD                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4CFD B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4CFE F2 02 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D01 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D02 C1           EXMUL16:pop     BC
  80+ 4D03 C9                   ret
  81+ 4D04
  82+ 4D04
  83+ 4D04              ; ----------------------------------------------------------------------
  84+ 4D04
  85+ 4D04              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D04              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D04              ; destroys: A,F
  88+ 4D04              ; operation: BC * DE
  89+ 4D04              ; returns: DEHL (product)
  90+ 4D04              ; Source: WKT
  91+ 4D04
  92+ 4D04 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D07 CB 23                sla     E		; optimised 1st iteration
  94+ 4D09 CB 12                rl      D
  95+ 4D0B 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D0D 60                   ld      H,B
  97+ 4D0E 69                   ld      L,C
  98+ 4D0F 3E 0F        MU32_1: ld      A,$0F
  99+ 4D11 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D12 CB 13                rl      E
 101+ 4D14 CB 12                rl      D
 102+ 4D16 30 04                jr      NC,MU32_2
 103+ 4D18 09                   add     HL,BC
 104+ 4D19 30 01                jr      NC,MU32_2
 105+ 4D1B 13                   inc     DE
 106+ 4D1C 3D           MU32_2: dec     A
 107+ 4D1D 20 F2                jr      NZ,MUL_32L
 108+ 4D1F C9                   ret
 109+ 4D20
 110+ 4D20              ; ----------------------------------------------------------------------
 111+ 4D20              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D20              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D20              ;
 114+ 4D20              ; inputs: HL
 115+ 4D20              ; destroys: A
 116+ 4D20              ; operation: ABS(HL)
 117+ 4D20              ; returns: HL with no sign or negated
 118+ 4D20              ; Source: WKT
 119+ 4D20
 120+ 4D20 CB 7C        absHL:  bit     7,H
 121+ 4D22 C8                   ret     Z
 122+ 4D23 AF           negHL:  xor     A
 123+ 4D24 95                   sub     L
 124+ 4D25 6F                   ld      L,A
 125+ 4D26 9F                   sbc     A,A
 126+ 4D27 94                   sub     H
 127+ 4D28 67                   ld      H,A
 128+ 4D29 C9                   ret
 129+ 4D2A
 130+ 4D2A              ; ------------------------------------------------------------------------------
 131+ 4D2A
 132+ 4D2A              ; 8/8 division
 133+ 4D2A              ; INPUT: D (dividend), E (divisor)
 134+ 4D2A              ; OPERATION: D/E
 135+ 4D2A              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D2A AF           DIV_8_8:    xor     A
 137+ 4D2B C5                       push    BC
 138+ 4D2C 06 08                    ld      B,08h
 139+ 4D2E CB 22        DIV_8_8LOOP:sla     D
 140+ 4D30 17                       rla
 141+ 4D31 BB                       cp      E
 142+ 4D32 38 02                    jr      C,$+4
 143+ 4D34 93                       sub     E
 144+ 4D35 14                       inc     D
 145+ 4D36 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D38 C1                       pop     BC
 147+ 4D39 C9                       ret
 148+ 4D3A
 149+ 4D3A              ; ----------------------------------------------------------------------
 150+ 4D3A              ; divide a 16-bit number by an 8-bit number
 151+ 4D3A              ; (16/8 division)
 152+ 4D3A              ;
 153+ 4D3A              ; inputs: HL (Dividend), C (divisor)
 154+ 4D3A              ; destroys: A, B
 155+ 4D3A              ; OPERATION: HL/C
 156+ 4D3A              ; returns: HL (quotient), A (remainder)
 157+ 4D3A              ; source: WKT
 158+ 4D3A
 159+ 4D3A AF           DIV_16_8:   xor     A
 160+ 4D3B 06 10                    ld      B,16
 161+ 4D3D 29           DIV_16_8LP: add     HL,HL
 162+ 4D3E 17                       rla
 163+ 4D3F 38 03                    jr      C,$+5
 164+ 4D41 B9                       cp      C
 165+ 4D42 38 02                    jr      C,$+4
 166+ 4D44 91                       sub     C
 167+ 4D45 2C                       inc     L
 168+ 4D46 10 F5                    djnz    DIV_16_8LP
 169+ 4D48 C9                       ret
 170+ 4D49
 171+ 4D49              ; ----------------------------------------------------------------------
 172+ 4D49              ; divide a 16-bit number by a 16-bit number
 173+ 4D49              ; (16/16 division)
 174+ 4D49              ;
 175+ 4D49              ; inputs: AC (Dividend), DE (divisor)
 176+ 4D49              ; destroys: HL,A,C
 177+ 4D49              ; OPERATION: AC/DE
 178+ 4D49              ; returns: AC (quotient), HL (remainder)
 179+ 4D49              ; source: WKT
 180+ 4D49 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4D4C 06 10                    ld      B, 16
 182+ 4D4E CB 21        DV16_16_LP: sla     C
 183+ 4D50 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4D52 17                       rla
 185+ 4D53 ED 6A                    adc     HL,HL
 186+ 4D55 ED 52                    sbc     HL,DE
 187+ 4D57 30 02                    jr      NC, $+4
 188+ 4D59 19                       add     HL,DE
 189+ 4D5A 0D                       dec     C
 190+ 4D5B 10 F1                    djnz    DV16_16_LP
 191+ 4D5D C9                       ret
 192+ 4D5E
 193+ 4D5E
 194+ 4D5E              ; ----------------------------------------------------------------------
 195+ 4D5E              ; divide a 32-bit number by a 16 bit-number
 196+ 4D5E              ; (32/16 division)
 197+ 4D5E              ;
 198+ 4D5E              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4D5E              ; destroys: HL,IX,BC
 200+ 4D5E              ; OPERATION: ACIX/DE
 201+ 4D5E              ; returns: ACIX (quotient), HL (remainder)
 202+ 4D5E              ; source: WKT
 203+ 4D5E
 204+ 4D5E 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4D61 06 20                    ld      B,32
 206+ 4D63 DD 29        DIV_32_16LP:add     IX,IX
 207+ 4D65 CB 11                    rl      C
 208+ 4D67 17                       rla
 209+ 4D68 ED 6A                    adc     HL,HL
 210+ 4D6A 38 08                    jr      C,DIV_32_16OF
 211+ 4D6C ED 52                    sbc     HL,DE
 212+ 4D6E 30 07                    jr      NC,DIV_32_16SB
 213+ 4D70 19                       add     HL,DE
 214+ 4D71 10 F0                    djnz    DIV_32_16LP
 215+ 4D73 C9                       ret
 216+ 4D74 B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4D75 ED 52                    sbc     HL,DE
 218+ 4D77 DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4D79 10 E8                    djnz    DIV_32_16LP
 220+ 4D7B C9                       ret
 221+ 4D7C
 222+ 4D7C
 223+ 4D7C              ; ----------------------------------------------------------------------
 224+ 4D7C              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4D7C              ;
 226+ 4D7C              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4D7C              ; destroys: AF, BC, DE, HL, IX
 228+ 4D7C              ; outputs: IY (last char in dest. string)
 229+ 4D7C              ; source: MSX Forum
 230+ 4D7C
 231+ 4D7C 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4D80 0A 00 00 00
 231+ 4D84 64 00 00 00
 231+ 4D88 E8 03 00 00
 231+ 4D8C 10 27 00 00
 232+ 4D90 A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4D94 40 42 0F 00
 232+ 4D98 80 96 98 00
 232+ 4D9C 00 E1 F5 05
 232+ 4DA0 00 CA 9A 3B
 233+ 4DA4 00 00 00 00  CLCN32Z:    defs    4
 234+ 4DA8
 235+ 4DA8 DD 22 A4 4D  CLCN32:     ld      (CLCN32Z),IX
 236+ 4DAC ED 53 A6 4D              ld      (CLCN32Z+$02),DE
 237+ 4DB0 DD 21 A0 4D              ld      IX,CLCN32T+$24
 238+ 4DB4 06 09                    ld      B,$09
 239+ 4DB6 0E 00                    ld      C,$00
 240+ 4DB8 3E 30        CLCN321:    ld      A,"0"
 241+ 4DBA B7                       or      A
 242+ 4DBB DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4DBE DD 56 01                 ld      D,(IX+$01)
 244+ 4DC1 2A A4 4D                 ld      HL,(CLCN32Z)
 245+ 4DC4 ED 52                    sbc     HL,DE
 246+ 4DC6 22 A4 4D                 ld      (CLCN32Z),HL
 247+ 4DC9 DD 5E 02                 ld      E,(IX+$02)
 248+ 4DCC DD 56 03                 ld      D,(IX+$03)
 249+ 4DCF 2A A6 4D                 ld      HL,(CLCN32Z+$02)
 250+ 4DD2 ED 52                    sbc     HL,DE
 251+ 4DD4 22 A6 4D                 ld      (CLCN32Z+$02),HL
 252+ 4DD7 38 04                    jr      C,CLCN325
 253+ 4DD9 0C                       inc     C
 254+ 4DDA 3C                       inc     A
 255+ 4DDB 18 DE                    jr      CLCN322
 256+ 4DDD DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4DE0 DD 56 01                 ld      D,(IX+$01)
 258+ 4DE3 2A A4 4D                 ld      HL,(CLCN32Z)
 259+ 4DE6 19                       add     HL,DE
 260+ 4DE7 22 A4 4D                 ld      (CLCN32Z),HL
 261+ 4DEA DD 5E 02                 ld      E,(IX+$02)
 262+ 4DED DD 56 03                 ld      D,(IX+$03)
 263+ 4DF0 2A A6 4D                 ld      HL,(CLCN32Z+$02)
 264+ 4DF3 ED 5A                    adc     HL,DE
 265+ 4DF5 22 A6 4D                 ld      (CLCN32Z+$02),HL
 266+ 4DF8 11 FC FF                 ld      DE,-4
 267+ 4DFB DD 19                    add     IX,DE
 268+ 4DFD 0C                       inc     C
 269+ 4DFE 0D                       dec     C
 270+ 4DFF 28 05                    jr      Z,CLCN323
 271+ 4E01 FD 77 00                 ld      (IY+$00),A
 272+ 4E04 FD 23                    inc     IY
 273+ 4E06 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E08 3A A4 4D                 ld      A,(CLCN32Z)
 275+ 4E0B C6 30                    add     "0"
 276+ 4E0D FD 77 00                 ld      (IY+$00),A
 277+ 4E10 FD 36 01 00              ld      (IY+$01),0
 278+ 4E14 C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E15
  91  4E15              ; include the latest version of the font sets
  92  4E15                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E15              ; ------------------------------------------------------------------------------
   2+ 4E15              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E15              ; ------------------------------------------------------------------------------
   4+ 4E15              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E15              ; designed by Leonardo Miliani. More info at
   6+ 4E15              ; www DOT leonardomiliani DOT com
   7+ 4E15              ; ------------------------------------------------------------------------------
   8+ 4E15              ; Code Revision:
   9+ 4E15              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E15              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E15              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E15              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E15              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E15              ; R1.5 - 20200524 - New style for char #252
  15+ 4E15              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E15              ; ------------------------------------------------------------------------------
  17+ 4E15              ;
  18+ 4E15              ;-------------------------------------------------------------------------------
  19+ 4E15              ;
  20+ 4E15              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E15              ;
  22+ 4E15              ;-------------------------------------------------------------------------------
  23+ 4E15              ;
  24+ 4E15              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E15              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E15
  27+ 4E15              CHRST68 equ $
  28+ 4E15 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E19 00 00 00 00
  29+ 4E1D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E21 00 00 00 00
  30+ 4E25 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E29 00 00 00 00
  31+ 4E2D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E31 00 00 00 00
  32+ 4E35 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E39 00 00 00 00
  33+ 4E3D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4E41 00 00 00 00
  34+ 4E45 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4E49 00 00 00 00
  35+ 4E4D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4E51 00 00 00 00
  36+ 4E55 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4E59 00 00 00 00
  37+ 4E5D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4E61 00 00 00 00
  38+ 4E65 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4E69 00 00 00 00
  39+ 4E6D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4E71 00 00 00 00
  40+ 4E75 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4E79 00 00 00 00
  41+ 4E7D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4E81 00 00 00 00
  42+ 4E85 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4E89 00 00 00 00
  43+ 4E8D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4E91 00 00 00 00
  44+ 4E95 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4E99 00 00 00 00
  45+ 4E9D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4EA1 00 00 00 00
  46+ 4EA5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4EA9 00 00 00 00
  47+ 4EAD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4EB1 00 00 00 00
  48+ 4EB5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4EB9 00 00 00 00
  49+ 4EBD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4EC1 00 00 00 00
  50+ 4EC5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4EC9 00 00 00 00
  51+ 4ECD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4ED1 00 00 00 00
  52+ 4ED5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4ED9 00 00 00 00
  53+ 4EDD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4EE1 00 00 00 00
  54+ 4EE5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4EE9 00 00 00 00
  55+ 4EED 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4EF1 00 00 00 00
  56+ 4EF5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4EF9 00 00 00 00
  57+ 4EFD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F01 00 00 00 00
  58+ 4F05 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F09 00 00 00 00
  59+ 4F0D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F11 00 00 00 00
  60+ 4F15 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F19 00 00 00 00
  61+ 4F1D 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F21 20 00 20 00
  62+ 4F25 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F29 00 00 00 00
  63+ 4F2D 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F31 F8 50 50 00
  64+ 4F35 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F39 28 F0 20 00
  65+ 4F3D C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4F41 40 98 18 00
  66+ 4F45 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4F49 A8 90 68 00
  67+ 4F4D 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4F51 00 00 00 00
  68+ 4F55 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4F59 40 20 10 00
  69+ 4F5D 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4F61 10 20 40 00
  70+ 4F65 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4F69 A8 20 00 00
  71+ 4F6D 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4F71 20 20 00 00
  72+ 4F75 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4F79 60 20 40 00
  73+ 4F7D 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4F81 00 00 00 00
  74+ 4F85 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4F89 00 60 60 00
  75+ 4F8D 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4F91 40 80 00 00
  76+ 4F95 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4F99 C8 88 70 00
  77+ 4F9D 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 4FA1 20 20 70 00
  78+ 4FA5 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 4FA9 20 40 F8 00
  79+ 4FAD F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 4FB1 08 88 70 00
  80+ 4FB5 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 4FB9 F8 10 10 00
  81+ 4FBD F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 4FC1 08 88 70 00
  82+ 4FC5 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 4FC9 88 88 70 00
  83+ 4FCD F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 4FD1 40 40 40 00
  84+ 4FD5 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 4FD9 88 88 70 00
  85+ 4FDD 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 4FE1 08 10 60 00
  86+ 4FE5 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 4FE9 30 30 00 00
  87+ 4FED 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 4FF1 30 10 20 00
  88+ 4FF5 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 4FF9 40 20 10 00
  89+ 4FFD 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 5001 F8 00 00 00
  90+ 5005 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 5009 10 20 40 00
  91+ 500D 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 5011 20 00 20 00
  92+ 5015 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 5019 A8 A8 70 00
  93+ 501D 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 5021 F8 88 88 00
  94+ 5025 F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 5029 88 88 F0 00
  95+ 502D 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 5031 80 88 70 00
  96+ 5035 E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 5039 88 90 E0 00
  97+ 503D F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 5041 80 80 F8 00
  98+ 5045 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 5049 80 80 80 00
  99+ 504D 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 5051 88 88 78 00
 100+ 5055 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 5059 88 88 88 00
 101+ 505D 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 5061 20 20 70 00
 102+ 5065 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 5069 10 90 60 00
 103+ 506D 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 5071 A0 90 88 00
 104+ 5075 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 5079 80 80 F8 00
 105+ 507D 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 5081 88 88 88 00
 106+ 5085 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 5089 88 88 88 00
 107+ 508D 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 5091 88 88 70 00
 108+ 5095 F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 5099 80 80 80 00
 109+ 509D 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 50A1 A8 90 68 00
 110+ 50A5 F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 50A9 A0 90 88 00
 111+ 50AD 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 50B1 08 08 F0 00
 112+ 50B5 F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 50B9 20 20 20 00
 113+ 50BD 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 50C1 88 88 70 00
 114+ 50C5 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 50C9 88 50 20 00
 115+ 50CD 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 50D1 A8 A8 50 00
 116+ 50D5 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 50D9 50 88 88 00
 117+ 50DD 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 50E1 20 20 20 00
 118+ 50E5 F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 50E9 40 80 F8 00
 119+ 50ED 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 50F1 40 40 70 00
 120+ 50F5 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 50F9 10 08 00 00
 121+ 50FD 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 5101 10 10 70 00
 122+ 5105 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 5109 00 00 00 00
 123+ 510D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 5111 00 00 00 FC
 124+ 5115 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 5119 00 00 00 00
 125+ 511D 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 5121 78 88 78 00
 126+ 5125 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 5129 C8 88 F0 00
 127+ 512D 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 5131 80 88 70 00
 128+ 5135 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 5139 98 88 78 00
 129+ 513D 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 5141 F8 80 70 00
 130+ 5145 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 5149 40 40 40 00
 131+ 514D 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 5151 78 08 70 00
 132+ 5155 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 5159 88 88 88 00
 133+ 515D 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 5161 20 20 20 00
 134+ 5165 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 5169 08 88 70 00
 135+ 516D 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 5171 C0 A0 90 00
 136+ 5175 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 5179 20 20 70 00
 137+ 517D 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 5181 A8 88 88 00
 138+ 5185 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 5189 88 88 88 00
 139+ 518D 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 5191 88 88 70 00
 140+ 5195 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 5199 F0 80 80 00
 141+ 519D 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 51A1 78 08 08 00
 142+ 51A5 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 51A9 80 80 80 00
 143+ 51AD 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 51B1 70 08 F0 00
 144+ 51B5 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 51B9 40 48 30 00
 145+ 51BD 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 51C1 88 98 68 00
 146+ 51C5 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 51C9 88 50 20 00
 147+ 51CD 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 51D1 A8 A8 50 00
 148+ 51D5 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 51D9 20 50 88 00
 149+ 51DD 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 51E1 68 08 70 00
 150+ 51E5 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 51E9 20 40 F8 00
 151+ 51ED 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 51F1 20 20 10 00
 152+ 51F5 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 51F9 20 20 20 00
 153+ 51FD 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 5201 10 10 20 00
 154+ 5205 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 5209 00 00 00 00
 155+ 520D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 5211 00 00 00 00
 156+ 5215 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 5219 B4 84 78 00
 157+ 521D 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 5221 B4 CC 78 00
 158+ 5225 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 5229 FC 78 30 00
 159+ 522D 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 5231 F8 70 20 00
 160+ 5235 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 5239 A8 20 70 00
 161+ 523D 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 5241 A8 20 70 00
 162+ 5245 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 5249 FC 30 30 30
 163+ 524D 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 5251 3C 30 30 30
 164+ 5255 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 5259 F0 30 30 30
 165+ 525D 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 5261 F0 00 00 00
 166+ 5265 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 5269 3C 00 00 00
 167+ 526D 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 5271 FC 00 00 00
 168+ 5275 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 5279 3C 30 30 30
 169+ 527D 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 5281 FC 30 30 30
 170+ 5285 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 5289 F0 30 30 30
 171+ 528D 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 5291 FC 00 00 00
 172+ 5295 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 5299 30 30 30 30
 173+ 529D 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 52A1 70 60 E0 C0
 174+ 52A5 C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 52A9 38 18 1C 0C
 175+ 52AD CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 52B1 30 78 CC CC
 176+ 52B5 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 52B9 20 20 20 20
 177+ 52BD 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 52C1 20 20 20 20
 178+ 52C5 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 52C9 20 20 20 20
 179+ 52CD 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 52D1 00 00 00 00
 180+ 52D5 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 52D9 00 00 00 00
 181+ 52DD 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 52E1 00 00 00 00
 182+ 52E5 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 52E9 20 20 20 20
 183+ 52ED 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 52F1 20 20 20 20
 184+ 52F5 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 52F9 20 20 20 20
 185+ 52FD 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 5301 00 00 00 00
 186+ 5305 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 5309 20 20 20 20
 187+ 530D 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 5311 20 40 40 80
 188+ 5315 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 5319 10 08 08 04
 189+ 531D 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 5321 30 48 48 84
 190+ 5325 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 5329 00 00 FC FC
 191+ 532D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 5331 FC FC FC FC
 192+ 5335 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 5339 FC FC FC FC
 193+ 533D FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 5341 00 00 00 00
 194+ 5345 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 5349 00 00 00 00
 195+ 534D FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 5351 FC FC 00 00
 196+ 5355 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 5359 80 80 80 80
 197+ 535D E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 5361 E0 E0 E0 E0
 198+ 5365 F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 5369 F8 F8 F8 F8
 199+ 536D 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 5371 04 04 04 04
 200+ 5375 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 5379 1C 1C 1C 1C
 201+ 537D 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 5381 7C 7C 7C 7C
 202+ 5385 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 5389 84 84 84 FC
 203+ 538D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 5391 E0 E0 E0 E0
 204+ 5395 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 5399 1C 1C 1C 1C
 205+ 539D 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 53A1 00 00 00 00
 206+ 53A5 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 53A9 00 00 00 00
 207+ 53AD E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 53B1 1C 1C 1C 1C
 208+ 53B5 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 53B9 E0 E0 E0 E0
 209+ 53BD 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 53C1 78 78 78 78
 210+ 53C5 CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 53C9 CC CC CC CC
 211+ 53CD FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 53D1 00 00 FC FC
 212+ 53D5 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 53D9 FC FC 00 00
 213+ 53DD 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 53E1 30 30 CC CC
 214+ 53E5 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 53E9 54 A8 54 A8
 215+ 53ED 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 53F1 64 30 98 CC
 216+ 53F5 CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 53F9 CC 64 30 98
 217+ 53FD 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 5401 30 98 CC 64
 218+ 5405 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 5409 64 CC 98 30
 219+ 540D 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 5411 20 00 F8 00
 220+ 5415 C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 5419 C0 00 F8 00
 221+ 541D 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 5421 18 00 F8 00
 222+ 5425 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 5429 A0 60 20 00
 223+ 542D 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 5431 00 00 00 00
 224+ 5435 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 5439 70 00 00 00
 225+ 543D 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 5441 00 FC 00 00
 226+ 5445 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 5449 54 A8 00 00
 227+ 544D 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 5451 E0 C0 80 00
 228+ 5455 FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 5459 00 00 00 00
 229+ 545D 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 5461 1C 0C 04 00
 230+ 5465 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 5469 00 30 78 FC
 231+ 546D 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 5471 20 20 20 00
 232+ 5475 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 5479 40 80 00 00
 233+ 547D 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 5481 18 10 00 00
 234+ 5485 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 5489 24 1C 1C 3C
 235+ 548D 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 5491 20 F8 70 20
 236+ 5495 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 5499 90 E0 E0 F0
 237+ 549D 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 54A1 60 20 00 00
 238+ 54A5 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 54A9 08 04 00 00
 239+ 54AD 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 54B1 F0 44 38 00
 240+ 54B5 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 54B9 28 28 28 00
 241+ 54BD 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 54C1 1C 20 20 20
 242+ 54C5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 54C9 E0 10 10 10
 243+ 54CD 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 54D1 00 00 00 00
 244+ 54D5 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 54D9 00 00 00 00
 245+ 54DD 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 54E1 3C 30 30 30
 246+ 54E5 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 54E9 F0 30 30 30
 247+ 54ED 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 54F1 E0 00 00 00
 248+ 54F5 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 54F9 1C 00 00 00
 249+ 54FD 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 5501 48 30 00 00
 250+ 5505 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 5509 78 30 00 00
 251+ 550D 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 5511 FC 78 30 00
 252+ 5515 FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 5519 E0 C0 80 80
 253+ 551D FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 5521 1C 0C 04 04
 254+ 5525 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 5529 1C 3C 7C FC
 255+ 552D 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 5531 E0 F0 F8 FC
 256+ 5535 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 5539 F0 E0 C0 00
 257+ 553D 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 5541 78 CC 00 00
 258+ 5545 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 5549 70 20 70 20
 259+ 554D 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 5551 90 90 60 00
 260+ 5555 F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 5559 84 84 84 FC
 261+ 555D 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 5561 84 84 84 FC
 262+ 5565 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 5569 48 48 48 78
 263+ 556D FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 5571 FC B4 B4 FC
 264+ 5575 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 5579 D4 D4 00 00
 265+ 557D 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 5581 78 48 48 48
 266+ 5585 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 5589 B4 84 78 00
 267+ 558D 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 5591 A8 80 00 00
 268+ 5595 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 5599 A0 88 70 00
 269+ 559D 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 55A1 84 84 FC 00
 270+ 55A5 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 55A9 F0 F0 F0 00
 271+ 55AD 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 55B1 F0 F0 F0 00
 272+ 55B5 FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 55B9 94 94 84 FC
 273+ 55BD 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 55C1 68 70 80 00
 274+ 55C5 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 55C9 6C 18 08 00
 275+ 55CD 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 55D1 20 60 E0 40
 276+ 55D5 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 55D9 E4 68 20 00
 277+ 55DD 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 55E1 E0 60 20 00
 278+ 55E5 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 55E9 F8 FC F0 90
 279+ 55ED 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 55F1 B4 84 78 00
 280+ 55F5 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 55F9 40 48 B0 00
 281+ 55FD 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 5601 48 3C 84 78
 282+ 5605 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 5609 F8 00 20 00
 283+ 560D FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 5611 FC FC FC FC
 284+ 5615                      ; here ends the ASCII table
 285+ 5615
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  5615                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 5615              ; ------------------------------------------------------------------------------
   2+ 5615              ; LM80C - 8x8 CHARSET - R1.8
   3+ 5615              ; ------------------------------------------------------------------------------
   4+ 5615              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5615              ; designed by Leonardo Miliani. More info at
   6+ 5615              ; www DOT leonardomiliani DOT com
   7+ 5615              ; ------------------------------------------------------------------------------
   8+ 5615              ; Code Revision:
   9+ 5615              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 5615              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 5615              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 5615              ; R1.3 - 20191015 - More graphic chars
  13+ 5615              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 5615              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 5615              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 5615              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 5615              ; R1.8 - 20200524 - New style for char #252
  18+ 5615              ; ------------------------------------------------------------------------------
  19+ 5615              ;
  20+ 5615              ;-------------------------------------------------------------------------------
  21+ 5615              ;
  22+ 5615              ;               8 x 8    C  H  A  R  S  E  T
  23+ 5615              ;
  24+ 5615              ;-------------------------------------------------------------------------------
  25+ 5615              ;
  26+ 5615              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 5615
  28+ 5615              CHRST88 equ $
  29+ 5615 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 5619 00 00 00 00
  30+ 561D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 5621 00 00 00 00
  31+ 5625 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 5629 00 00 00 00
  32+ 562D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 5631 00 00 00 00
  33+ 5635 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 5639 00 00 00 00
  34+ 563D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 5641 00 00 00 00
  35+ 5645 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 5649 00 00 00 00
  36+ 564D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 5651 00 00 00 00
  37+ 5655 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 5659 00 00 00 00
  38+ 565D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 5661 00 00 00 00
  39+ 5665 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 5669 00 00 00 00
  40+ 566D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 5671 00 00 00 00
  41+ 5675 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 5679 00 00 00 00
  42+ 567D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 5681 00 00 00 00
  43+ 5685 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 5689 00 00 00 00
  44+ 568D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 5691 00 00 00 00
  45+ 5695 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 5699 00 00 00 00
  46+ 569D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 56A1 00 00 00 00
  47+ 56A5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 56A9 00 00 00 00
  48+ 56AD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 56B1 00 00 00 00
  49+ 56B5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 56B9 00 00 00 00
  50+ 56BD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 56C1 00 00 00 00
  51+ 56C5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 56C9 00 00 00 00
  52+ 56CD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 56D1 00 00 00 00
  53+ 56D5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 56D9 00 00 00 00
  54+ 56DD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 56E1 00 00 00 00
  55+ 56E5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 56E9 00 00 00 00
  56+ 56ED 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 56F1 00 00 00 00
  57+ 56F5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 56F9 00 00 00 00
  58+ 56FD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 5701 00 00 00 00
  59+ 5705 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 5709 00 00 00 00
  60+ 570D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 5711 00 00 00 00
  61+ 5715 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 5719 00 00 00 00
  62+ 571D 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 5721 10 00 10 00
  63+ 5725 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 5729 00 00 00 00
  64+ 572D 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 5731 FE 28 28 00
  65+ 5735 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 5739 14 78 10 00
  66+ 573D 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 5741 10 26 46 00
  67+ 5745 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 5749 4A 44 3A 00
  68+ 574D 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 5751 00 00 00 00
  69+ 5755 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 5759 20 10 08 00
  70+ 575D 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 5761 08 10 20 00
  71+ 5765 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 5769 38 54 10 00
  72+ 576D 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 5771 10 10 00 00
  73+ 5775 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 5779 00 18 08 10
  74+ 577D 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 5781 00 00 00 00
  75+ 5785 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 5789 00 18 18 00
  76+ 578D 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 5791 10 20 40 00
  77+ 5795 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 5799 64 44 38 00
  78+ 579D 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 57A1 10 10 7C 00
  79+ 57A5 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 57A9 10 20 7C 00
  80+ 57AD 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 57B1 04 44 38 00
  81+ 57B5 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 57B9 7C 08 08 00
  82+ 57BD 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 57C1 04 44 38 00
  83+ 57C5 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 57C9 44 44 38 00
  84+ 57CD 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 57D1 20 20 20 00
  85+ 57D5 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 57D9 44 44 38 00
  86+ 57DD 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 57E1 04 44 38 00
  87+ 57E5 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 57E9 18 18 00 00
  88+ 57ED 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 57F1 18 08 10 00
  89+ 57F5 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 57F9 10 08 04 00
  90+ 57FD 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 5801 7E 00 00 00
  91+ 5805 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 5809 08 10 20 00
  92+ 580D 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 5811 10 00 10 00
  93+ 5815 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 5819 B8 80 84 78
  94+ 581D 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 5821 7C 44 44 00
  95+ 5825 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 5829 44 44 78 00
  96+ 582D 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 5831 40 44 38 00
  97+ 5835 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 5839 44 44 78 00
  98+ 583D 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 5841 40 40 7C 00
  99+ 5845 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 5849 40 40 40 00
 100+ 584D 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 5851 5C 44 38 00
 101+ 5855 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 5859 44 44 44 00
 102+ 585D 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 5861 10 10 38 00
 103+ 5865 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 5869 04 44 38 00
 104+ 586D 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 5871 48 44 44 00
 105+ 5875 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 5879 40 40 7C 00
 106+ 587D 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 5881 42 42 42 00
 107+ 5885 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 5889 44 44 44 00
 108+ 588D 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 5891 44 44 38 00
 109+ 5895 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 5899 78 40 40 00
 110+ 589D 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 58A1 54 48 34 00
 111+ 58A5 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 58A9 78 48 44 00
 112+ 58AD 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 58B1 04 04 78 00
 113+ 58B5 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 58B9 10 10 10 00
 114+ 58BD 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 58C1 44 44 38 00
 115+ 58C5 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 58C9 44 28 10 00
 116+ 58CD 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 58D1 5A 5A 24 00
 117+ 58D5 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 58D9 28 44 44 00
 118+ 58DD 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 58E1 10 10 10 00
 119+ 58E5 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 58E9 20 40 7C 00
 120+ 58ED 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 58F1 20 20 38 00
 121+ 58F5 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 58F9 08 04 02 00
 122+ 58FD 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 5901 08 08 38 00
 123+ 5905 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 5909 00 00 00 00
 124+ 590D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 5911 00 00 7E 00
 125+ 5915 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 5919 00 00 00 00
 126+ 591D 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 5921 3C 44 3C 00
 127+ 5925 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 5929 44 44 78 00
 128+ 592D 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 5931 40 44 38 00
 129+ 5935 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 5939 44 44 3C 00
 130+ 593D 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 5941 7C 40 38 00
 131+ 5945 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 5949 20 20 20 00
 132+ 594D 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 5951 44 3C 04 38
 133+ 5955 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 5959 44 44 44 00
 134+ 595D 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 5961 10 10 10 00
 135+ 5965 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 5969 08 08 48 30
 136+ 596D 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 5971 60 50 48 00
 137+ 5975 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 5979 10 10 38 00
 138+ 597D 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 5981 4A 42 42 00
 139+ 5985 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 5989 44 44 44 00
 140+ 598D 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 5991 44 44 38 00
 141+ 5995 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 5999 44 78 40 40
 142+ 599D 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 59A1 44 3C 04 04
 143+ 59A5 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 59A9 40 40 40 00
 144+ 59AD 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 59B1 38 04 78 00
 145+ 59B5 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 59B9 20 24 18 00
 146+ 59BD 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 59C1 44 4C 34 00
 147+ 59C5 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 59C9 44 28 10 00
 148+ 59CD 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 59D1 54 54 28 00
 149+ 59D5 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 59D9 10 28 44 00
 150+ 59DD 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 59E1 4C 34 04 38
 151+ 59E5 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 59E9 10 20 7C 00
 152+ 59ED 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 59F1 20 20 18 00
 153+ 59F5 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 59F9 10 10 10 00
 154+ 59FD 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A01 08 08 30 00
 155+ 5A05 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A09 00 00 00 00
 156+ 5A0D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A11 00 00 00 00
 157+ 5A15 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A19 A5 99 42 3C
 158+ 5A1D 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A21 DB E7 7E 3C
 159+ 5A25 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A29 7C 38 10 00
 160+ 5A2D 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A31 7C 38 10 00
 161+ 5A35 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A39 54 10 7C 00
 162+ 5A3D 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5A41 D6 10 7C 00
 163+ 5A45 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5A49 FF 18 18 18
 164+ 5A4D 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5A51 1F 18 18 18
 165+ 5A55 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5A59 F8 18 18 18
 166+ 5A5D 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5A61 F8 00 00 00
 167+ 5A65 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5A69 1F 00 00 00
 168+ 5A6D 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5A71 FF 00 00 00
 169+ 5A75 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5A79 1F 18 18 18
 170+ 5A7D 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5A81 FF 18 18 18
 171+ 5A85 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5A89 F8 18 18 18
 172+ 5A8D 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5A91 FF 00 00 00
 173+ 5A95 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5A99 18 18 18 18
 174+ 5A9D 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5AA1 38 70 E0 C0
 175+ 5AA5 C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5AA9 1C 0E 07 03
 176+ 5AAD C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5AB1 3C 7E E7 C3
 177+ 5AB5 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5AB9 10 10 10 10
 178+ 5ABD 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5AC1 10 10 10 10
 179+ 5AC5 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5AC9 10 10 10 10
 180+ 5ACD 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5AD1 00 00 00 00
 181+ 5AD5 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5AD9 00 00 00 00
 182+ 5ADD 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5AE1 00 00 00 00
 183+ 5AE5 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5AE9 10 10 10 10
 184+ 5AED 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5AF1 10 10 10 10
 185+ 5AF5 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5AF9 10 10 10 10
 186+ 5AFD 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B01 00 00 00 00
 187+ 5B05 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B09 10 10 10 10
 188+ 5B0D 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B11 10 20 40 80
 189+ 5B15 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B19 08 04 02 01
 190+ 5B1D 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B21 18 24 42 81
 191+ 5B25 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B29 00 00 FF FF
 192+ 5B2D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B31 FF FF FF FF
 193+ 5B35 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B39 FF FF FF FF
 194+ 5B3D FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5B41 00 00 00 00
 195+ 5B45 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5B49 00 00 00 00
 196+ 5B4D FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5B51 FF FF 00 00
 197+ 5B55 C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5B59 C0 C0 C0 C0
 198+ 5B5D F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5B61 F0 F0 F0 F0
 199+ 5B65 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5B69 FC FC FC FC
 200+ 5B6D 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5B71 03 03 03 03
 201+ 5B75 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5B79 0F 0F 0F 0F
 202+ 5B7D 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5B81 3F 3F 3F 3F
 203+ 5B85 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5B89 81 81 81 FF
 204+ 5B8D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5B91 F0 F0 F0 F0
 205+ 5B95 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5B99 0F 0F 0F 0F
 206+ 5B9D 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5BA1 00 00 00 00
 207+ 5BA5 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5BA9 00 00 00 00
 208+ 5BAD F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5BB1 0F 0F 0F 0F
 209+ 5BB5 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5BB9 F0 F0 F0 F0
 210+ 5BBD 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5BC1 3C 3C 3C 3C
 211+ 5BC5 C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5BC9 C3 C3 C3 C3
 212+ 5BCD FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5BD1 00 00 FF FF
 213+ 5BD5 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5BD9 FF FF 00 00
 214+ 5BDD 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5BE1 33 33 CC CC
 215+ 5BE5 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5BE9 55 AA 55 AA
 216+ 5BED 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5BF1 66 33 99 CC
 217+ 5BF5 CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5BF9 CC 99 33 66
 218+ 5BFD 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C01 33 99 CC 66
 219+ 5C05 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C09 66 CC 99 33
 220+ 5C0D 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C11 10 00 7C 00
 221+ 5C15 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C19 60 00 7E 00
 222+ 5C1D 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C21 06 00 7E 00
 223+ 5C25 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C29 A0 60 20 00
 224+ 5C2D 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C31 00 00 00 00
 225+ 5C35 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C39 70 00 00 00
 226+ 5C3D 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5C41 00 7E 00 00
 227+ 5C45 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5C49 54 A8 00 00
 228+ 5C4D 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5C51 E0 C0 80 00
 229+ 5C55 FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5C59 00 00 00 00
 230+ 5C5D 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5C61 07 03 01 00
 231+ 5C65 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5C69 10 38 7C FE
 232+ 5C6D 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5C71 10 10 10 00
 233+ 5C75 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5C79 20 40 00 00
 234+ 5C7D 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5C81 0C 08 00 00
 235+ 5C85 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5C89 0E 0E 1E 00
 236+ 5C8D 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5C91 7C 38 10 00
 237+ 5C95 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5C99 E0 E0 F0 00
 238+ 5C9D 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5CA1 60 20 00 00
 239+ 5CA5 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5CA9 08 04 00 00
 240+ 5CAD 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5CB1 F0 44 38 00
 241+ 5CB5 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5CB9 28 28 28 00
 242+ 5CBD 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5CC1 08 10 10 10
 243+ 5CC5 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5CC9 20 10 10 10
 244+ 5CCD 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5CD1 00 00 00 00
 245+ 5CD5 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5CD9 00 00 00 00
 246+ 5CDD 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5CE1 0F 1C 18 18
 247+ 5CE5 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5CE9 F0 38 18 18
 248+ 5CED 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5CF1 E0 00 00 00
 249+ 5CF5 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5CF9 07 00 00 00
 250+ 5CFD 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D01 42 42 3C 00
 251+ 5D05 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D09 7E 7E 3C 00
 252+ 5D0D 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D11 7E 3C 18 00
 253+ 5D15 FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D19 F0 E0 C0 80
 254+ 5D1D FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D21 0F 07 03 01
 255+ 5D25 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D29 1F 3F 7F FF
 256+ 5D2D 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D31 F8 FC FE FF
 257+ 5D35 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D39 78 70 60 00
 258+ 5D3D 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5D41 3C 66 00 00
 259+ 5D45 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5D49 38 10 38 10
 260+ 5D4D 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5D51 44 44 38 00
 261+ 5D55 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5D59 42 42 42 7E
 262+ 5D5D 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5D61 81 81 81 FF
 263+ 5D65 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5D69 54 54 54 7C
 264+ 5D6D FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5D71 BD AD AD FF
 265+ 5D75 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5D79 AC AA EA 00
 266+ 5D7D 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5D81 7E 66 66 66
 267+ 5D85 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5D89 9D 81 42 3C
 268+ 5D8D 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5D91 A5 A2 00 00
 269+ 5D95 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5D99 48 42 42 3C
 270+ 5D9D 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5DA1 99 81 FF 00
 271+ 5DA5 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5DA9 7C 7C 7C 00
 272+ 5DAD 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5DB1 F8 F8 F8 00
 273+ 5DB5 FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5DB9 A5 A5 81 FF
 274+ 5DBD 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5DC1 52 24 58 80
 275+ 5DC5 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5DC9 81 76 0C 04
 276+ 5DCD 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5DD1 08 18 38 10
 277+ 5DD5 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5DD9 F5 F5 31 12
 278+ 5DDD 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5DE1 F0 F0 30 10
 279+ 5DE5 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5DE9 7C 7E 78 48
 280+ 5DED 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5DF1 A1 99 42 3C
 281+ 5DF5 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5DF9 20 22 5C 00
 282+ 5DFD 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E01 24 1E 42 3C
 283+ 5E05 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E09 7C 00 10 00
 284+ 5E0D FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E11 FF FF FF FF
 285+ 5E15
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E15                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E15              ; ------------------------------------------------------------------------------
   2+ 5E15              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E15              ; ------------------------------------------------------------------------------
   4+ 5E15              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E15              ; designed by Leonardo Miliani. More info at
   6+ 5E15              ; www DOT leonardomiliani DOT com
   7+ 5E15              ; ------------------------------------------------------------------------------
   8+ 5E15              ; Code Revision:
   9+ 5E15              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E15              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E15              ; ------------------------------------------------------------------------------
  12+ 5E15
  13+ 5E15              LOGOFONT:   equ $
  14+ 5E15 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E19 00 00 00 00
  15+ 5E1D FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E21 FF FF FF FF
  16+ 5E25 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E29 00 00 00 00
  17+ 5E2D 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E31 0F 0F 0F 0F
  18+ 5E35 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E39 FF FF FF FF
  19+ 5E3D F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5E41 F0 F0 F0 F0
  20+ 5E45 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5E49 0F 0F 0F 0F
  21+ 5E4D 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5E51 F0 F0 F0 F0
  22+ 5E55 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5E59 00 00 00 00
  23+ 5E5D 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5E61 00 00 00 00
  24+ 5E65 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5E69 FF 07 03 00
  25+ 5E6D 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5E71 FF E0 C0 00
  26+ 5E75 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5E79 19 1F 18 18
  27+ 5E7D 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5E81 98 F8 18 18
  28+ 5E85 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5E89 0F 00 00 00
  29+ 5E8D 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5E91 1F 1C 18 18
  30+ 5E95 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5E99 F8 38 18 18
  31+ 5E9D 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5EA1 F0 00 00 00
  32+ 5EA5 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5EA9 FF 00 00 00
  33+ 5EAD 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5EB1 FF FF FF FF
  34+ 5EB5 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5EB9 FF FF FF FF
  35+ 5EBD FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5EC1 F0 F0 F0 F0
  36+ 5EC5 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5EC9 0F 0F 0F 0F
  37+ 5ECD 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5ED1 30 00 00 00
  38+ 5ED5
# file closed: ../include/vdp/logo-fonts.asm
  95  5ED5
  96  5ED5              ; include ROM/RAM switcher
  97  5ED5                  INCLUDE "../include/switcher/switcher-r11.asm"
# file opened: ../include/switcher/switcher-r11.asm
   1+ 5ED5              ; ------------------------------------------------------------------------------
   2+ 5ED5              ; LM80C - ROM/RAM SWITCHER - R1.1
   3+ 5ED5              ; ------------------------------------------------------------------------------
   4+ 5ED5              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5ED5              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5ED5              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5ED5              ; kind of warranty: you can use them at your own risk.
   8+ 5ED5              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5ED5              ; maintain the copyright notices, include this advice and the note to the
  10+ 5ED5              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5ED5              ; redistribuite them.
  12+ 5ED5              ; https://www.leonardomiliani.com
  13+ 5ED5              ;
  14+ 5ED5              ; Please support me by visiting the following links:
  15+ 5ED5              ; Main project page: https://www.leonardomiliani.com
  16+ 5ED5              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5ED5              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5ED5              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5ED5              ; ------------------------------------------------------------------------------
  20+ 5ED5              ; Code Revision:
  21+ 5ED5              ; R1.0   - 20200718 - First version
  22+ 5ED5              ; R1.1   - 20200827 - PIO settings now are part of the file
  23+ 5ED5              ;-------------------------------------------------------------------------------
  24+ 5ED5
  25+ 5ED5              TMP_FW_LOC:     equ     $8000           ; address from where to make a temporary copy of the FW
  26+ 5ED5              ;-------------------------------------------------------------------------------
  27+ 5ED5              ; THIS CODE WILL BE EXECUTED FROM RAM
  28+ 5ED5 3E FC        RAMRUN:         ld      A,%11111100     ; set ROM off and RAM on..
  29+ 5ED7 D3 01                        out     (PIO_DB),A      ; ...by setting bit #0 to 0 (and leave VRAM bank #0)
  30+ 5ED9 01 19 5F                     ld      BC,END_OF_FW    ; let's copy back FW into low RAM - bytes to copy
  31+ 5EDC 21 00 80                     ld      HL,TMP_FW_LOC   ; source address
  32+ 5EDF 11 00 00                     ld      DE,$0000        ; dest. address
  33+ 5EE2 ED B0                        ldir                    ; copy!
  34+ 5EE4 AF                           xor     A
  35+ 5EE5 D3 01                        out     (PIO_DB),A      ; all LEDs off - finished copying
  36+ 5EE7 C3 AE 02                     jp      INIT_HW         ; return control to old init (now into RAM)
  37+ 5EEA
  38+ 5EEA              ;-------------------------------------------------------------------------------
  39+ 5EEA              ; copy the whole contents of ROM into RAM then disable the first memory
  40+ 5EEA 3A 76 5F     ROM2RAM:        ld      A,(basicStarted); check if BASIC is already started
  41+ 5EED FE 59                        cp      'Y'             ; to see if this is a power-up
  42+ 5EEF 20 0F                        jr      NZ,CNTCP2RAM    ; no, continue copy to RAM
  43+ 5EF1                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  44+ 5EF1 3E CF                        ld      A,%11001111     ; set mode 3 ("control mode")
  45+ 5EF3 D3 03                        out     (PIO_CB),A      ; for PIO port B
  46+ 5EF5 AF                           xor     A               ; set LEDs off, RAM on, VRAM on bank #0
  47+ 5EF6 D3 01                        out     (PIO_DB),A      ; send settings to PIO register
  48+ 5EF8 D3 03                        out     (PIO_CB),A      ; set pins following register's status
  49+ 5EFA 21 A8 60                     ld      HL,TEMPSTACK    ; temporary stack
  50+ 5EFD C3 B1 02                     jp      INIT_HW2        ; jump to re-init HW
  51+ 5F00
  52+ 5F00                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  53+ 5F00 3E CF        CNTCP2RAM:      ld      A,%11001111     ; set mode 3 (mode control)
  54+ 5F02 D3 03                        out     (PIO_CB),A      ; for PIO port B
  55+ 5F04 3E FD                        ld      A,%11111101     ; set pin #0 as HIGH to enable ROM
  56+ 5F06 D3 01                        out     (PIO_DB),A      ; store the value into the internal register
  57+ 5F08 AF                           xor     A               ; set pins to OUTPUT
  58+ 5F09 D3 03                        out     (PIO_CB),A      ; for port B, activating the RAM
  59+ 5F0B 01 19 5F                     ld      BC,END_OF_FW    ; copy FW from ROM to high RAM
  60+ 5F0E 21 00 00                     ld      HL,$0000        ; source address
  61+ 5F11 11 00 80                     ld      DE,TMP_FW_LOC   ; dest. address
  62+ 5F14 ED B0                        ldir                    ; copy!
  63+ 5F16 C3 D5 DE                     jp      RAMRUN+TMP_FW_LOC; jump to execute code into RAM
  64+ 5F19
  65+ 5F19              ;-------------------------------------------------------------------------------
  66+ 5F19              END_OF_FW:      equ     $   ; this is the last cell of the firmware
# file closed: ../include/switcher/switcher-r11.asm
  98  5F19
  99  5F19              ; include workspace equates
 100  5F19                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5F19              ; ------------------------------------------------------------------------------
   2+ 5F19              ; LM80C 64K - WORKSPACE EQUATES - R1.1
   3+ 5F19              ; ------------------------------------------------------------------------------
   4+ 5F19              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F19              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F19              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F19              ; kind of warranty: you can use them at your own risk.
   8+ 5F19              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F19              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F19              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F19              ; redistribuite them.
  12+ 5F19              ; https://www.leonardomiliani.com
  13+ 5F19              ;
  14+ 5F19              ; Please support me by visiting the following links:
  15+ 5F19              ; Main project page: https://www.leonardomiliani.com
  16+ 5F19              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F19              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F19              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F19              ; ------------------------------------------------------------------------------
  20+ 5F19
  21+ 5F19              ; set starting of RAM based on computer model
  22+ 5F19                  IFDEF LM80C64K
  23+ 5F19              SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5F19                  ELSE
  25+ 5F19 ~            SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5F19                  ENDIF
  27+ 5F19
  28+ 5F19              ;-------------------------------------------------------------------------------
  29+ 5F19              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5F19              serRdPtr        equ     serInPtr+2
  31+ 5F19              serBufUsed      equ     serRdPtr+2
  32+ 5F19              basicStarted    equ     serBufUsed+1
  33+ 5F19              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5F19              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5F19
  36+ 5F19              ; BASIC WORK SPACE LOCATIONS
  37+ 5F19              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5F19              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5F19              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5F19              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5F19              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5F19              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5F19              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5F19              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5F19              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5F19              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5F19              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5F19              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5F19              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5F19              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5F19              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5F19              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5F19              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5F19              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5F19              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5F19              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5F19              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5F19              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5F19              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5F19              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5F19              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5F19              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5F19              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5F19              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5F19              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5F19              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5F19              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5F19              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5F19              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5F19              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5F19              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5F19              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5F19              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5F19              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5F19              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5F19              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5F19              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5F19              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5F19              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5F19              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5F19              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5F19              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5F19              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5F19              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5F19              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5F19              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5F19              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5F19              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5F19              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5F19              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5F19              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5F19              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5F19              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5F19              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5F19              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5F19              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5F19              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5F19              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5F19              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5F19              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5F19              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5F19              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5F19              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5F19              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5F19              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5F19              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5F19              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5F19              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5F19              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5F19              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5F19              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5F19              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5F19              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5F19              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5F19              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5F19              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5F19              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5F19              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5F19              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5F19              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5F19              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5F19              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5F19              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5F19              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5F19                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5F19              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5F19              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5F19              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5F19              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5F19              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5F19              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5F19              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5F19              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5F19              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5F19              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5F19              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5F19              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5F19                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5F19              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5F19              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5F19              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5F19              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5F19              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5F19                                                      ; from here there are the RAM locations that
 145+ 5F19                                                      ; are saved during SAVE
 146+ 5F19              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5F19              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5F19              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5F19              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5F19              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5F19              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5F19              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5F19              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5F19              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5F19              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5F19              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5F19              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5F19              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5F19
# file closed: ../include/workspace/workspace-r1.1.asm
 101  5F19
 102  5F19              ; END OF ASSEMBLY SOURCE
 103  5F19              ;-------------------------------------------------------------------------------
 104  5F19
# file closed: LM80C_64K-firmware-r1.11.asm

Value    Label
------ - -----------------------------------------------------------
0x6156   CHCSNDDTN
0x6154   CHBSNDDTN
0x5FC1   NMIFLG
0x5F00   CNTCP2RAM
0x5F19   END_OF_FW
0x5ED5   RAMRUN
0x8000   TMP_FW_LOC
0x4E06   CLCN323
0x4DDD   CLCN325
0x4DBB   CLCN322
0x4DB8   CLCN321
0x4DA4   CLCN32Z
0x4D7C   CLCN32T
0x4D77   DIV_32_16SB
0x4D74   DIV_32_16OF
0x4D63   DIV_32_16LP
0x4D4E   DV16_16_LP
0x4D3D   DIV_16_8LP
0x4D2E   DIV_8_8LOOP
0x4D1C   MU32_2
0x4D11   MUL_32L
0x4D02   EXMUL16
0x4CF9   MLP1
0x4CF2   MLP
0x4CD2 X TSTBIT
0x4C8B   BINIT
0x4C9E   CHKBIN
0x4C6D   BITOUT2
0x4C69   BITOUT
0x4C5B   ZEROSUP
0x4C55 X BIN2
0x4C3D   NOSUB7
0x4C41   HEXIT
0x4C1D   HEXLP
0x4C22   HEXLP1
0x4C4A   HXERR
0x4C2A   GETHEX
0x4C0D   ADD301
0x4BFD   ADD30
0x4BE7   HEX4
0x4BE5   HEX3
0x4BD6   HEX1
0x4BD8   HEX2
0x4B85   CNFRQN
0x4B56   RNDKTX
0x4B18   MSWROK
0x4B01   FRMTOK
0x4AAF   MSPTOK
0x4A99   INITFN
0x4A85 X INITDSK
0x4ACF   FRMTXT
0x4A78   CFINIT
0x4AB7   MSTTXT
0x4B32   DSKRNM
0x4A65   DSKFRM
0x60B6   TPHL
0x4A25   ABRTXT
0x4A09   ERASED
0x4A17   ABRTDS
0x4B64   CNFREQ
0x49FB   ERSTX
0x4B87   CHKFLNM
0x497D   SVERR
0x4976   SVEND
0x4982   TXTSVG
0x494F   SAVE1
0x4964   SAVEST
0x49AE   DOS_ERR
0x48AC   LDERR
0x48D7   GET3AR
0x48A5   LDEND
0x48B1   TXTLDG
0x49B5   CHK1AR
0x4B91   CHKFN1
0x4890   LOADST
0x48C2   LDSVPT
0x4865   CHKDOS
0x482D   PRTEND
0x4821   PRTK1
0x481E   OPNQT1
0x4806   CLSQT1
0x4862   CHKEY5
0x47EE   PTCHR1
0x485F   CHKEY4
0x47F6   CLSQT
0x47B9   PRTK3
0x47D1   PRTCHR
0x4808   OPNQT
0x47BC   CNTLTK
0x47A7   LDKEY
0x4856   CHKEY2
0x4820   PRTCKEY
0x4851   CHKEY1
0x4790 X PRTK2
0x478E   PRTK4
0x477A   CPKYEND
0x4772   CPKEY1
0x476A   CPKEY3
0x4763   CPKEY2
0x4753   CPKEY
0x4745   DECLN1
0x482F   SETREP
0x4715   KEYCH
0x477C   LSTKEYS
0x46F3   HLPERR
0x46D1   DIRMOD
0x4698   EXNRM
0x468A   ENCHB
0x465F   SRLCNT
0x4647   STRPAR
0x462A   SETPAR2
0x461B   BITS8
0x4610   BITS7
0x461F   SETPAR
0x4606   BITS6
0x45E3   SET_CTC
0x46B5   CTC_CFG
0x46C0   SCERR1
0x45D2   SET_PT
0x45B9   CKBPS
0x469F   SUP_BPS
0x45AD   SETSER
0x45A0   DEFSER
0x4555   CNTSER3
0x4538   CNTRX2
0x4543   CNTSER2
0x4505   SERLED
0x44FF   SRPT2
0x44DC   RPTRSSR
0x44CF   RSTSERS
0x4509   CNTSER
0x44CB   CHKZSER
0x44BC   SERVAR
0x46C4   SCERR
0x612C   SIOBFR
0x612B   STPBT
0x612A   PARBT
0x6129   DATABT
0x6127   BPS
0x6126   PRTNUM
0x4476   RPTCVBF
0x4467   RPCLTMB
0x445A   CNTVALY
0x442A   CNTCL7
0x4406   CNTCL6
0x43E2   CNTCL5
0x43C0   CNTCL4
0x439A   CNTCL3
0x4376   CNTCL2
0x4454   VALIDY
0x4352   CNTCL1
0x444F   VALIDX
0x4323   PLTCRL
0x4314   DLSZ
0x432C   ENDCRL
0x42E7   RPTCL1
0x42D4   RPTCRL
0x4330   DRWCRL
0x6130   DC
0x612E   YI
0x612C   XI
0x6128   YC
0x6126   XC
0x4263   DXGR
0x428C   ENDDRAW
0x4233   CNTDRW
0x4217   RPTDRW
0x4214   STRE2
0x4207   ER2
0x4D23   negHL
0x41E4   Y1GR
0x41BA   X1GR
0x4D20   absHL
0x446E   CLRVDBF
0x445F   CLRTMBF
0x6132   DX
0x6130   SY
0x612E   SX
0x612C   E2
0x612A   ER
0x6128   Y2
0x6126   X2
0x6120   Y1
0x611E   X1
0x4D2A   DIV_8_8
0x4124   PXLSET
0x4100   CNTPLT1
0x4120   NOGD
0x412C   XY2HL
0x409B   PNTEND
0x40A5   CTPOINT
0x4052   PAINT5
0x4021   PAINT3
0x4062   CHECKPY
0x400E   PAINT2
0x40DF   CNTPLOT
0x3FDE   MNPAINT
0x3FDB   PAINT1
0x3FDA   PAINT11
0x4061   CHECKPA
0x3FCC   PAINT0
0x4059   EXITPAI
0x3FBF   NXTLOOP
0x405D   EXITPA2
0x40B9   PNTRTN
0x447D   CLRPRM
0x612A   ORGSP
0x6129 X SPB
0x6128 X SPA
0x6126   PNT
0x3F51   GPCPCH1
0x3F47 X GPCPCHR
0x3F2D   GPNTCO1
0x3F23 X GPNTCOL
0x3F18   RPGPNT
0x3F03   GPNT
0x3EEE   CNTGPT2
0x3F6E   CKCOL
0x612C   TMPHL
0x612A   NUMCHR
0x6128   CHRPNT
0x6126   TMPADR
0x611E   MIXCOL
0x6120   TMPCLR
0x6124   GY
0x6122   GX
0x4496   GMERR
0x3E88   CHKG2M
0x3E82   CHKCLR0
0x3E4D   RPTLDCL
0x3E44   LOADCLR
0x3E58   SETBRCL
0x3E71   MIXCLRS
0x3E3D   CLREX2
0x3E34   CLRG2
0x3E2B   CLRG1
0x3E21   CLRTXT
0x3E24   CLRMC
0x3E7E   CHKCLR1
0x3D79   CKMAGN
0x3DC6   CHKSCAR
0x3D6E X SETVDP
0x3D87   SCVDP
0x3D4A   RPTPS
0x3D45 X DIR_PAU
0x3D1F X RECWRD
0x3CFB X ARET
0x3CD6   ATNTAB
0x3CCC   ATN1
0x3C85   SINTAB
0x3C69   SIN1
0x3C81   QUARTR
0x3C7D   HALFPI
0x3C16   RND2
0x3BFA   RND1
0x3C27   RNDTAB
0x5FB4   LSTRND
0x3C1F   RESEED
0x5F91   SEED
0x3BA6   SUMLP
0x3B9D   SMSER1
0x3B6D   EXPTAB
0x3B15   POWER2
0x3AF8   POWER1
0x3ADA   NEGAFT
0x3AA5   EXPTEN
0x3AB2   NOENED
0x3A87   SUPTLZ
0x3A93   DOEBIT
0x3A62   TRYAGN
0x3A53   DIGTXT
0x3AC8   POWERS
0x3A42   MAKNUM
0x3A1D   GTSIXD
0x3A26   INRNG
0x3A08   SIXDIG
0x3AB5   RNGTST
0x3AAF   JSTZER
0x39F9   SPCFST
0x6177   PBUFF
0x39A3   MULTEN
0x3998   ENDCON
0x39A2   SCALPL
0x398C   SCALMI
0x39CC   EDIGIT
0x3977   EXPLP
0x3989   CONEXP
0x3985   DPOINT
0x39AA   ADDIG
0x3961   MANLP
0x3959   CNVNUM
0x393A   MLDBLP
0x3912   DCBCDE
0x38DB   CMPFP
0x38A3   DETHLB
0x389C   INCHL
0x384F   RETREL
0x382F   MLSP10
0x3822   OVTST1
0x3827   OVTST2
0x3828   OVTST3
0x37D4   RESDIV
0x5F83   DIVSUP
0x37C1   DIVLP
0x5F8F   DIV4
0x5F84   DIV1
0x5F88   DIV2
0x5F8C   DIV3
0x378E   DIV10
0x3726   NOMADD
0x3715   MUL8LP
0x3738   BYTSFT
0x370C   MULT8
0x6184   MULVAL
0x3804   ADDEXP
0x36EA   FPMULT
0x36E1   MULLN2
0x39C1   RSCALE
0x3B8E   SUMSER
0x379C   DVBCDE
0x369C   LOGTAB
0x3698   UNITY
0x3686   SHRLP
0x3683   SHRITE
0x3676   SCALLP
0x6176   SGNRES
0x3647   FPROND
0x3636   RONDB
0x361A   NORMAL
0x3616   SAVEXP
0x3622   PNORM
0x35FD   CONPOS
0x368A   SHRT1
0x3635   RONDUP
0x3654   PLUCDE
0x35EF   MINCDE
0x3674   SCALE
0x38AC   SIGNS
0x35C9   NOSWAP
0x35AC   SUBCDE
0x35A6   SUBPHL
0x35AF   FPADD
0x3AC4   HALF
0x359D   ROUND
0x359A X ENDINK2
0x357F   CHKINK
0x357B   SRTINK
0x3591   ENDINK
0x3567   INKEY2
0x3558   CMP_A
0x3506   NOS3
0x34ED   NOS2
0x34DA   NOS1
0x34AA   SNDOVR
0x34FD   WRTSND
0x3475   SND1
0x3407   RPVOLCG
0x3413   VOLCH
0x336C   PKEPRMS
0x3356   SYSRET
0x3348   NOSYSPR
0x330A   NMIINT
0x3316   NMIVR1
0x3300   NMIEINT
0x32FC   NMI2
0x3307   NMIDINT
0x32DA   DISNMI
0x32EB   NM1
0x5F81   OTPORT
0x32A3   WAITLP
0x32A2   NOXOR
0x5F80   OUTSUB
0x32AC   SETIO
0x5FB8   INPSUB
0x5FB9   INPORT
0x326B   VAL2
0x326E   VAL3
0x3261   VAL1
0x3615   RESZER
0x322C   RSTSTR
0x3277   MIDNUM
0x31F8   LVINSTR
0x3202   CNTZIN
0x31A2   RP2INST
0x31CB   CNT1INS
0x317B   RPTINST
0x31ED   RZINSTR
0x6134   DY
0x316A   EMPTINS
0x612E   TF
0x612C   TP
0x612A   PT2
0x6126   PT
0x6124   ADRS2
0x6122   LNS2
0x6120   ADRS1
0x611E   LNS1
0x30F1   ALLFOL
0x30E9   MID1
0x4CAC   BINERR
0x30E7   RIGHT1
0x3272   LFRGNM
0x32C2   MAKINT
0x30C6 X GTFLNM
0x30B7   GETLEN
0x30A0   POPHL
0x3081   GETSTR
0x3078   TSALP
0x306E   SSTSA
0x3087   GSTRHL
0x2FDB   GRBARY
0x3012   SCNEND
0x2FBB   GNXARY
0x2FEC   STRADD
0x2FBC   ARRLP
0x2FA6   SMPVAR
0x2FE9   STPOOL
0x2F95   GRBLP
0x2F87   GARBLP
0x2F78   TESTOS
0x2F5C   GRBDON
0x2F4B   PRSLP
0x2F40   PRNUMS
0x2F21   TSTOPL
0x2F15   CRTSTE
0x2F06   QTSTLP
0x2EF0   MKTMST
0x3077   TOSTRA
0x2EF3   CRTMST
0x2F5A   TESTR
0x30DF   TOPOOL
0x2ED1   STR1
0x2EF9   SVSTAD
0x2EBA   CHEKFN
0x2E32   PASSA
0x385D   RETINT
0x2F84   GARBGE
0x2E1D   FRENUM
0x2DFC   ENDTMR
0x2DC8   FNDELP
0x2DE7   ENDDIM
0x2DA6   ZERARY
0x3932   MLDEBC
0x2D88   DEFSIZ
0x2D80   CRARLP
0x2D60   BSERR
0x2DC3   FINDEL
0x2D47   NXTARY
0x2D65   CREARY
0x2D33   FNDARY
0x2D0B   SCPTLP
0x2CE9   ZEROLP
0x2CFA   RETNUL
0x2CF7   RETADR
0x2CB8   FNTHR
0x2CC3   CFEVAL
0x2CAA   FNDVAR
0x3736   POPHRT
0x616E   FNARG
0x2D05   SBSCPT
0x2C90   NSCFOR
0x2D2D   ARLDSV
0x2C80   NOTSTR
0x2C65   ENDNAM
0x2C71   CHARTY
0x2C64   SVNAM2
0x2C4D   GTFNAM
0x60AC   LCRFLG
0x2C3A   DIMRET
0x3858   FLGREL
0x3851   FLGDIF
0x2C01   CMPSTR
0x3088   GSTRDE
0x3084   GSTRCU
0x2C19   CMPRES
0x2BD7   CMPLG1
0x2BD5   CMPLOG
0x2BBE   PXOR1
0x2BB1 X PAND1
0x2BB6   POR1
0x2E22   ACPASS
0x3887   FPBCDE
0x2B96   CNTLGC
0x2B7C   SGNEXP
0x2B73   GOFUNC
0x2B6B   FNVAL
0x2B2C   FRMEVL
0x2B24   RETNUM
0x386F   INVSGN
0x2B10   EVLPAR
0x2B3A   FNOFST
0x2E64   DOFN
0x2C23   EVNOT
0x2B18   MINUS
0x4C81   BINTFP
0x4C11   HEXTFP
0x2AED   NOTAMP
0x2B29   CONVAR
0x3877   STAKFP
0x2AAB   STKTHS
0x3037   CONCAT
0x2BC3   TSTRED
0x60ED   CUROPR
0x2A83   FOPRND
0x2A67   RLTLP
0x2A5A   EVAL3
0x60F8   NXTOPR
0x2A57   EVAL2
0x2AC2   OPRND
0x2A4E   EVAL1
0x2A47   OPNPAR
0x2A3D   TSTSTR
0x2A29   KILFOR
0x3895   LOADFP
0x35A0   ADDPHL
0x3884   PHLTFP
0x29F1   NEXT1
0x29E3   FANDT
0x29BA   EXTIG
0x299F   MORDT
0x394D   ASCTFP
0x2993   LTSTND
0x2F03   DTSTR
0x2979   ITMSEP
0x297C   STRENT
0x2988   INPBIN
0x29CA   FDTLP
0x295E   ANTVLU
0x2932   NEDMOR
0x2936   GTVLUS
0x292A   NXTITM
0x2905   NOPMPT
0x2EAC   IDTEST
0x60F5   READFG
0x28DA   BADINP
0x28C8   REDO
0x28B9   SPCLP
0x28B2   DOSPC
0x32BC   FNDNUM
0x2892   ZONELP
0x287F   CNTEND
0x2F44   PRS1
0x2EFF   CRTST
0x39EB   NUMASC
0x285C   PRNTST
0x28C1   NEXITM
0x2884   DOCOM
0x289D   DOTAB
0x2815   PRNTLP
0x280E   MRPRNT
0x27F7   IF0
0x2800   IF1
0x27EE   IFGO
0x27D2   ONGOLP
0x27D1   ONGO
0x32BF   GETINT
0x389E   FPTHL
0x38A1   DETHL4
0x2EDB   SAVSTR
0x30A2   BAKTMP
0x60E7   TMPSTR
0x27B2   MVSTPT
0x27AA   CRESTR
0x6172   FPREG
0x2783   LETSTR
0x27BB   LETNUM
0x2A3E   CHKTYP
0x2A4B   EVAL
0x60AD   TYPE
0x2C48   GETVAR
0x275A   NXTSTT
0x2757   NXTSTL
0x2750   NXTDTA
0x274B   RETLIN
0x270D   RUNLIN
0x26C6   STORED
0x267C   GTLNLP
0x2679   GETLN
0x38C1   CMPNUM
0x38EE   FPINT
0x6175   FPEXP
0x2658   DEPINT
0x2655 X POSINT
0x34B0   NOISUP
0x2652   FPSINT
0x264A   CHKLTR
0x5FBF   CHKSUM
0x263D X ACCSUM
0x261E   ERRINT
0x60FA   ERRLIN
0x260D   NOLIN
0x25F7   INPBRK
0x5FC2   BRKFLG
0x25E1   STALL
0x25EB   BRK
0x616A   NXTDAT
0x25CE   UPDATA
0x25CD   RESTNL
0x2590   ONJMP
0x258F   IFJMP
0x25FA   ENDPRG
0x2568   RUNCNT
0x2564   PUTFID
0x3846   TSTSGN
0x255B   SAVSTP
0x3892   BCDEFP
0x2A39   GETNUM
0x2A3C   TSTNUM
0x251F   FORFND
0x2503   FORSLP
0x60EF   LOOPST
0x24E8   CNTWTSP
0x24DC   WTSPC
0x24D4   LVSRLN
0x24C9   SRCLN1
0x24A6   OUTWRD
0x24B4   NXTLN
0x248D   LSTLP3
0x248A   LSTLP2
0x247E   LST07
0x247B   LST08
0x4040   PAINT4
0x2450   LST02
0x244D   LST05
0x2410   LST06
0x2439   LST03
0x2414   LSTNOT
0x23F5   LST01H
0x2459   LISTLP
0x24C8   SRCLN
0x24C2   SRCHLIN
0x23F2   LST01
0x2421   LSTALL
0x3CFC   GETINP
0x4CB1   MONOUT
0x239D   SND2VID
0x238A   INCLEN
0x60AB   CURPOS
0x5FBB   LWIDTH
0x238E   DINPOS
0x2F76   POPAF
0x235F   CHKSYN
0x2350   OUTIT
0x2353   OUTNBS
0x4CD9   OUTNCR
0x233C   PUTBUF
0x286B   ENDINP
0x2336   GMNCR
0x2341   PUTCTL
0x2301   PROCES
0x23AB   CLOTST
0x22D9   KILIN
0x22CE   DELCHR
0x22E8   MORINP
0x22D6   OTKLN
0x22C2   ECHDEL
0x5FBD   NULFLG
0x22AE   DODEL
0x2295   NXTCHR
0x228F   TSTREM
0x228C   SETLIT
0x226E   NOCHNG
0x2265   NOSPC
0x2276   MATCH
0x2254   NXTBYT
0x2244   GETNXT
0x2242   SEARCH
0x227A   RETNAD
0x2229   FNDWRD
0x22A5   ENDBUF
0x229E   CPYLIT
0x227E   MOVDIR
0x21FF   CRNCLP
0x60AE   DATFLG
0x5FC3   RINPUT
0x21DA   DOAGN
0x616C   FNRGNM
0x60F3   FORFLG
0x60FC   CONTAD
0x60D9   TMSTPT
0x60DB   TMSTPL
0x6166   VAREND
0x60EB   STRBOT
0x60F6   BRKLIN
0x21AB   INTVAR
0x217E   SRCHLP
0x604E   BASTXT
0x216F   FNDEND
0x2163   PTRLP
0x21A7   RUNFST
0x2156   MOVBUF
0x215E   SETPTR
0x2128   SFTPRG
0x2137   INEWLN
0x2727   ULERR
0x2120   LINFND
0x217B   SRCHLN
0x60F4   LSTBIN
0x2588   EXCUTE
0x21F6   CRUNCH
0x22DF   GETLIN
0x20CC   GETCMD
0x20BE   POPNOK
0x39D8   LINEIN
0x5FCA   HLPLN
0x20BA   PTLN
0x209D   ERRIN
0x2863   STTLIN
0x5FBE   CTLOFG
0x2077   NRERR
0x2074   IMERR
0x2071   TMERR
0x206E   OVERR
0x206B   UFERR
0x2068   DDERR
0x2065   NFERR
0x2062   DZERR
0x60F1   DATLIN
0x2059   DATSNR
0x2057   LDG1ND
0x2046   LDG1
0x2039   EXITGM
0x2079   ERROR
0x2034   OMERR
0x6168   ARREND
0x201C   CHKSTK
0x2011   MOVLP
0x200E   MOVSTR
0x2025   ENFMEM
0x200B   MOVUP
0x2002   INDFND
0x1FEC   LOKFOR
0x1FE8   BAKSTK
0x1FE2   BRKMSG
0x1FDD   OKMSG
0x1FDC   ZERBYT
0x1FD8   INMSG
0x1FD1   ERRMSG
0x1F4F X DEFFNKS
0x1F4D   AUTORP
0x22DF   TTYLIN
0x2673   FCERR
0x2B8F   POR
0x2B94   PXOR
0x2B8C   PAND
0x3600   BNORM
0x3AE8   POWER
0x373D   DINT
0x3745   MOD
0x379A   DIV
0x36E8   MULT
0x35AA   PSUB
0x39C7   PADD
0x1EDA   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x219B   NEW
0x4909   SAVE
0x486F   LOAD
0x269D   CLEAR
0x23C6   LIST
0x2624   CONT
0x2812   PRINT
0x4CB4   RESET
0x332A   SYS
0x3D12   WIDTH
0x3E91   GPRINT
0x32D0   NMI
0x46F8   KEY
0x3CFE   CLS
0x46DA   HELP
0x449B   SERIAL
0x3F81   PAINT
0x4290   CIRCLE
0x4157   DRAW
0x40C4   PLOT
0x3DD6   COLOR
0x3D3C   PAUSE
0x33E5   VOLUME
0x341E   SOUND
0x3392   LOCATE
0x3512   VREG
0x33C4   SREG
0x3387   VPOKE
0x3D25   DOKE
0x3382   POKE
0x2E37   DEF
0x328E   WAIT
0x4A2E   DISK
0x49CE   ERASE
0x4993   FILES
0x27C2   ON
0x3288   POUT
0x25F0   STOP
0x2753   REM
0x272C   RETURN
0x26FD   GOSUB
0x25B8   RESTOR
0x27E0   IF
0x26E9   RUN
0x270E   GOTO
0x2768   LET
0x2925   READ
0x2C43   DIM
0x28EB   INPUT
0x2751   DATA
0x29EE   NEXT
0x24EF   FOR
0x25F2   PEND
0x1E6C   WORDTB
0x1CDB   WORDS
0x3213   MID
0x3209   RIGHT
0x30E3   LEFT
0x4C4F   BIN
0x4BBE   HEX
0x30D3   CHR
0x30C2   ASC
0x3243   VAL
0x2ECB   STR
0x453F   RXEND
0x30B3   LEN
0x3113   INSTR
0x4071   POINT
0x354D   INKEY
0x3539   SSTAT
0x352E   VSTAT
0x335F   VPEEK
0x3D1A   DEEK
0x3358   PEEK
0x3CAF   ATN
0x3C9A   TAN
0x3D5B   SCREEN
0x3C39   SIN
0x3C33   COS
0x3B2D   EXP
0x36A9   LOG
0x3BBE   RND
0x3ADF   SQR
0x2E2F   POS
0x327C   INP
0x2E01   FRE
0x6128   PT1
0x5F7D   USR
0x386B   ABS_
0x3919   INT
0x2DEB   TMR
0x3855   SGN
0x1C97   FNCTAB
0x20BF   PRNTOK
0x4705   RESFN
0x1C0B   BRKRET
0x6056   STACK
0x1C20   BFREE
0x39E0   PRNTHL
0x1C17   BLNSPC
0x1C6F   DOSMSG
0x1BF8   SETTP1
0x219C   CLRPTR
0x5FC6   STRSPC
0x60AF   LSTRAM
0x1BC8   NODOS
0x2359   CPDEHL
0x205F   SNERR
0x2678   ATOH
0x1BA3   SETTOP
0x1B7F   MLOOP
0x61EB   STLOOK
0x1B91   TSTMEM
0x25A8   GETCHR
0x21DE   PROMPT
0x1C8C   MEMMSG
0x1B69   MSIZE
0x1B7C   MNOASK
0x342C   CTSNDC
0x6187   PROGST
0x2875   PRNTCRLF
0x21C1   CLREG
0x249C   FNDTOK
0x1FD1   INITBE
0x1EF8   INITAB
0x1B4E   SYSINIT
0x5F77   WRKSPC
0x2E23   ABPASS
0x2858   PRNTNB
0x265E   DEINT
0x1B47   CSTART
0x1C08   WARMST
0x1B40   STARTB
0x18F1 X ERRORS
0x1B2B   D8MSG
0x18EF X D8PTR
0x1B1F   D7MSG
0x18ED X D7PRT
0x1B0B   D6MSG
0x18EB X D6PTR
0x1B01   D5MSG
0x18E9 X D5PTR
0x1AFC   D4MSG
0x18E7 X D4PTR
0x1AF7   D3MSG
0x3948   NOMLAD
0x18E5 X D3PRT
0x1AE9   D2MSG
0x18E3 X D2PRT
0x1ADD   D1MSG
0x18E1 X D1PRT
0x1ACD   D0MSG
0x18DF X D0PTR
0x1ABC   NRMSG
0x18DD X NRPRT
0x1AA6   IMMSG
0x18DB X IMPRT
0x1A9C   HPMSG
0x18D9 X HPPTR
0x1A86   SOMSG
0x1A6D   SAMSG
0x18D5 X SAPTR
0x1A58   SCMSG
0x18D3 X SCPTR
0x18D1 X GMPRT
0x1A3C   BNMSG
0x18CF X BNPTR
0x1A31   HXMSG
0x18CD X HXPTR
0x1A21   MOMSG
0x18CB X MOPTR
0x18C9 X UFPTR
0x19FC   CNMSG
0x18C7 X CNPTR
0x19E1   STMSG
0x18C5 X STPTR
0x18D7 X SOPTR
0x19D1   LSMSG
0x18C3 X LSPTR
0x19BD   OSMSG
0x4D0F   MU32_1
0x18C1 X OSPTR
0x19AE   TMMSG
0x18BF X TMPTR
0x199A   IDMSG
0x18BD X IDPTR
0x1989   DZMSG
0x18BB X DZPTR
0x1974   DDMSG
0x18B9 X DDPTR
0x1966   BSMSG
0x18B7 X BSPTR
0x1957   ULMSG
0x4859   CHKEY3
0x18B5 X ULPTR
0x1949   OMMSG
0x18B3 X OMPTR
0x1940   OVMSG
0x18B1 X OVPTR
0x192A   FCMSG
0x18AF X FCPTR
0x191E   ODMSG
0x18AD X ODPTR
0x1909   RGMSG
0x18AB X RGPTR
0x1902   SNMSG
0x18A9 X SNPTR
0x18F1   NFMSG
0x18A7 X NFPTR
0x18A7   ERRTBL
0x003E   D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x28B7   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x1890   RSTIOBF
0x188F   CLRBUFF
0x1885 X CHK_NAM_LV
0x1884   CHK_C_CF
0x1A0B   UFMSG
0x4BF4   BYT2ASC
0x184B   PRN_WHEX1
0x1849 X PRN_WHEX
0x1860   BYTEHEX
0x1840   PRN_HEX1
0x183F X PRN_HEX
0x1836   PRNTSIZ
0x4DA8   CLCN32
0x1811   CHKNMVAL3
0x1870   CHK_NAM
0x1801   CHKNMVAL2
0x6120   DKNMPT
0x6051   BUFFER
0x17FB   CHKNMVAL1
0x6122   DKLNPT
0x17EC   CHKDSKVAL2
0x17EB   CHKDSKVALE
0x17D6   CHKDSKVAL1
0x17B5   CH0TO9E
0x17AD   CH0TO9
0x179C   RND8
0x176C   FNDFREDIR5
0x1778   FNDFREDIR3
0x174D   FNDFREDIR2
0x1743   FNDFREDIR1
0x171C   CHKSTNM7
0x1716 X CHKSTNM5
0x171F   FLNTEXS
0x1721   FLEXST
0x16F6   CHKSTNM6
0x16EC   CHKSTNM3
0x1701   CHKSTNM10
0x16CD   CHKSTNM8
0x16C7 X CHKSTNM2
0x16C1   CHKSTNM1
0x16AA   FIL_ERA2
0x169F   FIL_ERA1
0x16AD   FIL_ERA3
0x1677   FIL_ERA6
0x167E   FIL_ERA5
0x1622   FIL_ERASE
0x1616   LDFL5
0x161D   LDFLEX
0x15DF   LDFL3
0x15BF   LDFL2
0x15BB   LDFL1
0x159F   LDFL4
0x155A   LODFILE
0x154E   SAVFL12
0x1529 X SAVFL11
0x1555   SAVFLEXT
0x1509   SAVFL4
0x14F7   SAVFL10
0x14DB   SAVFL2
0x14B3   SAVFL9
0x1818   DE2HL
0x146A X SAVFL7
0x1466   SAVFL6
0x4D49   DIV_16_16
0x1453   SAVFL1
0x6164   PROGND
0x144B   SAVFL3
0x1723   FNDFREDIR
0x16B7   FILE_EXIST
0x181D   HL2DE
0x13F6   SAVFILE
0x13E2 X EXITFLS
0x1826   PRN16ASCII
0x4D04   MUL_U32
0x1822   PRN32ASCII
0x1393   LSTFILES7
0x137A X LSTFILES5
0x24D6   TSTSPC
0x25D3   TSTBRK
0x1361 X LSTFILES8
0x182C   PRN16ASCIX
0x1340   LSTFILES21
0x1343   LSTFILESPR
0x13E7   FILETP
0x1338   LSTFILES20
0x131C   LSTFILES3
0x1309   LSTFILES4
0x1303 X LSTFILES2
0x12FD   LSTFILES1
0x13A3   PNTSTATS
0x12D1   INPR1
0x2F41   PRS
0x17B8   CHKDSKVAL
0x12AF   LST_FILES
0x12A5   TLFLSTX
0x1294   ALFLSTXT
0x1289   TLSCTTX
0x127D   DSKNMTX
0x60B5   DOSER
0x0046   D7
0x126E   DOSVERSERR
0x0040   D4
0x126A   LODERR
0x0048   D8
0x1266   FLNTFND
0x003A   D1
0x1262   NAMERR
0x0044   D6
0x125E   DUPLERR
0x0042   D5
0x125A   DSKFULL
0x1275   RET_ERR
0x003C   D2
0x16B2   WRT_ERR
0x122B   DSK_RNM
0x1225   DOS_FT8
0x1212   DOS_FT9
0x121F   DOS_FT10
0x11F8   DOS_FTA
0x1223   DOS_FT7
0x236A   OUTC
0x1256   D2ERR
0x1781   RND_ID
0x11AF X DOS_FT5
0x1273   D1ERR
0x17F0   CHKNMVAL
0x1187   DOS_FT2
0x116B X DOS_FT0
0x116C   DOS_FT1
0x115E   DOS_FTC
0x4D5E   DIV_32_16
0x60B1   DOSBFR
0x189B   CLRDOSBF
0x1886   CLRIOBF
0x10F6   DSK_INIT
0x60D1   ENDMEM
0x60CF   SRTMEM
0x60CD   TPBF4
0x612A   RADIUS
0x60CB   TPBF3
0x60C9   TPBF2
0x60C7   TPBF1
0x60C5   RAM_PTR
0x60C3   LSB_SCT
0x60C1   MSB_SCT
0x60C0   SCT_SIZ
0x60BE   BYT_SIZ
0x60BC   NTR_NBR
0x60BA   DIR_SCT
0x60B6   DIR_STRT
0x60B6   TMPDBF
0x10F4   DSKDIRADR
0x10E5   DFSCT0
0x10D4   CF_WR_SEC2
0x10D2   CF_WR_SEC1
0x10E1   CF_WR_EXIT
0x10B9   CF_WR_SEC
0x10AC   CF_RD_SECT
0x10B6   CF_RD_EXIT
0x3AA3   OUTEXP
0x60B3   IOBUFF
0x10A0   CF_RD_CMD
0x108D   CF_RD_SEC
0x1081   CF_STANDBY
0x107E X CR_DV_ERR
0x107F   CR_DV_RD_E
0x60B8   DAT_STRT
0x1072   CR_DV_RD_1
0x136A   LSTFILES6
0x104B   CF_SETSTR
0x103E   CF_DAT_RDY
0x103C   RETERR
0x102F   CF_CMDRDY
0x106D   CR_DEV_RDY
0x101F   CF_NOP
0x1009   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0EE1   CNTFNK
0x0EF4   PRNTFNK
0x0EE7   PUTCHRBUF1
0x0ECD   LDFNKEYCHR
0x5FCE   FNKEYS
0x5FC8   LINEAT
0x1C2E   SIGNON
0x0EB4 X LVKBRDCHK
0x0EAD   PNT2VD
0x0EA0   PUTCHRBUF
0x0E8E   SNDKEYTOBFR
0x0EB5   PRNTFNKEY
0x0E86   CHKFNK
0x0F01   FNKEYSORD
0x0E80   CNTKBCK
0x0003   CTRLC
0x5FCD   AUTOKE
0x3603   BNRMLP
0x0E6D   SENDKEY
0x0E3E   SETNEWAUTO
0x0EB0   LVKBRDCHK2
0x5FCC   KEYDEL
0x0E4E   CHKAUTO
0x615D   KEYTMR
0x0E60   NEWKEY
0x0F89   KBMAP_ALT
0x0FC9   KBMAP_CTRL
0x0E05   CHKALT
0x0E0C   LOADMAP
0x0F49   KBMAP_SFT
0x0DFC   CHKCTRL
0x0F09   KBMAP
0x0DE8   CHKLN
0x615C   STATUSKEY
0x615B   LASTKEYPRSD
0x0DD0   ENDCTRLCK
0x0DCA   TESTCTRL
0x0DE6   FINDKEY
0x0DBD   TESTALT
0x6159   KBTMP
0x0DD4   NOKEYPRSD
0x0D8E   RPTKBDRD
0x0D8A   CHECKKBD
0x0D7C   CHECKCTRL
0x615F   CONTROLKEYS
0x0D6E   CHECKALT
0x0D2E   CNTCHKSND
0x0CF3   CHKSNDCH
0x0CC1   RPTWLCMBP
0x0CD7   NOBPDAT
0x0CBE   SENDSND
0x0CCF   WLCBPDAT
0x0CE4   WRTSNDREG
0x0CDF   SETSNDREG
0x0CA5   SNDREGCFG
0x0C91   CLRPSGREGS
0x0C8D   EMPTSNDBFR
0x0B3F X VDPMODESETEX2
0x0B37 X VDPMODESETMC
0x0B2F X VDPMODESET2
0x2F00   QTSTR
0x0B27 X VDPMODESET1
0x0B15   SENDCHRPTRNS
0x5615   CHRST88
0x0B13   NXTCHAR
0x4E15   CHRST68
0x0AF5   LDREGVLS
0x0B1F   VDPMODESET
0x0ADE   RSTVDPRAMREG
0x6152   CHASNDDTN
0x0ACF   EMPTVRM
0x0A64 X CNTNULL2
0x0A57   RPTNLLSRC2
0x4CEA   MUL16
0x0A32   ADDNEWLINE
0x09FF   SNDCHRTOBFR
0x09E6   CNTNULL
0x09D6   RPTNLLSRC
0x0A1E   PRNTRETURN
0x6124   TMPBFR4
0x6122   TMPBFR3
0x6120   SRTTXT
0x6120   TMPBFR2
0x09AC   RPTEMPTYROW
0x0991   WRITEBUF
0x0969   LOADNEXTCOL
0x6126   VIDEOBUFF
0x0957   SCROLLNXTRW
0x6150   VIDTMP2
0x614E   VIDTMP1
0x0936   EXITCURSOR_ON
0x0920   EXITCURSORDOWN
0x0900   EXITCURSORRGHT
0x08FA   CONTCRSRGT
0x08E7   CHCKYPOS2
0x08CC   EXITCURSORUP
0x08A3   CHKYPOS
0x0890   EXITCURSORLEFT
0x088D   CONTCRSLFT
0x087C   CHCKYPOS
0x0892   MVCRS2LFT
0x084D   MVBKSP
0x0860   LVBKSP
0x0020   SPC
0x0818 X ENDINSRT
0x0813   NXTINST
0x4CDF   CMP16
0x0802   CHKHL
0x6122   ENDTXT
0x0A3F   ENDOFLN
0x611E   CUR_POS
0x07E0   PUTCRSCHR
0x093F   SCROLLUP
0x07A0   SETCRSRY
0x1028   CF_BUSY
0x07A1   SETCSRCOORDS
0x07B3   EXITCHAR2VID
0x0777   NXTCPCK
0x076A   RPTCPCK
0x07C0   PLACEHOLDER
0x000A   LF
0x07E4   INSERTKEY
0x001A   INSRT
0x0903   CURSORDOWN
0x001F   CRSDN
0x08CE   CURSORRIGHT
0x001D   CRSRGT
0x08B5   CURSORUP
0x001E   CRSUP
0x0869   CURSORLEFT
0x001C   CRSLFT
0x0826   BACKSPACE
0x3DF3   CNTCKCL
0x0008   BKSP
0x09B8   CRGRETURN
0x000C   CS
0x0019   HOME
0x0739   CHRTBL
0x4D3A   DIV_16_8
0x0728   HL2XY
0x0A65   POS_TB_CRS_32
0x071A   CONT_POS_CURS
0x0A95   POS_TB_CRS_40
0x6119   LSTCSRSTA
0x6118   CRSR_STATE
0x06D2   MOVSHOWCRS
0x06E7   NEWCRSRCOORD
0x06FC   RSTCHRCRS
0x0705   LOAD_CRSR_POS
0x06BB   READ_VSTAT
0x06B0   WRITE_VREG
0x069B   WRITE_VIDEO_LOC
0x0686   READ_VIDEO_LOC
0x06CC   MOVCRS
0x6115   SCR_CUR_NX
0x0000   NLLCR
0x6116   SCR_CUR_NY
0x067C   ATHOME
0x06C2   POS_CURSOR
0x066F   CLEARVIDBUF
0x065C   RPTFLL1
0x064A   SNDCLRSET
0x0647   STARTEMPTY
0x0611   CLRG2PTNTBL
0x05F7   RPTEMPTYBUF
0x05F1   LDCOLSTOEMPTY
0x0630   EMPTYMC
0x0600   EMPTYG2
0x05CF   LVCKSPLK
0x05D1   DOCOLDRESET
0x0D39   READKBLN
0x05AD   SNDLOGPT
0x3660   COMPL
0x5E15   LOGOFONT
0x0CBB   NOBEEP
0x0CB5   WLCMBEEP
0x0579   RPT100
0x05BC   CHKSPCK
0x058F   BEEPOFF
0x0583   SETBEEP
0x054D   DEC_D
0x6163   DOS_EN
0x611E   TMPBFR1
0x053B   RPT104
0x0597   LOADLOGOCHRS
0x0533   RPT103
0x0B47   LM80CLOGO
0x051D   RPT102
0x0C98   RSTPSG
0x051A   RPT101
0x05B7   CLRTABLE
0x056C   ERASECLRTBL
0x0654   SETNAMETABLE
0x0AEB   SET_GFX_MODE2
0x6117   SCR_ORG_CHR
0x05D8   EMPTYVIDBUF
0x0457   LDCLRTBMD1
0x611C   FRGNDCLR
0x0666   SETVDPADRS
0x04E7   ENDVDPSET
0x6111   SCR_NAM_TB
0x5FBC   COMMAN
0x610F   SCR_SIZE_H
0x610E   SCR_SIZE_W
0x611D   BKGNDCLR
0x6114   SCR_CURS_Y
0x04DE   LDCLRTBEX2
0x6113   SCR_CURS_X
0x0AFF   LOADCHARSET
0x03F6 X TXTMD
0x04A5   EXG2MD
0x0482   MCMD
0x0460   G2MD
0x0420   G1MD
0x6110   SCR_MODE
0x0AD8   CLR_RAM_REG
0x0AE3   SET_GFX_MODE
0x0AC5   EMPTY_VRAM
0x0365   RESTMR
0x036A   CTCCONF
0x033C X SIO_B_SETS
0x0336   SIO_A_SETS
0x1B3D   WARM
0x1B3A   COLD
0x0938   CURSOR_OFF
0x031C   ECHO_CHAR
0x030F   CHECKWARM
0x02F8   CORW
0x0923   CURSOR_ON
0x03B4   MSGTXT2
0x0304   COLDSTART
0x5F76   basicStarted
0x0376   MSGTXT1
0x4CCA   INITST
0x03D1   initVDP
0x04F2   SHOW_LOGO
0x0C87   initPSG
0x0340   initCTC
0x02B1   INIT_HW2
0x60A8   TEMPSTACK
0x02AE   INIT_HW
0x0D4E   KEYBOARD
0x0CE9   MNGSNDS
0x07C1   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x60FE   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x5F73   serRdPtr
0x5F19   SERBUF_START
0x0214   NOTWRAP
0x0071   bufWrap
0x5F71   serInPtr
0x0208   NOTFULL
0x5F75   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x6162   SERBBITS
0x019D   SIO_RTS_OFF
0x6161   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x46C9   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x6160   SERIALS_EN
0x01CB   SIO_A_DI
0x1A47   GMMSG
0x0757   CHAR2VID
0x611A   PRNTVIDEO
0x6158   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x611B   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x615A   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x5F7A   NMIUSR
0x610B   CTC3IV
0x6108   CTC2IV
0x6105   CTC1IV
0x6102   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x5EEA   ROM2RAM
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0031   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
