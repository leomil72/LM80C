# file opened: LM80C_64K-firmware-r1.12.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C 64K - FIRMWARE - R1.12
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; set name for binary output file
  55  0000                  OUTPUT "LM80C-64K-firmware-r1.12.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C64K
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "1.12"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.02"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT dec     C
  68  0000                  DEFINE LM64K_NOP nop
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000              VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000 ~            VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 C3 2A 5F                     jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0004                  ELSE
  80+ 0004 ~                            jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 42 61                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 45 61                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 48 61                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 4B 61                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 BA 5F                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 ~                            defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 141+ 0090 ~                            defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 142+ 0090                  ELSE
 143+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 143+ 0094 43 20 36 34
 144+ 0098 4B 20 43 4F                  defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 144+ 009C 4C 4F 52 00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$31,$29,$00
 147+ 00AC 32 31 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 31  FWVER:          defm    "FW ","1.12",$20,"2021-03-10",$20,"11:39:22",$00
 152+ 00D4 2E 31 32 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 31 30 20 31
 152+ 00E4 31 3A 33 39
 152+ 00E8 3A 32 32 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 9A 61                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 9A 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 5B 61                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 98 61                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 5A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 57 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A A0 61                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 A0 61                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 F7 46                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A A0 61                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 A0 61                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A A1 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A A2 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A A1 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A A2 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A A1 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A A2 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A A1 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A A2 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A B5 5F                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A B1 5F     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE B1                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 59 5F                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 B1 5F     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 B5 5F                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A A0 61                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A B5 5F     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A B3 5F                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE B1                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 59 5F                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 B3 5F     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A B5 5F                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 B5 5F                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A A0 61                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A A0 61                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A B5 5F     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 5B 61                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 57 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 3E 61                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD C1 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD E9 0C                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A 3E 61                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 4E 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 E8 60     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 59 5F                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 B1 5F                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 B3 5F                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 B5 5F                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 A0 61                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 ~                            call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C2                  ENDIF
 474+ 02C2 CD 40 03                     call    initCTC         ; configure CTC, then...
 475+ 02C5 CD 87 0C                     call    initPSG         ; ...configure PSG
 476+ 02C8 CD F2 04                     call    SHOW_LOGO       ; show computer logo
 477+ 02CB 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02CD CD D1 03                     call    initVDP         ; set video display
 479+ 02D0 AF                           xor     A
 480+ 02D1 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D3 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D5 FB                           ei                      ; enable interrupts
 483+ 02D6                              ; print system messages
 484+ 02D6 AF                           xor     A               ; A=0 so...
 485+ 02D7 32 98 61                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DA 3C                           inc     A               ; A=1...
 487+ 02DB 32 5A 61                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02DE 21 76 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E1 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E4 3A B6 5F                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02E7 FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02E9 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EB 21 B4 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02EE CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F1 CD 23 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F4 AF                           xor     A
 497+ 02F5 32 5A 61                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02F8 CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FB E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 02FD FE 43                        cp      'C'             ; cold start?
 501+ 02FF 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0301 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0304 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0306 32 B6 5F                     ld      (basicStarted),A
 505+ 0309 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030C C3 68 1B                     jp      COLD            ; start BASIC COLD
 507+ 030F FE 57        CHECKWARM:      cp      'W'
 508+ 0311 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0313 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0316 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 511+ 0319 C3 6B 1B                     jp      WARM            ; start BASIC WARM
 512+ 031C
 513+ 031C              ;-------------------------------------------------------------------------------
 514+ 031C              ; send back char received through ch. A
 515+ 031C 32 5B 61     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 031F AF                           xor     A
 517+ 0320 32 98 61                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0323 F3                           di                      ; disable INTs
 519+ 0324 CD 57 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 0327 3E 0D                        ld      A,CR            ; then set a CR
 521+ 0329 32 5B 61                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032C CD 57 07                     call    CHAR2VID        ; and send it to screen
 523+ 032F FB                           ei                      ; re-enable INTs
 524+ 0330 3E 01                        ld      A,$01
 525+ 0332 32 5A 61                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0335 C9                           ret                     ; return to caller
 527+ 0336
 528+ 0336                  IFDEF LM80C
 529+ 0336 ~            ;-------------------------------------------------------------------------------
 530+ 0336 ~            ; little serial blink with LEDs
 531+ 0336 ~            HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 0336 ~                            ld      A,%11001111     ; set mode 3 (mode control)
 533+ 0336 ~                            out     (PIO_CB),A      ; for PIO port B
 534+ 0336 ~                            xor     A               ; set pins to OUTPUT
 535+ 0336 ~                            out     (PIO_CB),A      ; for port B
 536+ 0336 ~                            inc     A               ; LSB on
 537+ 0336 ~            LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0336 ~                            ld      E,$20           ; little delay
 539+ 0336 ~            DEC_E:          ld      B,$00           ; count to 256
 540+ 0336 ~            COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 0336 ~                            dec     E               ; decrement outer counter
 542+ 0336 ~                            jr      NZ,DEC_E        ; finish delay
 543+ 0336 ~                            sla     A               ; shift reg.A to left 1 bit
 544+ 0336 ~                            dec     C               ; next LED
 545+ 0336 ~                            jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0336 ~                            ret                     ; return to caller
 547+ 0336                  ENDIF
 548+ 0336              ;-------------------------------------------------------------------------------
 549+ 0336              ; Z80 SIO default settings for serial channels
 550+ 0336 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0337 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0338 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0339 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 033A 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 033B E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 033C 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 033D 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 033E 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 033F 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 0340                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 0340                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 0340                                                      ; for special conditions
 563+ 0340              ;------------------------------------------------------------------------------
 564+ 0340              ;               Z80 CTC SETTING UP
 565+ 0340              ;------------------------------------------------------------------------------
 566+ 0340              initCTC:
 567+ 0340 21 6A 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0343 11 42 61                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0346 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0349 ED B0                        ldir                    ; copy data
 571+ 034B              ;CH0, CH1, & CH2 disabled
 572+ 034B 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 034D                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 034D D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 034F D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 0351 D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0353              ;init CH3
 578+ 0353              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0353              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0353 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0355                                                      ; time constant follows; cont. operation; command word
 582+ 0355 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0357 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0359 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 035B 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 035D                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 035D                                                      ; so int vector is 01000xx00
 588+ 035D D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 035F                              ; reset cells of 100ths of a second counter
 590+ 035F AF                           xor     A               ; reset A
 591+ 0360 21 3E 61                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0363 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0365 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0366 23                           inc     HL              ; next cell
 595+ 0367 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0369 C9                           ret
 597+ 036A
 598+ 036A
 599+ 036A              ;------------------------------------------------------------------------------
 600+ 036A              ; jump table for CHx interrupts
 601+ 036A FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 036D FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 0370 FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0373 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0376
 606+ 0376
 607+ 0376              ;------------------------------------------------------------------------------
 608+ 0376              ; welcome messages
 609+ 0376              MSGTXT1:
 610+ 0376                  IFDEF LM80C64K
 611+ 0376 20 20 20 20                  defm    "    LM80C 64K Color Computer",CR
 611+ 037A 4C 4D 38 30
 611+ 037E 43 20 36 34
 611+ 0382 4B 20 43 6F
 611+ 0386 6C 6F 72 20
 611+ 038A 43 6F 6D 70
 611+ 038E 75 74 65 72
 611+ 0392 0D
 612+ 0393                  ELSE
 613+ 0393 ~                            defm    "      LM80C Color Computer",CR
 614+ 0393                  ENDIF
 615+ 0393 20 62 79 20                  defm    " by Leonardo Miliani * FW R","1.12",CR,0
 615+ 0397 4C 65 6F 6E
 615+ 039B 61 72 64 6F
 615+ 039F 20 4D 69 6C
 615+ 03A3 69 61 6E 69
 615+ 03A7 20 2A 20 46
 615+ 03AB 57 20 52 31
 615+ 03AF 2E 31 32 0D
 615+ 03B3 00
 616+ 03B4 0D           MSGTXT2:        defb    CR
 617+ 03B5 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03B9 43 3E 6F 6C
 617+ 03BD 64 20 6F 72
 617+ 03C1 20 3C 57 3E
 617+ 03C5 61 72 6D 20
 617+ 03C9 73 74 61 72
 617+ 03CD 74 3F 20 00
 618+ 03D1
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03D1
  75  03D1              ; incude the latest version of the VDP module
  76  03D1                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03D1              ; ------------------------------------------------------------------------------
   2+ 03D1              ; LM80C - VDP ROUTINES - 1.5
   3+ 03D1              ; ------------------------------------------------------------------------------
   4+ 03D1              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03D1              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03D1              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03D1              ; kind of warranty: you can use them at your own risk.
   8+ 03D1              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03D1              ; maintain the copyright notices, include this advice and the note to the
  10+ 03D1              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03D1              ; redistribuite them.
  12+ 03D1              ; https://www.leonardomiliani.com
  13+ 03D1              ;
  14+ 03D1              ; Please support me by visiting the following links:
  15+ 03D1              ; Main project page: https://www.leonardomiliani.com
  16+ 03D1              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03D1              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03D1              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03D1              ; ------------------------------------------------------------------------------
  20+ 03D1              ;
  21+ 03D1              ;------------------------------------------------------------------------------
  22+ 03D1              ; VDP INITIALISATION
  23+ 03D1              ; initialize VDP for a specific graphics mode
  24+ 03D1              ; INPUT: E -> contains the graphics mode:
  25+ 03D1              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03D1 D5           initVDP:        push    DE              ; store E
  27+ 03D2 CD C5 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03D5 CD E3 0A                     call    SET_GFX_MODE    ; load register settings
  29+ 03D8 CD D8 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03DB D1                           pop     DE              ; restore reg. E
  31+ 03DC AF                           xor     A               ; reset A
  32+ 03DD 47                           ld      B,A             ; reset B (will be used later)
  33+ 03DE 7B                           ld      A,E             ; move E into A
  34+ 03DF 32 50 61                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03E2 FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 03E4 CA 20 04                     jp      Z,G1MD          ; yes, jump over
  37+ 03E7 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 03E9 CA 60 04                     jp      Z,G2MD          ; yes, jump over
  39+ 03EC FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 03EE CA 82 04                     jp      Z,MCMD          ; yes, jump over
  41+ 03F1 FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 03F3 CA A5 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 03F6                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 03F6
  45+ 03F6              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 03F6
  47+ 03F6                              ; TEXT MODE (G0)
  48+ 03F6                              ; load charset
  49+ 03F6 60           TXTMD:          ld      H,B
  50+ 03F7 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 03F8 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 03FB                              ; set cursor & video overlay
  53+ 03FB AF                           xor     A               ; reset A
  54+ 03FC 32 53 61                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 03FF 32 54 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 0402 3E 05                        ld      A,$05           ; light blue
  57+ 0404 32 5D 61                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0407 3E 28                        ld      A,$28
  59+ 0409 32 4E 61                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 040C 3E 18                        ld      A,$18
  61+ 040E 32 4F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 0411 3E 1E                        ld      A,$1E
  63+ 0413 32 FC 5F                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0416 11 00 08                     ld      DE,$0800
  65+ 0419 ED 53 51 61                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 041D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 0420
  68+ 0420                              ; GRAPHICS 1 MODE (G1)
  69+ 0420                              ; load pattern table
  70+ 0420 68           G1MD:           ld      L,B
  71+ 0421 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 0422 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0425                              ; set cursor & video overlay
  74+ 0425 AF                           xor     A               ; position cursor
  75+ 0426 32 53 61                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0429 32 54 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 042C 3E 20                        ld      A,$20
  78+ 042E 32 4E 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 0431 3E 18                        ld      A,$18
  80+ 0433 32 4F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0436 3E 14                        ld      A,$14
  82+ 0438 32 FC 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 043B 11 00 18                     ld      DE,$1800
  84+ 043E ED 53 51 61                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 0442                              ; load color table
  86+ 0442 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0445 CD 66 06                     call    SETVDPADRS
  88+ 0448 3E 01                        ld      A,$01           ; foreground color...
  89+ 044A 32 5C 61                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 044D 3E 0F                        ld      A,$0F           ; background color...
  91+ 044F 32 5D 61                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 0452 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0454 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0456 0D                           dec     C              ; VDP data mode
  95+ 0457 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0459 00                           nop
  97+ 045A 00                           nop
  98+ 045B 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 045D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 0460
 101+ 0460                              ; GRAPHICS 2 MODE (G2)
 102+ 0460 AF           G2MD:           xor     A               ; position cursor
 103+ 0461 32 53 61                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0464 32 54 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0467 32 4E 61                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 046A 3C                           inc     A               ; black on...
 107+ 046B 32 5C 61                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 046E 3E 0F                        ld      A,$0F           ; white on...
 109+ 0470 32 5D 61                     ld      (BKGNDCLR),A    ; ...background
 110+ 0473 3E C0                        ld      A,$C0
 111+ 0475 32 4F 61                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0478 11 00 18                     ld      DE,$1800
 113+ 047B ED 53 51 61                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 047F C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 0482
 116+ 0482                              ; MULTICOLOR MODE (G3)
 117+ 0482 AF           MCMD:           xor     A               ; position cursor
 118+ 0483 32 53 61                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 0486 32 54 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 0489 3E 0F                        ld      A,$0F           ; white color for...
 121+ 048B 32 5D 61                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 048E 32 5C 61                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 0491 3E 40                        ld      A,$40
 124+ 0493 32 4E 61                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 0496 3E 30                        ld      A,$30
 126+ 0498 32 4F 61                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 049B 11 00 08                     ld      DE,$0800
 128+ 049E ED 53 51 61                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04A2 C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04A5
 131+ 04A5                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04A5              EXG2MD:         ; load pattern table
 133+ 04A5 60                           ld      H,B
 134+ 04A6 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04A7 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04AA                              ; set cursor & video overlay
 137+ 04AA AF                           xor     A               ; position cursor
 138+ 04AB 32 53 61                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04AE 32 54 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04B1 3E 20                        ld      A,$20
 141+ 04B3 32 4E 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04B6 3E 18                        ld      A,$18
 143+ 04B8 32 4F 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04BB 3E 14                        ld      A,$14
 145+ 04BD 32 FC 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04C0 11 00 38                     ld      DE,$3800
 147+ 04C3 ED 53 51 61                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04C7                               ; load color table
 149+ 04C7 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04CA CD 66 06                     call    SETVDPADRS
 151+ 04CD 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04CF 32 5C 61                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04D2 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04D4 32 5D 61                     ld      (BKGNDCLR),A    ; ...background
 155+ 04D7 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04D9 16 08                        ld      D,$08           ; 8 pages of
 157+ 04DB 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04DD 0D                           dec     C              ; VDP data mode
 159+ 04DE ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04E0 00                           nop
 161+ 04E1 00                           nop
 162+ 04E2 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 04E4 15                           dec     D               ; did we fill up all the cells?
 164+ 04E5 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 04E7                              ; LAST VDP SETTINGS
 166+ 04E7 CD 38 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 04EA CD D8 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 04ED AF                           xor     A
 169+ 04EE 32 57 61                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 04F1 C9                           ret                     ; return to caller
 171+ 04F2
 172+ 04F2
 173+ 04F2              ; show initial logo
 174+ 04F2 CD C5 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 04F5                              ; set VDP for G2 mode
 176+ 04F5 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 04F7 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 04FA CD EB 0A                     call    SET_GFX_MODE2   ; load register settings
 179+ 04FD 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 04FF ED 51                        out     (C),D           ; send data to VDP
 181+ 0501 ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0503                              ; set name table
 183+ 0503 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0506 CD 54 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0509 CD 6C 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 050C                              ; set colors for logo
 187+ 050C 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 050F CD 66 06                     call    SETVDPADRS
 189+ 0512 06 05                        ld      B,$05           ; 5 bands
 190+ 0514 21 B7 05                     ld      HL,CLRTABLE
 191+ 0517 0D                           dec     C              ; set VDP_DAT
 192+ 0518 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 051A 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 051C 7E                           ld      A,(HL)          ; load data
 195+ 051D ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 051F 00                           nop                     ; little delay
 197+ 0520 1D                           dec     E               ; decrement counter
 198+ 0521 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0523 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0525 15                           dec     D               ; decrement char band counter
 201+ 0526 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0528 23                           inc     HL              ; next pattern
 203+ 0529 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 052B                              ; set pattern table
 205+ 052B 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 052E 11 47 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0531 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0533 CD 97 05     RPT103:         call    LOADLOGOCHRS
 209+ 0536 13                           inc     DE              ; next logo pattern
 210+ 0537 10 FA                        djnz    RPT103
 211+ 0539 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 053B CD 97 05     RPT104:         call    LOADLOGOCHRS
 213+ 053E 13                           inc     DE              ; next logo pattern
 214+ 053F 10 FA                        djnz    RPT104
 215+ 0541                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0541 06 02                        ld      B,$02           ; two times
 217+ 0543 AF                           xor     A               ; reset A
 218+ 0544 57                           ld      D,A             ; 256 times
 219+ 0545 5F                           ld      E,A             ; x 256 times
 220+ 0546 32 5E 61                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0549                  IFDEF LM80C64K
 222+ 0549 3C                           inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 054A                  ENDIF
 224+ 054A 32 A3 61                     ld      (DOS_EN),A      ; DOS enabled
 225+ 054D 00           DEC_D:          nop                     ; does nothing...
 226+ 054E 00                           nop
 227+ 054F 00                           nop
 228+ 0550 00                           nop
 229+ 0551 00                           nop
 230+ 0552 00                           nop                     ; ...until here
 231+ 0553 1D                           dec     E               ; decrement E
 232+ 0554 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0556 7A                           ld      A,D
 234+ 0557 FE 40                        cp      $40             ; ...equal to 64
 235+ 0559 CC 83 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 055C 15                           dec     D
 237+ 055D 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 055F 3A 5E 61                     ld      A,(TMPBFR1)     ; sound state
 239+ 0562 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0564 C4 8F 05                     call    NZ,BEEPOFF      ; yes
 241+ 0567                  IFDEF LM80C64K
 242+ 0567 CD BC 05                     call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 056A                                                      ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 056A                  ENDIF
 245+ 056A 10 E1                        djnz    DEC_D           ; repeat
 246+ 056C              ERASECLRTBL:    ; erase color table
 247+ 056C 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 056E 16 0A                        ld      D,$0A           ; 10 pages
 249+ 0570 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 0572 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0575 CD 66 06                     call    SETVDPADRS      ; send address
 252+ 0578 0D                           dec     C              ; VDP address for passing data
 253+ 0579 ED 79        RPT100:         out     (C),A           ; send data
 254+ 057B 00                           nop
 255+ 057C 00                           nop                     ; little delay
 256+ 057D 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 057F 15                           dec     D
 258+ 0580 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 0582 C9                           ret                     ; return to caller
 260+ 0583
 261+ 0583              ; play a beep
 262+ 0583 3A 5E 61     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 0586 B7                           or      A               ; is it 0?
 264+ 0587 C0                           ret     NZ              ; no, exit
 265+ 0588 3C                           inc     A               ; flag to 1
 266+ 0589 32 5E 61                     ld      (TMPBFR1),A     ; set sound
 267+ 058C C3 B5 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 058F
 269+ 058F              ; beep off
 270+ 058F 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 0591 32 5E 61                     ld      (TMPBFR1),A     ; set flag
 272+ 0594 C3 BB 0C                     jp      NOBEEP          ; stop beep and return
 273+ 0597
 274+ 0597
 275+ 0597              ; used to load the chars that will compose the logo of the splash screen
 276+ 0597 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 0598 87                           add     A,A
 278+ 0599 87                           add     A,A
 279+ 059A 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 059B C5                           push    BC
 281+ 059C D5                           push    DE              ; store BC and DE
 282+ 059D E5                           push    HL              ; store VRAM address to write to
 283+ 059E 21 55 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05A1 5F                           ld      E,A
 285+ 05A2 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05A4 19                           add     HL,DE           ; get address of pattern data
 287+ 05A5 EB                           ex      DE,HL           ; move address into DE
 288+ 05A6 E1                           pop     HL              ; retrieve VRAM address
 289+ 05A7 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05A9 CD 66 06                     call    SETVDPADRS      ; set VDP address
 291+ 05AC 0D                           dec     C              ; VDP_DAT
 292+ 05AD 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05AE ED 79                        out     (C),A           ; and send to VRAM
 294+ 05B0 13                           inc     DE              ; next byte into RAM
 295+ 05B1 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05B2 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05B4 D1                           pop     DE
 298+ 05B5 C1                           pop     BC              ; retrieve BC & DE
 299+ 05B6 C9                           ret                     ; return to caller
 300+ 05B7              CLRTABLE:       equ $
 301+ 05B7 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05BB 1D
 302+ 05BC
 303+ 05BC
 304+ 05BC              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05BC              ; if yes, then disable DOS functions recovering RAM
 306+ 05BC F5           CHKSPCK:        push    AF
 307+ 05BD 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05BF CD 39 0D                     call    READKBLN        ; read row
 309+ 05C2 CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05C4 CA D1 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05C7 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05C9 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05CB AF                           xor     A               ; yes, so...
 314+ 05CC 32 A3 61                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05CF F1           LVCKSPLK:       pop     AF
 316+ 05D0 C9                           ret
 317+ 05D1 AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05D2 32 B6 5F                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05D5 C3 00 00                     jp      $0000           ; restart
 320+ 05D8
 321+ 05D8
 322+ 05D8              ; empty video buffer
 323+ 05D8 3A 50 61     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05DB FE 02                        cp      $02             ; is it G2 mode?
 325+ 05DD CA 00 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05E0 FE 03                        cp      $03             ; is it MC mode?
 327+ 05E2 CA 30 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 05E5 3A 4F 61                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 05E8 47                           ld      B,A             ; move rows into B
 330+ 05E9 AF                           xor     A               ; filling char is $00
 331+ 05EA 2A 51 61                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 05ED CD 66 06                     call    SETVDPADRS      ; send address to VDP
 333+ 05F0 0D                           dec     C              ; VDP address for passing data
 334+ 05F1 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 05F2 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 05F5 57                           ld      D,A             ; move A into D
 337+ 05F6 7B                           ld      A,E             ; recover filling char
 338+ 05F7 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 05F9 00                           nop
 340+ 05FA 15                           dec     D               ; decr. D
 341+ 05FB 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 05FD 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 05FF C9                           ret                     ; return to caller
 344+ 0600 2A 51 61     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0603 CD 54 06                     call    SETNAMETABLE    ; set name table
 346+ 0606 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0609 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 348+ 060C AF                           xor     A               ; empty pattern
 349+ 060D 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 060F 47                           ld      B,A             ; 256 bytes for page
 351+ 0610 0D                           dec     C              ; VDP data mode
 352+ 0611 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0613 00                           nop                     ; little delay
 354+ 0614 00                           nop
 355+ 0615 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0617 15                           dec     D               ; next page
 357+ 0618 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 061A 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 061D CD 66 06                     call    SETVDPADRS      ; send address to VDP
 360+ 0620 3A 5C 61                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0623 87                           add     A,A
 362+ 0624 87                           add     A,A
 363+ 0625 87                           add     A,A
 364+ 0626 87                           add     A,A             ; move to high nibble
 365+ 0627 57                           ld      D,A             ; store into D
 366+ 0628 3A 5D 61                     ld      A,(BKGNDCLR)    ; load background color
 367+ 062B B2                           or      D               ; combine with background color
 368+ 062C 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 062E 18 17                        jr      STARTEMPTY
 370+ 0630 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0633 CD 54 06                     call    SETNAMETABLE    ; set name table
 372+ 0636 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0639 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 374+ 063C 3A 5D 61                     ld      A,(BKGNDCLR)    ; load background
 375+ 063F 57                           ld      D,A             ; store into D
 376+ 0640 87                           add     A,A
 377+ 0641 87                           add     A,A
 378+ 0642 87                           add     A,A
 379+ 0643 87                           add     A,A             ; move to high nibble
 380+ 0644 B2                           or      D               ; set background color for high and low nibble
 381+ 0645 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0647 0D           STARTEMPTY:     dec     C              ; VDP address for passing data
 383+ 0648 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 064A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 064C 00                           nop                     ; wait a while
 386+ 064D 00                           nop
 387+ 064E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0650 15                           dec     D               ; have we filled all the pages?
 389+ 0651 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0653 C9                           ret                     ; return to caller
 391+ 0654
 392+ 0654              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0654 CD 66 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0657 0D                           dec     C              ; VDP address for passing data
 395+ 0658 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 065A AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 065B 47                           ld      B,A             ; reset B
 398+ 065C ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 065E 00                           nop
 400+ 065F 3C                           inc     A               ; increment # of name
 401+ 0660 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0662 15                           dec     D               ; did we fill all the pages?
 403+ 0663 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0665 C9                           ret                     ; return to caller
 405+ 0666
 406+ 0666              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0666 0E 31        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0668 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 066A ED 69                        out     (C),L           ; send low and...
 410+ 066C ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 066E C9                           ret                     ; return to caller
 412+ 066F
 413+ 066F              ; clear the video buffer and position the cursor at 0,0
 414+ 066F CD D8 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0672 AF                           xor     A               ; reset A
 416+ 0673 32 53 61                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0676 32 54 61                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 0679 C3 C2 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 067C
 420+ 067C              ; HOME: position the cursor at coords. 0,0
 421+ 067C AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 067D 32 56 61                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 0680 32 55 61                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 0683 C3 CC 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 0686
 426+ 0686              ; load the char or byte at the VRAM position set by HL
 427+ 0686              ; value is returned into A
 428+ 0686 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 0687 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 430+ 0689 44                           ld      B,H
 431+ 068A CB B8                        res     7,B
 432+ 068C CB B0                        res     6,B
 433+ 068E ED 69                        out     (C),L           ; low byte then...
 434+ 0690 ED 41                        out     (C),B           ; high byte
 435+ 0692 0D                           dec     C              ; VDP data mode
 436+ 0693 00                           nop               ; added to compensate shorter instruction
 437+ 0694 00                           nop                     ; wait...
 438+ 0695 00                           nop                     ; ...a while
 439+ 0696 00                           nop
 440+ 0697 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 0699 C1                           pop     BC              ; restore BC
 442+ 069A C9                           ret                     ; return to caller
 443+ 069B
 444+ 069B              ; write a byte at the VRAM position pointed by HL
 445+ 069B              ; value is in A
 446+ 069B C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 069C 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 448+ 069E 44                           ld      B,H             ; copy H into B
 449+ 069F CB B8                        res     7,B
 450+ 06A1 CB F0                        set     6,B             ; write to VRAM
 451+ 06A3 ED 69                        out     (C),L           ; low byte then...
 452+ 06A5 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06A7 0D                           dec     C              ; VDP data mode
 454+ 06A8 00                           nop               ; added to compensate shorter instruction
 455+ 06A9 00                           nop                     ; wait...
 456+ 06AA 00                           nop                     ; ...a while
 457+ 06AB 00                           nop
 458+ 06AC ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06AE C1                           pop     BC              ; restore BC
 460+ 06AF C9                           ret                     ; return to caller
 461+ 06B0
 462+ 06B0              ; write a value into a specific VDP register
 463+ 06B0              ; value is in E, register is in A
 464+ 06B0 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06B1 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06B3 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06B5 ED 59                        out     (C),E           ; send data to VDP
 468+ 06B7 ED 79                        out     (C),A           ; select the destination register
 469+ 06B9 C1                           pop     BC              ; restore BC
 470+ 06BA C9                           ret                     ; return to caller
 471+ 06BB
 472+ 06BB              ; read VDP status register and return value into A
 473+ 06BB C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06BC 0E 31                        ld      C,VDP_SET       ; VDP register access
 475+ 06BE ED 78                        in      A,(C)           ; read status register
 476+ 06C0 C1                           pop     BC              ; restore BC
 477+ 06C1 C9                           ret                     ; return to caller
 478+ 06C2
 479+ 06C2              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06C2 CD 05 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06C5 CD 86 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06C8 32 57 61                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06CB C9                           ret
 484+ 06CC
 485+ 06CC              ; move cursor to new X,Y coordinates
 486+ 06CC CD FC 06     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06CF CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06D2 CD C2 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06D5 3A 58 61                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06D8 A7                           and     A               ; is cursor off?
 491+ 06D9 C8                           ret     Z               ; yes, return
 492+ 06DA 3A 59 61                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06DD F6 20                        or      $20             ; ...set cursor on
 494+ 06DF 32 59 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 06E2 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 06E4 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 06E7
 498+ 06E7
 499+ 06E7              ; set new cursor's coordinates
 500+ 06E7 3A 55 61     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 06EA 32 53 61                     ld      (SCR_CURS_X),A  ; write new X
 502+ 06ED 3A 56 61                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 06F0 32 54 61                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 06F3 3E FF                        ld      A,$FF           ; delete new values
 505+ 06F5 32 55 61                     ld      (SCR_CUR_NX),A  ; of X
 506+ 06F8 32 56 61                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 06FB C9                           ret
 508+ 06FC
 509+ 06FC              ; recover char under the cursor and prints it onto the screen
 510+ 06FC CD 05 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 06FF 3A 57 61                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0702 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0705
 514+ 0705              ; retrieve cursor position from either current coordinates or next place
 515+ 0705              ; return address position into HL
 516+ 0705 3A 54 61     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0708 6F                           ld      L,A             ; move it into reg.L
 518+ 0709 AF                           xor     A               ; reset A
 519+ 070A 67                           ld      H,A             ; reset H
 520+ 070B 47                           ld      B,A             ; reset B
 521+ 070C 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 070D 11 95 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0710 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0713 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0715 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0717 11 65 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 071A 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 071B 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 071C 23                           inc     HL
 530+ 071D 56                           ld      D,(HL)
 531+ 071E 2A 51 61                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0721 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0722 3A 53 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0725 4F                           ld      C,A             ; transfer A into C
 535+ 0726 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0727 C9                           ret
 537+ 0728
 538+ 0728              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0728              ; return them into L,A for X,Y
 540+ 0728 D5           HL2XY:          push    DE              ; store DE
 541+ 0729 ED 5B 51 61                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 072D AF                           xor     A               ; clear Carry
 543+ 072E ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0730 D1                           pop     DE
 545+ 0731 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0734 4F                           ld      C,A             ; move it into C
 547+ 0735 CD 7A 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0738 C9                           ret                     ; return to caller
 549+ 0739
 550+ 0739              ;-------------------------------------------------------------------------------
 551+ 0739              ; char table for jumps
 552+ 0739 19           CHRTBL:         defb    HOME
 553+ 073A 7C 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 073C
 555+ 073C 0C                           defb    CS
 556+ 073D 6F 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 073F
 558+ 073F 0D                           defb    CR
 559+ 0740 B8 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0742
 561+ 0742 08                           defb    BKSP
 562+ 0743 26 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0745
 564+ 0745 1C                           defb    CRSLFT
 565+ 0746 69 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0748
 567+ 0748 1E                           defb    CRSUP
 568+ 0749 B5 08                        defw    CURSORUP        ; move cursor up
 569+ 074B
 570+ 074B 1D                           defb    CRSRGT
 571+ 074C CE 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 074E
 573+ 074E 1F                           defb    CRSDN
 574+ 074F 03 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0751
 576+ 0751 1A                           defb    INSRT
 577+ 0752 E4 07                        defw    INSERTKEY       ; insert a space
 578+ 0754
 579+ 0754 0A                           defb    LF
 580+ 0755 C0 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0757
 582+ 0757              ; send current char to video buffer
 583+ 0757 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0758 C5                           push    BC              ; store BC
 585+ 0759 D5                           push    DE              ; store DE
 586+ 075A E5                           push    HL              ; store HL
 587+ 075B 3A 58 61                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 075E F5                           push    AF              ; into stack
 589+ 075F CD 38 09                     call    CURSOR_OFF      ; cursor off
 590+ 0762 3A 5B 61                     ld      A,(CHR4VID)     ; recover char
 591+ 0765 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0767 21 39 07                     ld      HL,CHRTBL       ; address of key table
 593+ 076A BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 076B 23                           inc     HL              ; beginning of sub-routine address
 595+ 076C 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 076E 5E                           ld      E,(HL)          ; load addres into DE
 597+ 076F 23                           inc     HL
 598+ 0770 56                           ld      D,(HL)
 599+ 0771 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0772 11 B3 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0775 D5                           push    DE              ; store into stack
 602+ 0776 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0777 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0778 23                           inc     HL              ; ...to the next char code
 605+ 0779 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 077B                              ; it'a not a special char, just print it
 607+ 077B CD 05 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 077E 3A 5B 61                     ld      A,(CHR4VID)     ; recover char to print
 609+ 0781 CD 9B 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 0784 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 0787 5F                           ld      E,A             ; store cursor Y into E
 612+ 0788 3A 53 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 078B 3C                           inc     A               ; move 1 step to right
 614+ 078C 21 4E 61                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 078F BE                           cp      (HL)            ; have we reached the most right position?
 616+ 0790 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 0792 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 0793 7B                           ld      A,E             ; move cursor Y into A
 619+ 0794 21 4F 61                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 0797 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 0798 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 079A D5                           push    DE
 623+ 079B CD 3F 09                     call    SCROLLUP        ; scroll screen up
 624+ 079E D1                           pop     DE
 625+ 079F 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07A0 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07A1 32 53 61     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07A4 7B                           ld      A,E             ; recover Y
 629+ 07A5 32 54 61                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07A8 CD C2 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07AB 3A 3E 61                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07AE E6 20                        and     $20             ; check cursor state
 633+ 07B0 32 59 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07B3 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07B4 32 5B 61                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07B7 F1                           pop     AF              ; recover cursor state
 637+ 07B8 A7                           and     A               ; was it off (A=0)?
 638+ 07B9 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07BC E1                           pop     HL              ; restore HL
 640+ 07BD D1                           pop     DE              ; restore DE
 641+ 07BE C1                           pop     BC              ; restore BC
 642+ 07BF F1                           pop     AF              ; restore AF
 643+ 07C0 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07C1
 645+ 07C1              ; flash the cursor at the current position
 646+ 07C1              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07C1 3A 58 61     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07C4 A7                           and     A               ; cursor off (A=0)?
 649+ 07C5 C8                           ret     Z               ; yes, return
 650+ 07C6 3A 3E 61                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07C9 E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07CB 21 59 61                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07CE BE                           cp      (HL)            ; compare current state with last state
 654+ 07CF C8                           ret     Z               ; same state, no change required - exit
 655+ 07D0 77                           ld      (HL),A          ; save new state
 656+ 07D1 F5                           push    AF              ; store A (keep state for later use)
 657+ 07D2 CD 05 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07D5 F1                           pop     AF              ; recover current state
 659+ 07D6 06 FF                        ld      B,$FF           ; cursor char
 660+ 07D8 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07DA 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07DC 3A 57 61                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 07DF 47                           ld      B,A             ; move char into B
 664+ 07E0 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 07E1 C3 9B 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 07E4
 667+ 07E4
 668+ 07E4              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 07E4              ; 1 cell straight
 670+ 07E4 CD FC 06     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 07E7 CD 05 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 07EA 22 5E 61                     ld      (CUR_POS),HL    ; store it
 673+ 07ED CD 3F 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 07F0                                                      ; DE is the address of the bottom right cell of the screen
 675+ 07F0 22 62 61                     ld      (ENDTXT),HL     ; store it
 676+ 07F3 ED 4B 5E 61                  ld      BC,(CUR_POS)    ; load starting address
 677+ 07F7 AF                           xor     A
 678+ 07F8 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 07FA CA D2 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 07FD 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 07FF 2A 62 61                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0802 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0803 E5                           push    HL
 684+ 0804 CD 1F 4D                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0807 E1                           pop     HL
 686+ 0808 D2 13 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 080B CD 86 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 080E 23                           inc     HL              ; next cell
 689+ 080F CD 9B 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0812 2B                           dec     HL              ; decrement to old position
 691+ 0813 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0814 79                           ld      A,C
 693+ 0815 B0                           or      B               ; finished?
 694+ 0816 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0818 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 081A 2A 5E 61                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 081D 32 57 61                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0820 CD 9B 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0823 C3 D2 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0826
 701+ 0826              ; delete the char at the left of the cursor
 702+ 0826 CD FC 06     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 0829 2A 51 61                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 082C 44 4D                        ld      BC,HL           ; store into BC
 705+ 082E CD 05 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0831 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0833 AF                           xor     A               ; reset Carry
 708+ 0834 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0836 CA 60 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 0839 ED 53 5E 61                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 083D CD 3F 0A                     call    ENDOFLN         ; check end of text
 712+ 0840 ED 5B 5E 61                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0844 AF                           xor     A               ; reset Carry
 714+ 0845 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0847 CA 60 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 084A 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 084C EB                           ex      DE,HL           ; copy starting position into HL
 718+ 084D CD 86 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0850 2B                           dec     HL              ; 1 position to left
 720+ 0851 CD 9B 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0854 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0855 23                           inc     HL
 723+ 0856 0B                           dec     BC              ; decrement # of chars
 724+ 0857 79                           ld      A,C
 725+ 0858 B0                           or      B               ; 0 chars?
 726+ 0859 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 085B 2B                           dec     HL
 728+ 085C AF                           xor     A
 729+ 085D CD 9B 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0860 CD 92 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0863 CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0866 C3 D2 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 0869
 734+ 0869
 735+ 0869              ; move cursor to left
 736+ 0869 F5           CURSORLEFT:     push    AF              ; store A
 737+ 086A 3A 53 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 086D A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 086E 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0870 3D                           dec     A               ; no, decrement X
 741+ 0871 32 55 61                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0874 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0877 32 56 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 087A 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 087C 3A 54 61     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 087F A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 0880 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 0882 3D                           dec     A               ; no, decrement Y
 749+ 0883 32 56 61                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 0886 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 0889 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 088A 32 55 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 088D CD CC 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 0890 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 0891 C9                           ret                     ; return to caller
 756+ 0892
 757+ 0892              ; move cursor 1 position to the left
 758+ 0892 3A 53 61     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 0895 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 0896 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 0898 3D                           dec     A               ; no, decrement X
 762+ 0899 32 55 61                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 089C 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 089F 32 56 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08A2 C9                           ret                     ; go on moving cursor
 766+ 08A3 3A 54 61     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08A6 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08A7 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08A9 3D                           dec     A               ; no, decrement Y
 770+ 08AA 32 56 61                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08AD 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08B0 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08B1 32 55 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08B4 C9                           ret                     ; return to caller
 775+ 08B5
 776+ 08B5              ; move cursor up
 777+ 08B5 F5           CURSORUP:       push    AF              ; store A
 778+ 08B6 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08B9 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08BA 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08BC 3D                           dec     A               ; no, decrement Y
 782+ 08BD 32 56 61                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08C0 3A 53 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08C3 32 55 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08C6 CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08C9 CD CC 06                     call    MOVCRS          ; move cursor into new position
 787+ 08CC F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08CD C9                           ret                     ; return to caller
 789+ 08CE
 790+ 08CE
 791+ 08CE              ; move cursor to right
 792+ 08CE F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08CF C5                           push    BC              ; store B
 794+ 08D0 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08D3 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08D4 47                           ld      B,A             ; move A into B
 797+ 08D5 3A 53 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08D8 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08D9 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08DB 3C                           inc     A               ; no, so increment X
 801+ 08DC 32 55 61                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 08DF 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 08E2 32 56 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 08E5 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 08E7 3A 4F 61     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 08EA 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 08EB 47                           ld      B,A             ; move bottom into B
 808+ 08EC 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 08EF B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 08F0 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 08F2 3C                           inc     A               ; no, increment Y
 812+ 08F3 32 56 61                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 08F6 AF                           xor     A               ; move cursor to top left
 814+ 08F7 32 55 61                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 08FA CD FC 06     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 08FD CD CC 06                     call    MOVCRS          ; move cursor into new position
 817+ 0900 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0901 F1                           pop     AF              ; restore A
 819+ 0902 C9                           ret                     ; return to caller
 820+ 0903
 821+ 0903
 822+ 0903              ; move cursor down
 823+ 0903 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0904 C5                           push    BC              ; store B
 825+ 0905 3A 4F 61                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0908 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 0909 47                           ld      B,A             ; move X into B
 828+ 090A 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 090D B8                           cp      B               ; is current cursor position < 23?
 830+ 090E 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0910 3C                           inc     A               ; yes, increment Y
 832+ 0911 32 56 61                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0914 3A 53 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0917 32 55 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 091A CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 091D CD CC 06                     call    MOVCRS          ; move cursor into new position
 837+ 0920 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0921 F1                           pop     AF              ; retrieve A
 839+ 0922 C9                           ret                     ; return to caller
 840+ 0923
 841+ 0923
 842+ 0923              ; set cursor on (visible on screen)
 843+ 0923 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0924 3A 58 61                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0927 B7                           or      A               ; is it on?
 846+ 0928 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 092A 3A 4F 61                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 092D FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 092F 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0931 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0933 32 58 61                     ld      (CRSR_STATE),A  ; set state
 852+ 0936 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0937 C9                           ret                     ; return to caller
 854+ 0938
 855+ 0938              ; set cursor off (invisible on screen)
 856+ 0938 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 0939 AF                           xor     A               ; cursor state OFF
 858+ 093A 32 58 61                     ld      (CRSR_STATE),A  ; set state
 859+ 093D F1                           pop     AF              ; restore AF
 860+ 093E C9                           ret
 861+ 093F
 862+ 093F              ; scroll the screen 1 row up
 863+ 093F AF           SCROLLUP:       xor     A               ; reset A
 864+ 0940 57                           ld      D,A             ; reset D
 865+ 0941 32 5A 61                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0944 2A 51 61                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0947 22 8E 61                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 094A 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 094D 5F                           ld      E,A             ; move width into E
 870+ 094E 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 094F 22 90 61                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0952 3A 4F 61                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0955 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0956 47                           ld      B,A             ; move # of rows into B
 875+ 0957 3A 4E 61     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 095A 5F                           ld      E,A             ; move width into E
 877+ 095B 2A 90 61                     ld      HL,(VIDTMP2)    ; load source address
 878+ 095E 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0960 ED 69                        out     (C),L           ; low byte of source
 880+ 0962 ED 61                        out     (C),H           ; high byte of source
 881+ 0964 21 66 61                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0967 0D                           dec     C              ; VDP data mode
 883+ 0968 00                           nop               ; added to compensate shorter instruction
 884+ 0969 ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 096B 77                           ld      (HL),A          ; store char
 886+ 096C 23                           inc     HL              ; next cell of the buffer
 887+ 096D 1D                           dec     E               ; count the chars to be read
 888+ 096E 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0970 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0973 5F                           ld      E,A             ; move # of rows into E
 891+ 0974 16 00                        ld      D,$00           ; reset D
 892+ 0976 2A 8E 61                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 0979 E5                           push    HL              ; store HL
 894+ 097A 2A 90 61                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 097D 22 8E 61                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 0980 19                           add     HL,DE           ; address of new
 897+ 0981 22 90 61                     ld      (VIDTMP2),HL    ; source row
 898+ 0984 E1                           pop     HL              ; restore address of current destination row
 899+ 0985 CB F4                        set     6,H             ; writing mode
 900+ 0987 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 901+ 0989 ED 69                        out     (C),L           ; low byte
 902+ 098B ED 61                        out     (C),H           ; high byte of address
 903+ 098D 21 66 61                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 0990 0D                           dec     C              ; VDP data mode
 905+ 0991 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 0992 ED 79                        out     (C),A           ; send char
 907+ 0994 23                           inc     HL              ; increment buffer index
 908+ 0995 1D                           dec     E               ; next row
 909+ 0996 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 0998 10 BD                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 099A 3A 4E 61                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 099D 47                           ld      B,A             ; cells to empty into B
 913+ 099E AF                           xor     A               ; null char
 914+ 099F 0E 31                        ld      C,VDP_SET       ; VDP set mode
 915+ 09A1 2A 8E 61                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09A4 CB F4                        set     6,H             ; writing mode
 917+ 09A6 ED 69                        out     (C),L           ; low byte then..
 918+ 09A8 ED 61                        out     (C),H           ; high byte of address
 919+ 09AA 0D                           dec     C              ; VDP data mode
 920+ 09AB 00                           nop               ; delay
 921+ 09AC ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09AE 00                           nop                     ; delay
 923+ 09AF 00                           nop
 924+ 09B0 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09B2 3E 01                        ld      A,$01
 926+ 09B4 32 5A 61                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09B7 C9                           ret                     ; return to caller
 928+ 09B8
 929+ 09B8              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09B8              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09B8              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09B8              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09B8              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09B8              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09B8              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09B8              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09B8 3A 58 61                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09BB 32 64 61                     ld      (TMPBFR4),A     ; store status
 939+ 09BE A7                           and     A               ; is cursor on?
 940+ 09BF C4 38 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09C2 CD FC 06                     call    RSTCHRCRS       ; restore char under it
 942+ 09C5                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09C5 3A 98 61                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09C8 A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09C9 CA 1E 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09CC                              ; first part: look for the beginning of the text line on screen
 947+ 09CC CD 05 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09CF 22 5E 61                     ld      (CUR_POS),HL    ; store it
 949+ 09D2 ED 5B 51 61                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09D6 E5           RPTNLLSRC:      push    HL
 951+ 09D7 CD 1F 4D                     call    CMP16           ; check if at "home"
 952+ 09DA E1                           pop     HL
 953+ 09DB CA E6 09                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 09DE 2B                           dec     HL              ; go 1 step back
 955+ 09DF CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 09E2 A7                           and     A               ; is it $00 (null char)?
 957+ 09E3 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 09E5 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 09E6                              ; second part: look for the ending of the text on screen
 960+ 09E6 22 60 61     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 09E9 CD 3F 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 09EC 22 62 61                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 09EF ED 5B 60 61                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 09F3 A7                           and     A               ; clear Carry
 965+ 09F4 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 09F6 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 09F8                              ;---    central part: send the text on the screen to the interpreter
 968+ 09F8 2A 60 61                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 09FB ED 5B 62 61                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 09FF CD 86 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A02 E5                           push    HL
 972+ 0A03 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A06 E1                           pop     HL
 974+ 0A07 23                           inc     HL              ; go to next char
 975+ 0A08 E5                           push    HL              ; store HL
 976+ 0A09 CD 1F 4D                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A0C E1                           pop     HL
 978+ 0A0D 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A0F 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A11 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A14 2A 62 61                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A17 CD 28 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A1A 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A1B 32 54 61                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A1E                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A1E AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A1F 32 53 61                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A22 3A 54 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A25 3C                           inc     A               ; new row
 990+ 0A26 21 4F 61                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A29 BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A2A 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A2C 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A2D F5                           push    AF              ; (store A)
 995+ 0A2E CD 3F 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A31 F1                           pop     AF              ; (retrieve A)
 997+ 0A32 32 54 61     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A35 3A 64 61                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A38 A7                           and     A               ; was it off (A=0)?
1000+ 0A39 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A3C C3 C2 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A3F
1003+ 0A3F              ; find end of text line
1004+ 0A3F              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A3F              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A3F 3A 4F 61     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A42 5F                           ld      E,A             ; load screen height into DE
1008+ 0A43 3A 4E 61                     ld      A,(SCR_SIZE_W)
1009+ 0A46 6F                           ld      L,A             ; load screen width into HL
1010+ 0A47 AF                           xor     A
1011+ 0A48 67                           ld      H,A
1012+ 0A49 57                           ld      D,A
1013+ 0A4A CD 2A 4D                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A4D ED 5B 51 61                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A51 19                           add     HL,DE           ; get the address...
1016+ 0A52 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A53 EB                           ex      DE,HL           ; store address into DE
1018+ 0A54 2A 5E 61                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A57 E5           RPTNLLSRC2:     push    HL
1020+ 0A58 CD 1F 4D                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A5B E1                           pop     HL
1022+ 0A5C C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A5D 23                           inc     HL              ; 1 more step forward
1024+ 0A5E CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A61 A7                           and     A               ; is it $00 (null char)?
1026+ 0A62 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A64 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A65
1029+ 0A65
1030+ 0A65              ; ------------------------------------------------------------------------------
1031+ 0A65                              ; this table contains the values of the offsets to be added to
1032+ 0A65                              ; the starting address of the name table to find the correct
1033+ 0A65                              ; value of the first cell of the corresponding row
1034+ 0A65                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A65                              ; table for graphics 1 text mode: 32 cols
1036+ 0A65 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A69 40 00 60 00
1036+ 0A6D 80 00 A0 00
1036+ 0A71 C0 00 E0 00
1037+ 0A75 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A79 40 01 60 01
1037+ 0A7D 80 01 A0 01
1037+ 0A81 C0 01 E0 01
1038+ 0A85 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0A89 40 02 60 02
1038+ 0A8D 80 02 A0 02
1038+ 0A91 C0 02 E0 02
1039+ 0A95                              ; table for pure text mode: 40 cols
1040+ 0A95 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0A99 50 00 78 00
1040+ 0A9D A0 00 C8 00
1040+ 0AA1 F0 00 18 01
1041+ 0AA5 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0AA9 90 01 B8 01
1041+ 0AAD E0 01 08 02
1041+ 0AB1 30 02 58 02
1042+ 0AB5 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0AB9 D0 02 F8 02
1042+ 0ABD 20 03 48 03
1042+ 0AC1 70 03 98 03
1043+ 0AC5
1044+ 0AC5              ; ------------------------------------------------------------------------------
1045+ 0AC5              ; reset VRAM
1046+ 0AC5 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AC6 67                           ld      H,A
1048+ 0AC7 6F                           ld      L,A             ; reset HL
1049+ 0AC8 CD 66 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0ACB 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0ACD 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0ACE 0D                           dec     C              ; VDP data mode
1053+ 0ACF ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AD1 14                           inc     D               ; next cell
1055+ 0AD2 00                           nop
1056+ 0AD3 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AD5 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AD7 C9                           ret                     ; return to caller
1059+ 0AD8
1060+ 0AD8              ; clear video registers in SRAM
1061+ 0AD8 21 4E 61     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0ADB AF                           xor     A               ; $00 to clean the registers
1063+ 0ADC 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0ADE 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0ADF 23                           inc     HL              ; next register
1066+ 0AE0 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0AE2 C9                           ret                     ; return to caller
1068+ 0AE3
1069+ 0AE3              ; ------------------------------------------------------------------------------
1070+ 0AE3              ; set a specific graphics mode, passed into reg. E
1071+ 0AE3 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0AE5 CB 23                        sla     E               ; multiply E by 8..
1073+ 0AE7 CB 23                        sla     E               ; so that reg. E can point..
1074+ 0AE9 CB 23                        sla     E               ; to the correct settings
1075+ 0AEB 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0AED 21 1F 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0AF0 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0AF1 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0AF3 0E 31                        ld      C,VDP_SET       ; VDP set
1080+ 0AF5 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0AF6 ED 51                        out     (C),D           ; send data to VDP
1082+ 0AF8 ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0AFA 3C                           inc     A               ; next register
1084+ 0AFB 23                           inc     HL              ; next value
1085+ 0AFC 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0AFE C9                           ret
1087+ 0AFF
1088+ 0AFF              ; ------------------------------------------------------------------------------
1089+ 0AFF              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0AFF                              ; reg. HL contains address of pattern table into VRAM
1091+ 0AFF 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B01 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B03 0E 31                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B05 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B07 ED 61                        out     (C),H           ; send high byte
1096+ 0B09 0D                           dec     C              ; VDP data mode
1097+ 0B0A 21 55 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B0D A7                           and     A               ; is it text mode (A=0)?
1099+ 0B0E 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B10 21 55 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B13 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B15 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B16 ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B18 23                           inc     HL              ; inc byte pointer
1105+ 0B19 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B1A 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B1C 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B1E C9                           ret                     ; return to caller
1109+ 0B1F
1110+ 0B1F              ;------------------------------------------------------------------------------
1111+ 0B1F              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B1F              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B1F              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B1F
1115+ 0B1F                              ; VDP register settings for a text display
1116+ 0B1F 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B20 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B21 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B22 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B23 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B24 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B25 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B26 F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B27
1125+ 0B27              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B27 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B28 C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B29 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B2A 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B2B 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B2C 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B2D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B2E 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B2F
1135+ 0B2F              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B2F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B30 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B31 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B32 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B33 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B34 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B35 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B36 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B37
1145+ 0B37              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B37 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B38 CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B39 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B3A 00                           defb    $00             ; reg.3: don't care
1150+ 0B3B 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B3C 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B3D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B3E 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B3F
1155+ 0B3F              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B3F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B40 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B41 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B42 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B43 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B44 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B45 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B46 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B47
1165+ 0B47              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B47                              ; 1st band
1167+ 0B47 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B4B 00 00 00 00
1167+ 0B4F 00 00 00 00
1167+ 0B53 00 00 00 00
1167+ 0B57 00 00 00 00
1167+ 0B5B 00 00 00 00
1167+ 0B5F 00 00 00 00
1167+ 0B63 00 00 00 00
1168+ 0B67 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B6B 0B 10 00 00
1168+ 0B6F 00 00 00 00
1168+ 0B73 00 00 00 00
1168+ 0B77 00 00 00 00
1168+ 0B7B 00 00 00 00
1168+ 0B7F 00 00 00 00
1168+ 0B83 00 00 00 00
1169+ 0B87                              ; 2nd band
1170+ 0B87 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0B8B 00 0C 00 00
1170+ 0B8F 00 01 00 00
1170+ 0B93 00 14 00 00
1170+ 0B97 06 05 06 15
1170+ 0B9B 16 07 06 15
1170+ 0B9F 16 07 06 01
1170+ 0BA3 01 07 00 00
1171+ 0BA7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BAB 00 0C 00 00
1171+ 0BAF 00 01 00 00
1171+ 0BB3 00 01 14 06
1171+ 0BB7 01 05 03 05
1171+ 0BBB 03 05 03 05
1171+ 0BBF 03 05 03 05
1171+ 0BC3 03 05 00 00
1172+ 0BC7                              ; 3rd band
1173+ 0BC7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BCB 00 0C 00 00
1173+ 0BCF 00 01 00 00
1173+ 0BD3 00 01 01 01
1173+ 0BD7 01 05 09 14
1173+ 0BDB 13 08 03 05
1173+ 0BDF 13 05 03 05
1173+ 0BE3 00 00 00 00
1174+ 0BE7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0BEB 00 0C 00 00
1174+ 0BEF 00 01 00 00
1174+ 0BF3 00 01 00 08
1174+ 0BF7 03 05 06 15
1174+ 0BFB 16 07 03 01
1174+ 0BFF 16 05 03 05
1174+ 0C03 00 00 00 00
1175+ 0C07                              ; 4th band
1176+ 0C07 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C0B 00 0C 00 00
1176+ 0C0F 00 01 00 00
1176+ 0C13 00 01 00 00
1176+ 0C17 03 05 03 05
1176+ 0C1B 03 05 03 05
1176+ 0C1F 03 05 03 05
1176+ 0C23 03 05 00 00
1177+ 0C27 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C2B 00 0C 00 00
1177+ 0C2F 00 01 04 04
1177+ 0C33 00 01 00 00
1177+ 0C37 03 05 09 14
1177+ 0C3B 13 08 09 14
1177+ 0C3F 13 08 09 01
1177+ 0C43 01 08 00 00
1178+ 0C47                              ; 5th band
1179+ 0C47 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C4B 12 11 00 00
1179+ 0C4F 00 00 00 00
1179+ 0C53 00 00 00 00
1179+ 0C57 00 00 00 00
1179+ 0C5B 00 00 00 00
1179+ 0C5F 00 00 00 00
1179+ 0C63 00 00 00 00
1180+ 0C67 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C6B 00 00 00 00
1180+ 0C6F 00 00 00 00
1180+ 0C73 00 00 00 00
1180+ 0C77 00 00 00 00
1180+ 0C7B 00 00 00 00
1180+ 0C7F 00 00 00 00
1180+ 0C83 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0C87
  78  0C87              ; incude the latest version of the PSG module
  79  0C87                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0C87              ; ------------------------------------------------------------------------------
   2+ 0C87              ; LM80C - PSG ROUTINES - 1.1
   3+ 0C87              ; ------------------------------------------------------------------------------
   4+ 0C87              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0C87              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0C87              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0C87              ; kind of warranty: you can use them at your own risk.
   8+ 0C87              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0C87              ; maintain the copyright notices, include this advice and the note to the
  10+ 0C87              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0C87              ; redistribuite them.
  12+ 0C87              ; https://www.leonardomiliani.com
  13+ 0C87              ;
  14+ 0C87              ; Please support me by visiting the following links:
  15+ 0C87              ; Main project page: https://www.leonardomiliani.com
  16+ 0C87              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0C87              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0C87              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0C87              ; ------------------------------------------------------------------------------
  20+ 0C87              ;
  21+ 0C87              ; ------------------------------------------------------------------------------
  22+ 0C87
  23+ 0C87              ;------------------------------------------------------------------------------
  24+ 0C87
  25+ 0C87              ; configure the PSG
  26+ 0C87 21 92 61     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0C8A 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0C8C AF                           xor     A               ; reset A
  29+ 0C8D 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0C8E 23                           inc     HL              ; next register
  31+ 0C8F 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0C91 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0C93 21 A5 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0C96 16 00                        ld      D,$00           ; first register
  35+ 0C98 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0C99 CD DF 0C                     call    SETSNDREG       ; select register
  37+ 0C9C 7E                           ld      A,(HL)          ; load value
  38+ 0C9D CD E4 0C                     call    WRTSNDREG       ; write to register
  39+ 0CA0 14                           inc     D               ; next register
  40+ 0CA1 23                           inc     HL              ; next value
  41+ 0CA2 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CA4 C9                           ret                     ; return to caller
  43+ 0CA5
  44+ 0CA5 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CA9 00 00 00 BF
  45+ 0CAD 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CB1 00 00 FF FF
  46+ 0CB5                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CB5
  48+ 0CB5
  49+ 0CB5              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CB5 21 CF 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CB8 C3 BE 0C                     jp      SENDSND
  52+ 0CBB 21 D7 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CBE C5           SENDSND:        push    BC
  54+ 0CBF 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CC1 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CC2 CD DF 0C                     call    SETSNDREG
  57+ 0CC5 23                           inc     HL              ; next cell
  58+ 0CC6 7E                           ld      A,(HL)          ; read value
  59+ 0CC7 CD E4 0C                     call    WRTSNDREG
  60+ 0CCA 23                           inc     HL
  61+ 0CCB 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CCD C1                           pop     BC
  63+ 0CCE C9                           ret                     ; return to caller
  64+ 0CCF
  65+ 0CCF 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CD3 05 00 0A 0F
  66+ 0CD7 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CDB 0A 00 07 BF
  67+ 0CDF
  68+ 0CDF
  69+ 0CDF              ; select register on PSG
  70+ 0CDF 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0CE1 ED 79                        out     (C),A           ; set register
  72+ 0CE3 C9                           ret                     ; return to caller
  73+ 0CE4
  74+ 0CE4              ; send data to PSG
  75+ 0CE4 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0CE6 ED 79                        out     (C),A           ; send data
  77+ 0CE8 C9                           ret                     ; return to caller
  78+ 0CE9
  79+ 0CE9              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0CE9              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0CE9              ; shut off the audio channel whose counter has reached 0.
  82+ 0CE9              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0CE9 DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0CEB DD 21 92 61                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0CEF 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0CF1 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0CF3 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0CF6 DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0CF9 7B                           ld      A,E             ; load E into A
  90+ 0CFA B2                           or      D               ; check that DE=0
  91+ 0CFB 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0CFD 1B                           dec     DE              ; no, so decrement DE
  93+ 0CFE 7B                           ld      A,E             ; reload E into A...
  94+ 0CFF DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D02 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D05 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D06 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D08                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D08                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D08                                                      ; then set 0 into its tone registers
 101+ 0D08 16 07                        ld      D,$07           ; mixer register
 102+ 0D0A 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D0C ED 51                        out     (C),D           ; set mixer register
 104+ 0D0E ED 78                        in      A,(C)           ; load current value
 105+ 0D10 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D11 ED 51                        out     (C),D           ; select mixer register
 107+ 0D13 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D15 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D17 3E 03                        ld      A,$03           ; three channels
 110+ 0D19 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D1A 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D1B 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D1D ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D1F 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D21 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D23 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D25 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D27 3C                           inc     A               ; next tone register
 119+ 0D28 ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D2A 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D2C ED 69                        out     (C),L           ; write 0 into register
 122+ 0D2E DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D30 DD 23                        inc     IX              ; ...next channel...
 124+ 0D32 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D34 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D36 DD E1                        pop     IX              ; restore IX
 127+ 0D38 C9                           ret                     ; return to caller
 128+ 0D39
 129+ 0D39              ; read a specific row of the keyboard matrix, set by A
 130+ 0D39              ; return read into A
 131+ 0D39 C5           READKBLN:       push    BC              ; store BC
 132+ 0D3A 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D3C 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D3E ED 41                        out     (C),B           ; select reg #15
 135+ 0D40 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D42 ED 79                        out     (C),A           ; activate the row
 137+ 0D44 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D46 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D48 ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D4A ED 78                        in      A,(C)           ; read register #14
 141+ 0D4C C1                           pop     BC              ; retrieve BC
 142+ 0D4D C9                           ret
 143+ 0D4E
 144+ 0D4E              ; read the keyboard matrix to look for a key pressure
 145+ 0D4E 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D50 06 07                        ld      B,$07           ; set register #7...
 147+ 0D52 ED 41                        out     (C),B           ; ...to work with
 148+ 0D54 ED 78                        in      A,(C)           ; read register #7
 149+ 0D56 CB FF                        set     7,A             ; port A set to output
 150+ 0D58 CB B7                        res     6,A             ; port B set to input
 151+ 0D5A ED 41                        out     (C),B           ; set register #7
 152+ 0D5C 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D5E ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D60                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D60 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D62 CD 39 0D                     call    READKBLN        ; read row
 157+ 0D65 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D67 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D69 21 9F 61                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D6C 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D6E 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D70 CD 39 0D                     call    READKBLN        ; read ALT row
 163+ 0D73 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D75 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D77 21 9F 61                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D7A 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0D7C 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0D7E CD 39 0D                     call    READKBLN        ; read CTRL row
 169+ 0D81 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0D83 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0D85 21 9F 61                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0D88 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0D8A 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0D8C 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0D8E 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0D90 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0D92 ED 51                        out     (C),D           ; select reg. #15
 178+ 0D94 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0D96 ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0D98 5F                           ld      E,A             ; save current line into E
 181+ 0D99 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0D9B 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0D9D ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0D9F 00                           nop
 185+ 0DA0 ED 78                        in      A,(C)           ; read register #14
 186+ 0DA2 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DA4 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DA6                              ; check control keys
 189+ 0DA6 32 99 61                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DA9 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DAA FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DAC 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DAE 3A 99 61                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DB1 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DB3 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DB5 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DB7 FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DB9 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DBB 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DBD FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DBF 3A 99 61                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DC2 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DC4 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DC6 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DC8 CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DCA CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DCC 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DCE CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DD0 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DD2 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DD4 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DD5 0F                           rrca                    ; rotate right by 1
 213+ 0DD6 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DD8 AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DD9 32 9B 61                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0DDC 32 9F 61                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0DDF 32 98 61                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0DE2 32 9C 61                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0DE5 C9                           ret                     ; ...and leave
 220+ 0DE6 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0DE8 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0DE9 CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0DEB 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0DED 3A 9F 61                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0DF0 21 09 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0DF3 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0DF5 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0DF7 21 49 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0DFA 18 10                        jr      LOADMAP         ; and load it
 230+ 0DFC FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0DFE 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E00 21 C9 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E03 18 07                        jr      LOADMAP         ; and load it
 234+ 0E05 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E07 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E09 21 89 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E0C 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E0D 48                           ld      C,B             ; move B into C and...
 239+ 0E0E CB 21                        sla     C               ; ...multiply it...
 240+ 0E10 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E12 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E14 06 00                        ld      B,$00           ; reset B
 243+ 0E16 09                           add     HL,BC           ; find the address of the current row
 244+ 0E17 50                           ld      D,B             ; reset D
 245+ 0E18 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E19 3A 9B 61                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E1C BE                           cp      (HL)            ; is it the same key?
 248+ 0E1D 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E1F 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E21 2A 3E 61                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E24 ED 5B 9D 61                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E28 3A 9C 61                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E2B FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E2D 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E2F AF                           xor     A               ; clear Carry
 256+ 0E30 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E32 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E34 3A 0C 60                     ld      A,(KEYDEL)
 259+ 0E37 5F                           ld      E,A
 260+ 0E38 CD 1F 4D                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E3B DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E3E 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E40 32 9C 61                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E43 2A 3E 61                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E46 22 9D 61                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E49 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E4B C3 6D 0E                     jp      SENDKEY         ; send key
 268+ 0E4E AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E4F ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E51 16 00                        ld      D,$00
 271+ 0E53 3A 0D 60                     ld      A,(AUTOKE)
 272+ 0E56 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E57 CD 1F 4D                     call    CMP16           ; check if interval is greater than delay
 274+ 0E5A DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E5D C3 3E 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E60 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E61 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E62 32 9C 61                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E65 ED 4B 3E 61                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E69 ED 43 9D 61                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E6D 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E6E 32 9B 61                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E71 32 9A 61                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E74 32 5B 61                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E77 FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E79 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E7B CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0E7E 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0E80 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0E83 21 01 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0E86 BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0E87 CA B5 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0E8A 0C                           inc     C               ; next FN key
 294+ 0E8B 23                           inc     HL              ; next FN key code
 295+ 0E8C 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0E8E 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0E90 32 98 61                     ld      (KBDNPT),A      ; to keyboard
 298+ 0E93 3A 5A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0E96 B7                           or      A               ; is the print-on-video disabled?
 300+ 0E97 CA A0 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0E9A 3A 58 61                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0E9D B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0E9E 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EA0 AF           PUTCHRBUF:      xor     A
 305+ 0EA1 32 98 61                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EA4 3A 9A 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0EA7 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0EAA C3 B0 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0EAD CD 57 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0EB0 AF           LVKBRDCHK2:     xor     A
 311+ 0EB1 32 9F 61                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0EB4 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0EB5                              ; manage FN keys
 314+ 0EB5 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EB6 2A 08 60                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EB9 23                           inc     HL              ; -1 means direct statement
 317+ 0EBA 7C                           ld      A,H
 318+ 0EBB B5                           or      L
 319+ 0EBC 7A                           ld      A,D             ; retrieve char
 320+ 0EBD 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EBF 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EC0 87                           add     A,A
 323+ 0EC1 87                           add     A,A
 324+ 0EC2 87                           add     A,A
 325+ 0EC3 87                           add     A,A             ; FN key number * 16
 326+ 0EC4 4F                           ld      C,A             ; move it into C
 327+ 0EC5 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EC7 21 0E 60                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0ECA 09                           add     HL,BC           ; get correct text address
 330+ 0ECB 06 10                        ld      B,$10           ; 16 chars
 331+ 0ECD 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0ECE A7                           and     A               ; null char?
 333+ 0ECF CA B0 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0ED2 57                           ld      D,A             ; pass char into D
 335+ 0ED3 3A 5A 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0ED6 B7                           or      A               ; is the print-on-video disabled?
 337+ 0ED7 CA E7 0E                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EDA 3A 58 61                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0EDD B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0EDE C4 F4 0E                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0EE1 23           CNTFNK:         inc     HL              ; next char
 342+ 0EE2 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0EE4 C3 B0 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0EE7 AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0EE8 32 98 61                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0EEB 7A                           ld      A,D             ; retrieve char
 347+ 0EEC E5                           push    HL              ; store HL
 348+ 0EED CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0EF0 E1                           pop     HL              ; retrieve HL
 350+ 0EF1 C3 E1 0E                     jp      CNTFNK          ; repeat
 351+ 0EF4 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0EF5 32 5B 61                     ld      (CHR4VID),A     ; store char for printing
 353+ 0EF8 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0EFA 32 98 61                     ld      (KBDNPT),A      ; to keyboard
 355+ 0EFD CD 57 07                     call    CHAR2VID        ; print on screen
 356+ 0F00 C9                           ret                     ; return to caller
 357+ 0F01
 358+ 0F01
 359+ 0F01              ;-----------------------------------------------------------------------
 360+ 0F01 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F05 06 16 17 18
 361+ 0F09              ;-----------------------------------------------------------------------
 362+ 0F09              ; key codes
 363+ 0F09 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F0D 20 10 71 32
 364+ 0F11 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F15 7A 73 65 34
 365+ 0F19 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F1D 63 66 74 36
 366+ 0F21 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F25 62 68 75 38
 367+ 0F29 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F2D 6D 6B 6F 30
 368+ 0F31 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F35 2E 3A 2D 1E
 369+ 0F39 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F3D 1B 3D 2B 1D
 370+ 0F41 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F45 01 02 04 18
 371+ 0F49
 372+ 0F49              ; shifted codes - not all the keys have the shifted version
 373+ 0F49 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F4D 20 10 51 22
 374+ 0F51 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F55 5A 53 45 24
 375+ 0F59 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F5D 43 46 54 26
 376+ 0F61 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F65 42 48 55 28
 377+ 0F69 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F6D 4D 4B 4F 5E
 378+ 0F71 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F75 3E 5B 5F 1E
 379+ 0F79 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0F7D 1B C6 2B 1D
 380+ 0F81 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0F85 05 06 16 17
 381+ 0F89
 382+ 0F89              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0F89 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0F8D 20 10 DE C4
 384+ 0F91 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0F95 83 82 A5 34
 385+ 0F99 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0F9D 9D A3 A8 36
 386+ 0FA1 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FA5 9E AC D5 38
 387+ 0FA9 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FAD A0 D7 87 C3
 388+ 0FB1 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FB5 C0 7B 90 1E
 389+ 0FB9 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FBD 1B D1 94 1D
 390+ 0FC1 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FC5 05 06 16 17
 391+ 0FC9
 392+ 0FC9              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FC9 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FCD 20 10 9A 32
 394+ 0FD1 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FD5 98 96 99 34
 395+ 0FD9 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 0FDD B1 AF A5 36
 396+ 0FE1 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 0FE5 B3 A9 A7 38
 397+ 0FE9 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 0FED AB B5 A4 30
 398+ 0FF1 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 0FF5 2E 3A BA 1E
 399+ 0FF9 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 0FFD 1B D4 B9 1D
 400+ 1001 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1005 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  1009
  81  1009              ; include the latest versions of the CF & DOS modules
  82  1009                  INCLUDE "../include/dos/bios-1.01.asm"
# file opened: ../include/dos/bios-1.01.asm
   1+ 1009              ; ------------------------------------------------------------------------------
   2+ 1009              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 1009              ; ------------------------------------------------------------------------------
   4+ 1009              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1009              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1009              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1009              ; kind of warranty: you can use them at your own risk.
   8+ 1009              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1009              ; maintain the copyright notices, include this advice and the note to the
  10+ 1009              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1009              ; redistribuite them.
  12+ 1009              ; https://www.leonardomiliani.com
  13+ 1009              ;
  14+ 1009              ; Please support me by visiting the following links:
  15+ 1009              ; Main project page: https://www.leonardomiliani.com
  16+ 1009              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1009              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1009              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1009              ; ------------------------------------------------------------------------------
  20+ 1009              ;
  21+ 1009              ; ------------------------------------------------------------------------------
  22+ 1009              ; Code Revision:
  23+ 1009              ; R1.0  - 20210307 - first release
  24+ 1009              ; R1.01 - 2021xxxx -
  25+ 1009              ;
  26+ 1009              ;------------------------------------------------------------------------------
  27+ 1009
  28+ 1009              ; equates for CF at port $50
  29+ 1009              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  30+ 1009              CF_ERR:         equ %01010001   ; ($51) Error (R)
  31+ 1009              CF_FTR:         equ %01010001   ; ($51) Features (W)
  32+ 1009              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  33+ 1009              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  34+ 1009              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  35+ 1009              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  36+ 1009              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  37+ 1009              CF_STAT:        equ %01010111   ; ($57) Status (R)
  38+ 1009              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  39+ 1009
  40+ 1009
  41+ 1009              ;------------------------------------------------------------------------------
  42+ 1009              ; R O U T I N E S
  43+ 1009              ;------------------------------------------------------------------------------
  44+ 1009
  45+ 1009              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  46+ 1009 CD 1F 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  47+ 100C CD 6D 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  48+ 100F D8                       ret     C               ; no card or I/O error, leave
  49+ 1010 3E 01                    ld      A,$01           ; 8-bit mode
  50+ 1012 D3 51                    out     (CF_FTR),A      ; set mode
  51+ 1014 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  52+ 1017 3E EF                    ld      A,$EF           ; command to set mode
  53+ 1019 D3 57                    out     (CF_CMD),A      ; execute command
  54+ 101B CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  55+ 101E C9                       ret                     ; return to caller
  56+ 101F
  57+ 101F
  58+ 101F              ; a NOP command, just used to wake up the CF card
  59+ 101F 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  60+ 1021 D3 51                    out     (CF_FTR),A      ; send it
  61+ 1023 3E EF                    ld      A,$EF           ; set mode command
  62+ 1025 D3 57                    out     (CF_CMD),A      ; execute NOP
  63+ 1027 C9                       ret                     ; return to caller
  64+ 1028
  65+ 1028
  66+ 1028              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  67+ 1028 DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  68+ 102A 07                       rlca                    ; copy bit #7 into the Carry
  69+ 102B DA 28 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  70+ 102E C9                       ret                     ; bit #7 cleared - return to caller
  71+ 102F
  72+ 102F
  73+ 102F              ; check that CF is ready to get commands
  74+ 102F DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  75+ 1031 CB 47                    bit     0,A             ; any error?
  76+ 1033 20 07                    jr      NZ,RETERR       ; yes, return error
  77+ 1035 E6 C0                    and     %11000000       ; check only bits #6 & #7
  78+ 1037 EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  79+ 1039 20 F4                    jr      NZ,CF_CMDRDY    ; wait
  80+ 103B C9                       ret                     ; return to caller
  81+ 103C 37           RETERR:     scf                     ; set carry flag
  82+ 103D C9                       ret                     ; return
  83+ 103E
  84+ 103E
  85+ 103E              ; wait until data is ready to be read
  86+ 103E DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  87+ 1040 CB 47                    bit     0,A             ; any error?
  88+ 1042 20 F8                    jr      NZ,RETERR       ; yes, return error
  89+ 1044 E6 88                    and     %10001000       ; check only bits #7 & #3
  90+ 1046 EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  91+ 1048 20 F4                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  92+ 104A C9                       ret                     ; return to caller
  93+ 104B
  94+ 104B
  95+ 104B              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
  96+ 104B CD 2F 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
  97+ 104E 3E 01                    ld      A,$01           ; 1 sector at a time
  98+ 1050 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
  99+ 1052 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 100+ 1055 79                       ld      A,C             ; load LBA0 byte
 101+ 1056 D3 53                    out     (CF_LBA0),A     ; send it
 102+ 1058 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 103+ 105B 78                       ld      A,B             ; load LBA1 byte
 104+ 105C D3 54                    out     (CF_LBA1),A     ; send it
 105+ 105E CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 106+ 1061 7B                       ld      A,E             ; load LBA2 byte
 107+ 1062 D3 55                    out     (CF_LBA2),A     ; send it
 108+ 1064 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 109+ 1067 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 110+ 1069 B2                       or      D               ; add LBA sector
 111+ 106A D3 56                    out     (CF_LBA3),A     ; send it
 112+ 106C C9                       ret                     ; return to caller
 113+ 106D
 114+ 106D
 115+ 106D              ; check if device is available & ready - try a bit of times, then exit with
 116+ 106D              ; error if no response, otherwise wait until device is ready
 117+ 106D              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 118+ 106D C5           CR_DEV_RDY: push    BC              ; store HL
 119+ 106E 06 00                    ld      B,$00           ; 256 tries
 120+ 1070 0E 57                    ld      C,CF_STAT       ; address of status register
 121+ 1072 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 122+ 1074 FE 40                    cp      %01000000       ; busy=0, rdy=1
 123+ 1076 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 124+ 1078 FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 125+ 107A 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 126+ 107C 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 127+ 107E 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 128+ 107F C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 129+ 1080 C9                       ret                     ; return to caller
 130+ 1081
 131+ 1081
 132+ 1081              ; put the CF into stand-by mode
 133+ 1081 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 134+ 1083 D3 56                    out 	(CF_LBA3),A     ; send configuration
 135+ 1085 3E 92                    ld      A,$92           ; standby mode
 136+ 1087 D3 57                    out     (CF_CMD),A      ; send command
 137+ 1089 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
 138+ 108C C9                       ret                     ; return to caller
 139+ 108D
 140+ 108D
 141+ 108D              ;***************************************************************************
 142+ 108D              ; CF_RD_SEC
 143+ 108D              ; Function: load a sector (512 bytes) into RAM buffer.
 144+ 108D              ;***************************************************************************
 145+ 108D CD 2F 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 146+ 1090 D8                       ret     C               ; return if error
 147+ 1091 3E 20                    ld      A,$20           ; Prepare read command
 148+ 1093 D3 57                    out     (CF_CMD),A      ; Send read command
 149+ 1095 CD 3E 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 150+ 1098 D8                       ret     C               ; return if error
 151+ 1099 DB 57                    in      A,(CF_STAT)     ; Read status
 152+ 109B E6 01                    and     %00000001       ; mask off error bit
 153+ 109D C2 8D 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 154+ 10A0              ; read CF buffer after it's been filled up by a previous command
 155+ 10A0              ; and store data into the I/O buffer
 156+ 10A0 C5           CF_RD_CMD:  push    BC              ; store BC
 157+ 10A1 E5                       push    HL              ; store HL
 158+ 10A2 2A F3 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 159+ 10A5 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 160+ 10A7 CD 3E 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 161+ 10AA 38 0A                    jr      C,CF_RD_EXIT
 162+ 10AC DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 163+ 10AE 77                       ld      (HL),A          ; store into buffer
 164+ 10AF 23                       inc     HL              ; next location
 165+ 10B0 DB 50                    in      A,(CF_DATA)     ; get another byte
 166+ 10B2 77                       ld      (HL),A          ; store it
 167+ 10B3 23                       inc     HL              ; next location
 168+ 10B4 10 F6                    djnz    CF_RD_SECT      ; repeat
 169+ 10B6 E1           CF_RD_EXIT: pop     HL              ; retrieve HL
 170+ 10B7 C1                       pop     BC              ; retrieve BC
 171+ 10B8 C9                       ret                     ; return to caller
 172+ 10B9
 173+ 10B9
 174+ 10B9              ;***************************************************************************
 175+ 10B9              ; CF_WR_SEC
 176+ 10B9              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 177+ 10B9              ;***************************************************************************
 178+ 10B9 C5           CF_WR_SEC:  push    BC              ; store BC
 179+ 10BA D5                       push    DE              ; store DE
 180+ 10BB E5                       push    HL              ; store HL
 181+ 10BC CD 4B 10                 call    CF_SETSTR       ; set sector
 182+ 10BF CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 183+ 10C2 38 1D                    jr      C,CF_WR_EXIT               ; return if error
 184+ 10C4 3E 30                    ld      A,$30           ; set write command
 185+ 10C6 D3 57                    out     (CF_CMD),A      ; send command
 186+ 10C8 CD 3E 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 187+ 10CB 38 14                    jr      C,CF_WR_EXIT    ; return if error
 188+ 10CD 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10D0 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10D2 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10D4 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10D5 D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10D7 23                       inc     HL              ; next location
 194+ 10D8 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10DA 1D                       dec     E               ; 2 cycles
 196+ 10DB 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 10DD CD 28 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 10E0 AF                       xor     A               ; clear Carry
 199+ 10E1 E1           CF_WR_EXIT: pop     HL              ; retrieve HL
 200+ 10E2 D1                       pop     DE              ; retrieve DE
 201+ 10E3 C1                       pop     BC              ; retrieve BC
 202+ 10E4 C9                       ret                     ; return to caller
 203+ 10E5
# file closed: ../include/dos/bios-1.01.asm
  83  10E5                  INCLUDE "../include/dos/dos-1.02.asm"
# file opened: ../include/dos/dos-1.02.asm
   1+ 10E5              ; ------------------------------------------------------------------------------
   2+ 10E5              ; LM80C 64K - DOS ROUTINES - R1.02
   3+ 10E5              ; ------------------------------------------------------------------------------
   4+ 10E5              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 10E5              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 10E5              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 10E5              ; kind of warranty: you can use them at your own risk.
   8+ 10E5              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 10E5              ; maintain the copyright notices, include this advice and the note to the
  10+ 10E5              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 10E5              ; redistribuite them.
  12+ 10E5              ; https://www.leonardomiliani.com
  13+ 10E5              ;
  14+ 10E5              ; Please support me by visiting the following links:
  15+ 10E5              ; Main project page: https://www.leonardomiliani.com
  16+ 10E5              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 10E5              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 10E5              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 10E5              ; ------------------------------------------------------------------------------
  20+ 10E5              ;
  21+ 10E5              ; ------------------------------------------------------------------------------
  22+ 10E5              ; Code Revision:
  23+ 10E5              ; R1.0  - 20210306 - first release
  24+ 10E5              ; R1.01 - 20210309 - code cleaning & optimization - new behaviour for ERASE (full erase everything)
  25+ 10E5              ; R1.02 - 20210310 - code optimization - new UNDELETE feature for DISK statement
  26+ 10E5              ;
  27+ 10E5              ;------------------------------------------------------------------------------
  28+ 10E5
  29+ 10E5
  30+ 10E5 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.02",$00     ; disk header
  30+ 10E9 43 20 44 4F
  30+ 10ED 53 00 31 2E
  30+ 10F1 30 32 00
  31+ 10F4 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  32+ 10F6
  33+ 10F6              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  34+ 10F6              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  35+ 10F6              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  36+ 10F6              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  37+ 10F6              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  38+ 10F6              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  39+ 10F6              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  40+ 10F6              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  41+ 10F6              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  42+ 10F6              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  43+ 10F6              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  44+ 10F6              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  45+ 10F6              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  46+ 10F6              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  47+ 10F6              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  48+ 10F6
  49+ 10F6              ; *****************************************************************************
  50+ 10F6              ; D I S K    I N I T
  51+ 10F6              ; Functions: format a disk creating a fresh new file system on disk or
  52+ 10F6              ;            rewrite only the Master Sector
  53+ 10F6              ; *****************************************************************************
  54+ 10F6 3A 0D 61     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  55+ 10F9 32 5E 61                 ld      (TMPBFR1),A     ; save onto another location for later use
  56+ 10FC CD B4 18                 call    CLRIOBF         ; clear I/O buffer
  57+ 10FF CD C9 18                 call    CLRDOSBF        ; clear DOS buffer
  58+ 1102 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  59+ 1104 D3 56                    out 	(CF_LBA3),A     ; send configuration
  60+ 1106 3E EC                    ld      A,$EC           ; select "drive ID" command
  61+ 1108 D3 57                    out     (CF_CMD),A      ; send command
  62+ 110A CD 3E 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  63+ 110D CD A0 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  64+ 1110 ED 5B F1 60              ld      DE,(DOSBFR)     ; address of default conf. buffer
  65+ 1114 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  66+ 1117 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  67+ 111A 09                       add     HL,BC           ; set into HL
  68+ 111B 0E 04                    ld      C,$04           ; 4 bytes to copy
  69+ 111D ED B0                    ldir                    ; copy (DE is auto-incremented)
  70+ 111F 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  71+ 1122 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  72+ 1125 09                       add     HL,BC           ; get position of data
  73+ 1126 ED B0                    ldir                    ; copy (DE is auto-incremented)
  74+ 1128 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  75+ 112B 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  76+ 112E 09                       add     HL,BC           ; get position of data
  77+ 112F 0E 02                    ld      C,$02           ; 2 bytes to copy
  78+ 1131 ED B0                    ldir                    ; copy (DE is auto-incremented)
  79+ 1133 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  80+ 1136 01 06 00                 ld      BC,$0006        ; address of number of heads
  81+ 1139 09                       add     HL,BC           ; get position of data
  82+ 113A 0E 02                    ld      C,$02           ; 2 bytes to copy
  83+ 113C ED B0                    ldir                    ; copy (DE is auto-incremented)
  84+ 113E                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  85+ 113E ED 53 0D 61              ld      (TPBF4),DE      ; store current pointer to temp. default conf. buffer
  86+ 1142 2A F1 60                 ld      HL,(DOSBFR)     ; load number of sectors
  87+ 1145 4E                       ld      C,(HL)          ; MSB into AC
  88+ 1146 23                       inc     HL
  89+ 1147 7E                       ld      A,(HL)
  90+ 1148 23                       inc     HL
  91+ 1149 5E                       ld      E,(HL)          ; LSB into DE
  92+ 114A 23                       inc     HL
  93+ 114B 56                       ld      D,(HL)
  94+ 114C D5                       push    DE              ; move DE into IX
  95+ 114D DD E1                    pop     IX
  96+ 114F 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  97+ 1152 CD 9E 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  98+ 1155 47                       ld      B,A             ; now result is into BCIX
  99+ 1156 B1                       or      C               ; BC=$0000?
 100+ 1157 28 05                    jr      Z,DOS_FTC       ; yes, but.....
 101+ 1159 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 102+ 115C 18 0E                    jr      DOS_FT1         ; jump over
 103+ 115E DD E5        DOS_FTC:    push    IX              ; move IX into DE
 104+ 1160 D1                       pop     DE              ; now result is into BCDE
 105+ 1161 7C                       ld      A,H             ; remainder = zero?
 106+ 1162 B5                       or      L
 107+ 1163 CA 6C 11                 jp      Z,DOS_FT1       ; yes, jump over
 108+ 1166 13                       inc     DE              ; no, increment DE
 109+ 1167 7A                       ld      A,D             ; check if DE is zero
 110+ 1168 B3                       or      E
 111+ 1169 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 112+ 116B 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 113+ 116C 2A 0D 61     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 114+ 116F 73                       ld      (HL),E          ; store # of entries
 115+ 1170 23                       inc     HL
 116+ 1171 72                       ld      (HL),D
 117+ 1172 23                       inc     HL
 118+ 1173 D5                       push    DE              ; store entries
 119+ 1174 EB                       ex      DE,HL           ; copy current pointer into DE
 120+ 1175 21 F4 10                 ld      HL,DSKDIRADR    ; address of directory start
 121+ 1178 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 122+ 117B ED B0                    ldir                    ; copy into buffer
 123+ 117D                          ; now we calculate the starting sector of data area
 124+ 117D E1                       pop     HL              ; entries into HL
 125+ 117E 0E 10                    ld      C,$10           ; 16 entries per sector
 126+ 1180 CD 7A 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 127+ 1183 B7                       or      A               ; remainder = 0?
 128+ 1184 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 129+ 1186 23                       inc     HL              ; increment sectors
 130+ 1187 E5           DOS_FT2:    push    HL              ; store size of directory
 131+ 1188 FD E1                    pop     IY              ; into IY
 132+ 118A 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 133+ 118B EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 134+ 118C 73                       ld      (HL),E          ; store starting of
 135+ 118D 23                       inc     HL              ; data area
 136+ 118E 72                       ld      (HL),D          ; into buffer
 137+ 118F                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 138+ 118F CD B4 18                 call    CLRIOBF         ; clear I/O buffer
 139+ 1192 21 E5 10                 ld      HL,DFSCT0       ; address of disk header string
 140+ 1195 ED 5B F3 60              ld      DE,(IOBUFF)     ; address of I/O buffer
 141+ 1199 01 0F 00                 ld      BC,$000F        ; 15 chars
 142+ 119C ED B0                    ldir                    ; copy header into buffer
 143+ 119E 2A F1 60                 ld      HL,(DOSBFR)     ; first part of configuration
 144+ 11A1 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 145+ 11A4 ED B0                    ldir                    ; copy (DE is auto-incremented)
 146+ 11A6 AF                       xor     A               ; A=$0
 147+ 11A7 12                       ld      (DE),A          ; marker at $1F
 148+ 11A8 13                       inc     DE
 149+ 11A9 CD 1F 18                 call    CHKNMVAL        ; copy disk name into buffer
 150+ 11AC DA 6B 12                 jp      C,D1ERR         ; disk name error
 151+ 11AF CD A7 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 152+ 11B2 2A F3 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 153+ 11B5 54                       ld      D,H             ; copy into DE...
 154+ 11B6 5D                       ld      E,L             ; ...for later use
 155+ 11B7 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 156+ 11BA 09                       add     HL,BC           ; ...of the I/O buffer
 157+ 11BB 3E 38                    ld      A,'8'           ; write marker "80"
 158+ 11BD 77                       ld      (HL),A          ; ...
 159+ 11BE 23                       inc     HL              ; ...
 160+ 11BF 3E 30                    ld      A,'0'           ; ...
 161+ 11C1 77                       ld      (HL),A          ; ...into last 2 locations
 162+ 11C2 EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 163+ 11C3 AF                       xor     A               ; reset A - set sector # to $00000000
 164+ 11C4 47                       ld      B,A             ; LBA0=0
 165+ 11C5 4F                       ld      C,A             ; LBA1=0
 166+ 11C6 57                       ld      D,A             ; LBA2=0
 167+ 11C7 5F                       ld      E,A             ; LBA3=0
 168+ 11C8 CD B9 10                 call    CF_WR_SEC       ; write sector to CF
 169+ 11CB DA 4E 12                 jp      C,D2ERR
 170+ 11CE                          ; check if only re-writing of Master Sector was need
 171+ 11CE 3A 5E 61                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 172+ 11D1 3D                       dec     A               ; A=1?
 173+ 11D2 C8                       ret     Z               ; yes, finished job
 174+ 11D3                          ; erase directory -----------------------------
 175+ 11D3                          ; create a progress bar
 176+ 11D3 3E 0D                    ld      A,CR            ; new line
 177+ 11D5 CD 98 23                 call    OUTC
 178+ 11D8 FD E5                    push    IY              ; copy directory's size
 179+ 11DA E1                       pop     HL              ; into HL
 180+ 11DB 01 18 00                 ld      BC,$0018        ; 24 steps
 181+ 11DE CD 7A 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 182+ 11E1 E5                       push    HL              ; store result
 183+ 11E2 DD E1                    pop     IX              ; into IX
 184+ 11E4 EB                       ex      DE,HL           ; and into DE
 185+ 11E5 3E 2D                    ld      A,'-'           ; print a progress bar
 186+ 11E7 CD 23 12                 call    DOS_FT7         ; print it
 187+ 11EA 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 188+ 11EC CD 23 12                 call    DOS_FT7         ; come back to beginning of line
 189+ 11EF FD E5                    push    IY              ; copy directory's size
 190+ 11F1 E1                       pop     HL              ; into HL
 191+ 11F2 01 01 00                 ld      BC,$0001        ; first sector of directory
 192+ 11F5 CD B4 18                 call    CLRIOBF         ; clear I/O buffer
 193+ 11F8 D5           DOS_FTA:    push    DE              ; store counter
 194+ 11F9 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 195+ 11FC CD B9 10                 call    CF_WR_SEC       ; write sector to CF
 196+ 11FF DA 1F 12                 jp      C,DOS_FT10      ; error occured
 197+ 1202 03                       inc     BC              ; next sector
 198+ 1203 2B                       dec     HL              ; decrement HL
 199+ 1204 D1                       pop     DE              ; retrieve counter
 200+ 1205 1B                       dec     DE              ; decrement counter
 201+ 1206 7B                       ld      A,E
 202+ 1207 B2                       or      D               ; check if counter is zero
 203+ 1208 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 204+ 120A 3E 2A                    ld      A,'*'           ; yes, print char
 205+ 120C CD 98 23                 call    OUTC
 206+ 120F DD E5                    push    IX              ; re-set counter
 207+ 1211 D1                       pop     DE
 208+ 1212 7C           DOS_FT9:    ld      A,H             ; check if...
 209+ 1213 B5                       or      L               ; ...HL = 0
 210+ 1214 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 211+ 1216 3E 0D                    ld      A,CR            ; return
 212+ 1218 CD 98 23                 call    OUTC            ; next line
 213+ 121B CD 81 10                 call    CF_STANDBY      ; set CF into stand-by mode
 214+ 121E C9                       ret
 215+ 121F D1           DOS_FT10:   pop     DE
 216+ 1220 C3 4E 12                 jp      D2ERR           ; disk geometry error
 217+ 1223
 218+ 1223              ; print a char 24 times
 219+ 1223 06 18        DOS_FT7:    ld      B,$18           ; 24 times
 220+ 1225 CD 98 23     DOS_FT8:    call    OUTC            ; print char
 221+ 1228 10 FB                    djnz    DOS_FT8         ; repeat
 222+ 122A C9                       ret                     ; return to caller
 223+ 122B
 224+ 122B
 225+ 122B              ; *****************************************************************************
 226+ 122B              ; D I S K    R E N A M E
 227+ 122B              ;******************************************************************************
 228+ 122B CD B4 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 229+ 122E CD C9 18                 call    CLRDOSBF        ; clear DOS buff.
 230+ 1231 CD 9B 17                 call    LDMSCT          ; load Master Sector
 231+ 1234 2A F3 60                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 232+ 1237 01 20 00                 ld      BC,$0020        ; offset for disk name
 233+ 123A 09                       add     HL,BC           ; get pointer
 234+ 123B EB                       ex      DE,HL           ; copy pointer into DE
 235+ 123C CD 1F 18                 call    CHKNMVAL        ; copy disk name into buffer
 236+ 123F DA 6B 12                 jp      C,D1ERR         ; disk name error
 237+ 1242 11 00 00                 ld      DE,$0000        ; reset MSB sector
 238+ 1245 42                       ld      B,D             ; reset LSB sector
 239+ 1246 4A                       ld      C,D
 240+ 1247 CD B9 10                 call    CF_WR_SEC       ; write sector
 241+ 124A DA 80 16                 jp      C,WRT_ERR       ; error?
 242+ 124D C9                       ret                     ; no, return to caller
 243+ 124E
 244+ 124E
 245+ 124E              ; *****************************************************************************
 246+ 124E              ; DOS ERRORS
 247+ 124E              ; *****************************************************************************
 248+ 124E 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 249+ 1250 18 1B                    jr      RET_ERR
 250+ 1252 3E 42        DSKFULL:    ld      A,D5            ; disk full error
 251+ 1254 18 17                    jr      RET_ERR
 252+ 1256 3E 44        DUPLERR:    ld      A,D6            ; duplicate file name
 253+ 1258 18 13                    jr      RET_ERR
 254+ 125A 3E 3A        NAMERR:     ld      A,D1            ; file name error
 255+ 125C 18 0F                    jr      RET_ERR
 256+ 125E 3E 48        FLNTFND:    ld      A,D8            ; file not found
 257+ 1260 18 0B                    jr      RET_ERR
 258+ 1262 3E 40        LODERR:     ld      A,D4            ; generic load error
 259+ 1264 18 07                    jr      RET_ERR
 260+ 1266 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 261+ 1268 C3 6D 12                 jp      RET_ERR
 262+ 126B 3E 3A        D1ERR:      ld      A,D1            ; name string error
 263+ 126D 32 F5 60     RET_ERR:    ld      (DOSER),A       ; store DOS error
 264+ 1270 CD 81 10                 call    CF_STANDBY      ; set CF into stand-by
 265+ 1273 37                       scf                     ; set Carry for error
 266+ 1274 C9                       ret                     ; return to caller
 267+ 1275
 268+ 1275              ; *****************************************************************************
 269+ 1275              ; L I S T    F I L E S
 270+ 1275              ; Function: print details of disk and list files
 271+ 1275              ; Input: D: $00=only disk details; $01=file list, too
 272+ 1275              ; *****************************************************************************
 273+ 1275 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 273+ 1279 20 6E 61 6D
 273+ 127D 65 3A 20 00
 274+ 1281 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 274+ 1285 74 6F 72 73
 274+ 1289 3A 20 00
 275+ 128C 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 275+ 1290 6F 77 65 64
 275+ 1294 20 66 69 6C
 275+ 1298 65 73 3A 20
 275+ 129C 00
 276+ 129D 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 276+ 12A1 65 28 73 29
 276+ 12A5 0D 00
 277+ 12A7 CD E7 17     LST_FILES:  call    CHKDSKVAL       ; check DOS version & load disk details
 278+ 12AA DA 66 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 279+ 12AD D5                       push    DE              ; store D
 280+ 12AE CD 9B 17                 call    LDMSCT          ; load Master Sector
 281+ 12B1 21 75 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 282+ 12B4 CD 6F 2F                 call    PRS             ; print it
 283+ 12B7 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 284+ 12BA 11 20 00                 ld      DE,$0020        ; position of disk name
 285+ 12BD 19                       add     HL,DE           ; get address
 286+ 12BE 06 10                    ld      B,$10           ; 16 chars
 287+ 12C0 7E           INPR1:      ld      A,(HL)          ; load char
 288+ 12C1 CD 98 23                 call    OUTC            ; print it
 289+ 12C4 23                       inc     HL
 290+ 12C5 10 F9                    djnz    INPR1           ; repeat
 291+ 12C7 3E 0D                    ld      A,CR
 292+ 12C9 CD 98 23                 call    OUTC            ; carriage return
 293+ 12CC D1                       pop     DE              ; retrieve D
 294+ 12CD DD 21 00 00              ld      IX,$0000        ; reset file counter
 295+ 12D1 7A                       ld      A,D
 296+ 12D2 B7                       or      A               ; is D=0?
 297+ 12D3 CA 92 13                 jp      Z,PNTSTATS      ; yes, jump over
 298+ 12D6                          ; print list of files
 299+ 12D6 2A F3 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 300+ 12D9 11 0F 00                 ld      DE,$000F        ; point to details of disk
 301+ 12DC 19                       add     HL,DE           ; find address
 302+ 12DD ED 5B F1 60              ld      DE,(DOSBFR)     ; store into DOS buffer
 303+ 12E1 01 20 00                 ld      BC,$0020        ; 32 bytes
 304+ 12E4 ED B0                    ldir                    ; copy
 305+ 12E6 11 00 00                 ld      DE,$0000        ; beginning...
 306+ 12E9 01 01 00                 ld      BC,$0001        ; ...of directory
 307+ 12EC CD 4B 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 308+ 12EF CD 8D 10                 call    CF_RD_SEC       ; read sector
 309+ 12F2 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 310+ 12F4 FD 2A F3 60              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 311+ 12F8 FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 312+ 12FB B7                       or      A               ; is it an empty entry ($00)?
 313+ 12FC 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 314+ 12FE FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 315+ 1300 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 316+ 1302 C5                       push    BC              ; this is a valid entry - so, store BC
 317+ 1303 FD E5                    push    IY              ; store IY
 318+ 1305 E5                       push    HL              ; store HL
 319+ 1306 D5                       push    DE              ; store DE
 320+ 1307 DD E5                    push    IX              ; store IX
 321+ 1309 06 10                    ld      B,$10           ; 16 chars to read and print
 322+ 130B FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 323+ 130E CD 98 23                 call    OUTC            ; print char
 324+ 1311 FD 23                    inc     IY              ; next char
 325+ 1313 10 F6                    djnz    LSTFILES3       ; repeat
 326+ 1315 3E 20                    ld      A,SPC
 327+ 1317 CD 98 23                 call    OUTC            ; print space
 328+ 131A FD 7E 00                 ld      A,(IY)          ; file type
 329+ 131D D6 80                    sub     $80             ; types start from $80
 330+ 131F B7                       or      A               ; BAS type ($00)?
 331+ 1320 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 332+ 1322 21 D6 13                 ld      HL,FILETP       ; print "BAS"
 333+ 1325 18 0B                    jr      LSTFILESPR
 334+ 1327 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 335+ 1328 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 336+ 132A 21 DB 13                 ld      HL,FILETP+5     ; print "BIN "
 337+ 132D 18 03                    jr      LSTFILESPR
 338+ 132F 21 E0 13     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 339+ 1332 CD 6F 2F     LSTFILESPR: call    PRS
 340+ 1335 11 00 00                 ld      DE,$0000        ; MSB = $0000
 341+ 1338 01 08 00                 ld      BC,$0008
 342+ 133B FD 09                    add     IY,BC           ; point to file size in bytes
 343+ 133D FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 344+ 1340 FD 23                    inc     IY
 345+ 1342 FD 46 00                 ld      B,(IY)          ; then MSB
 346+ 1345 C5                       push    BC              ; copy...
 347+ 1346 DD E1                    pop     IX              ; ...into IX
 348+ 1348 CD 5A 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 349+ 134B 3E 0D                    ld      A,CR
 350+ 134D CD 98 23                 call    OUTC            ; print carriage return
 351+ 1350 DD E1        LSTFILES8:  pop     IX              ; retrieve IX
 352+ 1352 D1                       pop     DE              ; retrieve DE
 353+ 1353 E1                       pop     HL              ; retrieve HL
 354+ 1354 FD E1                    pop     IY              ; retrieve IY
 355+ 1356 C1                       pop     BC              ; retrieve BC
 356+ 1357 DD 23                    inc     IX              ; increment file counter
 357+ 1359 CD 01 26     LSTFILES6:  call    TSTBRK          ; Test for break key
 358+ 135C CD 04 25                 call    TSTSPC          ; test for space
 359+ 135F C5                       push    BC              ; store sector counter
 360+ 1360 01 20 00                 ld      BC,$0020        ; dir entry size
 361+ 1363 FD 09                    add     IY,BC           ; next entry in current sector
 362+ 1365 C1                       pop     BC              ; retrieve sector counter
 363+ 1366 2D                       dec     L               ; decrement entry counter
 364+ 1367 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 365+ 1369 03           LSTFILES5:  inc     BC              ; increment sector counter
 366+ 136A 78                       ld      A,B             ; check if BC=$0000
 367+ 136B B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 368+ 136C 28 14                    jr      Z,LSTFILES7     ; yes, exit
 369+ 136E D5                       push    DE              ; store MSB of sector pointer
 370+ 136F 2A F1 60                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 371+ 1372 11 0E 00                 ld      DE,$000E        ; point to data area
 372+ 1375 19                       add     HL,DE           ; find address in memory
 373+ 1376 CD 4C 18                 call    HL2DE           ; load data area sector into DE
 374+ 1379 60                       ld      H,B             ; copy current sector
 375+ 137A 69                       ld      L,C             ; into HL
 376+ 137B CD 1F 4D                 call    CMP16           ; is current sector < data area sector?
 377+ 137E D1                       pop     DE              ; retrieve MSB of sector pointer
 378+ 137F DA EC 12                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 379+ 1382 11 00 00     LSTFILES7:  ld      DE,$0000
 380+ 1385 DD E5                    push    IX
 381+ 1387 CD 5A 18                 call    PRN16ASCIX      ; print number of files from DEIX
 382+ 138A 21 9D 12                 ld      HL,TLFLSTX
 383+ 138D CD 6F 2F                 call    PRS             ; print "file(s)"
 384+ 1390 DD E1                    pop     IX
 385+ 1392 21 81 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 386+ 1395 CD 6F 2F                 call    PRS             ; print message
 387+ 1398 2A F1 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 388+ 139B DD E5                    push    IX              ; store number of entries
 389+ 139D CD 51 18                 call    PRN32ASCII      ; print size
 390+ 13A0 3E 2F                    ld      A,'/'
 391+ 13A2 CD 98 23                 call    OUTC            ; print a "/""
 392+ 13A5 D1                       pop     DE              ; copy number of entries into DE
 393+ 13A6 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 394+ 13A9 CD 44 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 395+ 13AC ED 53 07 61              ld      (TPBF1),DE      ; store results
 396+ 13B0 22 09 61                 ld      (TPBF2),HL
 397+ 13B3 21 07 61                 ld      HL,TPBF1        ; print results
 398+ 13B6 CD 51 18                 call    PRN32ASCII
 399+ 13B9 21 8C 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 400+ 13BC CD 6F 2F                 call    PRS             ; print message
 401+ 13BF 2A F1 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 402+ 13C2 01 0A 00                 ld      BC,$000A        ; address of allowed files
 403+ 13C5 09                       add     HL,BC           ; find pointer
 404+ 13C6 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 405+ 13C9 CD 54 18                 call    PRN16ASCII      ; print max files
 406+ 13CC 3E 0D                    ld      A,CR
 407+ 13CE CD 98 23                 call    OUTC            ; print a carriage return
 408+ 13D1 CD 81 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 409+ 13D4 AF                       xor     A               ; clear Carry flag
 410+ 13D5 C9                       ret                     ; return to caller
 411+ 13D6 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 411+ 13DA 00
 412+ 13DB 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 412+ 13DF 00
 413+ 13E0 3F 3F 3F 20              defb    "??? ",0        ; unkown
 413+ 13E4 00
 414+ 13E5
 415+ 13E5
 416+ 13E5              ; *****************************************************************************
 417+ 13E5              ; S A V E    F I L E
 418+ 13E5              ; save current BASIC program onto a file
 419+ 13E5              ; *****************************************************************************
 420+ 13E5 CD B4 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 421+ 13E8 CD E7 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 422+ 13EB DA 66 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 423+ 13EE CD 8C 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 424+ 13F1 CD 4C 18                 call    HL2DE           ; get start of directory into DE
 425+ 13F4 ED 53 F6 60              ld      (DIR_STRT),DE   ; store
 426+ 13F8 CD 4C 18                 call    HL2DE           ; get start of data area into DE
 427+ 13FB ED 53 F8 60              ld      (DAT_STRT),DE   ; store
 428+ 13FF CD B4 18                 call    CLRIOBF         ; clear IO buffer
 429+ 1402 CD C9 18                 call    CLRDOSBF        ; clear DOS buffer
 430+ 1405 ED 5B F1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 431+ 1409 CD 1F 18                 call    CHKNMVAL        ; check and copy file name
 432+ 140C DA 5A 12                 jp      C,NAMERR        ; if Carry, file name error
 433+ 140F CD 85 16                 call    FILE_EXIST      ; check for name already present in dir
 434+ 1412 DA 56 12                 jp      C,DUPLERR       ; name is present - error
 435+ 1415 CD 3E 17                 call    FNDFREDIR       ; find a free entry in the directory
 436+ 1418 DA 52 12                 jp      C,DSKFULL       ; no entry, disk full error
 437+ 141B 3A 0D 61                 ld      A,(TPBF4)       ; check what to save
 438+ 141E FE 80                    cp      $80             ; BASIC program?
 439+ 1420 C2 2F 14                 jp      NZ,SAVFL3       ; no, jump over
 440+ 1423                          ; BASIC area to save starts at PROGND and ends at (PROGND)
 441+ 1423 2A A4 61                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 442+ 1426 11 A4 61                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 443+ 1429 ED 53 0F 61              ld      (SRTMEM),DE     ; copy DE
 444+ 142D 18 08                    jr      SAVFL1
 445+ 142F 2A 11 61     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 446+ 1432 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 447+ 1433 ED 5B 0F 61              ld      DE,(SRTMEM)     ; DE <= start of portion
 448+ 1437                          ; compute how many sectors/blocks are needed to save file
 449+ 1437 AF           SAVFL1:     xor     A               ; reset Carry
 450+ 1438 ED 52                    sbc     HL,DE           ; get how many bytes to save
 451+ 143A 22 FE 60                 ld      (BYT_SIZ),HL    ; store into memory
 452+ 143D 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 453+ 1440 7C                       ld      A,H             ; move lenght...
 454+ 1441 4D                       ld      C,L             ; ...into AC
 455+ 1442 CD 89 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 456+ 1445 7C                       ld      A,H             ; check if...
 457+ 1446 B5                       or      L               ; ...remainder (HL) is 0
 458+ 1447 28 01                    jr      Z,SAVFL6        ; yes, jump over
 459+ 1449 03                       inc     BC              ; no, so we need another sector
 460+ 144A 79           SAVFL6:     ld      A,C
 461+ 144B 32 00 61                 ld      (SCT_SIZ),A     ; store into memory
 462+ 144E              SAVFL7:     ; start saving on disk
 463+ 144E 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 464+ 1451 ED 4B FA 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 465+ 1455 CD 4B 10                 call    CF_SETSTR       ; set sector to read
 466+ 1458 CD 8D 10                 call    CF_RD_SEC       ; read sector
 467+ 145B ED 5B FC 60              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 468+ 145F 7B                       ld      A,E             ; load entry LSB into A
 469+ 1460 E6 0F                    and     %00001111       ; be sure to get only low nibble
 470+ 1462 87                       add     A,A             ; multiply times 32
 471+ 1463 87                       add     A,A
 472+ 1464 87                       add     A,A
 473+ 1465 87                       add     A,A
 474+ 1466 87                       add     A,A
 475+ 1467 4F                       ld      C,A             ; copy into C
 476+ 1468 06 00                    ld      B,$00           ; reset B
 477+ 146A                          ; set name
 478+ 146A 2A F3 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 479+ 146D 09                       add     HL,BC           ; add offset to get address of entry
 480+ 146E ED 5B F1 60              ld      DE,(DOSBFR)     ; pointer to file name
 481+ 1472 01 10 00                 ld      BC,$0010        ; 16 chars
 482+ 1475 EB                       ex      DE,HL           ; move source into HL and destination into DE
 483+ 1476 ED B0                    ldir                    ; copy file name
 484+ 1478 EB                       ex      DE,HL           ; move current buffer pointer into HL
 485+ 1479 3A 0D 61                 ld      A,(TPBF4)       ; load the type of file
 486+ 147C 77                       ld      (HL),A          ; store it
 487+ 147D 23                       inc     HL
 488+ 147E AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 489+ 147F 77                       ld      (HL),A
 490+ 1480 23                       inc     HL
 491+ 1481 ED 5B FC 60              ld      DE,(NTR_NBR)    ; reload entry number
 492+ 1485 CD 47 18                 call    DE2HL           ; store entry into buffer
 493+ 1488 E5                       push    HL              ; store pointer
 494+ 1489 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 495+ 148C CD 44 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 496+ 148F ED 4B F8 60              ld      BC,(DAT_STRT)   ; load start of data
 497+ 1493 09                       add     HL,BC           ; add sector of data area
 498+ 1494 30 01                    jr      NC,SAVFL9       ; overflow?
 499+ 1496 13                       inc     DE              ; yes, increment DE
 500+ 1497 ED 53 01 61  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 501+ 149B 22 03 61                 ld      (LSB_SCT),HL    ; store LSB of sector
 502+ 149E E1                       pop     HL              ; retrieve pointer
 503+ 149F CD 47 18                 call    DE2HL           ; also copy MSB of sector into entry
 504+ 14A2 ED 5B 03 61              ld      DE,(LSB_SCT)    ; retrieve LSB
 505+ 14A6 CD 47 18                 call    DE2HL           ; also copy LSB of sector into entry
 506+ 14A9 ED 5B FE 60              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 507+ 14AD CD 47 18                 call    DE2HL           ; copy file size into buffer
 508+ 14B0 3A 00 61                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 509+ 14B3 77                       ld      (HL),A          ; copy into buffer
 510+ 14B4 23                       inc     HL              ; next location
 511+ 14B5 ED 5B 0F 61              ld      DE,(SRTMEM)     ; start of address of file in RAM
 512+ 14B9 CD 47 18                 call    DE2HL           ; copy into buffer
 513+ 14BC 06 03                    ld      B,$03           ; remaining chars...
 514+ 14BE AF                       xor     A               ; ...set to $00
 515+ 14BF 77           SAVFL2:     ld      (HL),A          ; reset byte
 516+ 14C0 23                       inc     HL              ; next cell
 517+ 14C1 10 FC                    djnz    SAVFL2          ; repeat
 518+ 14C3                          ; save entry into directory
 519+ 14C3 11 00 00                 ld      DE,$0000        ; block 0
 520+ 14C6 ED 4B FA 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 521+ 14CA CD B9 10                 call    CF_WR_SEC       ; write new entry into directory
 522+ 14CD DA 4E 12                 jp      C,D2ERR         ; error occured
 523+ 14D0 CD B4 18                 call    CLRIOBF         ; clear I/O buffer
 524+ 14D3                          ; start saving RAM
 525+ 14D3 ED 5B 0F 61              ld      DE,(SRTMEM)     ; load start of RAM
 526+ 14D7 ED 53 05 61              ld      (RAM_PTR),DE    ; store
 527+ 14DB CD B4 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 528+ 14DE 2A FE 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 529+ 14E1 11 00 02                 ld      DE,$0200        ; are they < 512?
 530+ 14E4 CD 1F 4D                 call    CMP16
 531+ 14E7 30 04                    jr      NC,SAVFL4       ; no, jump over
 532+ 14E9 ED 5B FE 60              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 533+ 14ED 4B           SAVFL4:     ld      C,E             ; bytes to copy
 534+ 14EE 42                       ld      B,D             ; into BC
 535+ 14EF 2A 05 61                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 536+ 14F2 ED 5B F3 60              ld      DE,(IOBUFF)     ; load start of I/O buffer
 537+ 14F6 ED B0                    ldir                    ; copy data
 538+ 14F8 ED 5B 01 61              ld      DE,(MSB_SCT)    ; load MSB of sector
 539+ 14FC ED 4B 03 61              ld      BC,(LSB_SCT)    ; load LSB of sector
 540+ 1500 CD B9 10                 call    CF_WR_SEC       ; write sector
 541+ 1503 DA 80 16                 jp      C,WRT_ERR       ; error?
 542+ 1506 21 00 61                 ld      HL,SCT_SIZ      ; sector counter
 543+ 1509 35                       dec     (HL)            ; copied all the sectors?
 544+ 150A CA 39 15                 jp      Z,SAVFLEXT      ; yes, exit
 545+ 150D 2A 05 61     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 546+ 1510 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 547+ 1513 19                       add     HL,DE           ; calculate next starting address
 548+ 1514 22 05 61                 ld      (RAM_PTR),HL    ; store next block
 549+ 1517 AF                       xor     A               ; reset Carry
 550+ 1518 2A FE 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 551+ 151B ED 52                    sbc     HL,DE           ; subtract copied bytes
 552+ 151D 22 FE 60                 ld      (BYT_SIZ),HL    ; store left bytes
 553+ 1520 ED 4B 03 61              ld      BC,(LSB_SCT)    ; load LSB of sector
 554+ 1524 03                       inc     BC              ; next sector
 555+ 1525 78                       ld      A,B             ; BC=$0000?
 556+ 1526 B1                       or      C
 557+ 1527 20 09                    jr      NZ,SAVFL12      ; no, jump over
 558+ 1529 ED 5B 01 61              ld      DE,(MSB_SCT)    ; load MSB of sector
 559+ 152D 13                       inc     DE              ; increment DE
 560+ 152E ED 53 01 61              ld      (MSB_SCT),DE    ; store new MSB of sector
 561+ 1532 ED 43 03 61  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 562+ 1536 C3 DB 14                 jp      SAVFL10         ; repeat
 563+ 1539 CD 81 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 564+ 153C AF                       xor     A               ; clear Carry flag
 565+ 153D C9                       ret                     ; return to caller
 566+ 153E
 567+ 153E
 568+ 153E              ; *****************************************************************************
 569+ 153E              ; F I L E    L O A D
 570+ 153E              ; load a file from the disk into the memory
 571+ 153E              ; *****************************************************************************
 572+ 153E CD B4 18     LODFILE:    call    CLRIOBF         ; clear I/O
 573+ 1541 CD E7 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 574+ 1544 DA 66 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 575+ 1547 CD 8C 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 576+ 154A CD B4 18                 call    CLRIOBF         ; clear IO buffer
 577+ 154D CD C9 18                 call    CLRDOSBF        ; clear DOS buffer
 578+ 1550 ED 5B F1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 579+ 1554 CD 1F 18                 call    CHKNMVAL        ; check and copy file name
 580+ 1557 DA 5A 12                 jp      C,NAMERR        ; if Carry, file name error
 581+ 155A CD 85 16                 call    FILE_EXIST      ; check if file exists
 582+ 155D D2 5E 12                 jp      NC,FLNTFND      ; file not found - error
 583+ 1560 DD E5                    push    IX              ; copy pointer to file...
 584+ 1562 E1                       pop     HL              ; ...into HL
 585+ 1563 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 586+ 1566 09                       add     HL,BC           ; ...by getting pointer to file details
 587+ 1567 7E                       ld      A,(HL)          ; load file type
 588+ 1568 FE 80                    cp      $80             ; 'BAS' type?
 589+ 156A 28 0C                    jr      Z,LDFL4         ; yes, jump over
 590+ 156C FE 81                    cp      $81             ; 'BIN' type?
 591+ 156E C2 62 12                 jp      NZ,LODERR       ; no, raise error
 592+ 1571 3A 0D 61                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 593+ 1574 B7                       or      A               ; did the user set this?
 594+ 1575 CA 62 12                 jp      Z,LODERR        ; no, raise an error
 595+ 1578 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 596+ 157A 09                       add     HL,BC           ; point to starting sector
 597+ 157B 11 01 61                 ld      DE,MSB_SCT      ; point to store sector address of file
 598+ 157E ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 599+ 1580 11 FE 60                 ld      DE,BYT_SIZ      ; point to store size of file
 600+ 1583 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 601+ 1586 ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 602+ 1588 11 A4 61                 ld      DE,PROGND       ; load start of BASIC RAM
 603+ 158B 3A 0D 61                 ld      A,(TPBF4)       ; check where to save the data from
 604+ 158E B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 605+ 158F 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 606+ 1591 CD 4C 18                 call    HL2DE           ; no, load RAM address from disk
 607+ 1594 ED 53 05 61  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 608+ 1598                          ; start loading from disk
 609+ 1598 CD B4 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 610+ 159B ED 5B 01 61              ld      DE,(MSB_SCT)    ; load MSB of sector
 611+ 159F ED 4B 03 61              ld      BC,(LSB_SCT)    ; load LSB of sector
 612+ 15A3 CD 4B 10                 call    CF_SETSTR       ; set sector
 613+ 15A6 CD 8D 10                 call    CF_RD_SEC       ; read sector
 614+ 15A9 2A FE 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 615+ 15AC 11 00 02                 ld      DE,$0200        ; are they < 512?
 616+ 15AF CD 1F 4D                 call    CMP16
 617+ 15B2 30 04                    jr      NC,LDFL3        ; no, jump over
 618+ 15B4 ED 5B FE 60              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 619+ 15B8 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 620+ 15B9 42                       ld      B,D             ; ...into BC
 621+ 15BA 2A F3 60                 ld      HL,(IOBUFF)     ; point to I/O buffer
 622+ 15BD ED 5B 05 61              ld      DE,(RAM_PTR)    ; point to RAM where to save
 623+ 15C1 ED B0                    ldir                    ; copy data
 624+ 15C3 21 00 61                 ld      HL,SCT_SIZ      ; sector counter
 625+ 15C6 35                       dec     (HL)            ; copied all the sectors?
 626+ 15C7 CA F6 15                 jp      Z,LDFLEX        ; yes, exit
 627+ 15CA 2A 05 61                 ld      HL,(RAM_PTR)    ; pointer to RAM
 628+ 15CD 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 629+ 15D0 19                       add     HL,DE           ; calculate next starting address
 630+ 15D1 22 05 61                 ld      (RAM_PTR),HL    ; store next block
 631+ 15D4 AF                       xor     A               ; reset Carry
 632+ 15D5 2A FE 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 633+ 15D8 ED 52                    sbc     HL,DE           ; subtract copied bytes
 634+ 15DA 22 FE 60                 ld      (BYT_SIZ),HL    ; store left bytes
 635+ 15DD ED 4B 03 61              ld      BC,(LSB_SCT)    ; load LSB of sector
 636+ 15E1 03                       inc     BC              ; next sector
 637+ 15E2 78                       ld      A,B             ; BC=$0000?
 638+ 15E3 B1                       or      C
 639+ 15E4 20 09                    jr      NZ,LDFL5        ; no, jump over
 640+ 15E6 ED 5B 01 61              ld      DE,(MSB_SCT)    ; load MSB of sector
 641+ 15EA 13                       inc     DE              ; increment DE
 642+ 15EB ED 53 01 61              ld      (MSB_SCT),DE    ; store new MSB of sector
 643+ 15EF ED 43 03 61  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 644+ 15F3 C3 98 15                 jp      LDFL2           ; repeat
 645+ 15F6 CD 81 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 646+ 15F9 AF                       xor     A               ; clear Carry flag
 647+ 15FA C9                       ret                     ; return to caller
 648+ 15FB
 649+ 15FB
 650+ 15FB              ; *****************************************************************************
 651+ 15FB              ; F I L E    E R A S E
 652+ 15FB              ; erase a file from disk, freeing its block
 653+ 15FB              ; *****************************************************************************
 654+ 15FB CD B4 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 655+ 15FE CD E7 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 656+ 1601 DA 66 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 657+ 1604 CD 8C 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR
 658+ 1607 CD B4 18                 call    CLRIOBF         ; clear IO buffer
 659+ 160A CD C9 18                 call    CLRDOSBF        ; clear DOS buffer
 660+ 160D ED 5B F1 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 661+ 1611 CD 1F 18                 call    CHKNMVAL        ; check and copy file name
 662+ 1614 DA 5A 12                 jp      C,NAMERR        ; if Carry, file name error
 663+ 1617 CD 85 16                 call    FILE_EXIST      ; check if file exists
 664+ 161A D2 5E 12                 jp      NC,FLNTFND      ; file not found - error
 665+ 161D DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 666+ 1620 DD 56 15                 ld      D,(IX+$15)
 667+ 1623 DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 668+ 1626 DD 46 17                 ld      B,(IX+$17)
 669+ 1629 ED 53 01 61              ld      (MSB_SCT),DE    ; store DE
 670+ 162D ED 43 03 61              ld      (LSB_SCT),BC    ; store BC
 671+ 1631 DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 672+ 1634 32 00 61                 ld      (SCT_SIZ),A     ; store it
 673+ 1637 3E 7F                    ld      A,$7F           ; marker for file deleted
 674+ 1639 DD 77 00                 ld      (IX),A          ; set file as deleted (quick erase)
 675+ 163C 3A 0D 61                 ld      A,(TPBF4)       ; check for quick or full delete
 676+ 163F B7                       or      A               ; A=0 quick erase
 677+ 1640 28 0A                    jr      Z,FIL_ERA5      ; jump if quick erase
 678+ 1642 AF                       xor     A               ; clear A
 679+ 1643 06 20                    ld      B,$20           ; full erase - clean entry (32 cells)
 680+ 1645 DD 77 00     FIL_ERA6:   ld      (IX),A          ; reset cell
 681+ 1648 DD 23                    inc     IX              ; next cell
 682+ 164A 10 F9                    djnz    FIL_ERA6        ; repeat
 683+ 164C ED 5B 09 61  FIL_ERA5:   ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 684+ 1650 ED 4B 0B 61              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 685+ 1654 CD B9 10                 call    CF_WR_SEC       ; write sector
 686+ 1657 38 27                    jr      C,WRT_ERR       ; error?
 687+ 1659 3A 0D 61                 ld      A,(TPBF4)       ; check for quick or full delete
 688+ 165C B7                       or      A               ; if A=0 then quick erase
 689+ 165D 28 1C                    jr      Z,FIL_ERA3      ; yes, leave
 690+ 165F CD B4 18                 call    CLRIOBF         ; no, full delete - clear I/O buffer
 691+ 1662 ED 5B 01 61              ld      DE,(MSB_SCT)    ; load MSB of 1st sector of file block
 692+ 1666 ED 4B 03 61              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 693+ 166A 21 00 61                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 694+ 166D CD B9 10     FIL_ERA1:   call    CF_WR_SEC       ; erase sector
 695+ 1670 38 0E                    jr      C,WRT_ERR       ; error?
 696+ 1672 03                       inc     BC              ; next sector
 697+ 1673 78                       ld      A,B             ; is LSB rolled back to 0?
 698+ 1674 B1                       or      C
 699+ 1675 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 700+ 1677 13                       inc     DE              ; yes, increment MSB
 701+ 1678 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 702+ 1679 20 F2                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 703+ 167B CD 81 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 704+ 167E AF                       xor     A               ; clear Carry
 705+ 167F C9                       ret
 706+ 1680 CD 81 10     WRT_ERR:    call    CF_STANDBY      ; put CF into stand-by
 707+ 1683 37                       scf                     ; set error
 708+ 1684 C9                       ret                     ; return to caller
 709+ 1685
 710+ 1685
 711+ 1685              ; *****************************************************************************
 712+ 1685              ; F I L E    C H E C K
 713+ 1685              ; check if file name already exists in directory
 714+ 1685              ; file name must be stored from (DOSBFR) for 16 chars
 715+ 1685              ; *****************************************************************************
 716+ 1685 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 717+ 1688 01 01 00                 ld      BC,$0001        ; ...of directory
 718+ 168B FD 2A FC 60              ld      IY,(NTR_NBR)    ; load max entries
 719+ 168F CD 4B 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 720+ 1692 CD 8D 10                 call    CF_RD_SEC       ; read sector
 721+ 1695 DD 2A F3 60  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 722+ 1699 2E 10                    ld      L,$10           ; reset entry counter
 723+ 169B DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 724+ 169E B7                       or      A               ; is it $00 (empty entry)?
 725+ 169F CA CF 16                 jp      Z,CHKSTNM10     ; yes, jump over
 726+ 16A2 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 727+ 16A4 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 728+ 16A6 22 07 61                 ld      (TPBF1),HL      ; store HL
 729+ 16A9 ED 53 09 61              ld      (TPBF2),DE      ; store DE
 730+ 16AD ED 43 0B 61              ld      (TPBF3),BC      ; store BC
 731+ 16B1 DD E5                    push    IX              ; copy IX...
 732+ 16B3 E1                       pop     HL              ; ...into HL
 733+ 16B4 ED 5B F1 60              ld      DE,(DOSBFR)     ; beginning of name file
 734+ 16B8 06 10                    ld      B,$10           ; 16 chars to check
 735+ 16BA 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 736+ 16BB ED A1                    cpi                     ; compare with name from user
 737+ 16BD 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 738+ 16BF 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 739+ 16C0 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 740+ 16C2 18 2B                    jr      FLEXST          ; file exists in dir
 741+ 16C4 2A 07 61     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 742+ 16C7 ED 5B 09 61              ld      DE,(TPBF2)      ; retrieve DE
 743+ 16CB ED 4B 0B 61              ld      BC,(TPBF3)      ; retrieve sector counter
 744+ 16CF FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 745+ 16D1 E5                       push    HL              ; preserve current entry
 746+ 16D2 FD E5                    push    IY              ; copy max allowed files...
 747+ 16D4 E1                       pop     HL              ; ...into HL
 748+ 16D5 7C                       ld      A,H             ; chech if entries...
 749+ 16D6 B5                       or      L               ; ...are finished
 750+ 16D7 E1                       pop     HL              ; (retrieve current entry)
 751+ 16D8 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 752+ 16DA C5                       push    BC              ; store bc
 753+ 16DB 01 20 00                 ld      BC,$0020        ; dir entry size
 754+ 16DE DD 09                    add     IX,BC           ; next entry in current sector
 755+ 16E0 C1                       pop     BC              ; retrieve BC
 756+ 16E1 2D                       dec     L               ; decrement entry counter
 757+ 16E2 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 758+ 16E4 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 759+ 16E5 79                       ld      A,C             ; check if...
 760+ 16E6 B0                       or      B               ; BC=$0000?
 761+ 16E7 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 762+ 16E9 13                       inc     DE              ; yes, increment DE (MSB)
 763+ 16EA C3 8F 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 764+ 16ED AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 765+ 16EE C9                       ret                     ; return
 766+ 16EF 37           FLEXST:     scf                     ; file is present - set Carry flag for error
 767+ 16F0 C9                       ret
 768+ 16F1
 769+ 16F1
 770+ 16F1              ; *****************************************************************************
 771+ 16F1              ; UNDELETE DELETED FILES
 772+ 16F1              ; look for deleted files and undelete them
 773+ 16F1              ; *****************************************************************************
 774+ 16F1 CD B4 18     DSKUNDFL:   call    CLRIOBF         ; clear I/O
 775+ 16F4 CD E7 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 776+ 16F7 DA 66 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 777+ 16FA CD 3E 17                 call    FNDFREDIR       ; find a free entry
 778+ 16FD D8           DSKUNDFL1:  ret     C               ; return if entries are finished
 779+ 16FE DD 7E 00                 ld      A,(IX)          ; reload first char of entry
 780+ 1701 FE 7F                    cp      $7F             ; is it a deleted entry?
 781+ 1703 20 29                    jr      NZ,DSKUNDFL2    ; no, jump over
 782+ 1705 CD BE 17                 call    RND8            ; get a random char
 783+ 1708 CD DC 17                 call    CHATOZ          ; transfort it into a letter
 784+ 170B DD 77 00                 ld      (IX),A          ; store it as the first letter of filename
 785+ 170E CD B9 10                 call    CF_WR_SEC       ; write sector (address is into DEBC)
 786+ 1711 E5                       push    HL              ; store HL
 787+ 1712 C5                       push    BC              ; store BC
 788+ 1713 D5                       push    DE
 789+ 1714 DD E5                    push    IX              ; copy IX...
 790+ 1716 E1                       pop     HL              ; ...into HL
 791+ 1717 06 10                    ld      B,$10           ; 16 chars
 792+ 1719 7E           DSKUNDPR:   ld      A,(HL)          ; retrieve char from filename
 793+ 171A CD 98 23                 call    OUTC            ; print char
 794+ 171D 23                       inc     HL              ; next char
 795+ 171E 10 F9                    djnz    DSKUNDPR        ; repeat
 796+ 1720 3E 20                    ld      A,SPC           ; print a space
 797+ 1722 CD 98 23                 call    OUTC
 798+ 1725 21 33 17                 ld      HL,DSKUNDTXT    ; print undeleted message
 799+ 1728 CD 6F 2F                 call    PRS
 800+ 172B D1                       pop     DE
 801+ 172C C1                       pop     BC              ; retrieve BC
 802+ 172D E1                       pop     HL              ; retrieve HL
 803+ 172E CD 64 17     DSKUNDFL2:  call    FNDFREDIR4      ; goto next entry
 804+ 1731 18 CA                    jr      DSKUNDFL1       ; repeat
 805+ 1733 75 6E 64 65  DSKUNDTXT:  defb    "undeleted",CR,0
 805+ 1737 6C 65 74 65
 805+ 173B 64 0D 00
 806+ 173E
 807+ 173E              ; *****************************************************************************
 808+ 173E              ; FIND A FREE ENTRY
 809+ 173E              ; find a free entry in the directory to store a new file
 810+ 173E              ; *****************************************************************************
 811+ 173E CD 9B 17     FNDFREDIR:  call    LDMSCT          ; read Master Sector
 812+ 1741 CD 8C 17                 call    LDENTRIES       ; load entries into RAM register NTR_NBR and DE
 813+ 1744 D5                       push    DE              ; copy number of entries...
 814+ 1745 FD E1                    pop     IY              ; ...into IY
 815+ 1747 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 816+ 174A 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 817+ 174B 58                       ld      E,B
 818+ 174C 60                       ld      H,B             ; HL=$0000 (entry counter)
 819+ 174D 68                       ld      L,B
 820+ 174E CD 4B 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 821+ 1751 CD 8D 10                 call    CF_RD_SEC       ; read sector
 822+ 1754 DD 2A F3 60              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 823+ 1758 DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 824+ 175B FD 2B                    dec     IY              ; decrement number of entries
 825+ 175D B7                       or      A               ; is it $00 (empty entry)?
 826+ 175E 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 827+ 1760 FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 828+ 1762 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 829+ 1764 C5           FNDFREDIR4: push    BC              ; no, store BC
 830+ 1765 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 831+ 1768 DD 09                    add     IX,BC           ; next entry in current sector
 832+ 176A C1                       pop     BC              ; retrieve sector pointer
 833+ 176B 23                       inc     HL              ; increment entry counter
 834+ 176C 7D                       ld      A,L
 835+ 176D E6 0F                    and     %00001111       ; just done 16 entries?
 836+ 176F 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 837+ 1771 03                       inc     BC              ; entries in this sector finished .. goto next sector
 838+ 1772 78                       ld      A,B             ; check if...
 839+ 1773 B1                       or      C               ; ...BC=$000
 840+ 1774 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 841+ 1776 13                       inc     DE              ; yes, increment DE (MSB)
 842+ 1777 E5           FNDFREDIR5: push    HL              ; preserve current entry
 843+ 1778 FD E5                    push    IY              ; copy max allowed files...
 844+ 177A D1                       pop     DE              ; ...into HL
 845+ 177B CD 1F 4D                 call    CMP16           ; check if reached max allowed entries
 846+ 177E E1                       pop     HL              ; (retrieve current entry)
 847+ 177F 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 848+ 1781 37                       scf                     ; entries are finished, raise an error
 849+ 1782 C9                       ret                     ; return
 850+ 1783 ED 43 FA 60  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 851+ 1787 22 FC 60                 ld      (NTR_NBR),HL    ; store entry number
 852+ 178A AF                       xor     A               ; reset Carry
 853+ 178B C9                       ret
 854+ 178C
 855+ 178C
 856+ 178C              ; *****************************************************************************
 857+ 178C              ;   U T I L I T I E S
 858+ 178C              ; *****************************************************************************
 859+ 178C
 860+ 178C              ; load entries intro RAM register
 861+ 178C 2A F3 60     LDENTRIES:  ld      HL,(IOBUFF)     ; start of I/O buffer
 862+ 178F 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 863+ 1792 09                       add     HL,BC           ; get address
 864+ 1793 CD 4C 18                 call    HL2DE           ; get entries into DE
 865+ 1796 ED 53 FC 60              ld      (NTR_NBR),DE    ; store
 866+ 179A C9                       ret                     ; return to caller
 867+ 179B
 868+ 179B
 869+ 179B              ; load Master Sector (sector #0)
 870+ 179B 01 00 00     LDMSCT:     ld      BC,$0000        ; LSB of sector
 871+ 179E 50           LDMSCT1:    ld      D,B             ; MSB of sector
 872+ 179F 58                       ld      E,B
 873+ 17A0 CD 4B 10                 call    CF_SETSTR       ; set sector
 874+ 17A3 CD 8D 10                 call    CF_RD_SEC       ; read sector
 875+ 17A6 C9                       ret
 876+ 17A7
 877+ 17A7
 878+ 17A7              ; generate random disk ID
 879+ 17A7 C5           RND_ID:     push    BC
 880+ 17A8 06 02                    ld      B,$02           ; repeat 2 times
 881+ 17AA CD BE 17     RND_ID1:    call    RND8            ; get a random value
 882+ 17AD CD DC 17                 call    CHATOZ          ; transform it into a letter
 883+ 17B0 12                       ld      (DE),A          ; store it
 884+ 17B1 13                       inc     DE              ; inc pointer
 885+ 17B2 CD BE 17                 call    RND8            ; get a random value
 886+ 17B5 CD D1 17                 call    CH0TO9          ; transform it into a number from 0 to 9
 887+ 17B8 12                       ld      (DE),A          ; store it
 888+ 17B9 13                       inc     DE              ; inc pointer
 889+ 17BA 10 EE                    djnz    RND_ID1         ; repeat
 890+ 17BC C1                       pop     BC
 891+ 17BD C9                       ret                     ; return to caller
 892+ 17BE
 893+ 17BE
 894+ 17BE              ; generate a pseudo-random number using TMR and R registers
 895+ 17BE C5           RND8:       push    BC
 896+ 17BF 3A 3E 61                 ld      A,(TMRCNT)      ; load LSB of sys-timer
 897+ 17C2 47                       ld      B,A             ; copy into B
 898+ 17C3 ED 5F                    ld      A,R             ; load refresh register
 899+ 17C5 A8                       xor     B               ; A xor B
 900+ 17C6 47                       ld      B,A             ; copy into B
 901+ 17C7 0F                       rrca                    ; multiply by 32
 902+ 17C8 0F                       rrca
 903+ 17C9 0F                       rrca
 904+ 17CA EE 1F                    xor     $1F
 905+ 17CC 80                       add     A,B
 906+ 17CD DE FF                    sbc     A,255           ; carry
 907+ 17CF C1                       pop     BC
 908+ 17D0 C9                       ret                     ; return to caller
 909+ 17D1
 910+ 17D1
 911+ 17D1              ; char ported into 0-9 interval
 912+ 17D1 E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 913+ 17D3 FE 0A                    cp      $0A             ; is it < 10?
 914+ 17D5 38 02                    jr      C,CH0TO9E       ; yes, jump over
 915+ 17D7 D6 0A                    sub     $0A             ; subract 10
 916+ 17D9 C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 917+ 17DB C9                       ret
 918+ 17DC
 919+ 17DC
 920+ 17DC              ; char ported into A-Z interval
 921+ 17DC E6 1F        CHATOZ:     and     %00011111       ; get only first 5 bits
 922+ 17DE FE 1A                    cp      $1A             ; is it < 26?
 923+ 17E0 38 02                    jr      C,CHATOZE       ; yes, jump over
 924+ 17E2 D6 1A                    sub     $1A             ; no, subtract 26
 925+ 17E4 C6 41        CHATOZE:    add     $41             ; get a letter from 'A' to 'Z'
 926+ 17E6 C9                       ret                     ; return to caller
 927+ 17E7
 928+ 17E7
 929+ 17E7              ; first check DOS validity then load disk details
 930+ 17E7 CD 09 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 931+ 17EA D8                       ret     C               ; if errors, leave
 932+ 17EB C5                       push    BC              ; store BC
 933+ 17EC D5                       push    DE              ; store DE
 934+ 17ED E5                       push    HL              ; store HL
 935+ 17EE 01 00 00                 ld      BC,$0000        ; reset LSB of sector
 936+ 17F1 50                       ld      D,B             ; reset MSB of sector
 937+ 17F2 58                       ld      E,B
 938+ 17F3 CD 4B 10                 call    CF_SETSTR       ; set sector #0
 939+ 17F6 CD 8D 10                 call    CF_RD_SEC       ; read sector
 940+ 17F9 2A F3 60                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 941+ 17FC 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 942+ 17FF 19                       add     HL,DE
 943+ 1800 11 EF 10                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 944+ 1803 06 04                    ld      B,$04           ; 4 chars
 945+ 1805 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 946+ 1806 BE                       cp      (HL)            ; compare with disk DOS version
 947+ 1807 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 948+ 1809 13                       inc     DE              ; next source
 949+ 180A 23                       inc     HL              ; next comparison
 950+ 180B 10 F8                    djnz    CHKDSKVAL1      ; repeat
 951+ 180D 2A F1 60                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 952+ 1810 11 1D 00                 ld      DE,$001D        ; point to address of data area
 953+ 1813 19                       add     HL,DE           ; set pointer to beginning of identifies
 954+ 1814 CD 4C 18                 call    HL2DE           ; first sector of data area into DE
 955+ 1817 AF                       xor     A               ; no error - clear Carry flag
 956+ 1818 18 01                    jr      CHKDSKVAL2      ; jump over
 957+ 181A 37           CHKDSKVALE: scf                     ; error - set carry flag
 958+ 181B E1           CHKDSKVAL2: pop     HL
 959+ 181C D1                       pop     DE
 960+ 181D C1                       pop     BC
 961+ 181E C9                       ret                     ; return to caller
 962+ 181F
 963+ 181F
 964+ 181F              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 965+ 181F              ; Inputs: DE: pointer to dest. buffer
 966+ 181F              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 967+ 181F              ; destroys: A, BC, DE, HL
 968+ 181F ED 4B 62 61  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 969+ 1823 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 970+ 1824 FE 11                    cp      $11             ; is it <=16?
 971+ 1826 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 972+ 1828 0E 10                    ld      C,$10           ; no, get only 16 chars
 973+ 182A 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 974+ 182B 0E 10                    ld      C,$10           ; char counter
 975+ 182D 2A 60 61                 ld      HL,(DKNMPT)     ; pointer to disk name
 976+ 1830 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 977+ 1831 CD 9E 18                 call    CHK_NAM         ; check if valid
 978+ 1834 D8                       ret     C               ; no, file name error
 979+ 1835 12                       ld      (DE),A          ; yes, store char
 980+ 1836 13                       inc     DE              ; next I/O location
 981+ 1837 23                       inc     HL              ; next disk name char
 982+ 1838 0D                       dec     C               ; decrement number of chars copied
 983+ 1839 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 984+ 183B 79                       ld      A,C             ; check if there are no empty chars in file
 985+ 183C B7                       or      A
 986+ 183D C8                       ret     Z               ; yes, job finished - return
 987+ 183E 3E 20                    ld      A,SPC           ; no, padding required
 988+ 1840 12           CHKNMVAL3:  ld      (DE),A          ; store char
 989+ 1841 13                       inc     DE              ; next location
 990+ 1842 0D                       dec     C               ; check if padding is over
 991+ 1843 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 992+ 1845 AF                       xor     A               ; clear Carry flag
 993+ 1846 C9                       ret                     ; return to caller
 994+ 1847
 995+ 1847
 996+ 1847              ; store DE into (HL) and (HL+1)
 997+ 1847 73           DE2HL:      ld      (HL),E          ; LSB of size
 998+ 1848 23                       inc     HL
 999+ 1849 72                       ld      (HL),D          ; MSB of size
1000+ 184A 23                       inc     HL
1001+ 184B C9                       ret                     ; return to caller
1002+ 184C
1003+ 184C
1004+ 184C              ; get DE from (HL) and (HL+1)
1005+ 184C 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
1006+ 184D 23                       inc     HL              ; next location
1007+ 184E 56                       ld      D,(HL)          ; get MSB into D
1008+ 184F 23                       inc     HL              ; next location
1009+ 1850 C9                       ret                     ; return to caller
1010+ 1851
1011+ 1851
1012+ 1851              ; convert a 16/32-bit number into an ASCII string and print it
1013+ 1851              ; inputs: HL pointer to 32-bit number
1014+ 1851 CD 4C 18     PRN32ASCII: call    HL2DE           ; load MSB into DE  <-- entry for 32-bit
1015+ 1854 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
1016+ 1855 23                       inc     HL
1017+ 1856 46                       ld      B,(HL)
1018+ 1857 C5                       push    BC              ; copy BC...
1019+ 1858 DD E1                    pop     IX              ; ...into IX
1020+ 185A FD 21 07 61  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
1021+ 185E CD E8 4D                 call    CLCN32          ; convert number in DEIX into ASCII number
1022+ 1861 21 07 61                 ld      HL,TPBF1        ; address of ASCII number
1023+ 1864 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
1024+ 1865 B7                       or      A               ; is it $00 (end of string)?
1025+ 1866 C8                       ret     Z               ; yes, leave
1026+ 1867 CD 98 23                 call    OUTC            ; no, print char
1027+ 186A 23                       inc     HL              ; next char
1028+ 186B 18 F7                    jr      PRNTSIZ         ; repeat
1029+ 186D
1030+ 186D
1031+ 186D              ; convert one or more bytes into memory in hex format
1032+ 186D              ; HL: pointer to number in memory - B: number of bytes to convert
1033+ 186D              ; destroys: A, D, HL
1034+ 186D 50           PRN_HEX:    ld      D,B             ; move bytes into D
1035+ 186E 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1036+ 186F CD 8E 18                 call    BYTEHEX         ; print hex number
1037+ 1872 23                       inc     HL              ; next location
1038+ 1873 15                       dec     D               ; decrement bytes to convert
1039+ 1874 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1040+ 1876 C9                       ret
1041+ 1877
1042+ 1877
1043+ 1877              ; convert one or more words into memory in hex format
1044+ 1877              ; IX: pointer to number in memory - B: number of words to convert
1045+ 1877              ; destroys: AF, IX
1046+ 1877 D5           PRN_WHEX:   push    DE
1047+ 1878 50                       ld      D,B
1048+ 1879 DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1049+ 187C CD 8E 18                 call    BYTEHEX         ; print hex number
1050+ 187F DD 7E 00                 ld      A,(IX)          ; load LSB into A
1051+ 1882 CD 8E 18                 call    BYTEHEX         ; print hex number
1052+ 1885 DD 23                    inc     IX
1053+ 1887 DD 23                    inc     IX              ; next word
1054+ 1889 15                       dec     D               ; decrement words to convert
1055+ 188A 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1056+ 188C D1                       pop     DE
1057+ 188D C9                       ret
1058+ 188E
1059+ 188E
1060+ 188E              ; print A in hex format
1061+ 188E C5           BYTEHEX:    push    BC
1062+ 188F D5                       push    DE
1063+ 1890 CD 34 4C                 call    BYT2ASC         ; convert to HEX and get back into BC
1064+ 1893 78                       ld      A,B
1065+ 1894 CD 98 23                 call    OUTC            ; print left nibble
1066+ 1897 79                       ld      A,C
1067+ 1898 CD 98 23                 call    OUTC            ; print right nibble
1068+ 189B D1                       pop     DE
1069+ 189C C1                       pop     BC
1070+ 189D C9                       ret                     ; return to caller
1071+ 189E
1072+ 189E
1073+ 189E              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9', 'A'-'Z', '-', SPACE
1074+ 189E              ; input: A -> char to check
1075+ 189E              ; return: C is set if ERROR, reset otherwise
1076+ 189E FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1077+ 18A0 C8                       ret     Z               ; return if equal (C is reset)
1078+ 18A1 FE 2D                    cp      '-'             ; is it a minus?
1079+ 18A3 C8                       ret     Z               ; return if equal
1080+ 18A4 FE 30                    cp      '0'             ; char < '0' ?
1081+ 18A6 D8                       ret     C               ; yes, disk name error
1082+ 18A7 FE 3A                    cp      ':'             ; is char <= '9' ?
1083+ 18A9 38 07                    jr      C,CHK_C_CF      ; yes, leave
1084+ 18AB E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1085+ 18AD FE 41                    cp      'A'             ; is char >= 'A' ?
1086+ 18AF D8                       ret     C               ; no, error
1087+ 18B0 FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1088+ 18B2 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1089+ 18B3 C9           CHK_NAM_LV: ret                     ; return to caller
1090+ 18B4
1091+ 18B4
1092+ 18B4              ; clear I/O buffer
1093+ 18B4 F5           CLRIOBF:    push    AF              ; store AF
1094+ 18B5 C5                       push    BC              ; store BC
1095+ 18B6 E5                       push    HL              ; store HL
1096+ 18B7 2A F3 60                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1097+ 18BA 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1098+ 18BD AF           CLRBUFF:    xor     A               ; reset A   ----- common part -----
1099+ 18BE 77           RSTIOBF:    ld      (HL),A          ; reset cell
1100+ 18BF 23                       inc     HL              ; next cell
1101+ 18C0 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1102+ 18C2 0D                       dec     C               ; decrement C
1103+ 18C3 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1104+ 18C5 E1                       pop     HL              ; retrieve HL
1105+ 18C6 C1                       pop     BC              ; retrieve BC
1106+ 18C7 F1                       pop     AF              ; retrieve AF
1107+ 18C8 C9                       ret                     ; return to caller
1108+ 18C9
1109+ 18C9
1110+ 18C9              ; clear DOS buffer
1111+ 18C9 F5           CLRDOSBF:   push    AF              ; store AF
1112+ 18CA C5                       push    BC              ; store BC
1113+ 18CB E5                       push    HL              ; store HL
1114+ 18CC 2A F1 60                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1115+ 18CF 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1116+ 18D2 C3 BD 18                 jp      CLRBUFF         ; continue to common part
# file closed: ../include/dos/dos-1.02.asm
  84  18D5
  85  18D5              ; include the latest version of the LM80C 64K BASIC interpreter
  86  18D5                  INCLUDE "../include/basic/basic-1.07.asm"
# file opened: ../include/basic/basic-1.07.asm
   1+ 18D5              ; ------------------------------------------------------------------------------
   2+ 18D5              ; LM80C BASIC (32K/64K) - R3.21
   3+ 18D5              ; ------------------------------------------------------------------------------
   4+ 18D5              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18D5              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18D5              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18D5              ; kind of warranty: you can use them at your own risk.
   8+ 18D5              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18D5              ; maintain the copyright notices, include this advice and the note to the
  10+ 18D5              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18D5              ; redistribuite them.
  12+ 18D5              ; https://www.leonardomiliani.com
  13+ 18D5              ;
  14+ 18D5              ; Please support me by visiting the following links:
  15+ 18D5              ; Main project page: https://www.leonardomiliani.com
  16+ 18D5              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18D5              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18D5              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18D5              ; ------------------------------------------------------------------------------
  20+ 18D5              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18D5              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18D5              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18D5
  24+ 18D5
  25+ 18D5              ;------------------------------------------------------------------------------
  26+ 18D5              ;  L M 8 0 C   B A S I C
  27+ 18D5              ;------------------------------------------------------------------------------
  28+ 18D5
  29+ 18D5              ; GENERAL EQUATES
  30+ 18D5
  31+ 18D5              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18D5              CTRLC           equ     $03             ; Control "C"
  33+ 18D5              CTRLG           equ     $07             ; Control "G"
  34+ 18D5              BKSP            equ     $08             ; Back space
  35+ 18D5              LF              equ     $0A             ; Line feed
  36+ 18D5              CS              equ     $0C             ; Clear screen
  37+ 18D5              CR              equ     $0D             ; Carriage return
  38+ 18D5              CTRLO           equ     $0F             ; Control "O"
  39+ 18D5              CTRLQ           equ     $11             ; Control "Q"
  40+ 18D5              CTRLR           equ     $12             ; Control "R"
  41+ 18D5              CTRLS           equ     $13             ; Control "S"
  42+ 18D5              CTRLU           equ     $15             ; Control "U"
  43+ 18D5              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18D5              ESC             equ     $1B             ; Escape
  45+ 18D5              SPC             equ     $20             ; Space
  46+ 18D5              DEL             equ     $7F             ; Delete
  47+ 18D5              INSRT           equ     $1A             ; Insert Key
  48+ 18D5              ; cursor ASCII codes
  49+ 18D5              CRSLFT          equ     $1C             ; cursor left
  50+ 18D5              CRSRGT          equ     $1D             ; cursor right
  51+ 18D5              CRSUP           equ     $1E             ; cursor up
  52+ 18D5              CRSDN           equ     $1F             ; cursor down
  53+ 18D5
  54+ 18D5
  55+ 18D5              ;-------------------------------------------------------------------------
  56+ 18D5              ; BASIC ERROR MESSAGES
  57+ 18D5              ; the interpreter looks for a single-byte code in the following list,
  58+ 18D5              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18D5              ; find where to retrieve the message text in "ERRORS"
  60+ 18D5
  61+ 18D5              ; BASIC ERROR CODE VALUES
  62+ 18D5              ; These values act as an offset to point to the error message into the error table
  63+ 18D5              ; must be incremented by 2 because they point to a word address jump
  64+ 18D5              NF      equ     $00     ; NEXT without FOR
  65+ 18D5              SN      equ     $02     ; Syntax error
  66+ 18D5              RG      equ     $04     ; RETURN without GOSUB
  67+ 18D5              OD      equ     $06     ; Out of DATA
  68+ 18D5              FC      equ     $08     ; Function call error
  69+ 18D5              OV      equ     $0A     ; Overflow
  70+ 18D5              OM      equ     $0C     ; Out of memory
  71+ 18D5              UL      equ     $0E     ; Undefined line number
  72+ 18D5              BS      equ     $10     ; Bad subscript
  73+ 18D5              DD      equ     $12     ; Re-Dimensioned array
  74+ 18D5              DZ      equ     $14     ; Division by zero (/0)
  75+ 18D5              ID      equ     $16     ; Illegal direct
  76+ 18D5              TM      equ     $18     ; Type mis-match
  77+ 18D5              OS      equ     $1A     ; Out of string space
  78+ 18D5              LS      equ     $1C     ; String too long
  79+ 18D5              ST      equ     $1E     ; String formula too complex
  80+ 18D5              CN      equ     $20     ; Can't continue
  81+ 18D5              UF      equ     $22     ; Undefined FN function
  82+ 18D5              MO      equ     $24     ; Missing operand
  83+ 18D5              HX      equ     $26     ; HEX error
  84+ 18D5              BN      equ     $28     ; BIN error
  85+ 18D5              GM      equ     $2A     ; No Graphics Mode
  86+ 18D5              SC      equ     $2C     ; Serial configuration
  87+ 18D5              SA      equ     $2E     ; Serial port already open
  88+ 18D5              SO      equ     $30     ; Serial buffer overrun
  89+ 18D5              HP      equ     $32     ; HELP call
  90+ 18D5              IM      equ     $34     ; Illegal indirect
  91+ 18D5              NR      equ     $36     ; Device not ready
  92+ 18D5              D0      equ     $38     ; DOS not enabled
  93+ 18D5              D1      equ     $3A     ; Disk/File name error
  94+ 18D5              D2      equ     $3C     ; Disk geometry error
  95+ 18D5              D3      equ     $3E     ; Save error
  96+ 18D5              D4      equ     $40     ; Load error
  97+ 18D5              D5      equ     $42     ; Disk full error
  98+ 18D5              D6      equ     $44     ; Duplicate file name error
  99+ 18D5              D7      equ     $46     ; DOS version error
 100+ 18D5              D8      equ     $48     ; File not found error
 101+ 18D5
 102+ 18D5
 103+ 18D5              ; BASIC ERROR POINTER TABLE
 104+ 18D5              ERRTBL: equ $
 105+ 18D5 1F 19        NFPTR:  defw    NFMSG
 106+ 18D7 30 19        SNPTR:  defw    SNMSG
 107+ 18D9 37 19        RGPTR:  defw    RGMSG
 108+ 18DB 4C 19        ODPTR:  defw    ODMSG
 109+ 18DD 58 19        FCPTR:  defw    FCMSG
 110+ 18DF 6E 19        OVPTR:  defw    OVMSG
 111+ 18E1 77 19        OMPTR:  defw    OMMSG
 112+ 18E3 85 19        ULPTR:  defw    ULMSG
 113+ 18E5 94 19        BSPTR:  defw    BSMSG
 114+ 18E7 A2 19        DDPTR:  defw    DDMSG
 115+ 18E9 B7 19        DZPTR:  defw    DZMSG
 116+ 18EB C8 19        IDPTR:  defw    IDMSG
 117+ 18ED DC 19        TMPTR:  defw    TMMSG
 118+ 18EF EB 19        OSPTR:  defw    OSMSG
 119+ 18F1 FF 19        LSPTR:  defw    LSMSG
 120+ 18F3 0F 1A        STPTR:  defw    STMSG
 121+ 18F5 2A 1A        CNPTR:  defw    CNMSG
 122+ 18F7 39 1A        UFPTR:  defw    UFMSG
 123+ 18F9 4F 1A        MOPTR:  defw    MOMSG
 124+ 18FB 5F 1A        HXPTR:  defw    HXMSG
 125+ 18FD 6A 1A        BNPTR:  defw    BNMSG
 126+ 18FF 75 1A        GMPRT:  defw    GMMSG
 127+ 1901 86 1A        SCPTR:  defw    SCMSG
 128+ 1903 9B 1A        SAPTR:  defw    SAMSG
 129+ 1905 B4 1A        SOPTR:  defw    SOMSG
 130+ 1907 CA 1A        HPPTR:  defw    HPMSG
 131+ 1909 D4 1A        IMPRT:  defw    IMMSG
 132+ 190B EA 1A        NRPRT:  defw    NRMSG
 133+ 190D FB 1A        D0PTR:  defw    D0MSG
 134+ 190F 0B 1B        D1PRT:  defw    D1MSG
 135+ 1911 17 1B        D2PRT:  defw    D2MSG
 136+ 1913 25 1B        D3PRT:  defw    D3MSG
 137+ 1915 2A 1B        D4PTR:  defw    D4MSG
 138+ 1917 2F 1B        D5PTR:  defw    D5MSG
 139+ 1919 39 1B        D6PTR:  defw    D6MSG
 140+ 191B 4D 1B        D7PRT:  defw    D7MSG
 141+ 191D 59 1B        D8PTR:  defw    D8MSG
 142+ 191F
 143+ 191F
 144+ 191F              ; BASIC ERROR MESSAGE LIST
 145+ 191F              ERRORS  equ $
 146+ 191F 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 1923 20 57 69 74
 146+ 1927 68 6F 75 74
 146+ 192B 20 46 4F 52
 146+ 192F 00
 147+ 1930 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 1934 61 78 00
 148+ 1937 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 193B 52 4E 20 77
 148+ 193F 69 74 68 6F
 148+ 1943 75 74 20 47
 148+ 1947 4F 53 55 42
 148+ 194B 00
 149+ 194C 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 1950 6F 66 20 44
 149+ 1954 41 54 41 00
 150+ 1958 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 195C 67 61 6C 20
 150+ 1960 46 75 6E 63
 150+ 1964 74 69 6F 6E
 150+ 1968 20 43 61 6C
 150+ 196C 6C 00
 151+ 196E 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1972 66 6C 6F 77
 151+ 1976 00
 152+ 1977 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 197B 6F 66 20 4D
 152+ 197F 65 6D 6F 72
 152+ 1983 79 00
 153+ 1985 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 1989 66 69 6E 65
 153+ 198D 64 20 4C 69
 153+ 1991 6E 65 00
 154+ 1994 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 1998 53 75 62 73
 154+ 199C 63 72 69 70
 154+ 19A0 74 00
 155+ 19A2 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 19A6 69 6D 65 6E
 155+ 19AA 73 69 6F 6E
 155+ 19AE 65 64 20 41
 155+ 19B2 72 72 61 79
 155+ 19B6 00
 156+ 19B7 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 19BB 73 69 6F 6E
 156+ 19BF 20 62 79 20
 156+ 19C3 5A 65 72 6F
 156+ 19C7 00
 157+ 19C8 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 19CC 67 61 6C 20
 157+ 19D0 44 69 72 65
 157+ 19D4 63 74 20 4D
 157+ 19D8 6F 64 65 00
 158+ 19DC 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 19E0 20 4D 69 73
 158+ 19E4 2D 6D 61 74
 158+ 19E8 63 68 00
 159+ 19EB 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 19EF 6F 66 20 53
 159+ 19F3 74 72 69 6E
 159+ 19F7 67 20 53 70
 159+ 19FB 61 63 65 00
 160+ 19FF 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 1A03 6E 67 20 54
 160+ 1A07 6F 6F 20 4C
 160+ 1A0B 6F 6E 67 00
 161+ 1A0F 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 1A13 6E 67 20 46
 161+ 1A17 6F 72 6D 75
 161+ 1A1B 6C 61 20 54
 161+ 1A1F 6F 6F 20 43
 161+ 1A23 6F 6D 70 6C
 161+ 1A27 65 78 00
 162+ 1A2A 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A2E 74 20 43 6F
 162+ 1A32 6E 74 69 6E
 162+ 1A36 75 65 00
 163+ 1A39 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A3D 66 69 6E 65
 163+ 1A41 64 20 46 4E
 163+ 1A45 20 46 75 6E
 163+ 1A49 63 74 69 6F
 163+ 1A4D 6E 00
 164+ 1A4F 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A53 69 6E 67 20
 164+ 1A57 4F 70 65 72
 164+ 1A5B 61 6E 64 00
 165+ 1A5F 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A63 46 6F 72 6D
 165+ 1A67 61 74 00
 166+ 1A6A 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A6E 46 6F 72 6D
 166+ 1A72 61 74 00
 167+ 1A75 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A79 72 61 70 68
 167+ 1A7D 69 63 73 20
 167+ 1A81 4D 6F 64 65
 167+ 1A85 00
 168+ 1A86 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1A8A 61 6C 20 43
 168+ 1A8E 6F 6E 66 69
 168+ 1A92 67 75 72 61
 168+ 1A96 74 69 6F 6E
 168+ 1A9A 00
 169+ 1A9B 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1A9F 61 6C 20 50
 169+ 1AA3 6F 72 74 20
 169+ 1AA7 41 6C 72 65
 169+ 1AAB 61 64 79 20
 169+ 1AAF 4F 70 65 6E
 169+ 1AB3 00
 170+ 1AB4 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1AB8 61 6C 20 42
 170+ 1ABC 75 66 66 65
 170+ 1AC0 72 20 4F 76
 170+ 1AC4 65 72 72 75
 170+ 1AC8 6E 00
 171+ 1ACA 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1ACE 20 43 61 6C
 171+ 1AD2 6C 00
 172+ 1AD4 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1AD8 67 61 6C 20
 172+ 1ADC 49 6E 64 69
 172+ 1AE0 72 65 63 74
 172+ 1AE4 20 4D 6F 64
 172+ 1AE8 65 00
 173+ 1AEA 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1AEE 63 65 20 4E
 173+ 1AF2 6F 74 20 52
 173+ 1AF6 65 61 64 79
 173+ 1AFA 00
 174+ 1AFB 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1AFF 4E 6F 74 20
 174+ 1B03 45 6E 61 62
 174+ 1B07 6C 65 64 00
 175+ 1B0B 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1B0F 20 53 74 72
 175+ 1B13 69 6E 67 00
 176+ 1B17 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1B1B 20 47 65 6F
 176+ 1B1F 6D 65 74 72
 176+ 1B23 79 00
 177+ 1B25 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1B29 00
 178+ 1B2A 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B2E 00
 179+ 1B2F 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B33 20 46 75 6C
 179+ 1B37 6C 00
 180+ 1B39 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B3D 69 63 61 74
 180+ 1B41 65 20 46 69
 180+ 1B45 6C 65 20 4E
 180+ 1B49 61 6D 65 00
 181+ 1B4D 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B51 56 65 72 73
 181+ 1B55 69 6F 6E 00
 182+ 1B59 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B5D 20 4E 6F 74
 182+ 1B61 20 46 6F 75
 182+ 1B65 6E 64 00
 183+ 1B68
 184+ 1B68
 185+ 1B68              ;-----------------------------------------------------------------------------
 186+ 1B68              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B68              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B68              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B68
 190+ 1B68 C3 6E 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B6B C3 36 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B6E
 193+ 1B6E C3 75 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B71 8C 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B73 51 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B75 21 B7 5F     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B78 F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B79 C3 0A 4D             jp      INITST          ; Go to initialise
 199+ 1B7C
 200+ 1B7C 21 26 1F     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1B7F 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1B82 11 B7 5F             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1B85 ED B0                ldir                    ; Copy data
 204+ 1B87 EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1B88 F9                   ld      SP,HL           ; Temporary stack
 206+ 1B89 CD EF 21             call    CLREG           ; Clear registers and stack
 207+ 1B8C CD A3 28             call    PRNTCRLF        ; Output CRLF
 208+ 1B8F 32 EA 60             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1B92 32 C7 61             ld      (PROGST),A      ; Initialise program area
 210+ 1B95 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1B97 21 BA 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1B9A CD 6F 2F             call    PRS             ; Output "Memory size"
 213+ 1B9D CD 0C 22             call    PROMPT          ; Get input with '?'
 214+ 1BA0 CD 23 09             call    CURSOR_ON       ; enable cursor
 215+ 1BA3 CD D6 25             call    GETCHR          ; Get next character
 216+ 1BA6 B7                   or      A               ; Set flags
 217+ 1BA7 C2 BF 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1BAA 21 2B 62     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1BAD 23           MLOOP:  inc     HL              ; Next byte
 220+ 1BAE 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1BAF B5                   or      L
 222+ 1BB0 CA D1 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1BB3 7E                   ld      A,(HL)          ; Get contents
 224+ 1BB4 47                   ld      B,A             ; Save it
 225+ 1BB5 2F                   cpl                     ; Flip all bits
 226+ 1BB6 77                   ld      (HL),A          ; Put it back
 227+ 1BB7 BE                   cp      (HL)            ; RAM there if same
 228+ 1BB8 70                   ld      (HL),B          ; Restore old contents
 229+ 1BB9 CA AD 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1BBC C3 D1 1B             jp      SETTOP          ; Top of RAM found
 231+ 1BBF
 232+ 1BBF CD A6 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1BC2 B7                   or      A               ; Set flags on last byte
 234+ 1BC3 C2 8D 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1BC6 EB                   ex      DE,HL           ; Address into HL
 236+ 1BC7 2B                   dec     HL              ; Back one byte
 237+ 1BC8 3E D9                ld      A,%11011001     ; Test byte
 238+ 1BCA 46                   ld      B,(HL)          ; Get old contents
 239+ 1BCB 77                   ld      (HL),A          ; Load test byte
 240+ 1BCC BE                   cp      (HL)            ; RAM there if same
 241+ 1BCD 70                   ld      (HL),B          ; Restore old contents
 242+ 1BCE C2 97 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BD1
 244+ 1BD1 CD 38 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BD4 2B                   dec     HL              ; Back one byte
 246+ 1BD5 11 2A 62             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BD8 CD 87 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BDB DA 97 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1BDE 3A A3 61             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1BE1 1F                   rra                     ; is DOS disabled?
 251+ 1BE2 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1BE4 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1BE7 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1BE8 22 F3 60             ld      (IOBUFF),HL     ; ...and store address
 255+ 1BEB 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1BEE 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1BEF 22 F1 60             ld      (DOSBFR),HL     ; ...and store address
 258+ 1BF2 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1BF5 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1BF6 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1BF9 22 EF 60             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1BFC 19                   add     HL,DE           ; Allocate string space
 263+ 1BFD 22 06 60             ld      (STRSPC),HL     ; Save string space
 264+ 1C00 CD CA 21             call    CLRPTR          ; Clear program area
 265+ 1C03 2A 06 60             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1C06 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1C09 19                   add     HL,DE           ; Adjust HL
 268+ 1C0A 11 C7 61             ld      DE,PROGST       ; Start of program text
 269+ 1C0D 7D                   ld      A,L             ; Get LSB
 270+ 1C0E 93                   sub     E               ; Adjust it
 271+ 1C0F 6F                   ld      L,A             ; Re-save
 272+ 1C10 7C                   ld      A,H             ; Get MSB
 273+ 1C11 9A                   sbc     A,D             ; Adjust it
 274+ 1C12 67                   ld      H,A             ; Re-save
 275+ 1C13 E5                   push    HL              ; Save bytes free
 276+ 1C14 21 5C 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1C17 CD 6F 2F             call    PRS             ; Output string
 278+ 1C1A 3A A3 61             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1C1D B7                   or      A
 280+ 1C1E 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1C20 21 9D 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1C23 CD 6F 2F             call    PRS
 283+ 1C26 21 45 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1C29 CD 6F 2F             call    PRS             ; Output string
 285+ 1C2C E1                   pop     HL              ; Get bytes free back
 286+ 1C2D CD 0E 3A             call    PRNTHL          ; Output amount of free memory
 287+ 1C30 21 4E 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C33 CD 6F 2F             call    PRS             ; Output string
 289+ 1C36
 290+ 1C36 31 96 60     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C39 CD EF 21     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C3C CD 33 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C3F CD 23 09             call    CURSOR_ON       ; enable cursor
 294+ 1C42 C3 ED 20             jp      PRNTOK          ; Go to get command line
 295+ 1C45
 296+ 1C45 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C49 20 20 20 20
 296+ 1C4D 00
 297+ 1C4E 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C52 65 73 20 66
 297+ 1C56 72 65 65 0D
 297+ 1C5A 0D 00
 298+ 1C5C
 299+ 1C5C 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.21 ",251,"2021 L.Miliani"
 299+ 1C60 43 20 42 41
 299+ 1C64 53 49 43 20
 299+ 1C68 33 2E 32 31
 299+ 1C6C 20 FB 32 30
 299+ 1C70 32 31 20 4C
 299+ 1C74 2E 4D 69 6C
 299+ 1C78 69 61 6E 69
 300+ 1C7C 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1C80 20 42 41 53
 300+ 1C84 49 43 20 34
 300+ 1C88 2E 37 20 20
 300+ 1C8C FB 31 39 37
 300+ 1C90 38 20 4D 69
 300+ 1C94 63 72 6F 73
 300+ 1C98 6F 66 74 0D
 300+ 1C9C 00
 301+ 1C9D 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.02","  Loaded",CR,0
 301+ 1CA1 20 4C 4D 38
 301+ 1CA5 30 43 20 44
 301+ 1CA9 4F 53 20 31
 301+ 1CAD 2E 30 32 20
 301+ 1CB1 20 4C 6F 61
 301+ 1CB5 64 65 64 0D
 301+ 1CB9 00
 302+ 1CBA
 303+ 1CBA 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1CBE 72 79 20 74
 303+ 1CC2 6F 70 00
 304+ 1CC5
 305+ 1CC5              ; The following list reports all the functions supported by the interpreter.
 306+ 1CC5              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1CC5              ; then into the list of the reserved words below, and finally must increment the
 308+ 1CC5              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1CC5              ; function.
 310+ 1CC5
 311+ 1CC5              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1CC5              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1CC5              ; entry here must have the corresponding entry in the tokens list.
 314+ 1CC5 83 38        FNCTAB: defw    SGN
 315+ 1CC7 19 2E                defw    TMR         ; added by Leonardo Miliani
 316+ 1CC9 47 39                defw    INT
 317+ 1CCB 99 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1CCD BD 5F                defw    USR
 319+ 1CCF 2F 2E                defw    FRE
 320+ 1CD1 AA 32                defw    INP
 321+ 1CD3 5D 2E                defw    POS
 322+ 1CD5 0D 3B                defw    SQR
 323+ 1CD7 EC 3B                defw    RND
 324+ 1CD9 D7 36                defw    LOG
 325+ 1CDB 5B 3B                defw    EXP
 326+ 1CDD 61 3C                defw    COS
 327+ 1CDF 67 3C                defw    SIN
 328+ 1CE1 C8 3C                defw    TAN
 329+ 1CE3 DD 3C                defw    ATN
 330+ 1CE5 86 33                defw    PEEK
 331+ 1CE7 48 3D                defw    DEEK
 332+ 1CE9 8D 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1CEB 5C 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1CED 67 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1CEF 7B 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1CF1 9F 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1CF3 41 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1CF5 E1 30                defw    LEN
 339+ 1CF7 F9 2E                defw    STR
 340+ 1CF9 71 32                defw    VAL
 341+ 1CFB F0 30                defw    ASC
 342+ 1CFD 01 31                defw    CHR
 343+ 1CFF FE 4B                defw    HEX         ; added by Grant Searle
 344+ 1D01 8F 4C                defw    BIN         ; added by Grant Searle
 345+ 1D03 11 31                defw    LEFT
 346+ 1D05 37 32                defw    RIGHT
 347+ 1D07 41 32                defw    MID
 348+ 1D09
 349+ 1D09              ; RESERVED WORD LIST
 350+ 1D09              ; Here are all the reserved words used by the interpreter
 351+ 1D09              ; To add custom functions/commands, the user must insert the keyword
 352+ 1D09              ; in this list, following the schematic
 353+ 1D09 C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1D0C C6 4F 52             defb    'F'+$80,"OR"
 355+ 1D0F CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1D13 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1D17 C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1D1B 54
 358+ 1D1C C4 49 4D             defb    'D'+$80,"IM"
 359+ 1D1F D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1D23 CC 45 54             defb    'L'+$80,"ET"
 361+ 1D26 C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1D2A D2 55 4E             defb    'R'+$80,"UN"
 363+ 1D2D C9 46                defb    'I'+$80,"F"
 364+ 1D2F D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D33 4F 52 45
 365+ 1D36 C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D3A 42
 366+ 1D3B D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D3F 52 4E
 367+ 1D41 D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D44 D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D48 CF 55 54             defb    'O'+$80,"UT"
 370+ 1D4B CF 4E                defb    'O'+$80,"N"
 371+ 1D4D C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D51 53
 372+ 1D52 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D56 45
 373+ 1D57 C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D5B D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D5F C4 45 46             defb    'D'+$80,"EF"
 376+ 1D62 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D66 C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D6A D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D6E 45
 379+ 1D6F D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D73 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D77 D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D7B 45 4E
 382+ 1D7D CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1D81 54 45
 383+ 1D83 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1D87 44
 384+ 1D88 D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1D8C 4D 45
 385+ 1D8E D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1D92 45
 386+ 1D93 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1D97 52
 387+ 1D98 D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1D9C C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1DA0 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1DA4 4C 45
 390+ 1DA6 D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1DAA 54
 391+ 1DAB D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1DAF 41 4C
 392+ 1DB1 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1DB5 C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1DB8 CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1DBB CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1DBE C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1DC2 4E 54
 397+ 1DC4 D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1DC8 48
 398+ 1DC9 D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1DCC D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DD0 54
 400+ 1DD1 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DD5 D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DD9 54
 402+ 1DDA C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1DDE CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1DE2 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1DE6 52
 405+ 1DE7 CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1DEB D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1DEF CE 45 57             defb    'N'+$80,"EW"
 408+ 1DF2 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1DF6 D4 4F                defb    'T'+$80,"O"
 410+ 1DF8 C6 4E                defb    'F'+$80,"N"
 411+ 1DFA D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1DFE D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1E02 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1E05 D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1E09                      ; from here: operators
 416+ 1E09 AB                   defb    '+'+$80
 417+ 1E0A AD                   defb    '-'+$80
 418+ 1E0B AA                   defb    '*'+$80
 419+ 1E0C AF                   defb    '/'+$80
 420+ 1E0D A5                   defb    '%'+$80
 421+ 1E0E A3                   defb    '#'+$80
 422+ 1E0F DE                   defb    '^'+$80
 423+ 1E10 C1 4E 44             defb    'A'+$80,"ND"
 424+ 1E13 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1E16 CF 52                defb    'O'+$80,"R"
 426+ 1E18 BE                   defb    '>'+$80
 427+ 1E19 BD                   defb    '='+$80
 428+ 1E1A BC                   defb    '<'+$80
 429+ 1E1B
 430+ 1E1B                      ; from here there are the tokens' FUNCTIONS list
 431+ 1E1B                      ; this list must be coherent with the functions list above
 432+ 1E1B D3 47 4E             defb    'S'+$80,"GN"
 433+ 1E1E D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1E21 C9 4E 54             defb    'I'+$80,"NT"
 435+ 1E24 C1 42 53             defb    'A'+$80,"BS"
 436+ 1E27 D5 53 52             defb    'U'+$80,"SR"
 437+ 1E2A C6 52 45             defb    'F'+$80,"RE"
 438+ 1E2D C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E30 D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E33 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E36 D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E39 CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E3C C5 58 50             defb    'E'+$80,"XP"
 444+ 1E3F C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E42 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E45 D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E48 C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E4B D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E4F C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E53 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E57 4B
 451+ 1E58 D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E5C 54
 452+ 1E5D D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E61 54
 453+ 1E62 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E66 59
 454+ 1E67 D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E6B 54
 455+ 1E6C C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E70 52
 456+ 1E71 CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E74 D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E78 D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E7B C1 53 43             defb    'A'+$80,"SC"
 460+ 1E7E C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1E82 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1E86 C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1E8A CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1E8E 24
 464+ 1E8F D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1E93 54 24
 465+ 1E95 CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1E99 80                   defb    $80                     ; End-of-list marker
 467+ 1E9A
 468+ 1E9A              ; KEYWORD ADDRESS TABLE
 469+ 1E9A              ; this list must be coherent with the commands'
 470+ 1E9A              ; tokens list above
 471+ 1E9A 20 26        WORDTB: defw    PEND
 472+ 1E9C 1D 25                defw    FOR
 473+ 1E9E 1C 2A                defw    NEXT
 474+ 1EA0 7F 27                defw    DATA
 475+ 1EA2 19 29                defw    INPUT
 476+ 1EA4 71 2C                defw    DIM
 477+ 1EA6 53 29                defw    READ
 478+ 1EA8 96 27                defw    LET
 479+ 1EAA 3C 27                defw    GOTO
 480+ 1EAC 17 27                defw    RUN
 481+ 1EAE 0E 28                defw    IF
 482+ 1EB0 E6 25                defw    RESTOR
 483+ 1EB2 2B 27                defw    GOSUB
 484+ 1EB4 5A 27                defw    RETURN
 485+ 1EB6 81 27                defw    REM         ; original REM
 486+ 1EB8 1E 26                defw    STOP
 487+ 1EBA B6 32                defw    POUT
 488+ 1EBC F0 27                defw    ON
 489+ 1EBE C1 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1EC0 FC 49                defw    ERASE       ; added by Leonardo Miliani
 491+ 1EC2 5C 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1EC4 BC 32                defw    WAIT
 493+ 1EC6 65 2E                defw    DEF
 494+ 1EC8 B0 33                defw    POKE
 495+ 1ECA 53 3D                defw    DOKE
 496+ 1ECC B5 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1ECE F2 33                defw    SREG        ; added by Leonardo Miliani
 498+ 1ED0 40 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1ED2 89 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1ED4 C0 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1ED6 4C 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1ED8 13 34                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1EDA 6A 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1EDC 04 3E                defw    COLOR       ; added by Leonardo Miliani
 505+ 1EDE F2 40                defw    PLOT        ; added by Leonardo Miliani
 506+ 1EE0 85 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1EE2 BE 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1EE4 AF 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1EE6 C9 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1EE8 08 47                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1EEA 2C 3D                defw    CLS
 512+ 1EEC 26 47                defw    KEY         ; added by Leonardo Miliani
 513+ 1EEE FE 32                defw    NMI         ; added by Leonardo Miliani
 514+ 1EF0 BF 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1EF2 40 3D                defw    WIDTH
 516+ 1EF4 58 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1EF6 F4 4C                defw    RESET       ; new behaviour: now it resets the system
 518+ 1EF8 83 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1EFA 40 28                defw    PRINT
 520+ 1EFC 52 26                defw    CONT
 521+ 1EFE F4 23                defw    LIST
 522+ 1F00 CB 26                defw    CLEAR
 523+ 1F02 9D 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1F04 37 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1F06 C9 21                defw    NEW
 526+ 1F08
 527+ 1F08              ; RESERVED WORD TOKEN VALUES
 528+ 1F08              ; if you add a function or command you must increment by 1
 529+ 1F08              ; the values below. Pay attention that you must increment only the
 530+ 1F08              ; values AFTER the position where you entered the function/command word
 531+ 1F08              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1F08              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1F08              ; that is before the point where VPOKE has been entered, every entry
 534+ 1F08              ; after REM has been incremented.
 535+ 1F08              ; Another example: when TMR has been added, since it's a function, every
 536+ 1F08              ; entry after & included ZSGN must be checked (read below)
 537+ 1F08
 538+ 1F08              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1F08              ZFOR    equ     $81             ; FOR
 540+ 1F08              ZDATA   equ     $83             ; DATA
 541+ 1F08              ZGOTO   equ     $88             ; GOTO
 542+ 1F08              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1F08              ZREM    equ     $8E             ; REM
 544+ 1F08              ZELSE   equ     $AF             ; ELSE
 545+ 1F08              ZPRINT  equ     $B0             ; PRINT
 546+ 1F08              ZNEW    equ     $B6             ; NEW
 547+ 1F08
 548+ 1F08              ZTAB    equ     $B7             ; TAB
 549+ 1F08              ZTO     equ     $B8             ; TO
 550+ 1F08              ZFN     equ     $B9             ; FN
 551+ 1F08              ZSPC    equ     $BA             ; SPC
 552+ 1F08              ZTHEN   equ     $BB             ; THEN
 553+ 1F08              ZNOT    equ     $BC             ; NOT
 554+ 1F08              ZSTEP   equ     $BD             ; STEP
 555+ 1F08
 556+ 1F08              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1F08              ZMINUS  equ     $BF             ; -
 558+ 1F08              ZTIMES  equ     $C0             ; *
 559+ 1F08              ZDIV    equ     $C1             ; /
 560+ 1F08              ZMOD    equ     $C2             ; %
 561+ 1F08              ZDINT   equ     $C3             ; #
 562+ 1F08              ZOR     equ     $C7             ; OR
 563+ 1F08              ZGTR    equ     $C8             ; >
 564+ 1F08              ZEQUAL  equ     $C9             ; M
 565+ 1F08              ZLTH    equ     $CA             ; <
 566+ 1F08
 567+ 1F08              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1F08              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1F08                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1F08              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1F08              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1F08                                              ;               he/she must increment this pointer by 1
 573+ 1F08
 574+ 1F08              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1F08              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1F08              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1F08 79           PRITAB: defb    $79             ; Precedence value
 578+ 1F09 F5 39                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1F0B
 580+ 1F0B 79                   defb    $79             ; Precedence value
 581+ 1F0C D8 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1F0E
 583+ 1F0E 7C                   defb    $7C             ; Precedence value
 584+ 1F0F 16 37                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1F11
 586+ 1F11 7C                   defb    $7C             ; Precedence value
 587+ 1F12 C8 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1F14
 589+ 1F14 7C                   defb    $7C             ; Precedence value
 590+ 1F15 73 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1F17
 592+ 1F17 7C                   defb    $7C             ; precedence value
 593+ 1F18 6B 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1F1A
 595+ 1F1A 7F                   defb    $7F             ; Precedence value
 596+ 1F1B 16 3B                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1F1D
 598+ 1F1D 50                   defb    $50             ; Precedence value
 599+ 1F1E BA 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1F20
 601+ 1F20 4A                   defb    $4A             ; Precedence value
 602+ 1F21 C2 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1F23
 604+ 1F23 46                   defb    $46             ; Precedence value
 605+ 1F24 BD 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1F26
 607+ 1F26
 608+ 1F26              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1F26              ; these values are copied into RAM at startup
 610+ 1F26 C3 36 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1F29 ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1F2C C3 A1 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F2F D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F31 C9                   ret
 615+ 1F32 D6 00                sub     $00             ; Division support routine
 616+ 1F34 6F                   ld      L,A
 617+ 1F35 7C                   ld      A,H
 618+ 1F36 DE 00                sbc     A,$00
 619+ 1F38 67                   ld      H,A
 620+ 1F39 78                   ld      A,B
 621+ 1F3A DE 00                sbc     A,$00
 622+ 1F3C 47                   ld      B,A
 623+ 1F3D 3E 00                ld      A,$00
 624+ 1F3F C9                   ret
 625+ 1F40 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F43 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F47 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F4B 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F4F 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F53 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F57 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F5B 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F5F D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F63 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F67 DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F69 C9                   ret
 637+ 1F6A FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F6B 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F6C 00                   defb    $00             ; No nulls after input bytes
 640+ 1F6D 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F6E 00 00                defw    $00             ; Array load/save check sum
 642+ 1F70 00                   defb    $00             ; Break not by NMI
 643+ 1F71 00                   defb    $00             ; Break flag
 644+ 1F72 C3 0D 23             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F75 2B 62                defw    STLOOK          ; Temp string space
 646+ 1F77 FE FF                defw    -2              ; Current line number (cold)
 647+ 1F79 FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F7B 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1F7C 08                   defb    $08             ; auto-repeat delay
 650+ 1F7D 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1F81 0D 00 00 00
 650+ 1F85 00 00 00 00
 650+ 1F89 00 00 00 00
 651+ 1F8D 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1F91 00 00 00 00
 651+ 1F95 00 00 00 00
 651+ 1F99 00 00 00 00
 652+ 1F9D 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1FA1 45 4E 31 0D
 652+ 1FA5 00 00 00 00
 652+ 1FA9 00 00 00 00
 653+ 1FAD 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1FB1 52 31 2C 31
 653+ 1FB5 35 2C 35 0D
 653+ 1FB9 00 00 00 00
 654+ 1FBD 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1FC1 41 4C 31 2C
 654+ 1FC5 33 38 34 30
 654+ 1FC9 30 0D 00 00
 655+ 1FCD 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FD1 45 4E 32 0D
 655+ 1FD5 00 00 00 00
 655+ 1FD9 00 00 00 00
 656+ 1FDD 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 1FE1 0D 00 00 00
 656+ 1FE5 00 00 00 00
 656+ 1FE9 00 00 00 00
 657+ 1FED 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 1FF1 0D 00 00 00
 657+ 1FF5 00 00 00 00
 657+ 1FF9 00 00 00 00
 658+ 1FFD C8 61                defw    PROGST+1        ; Start of program text
 659+ 1FFF              INITBE:
 660+ 1FFF
 661+ 1FFF              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 1FFF
 663+ 1FFF 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 2003 6F 72 00
 664+ 2006 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 200A 00
 665+ 200B              ZERBYT  equ     $-1             ; A zero byte
 666+ 200B 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 200F 00
 667+ 2010 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 2014 6B 00
 668+ 2016
 669+ 2016 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 2019 39                   add     HL,SP           ; same index as specified
 671+ 201A 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 201B 23                   inc     HL              ; Point to index address
 673+ 201C FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 201E C0                   ret     NZ              ; No - exit
 675+ 201F 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 2020 23                   inc     HL
 677+ 2021 46                   ld      B,(HL)
 678+ 2022 23                   inc     HL              ; Point to sign of STEP
 679+ 2023 E5                   push    HL              ; Save pointer to sign
 680+ 2024 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 2025 60                   ld      H,B
 682+ 2026 7A                   ld      A,D             ; See if an index was specified
 683+ 2027 B3                   or      E               ; DE = 0 if no index specified
 684+ 2028 EB                   ex      DE,HL           ; Specified index into HL
 685+ 2029 CA 30 20             jp      Z,INDFND        ; Skip if no index given
 686+ 202C EB                   ex      DE,HL           ; Index back into DE
 687+ 202D CD 87 23             call    CPDEHL          ; Compare index with one given
 688+ 2030 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2033 E1                   pop     HL              ; Restore pointer to sign
 690+ 2034 C8                   ret     Z               ; Return if block found
 691+ 2035 09                   add     HL,BC           ; Point to next block
 692+ 2036 C3 1A 20             jp      LOKFOR          ; Keep on looking
 693+ 2039
 694+ 2039 CD 53 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 203C C5           MOVSTR: push    BC              ; Save end of source
 696+ 203D E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 203E C1                   pop     BC              ; Get end of destination
 698+ 203F CD 87 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2042 7E                   ld      A,(HL)          ; Get byte
 700+ 2043 02                   ld      (BC),A          ; Move it
 701+ 2044 C8                   ret     Z               ; Exit if all done
 702+ 2045 0B                   dec     BC              ; Next byte to move to
 703+ 2046 2B                   dec     HL              ; Next byte to move
 704+ 2047 C3 3F 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 204A
 706+ 204A E5           CHKSTK: push    HL              ; Save code string address
 707+ 204B 2A A8 61             ld      HL,(ARREND)     ; Lowest free memory
 708+ 204E 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 2050 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 2051 09                   add     HL,BC
 711+ 2052 3E                   defb    $3E             ; Skip "push HL"
 712+ 2053 E5           ENFMEM: push    HL              ; Save code string address
 713+ 2054 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 2056 95                   sub     L
 715+ 2057 6F                   ld      L,A
 716+ 2058 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 205A 9C                   sbc     A,H
 718+ 205B DA 62 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 205E 67                   ld      H,A
 720+ 205F 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 2060 E1                   pop     HL              ; Restore code string address
 722+ 2061 D8                   ret     C               ; Return if enough memory
 723+ 2062 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 2064 C3 A7 20             jp      ERROR
 725+ 2067
 726+ 2067
 727+ 2067              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 2067 F5           EXITGM: push    AF              ; store AF
 729+ 2068 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
 730+ 206B FE 02                cp      $02             ; G2?
 731+ 206D CA 74 20             jp      Z,LDG1          ; yes, back to G1
 732+ 2070 FE 03                cp      $03             ; G3?
 733+ 2072 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 2074 E5           LDG1:   push    HL              ; store HL
 735+ 2075 D5                   push    DE              ; store DE
 736+ 2076 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 2079 F3                   di                      ; disable INTs
 738+ 207A CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 207D FB                   ei                      ; re-enable INTs
 740+ 207E 3E 01                ld      A,$01           ; activate the...
 741+ 2080 32 5A 61             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 2083 D1                   pop     DE              ; retrieve DE
 743+ 2084 E1                   pop     HL              ; retrieve HL
 744+ 2085 F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 2086 C9                   ret                     ; return to caller
 746+ 2087
 747+ 2087
 748+ 2087 2A 31 61     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 208A 22 08 60             ld      (LINEAT),HL     ; Save as current line
 750+ 208D 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 208F 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 2090 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 2092 01                   defb    $01             ; Skip "ld E,NF"
 754+ 2093 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 2095 01                   defb    $01             ; Skip "ld E,DD"
 756+ 2096 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 2098 01                   defb    $01             ; Skip "ld E,UF"
 758+ 2099 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 209B 01                   defb    $01             ; Skip "ld E,OV
 760+ 209C 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 209E 01                   defb    $01             ; Skip "ld E,TM"
 762+ 209F 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 20A1 01                   defb    $01             ; Skip next statement
 764+ 20A2 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 20A4 01                   defb    $01             ; Skip next statement
 766+ 20A5 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 20A7
 768+ 20A7 CD EF 21     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 20AA CD 67 20             call    EXITGM          ; exit from graphic modes
 770+ 20AD 32 FE 5F             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 20B0 CD 23 09             call    CURSOR_ON       ; enable cursor
 772+ 20B3 CD 91 28             call    STTLIN          ; Start new line
 773+ 20B6 21 D5 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 20B9 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 20BA 3E 3F                ld      A,'?'
 776+ 20BC CD 98 23             call    OUTC            ; Output '?'
 777+ 20BF 19                   add     HL,DE           ; Offset to correct error code
 778+ 20C0 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 20C1 23                   inc     HL              ; by loading LSB,
 780+ 20C2 56                   ld      D,(HL)          ; then MSB
 781+ 20C3 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 20C5 CD 6F 2F             call    PRS             ; Output error message
 783+ 20C8 21 FF 1F             ld      HL,ERRMSG       ; "Error" message
 784+ 20CB CD 6F 2F     ERRIN:  call    PRS             ; Output message
 785+ 20CE 2A 08 60             ld      HL,(LINEAT)     ; Get line of error
 786+ 20D1 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20D4 CD 87 23             call    CPDEHL          ; See if cold start error
 788+ 20D7 CA 75 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20DA 7C                   ld      A,H             ; Was it a direct error?
 790+ 20DB A5                   and     L               ; Line = -1 if direct error
 791+ 20DC 3C                   inc     A
 792+ 20DD CA E8 20             jp      Z,PTLN          ; Yes, jump over
 793+ 20E0 E5                   push    HL              ; indirect mode - store HL
 794+ 20E1 2A 08 60             ld      HL,(LINEAT)     ; copy current line number
 795+ 20E4 22 0A 60             ld      (HLPLN),HL      ; save in HELP line register
 796+ 20E7 E1                   pop     HL              ; retrieve HL
 797+ 20E8 C4 06 3A     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 20EB
 799+ 20EB 3E                   defb    $3E             ; Skip "pop BC"
 800+ 20EC C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 20ED
 802+ 20ED              ; run into direct mode: print OK and get command
 803+ 20ED AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 20EE 32 FE 5F             ld      (CTLOFG),A      ; Enable output
 805+ 20F1 CD 91 28             call    STTLIN          ; Start new line
 806+ 20F4 21 0B 20             ld      HL,OKMSG        ; "Ok" message
 807+ 20F7 CD 6F 2F             call    PRS             ; Output "Ok"
 808+ 20FA CD 23 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 20FD 3A A0 61             ld      A,(SERIALS_EN)  ; load serial state
 810+ 2100 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 2102 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 2105 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 2108 22 08 60             ld      (LINEAT),HL     ; Save as current line
 814+ 210B CD 0D 23             call    GETLIN          ; Get an input line
 815+ 210E DA FA 20             jp      C,GETCMD        ; Get line again if break
 816+ 2111 CD D6 25             call    GETCHR          ; Get first character
 817+ 2114 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 2115 DA 8D 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 2118 1F                   rra                     ; recover original char and Carry
 820+ 2119 3C                   inc     A               ; Test if end of line
 821+ 211A 3D                   dec     A               ; Without affecting Carry
 822+ 211B CA FA 20             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 211E F5                   push    AF              ; Save Carry status
 824+ 211F 3A A0 61             ld      A,(SERIALS_EN)  ; load serial state
 825+ 2122 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 2124 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 2127 CD 38 09             call    CURSOR_OFF      ; cursor disabled
 828+ 212A CD A6 26             call    ATOH            ; Get line number into DE
 829+ 212D D5                   push    DE              ; Save line number
 830+ 212E CD 24 22             call    CRUNCH          ; Tokenise rest of line
 831+ 2131 47                   ld      B,A             ; Length of tokenised line
 832+ 2132 D1                   pop     DE              ; Restore line number
 833+ 2133 F1                   pop     AF              ; Restore Carry
 834+ 2134 D2 B6 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 2137 D5                   push    DE              ; Save line number
 836+ 2138 C5                   push    BC              ; Save length of tokenised line
 837+ 2139 AF                   xor     A
 838+ 213A 32 34 61             ld      (LSTBIN),A      ; Clear last byte input
 839+ 213D CD D6 25             call    GETCHR          ; Get next character
 840+ 2140 B7                   or      A               ; Set flags
 841+ 2141 F5                   push    AF              ; And save them
 842+ 2142 CD A9 21             call    SRCHLN          ; Search for line number in DE
 843+ 2145 DA 4E 21             jp      C,LINFND        ; Jump if line found
 844+ 2148 F1                   pop     AF              ; Get status
 845+ 2149 F5                   push    AF              ; And re-save
 846+ 214A CA 55 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 214D B7                   or      A               ; Clear Carry
 848+ 214E C5           LINFND: push    BC              ; Save address of line in prog
 849+ 214F D2 65 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2152 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2153 2A A4 61             ld      HL,(PROGND)     ; End of program
 852+ 2156 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 2157 02                   ld      (BC),A
 854+ 2158 03                   inc     BC              ; Next destination
 855+ 2159 13                   inc     DE              ; Next source
 856+ 215A CD 87 23             call    CPDEHL          ; All done?
 857+ 215D C2 56 21             jp      NZ,SFTPRG       ; More to do
 858+ 2160 60                   ld      H,B             ; HL - New end of program
 859+ 2161 69                   ld      L,C
 860+ 2162 22 A4 61             ld      (PROGND),HL     ; Update end of program
 861+ 2165
 862+ 2165 D1           INEWLN: pop     DE              ; Get address of line,
 863+ 2166 F1                   pop     AF              ; Get status
 864+ 2167 CA 8C 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 216A 2A A4 61             ld      HL,(PROGND)     ; Get end of program
 866+ 216D E3                   ex      (SP),HL         ; Get length of input line
 867+ 216E C1                   pop     BC              ; End of program to BC
 868+ 216F 09                   add     HL,BC           ; Find new end
 869+ 2170 E5                   push    HL              ; Save new end
 870+ 2171 CD 39 20             call    MOVUP           ; Make space for line
 871+ 2174 E1                   pop     HL              ; Restore new end
 872+ 2175 22 A4 61             ld      (PROGND),HL     ; Update end of program pointer
 873+ 2178 EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 2179 74                   ld      (HL),H          ; Save MSB
 875+ 217A D1                   pop     DE              ; Get new line number
 876+ 217B 23                   inc     HL              ; Skip pointer
 877+ 217C 23                   inc     HL
 878+ 217D 73                   ld      (HL),E          ; Save LSB of line number
 879+ 217E 23                   inc     HL
 880+ 217F 72                   ld      (HL),D          ; Save MSB of line number
 881+ 2180 23                   inc     HL              ; To first byte in line
 882+ 2181 11 91 60             ld      DE,BUFFER       ; Copy buffer to program
 883+ 2184 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 2185 77                   ld      (HL),A          ; Save destinations
 885+ 2186 23                   inc     HL              ; Next source
 886+ 2187 13                   inc     DE              ; Next destination
 887+ 2188 B7                   or      A               ; Done?
 888+ 2189 C2 84 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 218C CD D5 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 218F 23                   inc     HL              ; To LSB of pointer
 891+ 2190 EB                   ex      DE,HL           ; Address to DE
 892+ 2191 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 2192 6B                   ld      L,E
 894+ 2193 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 2194 23                   inc     HL              ; To MSB of pointer
 896+ 2195 B6                   or      (HL)            ; Compare with MSB pointer
 897+ 2196 CA FA 20             jp      Z,GETCMD        ; Get command line if end
 898+ 2199 23                   inc     HL              ; To LSB of line number
 899+ 219A 23                   inc     HL              ; Skip line number
 900+ 219B 23                   inc     HL              ; Point to first byte in line
 901+ 219C AF                   xor     A               ; Looking for 00 byte
 902+ 219D BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 219E 23                   inc     HL              ; Move to next byte
 904+ 219F C2 9D 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 21A2 EB                   ex      DE,HL           ; Next line address to HL
 906+ 21A3 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 21A4 23                   inc     HL
 908+ 21A5 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 21A6 C3 91 21             jp      PTRLP           ; Do next line
 910+ 21A9
 911+ 21A9 2A 8E 60     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 21AC 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 21AD 4D                   ld      C,L
 914+ 21AE 7E                   ld      A,(HL)          ; Get address of next line
 915+ 21AF 23                   inc     HL
 916+ 21B0 B6                   or      (HL)            ; End of program found?
 917+ 21B1 2B                   dec     HL
 918+ 21B2 C8                   ret     Z               ; Yes - Line not found
 919+ 21B3 23                   inc     HL
 920+ 21B4 23                   inc     HL
 921+ 21B5 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 21B6 23                   inc     HL
 923+ 21B7 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 21B8 6F                   ld      L,A
 925+ 21B9 CD 87 23             call    CPDEHL          ; Compare with line in DE
 926+ 21BC 60                   ld      H,B             ; HL = Start of this line
 927+ 21BD 69                   ld      L,C
 928+ 21BE 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 21BF 23                   inc     HL
 930+ 21C0 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 21C1 6F                   ld      L,A             ; Next line to HL
 932+ 21C2 3F                   ccf
 933+ 21C3 C8                   ret     Z               ; Lines found - Exit
 934+ 21C4 3F                   ccf
 935+ 21C5 D0                   ret     NC              ; Line not found,at line after
 936+ 21C6 C3 AC 21             jp      SRCHLP          ; Keep looking
 937+ 21C9
 938+ 21C9 C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 21CA 2A 8E 60     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 21CD AF                   xor     A               ; Set program area to empty
 941+ 21CE 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21CF 23                   inc     HL
 943+ 21D0 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21D1 23                   inc     HL
 945+ 21D2 22 A4 61             ld      (PROGND),HL     ; Set program end
 946+ 21D5
 947+ 21D5 2A 8E 60     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21D8 2B                   dec     HL
 949+ 21D9
 950+ 21D9 22 36 61     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 21DC 2A EF 60             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 21DF 22 2B 61             ld      (STRBOT),HL     ; Clear string space
 953+ 21E2 AF                   xor     A
 954+ 21E3 CD E6 25             call    RESTOR          ; Reset DATA pointers
 955+ 21E6 2A A4 61             ld      HL,(PROGND)     ; Get end of program
 956+ 21E9 22 A6 61             ld      (VAREND),HL     ; Clear variables
 957+ 21EC 22 A8 61             ld      (ARREND),HL     ; Clear arrays
 958+ 21EF
 959+ 21EF C1           CLREG:  pop     BC              ; Save return address
 960+ 21F0 2A 06 60             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 21F3 F9                   ld      SP,HL           ; Set stack
 962+ 21F4 21 1B 61             ld      HL,TMSTPL       ; Temporary string pool
 963+ 21F7 22 19 61             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 21FA AF                   xor     A               ; A = 00
 965+ 21FB 6F                   ld      L,A             ; HL = 0000
 966+ 21FC 67                   ld      H,A
 967+ 21FD 22 3C 61             ld      (CONTAD),HL     ; No CONTinue
 968+ 2200 32 33 61             ld      (FORFLG),A      ; Clear FOR flag
 969+ 2203 22 AC 61             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 2206 E5                   push    HL              ; HL = 0000
 971+ 2207 C5                   push    BC              ; Put back return
 972+ 2208 2A 36 61     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 220B C9                   ret                     ; Return to execution driver
 974+ 220C
 975+ 220C 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 220E CD 98 23             call    OUTC            ; Output character
 977+ 2211 3E 00                ld      A,NLLCR         ; null char
 978+ 2213 CD 98 23             call    OUTC            ; Output character
 979+ 2216 CD 23 09             call    CURSOR_ON       ; enable cursor
 980+ 2219 3A A0 61             ld      A,(SERIALS_EN)  ; load serial state
 981+ 221C EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 221E CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 2221 C3 03 60             jp      RINPUT          ; Get input line
 984+ 2224
 985+ 2224 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 2225 32 EE 60             ld      (DATFLG),A      ; Reset literal flag
 987+ 2228 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 222A 11 91 60             ld      DE,BUFFER       ; Start of input buffer
 989+ 222D 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 222E FE 20                cp      SPC             ; Is it a space?
 991+ 2230 CA AC 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2233 47                   ld      B,A             ; Save character
 993+ 2234 FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 2236 CA CC 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 2239 B7                   or      A               ; Is it end of buffer?
 996+ 223A CA D3 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 223D 3A EE 60             ld      A,(DATFLG)      ; Get data type
 998+ 2240 B7                   or      A               ; Literal?
 999+ 2241 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2242 C2 AC 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 2245 FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 2247 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 2249 CA AC 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 224C 7E                   ld      A,(HL)          ; Get byte again
1005+ 224D FE 30                cp      '0'             ; Is it less than '0'
1006+ 224F DA 57 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2252 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 2254 DA AC 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 2257 D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 2258 11 08 1D             ld      DE,WORDS-1      ; Point to table
1011+ 225B C5                   push    BC              ; Save count
1012+ 225C 01 A8 22             ld      BC,RETNAD       ; Where to return to
1013+ 225F C5                   push    BC              ; Save return address
1014+ 2260 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2262 7E                   ld      A,(HL)          ; Get byte
1016+ 2263 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 2265 DA 70 22             jp      C,SEARCH        ; Yes - search for words
1018+ 2268 FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 226A D2 70 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 226D E6 5F                and     %01011111       ; Force upper case
1021+ 226F 77                   ld      (HL),A          ; Replace byte
1022+ 2270 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 2271 EB                   ex      DE,HL
1024+ 2272 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2273 B6                   or      (HL)            ; Start of word?
1026+ 2274 F2 72 22             jp      P,GETNXT        ; No - move on
1027+ 2277 04                   inc     B               ; Increment token value
1028+ 2278 7E                   ld      A,(HL)          ; Get byte from table
1029+ 2279 E6 7F                and     %01111111       ; Strip bit 7
1030+ 227B C8                   ret     Z               ; Return if end of list
1031+ 227C B9                   cp      C               ; Same character as in buffer?
1032+ 227D C2 72 22             jp      NZ,GETNXT       ; No - get next word
1033+ 2280 EB                   ex      DE,HL
1034+ 2281 E5                   push    HL              ; Save start of word
1035+ 2282
1036+ 2282 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 2283 1A                   ld      A,(DE)          ; Get byte from table
1038+ 2284 B7                   or      A               ; End of word ?
1039+ 2285 FA A4 22             jp      M,MATCH         ; Yes - Match found
1040+ 2288 4F                   ld      C,A             ; Save it
1041+ 2289 78                   ld      A,B             ; Get token value
1042+ 228A FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 228C C2 93 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 228F CD D6 25             call    GETCHR          ; Get next character
1045+ 2292 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 2293 23           NOSPC:  inc     HL              ; Next byte
1047+ 2294 7E                   ld      A,(HL)          ; Get byte
1048+ 2295 FE 61                cp      'a'             ; Less than 'a' ?
1049+ 2297 DA 9C 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 229A E6 5F                and     %01011111       ; Make upper case
1051+ 229C B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 229D CA 82 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 22A0 E1                   pop     HL              ; Get back start of word
1054+ 22A1 C3 70 22             jp      SEARCH          ; Look at next word
1055+ 22A4
1056+ 22A4 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 22A5 F1                   pop     AF              ; Throw away return
1058+ 22A6 EB                   ex      DE,HL
1059+ 22A7 C9                   ret                     ; Return to "RETNAD"
1060+ 22A8 EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 22A9 79                   ld      A,C             ; Get token value
1062+ 22AA C1                   pop     BC              ; Restore buffer length
1063+ 22AB D1                   pop     DE              ; Get destination address
1064+ 22AC 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 22AD 12                   ld      (DE),A          ; Put byte in buffer
1066+ 22AE 13                   inc     DE              ; Move up buffer
1067+ 22AF 0C                   inc     C               ; Increment length of buffer
1068+ 22B0 D6 3A                sub     ':'             ; End of statement?
1069+ 22B2 CA BA 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 22B5 FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 22B7 C2 BD 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 22BA 32 EE 60     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 22BD D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 22BF C2 2D 22             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 22C2 47                   ld      B,A             ; Copy rest of buffer
1076+ 22C3 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 22C4 B7                   or      A               ; End of line ?
1078+ 22C5 CA D3 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 22C8 B8                   cp      B               ; End of statement ?
1080+ 22C9 CA AC 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 22CC 23           CPYLIT: inc     HL              ; Move up source string
1082+ 22CD 12                   ld      (DE),A          ; Save in destination
1083+ 22CE 0C                   inc     C               ; Increment length
1084+ 22CF 13                   inc     DE              ; Move up destination
1085+ 22D0 C3 C3 22             jp      NXTCHR          ; Repeat
1086+ 22D3
1087+ 22D3 21 90 60     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22D6 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22D7 13                   inc     DE
1090+ 22D8 12                   ld      (DE),A          ; A = 00
1091+ 22D9 13                   inc     DE
1092+ 22DA 12                   ld      (DE),A          ; A = 00
1093+ 22DB C9                   ret
1094+ 22DC
1095+ 22DC 3A FD 5F     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 22DF B7                   or      A               ; Is it zero?
1097+ 22E0 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 22E2 32 FD 5F             ld      (NULFLG),A      ; Zero null flag
1099+ 22E5 C2 F0 22             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 22E8 05                   dec     B               ; Decrement length
1101+ 22E9 CA 0D 23             jp      Z,GETLIN        ; Get line again if empty
1102+ 22EC CD 98 23             call    OUTC            ; Output null character
1103+ 22EF 3E                   defb    $3E             ; Skip "dec B"
1104+ 22F0 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 22F1 2B                   dec     HL              ; Back space buffer
1106+ 22F2 CA 04 23             jp      Z,OTKLN         ; No buffer - Try again
1107+ 22F5 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 22F6 CD 98 23             call    OUTC            ; Echo it
1109+ 22F9 C3 16 23             jp      MORINP          ; Get more input
1110+ 22FC
1111+ 22FC 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 22FD 2B                   dec     HL              ; Back space buffer
1113+ 22FE CD 98 23             call    OUTC            ; Output character in A
1114+ 2301 C2 16 23             jp      NZ,MORINP       ; Not end - Get more
1115+ 2304 CD 98 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 2307 CD A3 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 230A C3 0D 23             jp      TTYLIN          ; Get line again
1118+ 230D
1119+ 230D              GETLIN:
1120+ 230D 21 91 60     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 2310 06 01                ld      B,$01           ; Set buffer as empty
1122+ 2312 AF                   xor     A
1123+ 2313 32 FD 5F             ld      (NULFLG),A      ; Clear null flag
1124+ 2316 CD D9 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 2319 4F                   ld      C,A             ; Save character in C
1126+ 231A FE 7F                cp      DEL             ; Delete character?
1127+ 231C CA DC 22             jp      Z,DODEL         ; Yes - Process it
1128+ 231F 3A FD 5F             ld      A,(NULFLG)      ; Get null flag
1129+ 2322 B7                   or      A               ; Test null flag status
1130+ 2323 CA 2F 23             jp      Z,PROCES        ; Reset - Process character
1131+ 2326 3E 00                ld      A,$00           ; Set a null
1132+ 2328 CD 98 23             call    OUTC            ; Output null
1133+ 232B AF                   xor     A               ; Clear A
1134+ 232C 32 FD 5F             ld      (NULFLG),A      ; Reset null flag
1135+ 232F 79           PROCES: ld      A,C             ; Get character
1136+ 2330 FE 07                cp      CTRLG           ; Bell?
1137+ 2332 CA 6F 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 2335 FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 2337 CC 64 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 233A 37                   scf                     ; Flag break
1141+ 233B C8                   ret     Z               ; Return if control "C"
1142+ 233C FE 0D                cp      CR              ; Is it enter?
1143+ 233E CA 99 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 2341 FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2343 CA 07 23             jp      Z,KILIN         ; Yes - Get another line
1146+ 2346 FE 08                cp      BKSP            ; Is it backspace?
1147+ 2348 CA FC 22             jp      Z,DELCHR        ; Yes - Delete character
1148+ 234B FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 234D C2 6A 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 2350 C5                   push    BC              ; Save buffer length
1151+ 2351 D5                   push    DE              ; Save DE
1152+ 2352 E5                   push    HL              ; Save buffer address
1153+ 2353 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 2355 CD 19 4D             call    OUTNCR          ; Output and do CRLF
1155+ 2358 21 91 60             ld      HL,BUFFER       ; Point to buffer start
1156+ 235B CD 6F 2F             call    PRS             ; Output buffer
1157+ 235E E1                   pop     HL              ; Restore buffer address
1158+ 235F D1                   pop     DE              ; Restore DE
1159+ 2360 C1                   pop     BC              ; Restore buffer length
1160+ 2361 C3 16 23             jp      MORINP          ; Get another character
1161+ 2364 CD 67 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 2367 C3 A3 28             jp      PRNTCRLF        ; output CRLF
1163+ 236A
1164+ 236A FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 236C DA 16 23             jp      C,MORINP        ; Yes - Ignore
1166+ 236F 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 2370 FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2372 3E 08                ld      A,BKSP          ; Set a bell
1169+ 2374 D2 81 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 2377 79                   ld      A,C             ; Get character
1171+ 2378 71                   ld      (HL),C          ; Save in buffer
1172+ 2379 32 34 61             ld      (LSTBIN),A      ; Save last input byte
1173+ 237C 23                   inc     HL              ; Move up buffer
1174+ 237D 04                   inc     B               ; Increment length
1175+ 237E C3 16 23     OUTIT:  jp      MORINP          ; Get another character
1176+ 2381
1177+ 2381 CD 98 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 2384 C3 7E 23             jp      OUTIT           ; get more chars
1179+ 2387
1180+ 2387 7C           CPDEHL: ld      A,H             ; Get H
1181+ 2388 92                   sub     D               ; Compare with D
1182+ 2389 C0                   ret     NZ              ; Different - Exit
1183+ 238A 7D                   ld      A,L             ; Get L
1184+ 238B 93                   sub     E               ; Compare with E
1185+ 238C C9                   ret                     ; Return status
1186+ 238D
1187+ 238D 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 238E E3                   ex      (SP),HL         ; Address of test byte
1189+ 238F BE                   cp      (HL)            ; Same as in code string?
1190+ 2390 23                   inc     HL              ; Return address
1191+ 2391 E3                   ex      (SP),HL         ; Put it back
1192+ 2392 CA D6 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 2395 C3 8D 20             jp      SNERR           ; Different - ?SN Error
1194+ 2398
1195+ 2398 F5           OUTC:   push    AF              ; Save character
1196+ 2399 3A FE 5F             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 239C B7                   or      A               ; Is it set?
1198+ 239D C2 A4 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 23A0 F1                   pop     AF              ; Restore character
1200+ 23A1 C5                   push    BC              ; Save buffer length
1201+ 23A2 F5                   push    AF              ; Save character
1202+ 23A3 FE 20                cp      SPC             ; Is it a control code?
1203+ 23A5 DA BC 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 23A8 3A FB 5F             ld      A,(LWIDTH)      ; Get line width
1205+ 23AB 47                   ld      B,A             ; To B
1206+ 23AC 3A EB 60             ld      A,(CURPOS)      ; Get cursor position
1207+ 23AF 04                   inc     B               ; Width 255?
1208+ 23B0 CA B8 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 23B3 05                   dec     B               ; Restore width
1210+ 23B4 B8                   cp      B               ; At end of line?
1211+ 23B5 CC A3 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 23B8 3C           INCLEN: inc     A               ; Move on one character
1213+ 23B9 32 EB 60             ld      (CURPOS),A      ; Save new position
1214+ 23BC AF           DINPOS: xor     A
1215+ 23BD 32 98 61             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 23C0 F1                   pop     AF              ; Restore character
1217+ 23C1 C1                   pop     BC              ; Restore buffer length
1218+ 23C2 F5                   push    AF
1219+ 23C3 CD CB 23             call    SND2VID         ; send char to video
1220+ 23C6 F1                   pop     AF
1221+ 23C7 CD F1 4C             call    MONOUT          ; send char to serial if enabled
1222+ 23CA C9                   ret
1223+ 23CB
1224+ 23CB              ; print char to video if cursor is on
1225+ 23CB 32 5B 61     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23CE 3A 5A 61             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23D1 B7                   or      A               ; is it off?
1228+ 23D2 C8                   ret     Z               ; yes, so return
1229+ 23D3 F3                   di                      ; disable INTs
1230+ 23D4 CD 57 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23D7 FB                   ei                      ; re-enable INTs
1232+ 23D8 C9                   ret                     ; return to caller
1233+ 23D9
1234+ 23D9 CD 2A 3D     CLOTST: call    GETINP          ; Get input character
1235+ 23DC FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 23DE C0                   ret     NZ              ; No don't flip flag
1237+ 23DF 3A FE 5F             ld      A,(CTLOFG)      ; Get flag
1238+ 23E2 2F                   cpl                     ; Flip it
1239+ 23E3 32 FE 5F             ld      (CTLOFG),A      ; Put it back
1240+ 23E6 A7                   and     A               ; is output enabled?
1241+ 23E7 CC 23 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 23EA 3A A0 61             ld      A,(SERIALS_EN)  ; load serial state
1243+ 23ED EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 23EF CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 23F2 AF                   xor     A               ; Null character
1246+ 23F3 C9                   ret
1247+ 23F4
1248+ 23F4              ; LIST: list the program stored into memory
1249+ 23F4 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 23F5 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 23F6 CD D6 25             call    GETCHR          ; Get next character
1252+ 23F9 CA 4F 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 23FC FE BF                cp      ZMINUS          ; is it '-'?
1254+ 23FE 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 2400 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 2403 CD F0 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 2406 ED 43 5E 61          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 240A CD 8D 23             call    CHKSYN          ; skip '-'
1259+ 240D BF                   defb    ZMINUS
1260+ 240E CD A6 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 2411 CD F6 24             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 2414 ED 43 60 61          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 2418 ED 4B 5E 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 241C C5                   push    BC              ; store address of line for later use
1265+ 241D C3 87 24             jp      LISTLP          ; go listing
1266+ 2420 CD A6 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 2423 ED 53 64 61  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 2427 CD F0 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 242A ED 43 5E 61          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 242E ED 43 60 61          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2432 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2433 CD D6 25             call    GETCHR          ; Get next character
1273+ 2436 CA 42 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 2439 FE BF                cp      ZMINUS          ; is it '-'?
1275+ 243B CA 67 24             jp      Z,LST03         ; yes, read ending line
1276+ 243E C5           LST06:  push    BC              ; store address for later use
1277+ 243F C3 87 24             jp      LISTLP          ; jump to list
1278+ 2442 ED 5B 64 61  LSTNOT: ld      DE,(TMPBFR4)
1279+ 2446 CD F0 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 2449 DA 3E 24             jp      C,LST06
1281+ 244C C3 ED 20             jp      PRNTOK
1282+ 244F 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2452 CD F0 24             call    SRCHLIN         ; get address of last line
1284+ 2455 ED 43 60 61          ld      (TMPBFR2),BC    ; store it
1285+ 2459 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 245C CD F0 24             call    SRCHLIN         ; get address of first line
1287+ 245F ED 43 5E 61          ld      (TMPBFR1),BC    ; store it
1288+ 2463 C5                   push    BC              ; store address of starting line for later use
1289+ 2464 C3 87 24             jp      LISTLP          ; start printing
1290+ 2467 CD 8D 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 246A BF                   defb    ZMINUS
1292+ 246B CD A6 26             call    ATOH            ; look for another number (return into DE)
1293+ 246E 7A                   ld      A,D
1294+ 246F B3                   or      E               ; is line=0?
1295+ 2470 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2472 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 2475 CD F0 24             call    SRCHLIN         ; get address of last line
1298+ 2478 C3 7E 24             jp      LST02
1299+ 247B CD F6 24     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 247E ED 43 60 61  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 2482 ED 4B 5E 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 2486 C5                   push    BC              ; store it for later use
1303+ 2487 E1           LISTLP: pop     HL              ; Restore address of line
1304+ 2488 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 2489 23                   inc     HL
1306+ 248A 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 248B 23                   inc     HL
1308+ 248C 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 248D B1                   or      C
1310+ 248E CA ED 20             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 2491 CD 01 26             call    TSTBRK          ; Test for break key
1312+ 2494 CD 04 25             call    TSTSPC          ; test for space
1313+ 2497 C5                   push    BC              ; Save address of next line
1314+ 2498 3A 53 61             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 249B A7                   and     A               ; is it at the beginning of a new line?
1316+ 249C 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 249E 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 24A0 CD F1 4C             call    MONOUT          ; to serial if it's open
1319+ 24A3 AF                   xor     A               ; then, set cursor
1320+ 24A4 32 EB 60             ld      (CURPOS),A      ; to position 0
1321+ 24A7 18 03                jr      LST07           ; and continue
1322+ 24A9 CD A3 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 24AC 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 24AD 23                   inc     HL
1325+ 24AE 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 24AF 23                   inc     HL
1327+ 24B0 E5                   push    HL              ; Save address of line start
1328+ 24B1 EB                   ex      DE,HL           ; Line number to HL
1329+ 24B2 CD 0E 3A             call    PRNTHL          ; Output line number in decimal
1330+ 24B5 3E 20                ld      A,SPC           ; Space after line number
1331+ 24B7 E1                   pop     HL              ; Restore start of line address
1332+ 24B8 CD 98 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 24BB 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 24BC B7                   or      A               ; End of line?
1335+ 24BD 23                   inc     HL              ; To next byte in line
1336+ 24BE CA E2 24             jp      Z,NXTLN         ; Yes - check next line
1337+ 24C1 F2 B8 24             jp      P,LSTLP2        ; No token - output it
1338+ 24C4 D6 7F                sub     ZEND-1          ; Find and output word
1339+ 24C6 4F                   ld      C,A             ; Token offset+1 to C
1340+ 24C7 11 09 1D             ld      DE,WORDS        ; Reserved word list
1341+ 24CA 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 24CB 13                   inc     DE              ; Move on to next
1343+ 24CC B7                   or      A               ; Is it start of word?
1344+ 24CD F2 CA 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24D0 0D                   dec     C               ; Count words
1346+ 24D1 C2 CA 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24D4 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24D6 CD 98 23             call    OUTC            ; Output character
1349+ 24D9 1A                   ld      A,(DE)          ; Get next character
1350+ 24DA 13                   inc     DE              ; Move on to next
1351+ 24DB B7                   or      A               ; Is it end of word?
1352+ 24DC F2 D4 24             jp      P,OUTWRD        ; No - output the rest
1353+ 24DF C3 BB 24             jp      LSTLP3          ; Next byte in line
1354+ 24E2 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 24E3 2A 60 61             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 24E6 CD 1F 4D             call    CMP16           ; check if current line is over last printable line
1357+ 24E9 DA ED 20             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 24EC D5                   push    DE              ; store address of current line
1359+ 24ED C3 87 24             jp      LISTLP          ; continue listing
1360+ 24F0              ; look for the address of a program line
1361+ 24F0 E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 24F1 CD A9 21             call    SRCHLN          ; search for line number in DE
1363+ 24F4 E1                   pop     HL              ; retrieve HL
1364+ 24F5 C9                   ret                     ; return to caller
1365+ 24F6              ; look for the address of a program line - if the line isn't found,
1366+ 24F6              ; it look backward for the previous line
1367+ 24F6 E5           SRCLN:  push    HL              ; store HL
1368+ 24F7 CD A9 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 24FA DA 02 25             jp      C,LVSRLN        ; found it, leave loop
1370+ 24FD 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 24FE 7B                   ld      A,E
1372+ 24FF B2                   or      D               ; is line number zero?
1373+ 2500 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 2502 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 2503 C9                   ret                     ; return to caller
1376+ 2504
1377+ 2504              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 2504              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 2504 3A 9A 61     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 2507 FE 20                cp      SPC             ; Is it SPACE?
1381+ 2509 C0                   ret     NZ              ; No, return
1382+ 250A CD 2A 3D     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 250D FE 20                cp      SPC             ; is it SPACE?
1384+ 250F 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 2511 AF                   xor     A
1386+ 2512 32 9A 61             ld      (TMPKEYBFR),A   ; reset key
1387+ 2515 C9                   ret                     ; return to caller
1388+ 2516 FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 2518 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 251A C3 39 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 251D
1392+ 251D
1393+ 251D 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 251F 32 33 61             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 2522 CD 96 27             call    LET             ; Set up initial index
1396+ 2525 C1                   pop     BC              ; Drop RETurn address
1397+ 2526 E5                   push    HL              ; Save code string address
1398+ 2527 CD 7F 27             call    DATA            ; Get next statement address
1399+ 252A 22 2F 61             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 252D 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 2530 39                   add     HL,SP           ; Point to it
1402+ 2531 CD 1A 20     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 2534 D1                   pop     DE              ; Get code string address
1404+ 2535 C2 4D 25             jp      NZ,FORFND       ; No nesting found
1405+ 2538 09                   add     HL,BC           ; Move into "FOR" block
1406+ 2539 D5                   push    DE              ; Save code string address
1407+ 253A 2B                   dec     HL
1408+ 253B 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 253C 2B                   dec     HL
1410+ 253D 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 253E 23                   inc     HL
1412+ 253F 23                   inc     HL
1413+ 2540 E5                   push    HL              ; Save block address
1414+ 2541 2A 2F 61             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 2544 CD 87 23             call    CPDEHL          ; Compare the FOR loops
1416+ 2547 E1                   pop     HL              ; Restore block address
1417+ 2548 C2 31 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 254B D1                   pop     DE              ; Restore code string address
1419+ 254C F9                   ld      SP,HL           ; Remove all nested loops
1420+ 254D
1421+ 254D EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 254E 0E 08                ld      C,$08
1423+ 2550 CD 4A 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2553 E5                   push    HL              ; Save code string address
1425+ 2554 2A 2F 61             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 2557 E3                   ex      (SP),HL         ; Save and restore code string
1427+ 2558 E5                   push    HL              ; Re-save code string address
1428+ 2559 2A 08 60             ld      HL,(LINEAT)     ; Get current line number
1429+ 255C E3                   ex      (SP),HL         ; Save and restore code string
1430+ 255D CD 6A 2A             call    TSTNUM          ; Make sure it's a number
1431+ 2560 CD 8D 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2563 B8                   defb    ZTO             ; "TO" token
1433+ 2564 CD 67 2A             call    GETNUM          ; Get "TO" expression value
1434+ 2567 E5                   push    HL              ; Save code string address
1435+ 2568 CD C0 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 256B E1                   pop     HL              ; Restore code string address
1437+ 256C C5                   push    BC              ; Save "TO" value in block
1438+ 256D D5                   push    DE
1439+ 256E 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 2571 51                   ld      D,C             ; C=0
1441+ 2572 5A                   ld      E,D             ; D=0
1442+ 2573 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 2574 FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 2576 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 2578 C2 89 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 257B CD D6 25             call    GETCHR          ; Jump over "STEP" token
1447+ 257E CD 67 2A             call    GETNUM          ; Get step value
1448+ 2581 E5                   push    HL              ; Save code string address
1449+ 2582 CD C0 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 2585 CD 74 38             call    TSTSGN          ; Test sign of FPREG
1451+ 2588 E1                   pop     HL              ; Restore code string address
1452+ 2589 C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 258A D5                   push    DE
1454+ 258B F5                   push    AF              ; Save sign of STEP
1455+ 258C 33                   inc     SP              ; Don't save flags
1456+ 258D E5                   push    HL              ; Save code string address
1457+ 258E 2A 36 61             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 2591 E3                   ex      (SP),HL         ; Save and restore code string
1459+ 2592 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 2594 C5                   push    BC              ; Save it
1461+ 2595 33                   inc     SP              ; Don't save C
1462+ 2596
1463+ 2596 CD 01 26     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 2599 22 36 61             ld      (BRKLIN),HL     ; Save code address for break
1465+ 259C 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 259D FE 3A                cp      ':'             ; Multi statement line?
1467+ 259F CA B6 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 25A2 B7                   or      A               ; End of line?
1469+ 25A3 C2 8D 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 25A6 23                   inc     HL              ; Point to address of next line
1471+ 25A7 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 25A8 23                   inc     HL
1473+ 25A9 B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 25AA CA 28 26             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 25AD 23                   inc     HL              ; Point to line number
1476+ 25AE 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 25AF 23                   inc     HL
1478+ 25B0 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 25B1 EB                   ex      DE,HL           ; Line number to HL
1480+ 25B2 22 08 60             ld      (LINEAT),HL     ; Save as current line number
1481+ 25B5 EB                   ex      DE,HL           ; Line number back to DE
1482+ 25B6 CD D6 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 25B9 11 96 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 25BC D5                   push    DE              ; Save for RETurn
1485+ 25BD C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 25BE
1487+ 25BE D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 25C0 DA 96 27             jp      C,LET           ; No - try to assign it
1489+ 25C3 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 25C5 D2 8D 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 25C8 07                   rlca                    ; Double it
1492+ 25C9 4F                   ld      C,A             ; BC = Offset into table
1493+ 25CA 06 00                ld      B,0
1494+ 25CC EB                   ex      DE,HL           ; Save code string address
1495+ 25CD 21 9A 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25D0 09                   add     HL,BC           ; Point to routine address
1497+ 25D1 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25D2 23                   inc     HL
1499+ 25D3 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25D4 C5                   push    BC              ; Save routine address
1501+ 25D5 EB                   ex      DE,HL           ; Restore code string address
1502+ 25D6
1503+ 25D6              ; get a char from input buffer: exit with NC if character found is
1504+ 25D6              ; not a number; exit with Z if nothing found; char is into A
1505+ 25D6 23           GETCHR: inc     HL              ; Point to next character
1506+ 25D7 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25D8 FE 3A                cp      ':'             ; Z if ':'
1508+ 25DA D0                   ret     NC              ; NC if > "9"
1509+ 25DB FE 20                cp      SPC
1510+ 25DD CA D6 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 25E0 FE 30                cp      '0'
1512+ 25E2 3F                   ccf                     ; NC if < '0'
1513+ 25E3 3C                   inc     A               ; Test for zero - Leave carry
1514+ 25E4 3D                   dec     A               ; Z if Null
1515+ 25E5 C9                   ret
1516+ 25E6
1517+ 25E6 EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 25E7 2A 8E 60             ld      HL,(BASTXT)     ; Point to start of program
1519+ 25EA CA FB 25             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 25ED EB                   ex      DE,HL           ; Restore code string address
1521+ 25EE CD A6 26             call    ATOH            ; Get line number to DE
1522+ 25F1 E5                   push    HL              ; Save code string address
1523+ 25F2 CD A9 21             call    SRCHLN          ; Search for line number in DE
1524+ 25F5 60                   ld      H,B             ; HL = Address of line
1525+ 25F6 69                   ld      L,C
1526+ 25F7 D1                   pop     DE              ; Restore code string address
1527+ 25F8 D2 55 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 25FB 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 25FC 22 AA 61     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 25FF EB                   ex      DE,HL           ; Restore code string address
1531+ 2600 C9                   ret
1532+ 2601
1533+ 2601
1534+ 2601              ; check if CTRL-C is into input buffer
1535+ 2601 DF           TSTBRK: rst     $18             ; Check input status
1536+ 2602 C8                   ret     Z               ; No key, go back
1537+ 2603 D7                   rst     $10             ; Get the key into A
1538+ 2604 FE 1B                cp      ESC             ; Escape key?
1539+ 2606 28 11                jr      Z,BRK           ; Yes, break
1540+ 2608 FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 260A 28 0D                jr      Z,BRK           ; Yes, break
1542+ 260C FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 260E C0                   ret     NZ              ; Other key, ignore
1544+ 260F
1545+ 260F
1546+ 260F              ; wait for a key while listing
1547+ 260F D7           STALL:  rst     $10             ; Wait for key
1548+ 2610 FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 2612 C8                   ret     Z               ; Release the chokehold
1550+ 2613 FE 03                cp      CTRLC           ; Second break?
1551+ 2615 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 2617 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 2619
1554+ 2619 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 261B 32 02 60             ld      (BRKFLG),A      ; Store it
1556+ 261E
1557+ 261E C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 261F F6                   defb    $F6             ; Flag "STOP"
1559+ 2620 C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 2621 22 36 61             ld      (BRKLIN),HL     ; Save point of break
1561+ 2624 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 2625 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 2627 C1                   pop     BC              ; Return not needed and more
1564+ 2628 2A 08 60     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 262B F5                   push    AF              ; Save STOP / END status
1566+ 262C 7D                   ld      A,L             ; Is it direct break?
1567+ 262D A4                   and     H
1568+ 262E 3C                   inc     A               ; Line is -1 if direct break
1569+ 262F CA 3B 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2632 22 3A 61             ld      (ERRLIN),HL     ; Save line of break
1571+ 2635 2A 36 61             ld      HL,(BRKLIN)     ; Get point of break
1572+ 2638 22 3C 61             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 263B AF           NOLIN:  xor     A
1574+ 263C 32 FE 5F             ld      (CTLOFG),A      ; Enable output
1575+ 263F CD 91 28             call    STTLIN          ; Start a new line
1576+ 2642 F1                   pop     AF              ; Restore STOP / END status
1577+ 2643 21 10 20             ld      HL,BRKMSG       ; "Break" message
1578+ 2646 C2 4C 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 2649 C3 ED 20             jp      PRNTOK          ; Go to command mode
1580+ 264C CD 67 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 264F C3 CB 20             jp      ERRIN           ; print message
1582+ 2652
1583+ 2652
1584+ 2652              ; CONTinue after a break/error
1585+ 2652 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 2655 22 0A 60             ld      (HLPLN),HL      ; ...HELP line register
1587+ 2658 2A 3C 61             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 265B 7C                   ld      A,H             ; Is it zero?
1589+ 265C B5                   or      L
1590+ 265D 1E 20                ld      E,CN            ; ?CN Error
1591+ 265F CA A7 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2662 EB                   ex      DE,HL           ; Save code string address
1593+ 2663 2A 3A 61             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 2666 22 08 60             ld      (LINEAT),HL     ; Set up current line number
1595+ 2669 EB                   ex      DE,HL           ; Restore code string address
1596+ 266A C9                   ret                     ; CONTinue where left off
1597+ 266B
1598+ 266B E5           ACCSUM: push    HL              ; Save address in array
1599+ 266C 2A FF 5F             ld      HL,(CHKSUM)     ; Get check sum
1600+ 266F 06 00                ld      B,$00           ; BC - Value of byte
1601+ 2671 4F                   ld      C,A
1602+ 2672 09                   add     HL,BC           ; Add byte to check sum
1603+ 2673 22 FF 5F             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 2676 E1                   pop     HL              ; Restore address in array
1605+ 2677 C9                   ret
1606+ 2678
1607+ 2678 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 2679 FE 41                cp      'A'             ; < 'a' ?
1609+ 267B D8                   ret     C               ; Carry set if not letter
1610+ 267C FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 267E 3F                   ccf
1612+ 267F C9                   ret                     ; Carry set if not letter
1613+ 2680
1614+ 2680 CD D6 25     FPSINT: call    GETCHR          ; Get next character
1615+ 2683 CD 67 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 2686 CD 74 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 2689 FA A1 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 268C 3A B5 61     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 268F FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 2691 DA 1C 39             jp      C,FPINT         ; Yes - convert it
1621+ 2694 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 2697 11 00 00             ld      DE,$0000
1623+ 269A E5                   push    HL              ; Save code string address
1624+ 269B CD EF 38             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 269E E1                   pop     HL              ; Restore code string address
1626+ 269F 51                   ld      D,C             ; MSB to D
1627+ 26A0 C8                   ret     Z               ; Return if in range
1628+ 26A1 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 26A3 C3 A7 20             jp      ERROR           ; Output error-
1630+ 26A6
1631+ 26A6
1632+ 26A6              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 26A6 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 26A7 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 26AA CD D6 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 26AD D0                   ret     NC              ; Exit if not a digit
1637+ 26AE E5                   push    HL              ; Save code string address
1638+ 26AF F5                   push    AF              ; Save digit
1639+ 26B0 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 26B3 CD 87 23             call    CPDEHL          ; Number in range?
1641+ 26B6 DA 8D 20             jp      C,SNERR         ; No - ?SN Error
1642+ 26B9 62                   ld      H,D             ; HL = Number
1643+ 26BA 6B                   ld      L,E
1644+ 26BB 19                   add     HL,DE           ; Times 2
1645+ 26BC 29                   add     HL,HL           ; Times 4
1646+ 26BD 19                   add     HL,DE           ; Times 5
1647+ 26BE 29                   add     HL,HL           ; Times 10
1648+ 26BF F1                   pop     AF              ; Restore digit
1649+ 26C0 D6 30                sub     '0'             ; Make it 0 to 9
1650+ 26C2 5F                   ld      E,A             ; DE = Value of digit
1651+ 26C3 16 00                ld      D,0
1652+ 26C5 19                   add     HL,DE           ; Add to number
1653+ 26C6 EB                   ex      DE,HL           ; Number to DE
1654+ 26C7 E1                   pop     HL              ; Restore code string address
1655+ 26C8 C3 AA 26             jp      GTLNLP          ; Go to next character
1656+ 26CB
1657+ 26CB CA D9 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26CE CD 67 2A             call    GETNUM          ; Evaluate a number
1659+ 26D1 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26D4 2B                   dec     HL              ; Cancel increment
1661+ 26D5 CD D6 25             call    GETCHR          ; Get next character
1662+ 26D8 E5                   push    HL              ; Save code string address
1663+ 26D9 2A EF 60             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 26DC CA F4 26             jp      Z,STORED        ; No value given - Use stored
1665+ 26DF E1                   pop     HL              ; Restore code string address
1666+ 26E0 CD 8D 23             call    CHKSYN          ; Check for comma
1667+ 26E3 2C                   defb    ','
1668+ 26E4 D5                   push    DE              ; Save number
1669+ 26E5 CD 67 2A             call    GETNUM          ; Evaluate a number
1670+ 26E8 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 26EB 2B                   dec     HL              ; Cancel increment
1672+ 26EC CD D6 25             call    GETCHR          ; Get next character
1673+ 26EF C2 8D 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 26F2 E3                   ex      (SP),HL         ; Save code string address
1675+ 26F3 EB                   ex      DE,HL           ; Number to DE
1676+ 26F4 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 26F5 93                   sub     E               ; Subtract LSB of string space
1678+ 26F6 5F                   ld      E,A             ; Save LSB
1679+ 26F7 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 26F8 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 26F9 57                   ld      D,A             ; Save MSB
1682+ 26FA DA 62 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 26FD E5                   push    HL              ; Save RAM top
1684+ 26FE 2A A4 61             ld      HL,(PROGND)     ; Get program end
1685+ 2701 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 2704 09                   add     HL,BC           ; Get lowest address
1687+ 2705 CD 87 23             call    CPDEHL          ; Enough memory?
1688+ 2708 D2 62 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 270B EB                   ex      DE,HL           ; RAM top to HL
1690+ 270C 22 06 60             ld      (STRSPC),HL     ; Set new string space
1691+ 270F E1                   pop     HL              ; End of memory to use
1692+ 2710 22 EF 60             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 2713 E1                   pop     HL              ; Restore code string address
1694+ 2714 C3 D9 21             jp      INTVAR          ; Initialise variables
1695+ 2717
1696+ 2717 E5           RUN:    push    HL              ; store HL
1697+ 2718 21 FF FF             ld      HL,-1           ; reset...
1698+ 271B 22 0A 60             ld      (HLPLN),HL      ; ...HELP line register
1699+ 271E E1                   pop     HL              ; retrieve HL
1700+ 271F CA D5 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 2722 CD D9 21             call    INTVAR          ; Initialise variables
1702+ 2725 01 96 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 2728 C3 3B 27             jp      RUNLIN          ; RUN from line number
1704+ 272B
1705+ 272B 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 272D CD 4A 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 2730 C1                   pop     BC              ; Get return address
1708+ 2731 E5                   push    HL              ; Save code string for RETURN
1709+ 2732 E5                   push    HL              ; And for GOSUB routine
1710+ 2733 2A 08 60             ld      HL,(LINEAT)     ; Get current line
1711+ 2736 E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 2737 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 2739 F5                   push    AF              ; Save token
1714+ 273A 33                   inc     SP              ; Don't save flags
1715+ 273B
1716+ 273B C5           RUNLIN: push    BC              ; Save return address
1717+ 273C CD A6 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 273F CD 81 27             call    REM             ; Get end of line
1719+ 2742 E5                   push    HL              ; Save end of line
1720+ 2743 2A 08 60             ld      HL,(LINEAT)     ; Get current line
1721+ 2746 CD 87 23             call    CPDEHL          ; Line after current?
1722+ 2749 E1                   pop     HL              ; Restore end of line
1723+ 274A 23                   inc     HL              ; Start of next line
1724+ 274B DC AC 21             call    C,SRCHLP        ; Line is after current line
1725+ 274E D4 A9 21             call    NC,SRCHLN       ; Line is before current line
1726+ 2751 60                   ld      H,B             ; Set up code string address
1727+ 2752 69                   ld      L,C
1728+ 2753 2B                   dec     HL              ; Incremented after
1729+ 2754 D8                   ret     C               ; Line found
1730+ 2755 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 2757 C3 A7 20             jp      ERROR           ; Output error message
1732+ 275A
1733+ 275A C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 275B 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 275D CD 16 20             call    BAKSTK          ; Look "GOSUB" block
1736+ 2760 F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 2761 FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2763 1E 04                ld      E,RG            ; ?RG Error
1739+ 2765 C2 A7 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 2768 E1                   pop     HL              ; Get RETURN line number
1741+ 2769 22 08 60             ld      (LINEAT),HL     ; Save as current
1742+ 276C 23                   inc     HL              ; Was it from direct statement?
1743+ 276D 7C                   ld      A,H
1744+ 276E B5                   or      L               ; Return to line
1745+ 276F C2 79 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2772 3A 34 61             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 2775 B7                   or      A               ; If so buffer is corrupted
1748+ 2776 C2 EC 20             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 2779 21 96 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 277C E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 277D 3E                   defb    $3E             ; Skip "pop HL"
1752+ 277E E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 277F
1754+ 277F 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 2781 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 2783 06 00                ld      B,$00
1757+ 2785 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 2786 48                   ld      C,B
1759+ 2787 47                   ld      B,A             ; Statement end byte
1760+ 2788 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 2789 B7                   or      A               ; End of line?
1762+ 278A C8                   ret     Z               ; Yes - Exit
1763+ 278B B8                   cp      B               ; End of statement?
1764+ 278C C8                   ret     Z               ; Yes - Exit
1765+ 278D 23                   inc     HL              ; Next byte
1766+ 278E FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 2790 CA 85 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 2793 C3 88 27             jp      NXTSTT          ; Keep looking
1769+ 2796
1770+ 2796 CD 76 2C     LET:    call    GETVAR          ; Get variable name
1771+ 2799 CD 8D 23             call    CHKSYN          ; Make sure "=" follows
1772+ 279C C9                   defb    ZEQUAL          ; "=" token
1773+ 279D D5                   push    DE              ; Save address of variable
1774+ 279E 3A ED 60             ld      A,(TYPE)        ; Get data type
1775+ 27A1 F5                   push    AF              ; Save type
1776+ 27A2 CD 79 2A             call    EVAL            ; Evaluate expression
1777+ 27A5 F1                   pop     AF              ; Restore type
1778+ 27A6 E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 27A7 22 36 61             ld      (BRKLIN),HL     ; Save address of variable
1780+ 27AA 1F                   rra                     ; Adjust type
1781+ 27AB CD 6C 2A             call    CHKTYP          ; Check types are the same
1782+ 27AE CA E9 27             jp      Z,LETNUM        ; Numeric - Move value
1783+ 27B1 E5           LETSTR: push    HL              ; Save address of string var
1784+ 27B2 2A B2 61             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 27B5 E5                   push    HL              ; Save it on stack
1786+ 27B6 23                   inc     HL              ; Skip over length
1787+ 27B7 23                   inc     HL
1788+ 27B8 5E                   ld      E,(HL)          ; LSB of string address
1789+ 27B9 23                   inc     HL
1790+ 27BA 56                   ld      D,(HL)          ; MSB of string address
1791+ 27BB 2A 8E 60             ld      HL,(BASTXT)     ; Point to start of program
1792+ 27BE CD 87 23             call    CPDEHL          ; Is string before program?
1793+ 27C1 D2 D8 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 27C4 2A 06 60             ld      HL,(STRSPC)     ; Point to string space
1795+ 27C7 CD 87 23             call    CPDEHL          ; Is string literal in program?
1796+ 27CA D1                   pop     DE              ; Restore address of string
1797+ 27CB D2 E0 27             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27CE 21 27 61             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27D1 CD 87 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27D4 D2 E0 27             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27D7 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27D8 D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27D9 CD D0 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 27DC EB                   ex      DE,HL           ; Address of string entry
1805+ 27DD CD 09 2F             call    SAVSTR          ; Save string in string area
1806+ 27E0 CD D0 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 27E3 E1                   pop     HL              ; Get string pointer
1808+ 27E4 CD CF 38             call    DETHL4          ; Move string pointer to var
1809+ 27E7 E1                   pop     HL              ; Restore code string address
1810+ 27E8 C9                   ret
1811+ 27E9
1812+ 27E9 E5           LETNUM: push    HL              ; Save address of variable
1813+ 27EA CD CC 38             call    FPTHL           ; Move value to variable
1814+ 27ED D1                   pop     DE              ; Restore address of variable
1815+ 27EE E1                   pop     HL              ; Restore code string address
1816+ 27EF C9                   ret
1817+ 27F0
1818+ 27F0 CD ED 32     ON:     call    GETINT          ; Get integer 0-255
1819+ 27F3 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 27F4 47                   ld      B,A             ; Save in B
1821+ 27F5 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 27F7 CA FF 27             jp      Z,ONGO          ; Yes - Find line number
1823+ 27FA CD 8D 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 27FD 88                   defb    ZGOTO           ; "GOTO" token
1825+ 27FE 2B                   dec     HL              ; Cancel increment
1826+ 27FF 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 2800 0D           ONGOLP: dec     C               ; Count branches
1828+ 2801 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 2802 CA BE 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 2805 CD A7 26             call    GETLN           ; Get line number to DE
1831+ 2808 FE 2C                cp      ','             ; Another line number?
1832+ 280A C0                   ret     NZ              ; No - Drop through
1833+ 280B C3 00 28             jp      ONGOLP          ; Yes - loop
1834+ 280E
1835+ 280E CD 79 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 2811 7E                   ld      A,(HL)          ; Get token
1837+ 2812 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 2814 CA 1C 28             jp      Z,IFGO          ; Yes - Get line
1839+ 2817 CD 8D 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 281A BB                   defb    ZTHEN           ; "THEN" token
1841+ 281B 2B                   dec     HL              ; Cancel increment
1842+ 281C CD 6A 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 281F CD 74 38             call    TSTSGN          ; Test state of expression
1844+ 2822 CA 2E 28             jp      Z,IF1           ; False - Jump over
1845+ 2825 CD D6 25     IF0:    call    GETCHR          ; Get next character
1846+ 2828 DA 3C 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 282B C3 BD 25             jp      IFJMP           ; Otherwise do statement
1848+ 282E 0E AF        IF1:    ld      C,ZELSE
1849+ 2830 CD 83 27             call    REM+2           ; check statement
1850+ 2833 B7                   or      A               ; end of line?
1851+ 2834 C8                   ret     Z               ; yes, leave
1852+ 2835 FE AF                cp      ZELSE
1853+ 2837 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 2839 C3 25 28             jp      IF0             ; return to IF
1855+ 283C
1856+ 283C
1857+ 283C 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 283D CD D6 25             call    GETCHR          ; Get next character
1859+ 2840 CA A3 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2843 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 2844 FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 2846 CA CB 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 2849 FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 284B CA CB 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 284E E5                   push    HL              ; Save code string address
1866+ 284F FE 2C                cp      ','             ; Comma?
1867+ 2851 CA B2 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 2854 FE 3B                cp      ';'             ; Semi-colon?
1869+ 2856 CA EF 28             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 2859 C1                   pop     BC              ; Code string address to BC
1871+ 285A CD 79 2A             call    EVAL            ; Evaluate expression
1872+ 285D E5                   push    HL              ; Save code string address
1873+ 285E 3A ED 60             ld      A,(TYPE)        ; Get variable type
1874+ 2861 B7                   or      A               ; Is it a string variable?
1875+ 2862 C2 8A 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 2865 CD 19 3A             call    NUMASC          ; Convert number to text
1877+ 2868 CD 2D 2F             call    CRTST           ; Create temporary string
1878+ 286B 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 286D 2A B2 61             ld      HL,(FPREG)      ; Get length of output
1880+ 2870 34                   inc     (HL)            ; Plus 1 for the space
1881+ 2871 2A B2 61             ld      HL,(FPREG)      ; < Not needed >
1882+ 2874 3A FB 5F             ld      A,(LWIDTH)      ; Get width of line
1883+ 2877 47                   ld      B,A             ; To B
1884+ 2878 04                   inc     B               ; Width 255 (No limit)?
1885+ 2879 CA 86 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 287C 04                   inc     B               ; Adjust it
1887+ 287D 3A EB 60             ld      A,(CURPOS)      ; Get cursor position
1888+ 2880 86                   add     A,(HL)          ; Add length of string
1889+ 2881 3D                   dec     A               ; Adjust it
1890+ 2882 B8                   cp      B               ; Will output fit on this line?
1891+ 2883 D4 A3 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 2886 CD 72 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 2889 AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 288A C4 72 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 288D E1                   pop     HL              ; Restore code string address
1896+ 288E C3 3C 28             jp      MRPRNT          ; See if more to PRINT
1897+ 2891
1898+ 2891 3A EB 60     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 2894 B7                   or      A               ; Already at start?
1900+ 2895 C8                   ret     Z               ; Yes - Do nothing
1901+ 2896 C3 A3 28             jp      PRNTCRLF        ; Start a new line
1902+ 2899
1903+ 2899 AF           ENDINP: xor     A
1904+ 289A 32 98 61             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 289D 77                   ld      (HL),A          ; Mark end of buffer
1906+ 289E 21 90 60             ld      HL,BUFFER-1     ; Point to buffer
1907+ 28A1 18 0A                jr      CNTEND
1908+ 28A3 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 28A5 CD 98 23             call    OUTC            ; Output character
1910+ 28A8 3E 0A                ld      A,LF            ; Load a LF
1911+ 28AA CD 98 23             call    OUTC            ; Output character
1912+ 28AD AF           CNTEND: xor     A               ; Set to position 0
1913+ 28AE 32 EB 60             ld      (CURPOS),A      ; Store it
1914+ 28B1 C9                   ret                     ; return to caller
1915+ 28B2
1916+ 28B2 3A FC 5F     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 28B5 47                   ld      B,A             ; Save in B
1918+ 28B6 3A 53 61             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 28B9 B8                   cp      B               ; Within the limit?
1920+ 28BA D4 A3 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 28BD D2 EF 28             jp      NC,NEXITM       ; Get next item
1922+ 28C0 D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 28C2 D2 C0 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 28C5 2F                   cpl                     ; Number of null chars to output
1925+ 28C6 0E 00                ld      C,NLLCR         ; null char
1926+ 28C8 C3 E5 28             jp      ASPCS           ; Output them
1927+ 28CB
1928+ 28CB F5           DOTAB:  push    AF              ; Save token
1929+ 28CC CD EA 32             call    FNDNUM          ; Evaluate expression
1930+ 28CF CD 8D 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28D2 29                   defb    ')'
1932+ 28D3 2B                   dec     HL              ; Back space on to ")"
1933+ 28D4 F1                   pop     AF              ; Restore token
1934+ 28D5 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28D7 D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28D9 E5                   push    HL              ; Save code string address
1937+ 28DA CA E0 28             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 28DD 3A 53 61             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 28E0 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 28E1 83                   add     A,E             ; Total number to print
1941+ 28E2 D2 EF 28             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 28E5 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 28E6 47                   ld      B,A             ; Save number to print
1944+ 28E7 79           SPCLP:  ld      A,C             ; char to print
1945+ 28E8 CD 98 23             call    OUTC            ; Output character in A
1946+ 28EB 05                   dec     B               ; Count them
1947+ 28EC C2 E7 28             jp      NZ,SPCLP        ; Repeat if more
1948+ 28EF E1           NEXITM: pop     HL              ; Restore code string address
1949+ 28F0 CD D6 25             call    GETCHR          ; Get next character
1950+ 28F3 C3 43 28             jp      PRNTLP          ; More to print
1951+ 28F6
1952+ 28F6 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 28FA 6F 20 66 72
1952+ 28FE 6F 6D 20 73
1952+ 2902 74 61 72 74
1952+ 2906 0D 00
1953+ 2908
1954+ 2908 3A 35 61     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 290B B7                   or      A
1956+ 290C C2 87 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 290F C1                   pop     BC              ; Throw away code string addr
1958+ 2910 21 F6 28             ld      HL,REDO         ; "Redo from start" message
1959+ 2913 CD 6F 2F             call    PRS             ; Output string
1960+ 2916 C3 08 22             jp      DOAGN           ; Do last INPUT again
1961+ 2919
1962+ 2919 CD DA 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 291C 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 291D FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 291F 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 2921 32 FE 5F             ld      (CTLOFG),A      ; Enable output
1967+ 2924 C2 33 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 2927 CD 2E 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 292A CD 8D 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 292D 3B                   defb    ";"
1971+ 292E E5                   push    HL              ; Save code string address
1972+ 292F CD 72 2F             call    PRS1            ; Output prompt string
1973+ 2932 3E                   defb    $3E             ; Skip "push HL"
1974+ 2933 E5           NOPMPT: push    HL              ; Save code string address
1975+ 2934 CD 0C 22             call    PROMPT          ; Get input with "? " prompt
1976+ 2937 C1                   pop     BC              ; Restore code string address
1977+ 2938 DA 25 26             jp      C,INPBRK        ; Break pressed - Exit
1978+ 293B 23                   inc     HL              ; Next byte
1979+ 293C 7E                   ld      A,(HL)          ; Get it
1980+ 293D B7                   or      A               ; End of line?
1981+ 293E 2B                   dec     HL              ; Back again
1982+ 293F C5                   push    BC              ; Re-save code string address
1983+ 2940 3A A0 61             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2943 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 2945 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 2948 CD 38 09             call    CURSOR_OFF      ; disable cursor
1987+ 294B CA 7E 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 294E 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 2950 C3 58 29             jp      NXTITM          ; Get next item
1990+ 2953
1991+ 2953 E5           READ:   push    HL              ; Save code string address
1992+ 2954 2A AA 61             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 2957 F6                   defb    $F6             ; Flag "READ"
1994+ 2958 AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 2959 32 35 61             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 295C E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 295D C3 64 29             jp      GTVLUS          ; Get values
1998+ 2960
1999+ 2960 CD 8D 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2963 2C                   defb    ','
2001+ 2964 CD 76 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 2967 E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 2968 D5                   push    DE              ; Save variable address
2004+ 2969 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 296A FE 2C                cp      ','             ; Comma?
2006+ 296C CA 8C 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 296F 3A 35 61             ld      A,(READFG)      ; Is it READ?
2008+ 2972 B7                   or      A
2009+ 2973 C2 F8 29             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 2976 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 2978 CD 98 23             call    OUTC            ; Output character
2012+ 297B CD 0C 22             call    PROMPT          ; Get INPUT with prompt
2013+ 297E D1                   pop     DE              ; Variable address
2014+ 297F C1                   pop     BC              ; Code string address
2015+ 2980 DA 25 26             jp      C,INPBRK        ; Break pressed
2016+ 2983 23                   inc     HL              ; Point to next DATA byte
2017+ 2984 7E                   ld      A,(HL)          ; Get byte
2018+ 2985 B7                   or      A               ; Is it zero (No input) ?
2019+ 2986 2B                   dec     HL              ; Back space INPUT pointer
2020+ 2987 C5                   push    BC              ; Save code string address
2021+ 2988 CA 7E 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 298B D5                   push    DE              ; Save variable address
2023+ 298C 3A ED 60     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 298F B7                   or      A               ; Is it numeric?
2025+ 2990 CA B6 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 2993 CD D6 25             call    GETCHR          ; Get next character
2027+ 2996 57                   ld      D,A             ; Save input character
2028+ 2997 47                   ld      B,A             ; Again
2029+ 2998 FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 299A CA AA 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 299D 3A 35 61             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 29A0 B7                   or      A
2033+ 29A1 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 29A2 CA A7 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 29A5 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 29A7 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 29A9 2B                   dec     HL              ; Back space for DTSTR
2038+ 29AA CD 31 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 29AD EB                   ex      DE,HL           ; String address to DE
2040+ 29AE 21 C1 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 29B1 E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 29B2 D5                   push    DE              ; Save address of string
2043+ 29B3 C3 B1 27             jp      LETSTR          ; Assign string to variable
2044+ 29B6
2045+ 29B6 CD D6 25     INPBIN: call    GETCHR          ; Get next character
2046+ 29B9 CD 7B 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 29BC E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 29BD CD CC 38             call    FPTHL           ; Move FPREG to variable
2049+ 29C0 E1                   pop     HL              ; Restore input pointer
2050+ 29C1 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 29C2 CD D6 25             call    GETCHR          ; Get next character
2052+ 29C5 CA CD 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 29C8 FE 2C                cp      ','             ; Another value?
2054+ 29CA C2 08 29             jp      NZ,BADINP       ; No - Bad input
2055+ 29CD E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29CE 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29CF CD D6 25             call    GETCHR          ; Get next character
2058+ 29D2 C2 60 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29D5 D1                   pop     DE              ; Restore DATA pointer
2060+ 29D6 3A 35 61             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29D9 B7                   or      A
2062+ 29DA EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29DB C2 FC 25             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 29DE D5                   push    DE              ; Save code string address
2065+ 29DF B6                   or      (HL)            ; More input given?
2066+ 29E0 21 E8 29             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 29E3 C4 6F 2F             call    NZ,PRS          ; Output string if extra given
2068+ 29E6 E1                   pop     HL              ; Restore code string address
2069+ 29E7 C9                   ret
2070+ 29E8
2071+ 29E8 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 29EC 72 61 20 69
2071+ 29F0 67 6E 6F 72
2071+ 29F4 65 64 0D 00
2072+ 29F8
2073+ 29F8 CD 7F 27     FDTLP:  call    DATA            ; Get next statement
2074+ 29FB B7                   or      A               ; End of line?
2075+ 29FC C2 11 2A             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 29FF 23                   inc     HL
2077+ 2A00 7E                   ld      A,(HL)          ; End of program?
2078+ 2A01 23                   inc     HL
2079+ 2A02 B6                   or      (HL)            ; 00 00 Ends program
2080+ 2A03 1E 06                ld      E,OD            ; ?OD Error
2081+ 2A05 CA A7 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 2A08 23                   inc     HL
2083+ 2A09 5E                   ld      E,(HL)          ; LSB of line number
2084+ 2A0A 23                   inc     HL
2085+ 2A0B 56                   ld      D,(HL)          ; MSB of line number
2086+ 2A0C EB                   ex      DE,HL
2087+ 2A0D 22 31 61             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 2A10 EB                   ex      DE,HL
2089+ 2A11 CD D6 25     FANDT:  call    GETCHR          ; Get next character
2090+ 2A14 FE 83                cp      ZDATA           ; "DATA" token
2091+ 2A16 C2 F8 29             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 2A19 C3 8C 29             jp      ANTVLU          ; Found - Convert input
2093+ 2A1C
2094+ 2A1C 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 2A1F C4 76 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 2A22 22 36 61             ld      (BRKLIN),HL     ; Save code string address
2097+ 2A25 CD 16 20             call    BAKSTK          ; Look for "FOR" block
2098+ 2A28 C2 93 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 2A2B F9                   ld      SP,HL           ; Clear nested loops
2100+ 2A2C D5                   push    DE              ; Save index address
2101+ 2A2D 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A2E 23                   inc     HL
2103+ 2A2F F5                   push    AF              ; Save sign of STEP
2104+ 2A30 D5                   push    DE              ; Save index address
2105+ 2A31 CD B2 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A34 E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A35 E5                   push    HL              ; Save address of index
2108+ 2A36 CD CE 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A39 E1                   pop     HL              ; Restore address of index
2110+ 2A3A CD CC 38             call    FPTHL           ; Move value to index variable
2111+ 2A3D E1                   pop     HL              ; Restore address of TO value
2112+ 2A3E CD C3 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A41 E5                   push    HL              ; Save address of line of FOR
2114+ 2A42 CD EF 38             call    CMPNUM          ; Compare index with TO value
2115+ 2A45 E1                   pop     HL              ; Restore address of line num
2116+ 2A46 C1                   pop     BC              ; Address of sign of STEP
2117+ 2A47 90                   sub     B               ; Compare with expected sign
2118+ 2A48 CD C3 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A4B CA 57 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A4E EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A4F 22 08 60             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A52 69                   ld      L,C             ; Set code string to loop
2123+ 2A53 60                   ld      H,B
2124+ 2A54 C3 92 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A57
2126+ 2A57 F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A58 2A 36 61             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A5B 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A5C FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A5E C2 96 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A61 CD D6 25             call    GETCHR          ; Position to index name
2132+ 2A64 CD 1F 2A             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A67              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A67
2135+ 2A67 CD 79 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A6A F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A6B 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A6C 3A ED 60     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A6F 8F                   adc     A,A             ; Expected + actual
2140+ 2A70 B7                   or      A               ; Clear carry , set parity
2141+ 2A71 E8                   ret     PE              ; Even parity - Types match
2142+ 2A72 C3 9F 20             jp      TMERR           ; Different types - Error
2143+ 2A75
2144+ 2A75 CD 8D 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A78 28                   defb    '('
2146+ 2A79 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A7A 16 00                ld      D,$00           ; Precedence value
2148+ 2A7C D5           EVAL1:  push    DE              ; Save precedence
2149+ 2A7D 0E 01                ld      C,$01
2150+ 2A7F CD 4A 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2A82 CD F0 2A             call    OPRND           ; Get next expression value
2152+ 2A85 22 38 61     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2A88 2A 38 61     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2A8B C1                   pop     BC              ; Precedence value and operator
2155+ 2A8C 78                   ld      A,B             ; Get precedence value
2156+ 2A8D FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2A8F D4 6A 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2A92 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2A93 16 00                ld      D,$00           ; Clear Last relation
2160+ 2A95 D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2A97 DA B1 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2A9A FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2A9C D2 B1 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2A9F FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2AA1 17                   rla                     ; <- Test for legal
2166+ 2AA2 AA                   xor     D               ; <- combinations of < = >
2167+ 2AA3 BA                   cp      D               ; <- by combining last token
2168+ 2AA4 57                   ld      D,A             ; <- with current one
2169+ 2AA5 DA 8D 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2AA8 22 2D 61             ld      (CUROPR),HL     ; Save address of current token
2171+ 2AAB CD D6 25             call    GETCHR          ; Get next character
2172+ 2AAE C3 95 2A             jp      RLTLP           ; Treat the two as one
2173+ 2AB1
2174+ 2AB1 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2AB2 B7                   or      A
2176+ 2AB3 C2 F1 2B             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2AB6 7E                   ld      A,(HL)          ; Get operator token
2178+ 2AB7 22 2D 61             ld      (CUROPR),HL     ; Save operator address
2179+ 2ABA D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2ABC D8                   ret     C               ; Neither - Exit
2181+ 2ABD FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2ABF D0                   ret     NC              ; No - Exit
2183+ 2AC0 5F                   ld      E,A             ; Coded operator
2184+ 2AC1 3A ED 60             ld      A,(TYPE)        ; Get data type
2185+ 2AC4 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2AC5 B3                   or      E               ; Combine with coded operator
2187+ 2AC6 7B                   ld      A,E             ; Get coded operator
2188+ 2AC7 CA 65 30             jp      Z,CONCAT        ; String concatenation
2189+ 2ACA 07                   rlca                    ; Times 2
2190+ 2ACB 83                   add     A,E             ; Times 3
2191+ 2ACC 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2ACD 21 08 1F             ld      HL,PRITAB       ; Precedence table
2193+ 2AD0 19                   add     HL,DE           ; To the operator concerned
2194+ 2AD1 78                   ld      A,B             ; Last operator precedence
2195+ 2AD2 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AD3 BA                   cp      D               ; Compare with eval precedence
2197+ 2AD4 D0                   ret     NC              ; Exit if higher precedence
2198+ 2AD5 23                   inc     HL              ; Point to routine address
2199+ 2AD6 CD 6A 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2AD9
2201+ 2AD9 C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2ADA 01 88 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2ADD C5                   push    BC              ; Save on stack for return
2204+ 2ADE 43                   ld      B,E             ; Save operator
2205+ 2ADF 4A                   ld      C,D             ; Save precedence
2206+ 2AE0 CD A5 38             call    STAKFP          ; Move value to stack
2207+ 2AE3 58                   ld      E,B             ; Restore operator
2208+ 2AE4 51                   ld      D,C             ; Restore precedence
2209+ 2AE5 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2AE6 23                   inc     HL
2211+ 2AE7 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2AE8 23                   inc     HL
2213+ 2AE9 C5                   push    BC              ; Save routine address
2214+ 2AEA 2A 2D 61             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2AED C3 7C 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2AF0
2217+ 2AF0 AF           OPRND:  xor     A               ; Get operand routine
2218+ 2AF1 32 ED 60             ld      (TYPE),A        ; Set numeric expected
2219+ 2AF4 CD D6 25             call    GETCHR          ; Get next character
2220+ 2AF7 1E 24                ld      E,MO            ; ?MO Error
2221+ 2AF9 CA A7 20             jp      Z,ERROR         ; No operand - Error
2222+ 2AFC DA 7B 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2AFF CD 78 26             call    CHKLTR          ; See if a letter
2224+ 2B02 D2 57 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2B05 FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2B07 20 12                jr      NZ,NOTAMP
2227+ 2B09 CD D6 25             call    GETCHR          ; Get next character
2228+ 2B0C FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2B0E CA 51 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2B11 FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2B13 CA C1 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2B16 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2B18 CA A7 20             jp      Z,ERROR         ;
2234+ 2B1B FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2B1D CA F0 2A             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2B20 FE 2E                cp      '.'             ; '.' ?
2237+ 2B22 CA 7B 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2B25 FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2B27 CA 46 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2B2A FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2B2C CA 2E 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B2F FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B31 CA 51 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B34 FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B36 CA 92 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B39 D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B3B D2 68 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B3E CD 75 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B41 CD 8D 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B44 29                   defb    ')'
2251+ 2B45 C9                   ret
2252+ 2B46
2253+ 2B46 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B48 CD 7C 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B4B 2A 38 61             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B4E E5                   push    HL              ; Save next operator address
2257+ 2B4F CD 9D 38             call    INVSGN          ; Negate value
2258+ 2B52 CD 6A 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B55 E1                   pop     HL              ; Restore next operator address
2260+ 2B56 C9                   ret
2261+ 2B57
2262+ 2B57 CD 76 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B5A E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B5B EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B5C 22 B2 61             ld      (FPREG),HL      ; Save address of variable
2266+ 2B5F 3A ED 60             ld      A,(TYPE)        ; Get type
2267+ 2B62 B7                   or      A               ; Numeric?
2268+ 2B63 CC B2 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B66 E1                   pop     HL              ; Restore code string address
2270+ 2B67 C9                   ret
2271+ 2B68
2272+ 2B68 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B6A 07                   rlca                    ; Double function offset
2274+ 2B6B 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B6C C5                   push    BC              ; Save adjusted token value
2276+ 2B6D CD D6 25             call    GETCHR          ; Get next character
2277+ 2B70 79                   ld      A,C             ; Get adjusted token value
2278+ 2B71 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B73 CA 9F 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B76 FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B78 CA 41 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B7B FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2B7D DA 99 2B             jp      C,FNVAL         ; No - Do function
2284+ 2B80 CD 75 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2B83 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2B86 2C                   defb    ','
2287+ 2B87 CD 6B 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2B8A EB                   ex      DE,HL           ; Save code string address
2289+ 2B8B 2A B2 61             ld      HL,(FPREG)      ; Get address of string
2290+ 2B8E E3                   ex      (SP),HL         ; Save address of string
2291+ 2B8F E5                   push    HL              ; Save adjusted token value
2292+ 2B90 EB                   ex      DE,HL           ; Restore code string address
2293+ 2B91 CD ED 32             call    GETINT          ; Get integer 0-255
2294+ 2B94 EB                   ex      DE,HL           ; Save code string address
2295+ 2B95 E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2B96 C3 A1 2B             jp      GOFUNC          ; Jump to string function
2297+ 2B99
2298+ 2B99 CD 3E 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2B9C E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2B9D 11 52 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2BA0 D5                   push    DE              ; Save on stack
2302+ 2BA1 01 C5 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2BA4 09                   add     HL,BC           ; Point to right address
2304+ 2BA5 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2BA6 23                   inc     HL              ;
2306+ 2BA7 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2BA8 69                   ld      L,C             ; Address to HL
2308+ 2BA9 E9                   jp      (HL)            ; Jump to function
2309+ 2BAA
2310+ 2BAA 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2BAB FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2BAD C8                   ret     Z               ; Yes - Return
2313+ 2BAE FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2BB0 C8                   ret     Z               ; Yes - Return
2315+ 2BB1 14                   inc     D               ; Inc to flag positive exponent
2316+ 2BB2 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2BB4 C8                   ret     Z               ; Yes - Return
2318+ 2BB5 FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2BB7 C8                   ret     Z               ; Yes - Return
2320+ 2BB8 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2BB9 C9                   ret                     ; Return "NZ"
2322+ 2BBA
2323+ 2BBA              ; execute OR, AND, and XOR operations
2324+ 2BBA AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2BBB 18 07                jr      CNTLGC
2326+ 2BBD AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2BBE D6 01                sub     $01
2328+ 2BC0 18 02                jr      CNTLGC
2329+ 2BC2 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2BC3 3C                   inc     A
2331+ 2BC4 F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2BC5 CD 6A 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2BC8 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2BCB F1                   pop     AF              ; retrieve operand's flags
2335+ 2BCC EB                   ex      DE,HL           ; <- Get last
2336+ 2BCD C1                   pop     BC              ; <-  value
2337+ 2BCE E3                   ex      (SP),HL         ; <-  from
2338+ 2BCF EB                   ex      DE,HL           ; <-  stack
2339+ 2BD0 CD B5 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BD3 F5                   push    AF              ; store operand's flags
2341+ 2BD4 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BD7 F1                   pop     AF              ; retrieve operand's flags
2343+ 2BD8 C1                   pop     BC              ; Get value
2344+ 2BD9 79                   ld      A,C             ; Get LSB
2345+ 2BDA 21 50 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2BDD 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2BDF A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2BE0 4F                   ld      C,A             ; Save LSB
2349+ 2BE1 78                   ld      A,B             ; Get MSB
2350+ 2BE2 A2                   and     D               ; "AND" MSBs
2351+ 2BE3 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2BE4 F2 EC 2B     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2BE7 B3                   or      E               ; "OR" LSBs
2354+ 2BE8 4F                   ld      C,A             ; Save LSB
2355+ 2BE9 78                   ld      A,B             ; Get MSB
2356+ 2BEA B2                   or      D               ; "OR" MSBs
2357+ 2BEB E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2BEC AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2BED 4F                   ld      C,A             ; Save LSB
2360+ 2BEE 78                   ld      A,B             ; Get MSB
2361+ 2BEF AA                   xor     D               ; "XOR" MSBs
2362+ 2BF0 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2BF1
2364+ 2BF1 21 03 2C     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2BF4 3A ED 60             ld      A,(TYPE)        ; Get data type
2366+ 2BF7 1F                   rra                     ; Carry set = string
2367+ 2BF8 7A                   ld      A,D             ; Get last precedence value
2368+ 2BF9 17                   rla                     ; Times 2 plus carry
2369+ 2BFA 5F                   ld      E,A             ; To E
2370+ 2BFB 16 64                ld      D,$64           ; Relational precedence
2371+ 2BFD 78                   ld      A,B             ; Get current precedence
2372+ 2BFE BA                   cp      D               ; Compare with last
2373+ 2BFF D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2C00 C3 D9 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2C03
2376+ 2C03 05 2C        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2C05 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2C06 B7                   or      A
2379+ 2C07 1F                   rra
2380+ 2C08 C1                   pop     BC              ; Get last expression to BCDE
2381+ 2C09 D1                   pop     DE
2382+ 2C0A F5                   push    AF              ; Save status
2383+ 2C0B CD 6C 2A             call    CHKTYP          ; Check that types match
2384+ 2C0E 21 47 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2C11 E5                   push    HL              ; Save for RETurn
2386+ 2C12 CA EF 38             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2C15 AF                   xor     A               ; Compare two strings
2388+ 2C16 32 ED 60             ld      (TYPE),A        ; Set type to numeric
2389+ 2C19 D5                   push    DE              ; Save string name
2390+ 2C1A CD B2 30             call    GSTRCU          ; Get current string
2391+ 2C1D 7E                   ld      A,(HL)          ; Get length of string
2392+ 2C1E 23                   inc     HL
2393+ 2C1F 23                   inc     HL
2394+ 2C20 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2C21 23                   inc     HL
2396+ 2C22 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2C23 D1                   pop     DE              ; Restore string name
2398+ 2C24 C5                   push    BC              ; Save address of string
2399+ 2C25 F5                   push    AF              ; Save length of string
2400+ 2C26 CD B6 30             call    GSTRDE          ; Get second string
2401+ 2C29 CD C3 38             call    LOADFP          ; Get address of second string
2402+ 2C2C F1                   pop     AF              ; Restore length of string 1
2403+ 2C2D 57                   ld      D,A             ; Length to D
2404+ 2C2E E1                   pop     HL              ; Restore address of string 1
2405+ 2C2F 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C30 B2                   or      D               ; Bytes of string 1 to do
2407+ 2C31 C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C32 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C33 D6 01                sub     $01
2410+ 2C35 D8                   ret     C               ; Exit if end of string 1
2411+ 2C36 AF                   xor     A
2412+ 2C37 BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C38 3C                   inc     A
2414+ 2C39 D0                   ret     NC              ; Exit if end of string 2
2415+ 2C3A 15                   dec     D               ; Count bytes in string 1
2416+ 2C3B 1D                   dec     E               ; Count bytes in string 2
2417+ 2C3C 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C3D BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C3E 23                   inc     HL              ; Move up string 1
2420+ 2C3F 03                   inc     BC              ; Move up string 2
2421+ 2C40 CA 2F 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C43 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C44 C3 7F 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C47
2425+ 2C47 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C48 8F                   adc     A,A             ; Double plus carry
2427+ 2C49 C1                   pop     BC              ; Get other value
2428+ 2C4A A0                   and     B               ; Combine them
2429+ 2C4B C6 FF                add     A,-1            ; Carry set if different
2430+ 2C4D 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C4E C3 86 38             jp      FLGREL          ; Set current value & continue
2432+ 2C51
2433+ 2C51 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C53 CD 7C 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C56 CD 6A 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C59 CD 8C 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C5C 7B                   ld      A,E             ; Get LSB
2438+ 2C5D 2F                   cpl                     ; Invert LSB
2439+ 2C5E 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C5F 7A                   ld      A,D             ; Get MSB
2441+ 2C60 2F                   cpl                     ; Invert MSB
2442+ 2C61 CD 50 2E             call    ACPASS          ; Save AC as current
2443+ 2C64 C1                   pop     BC              ; Clean up stack
2444+ 2C65 C3 88 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C68
2446+ 2C68 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C69 CD D6 25             call    GETCHR          ; Get next character
2448+ 2C6C C8                   ret     Z               ; End of DIM statement
2449+ 2C6D CD 8D 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C70 2C                   defb    ','
2451+ 2C71 01 68 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C74 C5                   push    BC              ; Save on stack
2453+ 2C75 F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C76 AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C77 32 EC 60             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C7A 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C7B CD 78 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2C7E DA 8D 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2C81 AF                   xor     A
2460+ 2C82 4F                   ld      C,A             ; Clear second byte of name
2461+ 2C83 32 ED 60             ld      (TYPE),A        ; Set type to numeric
2462+ 2C86 CD D6 25             call    GETCHR          ; Get next character
2463+ 2C89 DA 92 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2C8C CD 78 26             call    CHKLTR          ; See if a letter
2465+ 2C8F DA 9F 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2C92 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2C93 CD D6 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2C96 DA 93 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2C99 CD 78 26             call    CHKLTR          ; See if a letter
2470+ 2C9C D2 93 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2C9F D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2CA1 C2 AE 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2CA4 3C                   inc     A               ; A = 1 (string type)
2474+ 2CA5 32 ED 60             ld      (TYPE),A        ; Set type to string
2475+ 2CA8 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2CA9 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2CAA 4F                   ld      C,A             ; Resave second byte on name
2478+ 2CAB CD D6 25             call    GETCHR          ; Get next character
2479+ 2CAE 3A 33 61     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2CB1 3D                   dec     A
2481+ 2CB2 CA 5B 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2CB5 F2 BE 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2CB8 7E                   ld      A,(HL)          ; Get byte again
2484+ 2CB9 D6 28                sub     '('             ; Subscripted variable?
2485+ 2CBB CA 33 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2CBE
2487+ 2CBE AF           NSCFOR: xor     A               ; Simple variable
2488+ 2CBF 32 33 61             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2CC2 E5                   push    HL              ; Save code string address
2490+ 2CC3 50                   ld      D,B             ; DE = Variable name to find
2491+ 2CC4 59                   ld      E,C
2492+ 2CC5 2A AC 61             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2CC8 CD 87 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2CCB 11 AE 61             ld      DE,FNARG        ; Point to argument value
2495+ 2CCE CA 64 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CD1 2A A6 61             ld      HL,(VAREND)     ; End of variables
2497+ 2CD4 EB                   ex      DE,HL           ; Address of end of search
2498+ 2CD5 2A A4 61             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CD8 CD 87 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CDB CA F1 2C             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2CDE 79                   ld      A,C             ; Get second byte of name
2502+ 2CDF 96                   sub     (HL)            ; Compare with name in list
2503+ 2CE0 23                   inc     HL              ; Move on to first byte
2504+ 2CE1 C2 E6 2C             jp      NZ,FNTHR        ; Different - Find another
2505+ 2CE4 78                   ld      A,B             ; Get first byte of name
2506+ 2CE5 96                   sub     (HL)            ; Compare with name in list
2507+ 2CE6 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2CE7 CA 25 2D             jp      Z,RETADR        ; Found - Return address
2509+ 2CEA 23                   inc     HL              ; <- Skip
2510+ 2CEB 23                   inc     HL              ; <- over
2511+ 2CEC 23                   inc     HL              ; <- F.P.
2512+ 2CED 23                   inc     HL              ; <- value
2513+ 2CEE C3 D8 2C             jp      FNDVAR          ; Keep looking
2514+ 2CF1
2515+ 2CF1 E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2CF2 E3                   ex      (SP),HL         ; Get return address
2517+ 2CF3 D5                   push    DE              ; Save address of variable
2518+ 2CF4 11 5A 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2CF7 CD 87 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2CFA D1                   pop     DE              ; Restore address of variable
2521+ 2CFB CA 28 2D             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2CFE E3                   ex      (SP),HL         ; Put back return
2523+ 2CFF E5                   push    HL              ; Save code string address
2524+ 2D00 C5                   push    BC              ; Save variable name
2525+ 2D01 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2D04 2A A8 61             ld      HL,(ARREND)     ; End of arrays
2527+ 2D07 E5                   push    HL              ; Save end of arrays
2528+ 2D08 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2D09 C1                   pop     BC              ; Source address in BC
2530+ 2D0A E5                   push    HL              ; Save new end address
2531+ 2D0B CD 39 20             call    MOVUP           ; Move arrays up
2532+ 2D0E E1                   pop     HL              ; Restore new end address
2533+ 2D0F 22 A8 61             ld      (ARREND),HL     ; Set new end address
2534+ 2D12 60                   ld      H,B             ; End of variables to HL
2535+ 2D13 69                   ld      L,C
2536+ 2D14 22 A6 61             ld      (VAREND),HL     ; Set new end address
2537+ 2D17
2538+ 2D17 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2D18 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2D1A CD 87 23             call    CPDEHL          ; Done them all?
2541+ 2D1D C2 17 2D             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2D20 D1                   pop     DE              ; Get variable name
2543+ 2D21 73                   ld      (HL),E          ; Store second character
2544+ 2D22 23                   inc     HL
2545+ 2D23 72                   ld      (HL),D          ; Store first character
2546+ 2D24 23                   inc     HL
2547+ 2D25 EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2D26 E1                   pop     HL              ; Restore code string address
2549+ 2D27 C9                   ret
2550+ 2D28
2551+ 2D28 32 B5 61     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2D2B 21 0A 20             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D2E 22 B2 61             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D31 E1                   pop     HL              ; Restore code string address
2555+ 2D32 C9                   ret
2556+ 2D33
2557+ 2D33 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D34 2A EC 60             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D37 E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D38 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D39 D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D3A C5                   push    BC              ; Save array name
2563+ 2D3B CD 80 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D3E C1                   pop     BC              ; Restore array name
2565+ 2D3F F1                   pop     AF              ; Get number of dimensions
2566+ 2D40 EB                   ex      DE,HL
2567+ 2D41 E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D42 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D43 EB                   ex      DE,HL
2570+ 2D44 3C                   inc     A               ; Count dimensions
2571+ 2D45 57                   ld      D,A             ; Save in D
2572+ 2D46 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D47 FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D49 CA 39 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D4C CD 8D 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D4F 29                   defb    ')'
2577+ 2D50 22 38 61             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D53 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D54 22 EC 60             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D57 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D59 D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D5A 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D5B
2584+ 2D5B E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D5C F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D5D 2A A6 61             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D60 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D61 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D62 EB                   ex      DE,HL
2590+ 2D63 2A A8 61             ld      HL,(ARREND)     ; End of arrays
2591+ 2D66 EB                   ex      DE,HL           ; Current array pointer
2592+ 2D67 CD 87 23             call    CPDEHL          ; End of arrays found?
2593+ 2D6A CA 93 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D6D 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D6E B9                   cp      C               ; Compare with name given
2596+ 2D6F 23                   inc     HL              ; Move on
2597+ 2D70 C2 75 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D73 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D74 B8                   cp      B               ; Compare with name given
2600+ 2D75 23           NXTARY: inc     HL              ; Move on
2601+ 2D76 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D77 23                   inc     HL
2603+ 2D78 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D79 23                   inc     HL
2605+ 2D7A C2 61 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2D7D 3A EC 60             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2D80 B7                   or      A
2608+ 2D81 C2 96 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2D84 F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2D85 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2D86 4D                   ld      C,L
2612+ 2D87 CA 64 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2D8A 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2D8B CA F1 2D             jp      Z,FINDEL        ; Yes - Find element
2615+ 2D8E 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2D90 C3 A7 20             jp      ERROR           ; Output error
2617+ 2D93
2618+ 2D93 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2D96 F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2D97 CA A1 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2D9A 71                   ld      (HL),C          ; Save second byte of name
2622+ 2D9B 23                   inc     HL
2623+ 2D9C 70                   ld      (HL),B          ; Save first byte of name
2624+ 2D9D 23                   inc     HL
2625+ 2D9E 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2D9F CD 4A 20             call    CHKSTK          ; Check if enough memory
2627+ 2DA2 23                   inc     HL              ; Point to number of dimensions
2628+ 2DA3 23                   inc     HL
2629+ 2DA4 22 2D 61             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2DA7 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2DA8 23                   inc     HL
2632+ 2DA9 3A EC 60             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2DAC 17                   rla                     ; Carry set = Create
2634+ 2DAD 79                   ld      A,C             ; Get number of dimensions
2635+ 2DAE 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2DB1 D2 B6 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2DB4 C1                   pop     BC              ; Get specified dimension size
2638+ 2DB5 03                   inc     BC              ; Include zero element
2639+ 2DB6 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2DB7 23                   inc     HL
2641+ 2DB8 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2DB9 23                   inc     HL
2643+ 2DBA F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2DBB E5                   push    HL              ; Save address of dim'n size
2645+ 2DBC CD 60 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2DBF EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2DC0 E1                   pop     HL              ; Restore address of dimension
2648+ 2DC1 F1                   pop     AF              ; Restore number of dimensions
2649+ 2DC2 3D                   dec     A               ; Count them
2650+ 2DC3 C2 AE 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2DC6 F5                   push    AF              ; Save locate/create flag
2652+ 2DC7 42                   ld      B,D             ; MSB of memory needed
2653+ 2DC8 4B                   ld      C,E             ; LSB of memory needed
2654+ 2DC9 EB                   ex      DE,HL
2655+ 2DCA 19                   add     HL,DE           ; Add bytes to array start
2656+ 2DCB DA 62 20             jp      C,OMERR         ; Too big - Error
2657+ 2DCE CD 53 20             call    ENFMEM          ; See if enough memory
2658+ 2DD1 22 A8 61             ld      (ARREND),HL     ; Save new end of array
2659+ 2DD4
2660+ 2DD4 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DD5 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DD7 CD 87 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DDA C2 D4 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2DDD 03                   inc     BC              ; Number of bytes + 1
2665+ 2DDE 57                   ld      D,A             ; A=0
2666+ 2DDF 2A 2D 61             ld      HL,(CUROPR)     ; Get address of array
2667+ 2DE2 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2DE3 EB                   ex      DE,HL           ; To HL
2669+ 2DE4 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2DE5 09                   add     HL,BC           ; Add number of bytes
2671+ 2DE6 EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2DE7 2B                   dec     HL
2673+ 2DE8 2B                   dec     HL
2674+ 2DE9 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2DEA 23                   inc     HL
2676+ 2DEB 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2DEC 23                   inc     HL
2678+ 2DED F1                   pop     AF              ; Locate / Create?
2679+ 2DEE DA 15 2E             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2DF1 47           FINDEL: ld      B,A             ; Find array element
2681+ 2DF2 4F                   ld      C,A
2682+ 2DF3 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2DF4 23                   inc     HL
2684+ 2DF5 16                   defb    $16             ; Skip "pop HL"
2685+ 2DF6 E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2DF7 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2DF8 23                   inc     HL
2688+ 2DF9 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2DFA 23                   inc     HL
2690+ 2DFB E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2DFC F5                   push    AF              ; Save number of dim'ns
2692+ 2DFD CD 87 23             call    CPDEHL          ; Dimension too large?
2693+ 2E00 D2 8E 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2E03 E5                   push    HL              ; Save index
2695+ 2E04 CD 60 39             call    MLDEBC          ; Multiply previous by size
2696+ 2E07 D1                   pop     DE              ; Index supplied to DE
2697+ 2E08 19                   add     HL,DE           ; Add index to pointer
2698+ 2E09 F1                   pop     AF              ; Number of dimensions
2699+ 2E0A 3D                   dec     A               ; Count them
2700+ 2E0B 44                   ld      B,H             ; MSB of pointer
2701+ 2E0C 4D                   ld      C,L             ; LSB of pointer
2702+ 2E0D C2 F6 2D             jp      NZ,FNDELP       ; More - Keep going
2703+ 2E10 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2E11 29                   add     HL,HL
2705+ 2E12 C1                   pop     BC              ; Start of array
2706+ 2E13 09                   add     HL,BC           ; Point to element
2707+ 2E14 EB                   ex      DE,HL           ; Address of element to DE
2708+ 2E15 2A 38 61     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2E18 C9                   ret
2710+ 2E19
2711+ 2E19
2712+ 2E19              ; returns the value of the 32-bit system tick counter as
2713+ 2E19              ; two 16-bit words
2714+ 2E19 CD 6A 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2E1C CD 8C 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2E1F 2A 3E 61             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2E22 7B                   ld      A,E
2718+ 2E23 B2                   or      D               ; is it 0?
2719+ 2E24 CA 2A 2E             jp      Z,ENDTMR        ; yes, jump over
2720+ 2E27 2A 40 61             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2E2A 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2E2B 7C                   ld      A,H             ; ...into AB
2723+ 2E2C C3 51 2E             jp      ABPASS          ; return word into AB
2724+ 2E2F
2725+ 2E2F
2726+ 2E2F              ; returns the free space for BASIC or into the string pool
2727+ 2E2F 2A A8 61     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E32 EB                   ex      DE,HL           ; To DE
2729+ 2E33 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E36 39                   add     HL,SP           ; Current stack value
2731+ 2E37 3A ED 60             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E3A B7                   or      A
2733+ 2E3B CA 4B 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E3E CD B2 30             call    GSTRCU          ; Current string to pool
2735+ 2E41 CD B2 2F             call    GARBGE          ; Garbage collection
2736+ 2E44 2A 06 60             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E47 EB                   ex      DE,HL           ; To DE
2738+ 2E48 2A 2B 61             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E4B 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E4C 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E4D 4F                   ld      C,A             ; Save difference if C
2742+ 2E4E 7C                   ld      A,H             ; Get MSB of end
2743+ 2E4F 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E50 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E51 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E52 1E 00                ld      E,$00
2747+ 2E54 21 ED 60             ld      HL,TYPE         ; Point to type
2748+ 2E57 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E58 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E5A C3 8B 38             jp      RETINT          ; Return the integer
2751+ 2E5D
2752+ 2E5D              ; returns the X position of the cursor during a print
2753+ 2E5D 3A EB 60     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E60              ; return the value in A as a number
2755+ 2E60 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E61 AF                   xor     A               ; Zero A
2757+ 2E62 C3 51 2E             jp      ABPASS          ; Return integer AB
2758+ 2E65
2759+ 2E65 CD E8 2E     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E68 CD DA 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E6B 01 7F 27             ld      BC,DATA         ; To get next statement
2762+ 2E6E C5                   push    BC              ; Save address for RETurn
2763+ 2E6F D5                   push    DE              ; Save address of function ptr
2764+ 2E70 CD 8D 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E73 28                   defb    '('
2766+ 2E74 CD 76 2C             call    GETVAR          ; Get argument variable name
2767+ 2E77 E5                   push    HL              ; Save code string address
2768+ 2E78 EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E79 2B                   dec     HL
2770+ 2E7A 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E7B 2B                   dec     HL
2772+ 2E7C 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2E7D E1                   pop     HL              ; Restore code string address
2774+ 2E7E CD 6A 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2E81 CD 8D 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2E84 29                   defb    ')'
2777+ 2E85 CD 8D 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2E88 C9                   defb    ZEQUAL          ; "=" token
2779+ 2E89 44                   ld      B,H             ; Code string address to BC
2780+ 2E8A 4D                   ld      C,L
2781+ 2E8B E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2E8C 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2E8D 23                   inc     HL
2784+ 2E8E 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2E8F C3 27 2F             jp      SVSTAD          ; Save address and do function
2786+ 2E92
2787+ 2E92 CD E8 2E     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2E95 D5                   push    DE              ; Save function pointer address
2789+ 2E96 CD 3E 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2E99 CD 6A 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2E9C E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2E9D 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2E9E 23                   inc     HL
2794+ 2E9F 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2EA0 23                   inc     HL
2796+ 2EA1 7A                   ld      A,D             ; And function DEFined?
2797+ 2EA2 B3                   or      E
2798+ 2EA3 CA 99 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2EA6 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2EA7 23                   inc     HL
2801+ 2EA8 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2EA9 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2EAA E5                   push    HL              ; Save it
2804+ 2EAB 2A AC 61             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2EAE E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2EAF 22 AC 61             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2EB2 2A B0 61             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2EB5 E5                   push    HL              ; Save it
2809+ 2EB6 2A AE 61             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2EB9 E5                   push    HL              ; Save it
2811+ 2EBA 21 AE 61             ld      HL,FNARG        ; HL = Value of argument
2812+ 2EBD D5                   push    DE              ; Save FN code string address
2813+ 2EBE CD CC 38             call    FPTHL           ; Move FPREG to argument
2814+ 2EC1 E1                   pop     HL              ; Get FN code string address
2815+ 2EC2 CD 67 2A             call    GETNUM          ; Get value from function
2816+ 2EC5 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2EC6 CD D6 25             call    GETCHR          ; Get next character
2818+ 2EC9 C2 8D 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2ECC E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2ECD 22 AE 61             ld      (FNARG),HL      ; Restore it
2821+ 2ED0 E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2ED1 22 B0 61             ld      (FNARG+2),HL    ; Restore it
2823+ 2ED4 E1                   pop     HL              ; Get name of old arg
2824+ 2ED5 22 AC 61             ld      (FNRGNM),HL     ; Restore it
2825+ 2ED8 E1                   pop     HL              ; Restore code string address
2826+ 2ED9 C9                   ret
2827+ 2EDA
2828+ 2EDA E5           IDTEST: push    HL              ; Save code string address
2829+ 2EDB 2A 08 60             ld      HL,(LINEAT)     ; Get current line number
2830+ 2EDE 23                   inc     HL              ; -1 means direct statement
2831+ 2EDF 7C                   ld      A,H
2832+ 2EE0 B5                   or      L
2833+ 2EE1 E1                   pop     HL              ; Restore code string address
2834+ 2EE2 C0                   ret     NZ              ; Return if in program
2835+ 2EE3 1E 16                ld      E,ID            ; ?ID Error
2836+ 2EE5 C3 A7 20             jp      ERROR
2837+ 2EE8
2838+ 2EE8 CD 8D 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2EEB B9                   defb    ZFN             ; "FN" token
2840+ 2EEC 3E 80                ld      A,$80
2841+ 2EEE 32 33 61             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2EF1 B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2EF2 47                   ld      B,A             ; in first byte of name
2844+ 2EF3 CD 7B 2C             call    GTFNAM          ; Get FN name
2845+ 2EF6 C3 6A 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2EF9
2847+ 2EF9 CD 6A 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2EFC CD 19 3A             call    NUMASC          ; Turn number into text
2849+ 2EFF CD 2D 2F     STR1:   call    CRTST           ; Create string entry for it
2850+ 2F02 CD B2 30             call    GSTRCU          ; Current string to pool
2851+ 2F05 01 0D 31             ld      BC,TOPOOL       ; Save in string pool
2852+ 2F08 C5                   push    BC              ; Save address on stack
2853+ 2F09
2854+ 2F09 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2F0A 23                   inc     HL
2856+ 2F0B 23                   inc     HL
2857+ 2F0C E5                   push    HL              ; Save pointer to string
2858+ 2F0D CD 88 2F             call    TESTR           ; See if enough string space
2859+ 2F10 E1                   pop     HL              ; Restore pointer to string
2860+ 2F11 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2F12 23                   inc     HL
2862+ 2F13 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2F14 CD 21 2F             call    CRTMST          ; Create string entry
2864+ 2F17 E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2F18 6F                   ld      L,A             ; Length of string
2866+ 2F19 CD A5 30             call    TOSTRA          ; Move to string area
2867+ 2F1C D1                   pop     DE              ; Restore pointer to MSB
2868+ 2F1D C9                   ret
2869+ 2F1E
2870+ 2F1E CD 88 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2F21 21 27 61     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2F24 E5                   push    HL              ; Save it
2873+ 2F25 77                   ld      (HL),A          ; Save length of string
2874+ 2F26 23                   inc     HL
2875+ 2F27 23           SVSTAD: inc     HL
2876+ 2F28 73                   ld      (HL),E          ; Save LSB of address
2877+ 2F29 23                   inc     HL
2878+ 2F2A 72                   ld      (HL),D          ; Save MSB of address
2879+ 2F2B E1                   pop     HL              ; Restore pointer
2880+ 2F2C C9                   ret
2881+ 2F2D
2882+ 2F2D 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F2E 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F30 50                   ld      D,B             ; Quote to D
2885+ 2F31 E5           DTSTR:  push    HL              ; Save start
2886+ 2F32 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F34 23           QTSTLP: inc     HL              ; Move on
2888+ 2F35 7E                   ld      A,(HL)          ; Get byte
2889+ 2F36 0C                   inc     C               ; Count bytes
2890+ 2F37 B7                   or      A               ; End of line?
2891+ 2F38 CA 43 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F3B BA                   cp      D               ; Terminator D found?
2893+ 2F3C CA 43 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F3F B8                   cp      B               ; Terminator B found?
2895+ 2F40 C2 34 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F43 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F45 CC D6 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F48 E3                   ex      (SP),HL         ; Starting quote
2899+ 2F49 23                   inc     HL              ; First byte of string
2900+ 2F4A EB                   ex      DE,HL           ; To DE
2901+ 2F4B 79                   ld      A,C             ; Get length
2902+ 2F4C CD 21 2F             call    CRTMST          ; Create string entry
2903+ 2F4F 11 27 61     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F52 2A 19 61             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F55 22 B2 61             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F58 3E 01                ld      A,$01
2907+ 2F5A 32 ED 60             ld      (TYPE),A        ; Set type to string
2908+ 2F5D CD CF 38             call    DETHL4          ; Move string to pool
2909+ 2F60 CD 87 23             call    CPDEHL          ; Out of string pool?
2910+ 2F63 22 19 61             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F66 E1                   pop     HL              ; Restore code string address
2912+ 2F67 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F68 C0                   ret     NZ              ; Return if pool OK
2914+ 2F69 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F6B C3 A7 20             jp      ERROR           ; String pool overflow
2916+ 2F6E
2917+ 2F6E 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F6F CD 2D 2F     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F72 CD B2 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F75 CD C3 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F78 1C                   inc     E               ; Length + 1
2922+ 2F79 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F7A C8                   ret     Z               ; End of string
2924+ 2F7B 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2F7C CD 98 23             call    OUTC            ; Output character in A
2926+ 2F7F FE 0D                cp      CR              ; Return?
2927+ 2F81 CC AD 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2F84 03                   inc     BC              ; Next byte in string
2929+ 2F85 C3 79 2F             jp      PRSLP           ; More characters to output
2930+ 2F88
2931+ 2F88 B7           TESTR:  or      A               ; Test if enough room
2932+ 2F89 0E                   defb    $0E             ; No garbage collection done
2933+ 2F8A F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2F8B F5                   push    AF              ; Save status
2935+ 2F8C 2A 06 60             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2F8F EB                   ex      DE,HL           ; To DE
2937+ 2F90 2A 2B 61             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2F93 2F                   cpl                     ; Negate length (Top down)
2939+ 2F94 4F                   ld      C,A             ; -Length to BC
2940+ 2F95 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2F97 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2F98 23                   inc     HL              ; Plus one for 2's complement
2943+ 2F99 CD 87 23             call    CPDEHL          ; Below string RAM area?
2944+ 2F9C DA A6 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2F9F 22 2B 61             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2FA2 23                   inc     HL              ; Point to first byte of string
2947+ 2FA3 EB                   ex      DE,HL           ; Address to DE
2948+ 2FA4 F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2FA5 C9                   ret
2950+ 2FA6
2951+ 2FA6 F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2FA7 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2FA9 CA A7 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2FAC BF                   cp      A               ; Flag garbage collect done
2955+ 2FAD F5                   push    AF              ; Save status
2956+ 2FAE 01 8A 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2FB1 C5                   push    BC              ; Save for RETurn
2958+ 2FB2 2A EF 60     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2FB5 22 2B 61     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2FB8 21 00 00             ld      HL,$0000
2961+ 2FBB E5                   push    HL              ; Flag no string found
2962+ 2FBC 2A 06 60             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2FBF E5                   push    HL              ; Save bottom of string space
2964+ 2FC0 21 1B 61             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2FC3 EB           GRBLP:  ex      DE,HL
2966+ 2FC4 2A 19 61             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2FC7 EB                   ex      DE,HL
2968+ 2FC8 CD 87 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2FCB 01 C3 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FCE C2 17 30             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FD1 2A A4 61             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FD4 EB           SMPVAR: ex      DE,HL
2973+ 2FD5 2A A6 61             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FD8 EB                   ex      DE,HL
2975+ 2FD9 CD 87 23             call    CPDEHL          ; All simple strings done?
2976+ 2FDC CA EA 2F             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 2FDF 7E                   ld      A,(HL)          ; Get type of variable
2978+ 2FE0 23                   inc     HL
2979+ 2FE1 23                   inc     HL
2980+ 2FE2 B7                   or      A               ; "S" flag set if string
2981+ 2FE3 CD 1A 30             call    STRADD          ; See if string in string area
2982+ 2FE6 C3 D4 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 2FE9
2984+ 2FE9 C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 2FEA EB           ARRLP:  ex      DE,HL
2986+ 2FEB 2A A8 61             ld      HL,(ARREND)     ; End of string arrays
2987+ 2FEE EB                   ex      DE,HL
2988+ 2FEF CD 87 23             call    CPDEHL          ; All string arrays done?
2989+ 2FF2 CA 40 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 2FF5 CD C3 38             call    LOADFP          ; Get array name to BCDE
2991+ 2FF8 7B                   ld      A,E             ; Get type of array
2992+ 2FF9 E5                   push    HL              ; Save address of num of dim'ns
2993+ 2FFA 09                   add     HL,BC           ; Start of next array
2994+ 2FFB B7                   or      A               ; Test type of array
2995+ 2FFC F2 E9 2F             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 2FFF 22 2D 61             ld      (CUROPR),HL     ; Save address of next array
2997+ 3002 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 3003 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 3004 06 00                ld      B,$00
3000+ 3006 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 3007 09                   add     HL,BC
3002+ 3008 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 3009 EB           GRBARY: ex      DE,HL
3004+ 300A 2A 2D 61             ld      HL,(CUROPR)     ; Get address of next array
3005+ 300D EB                   ex      DE,HL
3006+ 300E CD 87 23             call    CPDEHL          ; Is this array finished?
3007+ 3011 CA EA 2F             jp      Z,ARRLP         ; Yes - Get next one
3008+ 3014 01 09 30             ld      BC,GRBARY       ; Loop until array all done
3009+ 3017 C5           STPOOL: push    BC              ; Save return address
3010+ 3018 F6 80                or      $80             ; Flag string type
3011+ 301A 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 301B 23                   inc     HL
3013+ 301C 23                   inc     HL
3014+ 301D 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 301E 23                   inc     HL
3016+ 301F 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 3020 23                   inc     HL
3018+ 3021 F0                   ret     P               ; Not a string - Return
3019+ 3022 B7                   or      A               ; Set flags on string length
3020+ 3023 C8                   ret     Z               ; Null string - Return
3021+ 3024 44                   ld      B,H             ; Save variable pointer
3022+ 3025 4D                   ld      C,L
3023+ 3026 2A 2B 61             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 3029 CD 87 23             call    CPDEHL          ; String been done?
3025+ 302C 60                   ld      H,B             ; Restore variable pointer
3026+ 302D 69                   ld      L,C
3027+ 302E D8                   ret     C               ; String done - Ignore
3028+ 302F E1                   pop     HL              ; Return address
3029+ 3030 E3                   ex      (SP),HL         ; Lowest available string area
3030+ 3031 CD 87 23             call    CPDEHL          ; String within string area?
3031+ 3034 E3                   ex      (SP),HL         ; Lowest available string area
3032+ 3035 E5                   push    HL              ; Re-save return address
3033+ 3036 60                   ld      H,B             ; Restore variable pointer
3034+ 3037 69                   ld      L,C
3035+ 3038 D0                   ret     NC              ; Outside string area - Ignore
3036+ 3039 C1                   pop     BC              ; Get return , Throw 2 away
3037+ 303A F1                   pop     AF              ;
3038+ 303B F1                   pop     AF              ;
3039+ 303C E5                   push    HL              ; Save variable pointer
3040+ 303D D5                   push    DE              ; Save address of current
3041+ 303E C5                   push    BC              ; Put back return address
3042+ 303F C9                   ret                     ; Go to it
3043+ 3040
3044+ 3040 D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 3041 E1                   pop     HL              ;
3046+ 3042 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3043 B4                   or      H
3048+ 3044 C8                   ret     Z               ; No more to do - Return
3049+ 3045 2B                   dec     HL
3050+ 3046 46                   ld      B,(HL)          ; MSB of address of string
3051+ 3047 2B                   dec     HL
3052+ 3048 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 3049 E5                   push    HL              ; Save variable address
3054+ 304A 2B                   dec     HL
3055+ 304B 2B                   dec     HL
3056+ 304C 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 304D 26 00                ld      H,$00
3058+ 304F 09                   add     HL,BC           ; Address of end of string+1
3059+ 3050 50                   ld      D,B             ; String address to DE
3060+ 3051 59                   ld      E,C
3061+ 3052 2B                   dec     HL              ; Last byte in string
3062+ 3053 44                   ld      B,H             ; Address to BC
3063+ 3054 4D                   ld      C,L
3064+ 3055 2A 2B 61             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 3058 CD 3C 20             call    MOVSTR          ; Move string to new address
3066+ 305B E1                   pop     HL              ; Restore variable address
3067+ 305C 71                   ld      (HL),C          ; Save new LSB of address
3068+ 305D 23                   inc     HL
3069+ 305E 70                   ld      (HL),B          ; Save new MSB of address
3070+ 305F 69                   ld      L,C             ; Next string area+1 to HL
3071+ 3060 60                   ld      H,B
3072+ 3061 2B                   dec     HL              ; Next string area address
3073+ 3062 C3 B5 2F             jp      GARBLP          ; Look for more strings
3074+ 3065
3075+ 3065 C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 3066 E5                   push    HL              ;
3077+ 3067 2A B2 61             ld      HL,(FPREG)      ; Get first string
3078+ 306A E3                   ex      (SP),HL         ; Save first string
3079+ 306B CD F0 2A             call    OPRND           ; Get second string
3080+ 306E E3                   ex      (SP),HL         ; Restore first string
3081+ 306F CD 6B 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3072 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3073 E5                   push    HL              ; Save first string
3084+ 3074 2A B2 61             ld      HL,(FPREG)      ; Get second string
3085+ 3077 E5                   push    HL              ; Save second string
3086+ 3078 86                   add     A,(HL)          ; Add length of second string
3087+ 3079 1E 1C                ld      E,LS            ; ?LS Error
3088+ 307B DA A7 20             jp      C,ERROR         ; String too long - Error
3089+ 307E CD 1E 2F             call    MKTMST          ; Make temporary string
3090+ 3081 D1                   pop     DE              ; Get second string to DE
3091+ 3082 CD B6 30             call    GSTRDE          ; Move to string pool if needed
3092+ 3085 E3                   ex      (SP),HL         ; Get first string
3093+ 3086 CD B5 30             call    GSTRHL          ; Move to string pool if needed
3094+ 3089 E5                   push    HL              ; Save first string
3095+ 308A 2A 29 61             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 308D EB                   ex      DE,HL           ; To DE
3097+ 308E CD 9C 30             call    SSTSA           ; First string to string area
3098+ 3091 CD 9C 30             call    SSTSA           ; Second string to string area
3099+ 3094 21 85 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 3097 E3                   ex      (SP),HL         ; Save return,get code string
3101+ 3098 E5                   push    HL              ; Save code string address
3102+ 3099 C3 4F 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 309C
3104+ 309C E1           SSTSA:  pop     HL              ; Return address
3105+ 309D E3                   ex      (SP),HL         ; Get string block,save return
3106+ 309E 7E                   ld      A,(HL)          ; Get length of string
3107+ 309F 23                   inc     HL
3108+ 30A0 23                   inc     HL
3109+ 30A1 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 30A2 23                   inc     HL
3111+ 30A3 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 30A4 6F                   ld      L,A             ; Length to L
3113+ 30A5 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 30A6 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 30A7 C8                   ret     Z               ; End of string - Return
3116+ 30A8 0A                   ld      A,(BC)          ; Get source
3117+ 30A9 12                   ld      (DE),A          ; Save destination
3118+ 30AA 03                   inc     BC              ; Next source
3119+ 30AB 13                   inc     DE              ; Next destination
3120+ 30AC C3 A6 30             jp      TSALP           ; Loop until string moved
3121+ 30AF
3122+ 30AF CD 6B 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 30B2 2A B2 61     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 30B5 EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 30B6 CD D0 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 30B9 EB                   ex      DE,HL           ; Restore DE
3127+ 30BA C0                   ret     NZ              ; No - Return
3128+ 30BB D5                   push    DE              ; Save string
3129+ 30BC 50                   ld      D,B             ; String block address to DE
3130+ 30BD 59                   ld      E,C
3131+ 30BE 1B                   dec     DE              ; Point to length
3132+ 30BF 4E                   ld      C,(HL)          ; Get string length
3133+ 30C0 2A 2B 61             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 30C3 CD 87 23             call    CPDEHL          ; Last one in string area?
3135+ 30C6 C2 CE 30             jp      NZ,POPHL        ; No - Return
3136+ 30C9 47                   ld      B,A             ; Clear B (A=0)
3137+ 30CA 09                   add     HL,BC           ; Remove string from str' area
3138+ 30CB 22 2B 61             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30CE E1           POPHL:  pop     HL              ; Restore string
3140+ 30CF C9                   ret
3141+ 30D0
3142+ 30D0 2A 19 61     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30D3 2B                   dec     HL              ; Back
3144+ 30D4 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30D5 2B                   dec     HL              ; Back
3146+ 30D6 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30D7 2B                   dec     HL              ; Back
3148+ 30D8 2B                   dec     HL              ; Back
3149+ 30D9 CD 87 23             call    CPDEHL          ; String last in string pool?
3150+ 30DC C0                   ret     NZ              ; Yes - Leave it
3151+ 30DD 22 19 61             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 30E0 C9                   ret
3153+ 30E1
3154+ 30E1 01 60 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 30E4 C5                   push    BC              ; Save address
3156+ 30E5 CD AF 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 30E8 AF                   xor     A
3158+ 30E9 57                   ld      D,A             ; Clear D
3159+ 30EA 32 ED 60             ld      (TYPE),A        ; Set type to numeric
3160+ 30ED 7E                   ld      A,(HL)          ; Get length of string
3161+ 30EE B7                   or      A               ; Set status flags
3162+ 30EF C9                   ret
3163+ 30F0
3164+ 30F0 01 60 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 30F3 C5                   push    BC              ; Save address
3166+ 30F4 CD E5 30     GTFLNM: call    GETLEN          ; Get length of string
3167+ 30F7 CA A1 26             jp      Z,FCERR         ; Null string - Error
3168+ 30FA 23                   inc     HL
3169+ 30FB 23                   inc     HL
3170+ 30FC 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 30FD 23                   inc     HL
3172+ 30FE 56                   ld      D,(HL)          ; Get MSB of address
3173+ 30FF 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 3100 C9                   ret
3175+ 3101
3176+ 3101 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 3103 CD 1E 2F             call    MKTMST          ; Make a temporary string
3178+ 3106 CD F0 32             call    MAKINT          ; Make it integer A
3179+ 3109 2A 29 61             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 310C 73                   ld      (HL),E          ; Save character
3181+ 310D C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 310E C3 4F 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 3111
3184+ 3111 CD A0 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 3114 AF                   xor     A               ; Start at first byte in string
3186+ 3115 E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 3116 4F                   ld      C,A             ; Starting position in string
3188+ 3117 E5           MID1:   push    HL              ; Save string block address
3189+ 3118 7E                   ld      A,(HL)          ; Get length of string
3190+ 3119 B8                   cp      B               ; Compare with number given
3191+ 311A DA 1F 31             jp      C,ALLFOL        ; All following bytes required
3192+ 311D 78                   ld      A,B             ; Get new length
3193+ 311E 11                   defb    $11             ; Skip "ld C,0"
3194+ 311F 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 3121 C5                   push    BC              ; Save position in string
3196+ 3122 CD 88 2F             call    TESTR           ; See if enough string space
3197+ 3125 C1                   pop     BC              ; Get position in string
3198+ 3126 E1                   pop     HL              ; Restore string block address
3199+ 3127 E5                   push    HL              ; And re-save it
3200+ 3128 23                   inc     HL
3201+ 3129 23                   inc     HL
3202+ 312A 46                   ld      B,(HL)          ; Get LSB of address
3203+ 312B 23                   inc     HL
3204+ 312C 66                   ld      H,(HL)          ; Get MSB of address
3205+ 312D 68                   ld      L,B             ; HL = address of string
3206+ 312E 06 00                ld      B,$00           ; BC = starting address
3207+ 3130 09                   add     HL,BC           ; Point to that byte
3208+ 3131 44                   ld      B,H             ; BC = source string
3209+ 3132 4D                   ld      C,L
3210+ 3133 CD 21 2F             call    CRTMST          ; Create a string entry
3211+ 3136 6F                   ld      L,A             ; Length of new string
3212+ 3137 CD A5 30             call    TOSTRA          ; Move string to string area
3213+ 313A D1                   pop     DE              ; Clear stack
3214+ 313B CD B6 30             call    GSTRDE          ; Move to string pool if needed
3215+ 313E C3 4F 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 3141
3217+ 3141
3218+ 3141              ; INSTR statement - look for a string inside another string
3219+ 3141              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 3141              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 3141              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 3141              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 3141              LNS1    equ     TMPBFR1
3224+ 3141              ADRS1   equ     TMPBFR2
3225+ 3141              LNS2    equ     TMPBFR3
3226+ 3141              ADRS2   equ     TMPBFR4
3227+ 3141              PT      equ     VIDEOBUFF
3228+ 3141              PT1     equ     VIDEOBUFF+2
3229+ 3141              PT2     equ     VIDEOBUFF+4
3230+ 3141              TP      equ     VIDEOBUFF+6
3231+ 3141              TF      equ     VIDEOBUFF+8
3232+ 3141 CD 8D 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 3144 28                   defb    '('
3234+ 3145 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 3146 CD D6 25             call    GETCHR          ; check if something follows
3236+ 3149 CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 314C CD 79 2A             call    EVAL            ; Evaluate expression
3238+ 314F CD 6B 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3152 22 66 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 3155 CD B2 30             call    GSTRCU          ; check that a string follows
3241+ 3158 CD C3 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 315B ED 53 5E 61          ld      (LNS1),DE       ; store values into
3243+ 315F ED 43 60 61          ld      (ADRS1),BC      ; temp buffers
3244+ 3163 2A 66 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 3166 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3246+ 3169 2C                   defb    ','
3247+ 316A 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 316B CD D6 25             call    GETCHR          ; check if something follows
3249+ 316E CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 3171 CD 79 2A             call    EVAL            ; Evaluate expression
3251+ 3174 CD 6B 2A             call    TSTSTR          ; Make sure it's a string
3252+ 3177 22 66 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 317A CD B2 30             call    GSTRCU          ; check that a string follows
3254+ 317D CD C3 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 3180 ED 53 62 61          ld      (LNS2),DE       ; store values into
3256+ 3184 ED 43 64 61          ld      (ADRS2),BC      ; temp buffers
3257+ 3188 2A 66 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 318B CD 8D 23             call    CHKSYN          ; make sure ")" follows
3259+ 318E 29                   defb    ')'
3260+ 318F E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 3190 FD E1                pop     IY              ; ...into IY
3262+ 3192 AF                   xor     A               ; reset 10 RAM cells
3263+ 3193 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 3195 21 66 61             ld      HL,PT           ; first cell
3265+ 3198 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 3199 23                   inc     HL              ; next cell
3267+ 319A 10 FC                djnz    EMPTINS         ; repeat
3268+ 319C ED 5B 62 61          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 31A0 2A 5E 61             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 31A3 CD 1F 4D             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 31A6 DA 1B 32             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 31A9 AF           RPTINST:xor     A               ; reset...
3273+ 31AA 32 6C 61             ld      (TP),A          ; ...TP...
3274+ 31AD 32 6E 61             ld      (TF),A          ; ...and TF
3275+ 31B0 ED 4B 66 61          ld      BC,(PT)         ; pointer to S1
3276+ 31B4 2A 60 61             ld      HL,(ADRS1)      ; first cell of S1
3277+ 31B7 09                   add     HL,BC           ; get current position into RAM
3278+ 31B8 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 31B9 2A 64 61             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 31BC BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 31BD 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 31BF 3A 66 61             ld      A,(PT)          ; load current PT
3283+ 31C2 32 6C 61             ld      (TP),A          ; TP=PT
3284+ 31C5 32 68 61             ld      (PT1),A         ; P1=PT
3285+ 31C8 AF                   xor     A               ; set...
3286+ 31C9 32 6A 61             ld      (PT2),A         ; ...PT2=0
3287+ 31CC 3C                   inc     A               ;
3288+ 31CD 32 6E 61             ld      (TF),A          ; set TF=1
3289+ 31D0 ED 4B 68 61  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31D4 2A 60 61             ld      HL,(ADRS1)      ; load address of S1
3291+ 31D7 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31D8 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31D9 ED 4B 6A 61          ld      BC,(PT2)        ; load pointer PT2
3294+ 31DD 2A 64 61             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 31E0 09                   add     HL,BC           ; find S2(PT2)
3296+ 31E1 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 31E2 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 31E4 21 68 61             ld      HL,PT1
3299+ 31E7 34                   inc     (HL)            ; increment PT1
3300+ 31E8 3A 6A 61             ld      A,(PT2)
3301+ 31EB 3C                   inc     A               ; increment PT2
3302+ 31EC 32 6A 61             ld      (PT2),A
3303+ 31EF CA F9 31             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 31F2 21 62 61             ld      HL,LNS2         ; len(S2)
3305+ 31F5 BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 31F6 DA D0 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 31F9 3A 6E 61     CNT1INS:ld      A,(TF)          ; check TF
3308+ 31FC A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 31FD 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 31FF 2A 5E 61             ld      HL,(LNS1)       ; load len(S1)
3311+ 3202 ED 4B 62 61          ld      BC,(LNS2)       ; load len(S2)
3312+ 3206 ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 3208 ED 5B 66 61          ld      DE,(PT)         ; load pointer
3314+ 320C 1C                   inc     E               ; PT=PT+1
3315+ 320D ED 53 66 61          ld      (PT),DE         ; store new value
3316+ 3211 EB                   ex      DE,HL           ; invert registers
3317+ 3212 CD 1F 4D             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 3215 DA A9 31             jp      C,RPTINST       ; repeat if <
3319+ 3218 CA A9 31             jp      Z,RPTINST       ; repeat if =
3320+ 321B 3A 6E 61     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 321E A7                   and     A               ; is it 0?
3322+ 321F CA 26 32             jp      Z,LVINSTR       ; yes, return 0
3323+ 3222 3A 6C 61             ld      A,(TP)          ; return TP...
3324+ 3225 3C                   inc     A               ; ...incremented by 1
3325+ 3226 E1           LVINSTR:pop     HL              ; drop original return point
3326+ 3227 FD E5                push    IY              ; load current string address from IY into stack
3327+ 3229 11 52 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 322C D5                   push    DE              ; ...saved on stack
3329+ 322D C3 60 2E             jp      PASSA           ; return TP
3330+ 3230 AF           CNTZIN: xor     A               ; set...
3331+ 3231 32 6E 61             ld      (TF),A          ; TF=0
3332+ 3234 C3 F9 31             jp      CNT1INS         ; continue
3333+ 3237
3334+ 3237
3335+ 3237              ; returns the right portion of a string
3336+ 3237 CD A0 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 323A D1                   pop     DE              ; Get string length
3338+ 323B D5                   push    DE              ; And re-save
3339+ 323C 1A                   ld      A,(DE)          ; Get length
3340+ 323D 90                   sub     B               ; Move back N bytes
3341+ 323E C3 15 31             jp      RIGHT1          ; Go and get sub-string
3342+ 3241
3343+ 3241              ; returns a piece of a string
3344+ 3241 EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3242 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3243 CD A5 32             call    MIDNUM          ; Get number supplied
3347+ 3246 04                   inc     B               ; Is it character zero?
3348+ 3247 05                   dec     B
3349+ 3248 CA A1 26             jp      Z,FCERR         ; Yes - Error
3350+ 324B C5                   push    BC              ; Save starting position
3351+ 324C 1E FF                ld      E,$FF           ; All of string
3352+ 324E FE 29                cp      ')'             ; Any length given?
3353+ 3250 CA 5A 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3253 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3355+ 3256 2C                   defb    ','
3356+ 3257 CD ED 32             call    GETINT          ; Get integer 0-255
3357+ 325A CD 8D 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 325D 29                   defb    ')'
3359+ 325E F1                   pop     AF              ; Restore starting position
3360+ 325F E3                   ex      (SP),HL         ; Get string,save code string
3361+ 3260 01 17 31             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3263 C5                   push    BC              ; Save for return
3363+ 3264 3D                   dec     A               ; Starting position-1
3364+ 3265 BE                   cp      (HL)            ; Compare with length
3365+ 3266 06 00                ld      B,$00           ; Zero bytes length
3366+ 3268 D0                   ret     NC              ; Null string if start past end
3367+ 3269 4F                   ld      C,A             ; Save starting position-1
3368+ 326A 7E                   ld      A,(HL)          ; Get length of string
3369+ 326B 91                   sub     C               ; Subtract start
3370+ 326C BB                   cp      E               ; Enough string for it?
3371+ 326D 47                   ld      B,A             ; Save maximum length available
3372+ 326E D8                   ret     C               ; Truncate string if needed
3373+ 326F 43                   ld      B,E             ; Set specified length
3374+ 3270 C9                   ret                     ; Go and create string
3375+ 3271
3376+ 3271
3377+ 3271              ; return the value of a numeric string
3378+ 3271 CD E5 30     VAL:    call    GETLEN          ; Get length of string
3379+ 3274 CA 43 36             jp      Z,RESZER        ; Result zero
3380+ 3277 5F                   ld      E,A             ; Save length
3381+ 3278 23                   inc     HL
3382+ 3279 23                   inc     HL
3383+ 327A 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 327B 23                   inc     HL
3385+ 327C 66                   ld      H,(HL)          ; Get MSB of address
3386+ 327D 6F                   ld      L,A             ; HL = String address
3387+ 327E E5                   push    HL              ; Save string address
3388+ 327F 19                   add     HL,DE
3389+ 3280 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 3281 72                   ld      (HL),D          ; Zero it to terminate
3391+ 3282 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 3283 C5                   push    BC              ; Save end+1 byte
3393+ 3284 7E                   ld      A,(HL)          ; Get starting byte
3394+ 3285 FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 3287 C2 8F 32             jp      NZ,VAL1
3396+ 328A CD 51 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 328D 18 0D                jr      VAL3
3398+ 328F FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 3291 C2 99 32             jp      NZ,VAL2
3400+ 3294 CD C1 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 3297 18 03                jr      VAL3
3402+ 3299 CD 7B 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 329C C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 329D E1                   pop     HL              ; Restore end+1 address
3405+ 329E 70                   ld      (HL),B          ; Put back original byte
3406+ 329F C9                   ret
3407+ 32A0
3408+ 32A0 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 32A1 CD 8D 23             call    CHKSYN          ; Make sure ")" follows
3410+ 32A4 29                   defb    ')'
3411+ 32A5 C1           MIDNUM: pop     BC              ; Get return address
3412+ 32A6 D1                   pop     DE              ; Get number supplied
3413+ 32A7 C5                   push    BC              ; Re-save return address
3414+ 32A8 43                   ld      B,E             ; Number to B
3415+ 32A9 C9                   ret
3416+ 32AA
3417+ 32AA CD F0 32     INP:    call    MAKINT          ; Make it integer A
3418+ 32AD 32 F9 5F             ld      (INPORT),A      ; Set input port
3419+ 32B0 CD F8 5F             call    INPSUB          ; Get input from port
3420+ 32B3 C3 60 2E             jp      PASSA           ; Return integer A
3421+ 32B6
3422+ 32B6 CD DA 32     POUT:   call    SETIO           ; Set up port number
3423+ 32B9 C3 C0 5F             jp      OUTSUB          ; Output data and return
3424+ 32BC
3425+ 32BC CD DA 32     WAIT:   call    SETIO           ; Set up port number
3426+ 32BF F5                   push    AF              ; Save AND mask
3427+ 32C0 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 32C2 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 32C3 CD D6 25             call    GETCHR          ; Get next character
3430+ 32C6 CA D0 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 32C9 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3432+ 32CC 2C                   defb    ','
3433+ 32CD CD ED 32             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32D0 C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32D1 CD F8 5F     WAITLP: call    INPSUB          ; Get input
3436+ 32D4 AB                   xor     E               ; Flip selected bits
3437+ 32D5 A0                   and     B               ; Result non-zero?
3438+ 32D6 CA D1 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32D9 C9                   ret
3440+ 32DA
3441+ 32DA CD ED 32     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 32DD 32 F9 5F             ld      (INPORT),A      ; Set input port
3443+ 32E0 32 C1 5F             ld      (OTPORT),A      ; Set output port
3444+ 32E3 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3445+ 32E6 2C                   defb    ','
3446+ 32E7 C3 ED 32             jp      GETINT          ; Get integer 0-255 and return
3447+ 32EA
3448+ 32EA CD D6 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 32ED CD 67 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 32F0 CD 86 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 32F3 7A                   ld      A,D             ; Get MSB of number
3452+ 32F4 B7                   or      A               ; Zero?
3453+ 32F5 C2 A1 26             jp      NZ,FCERR        ; No - Error
3454+ 32F8 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 32F9 CD D6 25             call    GETCHR          ; Get next character
3456+ 32FC 7B                   ld      A,E             ; Get number to A
3457+ 32FD C9                   ret
3458+ 32FE
3459+ 32FE
3460+ 32FE              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 32FE              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 32FE CD 67 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 3301 CD 8C 26             call    DEINT           ; get integer -32768 to 32767
3464+ 3304 7B                   ld      A,E             ; check if address is 0
3465+ 3305 B2                   or      D
3466+ 3306 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 3308 F3           DISNMI: di                      ; disable INTs
3468+ 3309 CD 35 33             call    NMIDINT         ; disable VDP INT
3469+ 330C E5                   push    HL              ; store HL
3470+ 330D 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 3310 22 BA 5F             ld      (NMIUSR),HL     ; store RETN
3472+ 3313 AF                   xor     A
3473+ 3314 32 BC 5F             ld      (NMIUSR+2),A    ; "NOP"
3474+ 3317 18 11                jr      NMI2            ; execute the last part of code
3475+ 3319 E5           NM1:    push    HL              ; store current HL
3476+ 331A EB                   ex      DE,HL           ; move address argument into HL
3477+ 331B F3                   di                      ; disable INTs
3478+ 331C CD 35 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 331F 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 3321 32 BA 5F             ld      (NMIUSR),A      ; store it
3481+ 3324 22 BB 5F             ld      (NMIUSR+1),HL   ; store address
3482+ 3327 CD 2E 33             call    NMIEINT         ; re-enable VDP INT
3483+ 332A FB           NMI2:   ei                      ; re-enable INTS
3484+ 332B 00                   nop                     ; wait for INTs
3485+ 332C E1                   pop    HL               ; retrieve HL
3486+ 332D C9                   ret                     ; return to caller
3487+ 332E              ; enable VDP INT
3488+ 332E CD 44 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 3331 F6 20                or      %00100000       ; enable VDP INT
3490+ 3333 18 03                jr      NMIINT          ; rest of code is shared
3491+ 3335              ; disable VDP INT
3492+ 3335 CD 44 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 3338 D5           NMIINT: push    DE              ; store DE
3494+ 3339 5F                   ld      E,A             ; move value into E
3495+ 333A 3E 01                ld      A,$01           ; VREG #1
3496+ 333C F3                   di                      ; disable INTs
3497+ 333D CD B0 06             call    WRITE_VREG      ; disable VDP INT
3498+ 3340 FB                   ei                      ; re-enable INTs
3499+ 3341 00                   nop                     ; wait for INTs being enabled
3500+ 3342 D1                   pop     DE              ; retrieve DE
3501+ 3343 C9                   ret                     ; return to caller
3502+ 3344
3503+ 3344              ; load VREG #1 setting for current screen mode and return it into A
3504+ 3344 E5           NMIVR1: push    HL              ; store HL
3505+ 3345 D5                   push    DE              ; store DE
3506+ 3346 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
3507+ 3349 87                   add     A,A             ; multiply A by 8...
3508+ 334A 87                   add     A,A             ; ...so that reg. A can points..
3509+ 334B 87                   add     A,A             ; to the correct settings
3510+ 334C 3C                   inc     A               ; need to change VREG 1
3511+ 334D 5F                   ld      E,A             ; copy A into E
3512+ 334E 16 00                ld      D,$00           ; reset D
3513+ 3350 21 1F 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3353 19                   add     HL,DE           ; ...for current screen mode
3515+ 3354 7E                   ld      A,(HL)          ; load current setting
3516+ 3355 D1                   pop     DE              ; retrieve DE
3517+ 3356 E1                   pop     HL              ; retrieve HL
3518+ 3357 C9                   ret                     ; return to caller
3519+ 3358
3520+ 3358              ; execute a machine language routine, eventually passing a param into A
3521+ 3358 CD 67 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 335B CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 335E ED 53 60 61          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3362 AF                   xor     A               ; reset A
3525+ 3363 32 5E 61             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 3366 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 3367 CD D6 25             call    GETCHR          ; check next character
3528+ 336A 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 336C CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3530+ 336F 2C                   defb    ','
3531+ 3370 CD ED 32             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3373 32 5E 61             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 3376 3A 5E 61     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 3379 ED 5B 60 61          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 337D E5                   push    HL              ; save code string address
3536+ 337E EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 337F 11 84 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 3382 D5                   push    DE              ; store into stack
3539+ 3383 E9                   jp      (HL)            ; call user routine
3540+ 3384 E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 3385 C9                   ret                     ; return to caller
3542+ 3386
3543+ 3386
3544+ 3386              ; read the contents of a RAM location
3545+ 3386 CD 8C 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 3389 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 338A C3 60 2E             jp      PASSA           ; Return into A
3548+ 338D
3549+ 338D              ; read the contents of a VRAM location
3550+ 338D CD 8C 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 3390 EB                   ex      DE,HL           ; Copy param into HL
3552+ 3391 F3                   di                      ; Disable interrupts
3553+ 3392 CD 86 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 3395 FB                   ei                      ; Re-enable interrupts
3555+ 3396 EB                   ex      DE,HL           ; Restore HL
3556+ 3397 C3 60 2E             jp      PASSA           ; Return value into A
3557+ 339A
3558+ 339A              ; recover params for POKE/VPOKE commands
3559+ 339A              ; returns address into DE and byte to be written into A
3560+ 339A CD 67 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 339D CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 33A0 ED 53 5E 61          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 33A4 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3564+ 33A7 2C                   defb    ','
3565+ 33A8 CD ED 32             call    GETINT          ; Get integer 0-255
3566+ 33AB ED 5B 5E 61          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 33AF C9                   ret                     ; Return to caller
3568+ 33B0
3569+ 33B0              ; write a byte into a RAM location
3570+ 33B0 CD 9A 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 33B3 12                   ld      (DE),A          ; Load it into memory
3572+ 33B4 C9                   ret
3573+ 33B5
3574+ 33B5              ; write a byte into a VRAM location
3575+ 33B5 CD 9A 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 33B8 EB                   ex      DE,HL           ; Copy address into HL
3577+ 33B9 F3                   di                      ; Disable interrupts
3578+ 33BA CD 9B 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 33BD FB                   ei                      ; Re-enable interrupts
3580+ 33BE EB                   ex      DE,HL           ; Restore HL
3581+ 33BF C9                   ret                     ; Return to caller
3582+ 33C0
3583+ 33C0              ; position the cursor at a specific X,Y location onto screen
3584+ 33C0 CD ED 32     LOCATE: call    GETINT          ; get the first param into A
3585+ 33C3 E5                   push    HL              ; store HL
3586+ 33C4 21 4E 61             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 33C7 5E                   ld      E,(HL)          ; load screen width into E
3588+ 33C8 E1                   pop     HL              ; restore HL
3589+ 33C9 BB                   cp      E               ; compare witdh with param
3590+ 33CA D2 A1 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 33CD 32 5E 61             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33D0 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33D3 2C                   defb    ','
3594+ 33D4 CD ED 32             call    GETINT          ; Get the second param into A
3595+ 33D7 E5                   push    HL              ; store HL
3596+ 33D8 21 4F 61             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33DB 5E                   ld      E,(HL)          ; load screen width into A
3598+ 33DC E1                   pop     HL              ; restore HL
3599+ 33DD BB                   cp      E               ; compare witdh with param
3600+ 33DE D2 A1 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 33E1 32 56 61             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 33E4 3A 5E 61             ld      A,(TMPBFR1)     ; recover the new X
3603+ 33E7 32 55 61             ld      (SCR_CUR_NX),A  ; store new X
3604+ 33EA E5                   push    HL              ; store HL
3605+ 33EB F3                   di                      ; disable INTs
3606+ 33EC CD CC 06             call    MOVCRS          ; move cursor to new location
3607+ 33EF FB                   ei                      ; re-enable INTs
3608+ 33F0 E1                   pop     HL              ; restore HL
3609+ 33F1 C9                   ret                     ; return to caller
3610+ 33F2
3611+ 33F2              ; write a byte into one of the PSG registers
3612+ 33F2 CD ED 32     SREG:   call    GETINT          ; Get register number back into A
3613+ 33F5 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 33F7 D2 A1 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 33FA 32 5E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 33FD CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3617+ 3400 2C                   defb    ','
3618+ 3401 CD ED 32             call    GETINT          ; get second value (0-255), returned into A
3619+ 3404 5F                   ld      E,A             ; store value into E
3620+ 3405 3A 5E 61             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 3408 F3                   di                      ; disable INTs
3622+ 3409 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 340B ED 79                out     (C),A           ; send register # to PSG
3624+ 340D 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 340F ED 59                out     (C),E           ; send byte to write into selected register
3626+ 3411 FB                   ei                      ; re-enable INTs
3627+ 3412 C9                   ret                     ; return to caller
3628+ 3413
3629+ 3413              ; VOLUME ch,vol
3630+ 3413              ; set the volume for the audio channels
3631+ 3413              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 3413 CD ED 32     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 3416 FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 3418 D2 A1 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 341B 32 5E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 341E CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3637+ 3421 2C                   defb    ','
3638+ 3422 CD ED 32             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 3425 FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 3427 D2 A1 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 342A 57                   ld      D,A             ; store volume into D
3642+ 342B 3A 5E 61             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 342E A7                   and     A               ; is it 0? (0=every channel)
3644+ 342F 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 3431 06 03                ld      B,$03           ; yes, set every channel
3646+ 3433 1E 08                ld      E,$08           ; register volume of first channel
3647+ 3435 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 3437 ED 59                out     (C),E           ; set register #
3649+ 3439 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 343B ED 51                out     (C),D           ; send volume
3651+ 343D 1C                   inc     E               ; next register
3652+ 343E 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 3440 C9                   ret                     ; return to caller
3654+ 3441 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3443 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 3445 ED 79                out     (C),A           ; set register
3657+ 3447 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 3449 ED 51                out     (C),D           ; send volume level
3659+ 344B C9                   ret                     ; return to caller
3660+ 344C
3661+ 344C              ; SOUND ch,tone,dur
3662+ 344C              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 344C              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 344C              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 344C CD ED 32     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 344F A7                   and     A               ; is it zero?
3667+ 3450 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3452 E5                   push    HL              ; store HL
3669+ 3453 F3                   di                      ; disable INTs
3670+ 3454 CD 91 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 3457 FB                   ei                      ; re-enable INTs
3672+ 3458 E1                   pop     HL              ; retrieve HL
3673+ 3459 C9                   ret                     ; return to caller
3674+ 345A 32 5E 61     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 345D FE 04                cp      $04             ; is channel >3?
3676+ 345F D2 DE 34             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3462 CD 8D 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 3465 2C                   defb    ','
3679+ 3466 CD 67 2A             call    GETNUM          ; Get tone frequency
3680+ 3469 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 346C ED 53 60 61          ld      (TMPBFR2),DE    ; Store frequency
3682+ 3470 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3473 2C                   defb    ','
3684+ 3474 CD 67 2A             call    GETNUM          ; Get duration
3685+ 3477 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 347A ED 53 62 61          ld      (TMPBFR3),DE    ; Store duration
3687+ 347E                                              ; CHECK CHANNEL
3688+ 347E 3A 5E 61             ld      A,(TMPBFR1)     ; recover channel
3689+ 3481 FE 01                cp      $01             ; is channel <1?
3690+ 3483 DA A1 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 3486                                              ; CHECK FREQUENCY
3692+ 3486 ED 5B 60 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 348A 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 348B FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 348D D2 A1 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 3490                                              ; CHECK DURATION
3697+ 3490 ED 5B 62 61          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 3494 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 3495 E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 3497 C2 A1 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 349A                                              ;
3702+ 349A                                              ; SET TONE:
3703+ 349A                                              ; let's start by setting up the channel
3704+ 349A 3A 5E 61             ld      A,(TMPBFR1)     ; restore channel value
3705+ 349D FE 03                cp      $03             ; is it 3?
3706+ 349F 20 02                jr      NZ,SND1         ; no, jump over
3707+ 34A1 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 34A3 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 34A4 CD 2B 35             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 34A7                                              ; SET FREQUENCY
3711+ 34A7                                              ; we simply get frequency and subtract from 4096. The result
3712+ 34A7                                              ; is put into register pair of the corresponding freq tone channel
3713+ 34A7 ED 5B 60 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 34AB E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 34AC 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 34AF A7                   and     A               ; reset C flag
3717+ 34B0 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 34B2 3A 5E 61             ld      A,(TMPBFR1)     ; restore channel value
3719+ 34B5 3D                   dec     A               ; set A into the range 0~2
3720+ 34B6 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 34B7 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 34B9 ED 79                out     (C),A           ; select first register of the pair
3723+ 34BB 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 34BD ED 69                out     (C),L           ; send high byte
3725+ 34BF 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 34C1 3C                   inc     A               ; second register of the pair
3727+ 34C2 ED 79                out     (C),A           ; select register
3728+ 34C4 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 34C6 ED 61                out     (C),H           ; send low byte
3730+ 34C8 ED 5B 62 61          ld      DE,(TMPBFR3)    ; recover duration
3731+ 34CC 3A 5E 61             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34CF 3D                   dec     A               ; set channel into the range 0~2
3733+ 34D0 87                   add     A,A             ; double A to find the correct offset
3734+ 34D1 21 92 61             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34D4 85                   add     A,L             ; ...the proper...
3736+ 34D5 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34D7 24                   inc     H               ; yes, increment H)
3738+ 34D8 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34D9 73                   ld      (HL),E          ; ...and store the value
3740+ 34DA 23                   inc     HL
3741+ 34DB 72                   ld      (HL),D
3742+ 34DC E1                   pop     HL              ; retrieve HL
3743+ 34DD C9                   ret                     ; Return to caller
3744+ 34DE FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 34E0 D2 A1 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 34E3 CD 8D 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 34E6 2C                   defb    ','
3748+ 34E7 CD ED 32             call    GETINT          ; get integer 0-255 (frequency)
3749+ 34EA FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 34EC D2 A1 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 34EF 32 60 61             ld      (TMPBFR2),A     ; store freq.
3752+ 34F2 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 34F3 CD D6 25             call    GETCHR          ; check that nothing follows
3754+ 34F6 C2 8D 20             jp      NZ,SNERR        ; error if no empty line
3755+ 34F9 3A 60 61             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 34FC 5F                   ld      E,A             ; store freq into E
3757+ 34FD 3A 5E 61             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 3500 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 3502 FE 03                cp      $03             ; is it 3?
3760+ 3504 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 3506 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 3508 87           NOS1:   add     A,A
3763+ 3509 87                   add     A,A
3764+ 350A 87                   add     A,A             ; let's move A 3 bits to left
3765+ 350B 47                   ld      B,A             ; store channel into B
3766+ 350C 7B                   ld      A,E             ; check if
3767+ 350D A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 350E F3                   di                      ; disable INts
3769+ 350F 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 3511 3E 07                ld      A,$07           ; mixer register
3771+ 3513 CD DF 0C             call    SETSNDREG       ; set mixer register
3772+ 3516 ED 78                in      A,(C)           ; load current mixer value
3773+ 3518 B0                   or      B               ; disable noise
3774+ 3519 18 19                jr      NOS3            ; continue over
3775+ 351B 78           NOS2:   ld      A,B             ; recover channel
3776+ 351C 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 351D CD 2B 35             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 3520 3E 06                ld      A,$06           ; write into noise register
3779+ 3522 CD DF 0C             call    SETSNDREG       ; set register into PSG
3780+ 3525 7B                   ld      A,E             ; load value for noise frequency
3781+ 3526 CD E4 0C             call    WRTSNDREG       ; write data into register $06
3782+ 3529 FB                   ei                      ; re-enable INTs
3783+ 352A C9                   ret
3784+ 352B                      ; enable line into mixer of channel stored in A
3785+ 352B 47           WRTSND: ld      B,A             ; move channel into B
3786+ 352C 3E 07                ld      A,$07           ; mixer register
3787+ 352E CD DF 0C             call    SETSNDREG       ; set mixer register
3788+ 3531 ED 78                in      A,(C)           ; load current value
3789+ 3533 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 3534                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 3534                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 3534                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 3534                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 3534 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 3535 3E 07                ld      A,$07           ; mixer address
3796+ 3537 CD DF 0C             call    SETSNDREG       ; set register
3797+ 353A 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 353B CD E4 0C             call    WRTSNDREG       ; send new value for the mixer
3799+ 353E FB                   ei                      ; re-enable INTs
3800+ 353F C9                   ret                     ; return to caller
3801+ 3540
3802+ 3540              ; write a byte into one of the VDP registers
3803+ 3540 CD ED 32     VREG:   call    GETINT          ; Get register number back into A
3804+ 3543 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 3545 D2 A1 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 3548 32 5E 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 354B CD 8D 23             call    CHKSYN          ; Make sure ',' follows
3808+ 354E 2C                   defb    ','
3809+ 354F CD ED 32             call    GETINT          ; get value (0-255)
3810+ 3552 5F                   ld      E,A             ; store value into E
3811+ 3553 3A 5E 61             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 3556 F3                   di                      ; disable INTs
3813+ 3557 CD B0 06             call    WRITE_VREG      ; write value into VDP register
3814+ 355A FB                   ei                      ; re-enable INTs
3815+ 355B C9                   ret                     ; return to caller
3816+ 355C
3817+ 355C              ; read the VDP status register and return it into A
3818+ 355C CD 8C 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 355F F3                   di                      ; disable INTs
3820+ 3560 CD BB 06             call    READ_VSTAT      ; read VDP register status
3821+ 3563 FB                   ei                      ; re-enable INTs
3822+ 3564 C3 60 2E             jp      PASSA           ; Return integer A
3823+ 3567
3824+ 3567              ; read from PSG register and return it into A
3825+ 3567 CD 8C 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 356A 7B                   ld      A,E             ; consider LSB
3827+ 356B FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 356D D2 A1 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 3570 F3                   di                      ; disable INts
3830+ 3571 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3573 ED 79                out     (C),A           ; send register to read from
3832+ 3575 ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 3577 FB                   ei                      ; re-enable INTs
3834+ 3578 C3 60 2E             jp      PASSA           ; return A
3835+ 357B
3836+ 357B              ; read the temp key buffer and return the value of the current key being pressed
3837+ 357B              ; can wait for the number of 100thds of second before to return
3838+ 357B CD DA 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 357E CD 8C 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 3581 C5                   push    BC              ; store BC
3841+ 3582 3A 3E 61             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 3585 47                   ld      B,A             ; move it into B
3843+ 3586 3A 3E 61     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 3589 B8                   cp      B               ; ...to let the sniffer collect...
3845+ 358A 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 358C 7A                   ld      A,D             ; check the param
3847+ 358D B3                   or      E               ; if DE<>0 then...
3848+ 358E 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 3590 3A 9A 61             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 3593 18 2A                jr      ENDINK          ; ...return it
3851+ 3595 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 3596 FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 3598 D2 A1 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 359B E5                   push    HL              ; store HL
3855+ 359C 21 09 00             ld      HL,$0009        ; check if value
3856+ 359F CD 1F 4D             call    CMP16           ; is < 10
3857+ 35A2 E1                   pop     HL              ; retrieve HL
3858+ 35A3 DA A9 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 35A6 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 35A9 3A 3E 61     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 35AC 47                   ld      B,A             ; move it into B
3862+ 35AD 3A 9A 61     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 35B0 A7                   and     A               ; is it 0?
3864+ 35B1 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 35B3 3A 3E 61             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 35B6 B8                   cp      B               ; is it the same value?
3867+ 35B7 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 35B9 47                   ld      B,A             ; store new value
3869+ 35BA 1B                   dec     DE              ; no, decrement timer
3870+ 35BB 7A                   ld      A,D             ; check if zero reached
3871+ 35BC B3                   or      E               ; by ORing D and E
3872+ 35BD 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 35BF C1           ENDINK: pop     BC              ; restore BC
3874+ 35C0 F5                   push    AF              ; store A
3875+ 35C1 F3                   di                      ; disable INTs
3876+ 35C2 AF                   xor     A               ; clear the...
3877+ 35C3 32 9A 61             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 35C6 FB                   ei                      ; re-enable INTs
3879+ 35C7 F1                   pop     AF              ; retrieve A
3880+ 35C8 C3 60 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 35CB
3882+ 35CB
3883+ 35CB 21 F2 3A     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35CE CD C3 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35D1 C3 DD 35             jp      FPADD           ; Add BCDE to FPREG
3886+ 35D4
3887+ 35D4
3888+ 35D4 CD C3 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35D7 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35D8 C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35D9 D1                   pop     DE
3892+ 35DA CD 9D 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 35DD 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 35DE B7                   or      A               ; Is number zero?
3895+ 35DF C8                   ret     Z               ; Yes - Nothing to add
3896+ 35E0 3A B5 61             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 35E3 B7                   or      A               ; Is this number zero?
3898+ 35E4 CA B5 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 35E7 90                   sub     B               ; BCDE number larger?
3900+ 35E8 D2 F7 35             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 35EB 2F                   cpl                     ; Two's complement
3902+ 35EC 3C                   inc     A               ;  FP exponent
3903+ 35ED EB                   ex      DE,HL
3904+ 35EE CD A5 38             call    STAKFP          ; Put FPREG on stack
3905+ 35F1 EB                   ex      DE,HL
3906+ 35F2 CD B5 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 35F5 C1                   pop     BC              ; Restore number from stack
3908+ 35F6 D1                   pop     DE
3909+ 35F7 FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 35F9 D0                   ret     NC              ; Yes - First number is result
3911+ 35FA F5                   push    AF              ; Save number of bits to scale
3912+ 35FB CD DA 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 35FE 67                   ld      H,A             ; Save sign of result
3914+ 35FF F1                   pop     AF              ; Restore scaling factor
3915+ 3600 CD A2 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 3603 B4                   or      H               ; Result to be positive?
3917+ 3604 21 B2 61             ld      HL,FPREG        ; Point to FPREG
3918+ 3607 F2 1D 36             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 360A CD 82 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 360D D2 63 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 3610 23                   inc     HL              ; Point to exponent
3922+ 3611 34                   inc     (HL)            ; Increment it
3923+ 3612 CA 9C 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 3615 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 3617 CD B8 36             call    SHRT1           ; Shift result right
3926+ 361A C3 63 36             jp      RONDUP          ; Round it up
3927+ 361D
3928+ 361D AF           MINCDE: xor     A               ; Clear A and carry
3929+ 361E 90                   sub     B               ; Negate exponent
3930+ 361F 47                   ld      B,A             ; Re-save exponent
3931+ 3620 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 3621 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 3622 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 3623 23                   inc     HL
3935+ 3624 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 3625 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 3626 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 3627 23                   inc     HL
3939+ 3628 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 3629 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 362A 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 362B DC 8E 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 362E
3944+ 362E 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 362F 63                   ld      H,E             ; H = LSB
3946+ 3630 AF                   xor     A
3947+ 3631 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3632 79                   ld      A,C             ; Get MSB
3949+ 3633 B7                   or      A               ; Is it zero?
3950+ 3634 C2 50 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 3637 4A                   ld      C,D             ; MSB = NMSB
3952+ 3638 54                   ld      D,H             ; NMSB= LSB
3953+ 3639 65                   ld      H,L             ; LSB = VLSB
3954+ 363A 6F                   ld      L,A             ; VLSB= 0
3955+ 363B 78                   ld      A,B             ; Get exponent
3956+ 363C D6 08                sub     $08             ; Count 8 bits
3957+ 363E FE E0                cp      -24-8           ; Was number zero?
3958+ 3640 C2 31 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3643 AF           RESZER: xor     A               ; Result is zero
3960+ 3644 32 B5 61     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 3647 C9                   ret
3962+ 3648
3963+ 3648 05           NORMAL: dec     B               ; Count bits
3964+ 3649 29                   add     HL,HL           ; Shift HL left
3965+ 364A 7A                   ld      A,D             ; Get NMSB
3966+ 364B 17                   rla                     ; Shift left with last bit
3967+ 364C 57                   ld      D,A             ; Save NMSB
3968+ 364D 79                   ld      A,C             ; Get MSB
3969+ 364E 8F                   adc     A,A             ; Shift left with last bit
3970+ 364F 4F                   ld      C,A             ; Save MSB
3971+ 3650 F2 48 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3653 78                   ld      A,B             ; Number of bits shifted
3973+ 3654 5C                   ld      E,H             ; Save HL in EB
3974+ 3655 45                   ld      B,L
3975+ 3656 B7                   or      A               ; Any shifting done?
3976+ 3657 CA 63 36             jp      Z,RONDUP        ; No - Round it up
3977+ 365A 21 B5 61             ld      HL,FPEXP        ; Point to exponent
3978+ 365D 86                   add     A,(HL)          ; Add shifted bits
3979+ 365E 77                   ld      (HL),A          ; Re-save exponent
3980+ 365F D2 43 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3662 C8                   ret     Z               ; Result is zero
3982+ 3663 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 3664 21 B5 61     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 3667 B7                   or      A               ; Any rounding?
3985+ 3668 FC 75 36             call    M,FPROND        ; Yes - Round number up
3986+ 366B 46                   ld      B,(HL)          ; B = Exponent
3987+ 366C 23                   inc     HL
3988+ 366D 7E                   ld      A,(HL)          ; Get sign of result
3989+ 366E E6 80                and     %10000000       ; Only bit 7 needed
3990+ 3670 A9                   xor     C               ; Set correct sign
3991+ 3671 4F                   ld      C,A             ; Save correct sign in number
3992+ 3672 C3 B5 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 3675
3994+ 3675 1C           FPROND: inc     E               ; Round LSB
3995+ 3676 C0                   ret     NZ              ; Return if ok
3996+ 3677 14                   inc     D               ; Round NMSB
3997+ 3678 C0                   ret     NZ              ; Return if ok
3998+ 3679 0C                   inc     C               ; Round MSB
3999+ 367A C0                   ret     NZ              ; Return if ok
4000+ 367B 0E 80                ld      C,$80           ; Set normal value
4001+ 367D 34                   inc     (HL)            ; Increment exponent
4002+ 367E C0                   ret     NZ              ; Return if ok
4003+ 367F C3 9C 20             jp      OVERR           ; Overflow error
4004+ 3682
4005+ 3682 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 3683 83                   add     A,E             ; Add LSB of BCDE
4007+ 3684 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 3685 23                   inc     HL
4009+ 3686 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 3687 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 3688 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 3689 23                   inc     HL
4013+ 368A 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 368B 89                   adc     A,C             ; Add MSB of BCDE
4015+ 368C 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 368D C9                   ret
4017+ 368E
4018+ 368E 21 B6 61     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 3691 7E                   ld      A,(HL)          ; Get sign of result
4020+ 3692 2F                   cpl                     ; Negate it
4021+ 3693 77                   ld      (HL),A          ; Put it back
4022+ 3694 AF                   xor     A
4023+ 3695 6F                   ld      L,A             ; Set L to zero
4024+ 3696 90                   sub     B               ; Negate exponent,set carry
4025+ 3697 47                   ld      B,A             ; Re-save exponent
4026+ 3698 7D                   ld      A,L             ; Load zero
4027+ 3699 9B                   sbc     A,E             ; Negate LSB
4028+ 369A 5F                   ld      E,A             ; Re-save LSB
4029+ 369B 7D                   ld      A,L             ; Load zero
4030+ 369C 9A                   sbc     A,D             ; Negate NMSB
4031+ 369D 57                   ld      D,A             ; Re-save NMSB
4032+ 369E 7D                   ld      A,L             ; Load zero
4033+ 369F 99                   sbc     A,C             ; Negate MSB
4034+ 36A0 4F                   ld      C,A             ; Re-save MSB
4035+ 36A1 C9                   ret
4036+ 36A2
4037+ 36A2 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 36A4 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 36A6 DA B1 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 36A9 43                   ld      B,E             ; <- Shift
4041+ 36AA 5A                   ld      E,D             ; <- right
4042+ 36AB 51                   ld      D,C             ; <- eight
4043+ 36AC 0E 00                ld      C,$00           ; <- bits
4044+ 36AE C3 A4 36             jp      SCALLP          ; More bits to shift
4045+ 36B1
4046+ 36B1 C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 36B3 6F                   ld      L,A             ; Save bits to shift
4048+ 36B4 AF           SHRLP:  xor     A               ; Flag for all done
4049+ 36B5 2D                   dec     L               ; All shifting done?
4050+ 36B6 C8                   ret     Z               ; Yes - Return
4051+ 36B7 79                   ld      A,C             ; Get MSB
4052+ 36B8 1F           SHRT1:  rra                     ; Shift it right
4053+ 36B9 4F                   ld      C,A             ; Re-save
4054+ 36BA 7A                   ld      A,D             ; Get NMSB
4055+ 36BB 1F                   rra                     ; Shift right with last bit
4056+ 36BC 57                   ld      D,A             ; Re-save it
4057+ 36BD 7B                   ld      A,E             ; Get LSB
4058+ 36BE 1F                   rra                     ; Shift right with last bit
4059+ 36BF 5F                   ld      E,A             ; Re-save it
4060+ 36C0 78                   ld      A,B             ; Get underflow
4061+ 36C1 1F                   rra                     ; Shift right with last bit
4062+ 36C2 47                   ld      B,A             ; Re-save underflow
4063+ 36C3 C3 B4 36             jp      SHRLP           ; More bits to do
4064+ 36C6
4065+ 36C6 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 36CA
4067+ 36CA 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 36CB AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36CF F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36D3 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36D7
4072+ 36D7 CD 74 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36DA B7                   or      A
4074+ 36DB EA A1 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 36DE 21 B5 61             ld      HL,FPEXP        ; Point to exponent
4076+ 36E1 7E                   ld      A,(HL)          ; Get exponent
4077+ 36E2 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 36E5 11 F3 04             ld      DE,$04F3
4079+ 36E8 90                   sub     B               ; Scale value to be < 1
4080+ 36E9 F5                   push    AF              ; Save scale factor
4081+ 36EA 70                   ld      (HL),B          ; Save new exponent
4082+ 36EB D5                   push    DE              ; Save SQR(1/2)
4083+ 36EC C5                   push    BC
4084+ 36ED CD DD 35             call    FPADD           ; Add SQR(1/2) to value
4085+ 36F0 C1                   pop     BC              ; Restore SQR(1/2)
4086+ 36F1 D1                   pop     DE
4087+ 36F2 04                   inc     B               ; Make it SQR(2)
4088+ 36F3 CD CA 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 36F6 21 C6 36             ld      HL,UNITY        ; Point to 1.
4090+ 36F9 CD D4 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 36FC 21 CA 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 36FF CD BC 3B             call    SUMSER          ; Evaluate sum of series
4093+ 3702 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 3705 11 00 00             ld      DE,$0000
4095+ 3708 CD DD 35             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 370B F1                   pop     AF              ; Restore scale factor
4097+ 370C CD EF 39             call    RSCALE          ; Re-scale number
4098+ 370F 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 3712 11 18 72             ld      DE,$7218
4100+ 3715 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 3716
4102+ 3716 C1           MULT:   pop     BC              ; Get number from stack
4103+ 3717 D1                   pop     DE
4104+ 3718 CD 74 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 371B C8                   ret     Z               ; Return zero if zero
4106+ 371C 2E 00                ld      L,$00           ; Flag add exponents
4107+ 371E CD 32 38             call    ADDEXP          ; Add exponents
4108+ 3721 79                   ld      A,C             ; Get MSB of multiplier
4109+ 3722 32 C4 61             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 3725 EB                   ex      DE,HL
4111+ 3726 22 C5 61             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 3729 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 372C 50                   ld      D,B
4114+ 372D 58                   ld      E,B
4115+ 372E 21 2E 36             ld      HL,BNORM        ; Address of normalise
4116+ 3731 E5                   push    HL              ; Save for return
4117+ 3732 21 3A 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 3735 E5                   push    HL              ; Save for NMSB,MSB
4119+ 3736 E5                   push    HL              ;
4120+ 3737 21 B2 61             ld      HL,FPREG        ; Point to number
4121+ 373A 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 373B 23                   inc     HL              ; Point to NMSB
4123+ 373C B7                   or      A               ; Test LSB
4124+ 373D CA 66 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 3740 E5                   push    HL              ; Save address of number
4126+ 3741 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3743 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 3744 67                   ld      H,A             ; Save LSB
4129+ 3745 79                   ld      A,C             ; Get MSB
4130+ 3746 D2 54 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 3749 E5                   push    HL              ; Save LSB and count
4132+ 374A 2A C5 61             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 374D 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 374E EB                   ex      DE,HL           ; Leave sum in DE
4135+ 374F E1                   pop     HL              ; Restore MSB and count
4136+ 3750 3A C4 61             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3753 89                   adc     A,C             ; Add MSB
4138+ 3754 1F           NOMADD: rra                     ; Shift MSB right
4139+ 3755 4F                   ld      C,A             ; Re-save MSB
4140+ 3756 7A                   ld      A,D             ; Get NMSB
4141+ 3757 1F                   rra                     ; Shift NMSB right
4142+ 3758 57                   ld      D,A             ; Re-save NMSB
4143+ 3759 7B                   ld      A,E             ; Get LSB
4144+ 375A 1F                   rra                     ; Shift LSB right
4145+ 375B 5F                   ld      E,A             ; Re-save LSB
4146+ 375C 78                   ld      A,B             ; Get VLSB
4147+ 375D 1F                   rra                     ; Shift VLSB right
4148+ 375E 47                   ld      B,A             ; Re-save VLSB
4149+ 375F 2D                   dec     L               ; Count bits multiplied
4150+ 3760 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 3761 C2 43 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 3764 E1           POPHRT: pop     HL              ; Restore address of number
4153+ 3765 C9                   ret
4154+ 3766
4155+ 3766 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 3767 5A                   ld      E,D
4157+ 3768 51                   ld      D,C
4158+ 3769 4F                   ld      C,A
4159+ 376A C9                   ret
4160+ 376B
4161+ 376B
4162+ 376B              ; WORKING ââ
4163+ 376B C1           DINT:   pop     BC              ; Get number from stack
4164+ 376C D1                   pop     DE
4165+ 376D CD CA 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 3770 C3 47 39             jp      INT             ; return INT(FPREG)
4167+ 3773
4168+ 3773
4169+ 3773              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3773              ; A is in stack; B is in FPREG
4171+ 3773              ; math is:
4172+ 3773              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3773 CD 47 39     MOD:    call    INT             ; B=INT(B)
4174+ 3776 CD C0 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 3779 ED 53 62 61          ld      (TMPBFR3),DE    ; store B into...
4176+ 377D ED 43 64 61          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 3781 C1                   pop     BC              ; recover A...
4178+ 3782 D1                   pop     DE              ; ...from stack
4179+ 3783 CD B5 38             call    FPBCDE          ; store A into FPREG
4180+ 3786 CD 47 39             call    INT             ; get integer part: A=INT(A)
4181+ 3789 CD C0 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 378C ED 53 5E 61          ld      (TMPBFR1),DE    ; store A into...
4183+ 3790 ED 43 60 61          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 3794                                              ; begin calculation
4185+ 3794 2A 62 61             ld      HL,(TMPBFR3)    ; move B...
4186+ 3797 22 B2 61             ld      (FPREG),HL      ; ...from...
4187+ 379A 2A 64 61             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 379D 22 B4 61             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 37A0 CD CA 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 37A3 CD 47 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 37A6 ED 5B 62 61          ld      DE,(TMPBFR3)    ; load B...
4192+ 37AA ED 4B 64 61          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 37AE CD 18 37             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 37B1 ED 5B 5E 61          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 37B5 ED 4B 60 61          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 37B9 C3 DA 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 37BC
4198+ 37BC
4199+ 37BC CD A5 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 37BF 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 37C2 11 00 00             ld      DE,$0000
4202+ 37C5 CD B5 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 37C8
4204+ 37C8 C1           DIV:    pop     BC              ; Get number from stack
4205+ 37C9 D1                   pop     DE
4206+ 37CA CD 74 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 37CD CA 90 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37D0 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37D2 CD 32 38             call    ADDEXP          ; Subtract exponents
4210+ 37D5 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37D6 34                   inc     (HL)
4212+ 37D7 2B                   dec     HL              ; Point to MSB
4213+ 37D8 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37D9 32 CC 5F             ld      (DIV3),A        ; Save for subtraction
4215+ 37DC 2B                   dec     HL
4216+ 37DD 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 37DE 32 C8 5F             ld      (DIV2),A        ; Save for subtraction
4218+ 37E1 2B                   dec     HL
4219+ 37E2 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 37E3 32 C4 5F             ld      (DIV1),A        ; Save for subtraction
4221+ 37E6 41                   ld      B,C             ; Get MSB
4222+ 37E7 EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 37E8 AF                   xor     A
4224+ 37E9 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 37EA 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 37EB 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 37EC 32 CF 5F             ld      (DIV4),A        ; Clear overflow count
4228+ 37EF E5           DIVLP:  push    HL              ; Save divisor
4229+ 37F0 C5                   push    BC
4230+ 37F1 7D                   ld      A,L             ; Get LSB of number
4231+ 37F2 CD C3 5F             call    DIVSUP          ; Subt' divisor from dividend
4232+ 37F5 DE 00                sbc     A,$00           ; Count for overflows
4233+ 37F7 3F                   ccf
4234+ 37F8 D2 02 38             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 37FB 32 CF 5F             ld      (DIV4),A        ; Re-save overflow count
4236+ 37FE F1                   pop     AF              ; Scrap divisor
4237+ 37FF F1                   pop     AF
4238+ 3800 37                   scf                     ; Set carry to
4239+ 3801 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 3802
4241+ 3802 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 3803 E1                   pop     HL
4243+ 3804 79                   ld      A,C             ; Get MSB of quotient
4244+ 3805 3C                   inc     A
4245+ 3806 3D                   dec     A
4246+ 3807 1F                   rra                     ; Bit 0 to bit 7
4247+ 3808 FA 64 36             jp      M,RONDB         ; Done - Normalise result
4248+ 380B 17                   rla                     ; Restore carry
4249+ 380C 7B                   ld      A,E             ; Get LSB of quotient
4250+ 380D 17                   rla                     ; Double it
4251+ 380E 5F                   ld      E,A             ; Put it back
4252+ 380F 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 3810 17                   rla                     ; Double it
4254+ 3811 57                   ld      D,A             ; Put it back
4255+ 3812 79                   ld      A,C             ; Get MSB of quotient
4256+ 3813 17                   rla                     ; Double it
4257+ 3814 4F                   ld      C,A             ; Put it back
4258+ 3815 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 3816 78                   ld      A,B             ; Get MSB of divisor
4260+ 3817 17                   rla                     ; Double it
4261+ 3818 47                   ld      B,A             ; Put it back
4262+ 3819 3A CF 5F             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 381C 17                   rla                     ; Double it
4264+ 381D 32 CF 5F             ld      (DIV4),A        ; Put it back
4265+ 3820 79                   ld      A,C             ; Get MSB of quotient
4266+ 3821 B2                   or      D               ; Merge NMSB
4267+ 3822 B3                   or      E               ; Merge LSB
4268+ 3823 C2 EF 37             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 3826 E5                   push    HL              ; Save divisor
4270+ 3827 21 B5 61             ld      HL,FPEXP        ; Point to exponent
4271+ 382A 35                   dec     (HL)            ; Divide by 2
4272+ 382B E1                   pop     HL              ; Restore divisor
4273+ 382C C2 EF 37             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 382F C3 9C 20             jp      OVERR           ; Overflow error
4275+ 3832
4276+ 3832
4277+ 3832 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3833 B7                   or      A               ; Test it
4279+ 3834 CA 56 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 3837 7D                   ld      A,L             ; Get add/subtract flag
4281+ 3838 21 B5 61             ld      HL,FPEXP        ; Point to exponent
4282+ 383B AE                   xor     (HL)            ; Add or subtract it
4283+ 383C 80                   add     A,B             ; Add the other exponent
4284+ 383D 47                   ld      B,A             ; Save new exponent
4285+ 383E 1F                   rra                     ; Test exponent for overflow
4286+ 383F A8                   xor     B
4287+ 3840 78                   ld      A,B             ; Get exponent
4288+ 3841 F2 55 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 3844 C6 80                add     A,$80           ; Add excess 128
4290+ 3846 77                   ld      (HL),A          ; Save new exponent
4291+ 3847 CA 64 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 384A CD DA 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 384D 77                   ld      (HL),A          ; Save new exponent
4294+ 384E 2B                   dec     HL              ; Point to MSB
4295+ 384F C9                   ret
4296+ 3850
4297+ 3850 CD 74 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3853 2F                   cpl                     ; Invert sign
4299+ 3854 E1                   pop     HL              ; Clean up stack
4300+ 3855 B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 3856 E1           OVTST3: pop     HL              ; Clear off return address
4302+ 3857 F2 43 36             jp      P,RESZER        ; Result zero
4303+ 385A C3 9C 20             jp      OVERR           ; Overflow error
4304+ 385D
4305+ 385D CD C0 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 3860 78                   ld      A,B             ; Get exponent
4307+ 3861 B7                   or      A               ; Is it zero?
4308+ 3862 C8                   ret     Z               ; Yes - Result is zero
4309+ 3863 C6 02                add     A,$02           ; Multiply by 4
4310+ 3865 DA 9C 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 3868 47                   ld      B,A             ; Re-save exponent
4312+ 3869 CD DD 35             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 386C 21 B5 61             ld      HL,FPEXP        ; Point to exponent
4314+ 386F 34                   inc     (HL)            ; Double number (Times 10)
4315+ 3870 C0                   ret     NZ              ; Ok - Return
4316+ 3871 C3 9C 20             jp      OVERR           ; Overflow error
4317+ 3874
4318+ 3874 3A B5 61     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 3877 B7                   or      A
4320+ 3878 C8                   ret     Z               ; RETurn if number is zero
4321+ 3879 3A B4 61             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 387C FE                   defb    0FEH            ; Test sign
4323+ 387D 2F           RETREL: cpl                     ; Invert sign
4324+ 387E 17                   rla                     ; Sign bit to carry
4325+ 387F 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 3880 C0                   ret     NZ              ; Return -1 if negative
4327+ 3881 3C                   inc     A               ; Bump to +1
4328+ 3882 C9                   ret                     ; Positive - Return +1
4329+ 3883
4330+ 3883 CD 74 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 3886 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 3888 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 388B 21 B5 61     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 388E 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 388F 70                   ld      (HL),B          ; Save exponent
4336+ 3890 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 3892 23                   inc     HL              ; Point to sign of result
4338+ 3893 36 80                ld      (HL),$80        ; Set sign of result
4339+ 3895 17                   rla                     ; Carry = sign of integer
4340+ 3896 C3 2B 36             jp      CONPOS          ; Set sign of result
4341+ 3899
4342+ 3899 CD 74 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 389C F0                   ret     P               ; Return if positive
4344+ 389D 21 B4 61     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 38A0 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 38A1 EE 80                xor     $80             ; Invert sign of mantissa
4347+ 38A3 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 38A4 C9                   ret
4349+ 38A5
4350+ 38A5 EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 38A6 2A B2 61             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 38A9 E3                   ex      (SP),HL         ; Stack them,get return
4353+ 38AA E5                   push    HL              ; Re-save return
4354+ 38AB 2A B4 61             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 38AE E3                   ex      (SP),HL         ; Stack them,get return
4356+ 38AF E5                   push    HL              ; Re-save return
4357+ 38B0 EB                   ex      DE,HL           ; Restore code string address
4358+ 38B1 C9                   ret
4359+ 38B2
4360+ 38B2              ; store F.P. number from BCDE into (FPREG)
4361+ 38B2 CD C3 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 38B5 EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 38B6 22 B2 61             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 38B9 60                   ld      H,B             ; Exponent of number
4365+ 38BA 69                   ld      L,C             ; MSB of number
4366+ 38BB 22 B4 61             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 38BE EB                   ex      DE,HL           ; Restore code string address
4368+ 38BF C9                   ret
4369+ 38C0
4370+ 38C0              ; load F.P. number from (FPREG) into BCDE
4371+ 38C0 21 B2 61     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 38C3 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 38C4 23                   inc     HL
4374+ 38C5 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 38C6 23                   inc     HL
4376+ 38C7 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 38C8 23                   inc     HL
4378+ 38C9 46                   ld      B,(HL)          ; Get exponent of number
4379+ 38CA 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 38CB C9                   ret
4381+ 38CC
4382+ 38CC              ; move floating point from (FPREG) into (HL)
4383+ 38CC 11 B2 61     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38CF 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38D1 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38D2 77                   ld      (HL),A          ; Save destination
4387+ 38D3 13                   inc     DE              ; Next source
4388+ 38D4 23                   inc     HL              ; Next destination
4389+ 38D5 05                   dec     B               ; Count bytes
4390+ 38D6 C2 D1 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38D9 C9                   ret
4392+ 38DA
4393+ 38DA 21 B4 61     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 38DD 7E                   ld      A,(HL)          ; Get MSB
4395+ 38DE 07                   rlca                    ; Old sign to carry
4396+ 38DF 37                   scf                     ; Set MSBit
4397+ 38E0 1F                   rra                     ; Set MSBit of MSB
4398+ 38E1 77                   ld      (HL),A          ; Save new MSB
4399+ 38E2 3F                   ccf                     ; Complement sign
4400+ 38E3 1F                   rra                     ; Old sign to carry
4401+ 38E4 23                   inc     HL
4402+ 38E5 23                   inc     HL
4403+ 38E6 77                   ld      (HL),A          ; Set sign of result
4404+ 38E7 79                   ld      A,C             ; Get MSB
4405+ 38E8 07                   rlca                    ; Old sign to carry
4406+ 38E9 37                   scf                     ; Set MSBit
4407+ 38EA 1F                   rra                     ; Set MSBit of MSB
4408+ 38EB 4F                   ld      C,A             ; Save MSB
4409+ 38EC 1F                   rra
4410+ 38ED AE                   xor     (HL)            ; New sign of result
4411+ 38EE C9                   ret
4412+ 38EF
4413+ 38EF 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 38F0 B7                   or      A
4415+ 38F1 CA 74 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 38F4 21 7D 38             ld      HL,RETREL       ; Return relation routine
4417+ 38F7 E5                   push    HL              ; Save for return
4418+ 38F8 CD 74 38             call    TSTSGN          ; Test sign of FPREG
4419+ 38FB 79                   ld      A,C             ; Get MSB of number
4420+ 38FC C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 38FD 21 B4 61             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 3900 AE                   xor     (HL)            ; Combine signs
4423+ 3901 79                   ld      A,C             ; Get MSB of number
4424+ 3902 F8                   ret     M               ; Exit if signs different
4425+ 3903 CD 09 39             call    CMPFP           ; Compare FP numbers
4426+ 3906 1F                   rra                     ; Get carry to sign
4427+ 3907 A9                   xor     C               ; Combine with MSB of number
4428+ 3908 C9                   ret
4429+ 3909
4430+ 3909 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 390A 78                   ld      A,B             ; Get exponent
4432+ 390B BE                   cp      (HL)            ; Compare exponents
4433+ 390C C0                   ret     NZ              ; Different
4434+ 390D 2B                   dec     HL              ; Point to MBS
4435+ 390E 79                   ld      A,C             ; Get MSB
4436+ 390F BE                   cp      (HL)            ; Compare MSBs
4437+ 3910 C0                   ret     NZ              ; Different
4438+ 3911 2B                   dec     HL              ; Point to NMSB
4439+ 3912 7A                   ld      A,D             ; Get NMSB
4440+ 3913 BE                   cp      (HL)            ; Compare NMSBs
4441+ 3914 C0                   ret     NZ              ; Different
4442+ 3915 2B                   dec     HL              ; Point to LSB
4443+ 3916 7B                   ld      A,E             ; Get LSB
4444+ 3917 96                   sub     (HL)            ; Compare LSBs
4445+ 3918 C0                   ret     NZ              ; Different
4446+ 3919 E1                   pop     HL              ; Drop RETurn
4447+ 391A E1                   pop     HL              ; Drop another RETurn
4448+ 391B C9                   ret
4449+ 391C
4450+ 391C 47           FPINT:  ld      B,A             ; <- Move
4451+ 391D 4F                   ld      C,A             ; <- exponent
4452+ 391E 57                   ld      D,A             ; <- to all
4453+ 391F 5F                   ld      E,A             ; <- bits
4454+ 3920 B7                   or      A               ; Test exponent
4455+ 3921 C8                   ret     Z               ; Zero - Return zero
4456+ 3922 E5                   push    HL              ; Save pointer to number
4457+ 3923 CD C0 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 3926 CD DA 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 3929 AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 392A 67                   ld      H,A             ; Save combined signs
4461+ 392B FC 40 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 392E 3E 98                ld      A,$80+24        ; 24 bits
4463+ 3930 90                   sub     B               ; Bits to shift
4464+ 3931 CD A2 36             call    SCALE           ; Shift BCDE
4465+ 3934 7C                   ld      A,H             ; Get combined sign
4466+ 3935 17                   rla                     ; Sign to carry
4467+ 3936 DC 75 36             call    C,FPROND        ; Negative - Round number up
4468+ 3939 06 00                ld      B,$00           ; Zero exponent
4469+ 393B DC 8E 36             call    C,COMPL         ; If negative make positive
4470+ 393E E1                   pop     HL              ; Restore pointer to number
4471+ 393F C9                   ret
4472+ 3940
4473+ 3940 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 3941 7A                   ld      A,D             ; Test LSBs
4475+ 3942 A3                   and     E
4476+ 3943 3C                   inc     A
4477+ 3944 C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 3945 0B                   dec     BC              ; Decrement MSBs
4479+ 3946 C9                   ret
4480+ 3947
4481+ 3947 21 B5 61     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 394A 7E                   ld      A,(HL)          ; Get exponent
4483+ 394B FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 394D 3A B2 61             ld      A,(FPREG)       ; Get LSB
4485+ 3950 D0                   ret     NC              ; Yes - Already integer
4486+ 3951 7E                   ld      A,(HL)          ; Get exponent
4487+ 3952 CD 1C 39             call    FPINT           ; F.P to integer
4488+ 3955 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 3957 7B                   ld      A,E             ; Get LSB of number
4490+ 3958 F5                   push    AF              ; Save LSB
4491+ 3959 79                   ld      A,C             ; Get MSB of number
4492+ 395A 17                   rla                     ; Sign to carry
4493+ 395B CD 2B 36             call    CONPOS          ; Set sign of result
4494+ 395E F1                   pop     AF              ; Restore LSB of number
4495+ 395F C9                   ret
4496+ 3960
4497+ 3960 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3963 78                   ld      A,B             ; Test multiplier
4499+ 3964 B1                   or      C
4500+ 3965 C8                   ret     Z               ; Return zero if zero
4501+ 3966 3E 10                ld      A,$10           ; 16 bits
4502+ 3968 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 3969 DA 8E 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 396C EB                   ex      DE,HL
4505+ 396D 29                   add     HL,HL           ; Shift multiplier left
4506+ 396E EB                   ex      DE,HL
4507+ 396F D2 76 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3972 09                   add     HL,BC           ; Add multiplicand
4509+ 3973 DA 8E 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 3976 3D           NOMLAD: dec     A               ; Count bits
4511+ 3977 C2 68 39             jp      NZ,MLDBLP       ; More
4512+ 397A C9                   ret
4513+ 397B
4514+ 397B FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 397D F5                   push    AF              ; Save it and flags
4516+ 397E CA 87 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 3981 FE 2B                cp      '+'             ; Positive?
4518+ 3983 CA 87 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 3986 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 3987 CD 43 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 398A 47                   ld      B,A             ; Digits after point counter
4522+ 398B 57                   ld      D,A             ; Sign of exponent
4523+ 398C 5F                   ld      E,A             ; Exponent of ten
4524+ 398D 2F                   cpl
4525+ 398E 4F                   ld      C,A             ; Before or after point flag
4526+ 398F CD D6 25     MANLP:  call    GETCHR          ; Get next character
4527+ 3992 DA D8 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 3995 FE 2E                cp      '.'
4529+ 3997 CA B3 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 399A FE 45                cp      'E'
4531+ 399C C2 B7 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 399F CD D6 25             call    GETCHR          ; Get next character
4533+ 39A2 CD AA 2B             call    SGNEXP          ; Get sign of exponent
4534+ 39A5 CD D6 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 39A8 DA FA 39             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 39AB 14                   inc     D               ; Is sign negative?
4537+ 39AC C2 B7 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 39AF AF                   xor     A
4539+ 39B0 93                   sub     E               ; Negate exponent
4540+ 39B1 5F                   ld      E,A             ; And re-save it
4541+ 39B2 0C                   inc     C               ; Flag end of number
4542+ 39B3 0C           DPOINT: inc     C               ; Flag point passed
4543+ 39B4 CA 8F 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 39B7 E5           CONEXP: push    HL              ; Save code string address
4545+ 39B8 7B                   ld      A,E             ; Get exponent
4546+ 39B9 90                   sub     B               ; Subtract digits after point
4547+ 39BA F4 D0 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 39BD F2 C6 39             jp      P,ENDCON        ; Positive - All done
4549+ 39C0 F5                   push    AF              ; Save number of times to /10
4550+ 39C1 CD BC 37             call    DIV10           ; Divide by 10
4551+ 39C4 F1                   pop     AF              ; Restore count
4552+ 39C5 3C                   inc     A               ; Count divides
4553+ 39C6
4554+ 39C6 C2 BA 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 39C9 D1                   pop     DE              ; Restore code string address
4556+ 39CA F1                   pop     AF              ; Restore sign of number
4557+ 39CB CC 9D 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39CE EB                   ex      DE,HL           ; Code string address to HL
4559+ 39CF C9                   ret
4560+ 39D0
4561+ 39D0 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39D1 F5           MULTEN: push    AF              ; Save count
4563+ 39D2 CD 5D 38             call    MLSP10          ; Multiply number by 10
4564+ 39D5 F1                   pop     AF              ; Restore count
4565+ 39D6 3D                   dec     A               ; Count multiplies
4566+ 39D7 C9                   ret
4567+ 39D8
4568+ 39D8 D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39D9 57                   ld      D,A             ; Save digit
4570+ 39DA 78                   ld      A,B             ; Get digits after point
4571+ 39DB 89                   adc     A,C             ; Add one if after point
4572+ 39DC 47                   ld      B,A             ; Re-save counter
4573+ 39DD C5                   push    BC              ; Save point flags
4574+ 39DE E5                   push    HL              ; Save code string address
4575+ 39DF D5                   push    DE              ; Save digit
4576+ 39E0 CD 5D 38             call    MLSP10          ; Multiply number by 10
4577+ 39E3 F1                   pop     AF              ; Restore digit
4578+ 39E4 D6 30                sub     '0'             ; Make it absolute
4579+ 39E6 CD EF 39             call    RSCALE          ; Re-scale number
4580+ 39E9 E1                   pop     HL              ; Restore code string address
4581+ 39EA C1                   pop     BC              ; Restore point flags
4582+ 39EB D1                   pop     DE              ; Restore sign of exponent
4583+ 39EC C3 8F 39             jp      MANLP           ; Get another digit
4584+ 39EF
4585+ 39EF CD A5 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 39F2 CD 86 38             call    FLGREL          ; Digit to add to FPREG
4587+ 39F5 C1           PADD:   pop     BC              ; Restore number
4588+ 39F6 D1                   pop     DE
4589+ 39F7 C3 DD 35             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 39FA
4591+ 39FA 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 39FB 07                   rlca                    ; Times 2
4593+ 39FC 07                   rlca                    ; Times 4
4594+ 39FD 83                   add     A,E             ; Times 5
4595+ 39FE 07                   rlca                    ; Times 10
4596+ 39FF 86                   add     A,(HL)          ; Add next digit
4597+ 3A00 D6 30                sub     '0'             ; Make it absolute
4598+ 3A02 5F                   ld      E,A             ; Save new digit
4599+ 3A03 C3 A5 39             jp      EXPLP           ; Look for another digit
4600+ 3A06
4601+ 3A06 E5           LINEIN: push    HL              ; Save code string address
4602+ 3A07 21 06 20             ld      HL,INMSG        ; Output " in "
4603+ 3A0A CD 6F 2F             call    PRS             ; Output string at HL
4604+ 3A0D E1                   pop     HL              ; Restore code string address
4605+ 3A0E EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 3A0F AF                   xor     A
4607+ 3A10 06 98                ld      B,$80+24        ; 24 bits
4608+ 3A12 CD 8B 38             call    RETINT          ; Return the integer
4609+ 3A15 21 6E 2F             ld      HL,PRNUMS       ; Print number string
4610+ 3A18 E5                   push    HL              ; Save for return
4611+ 3A19              ; conmvert FP number into ASCII chars
4612+ 3A19 21 B7 61     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 3A1C E5                   push    HL              ; Save for return
4614+ 3A1D CD 74 38             call    TSTSGN          ; Test sign of FPREG
4615+ 3A20 36 20                ld      (HL),SPC        ; Space at start
4616+ 3A22 F2 27 3A             jp      P,SPCFST        ; Positive - Space to start
4617+ 3A25 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 3A27 23           SPCFST: inc     HL              ; First byte of number
4619+ 3A28 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 3A2A CA DD 3A             jp      Z,JSTZER        ; Return '0' if zero
4621+ 3A2D E5                   push    HL              ; Save buffer address
4622+ 3A2E FC 9D 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A31 AF                   xor     A               ; Zero A
4624+ 3A32 F5                   push    AF              ; Save it
4625+ 3A33 CD E3 3A             call    RNGTST          ; Test number is in range
4626+ 3A36 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A39 11 F8 4F             ld      DE,$4FF8
4628+ 3A3C CD EF 38             call    CMPNUM          ; Compare numbers
4629+ 3A3F B7                   or      A
4630+ 3A40 E2 54 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A43 F1                   pop     AF              ; Restore count
4632+ 3A44 CD D1 39             call    MULTEN          ; Multiply by ten
4633+ 3A47 F5                   push    AF              ; Re-save count
4634+ 3A48 C3 36 3A             jp      SIXDIG          ; Test it again
4635+ 3A4B
4636+ 3A4B CD BC 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A4E F1                   pop     AF              ; Get count
4638+ 3A4F 3C                   inc     A               ; Count divides
4639+ 3A50 F5                   push    AF              ; Re-save count
4640+ 3A51 CD E3 3A             call    RNGTST          ; Test number is in range
4641+ 3A54 CD CB 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A57 3C                   inc     A
4643+ 3A58 CD 1C 39             call    FPINT           ; F.P to integer
4644+ 3A5B CD B5 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A5E 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A61 F1                   pop     AF              ; Restore count
4647+ 3A62 81                   add     A,C             ; 6 digits before point
4648+ 3A63 3C                   inc     A               ; Add one
4649+ 3A64 FA 70 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A67 FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A69 D2 70 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A6C 3C                   inc     A               ; Adjust for exponent
4653+ 3A6D 47                   ld      B,A             ; Exponent of number
4654+ 3A6E 3E 02                ld      A,2             ; Make it zero after
4655+ 3A70
4656+ 3A70 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A71 3D                   dec     A
4658+ 3A72 E1                   pop     HL              ; Restore buffer address
4659+ 3A73 F5                   push    AF              ; Save count
4660+ 3A74 11 F6 3A             ld      DE,POWERS       ; Powers of ten
4661+ 3A77 05                   dec     B               ; Count digits before point
4662+ 3A78 C2 81 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A7B 36 2E                ld      (HL),'.'        ; Save point
4664+ 3A7D 23                   inc     HL              ; Move on
4665+ 3A7E 36 30                ld      (HL),'0'        ; Save zero
4666+ 3A80 23                   inc     HL              ; Move on
4667+ 3A81 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3A82 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3A84 CC CA 38             call    Z,INCHL         ; Last digit - move on
4670+ 3A87 C5                   push    BC              ; Save digits before point
4671+ 3A88 E5                   push    HL              ; Save buffer address
4672+ 3A89 D5                   push    DE              ; Save powers of ten
4673+ 3A8A CD C0 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3A8D E1                   pop     HL              ; Powers of ten table
4675+ 3A8E 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3A90 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3A91 7B                   ld      A,E             ; Get LSB
4678+ 3A92 96                   sub     (HL)            ; Subtract LSB
4679+ 3A93 5F                   ld      E,A             ; Save LSB
4680+ 3A94 23                   inc     HL
4681+ 3A95 7A                   ld      A,D             ; Get NMSB
4682+ 3A96 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3A97 57                   ld      D,A             ; Save NMSB
4684+ 3A98 23                   inc     HL
4685+ 3A99 79                   ld      A,C             ; Get MSB
4686+ 3A9A 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3A9B 4F                   ld      C,A             ; Save MSB
4688+ 3A9C 2B                   dec     HL              ; Point back to start
4689+ 3A9D 2B                   dec     HL
4690+ 3A9E D2 90 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3AA1 CD 82 36             call    PLUCDE          ; Restore number
4692+ 3AA4 23                   inc     HL              ; Start of next number
4693+ 3AA5 CD B5 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3AA8 EB                   ex      DE,HL           ; Save point in table
4695+ 3AA9 E1                   pop     HL              ; Restore buffer address
4696+ 3AAA 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3AAB 23                   inc     HL              ; And move on
4698+ 3AAC C1                   pop     BC              ; Restore digit count
4699+ 3AAD 0D                   dec     C               ; Count digits
4700+ 3AAE C2 81 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3AB1 05                   dec     B               ; Any decimal part?
4702+ 3AB2 CA C1 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3AB5 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3AB6 7E                   ld      A,(HL)          ; Get character
4705+ 3AB7 FE 30                cp      '0'             ; '0' character?
4706+ 3AB9 CA B5 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3ABC FE 2E                cp      '.'             ; A decimal point?
4708+ 3ABE C4 CA 38             call    NZ,INCHL        ; Move back over digit
4709+ 3AC1
4710+ 3AC1 F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3AC2 CA E0 3A             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3AC5 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3AC7 23                   inc     HL              ; And move on
4714+ 3AC8 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3ACA F2 D1 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3ACD 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3ACF 2F                   cpl                     ; Negate exponent
4718+ 3AD0 3C                   inc     A
4719+ 3AD1 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AD3 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3AD4 D6 0A                sub     $0A             ; Tens digit
4722+ 3AD6 D2 D3 3A             jp      NC,EXPTEN       ; More to do
4723+ 3AD9 C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3ADB 23                   inc     HL              ; Move on
4725+ 3ADC 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3ADD 23           JSTZER: inc     HL              ;
4727+ 3ADE 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3ADF 23                   inc     HL
4729+ 3AE0 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3AE1 E1                   pop     HL              ; Restore code string address
4731+ 3AE2 C9                   ret
4732+ 3AE3
4733+ 3AE3 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3AE6 11 F7 23             ld      DE,$23F7
4735+ 3AE9 CD EF 38             call    CMPNUM          ; Compare numbers
4736+ 3AEC B7                   or      A
4737+ 3AED E1                   pop     HL              ; Return address to HL
4738+ 3AEE E2 4B 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3AF1 E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3AF2
4741+ 3AF2 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3AF6
4743+ 3AF6 A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3AF9 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3AFC E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3AFF 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3B02 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3B05 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3B08
4750+ 3B08 21 9D 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3B0B E3                   ex      (SP),HL         ; To be done after caller
4752+ 3B0C E9                   jp      (HL)            ; Return to caller
4753+ 3B0D
4754+ 3B0D CD A5 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3B10 21 F2 3A             ld      HL,HALF         ; Set power to 1/2
4756+ 3B13 CD B2 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3B16
4758+ 3B16 C1           POWER:  pop     BC              ; Get base
4759+ 3B17 D1                   pop     DE
4760+ 3B18 CD 74 38             call    TSTSGN          ; Test sign of power
4761+ 3B1B 78                   ld      A,B             ; Get exponent of base
4762+ 3B1C CA 5B 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3B1F F2 26 3B             jp      P,POWER1        ; Positive base - Ok
4764+ 3B22 B7                   or      A               ; Zero to negative power?
4765+ 3B23 CA 90 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3B26 B7           POWER1: or      A               ; Base zero?
4767+ 3B27 CA 44 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3B2A D5                   push    DE              ; Save base
4769+ 3B2B C5                   push    BC
4770+ 3B2C 79                   ld      A,C             ; Get MSB of base
4771+ 3B2D F6 7F                or      %01111111       ; Get sign status
4772+ 3B2F CD C0 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B32 F2 43 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B35 D5                   push    DE              ; Save power
4775+ 3B36 C5                   push    BC
4776+ 3B37 CD 47 39             call    INT             ; Get integer of power
4777+ 3B3A C1                   pop     BC              ; Restore power
4778+ 3B3B D1                   pop     DE
4779+ 3B3C F5                   push    AF              ; MSB of base
4780+ 3B3D CD EF 38             call    CMPNUM          ; Power an integer?
4781+ 3B40 E1                   pop     HL              ; Restore MSB of base
4782+ 3B41 7C                   ld      A,H             ; but don't affect flags
4783+ 3B42 1F                   rra                     ; Exponent odd or even?
4784+ 3B43 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B44 22 B4 61             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B47 E1                   pop     HL              ; LSBs of base
4787+ 3B48 22 B2 61             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B4B DC 08 3B             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B4E CC 9D 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B51 D5                   push    DE              ; Save power
4791+ 3B52 C5                   push    BC
4792+ 3B53 CD D7 36             call    LOG             ; Get LOG of base
4793+ 3B56 C1                   pop     BC              ; Restore power
4794+ 3B57 D1                   pop     DE
4795+ 3B58 CD 18 37             call    FPMULT          ; Multiply LOG by power
4796+ 3B5B
4797+ 3B5B CD A5 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B5E 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B61 11 3B AA             ld      DE,$AA3B
4800+ 3B64 CD 18 37             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B67 3A B5 61             ld      A,(FPEXP)       ; Get exponent
4802+ 3B6A FE 88                cp      $80+8           ; Is it in range?
4803+ 3B6C D2 50 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B6F CD 47 39             call    INT             ; Get INT of FPREG
4805+ 3B72 C6 80                add     A,$80           ; For excess 128
4806+ 3B74 C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B76 DA 50 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B79 F5                   push    AF              ; Save scaling factor
4809+ 3B7A 21 C6 36             ld      HL,UNITY        ; Point to 1.
4810+ 3B7D CD CE 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3B80 CD 0F 37             call    MULLN2          ; Multiply by LN(2)
4812+ 3B83 F1                   pop     AF              ; Restore scaling factor
4813+ 3B84 C1                   pop     BC              ; Restore exponent
4814+ 3B85 D1                   pop     DE
4815+ 3B86 F5                   push    AF              ; Save scaling factor
4816+ 3B87 CD DA 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3B8A CD 9D 38             call    INVSGN          ; Negate result
4818+ 3B8D 21 9B 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3B90 CD CB 3B             call    SMSER1          ; Sum the series
4820+ 3B93 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3B96 C1                   pop     BC              ; Scaling factor
4822+ 3B97 4A                   ld      C,D             ; Zero MSB
4823+ 3B98 C3 18 37             jp      FPMULT          ; Scale result to correct value
4824+ 3B9B
4825+ 3B9B 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3B9C 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3BA0 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3BA4 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3BA8 E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3BAC 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3BB0 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3BB4 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3BB8 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3BBC
4835+ 3BBC CD A5 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3BBF 11 16 37             ld      DE,MULT         ; Multiply by "X"
4837+ 3BC2 D5                   push    DE              ; To be done after
4838+ 3BC3 E5                   push    HL              ; Save address of table
4839+ 3BC4 CD C0 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3BC7 CD 18 37             call    FPMULT          ; Square the value
4841+ 3BCA E1                   pop     HL              ; Restore address of table
4842+ 3BCB CD A5 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BCE 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BCF 23                   inc     HL              ; Point to start of table
4845+ 3BD0 CD B2 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BD3 06                   defb    06H             ; Skip "pop AF"
4847+ 3BD4 F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BD5 C1                   pop     BC              ; Restore number
4849+ 3BD6 D1                   pop     DE
4850+ 3BD7 3D                   dec     A               ; Cont coefficients
4851+ 3BD8 C8                   ret     Z               ; All done
4852+ 3BD9 D5                   push    DE              ; Save number
4853+ 3BDA C5                   push    BC
4854+ 3BDB F5                   push    AF              ; Save count
4855+ 3BDC E5                   push    HL              ; Save address in table
4856+ 3BDD CD 18 37             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3BE0 E1                   pop     HL              ; Restore address in table
4858+ 3BE1 CD C3 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3BE4 E5                   push    HL              ; Save address in table
4860+ 3BE5 CD DD 35             call    FPADD           ; Add coefficient to FPREG
4861+ 3BE8 E1                   pop     HL              ; Restore address in table
4862+ 3BE9 C3 D4 3B             jp      SUMLP           ; More coefficients
4863+ 3BEC
4864+ 3BEC
4865+ 3BEC              ; random number generator
4866+ 3BEC              ; a negative argument is used as a seed for the RNG
4867+ 3BEC              ; 0 is used to repeat the last random number
4868+ 3BEC              ; a positive argument generates a new random number
4869+ 3BEC CD 74 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3BEF 21 D3 5F             ld      HL,SEED+2       ; Random number seed
4871+ 3BF2 FA 4D 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3BF5 21 F4 5F             ld      HL,LSTRND       ; Last random number
4873+ 3BF8 CD B2 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3BFB 21 D3 5F             ld      HL,SEED+2       ; Random number seed
4875+ 3BFE C8                   ret     Z               ; Return if RND(0)
4876+ 3BFF 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3C00 E6 07                and     %00000111       ; 0 to 7
4878+ 3C02 06 00                ld      B,$00
4879+ 3C04 77                   ld      (HL),A          ; Re-save seed
4880+ 3C05 23                   inc     HL              ; Move to coefficient table
4881+ 3C06 87                   add     A,A             ; 4 bytes
4882+ 3C07 87                   add     A,A             ; per entry
4883+ 3C08 4F                   ld      C,A             ; BC = Offset into table
4884+ 3C09 09                   add     HL,BC           ; Point to coefficient
4885+ 3C0A CD C3 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3C0D CD 18 37             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3C10 3A D2 5F             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3C13 3C                   inc     A               ; Add 1
4889+ 3C14 E6 03                and     %00000011       ; 0 to 3
4890+ 3C16 06 00                ld      B,$00
4891+ 3C18 FE 01                cp      $01             ; Is it zero?
4892+ 3C1A 88                   adc     A,B             ; Yes - Make it 1
4893+ 3C1B 32 D2 5F             ld      (SEED+1),A      ; Re-save seed
4894+ 3C1E 21 51 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3C21 87                   add     A,A             ; 4 bytes
4896+ 3C22 87                   add     A,A             ; per entry
4897+ 3C23 4F                   ld      C,A             ; BC = Offset into table
4898+ 3C24 09                   add     HL,BC           ; Point to value
4899+ 3C25 CD CE 35             call    ADDPHL          ; Add value to FPREG
4900+ 3C28 CD C0 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3C2B 7B                   ld      A,E             ; Get LSB
4902+ 3C2C 59                   ld      E,C             ; LSB = MSB
4903+ 3C2D EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C2F 4F                   ld      C,A             ; New MSB
4905+ 3C30 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C32 2B                   dec     HL              ; Point to MSB
4907+ 3C33 46                   ld      B,(HL)          ; Get MSB
4908+ 3C34 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C36 21 D1 5F             ld      HL,SEED         ; Random number seed
4910+ 3C39 34                   inc     (HL)            ; Count seed
4911+ 3C3A 7E                   ld      A,(HL)          ; Get seed
4912+ 3C3B D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C3D C2 44 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C40 77                   ld      (HL),A          ; Zero seed
4915+ 3C41 0C                   inc     C               ; Fillde about
4916+ 3C42 15                   dec     D               ; with the
4917+ 3C43 1C                   inc     E               ; number
4918+ 3C44 CD 2E 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C47 21 F4 5F             ld      HL,LSTRND       ; Save random number
4920+ 3C4A C3 CC 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C4D
4922+ 3C4D 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C4E 2B                   dec     HL
4924+ 3C4F 77                   ld      (HL),A
4925+ 3C50 2B                   dec     HL
4926+ 3C51 77                   ld      (HL),A
4927+ 3C52 C3 28 3C             jp      RND1            ; Return RND seed
4928+ 3C55
4929+ 3C55 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C59 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C5D 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C61
4933+ 3C61              ; COS and SIN functions
4934+ 3C61 21 AB 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C64 CD CE 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C67 CD A5 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C6A 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C6D 11 DB 0F             ld      DE,$0FDB
4939+ 3C70 CD B5 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C73 C1                   pop     BC              ; Restore angle
4941+ 3C74 D1                   pop     DE
4942+ 3C75 CD CA 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C78 CD A5 38             call    STAKFP          ; Put it on stack
4944+ 3C7B CD 47 39             call    INT             ; Get INT of result
4945+ 3C7E C1                   pop     BC              ; Restore number
4946+ 3C7F D1                   pop     DE
4947+ 3C80 CD DA 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3C83 21 AF 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3C86 CD D4 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3C89 CD 74 38             call    TSTSGN          ; Test sign of value
4951+ 3C8C 37                   scf                     ; Flag positive
4952+ 3C8D F2 97 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3C90 CD CB 35             call    ROUND           ; Add 0.5 to value
4954+ 3C93 CD 74 38             call    TSTSGN          ; Test sign of value
4955+ 3C96 B7                   or      A               ; Flag negative
4956+ 3C97 F5           SIN1:   push    AF              ; Save sign
4957+ 3C98 F4 9D 38             call    P,INVSGN        ; Negate value if positive
4958+ 3C9B 21 AF 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3C9E CD CE 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3CA1 F1                   pop     AF              ; Restore sign
4961+ 3CA2 D4 9D 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3CA5 21 B3 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3CA8 C3 BC 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3CAB
4965+ 3CAB DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3CAF
4967+ 3CAF 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3CB3
4969+ 3CB3 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3CB4 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3CB8 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3CBC 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3CC0 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3CC4 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3CC8
4976+ 3CC8 CD A5 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3CCB CD 67 3C             call    SIN             ; Get SIN of angle
4978+ 3CCE C1                   pop     BC              ; Restore angle
4979+ 3CCF E1                   pop     HL
4980+ 3CD0 CD A5 38             call    STAKFP          ; Save SIN of angle
4981+ 3CD3 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CD4 CD B5 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CD7 CD 61 3C             call    COS             ; Get COS of angle
4984+ 3CDA C3 C8 37             jp      DIV             ; TAN = SIN / COS
4985+ 3CDD
4986+ 3CDD CD 74 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3CE0 FC 08 3B             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3CE3 FC 9D 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3CE6 3A B5 61             ld      A,(FPEXP)       ; Get exponent
4990+ 3CE9 FE 81                cp      81H             ; Number less than 1?
4991+ 3CEB DA FA 3C             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3CEE 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3CF1 51                   ld      D,C
4994+ 3CF2 59                   ld      E,C
4995+ 3CF3 CD CA 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3CF6 21 D4 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3CF9 E5                   push    HL              ; Save for angle > 1
4998+ 3CFA 21 04 3D     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3CFD CD BC 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3D00 21 AB 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3D03 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3D04
5003+ 3D04 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3D05 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3D09 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3D0D FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3D11 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3D15 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3D19 C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3D1D E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3D21 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3D25 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3D29
5014+ 3D29
5015+ 3D29 C9           ARET:   ret                     ; A RETurn instruction
5016+ 3D2A
5017+ 3D2A D7           GETINP: rst     $10             ; input a character
5018+ 3D2B C9                   ret
5019+ 3D2C
5020+ 3D2C E5           CLS:    push    HL
5021+ 3D2D D5                   push    DE
5022+ 3D2E 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D31 FE 02                cp      $02             ; G2 mode?
5024+ 3D33 CC D8 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D36 D1                   pop     DE
5026+ 3D37 E1                   pop     HL
5027+ 3D38 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D3A CD CB 23             call    SND2VID         ; send to screen
5029+ 3D3D C3 F1 4C             jp      MONOUT          ; Output character
5030+ 3D40
5031+ 3D40 CD ED 32     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D43 7B                   ld      A,E             ; Width to A
5033+ 3D44 32 FB 5F             ld      (LWIDTH),A      ; Set width
5034+ 3D47 C9                   ret
5035+ 3D48
5036+ 3D48
5037+ 3D48              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D48              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D48 CD 8C 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D4B D5                   push    DE              ; Save number
5041+ 3D4C E1                   pop     HL              ; Number to HL
5042+ 3D4D 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D4E 23                   inc     HL
5044+ 3D4F 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D50 C3 51 2E             jp      ABPASS          ; Return integer AB
5046+ 3D53
5047+ 3D53              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D53              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D53 CD 67 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D56 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D59 D5                   push    DE              ; Save address
5052+ 3D5A CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D5D 2C                   defb    ','
5054+ 3D5E CD 67 2A             call    GETNUM          ; Get a number
5055+ 3D61 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D64 E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D65 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D66 23                   inc     HL
5059+ 3D67 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D68 E1                   pop     HL              ; Restore code string address
5061+ 3D69 C9                   ret
5062+ 3D6A
5063+ 3D6A              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D6A              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D6A CD 67 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D6D CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D70 7A                   ld      A,D             ; load D into A
5068+ 3D71 B3                   or      E               ; are D & E equal to $00?
5069+ 3D72 C8                   ret     Z               ; if yes, then return
5070+ 3D73 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D74 3A 3E 61             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D77 47                   ld      B,A             ; move it into B
5073+ 3D78 CD 01 26     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D7B 3A 3E 61             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3D7E B8                   cp      B               ; is it the same value?
5076+ 3D7F 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3D81 47                   ld      B,A             ; no, so store the new value
5078+ 3D82 1B                   dec     DE              ; decrement interval
5079+ 3D83 7A                   ld      A,D             ; load D into A
5080+ 3D84 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3D85 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3D87 C1                   pop     BC              ; yes, recover BC and continue
5083+ 3D88 C9                   ret
5084+ 3D89
5085+ 3D89              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3D89              ; where X is graphic mode:
5087+ 3D89              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3D89              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3D89              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3D89              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3D89              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3D89 AF           SCREEN: xor     A
5093+ 3D8A 32 60 61             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3D8D CD ED 32             call    GETINT          ; Get integer 0-255
5095+ 3D90 FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3D92 D2 A1 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3D95 32 5E 61             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3D98 A7                   and     A               ; is it 0 (text mode)?
5099+ 3D99 CA B5 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3D9C CD F4 3D     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3D9F DA A7 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3DA2 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3DA4 32 60 61             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3DA7 CD F4 3D     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3DAA DA B5 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3DAD 3A 60 61             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3DB0 F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3DB2 32 60 61             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3DB5 F3           SCVDP:  di                      ; disable INTs
5110+ 3DB6 D5                   push    DE              ; store DE
5111+ 3DB7 E5                   push    HL              ; store HL
5112+ 3DB8 3A 5E 61             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3DBB 5F                   ld      E,A             ; and store it into E
5114+ 3DBC 3A 60 61             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3DBF 57                   ld      D,A             ; and store them into D
5116+ 3DC0 D5                   push    DE              ; store D & E
5117+ 3DC1 CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3DC4 D1                   pop     DE              ; retrieve D & E
5119+ 3DC5 7B                   ld      A,E             ; move graphic mode into A
5120+ 3DC6 87                   add     A,A
5121+ 3DC7 87                   add     A,A
5122+ 3DC8 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3DC9 5F                   ld      E,A             ; and pass it into E
5124+ 3DCA D5                   push    DE              ; store sprite flags in E
5125+ 3DCB 16 00                ld      D,$00           ; reset D
5126+ 3DCD 21 20 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DD0 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DD1 D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DD2 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DD3 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DD5 B2                   or      D               ; set size & magn. bits
5132+ 3DD6 5F                   ld      E,A             ; value into E
5133+ 3DD7 3E 01                ld      A,$01           ; reg #1
5134+ 3DD9 CD B0 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3DDC 2A 08 60             ld      HL,(LINEAT)     ; Get current line number
5136+ 3DDF 23                   inc     HL              ; -1 means direct statement
5137+ 3DE0 7C                   ld      A,H
5138+ 3DE1 B5                   or      L
5139+ 3DE2 CC 23 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3DE5 FB                   ei                      ; re-enable interrupts
5141+ 3DE6 E1                   pop     HL              ; restore HL
5142+ 3DE7 D1                   pop     DE              ; restore DE
5143+ 3DE8 3A 4F 61             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3DEB FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3DED D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3DEE 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3DF0 32 5A 61             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3DF3 C9                   ret                     ; ...and return to caller
5149+ 3DF4
5150+ 3DF4              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3DF4              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3DF4              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3DF4 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3DF5 CD D6 25             call    GETCHR          ; Get next character
5155+ 3DF8 37                   scf                     ; set carry flag
5156+ 3DF9 C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3DFA CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3DFD 2C                   defb    ','
5159+ 3DFE CD ED 32             call    GETINT          ; get value
5160+ 3E01 1F                   rra                     ; Carry=bit #0
5161+ 3E02 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3E03 C9                   ret                     ; return
5163+ 3E04
5164+ 3E04
5165+ 3E04              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3E04              ; a=foreground color / b=background color / c=border color
5167+ 3E04              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3E04              ; the number of arguments is based on the current screen mode
5169+ 3E04 CD ED 32     COLOR:  call    GETINT          ; get first value
5170+ 3E07 CD AC 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3E0A 32 5E 61             ld      (TMPBFR1),A     ; store it
5172+ 3E0D 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3E10 FE 03                cp      $03             ; is it multicolor mode?
5174+ 3E12 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3E14 3E 0F                ld      A,$0F           ; white for...
5176+ 3E16 32 5C 61             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3E19 3A 5E 61             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3E1C 32 62 61             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3E1F 18 31                jr      CLRMC           ; jump to set color
5180+ 3E21 CD 8D 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3E24 2C                   defb    ','
5182+ 3E25 CD ED 32             call    GETINT          ; get second value
5183+ 3E28 CD AC 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3E2B 32 60 61             ld      (TMPBFR2),A     ; store it
5185+ 3E2E 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E31 A7                   and     A               ; is it text mode?
5187+ 3E32 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E34 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E37 2C                   defb    ','
5190+ 3E38 CD ED 32             call    GETINT          ; get third value
5191+ 3E3B CD AC 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E3E 32 62 61             ld      (TMPBFR3),A     ; store it
5193+ 3E41 D5                   push    DE              ; store DE
5194+ 3E42 3A 50 61             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E45 FE 01                cp      $01             ; is it G1 mode?
5196+ 3E47 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E49 FE 02                cp      $02             ; is it G2 mode?
5198+ 3E4B 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E4D 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E4F CD 9F 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E52 32 62 61     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E55 D5                   push    DE              ; store DE
5203+ 3E56 F3                   di                      ; disable INTs
5204+ 3E57 18 2D                jr      SETBRCL         ; set colors and exit
5205+ 3E59 CD 9F 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E5C 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E5E 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E60 18 10                jr      LOADCLR         ; load colors
5209+ 3E62 CD 9F 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E65 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E67 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E69 18 07                jr      LOADCLR         ; load colors
5213+ 3E6B CD 9F 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E6E 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E70 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E72 E5           LOADCLR:push    HL              ; store HL
5217+ 3E73 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E76 F3                   di                      ; disable INTs
5219+ 3E77 CD 66 06             call    SETVDPADRS
5220+ 3E7A 0D                   dec     C              ; VDP data mode
5221+ 3E7B ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3E7D 00                   nop
5223+ 3E7E 00                   nop
5224+ 3E7F 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3E81 15                   dec     D               ; did we fill up all the pages?
5226+ 3E82 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3E84 FB                   ei
5228+ 3E85 E1                   pop     HL              ; retrieve HL
5229+ 3E86 3A 5E 61     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3E89 32 5C 61             ld      (FRGNDCLR),A    ; store it
5231+ 3E8C 3A 60 61             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3E8F 32 5D 61             ld      (BKGNDCLR),A    ; store it
5233+ 3E92 3A 62 61             ld      A,(TMPBFR3)     ; recover border color
5234+ 3E95 5F                   ld      E,A             ; move it into E
5235+ 3E96 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3E98 F3                   di
5237+ 3E99 CD B0 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3E9C FB                   ei                      ; re-enable INTs
5239+ 3E9D D1                   pop     DE              ; retrieve DE
5240+ 3E9E C9                   ret                     ; return to caller
5241+ 3E9F
5242+ 3E9F
5243+ 3E9F              ; mix 2 color nibbles in 1 byte
5244+ 3E9F 3A 60 61     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3EA2 47                   ld      B,A             ; move it into B
5246+ 3EA3 3A 5E 61             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3EA6 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3EA7 87                   add     A,A
5249+ 3EA8 87                   add     A,A
5250+ 3EA9 87                   add     A,A
5251+ 3EAA B0                   or      B               ; put background color into the low nibble of A
5252+ 3EAB C9                   ret                     ; return to caller
5253+ 3EAC
5254+ 3EAC
5255+ 3EAC              ; check if the color is not 0 and into the range 1~15
5256+ 3EAC A7           CHKCLR1:and     A               ; is it 0?
5257+ 3EAD CA 8D 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3EB0 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3EB2 D2 8D 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3EB5 C9                   ret                     ; param is OK, can return
5261+ 3EB6
5262+ 3EB6
5263+ 3EB6              ; check if in graphics 2 mode
5264+ 3EB6 3A 50 61     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3EB9 FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3EBB C2 C4 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3EBE C9                   ret                     ; return to caller
5268+ 3EBF
5269+ 3EBF
5270+ 3EBF              ; print a text in screen 2
5271+ 3EBF              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3EBF              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3EBF              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3EBF              ; colors (1~15), resp.
5275+ 3EBF              ; (portions of code are from nippur72)
5276+ 3EBF              GX      equ     TMPBFR3
5277+ 3EBF              GY      equ     TMPBFR4
5278+ 3EBF              TMPCLR  equ     TMPBFR2
5279+ 3EBF              MIXCOL  equ     TMPBFR1
5280+ 3EBF              TMPADR  equ     VIDEOBUFF
5281+ 3EBF              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3EBF              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3EBF              TMPHL   equ     VIDEOBUFF+$06
5284+ 3EBF CD B6 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3EC2 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3EC3 CD D6 25             call    GETCHR          ; check if something follows
5287+ 3EC6 CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3EC9 22 66 61             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3ECC CD 79 2A             call    EVAL            ; Evaluate expression
5290+ 3ECF CD 6B 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3ED2 22 6C 61             ld      (TMPHL),HL      ; store code string pointer
5292+ 3ED5 CD B2 30             call    GSTRCU          ; Current string to pool
5293+ 3ED8 CD C3 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3EDB ED 43 68 61          ld      (CHRPNT),BC     ; store string pointer
5295+ 3EDF ED 53 6A 61          ld      (NUMCHR),DE     ; store string lenght
5296+ 3EE3 2A 6C 61             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3EE6 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3EE9 2C                   defb    ','
5299+ 3EEA CD ED 32             call    GETINT          ; get X coord.
5300+ 3EED FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3EEF D2 A1 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3EF2 32 62 61             ld      (GX),A          ; store into temp. buffer
5303+ 3EF5 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3EF8 2C                   defb    ','
5305+ 3EF9 CD ED 32             call    GETINT          ; get Y coord.
5306+ 3EFC FE 18                cp      $18             ; is it in range 0~23?
5307+ 3EFE D2 A1 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3F01 32 64 61             ld      (GY),A          ; store into temp. buffer
5309+ 3F04 11 60 61             ld      DE,TMPCLR
5310+ 3F07 3A 5D 61             ld      A,(BKGNDCLR)    ; load background color
5311+ 3F0A 12                   ld      (DE),A          ; store into temp buff
5312+ 3F0B 3A 5C 61             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3F0E 1B                   dec     DE
5314+ 3F0F 1B                   dec     DE
5315+ 3F10 12                   ld      (DE),A          ; store into temp buff
5316+ 3F11 CD 9C 3F             call    CKCOL           ; check color
5317+ 3F14 CA 1C 3F             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3F17 13                   inc     DE
5319+ 3F18 13                   inc     DE
5320+ 3F19 CD 9C 3F             call    CKCOL           ; check background color
5321+ 3F1C CD 9F 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3F1F 32 5E 61             ld      (MIXCOL),A      ; store mixed colors
5323+ 3F22 E5                   push    HL              ; store code string address
5324+ 3F23 ED 4B 68 61          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3F27 ED 5B 6A 61          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3F2B 1C                   inc     E               ; Length + 1
5327+ 3F2C CD 31 3F             call    GPNT            ; print on G2
5328+ 3F2F E1                   pop     HL              ; recover HL
5329+ 3F30 C9                   ret                     ; return to caller
5330+ 3F31 D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F32                      ; calculate VRAM address of first char
5332+ 3F32 3A 62 61             LD      A,(GX)          ; load X
5333+ 3F35 6F                   ld      L,A             ;
5334+ 3F36 26 00                ld      H,0             ; HL = X
5335+ 3F38 29                   add     HL,HL           ;
5336+ 3F39 29                   add     HL,HL           ;
5337+ 3F3A 29                   add     HL,HL           ; X=X*8
5338+ 3F3B 3A 64 61             ld      A,(GY)          ; load Y
5339+ 3F3E 57                   ld      D,A             ; move it into D
5340+ 3F3F 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F41 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F42 22 66 61             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F45 D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F46 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F47 C8                   ret     Z               ; End of string - return
5346+ 3F48 D5                   push    DE              ; store chars counter
5347+ 3F49                      ; calculate dest address in color vram
5348+ 3F49 2A 66 61             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F4C 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F4F 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F50 F3                   di                      ; disable INTs
5352+ 3F51                      ; send color settings
5353+ 3F51 CD 66 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F54 3A 5E 61             ld      A,(MIXCOL)      ; load color settings
5355+ 3F57 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F59 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F5B ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F5D 00                   nop                     ; wait...
5359+ 3F5E 00                   nop                     ; ...a...
5360+ 3F5F 00                   nop                     ; ...while
5361+ 3F60 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F62                      ; calculate source address
5363+ 3F62 2A 68 61             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F65 7E                   ld      A,(HL)          ; get char
5365+ 3F66 23                   inc     HL              ; increment char pointer
5366+ 3F67 22 68 61             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F6A 6F                   ld      L,A             ;
5368+ 3F6B 26 00                ld      H,$00           ; char into HL
5369+ 3F6D 29                   add     HL,HL           ;
5370+ 3F6E 29                   add     HL,HL           ;
5371+ 3F6F 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F70 11 55 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F73 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F74 EB                   ex      DE,HL           ; store address into DE
5375+ 3F75 2A 66 61     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F78 CD 66 06             call    SETVDPADRS      ; send it to VDP
5377+ 3F7B EB                   ex      DE,HL           ; restore address into HL
5378+ 3F7C 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3F7E 0D                   dec     C              ; VDP data mode
5380+ 3F7F ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3F81 00                   nop                     ; wait...
5382+ 3F82 00                   nop                     ; ...a...
5383+ 3F83 00                   nop                     ; ...while
5384+ 3F84 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3F86 FB                   ei                      ; re-enable INTs
5386+ 3F87 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3F8A 2A 66 61             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3F8D 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3F8E 22 66 61             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3F91 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3F94 CD 1F 4D             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3F97 D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3F98 D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3F99 C3 46 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3F9C
5396+ 3F9C              ; used by GPRINT to get a color argument (if present)
5397+ 3F9C 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3F9D CD D6 25             call    GETCHR          ; Get next character
5399+ 3FA0 C8                   ret     Z               ; return if nothing follows
5400+ 3FA1 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3FA4 2C                   defb    ','
5402+ 3FA5 D5                   push    DE              ; store DE
5403+ 3FA6 CD ED 32             call    GETINT          ; get value
5404+ 3FA9 CD AC 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3FAC D1                   pop     DE              ; retrieve DE
5406+ 3FAD 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3FAE C9                   ret                     ; return to caller
5408+ 3FAF
5409+ 3FAF
5410+ 3FAF              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3FAF              ; at point X,Y, using default color or, if used, with
5412+ 3FAF              ; color set by C
5413+ 3FAF              ; TMPBFR1       X
5414+ 3FAF              ; TMPBFR2       Y
5415+ 3FAF              ; TMPBFR3       COLOR
5416+ 3FAF              PNT     equ     VIDEOBUFF
5417+ 3FAF              SPA     equ     VIDEOBUFF+$02
5418+ 3FAF              SPB     equ     VIDEOBUFF+$03
5419+ 3FAF              ORGSP   equ     VIDEOBUFF+$04
5420+ 3FAF CD B6 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3FB2 CD ED 32             call    GETINT          ; get X
5422+ 3FB5 32 5E 61             ld      (TMPBFR1),A     ; store X
5423+ 3FB8 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3FBB 2C                   defb    ','
5425+ 3FBC CD ED 32             call    GETINT          ; get Y coords,
5426+ 3FBF FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3FC1 D2 A1 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3FC4 32 60 61             ld      (TMPBFR2),A     ; store Y
5429+ 3FC7 CD AB 44             call    CLRPRM          ; check if color has been passed
5430+ 3FCA 3A 62 61             ld      A,(TMPBFR3)     ; load color
5431+ 3FCD A7                   and     A               ; check if 0
5432+ 3FCE CA A1 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FD1 E5                   push    HL              ; store HL
5434+ 3FD2 C5                   push    BC              ; store BC
5435+ 3FD3 D5                   push    DE              ; store DE
5436+ 3FD4                      ; start algorithm
5437+ 3FD4 CD E7 40             call    PNTRTN          ; check if pixel is already set
5438+ 3FD7 C2 8B 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 3FDA ED 73 6A 61          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 3FDE 21 01 00             ld      HL,$0001        ; HL=1
5441+ 3FE1 22 66 61             ld      (PNT),HL        ; set PNT
5442+ 3FE4 3A 5E 61             ld      A,(TMPBFR1)     ; load starting X...
5443+ 3FE7 47                   ld      B,A             ; ...into B
5444+ 3FE8 3A 60 61             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 3FEB 4F                   ld      C,A             ; ...into C
5446+ 3FEC C5                   push    BC              ; store starting X,Y into stack
5447+ 3FED                      ; main loop
5448+ 3FED 2A 66 61     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 3FF0 7C                   ld      A,H             ; check if PNT=0
5450+ 3FF1 B5                   or      L
5451+ 3FF2 CA 87 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 3FF5 2B                   dec     HL              ; no, so decrement PNT...
5453+ 3FF6 22 66 61             ld      (PNT),HL        ; ...and store it
5454+ 3FF9 C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 3FFA CD 8F 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 3FFD 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 3FFF 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 4000 A7                   and     A               ; (reached the limit of the screen)
5459+ 4001 CA 09 40             jp      Z,PAINT1        ; yes, jump over
5460+ 4004 05                   dec     B               ; no, decrement X1...
5461+ 4005 C3 FA 3F             jp      PAINT0          ; ...and repeat
5462+ 4008 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 4009 AF           PAINT1: xor     A               ; reset A
5464+ 400A 57                   ld      D,A             ; set SA=0
5465+ 400B 5F                   ld      E,A             ; set SB=0
5466+ 400C CD 8F 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 400F 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 4011 78                   ld      A,B             ; copy X1
5469+ 4012 32 5E 61             ld      (TMPBFR1),A     ; into buffer
5470+ 4015 79                   ld      A,C             ; copy Y
5471+ 4016 32 60 61             ld      (TMPBFR2),A     ; into buffer
5472+ 4019 CD 0D 41             call    CNTPLOT         ; plot pixel X1,Y
5473+ 401C 7A                   ld      A,D             ; load SA into A
5474+ 401D A7                   and     A               ; SA=0?
5475+ 401E 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 4020 79                   ld      A,C             ; load Y
5477+ 4021 FE 01                cp      $01             ; Y>0?
5478+ 4023 DA 3C 40             jp      C,PAINT2        ; no, jump over
5479+ 4026 3D                   dec     A               ; yes, Y=Y-1
5480+ 4027 CD 90 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 402A 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 402C 0D                   dec     C               ; Y=Y-1
5483+ 402D C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 402E 0C                   inc     C               ; retrieve original Y
5485+ 402F 2A 66 61             ld      HL,(PNT)        ; load PNT
5486+ 4032 23                   inc     HL              ; increment PNT
5487+ 4033 22 66 61             ld      (PNT),HL        ; store new PNT
5488+ 4036 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 4038 57                   ld      D,A             ; ...store SA into memory
5490+ 4039 C3 4F 40             jp      PAINT3          ; jump over
5491+ 403C 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 403D 1F                   rra                     ; check if SA=1
5493+ 403E 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 4040 79                   ld      A,C             ; load Y
5495+ 4041 FE 01                cp      $01             ; Y>0?
5496+ 4043 DA 4F 40             jp      C,PAINT3        ; no, jump over
5497+ 4046 3D                   dec     A               ; Y=Y-1
5498+ 4047 CD 90 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 404A CA 4F 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 404D AF                   xor     A               ; pixel is on, so...
5501+ 404E 57                   ld      D,A             ; ...set SA=0
5502+ 404F 7B           PAINT3: ld      A,E             ; check if...
5503+ 4050 A7                   and     A               ; SB=0
5504+ 4051 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 4053 79                   ld      A,C             ; load Y
5506+ 4054 FE BF                cp      $BF             ; Y<191?
5507+ 4056 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 4058 3C                   inc     A               ; Y=Y+1
5509+ 4059 CD 90 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 405C 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 405E 0C                   inc     C               ; Y=Y+1
5512+ 405F C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 4060 0D                   dec     C               ; retrieve original Y
5514+ 4061 2A 66 61             ld      HL,(PNT)        ; PNT
5515+ 4064 23                   inc     HL              ; PNT=PNT+1
5516+ 4065 22 66 61             ld      (PNT),HL        ; store PNT
5517+ 4068 3E 01                ld      A,$01           ; SB=1
5518+ 406A 5F                   ld      E,A             ; set SB
5519+ 406B C3 80 40             jp      PAINT5          ; jump over
5520+ 406E 7B           PAINT4: ld      A,E             ; load SB
5521+ 406F 1F                   rra                     ; check if SB=1
5522+ 4070 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 4072 79                   ld      A,C             ; load Y
5524+ 4073 FE BF                cp      $BF             ; Y<191?
5525+ 4075 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 4077 3C                   inc     A               ; Y=Y+1
5527+ 4078 CD 90 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 407B CA 80 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 407E AF                   xor     A               ; pixel is on, so...
5530+ 407F 5F                   ld      E,A             ; ...set SB=0
5531+ 4080 04           PAINT5: inc     B               ; X1=X1+1
5532+ 4081 CA ED 3F             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 4084 C3 0C 40             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 4087 ED 7B 6A 61  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 408B D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 408C C1                   pop     BC              ; retrieve BC
5537+ 408D E1                   pop     HL              ; retrieve HL
5538+ 408E C9                   ret                     ; return to caller
5539+ 408F 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 4090 32 60 61     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 4093 78                   ld      A,B             ; copy X1 into A
5542+ 4094 32 5E 61             ld      (TMPBFR1),A     ; store X1
5543+ 4097 C5                   push    BC              ; save X1,Y
5544+ 4098 D5                   push    DE
5545+ 4099 CD E7 40             call    PNTRTN          ; check if pixel is set/reset
5546+ 409C D1                   pop     DE
5547+ 409D C1                   pop     BC              ; retrieve X1,Y
5548+ 409E C9                   ret                     ; return to caller
5549+ 409F
5550+ 409F
5551+ 409F              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 409F CD B6 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 40A2 CD 8D 23             call    CHKSYN          ; make sure "(" follows
5554+ 40A5 28                   defb    '('
5555+ 40A6 CD ED 32             call    GETINT          ; get X coords.
5556+ 40A9 32 5E 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 40AC CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5558+ 40AF 2C                   defb    ','
5559+ 40B0 CD ED 32             call    GETINT          ; get Y coords,
5560+ 40B3 FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 40B5 D2 A1 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 40B8 32 60 61             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 40BB CD 8D 23             call    CHKSYN          ; make sure ")" follows
5564+ 40BE 29                   defb    ')'
5565+ 40BF E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 40C0 FD E1                pop     IY              ; ...into IY
5567+ 40C2 CD E7 40             call    PNTRTN          ; check if pixel is set or reset
5568+ 40C5 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 40C7 AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 40C8 47                   ld      B,A             ; ...and B
5571+ 40C9 E1           PNTEND: pop     HL              ; drop original return point
5572+ 40CA FD E5                push    IY              ; load current string address from IY into stack
5573+ 40CC 11 52 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40CF D5                   push    DE              ; ...saved on stack
5575+ 40D0 C3 51 2E             jp      ABPASS          ; return AB
5576+ 40D3 CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40D5 F3                   di
5578+ 40D6 CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40D9 FB                   ei
5580+ 40DA CB 3F                srl     A               ; shift A...
5581+ 40DC CB 3F                srl     A               ; ...4 times...
5582+ 40DE CB 3F                srl     A               ; ...to move foreground color...
5583+ 40E0 CB 3F                srl     A               ; ...into lowest nibble
5584+ 40E2 47                   ld      B,A             ; color into B
5585+ 40E3 AF                   xor     A               ; reset MSB
5586+ 40E4 C3 C9 40             jp      PNTEND          ; return AB
5587+ 40E7 CD 5A 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 40EA 57                   ld      D,A             ; store pixel index
5589+ 40EB F3                   di                      ; disable INTs
5590+ 40EC CD 86 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 40EF FB                   ei                      ; re-enable INTs
5592+ 40F0 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 40F1 C9                   ret                     ; return to caller
5594+ 40F2
5595+ 40F2
5596+ 40F2              ; PLOT X,Y[,color]
5597+ 40F2              ; plot a pixel in graphic mode 2
5598+ 40F2 CD B6 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 40F5 CD ED 32             call    GETINT          ; get X coords.
5600+ 40F8 32 5E 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 40FB CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5602+ 40FE 2C                   defb    ','
5603+ 40FF CD ED 32             call    GETINT          ; get Y coords,
5604+ 4102 FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 4104 D2 A1 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 4107 32 60 61             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 410A CD AB 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 410D E5           CNTPLOT:push    HL              ; store HL
5609+ 410E C5                   push    BC              ; store BC
5610+ 410F D5                   push    DE              ; store DE
5611+ 4110 CD 5A 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 4113 D2 4E 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 4116 57                   ld      D,A             ; move pixel value into D
5614+ 4117 3A 62 61             ld      A,(TMPBFR3)     ; retrieve color
5615+ 411A A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 411B 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 411D F3                   di                      ; yes - so, disable INTs
5618+ 411E CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 4121 FB                   ei                      ; re-enable INTs
5620+ 4122 5F                   ld      E,A             ; store value of cell
5621+ 4123 7A                   ld      A,D             ; retrieve pixel
5622+ 4124 2F                   cpl                     ; revert bits
5623+ 4125 A3                   and     E               ; set video pixel to off
5624+ 4126 F3                   di                      ; disable INTs
5625+ 4127 CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 412A FB                   ei                      ; re-enable INTs
5627+ 412B C3 4E 41             jp      NOGD            ; leave
5628+ 412E 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 412F 87                   add     A,A             ; in the high nibble
5630+ 4130 87                   add     A,A             ; by adding A to itself
5631+ 4131 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 4132 5F                   ld      E,A             ; move it into E
5633+ 4133 F3                   di                      ; disable INTs
5634+ 4134 CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 4137 FB                   ei
5636+ 4138 B2                   or      D               ; merge new pixel preserving original pattern
5637+ 4139 F3                   di
5638+ 413A CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 413D FB                   ei
5640+ 413E CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 4140 F3                   di
5642+ 4141 CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 4144 FB                   ei
5644+ 4145 E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 4147 B3                   or      E               ; set new foreground color
5646+ 4148 F3                   di
5647+ 4149 CD 9B 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 414C FB                   ei                      ; re-enable INTs
5649+ 414D 00                   nop                     ; wait for INTs to be enabled again
5650+ 414E D1           NOGD:   pop     DE              ; retrieve DE
5651+ 414F C1                   pop     BC              ; retrieve BC
5652+ 4150 E1                   pop     HL              ; retrieve HL
5653+ 4151 C9                   ret                     ; return to caller
5654+ 4152 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 4156 08 04 02 01
5655+ 415A                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 415A
5657+ 415A
5658+ 415A              ; compute the VRAM address of the byte containing the pixel
5659+ 415A              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 415A              ; byte address is returned into HL
5661+ 415A              ; pixel is returned into A
5662+ 415A              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 415A                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 415A                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 415A 3A 60 61             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 415D FE C0                cp      $C0             ; Y>=192?
5667+ 415F D0                   ret     NC              ; yes, so leave
5668+ 4160 1E 08                ld      E,$08           ; load E with divisor
5669+ 4162 57                   ld      D,A             ; and store into D (dividend)
5670+ 4163 CD 6A 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 4166 4F                   ld      C,A             ; store remainder into C
5672+ 4167 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 4168 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 416A 3A 5E 61             ld      A,(TMPBFR1)     ; retrieve X
5675+ 416D 57                   ld      D,A             ; and move it into D (dividend)
5676+ 416E CD 6A 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 4171 4F                   ld      C,A             ; store remainder into C
5678+ 4172 7A                   ld      A,D             ; move quotient into A
5679+ 4173 87                   add     A,A             ; multiply quotient by 8
5680+ 4174 87                   add     A,A
5681+ 4175 87                   add     A,A
5682+ 4176 5F                   ld      E,A             ; store result into E
5683+ 4177 16 00                ld      D,$00           ; reset D
5684+ 4179 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 417A EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 417B 21 52 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 417E 06 00                ld      B,$00           ; reset B
5688+ 4180 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 4181 7E                   ld      A,(HL)          ; load pixel data
5690+ 4182 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 4183 37                   scf                     ; set Carry for normal exit
5692+ 4184 C9                   ret                     ; return to caller
5693+ 4185
5694+ 4185
5695+ 4185              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 4185              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 4185              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 4185              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 4185              ; the values. If color is not specified, the foreground color set
5700+ 4185              ; with COLOR will be used
5701+ 4185              X1      equ     TMPBFR1
5702+ 4185              Y1      equ     TMPBFR2
5703+ 4185              X2      equ     VIDEOBUFF
5704+ 4185              Y2      equ     VIDEOBUFF+$02
5705+ 4185              ER      equ     VIDEOBUFF+$04
5706+ 4185              E2      equ     VIDEOBUFF+$06
5707+ 4185              SX      equ     VIDEOBUFF+$08
5708+ 4185              SY      equ     VIDEOBUFF+$0A
5709+ 4185              DX      equ     VIDEOBUFF+$0C
5710+ 4185              DY      equ     VIDEOBUFF+$0E
5711+ 4185 CD B6 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 4188 CD 8D 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 418B CD 9C 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 418E CD ED 32             call    GETINT          ; get X1 coords.
5715+ 4191 32 5E 61             ld      (X1),A          ; store it into a temp buffer
5716+ 4194 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5717+ 4197 2C                   defb    ','
5718+ 4198 CD ED 32             call    GETINT          ; get Y1 coords.
5719+ 419B FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 419D D2 A1 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 41A0 32 60 61             ld      (Y1),A          ; store into a temp buffer
5722+ 41A3 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5723+ 41A6 2C                   defb    ','
5724+ 41A7 CD ED 32             call    GETINT          ; get X2 coords.
5725+ 41AA 32 66 61             ld      (X2),A          ; store it into a temp buffer
5726+ 41AD CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5727+ 41B0 2C                   defb    ','
5728+ 41B1 CD ED 32             call    GETINT          ; get Y2 coords
5729+ 41B4 FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 41B6 D2 A1 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 41B9 32 68 61             ld      (Y2),A          ; store it into a temp buffer
5732+ 41BC CD AB 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 41BF E5                   push    HL              ; store register we'll use
5734+ 41C0 D5                   push    DE
5735+ 41C1 C5                   push    BC
5736+ 41C2 ED 5B 5E 61          ld      DE,(X1)         ; load X1 and
5737+ 41C6 2A 66 61             ld      HL,(X2)         ; X2
5738+ 41C9 B7                   or      A               ; clear CARRY
5739+ 41CA ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 41CC CD 60 4D             call    absHL           ; DX=ABS(DX)
5741+ 41CF 22 72 61             ld      (DX),HL         ; store DX
5742+ 41D2 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41D5 2A 5E 61             ld      HL,(X1)
5744+ 41D8 ED 5B 66 61          ld      DE,(X2)
5745+ 41DC CD 1F 4D             call    CMP16           ; X1<X2?
5746+ 41DF CA E8 41             jp      Z,X1GR          ; no, X1=X2
5747+ 41E2 F2 E8 41             jp      P,X1GR          ; no, X1>X2
5748+ 41E5 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 41E8 ED 43 6E 61  X1GR:   ld      (SX),BC         ; store SX
5750+ 41EC ED 5B 60 61          ld      DE,(Y1)
5751+ 41F0 2A 68 61             ld      HL,(Y2)
5752+ 41F3 B7                   or      A               ; clear Carry
5753+ 41F4 ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 41F6 CD 60 4D             call    absHL           ; DY=ABS(DY)
5755+ 41F9 22 74 61             ld      (DY),HL         ; store DY
5756+ 41FC 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 41FF 2A 60 61             ld      HL,(Y1)
5758+ 4202 ED 5B 68 61          ld      DE,(Y2)
5759+ 4206 CD 1F 4D             call    CMP16           ; is Y1<Y2?
5760+ 4209 CA 12 42             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 420C F2 12 42             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 420F 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 4212 ED 43 70 61  Y1GR:   ld      (SY),BC         ; store SY
5764+ 4216 2A 74 61             ld      HL,(DY)         ; ER=DY
5765+ 4219 CD 63 4D             call    negHL           ; ER=-DY
5766+ 421C 22 6A 61             ld      (ER),HL         ; store ER
5767+ 421F 2A 72 61             ld      HL,(DX)
5768+ 4222 ED 5B 74 61          ld      DE,(DY)
5769+ 4226 CD 1F 4D             call    CMP16           ; DX>DY?
5770+ 4229 CA 35 42             jp      Z,ER2           ; no, DX=DY
5771+ 422C FA 35 42             jp      M,ER2           ; no, DX<DY
5772+ 422F 2A 72 61             ld      HL,(DX)         ; reload DX
5773+ 4232 22 6A 61             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 4235 2A 6A 61     ER2:    ld      HL,(ER)         ; load ER
5775+ 4238 CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 423A CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 423C CB 7C                bit     7,H             ; is the number negative?
5778+ 423E CA 42 42             jp      Z,STRE2         ; no, jump over
5779+ 4241 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 4242 22 6A 61     STRE2:  ld      (ER),HL         ; store ER
5781+ 4245 CD 0D 41     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 4248 2A 5E 61             ld      HL,(X1)
5783+ 424B ED 5B 66 61          ld      DE,(X2)
5784+ 424F CD 1F 4D             call    CMP16           ; X1=X2?
5785+ 4252 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 4254 2A 60 61             ld      HL,(Y1)         ; yes, so check
5787+ 4257 ED 5B 68 61          ld      DE,(Y2)         ; also Y
5788+ 425B CD 1F 4D             call    CMP16           ; Y1=Y2?
5789+ 425E CA BA 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 4261 ED 5B 6A 61  CNTDRW: ld      DE,(ER)
5791+ 4265 ED 53 6C 61          ld      (E2),DE         ; E2=ER
5792+ 4269 2A 72 61             ld      HL,(DX)
5793+ 426C CD 63 4D             call    negHL           ; DX=-DX
5794+ 426F EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 4270 CD 1F 4D             call    CMP16           ; E2>-DX?
5796+ 4273 CA 91 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 4276 FA 91 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 4279 2A 6A 61             ld      HL,(ER)         ; yes
5799+ 427C ED 5B 74 61          ld      DE,(DY)
5800+ 4280 B7                   or      A               ; clear CARRY
5801+ 4281 ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 4283 22 6A 61             ld      (ER),HL
5803+ 4286 2A 5E 61             ld      HL,(X1)
5804+ 4289 ED 5B 6E 61          ld      DE,(SX)
5805+ 428D 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 428E 22 5E 61             ld      (X1),HL
5807+ 4291 2A 6C 61     DXGR:   ld      HL,(E2)
5808+ 4294 ED 5B 74 61          ld      DE,(DY)
5809+ 4298 CD 1F 4D             call    CMP16           ; E2<DY?
5810+ 429B CA 45 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 429E F2 45 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 42A1 2A 6A 61             ld      HL,(ER)         ; yes
5813+ 42A4 ED 5B 72 61          ld      DE,(DX)
5814+ 42A8 19                   add     HL,DE           ; ER=ER+DX
5815+ 42A9 22 6A 61             ld      (ER),HL
5816+ 42AC 2A 60 61             ld      HL,(Y1)
5817+ 42AF ED 5B 70 61          ld      DE,(SY)
5818+ 42B3 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 42B4 22 60 61             ld      (Y1),HL
5820+ 42B7 C3 45 42             jp      RPTDRW          ; repeat
5821+ 42BA C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 42BB D1                   pop     DE              ; retrieve DE
5823+ 42BC E1                   pop     HL              ; retrieve HL
5824+ 42BD C9                   ret                     ; return to caller
5825+ 42BE
5826+ 42BE
5827+ 42BE              ; CIRCLE X,Y,R[,C]
5828+ 42BE              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 42BE              ; and radius R, with optional color C. If color is not specified, the
5830+ 42BE              ; foreground color set with COLOR will be used
5831+ 42BE              XC      equ     VIDEOBUFF
5832+ 42BE              YC      equ     VIDEOBUFF+$02
5833+ 42BE              RADIUS  equ     VIDEOBUFF+$04
5834+ 42BE              XI      equ     VIDEOBUFF+$06
5835+ 42BE              YI      equ     VIDEOBUFF+$08
5836+ 42BE              DC      equ     VIDEOBUFF+$0A
5837+ 42BE CD B6 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 42C1 CD 9C 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 42C4 CD ED 32             call    GETINT          ; get X coords.
5840+ 42C7 32 66 61             ld      (XC),A          ; store it into a temp buffer
5841+ 42CA CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5842+ 42CD 2C                   defb    ','
5843+ 42CE CD ED 32             call    GETINT          ; get Y coords,
5844+ 42D1 32 68 61             ld      (YC),A          ; store it into a temp buffer
5845+ 42D4 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42D7 2C                   defb    ','
5847+ 42D8 CD ED 32             call    GETINT          ; get radius
5848+ 42DB 32 6A 61             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 42DE CD AB 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 42E1 C5                   push    BC              ; store BC
5851+ 42E2 D5                   push    DE              ; store DE
5852+ 42E3 E5                   push    HL              ; store HL
5853+ 42E4 AF                   xor     A               ; clear A,
5854+ 42E5 47                   ld      B,A             ; B,
5855+ 42E6 4F                   ld      C,A             ; C,
5856+ 42E7 57                   ld      D,A             ; D,
5857+ 42E8 67                   ld      H,A             ; and H
5858+ 42E9 ED 43 6C 61          ld      (XI),BC         ; clear XI
5859+ 42ED 3A 6A 61             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 42F0 6F                   ld      L,A             ; HL now contains R
5861+ 42F1 22 6E 61             ld      (YI),HL         ; YI=RADIUS
5862+ 42F4 29                   add     HL,HL           ; R*2
5863+ 42F5 EB                   ex      DE,HL           ; put HL into DE
5864+ 42F6 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 42F9 AF                   xor     A               ; clear Carry
5866+ 42FA ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 42FC 22 70 61             ld      (DC),HL         ; store D
5868+ 42FF CD 5E 43             call    DRWCRL          ; draw initial point
5869+ 4302 ED 5B 6C 61  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 4306 2A 6E 61             ld      HL,(YI)         ; load YI
5871+ 4309 CD 1F 4D             call    CMP16           ; is YI<DI?
5872+ 430C CA 15 43             jp      Z,RPTCL1        ; no, YI=XI
5873+ 430F F2 15 43             jp      P,RPTCL1        ; no, YI>XI
5874+ 4312 C3 5A 43             jp      ENDCRL          ; yes, so we've finished
5875+ 4315 21 6C 61     RPTCL1: ld      HL,XI
5876+ 4318 34                   inc     (HL)            ; XI=XI+1
5877+ 4319 2A 70 61             ld      HL,(DC)         ; load D
5878+ 431C 7C                   ld      A,H
5879+ 431D B5                   or      L               ; is D=0? Yes, jump over
5880+ 431E CA 42 43             jp      Z,DLSZ
5881+ 4321 CB 7C                bit     7,H             ; is D<0?
5882+ 4323 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 4325 ED 5B 6E 61          ld      DE,(YI)         ; D>0
5884+ 4329 1B                   dec     DE              ; so, YI=YI-1
5885+ 432A ED 53 6E 61          ld      (YI),DE         ; store YI
5886+ 432E AF                   xor     A               ; clear Carry
5887+ 432F 2A 6C 61             ld      HL,(XI)
5888+ 4332 ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 4334 29                   add     HL,HL
5890+ 4335 29                   add     HL,HL           ; HL=HL*4
5891+ 4336 11 0A 00             ld      DE,10
5892+ 4339 19                   add     HL,DE           ; HL=HL+10
5893+ 433A ED 5B 70 61          ld      DE,(DC)         ; load D
5894+ 433E EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 433F 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 4340 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 4342 2A 6C 61     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 4345 29                   add     HL,HL
5899+ 4346 29                   add     HL,HL           ; XI=XI*4
5900+ 4347 11 06 00             ld      DE,$0006
5901+ 434A 19                   add     HL,DE
5902+ 434B ED 5B 70 61          ld      DE,(DC)
5903+ 434F EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 4350 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 4351 22 70 61     PLTCRL: ld      (DC),HL         ; store new D
5906+ 4354 CD 5E 43             call    DRWCRL          ; plot pixel
5907+ 4357 C3 02 43             jp      RPTCRL          ; repeat
5908+ 435A E1           ENDCRL: pop     HL
5909+ 435B D1                   pop     DE
5910+ 435C C1                   pop     BC
5911+ 435D C9                   ret                     ; return to caller
5912+ 435E 2A 66 61     DRWCRL: ld      HL,(XC)
5913+ 4361 ED 5B 6C 61          ld      DE,(XI)
5914+ 4365 19                   add     HL,DE           ; X=XC+XI
5915+ 4366 22 5E 61             ld      (X1),HL         ; store X
5916+ 4369 CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 436C DA 80 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 436F 2A 68 61             ld      HL,(YC)
5919+ 4372 ED 5B 6E 61          ld      DE,(YI)
5920+ 4376 19                   add     HL,DE           ; Y=YC+YI
5921+ 4377 22 60 61             ld      (Y1),HL         ; store Y
5922+ 437A CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 437D D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 4380 AF           CNTCL1: xor     A               ; clear Carry
5925+ 4381 2A 66 61             ld      HL,(XC)
5926+ 4384 ED 5B 6C 61          ld      DE,(XI)
5927+ 4388 ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 438A 22 5E 61             ld      (X1),HL         ; store X
5929+ 438D CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 4390 DA A4 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 4393 2A 68 61             ld      HL,(YC)
5932+ 4396 ED 5B 6E 61          ld      DE,(YI)
5933+ 439A 19                   add     HL,DE           ; Y=YC+YI
5934+ 439B 22 60 61             ld      (Y1),HL         ; store Y
5935+ 439E CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 43A1 D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 43A4 2A 66 61     CNTCL2: ld      HL,(XC)
5938+ 43A7 ED 5B 6C 61          ld      DE,(XI)
5939+ 43AB 19                   add     HL,DE           ; X=XC+XI
5940+ 43AC 22 5E 61             ld      (X1),HL         ; store X
5941+ 43AF CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 43B2 DA C8 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 43B5 AF                   xor     A               ; clear Carry
5944+ 43B6 2A 68 61             ld      HL,(YC)
5945+ 43B9 ED 5B 6E 61          ld      DE,(YI)
5946+ 43BD ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 43BF 22 60 61             ld      (Y1),HL         ; store Y
5948+ 43C2 CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 43C5 D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 43C8 AF           CNTCL3: xor     A               ; clear Carry
5951+ 43C9 2A 66 61             ld      HL,(XC)
5952+ 43CC ED 5B 6C 61          ld      DE,(XI)
5953+ 43D0 ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43D2 22 5E 61             ld      (X1),HL         ; store X
5955+ 43D5 CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43D8 DA EE 43             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 43DB AF                   xor     A               ; clear Carry
5958+ 43DC 2A 68 61             ld      HL,(YC)
5959+ 43DF ED 5B 6E 61          ld      DE,(YI)
5960+ 43E3 ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 43E5 22 60 61             ld      (Y1),HL         ; store Y
5962+ 43E8 CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 43EB D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 43EE 2A 66 61     CNTCL4: ld      HL,(XC)
5965+ 43F1 ED 5B 6E 61          ld      DE,(YI)
5966+ 43F5 19                   add     HL,DE           ; X=XC+YI
5967+ 43F6 22 5E 61             ld      (X1),HL         ; store X
5968+ 43F9 CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 43FC DA 10 44             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 43FF 2A 68 61             ld      HL,(YC)
5971+ 4402 ED 5B 6C 61          ld      DE,(XI)
5972+ 4406 19                   add     HL,DE           ; Y=YC+XI
5973+ 4407 22 60 61             ld      (Y1),HL         ; store Y
5974+ 440A CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 440D D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 4410 AF           CNTCL5: xor     A               ; clear Carry
5977+ 4411 2A 66 61             ld      HL,(XC)
5978+ 4414 ED 5B 6E 61          ld      DE,(YI)
5979+ 4418 ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 441A 22 5E 61             ld      (X1),HL         ; store X
5981+ 441D CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 4420 DA 34 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 4423 2A 68 61             ld      HL,(YC)
5984+ 4426 ED 5B 6C 61          ld      DE,(XI)
5985+ 442A 19                   add     HL,DE           ; Y=YC+XI
5986+ 442B 22 60 61             ld      (Y1),HL         ; store Y
5987+ 442E CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 4431 D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 4434 2A 66 61     CNTCL6: ld      HL,(XC)
5990+ 4437 ED 5B 6E 61          ld      DE,(YI)
5991+ 443B 19                   add     HL,DE           ; X=XC+YI
5992+ 443C 22 5E 61             ld      (X1),HL         ; store X
5993+ 443F CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 4442 DA 58 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 4445 AF                   xor     A               ; clear Carry
5996+ 4446 2A 68 61             ld      HL,(YC)
5997+ 4449 ED 5B 6C 61          ld      DE,(XI)
5998+ 444D ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 444F 22 60 61             ld      (Y1),HL         ; store Y
6000+ 4452 CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 4455 D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 4458 AF           CNTCL7: xor     A               ; clear Carry
6003+ 4459 2A 66 61             ld      HL,(XC)
6004+ 445C ED 5B 6E 61          ld      DE,(YI)
6005+ 4460 ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 4462 22 5E 61             ld      (X1),HL         ; store X
6007+ 4465 CD 7D 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 4468 D8                   ret     C               ; if Carry is set, X is not valid
6009+ 4469 AF                   xor     A               ; clear Carry
6010+ 446A 2A 68 61             ld      HL,(YC)
6011+ 446D ED 5B 6C 61          ld      DE,(XI)
6012+ 4471 ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 4473 22 60 61             ld      (Y1),HL         ; store Y
6014+ 4476 CD 82 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 4479 D4 0D 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 447C C9                   ret                     ; return to caller
6017+ 447D
6018+ 447D              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 447D              ; input: HL (value to check), can be negative
6020+ 447D              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 447D              ; destroys: A
6022+ 447D AF           VALIDX: xor     A               ; reset A
6023+ 447E B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 447F C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 4480 37                   scf                     ; set Carry flag to raise error
6026+ 4481 C9                   ret                     ; return to caller
6027+ 4482
6028+ 4482 AF           VALIDY: xor     A               ; reset A
6029+ 4483 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 4484 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 4486 37                   scf                     ; no, raise error by setting Carry flag
6032+ 4487 C9                   ret                     ; return to caller
6033+ 4488 7D           CNTVALY:ld      A,L
6034+ 4489 FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 448B 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 448C C9                   ret                     ; return to caller
6037+ 448D
6038+ 448D
6039+ 448D
6040+ 448D              ; cleat TMPBFR1-4 buffers before using them
6041+ 448D AF           CLRTMBF:xor     A               ; reset A
6042+ 448E E5                   push    HL              ; store HL
6043+ 448F C5                   push    BC              ; store BC
6044+ 4490 21 5E 61             ld      HL,TMPBFR1      ; address of 1st location
6045+ 4493 06 08                ld      B,$08           ; 8 locations
6046+ 4495 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 4496 23                   inc     HL              ; next location
6048+ 4497 10 FC                djnz    RPCLTMB         ; repeat
6049+ 4499 C1                   pop     BC              ; retrieve BC
6050+ 449A E1                   pop     HL              ; retrieve HL
6051+ 449B C9                   ret                     ; return to caller
6052+ 449C
6053+ 449C
6054+ 449C              ; clear VIDEOBUFF before using it as temp buffer
6055+ 449C AF           CLRVDBF:xor     A               ; clear A
6056+ 449D C5                   push    BC              ; store BC
6057+ 449E E5                   push    HL              ; store HL
6058+ 449F 06 28                ld      B,$28           ; 40 cells
6059+ 44A1 21 66 61             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 44A4 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 44A5 23                   inc     HL              ; next cell
6062+ 44A6 10 FC                djnz    RPTCVBF         ; repeat
6063+ 44A8 E1                   pop     HL              ; retrieve HL
6064+ 44A9 C1                   pop     BC              ; retrieve BC
6065+ 44AA C9                   ret                     ; return to caller
6066+ 44AB
6067+ 44AB
6068+ 44AB              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 44AB              ; commands. If not present, the default foreground color will be used
6070+ 44AB 3A 5C 61     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 44AE 32 62 61             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 44B1 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 44B2 CD D6 25             call    GETCHR          ; Get next character
6074+ 44B5 C8                   ret     Z               ; return foreground color if nothing follows
6075+ 44B6 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6076+ 44B9 2C                   defb    ','
6077+ 44BA CD ED 32             call    GETINT          ; get value
6078+ 44BD CD B0 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 44C0 32 62 61             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 44C3 C9                   ret                     ; return to caller
6081+ 44C4
6082+ 44C4
6083+ 44C4              ; no graphics mode error: raised when a graphics command is invoked
6084+ 44C4              ; out of graphic 2 mode.
6085+ 44C4 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 44C6 C3 A7 20             jp      ERROR           ; print error
6087+ 44C9
6088+ 44C9
6089+ 44C9              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 44C9              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 44C9              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 44C9              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 44C9              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 44C9              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 44C9              ; they are assumed to be 8,0,1 resp.
6096+ 44C9              PRTNUM  equ     VIDEOBUFF
6097+ 44C9              BPS     equ     PRTNUM+$01
6098+ 44C9              DATABT  equ     BPS+$02
6099+ 44C9              PARBT   equ     DATABT+$01
6100+ 44C9              STPBT   equ     PARBT+$01
6101+ 44C9              SIOBFR  equ     STPBT+$01
6102+ 44C9 CD ED 32     SERIAL: call    GETINT          ; get port #
6103+ 44CC A7                   and     A               ; is it zero?
6104+ 44CD CA A1 26             jp      Z,FCERR         ; yes, error
6105+ 44D0 FE 03                cp      $03             ; is it 1 or 2?
6106+ 44D2 D2 F2 46             jp      NC,SCERR        ; no, error
6107+ 44D5 32 66 61             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44D8 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6109+ 44DB 2C                   defb    ','
6110+ 44DC 2B                   dec     HL
6111+ 44DD CD D6 25             call    GETCHR          ; check what's following
6112+ 44E0 CA 8D 20             jp      Z,SNERR         ; error if nothing follows
6113+ 44E3 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 44E5 CD A6 26             call    ATOH            ; get bps (returned into DE)
6115+ 44E8 18 0F                jr      CHKZSER         ; jump over
6116+ 44EA CD 67 2A     SERVAR: call    GETNUM          ; get number
6117+ 44ED CD 74 38             call    TSTSGN          ; check value
6118+ 44F0 FA A1 26             jp      M,FCERR         ; negative - illegal function call
6119+ 44F3 3A B5 61             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 44F6 CD 1C 39             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 44F9 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 44FA B3                   or      E               ; check if bps=0
6123+ 44FB 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 44FD                      ; if baud rate is 0, then close the serial comm.
6125+ 44FD 3A 66 61     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 4500 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 4501 C6 22                add     SIO_CA          ; find correct channel
6128+ 4503 4F                   ld      C,A             ; store serial channel
6129+ 4504 F3                   di                      ; disable INTs
6130+ 4505 AF                   xor     A               ; reset A
6131+ 4506 16 01                ld      D,$01           ; start from WR1
6132+ 4508 06 05                ld      B,$05           ; 5 registers
6133+ 450A ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 450C ED 79                out     (C),A           ; reset register
6135+ 450E 14                   inc     D               ; next register
6136+ 450F 10 F9                djnz    RPTRSSR         ; repeat
6137+ 4511 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 4513 ED 79                out     (C),A           ; send command to serial channel
6139+ 4515 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 4517 ED 79                out     (C),A           ; send command to serial channel
6141+ 4519 FB                   ei                      ; re-enable INTs
6142+ 451A E5                   push    HL              ; store HL
6143+ 451B 21 A0 61             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 451E DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 4520 CB 41                bit     0,C             ; check serial port
6146+ 4522 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 4524 CB B7                res     6,A             ; it's port 1
6148+ 4526 CB A7                res     4,A             ; remove possible error LED
6149+ 4528 CB 86                res     0,(HL)          ; disable port 1
6150+ 452A C3 33 45             jp      SERLED          ; jump over
6151+ 452D CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 452F CB AF                res     5,A             ; remove possible error LED
6153+ 4531 CB 8E                res     1,(HL)          ; disable port 2
6154+ 4533 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 4535 E1                   pop     HL              ; retrieve HL
6156+ 4536 C9                   ret                     ; return to caller
6157+ 4537                      ; check if bps=1, meaning reactivate RX on serial
6158+ 4537 7A           CNTSER: ld      A,D
6159+ 4538 B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 4539 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 453B 7B                   ld      A,E             ; then by checking that
6162+ 453C FE 01                cp      $01             ; E=1
6163+ 453E 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 4540 3A 66 61             ld      A,(PRTNUM)      ; load port number
6165+ 4543 57                   ld      D,A             ; store port on D
6166+ 4544 3A A0 61             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 4547 A2                   and     D               ; check status
6168+ 4548 CA F2 46             jp      Z,SCERR         ; port not open, raise error
6169+ 454B F3                   di                      ; disable INTs
6170+ 454C 7A                   ld      A,D             ; move port # into A
6171+ 454D 5F                   ld      E,A             ; and also into E
6172+ 454E 87                   add     A
6173+ 454F 87                   add     A               ; move A to left times 2
6174+ 4550 57                   ld      D,A             ; move value into D
6175+ 4551 3A A0 61             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 4554 B2                   or      D               ; re-enable RX
6177+ 4555 32 A0 61             ld      (SERIALS_EN),A  ; store new serial status
6178+ 4558 7B                   ld      A,E             ; recover port #
6179+ 4559 3D                   dec     A               ; check port
6180+ 455A 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 455C CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 455F DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 4561 CB A7                res     4,A             ; remove error LED
6184+ 4563 C3 6D 45             jp      RXEND           ; terminate setting
6185+ 4566 CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 4569 DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 456B CB AF                res     5,A             ; remove error LED
6188+ 456D D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 456F FB                   ei                      ; re-enable INTs
6190+ 4570 C9                   ret                     ; return to caller
6191+ 4571                      ; set serial port comm.
6192+ 4571 D5           CNTSER2:push    DE              ; store BPS
6193+ 4572 3A 66 61             ld      A,(PRTNUM)      ; load port number
6194+ 4575 57                   ld      D,A             ; move port # into D
6195+ 4576 3A A0 61             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 4579 A2                   and     D               ; by ANDing A with D
6197+ 457A D1                   pop     DE              ; retrieve BPS
6198+ 457B CA 83 45             jp      Z,CNTSER3       ; not open, continue
6199+ 457E 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 4580 C3 A7 20             jp      ERROR           ; and leave
6201+ 4583 E5           CNTSER3:push    HL              ; store HL
6202+ 4584 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 4587 CD 1F 4D             call    CMP16           ; is bps<=57,600?
6204+ 458A E1                   pop     HL              ; but first, recover HL
6205+ 458B DA F2 46             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 458E ED 53 67 61          ld      (BPS),DE        ; store bps
6207+ 4592 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 4593 CD D6 25             call    GETCHR          ; Get next character
6209+ 4596 CA CE 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 4599 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6211+ 459C 2C                   defb    ','
6212+ 459D CD ED 32             call    GETINT          ; get data bits
6213+ 45A0 FE 05                cp      $05             ; is it <5?
6214+ 45A2 DA F2 46             jp      C,SCERR         ; yes, error
6215+ 45A5 FE 09                cp      $09             ; is it >=9?
6216+ 45A7 D2 A1 26             jp      NC,FCERR        ; yes, error
6217+ 45AA 32 69 61             ld      (DATABT),A      ; store data bits
6218+ 45AD CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6219+ 45B0 2C                   defb    ','
6220+ 45B1 CD ED 32             call    GETINT          ; get parity bits
6221+ 45B4 BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 45B7 D2 F2 46             jp      NC,SCERR        ; no, error
6223+ 45BA 32 6A 61             ld      (PARBT),A       ; store parity
6224+ 45BD CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6225+ 45C0 2C                   defb    ','
6226+ 45C1 CD ED 32             call    GETINT          ; get stop bits
6227+ 45C4 FE 03                cp      $03             ; is it >=3?
6228+ 45C6 D2 F2 46             jp      NC,SCERR        ; yes, error
6229+ 45C9 32 6B 61             ld      (STPBT),A       ; store stop bits
6230+ 45CC 18 0D                jr      SETSER          ; jump to set serial
6231+ 45CE 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45D0 32 69 61             ld      (DATABT),A
6233+ 45D3 AF                   xor     A               ; no parity bit
6234+ 45D4 32 6A 61             ld      (PARBT),A
6235+ 45D7 3C                   inc     A               ; 1 bit for stop
6236+ 45D8 32 6B 61             ld      (STPBT),A
6237+ 45DB                      ; check if bps are legal
6238+ 45DB E5           SETSER: push    HL              ; store HL
6239+ 45DC D5                   push    DE              ; store DE
6240+ 45DD DD E5                push    IX              ; store IX
6241+ 45DF DD 21 CD 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 45E3 06 0B                ld      B,$0B           ; 11 items
6243+ 45E5 0E 00                ld      C,$00           ; reset pointer
6244+ 45E7 2A 67 61     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 45EA DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 45ED DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 45F0 CD 1F 4D             call    CMP16           ; is it equal?
6248+ 45F3 CA 00 46             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 45F6 DD 23                inc     IX
6250+ 45F8 DD 23                inc     IX              ; no, go to next entry
6251+ 45FA 0C                   inc     C               ; increment pointer
6252+ 45FB 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 45FD C3 EE 46             jp      SCERR1          ; if nothing found, raise an error
6254+ 4600              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 4600                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 4600                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 4600                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 4600 F3                   di                      ; disable INTs
6259+ 4601 06 00                ld      B,$00           ; reset B
6260+ 4603 21 E3 46             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 4606 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 4607 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 4609 3A 66 61             ld      A,(PRTNUM)      ; load port number
6264+ 460C 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 460D DA 11 46             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 4610 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 4611 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 4613                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 4613 ED 79                out     (C),A           ; configure CTC channel
6270+ 4615 7E                   ld      A,(HL)          ; load CTC divider
6271+ 4616 ED 79                out     (C),A           ; send divider
6272+ 4618                      ; configure SIO
6273+ 4618 21 36 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 461B 11 6C 61             ld      DE,SIOBFR       ; into a temp buffer
6275+ 461E 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 4621 ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 4623 3A 71 61             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 4626 47                   ld      B,A             ; move it into B
6279+ 4627 3A 69 61             ld      A,(DATABT)      ; load DATA bits
6280+ 462A FE 05                cp      $05             ; is it 5 bits?
6281+ 462C 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 462E CB B0                res     6,B
6283+ 4630 CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 4632 18 19                jr      SETPAR          ; jump to set parity
6285+ 4634 FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 4636 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 4638 CB F0                set     6,B
6288+ 463A CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 463C 18 0F                jr      SETPAR          ; jump to set parity
6290+ 463E FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 4640 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 4642 CB B0                res     6,B
6293+ 4644 CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 4646 C3 4D 46             jp      SETPAR          ; jump to set parity
6295+ 4649 CB F0        BITS8:  set     6,B
6296+ 464B CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 464D 21 A1 61     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 4650 3A 66 61             ld      A,(PRTNUM)      ; check serial port number
6299+ 4653 3D                   dec     A               ; is it port #1?
6300+ 4654 CA 58 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 4657 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 4658 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 4659 32 71 61             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 465C E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 465E 87                   add     A,A             ; shift left times 1
6306+ 465F 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 4660 3A 6B 61             ld      A,(STPBT)       ; load STOP bits
6308+ 4663 87                   add     A,A
6309+ 4664 87                   add     A,A             ; 2 left shifts
6310+ 4665 47                   ld      B,A             ; move forming byte into B
6311+ 4666 3A 6A 61             ld      A,(PARBT)       ; load PARITY setting
6312+ 4669 A7                   and     A               ; is it 0?
6313+ 466A CA 75 46             jp      Z,STRPAR        ; yes, jump over
6314+ 466D CB C0                set     0,B             ; set PARITY on
6315+ 466F 3D                   dec     A               ; is parity ODD?
6316+ 4670 CA 75 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 4673 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 4675 3A 6F 61     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 4678 E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 467A B0                   or      B               ; set new STOP & PARITY bits
6321+ 467B 32 6F 61             ld      (SIOBFR+3),A    ; store new value
6322+ 467E                      ;set up TX and RX:
6323+ 467E                      ; the followings are settings for channel A
6324+ 467E 21 6C 61             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 4681 06 06                ld      B,$06           ; 6 bytes to send
6326+ 4683 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 4685 3A 66 61             ld      A,(PRTNUM)      ; load port number
6328+ 4688 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 4689 DA 8D 46             jp      C,SRLCNT        ; port 1, continue
6330+ 468C 0C                   inc     C               ; port 2, increment address port into C
6331+ 468D ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 468F                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 468F 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 4691 51                   ld      D,C             ; store port address into D
6335+ 4692 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 4694 ED B3                otir                    ; send bytes to SIO
6337+ 4696                      ; the following are settings for selected channel
6338+ 4696 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 4698 4A                   ld      C,D             ; retrieve port address
6340+ 4699 ED 79                out     (C),A
6341+ 469B 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 469D                                              ; buffer overrun is special condition
6343+ 469D ED 79                out     (C),A
6344+ 469F 21 A0 61             ld      HL,SERIALS_EN
6345+ 46A2 3A 66 61             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 46A5 3D                   dec     A               ; channel A?
6347+ 46A6 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 46A8 CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 46AB CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 46AD CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 46AF                      ; back to normal running
6352+ 46AF FB                   ei                      ; re-enable INTs
6353+ 46B0 DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 46B2 CB F7                set     6,A             ; set status LED on
6355+ 46B4 CB A7                res     4,A             ; set error LED off
6356+ 46B6 18 0E                jr      EXNRM           ; leave
6357+ 46B8 CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 46BB CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 46BD CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 46BF                      ; back to normal running
6361+ 46BF FB                   ei                      ; re-enable INTs
6362+ 46C0 DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 46C2 CB FF                set     7,A             ; set status LED on
6364+ 46C4 CB AF                res     5,A             ; set error LED off
6365+ 46C6 D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 46C8 DD E1                pop     IX              ; retrieve IX
6367+ 46CA D1                   pop     DE              ; retrieve DE
6368+ 46CB E1                   pop     HL              ; retrieve HL
6369+ 46CC C9                   ret                     ; return to caller
6370+ 46CD
6371+ 46CD              ; allowed bps (Bauds per second)
6372+ 46CD 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46D1 80 70 00 4B
6372+ 46D5 40 38 80 25
6372+ 46D9 C0 12 10 0E
6372+ 46DD 60 09 B0 04
6372+ 46E1 58 02
6373+ 46E3              ; corresponding CTC divider
6374+ 46E3 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 46E7 08 0C 18 20
6374+ 46EB 30 60 C0
6375+ 46EE
6376+ 46EE
6377+ 46EE              ; serial configuration error
6378+ 46EE DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 46F0 D1                   pop     DE              ; retrieve DE
6380+ 46F1 E1                   pop     HL              ; retrieve HL
6381+ 46F2 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 46F4 C3 A7 20             jp      ERROR           ; print error
6383+ 46F7
6384+ 46F7
6385+ 46F7              ; serial buffer overrun
6386+ 46F7 CD A3 28     SOERR:  call    PRNTCRLF
6387+ 46FA 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 46FC C3 A7 20             jp      ERROR
6389+ 46FF
6390+ 46FF
6391+ 46FF              ; check for direct mode:
6392+ 46FF              ; Z is set if in direct mode, reset otherwise
6393+ 46FF E5           DIRMOD: push    HL              ; Save code string address
6394+ 4700 2A 08 60             ld      HL,(LINEAT)     ; Get current line number
6395+ 4703 23                   inc     HL              ; -1 means direct statement
6396+ 4704 7C                   ld      A,H
6397+ 4705 B5                   or      L
6398+ 4706 E1                   pop     HL              ; Restore code string address
6399+ 4707 C9                   ret
6400+ 4708
6401+ 4708
6402+ 4708              ; HELP lists the line program where an error occured
6403+ 4708 CD FF 46     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 470B C2 21 47             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 470E E5                   push    HL              ; store HL
6406+ 470F 2A 0A 60             ld      HL,(HLPLN)      ; load HELP line
6407+ 4712 23                   inc     HL              ; increment HL
6408+ 4713 7C                   ld      A,H
6409+ 4714 B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 4715 E1                   pop     HL
6411+ 4716 CA 21 47             jp      Z,HLPERR        ; no line found, raise error
6412+ 4719 ED 5B 0A 60          ld      DE,(HLPLN)      ; recover line
6413+ 471D C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 471E C3 23 24             jp      LST01H          ; jump to list line
6415+ 4721 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 4723 C3 A7 20             jp      ERROR           ; raise error
6417+ 4726
6418+ 4726
6419+ 4726              ; KEY command to list/modify function keys and auto-repeat
6420+ 4726 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 4727 CD D6 25             call    GETCHR          ; Get next character
6422+ 472A CA AA 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 472D                      ; change FN keys
6424+ 472D CD ED 32             call    GETINT          ; get a number
6425+ 4730 A7                   and     A               ; is it 0?
6426+ 4731 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 4733 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 4734 D5                   push    DE              ; store HL & DE
6429+ 4735 21 7B 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 4738 11 0C 60             ld      DE,KEYDEL       ; pointer to destination
6431+ 473B 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 473E ED B0                ldir                    ; restore default texts
6433+ 4740 D1                   pop     DE              ; retrieve DE
6434+ 4741 E1                   pop     HL              ; retrieve HL
6435+ 4742 C9                   ret                     ; return to caller
6436+ 4743 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 4745 D2 5D 48             jp      NC,SETREP       ; yes - jump over
6438+ 4748 3D                   dec     A               ; FN key in range 0~7
6439+ 4749 87                   add     A,A             ; multiply A...
6440+ 474A 87                   add     A,A             ; ... times 4...
6441+ 474B 87                   add     A,A             ; ... to get the correct...
6442+ 474C 87                   add     A,A             ; ... offset fo FN key text
6443+ 474D 32 5E 61             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 4750 AF                   xor     A               ; ...in a...
6445+ 4751 32 5F 61             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 4754 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6447+ 4757 2C                   defb    ','
6448+ 4758 44 4D                ld      BC,HL           ; copy address into BC
6449+ 475A CD 79 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 475D E5                   push    HL              ; store string pointer
6451+ 475E 3A ED 60             ld      A,(TYPE)        ; Get variable type
6452+ 4761 B7                   or      A               ; Is it a string variable?
6453+ 4762 CA 8D 20             jp      Z,SNERR         ; no - syntax error
6454+ 4765 CD B2 30             call    GSTRCU          ; Current string to pool
6455+ 4768 CD C3 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 476B 7B                   ld      A,E             ; copy length into A
6457+ 476C FE 11                cp      $11             ; is length > 16?
6458+ 476E DA 73 47             jp      C,DECLN1        ; no, jump over
6459+ 4771 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 4773 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 4775 93                   sub     E               ; ...null chars needed to fill up...
6462+ 4776 57                   ld      D,A             ; ...the FN key text
6463+ 4777 C5                   push    BC              ; store address of string
6464+ 4778 ED 4B 5E 61          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 477C 21 0E 60             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 477F 09                   add     HL,BC           ; get corrected address
6467+ 4780 C1                   pop     BC              ; retrieve address of string chars
6468+ 4781 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 4782 FE 0D                cp      CR              ; return?
6470+ 4784 CA 91 47             jp      Z,CPKEY2        ; yes, store char
6471+ 4787 FE 7B                cp      $7B             ; if char > "z" ?
6472+ 4789 D2 8D 20             jp      NC,SNERR        ; yes - syntax error
6473+ 478C FE 20                cp      $20             ; is char < space?
6474+ 478E DA 8D 20             jp      C,SNERR         ; yes - syntax error
6475+ 4791 FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 4793 DA 98 47             jp      C,CPKEY3        ; no, continue
6477+ 4796 E6 5F                and     %01011111       ; set letters to uppercase
6478+ 4798 77           CPKEY3: ld      (HL),A          ; store char
6479+ 4799 23                   inc     HL              ; next string char
6480+ 479A 03                   inc     BC              ; next free cell
6481+ 479B 1D                   dec     E               ; decrement E
6482+ 479C 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 479E AF                   xor     A               ; null char
6484+ 479F 14                   inc     D               ; +1 to decrement below
6485+ 47A0 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 47A1 CA A8 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 47A4 77                   ld      (HL),A          ; store it
6488+ 47A5 23                   inc     HL              ; next cell
6489+ 47A6 18 F8                jr      CPKEY1          ; repeat
6490+ 47A8 E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 47A9 C9                   ret                     ; return to caller
6492+ 47AA                                              ; list FN keys
6493+ 47AA E5           LSTKEYS:push    HL              ; Save code string address
6494+ 47AB 2A 08 60             ld      HL,(LINEAT)     ; Get current line number
6495+ 47AE 23                   inc     HL              ; -1 means direct statement
6496+ 47AF 7C                   ld      A,H
6497+ 47B0 B5                   or      L
6498+ 47B1 E1                   pop     HL              ; Restore code string address
6499+ 47B2 C2 8D 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 47B5 E5                   push    HL              ; store HL
6501+ 47B6 D5                   push    DE              ; store DE
6502+ 47B7 21 0E 60             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 47BA 0E 01                ld      C,$01           ; 8 function keys
6504+ 47BC 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 47BE 11 7F 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 47C1 CD 4E 48             call    PRTCKEY         ; print it
6507+ 47C4 79                   ld      A,C             ; load FN key
6508+ 47C5 C6 30                add     $30             ; get number in ASCI code
6509+ 47C7 CD 98 23             call    OUTC            ; print it
6510+ 47CA 11 84 48             ld      DE,CHKEY2       ; message ": ""
6511+ 47CD CD 4E 48             call    PRTCKEY         ; print it
6512+ 47D0 3E 01                ld      A,$01           ; " opened
6513+ 47D2 32 5E 61             ld      (TMPBFR1),A
6514+ 47D5 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47D6 A7                   and     A               ; is it zero?
6516+ 47D7 CA EA 47             jp      Z,CNTLTK        ; yes, go next char
6517+ 47DA CD 36 48             call    OPNQT           ; check if quotes are opened
6518+ 47DD FE 22                cp      $22             ; check if char is "?
6519+ 47DF CA FF 47             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 47E2 FE 0D                cp      CR              ; is it a CR?
6521+ 47E4 CA FF 47             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 47E7 CD 98 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 47EA 23           CNTLTK: inc     HL              ; next char
6524+ 47EB 10 E8                djnz    LDKEY           ; continue until finished
6525+ 47ED CD 24 48             call    CLSQT           ; check if quotes are still open
6526+ 47F0 3E 0D                ld      A,CR            ; go next line
6527+ 47F2 CD 98 23             call    OUTC            ; print it
6528+ 47F5 0C                   inc     C               ; next FN key
6529+ 47F6 79                   ld      A,C             ; check if...
6530+ 47F7 FE 09                cp      $09             ; finished keys?
6531+ 47F9 DA BC 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 47FC D1                   pop     DE              ; retrieve DE
6533+ 47FD E1                   pop     HL              ; retrieve HL
6534+ 47FE C9                   ret                     ; return to caller
6535+ 47FF E5           PRTCHR: push    HL              ; store HL
6536+ 4800 CD 24 48             call    CLSQT           ; check if quotes are closed
6537+ 4803 3E 2B                ld      A,'+'           ; '+' char
6538+ 4805 CD 98 23             call    OUTC            ; print it
6539+ 4808 11 87 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 480B CD 4E 48             call    PRTCKEY         ; print it
6541+ 480E E1                   pop     HL              ; recover HL
6542+ 480F 23                   inc     HL              ; next char
6543+ 4810 05                   dec     B               ; increment char counter
6544+ 4811 11 8D 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 4814 7E                   ld      A,(HL)          ; load char
6546+ 4815 FE 0D                cp      CR              ; is it a RETURN?
6547+ 4817 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 4819 11 90 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 481C CD 4E 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 481F 3E 29                ld      A,')'           ; char )
6551+ 4821 C3 E7 47             jp      PRTK3           ; continue
6552+ 4824 F5           CLSQT:  push    AF              ; store A
6553+ 4825 3A 5E 61             ld      A,(TMPBFR1)     ; quote status
6554+ 4828 A7                   and     A               ; are they closed?
6555+ 4829 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 482B 3E 22                ld      A,$22           ; no, so close them
6557+ 482D CD 98 23             call    OUTC            ; print "
6558+ 4830 AF                   xor     A               ; set quotes
6559+ 4831 32 5E 61             ld      (TMPBFR1),A     ; as closed
6560+ 4834 F1           CLSQT1: pop     AF              ; retrieve A
6561+ 4835 C9                   ret                     ; return to caller
6562+ 4836 F5           OPNQT:  push    AF              ; store A
6563+ 4837 3A 5E 61             ld      A,(TMPBFR1)     ; quote status
6564+ 483A A7                   and     A               ; are they open?
6565+ 483B 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 483D 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 483F CD 98 23             call    OUTC            ; print it
6568+ 4842 3E 22                ld      A,$22           ; and then open quotes
6569+ 4844 CD 98 23             call    OUTC            ; print them
6570+ 4847 3E 01                ld      A,$01           ; set quotes
6571+ 4849 32 5E 61             ld      (TMPBFR1),A     ; as opened
6572+ 484C F1           OPNQT1: pop     AF              ; retrieve A
6573+ 484D C9                   ret                     ; return to caller
6574+ 484E F5           PRTCKEY:push    AF              ; store original char
6575+ 484F 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 4850 A7                   and     A               ; is it 0?
6577+ 4851 CA 5B 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 4854 CD 98 23             call    OUTC            ; no, print char
6579+ 4857 13                   inc     DE              ; next char
6580+ 4858 C3 4F 48             jp      PRTK1           ; repeat
6581+ 485B F1           PRTEND: pop     AF              ; retrieve AF
6582+ 485C C9                   ret                     ; return to caller
6583+ 485D FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 485F C2 8D 20             jp      NZ,SNERR        ; no, raise an error
6585+ 4862 CD 8D 23             call    CHKSYN          ; Check for comma
6586+ 4865 2C                   defb    ','
6587+ 4866 CD ED 32             call    GETINT          ; get a number
6588+ 4869 32 5E 61             ld      (TMPBFR1),A     ; store it
6589+ 486C CD 8D 23             call    CHKSYN          ; Check for comma
6590+ 486F 2C                   defb    ','
6591+ 4870 CD ED 32             call    GETINT          ; get another number
6592+ 4873 E5                   push    HL              ; store HL
6593+ 4874 21 0D 60             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 4877 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 4878 2B                   dec     HL              ; previous cell
6596+ 4879 3A 5E 61             ld      A,(TMPBFR1)     ; retrieve value
6597+ 487C 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 487D E1                   pop     HL              ; retrieve HL
6599+ 487E C9                   ret
6600+ 487F 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 4883 00
6601+ 4884 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 4887 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 488B 28 00
6603+ 488D 31 33 00     CHKEY4: defb    "13",0
6604+ 4890 33 34 00     CHKEY5: defb    "34",0
6605+ 4893
6606+ 4893
6607+ 4893              ; check if DOS is enabled
6608+ 4893 3A A3 61     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 4896 A7                   and     A               ; check if 0 (NOT enabled)
6610+ 4897 C0                   ret     NZ              ; return if enabled
6611+ 4898 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 489A C3 A7 20             jp      ERROR           ; raise error
6613+ 489D
6614+ 489D
6615+ 489D              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 489D              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 489D CD F0 48     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 48A0 CA BE 48             jp      Z,LOADST        ; number - load a single sector
6619+ 48A3 CD FF 46             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 48A6 C2 A2 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 48A9 CD D1 4B             call    CHKFN1          ; string - evaluate file name
6622+ 48AC CD E3 49             call    CHK1AR          ; check for ",1" argument
6623+ 48AF 22 5E 61             ld      (TMPBFR1),HL    ; store HL
6624+ 48B2 21 DF 48             ld      HL,TXTLDG       ; loading message
6625+ 48B5 CD 6F 2F             call    PRS             ; print
6626+ 48B8 CD 3E 15             call    LODFILE         ; load file into memory
6627+ 48BB C3 D3 48             jp      LDEND           ; retrieve registers and leave
6628+ 48BE 2A 5E 61     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 48C1 CD 05 49             call    GET3AR          ; get 3 arguments
6630+ 48C4 22 5E 61             ld      (TMPBFR1),HL    ; store HL
6631+ 48C7 CD 4B 10             call    CF_SETSTR
6632+ 48CA CD 8D 10             call    CF_RD_SEC       ; read sector
6633+ 48CD 38 0B                jr      C,LDERR
6634+ 48CF CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6635+ 48D2 AF                   xor     A               ; clear Carry
6636+ 48D3 2A 5E 61     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6637+ 48D6 DA DC 49             jp      C,DOS_ERR       ; jump if DOS error
6638+ 48D9 C9                   ret                     ; return to caller
6639+ 48DA 1E 40        LDERR:  ld      E,D4            ; load error
6640+ 48DC C3 A7 20             jp      ERROR
6641+ 48DF 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6641+ 48E3 69 6E 67 20
6641+ 48E7 66 69 6C 65
6641+ 48EB 2E 2E 2E 0D
6641+ 48EF 00
6642+ 48F0
6643+ 48F0
6644+ 48F0              ; common code for LOAD/SAVE to check the type of operation required
6645+ 48F0              ; (load/save a file or a single sector)
6646+ 48F0              ; returns Z if argument is a number, NZ if it's a string
6647+ 48F0 CD 93 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6648+ 48F3 2B                   dec     HL              ; dec 'cos GETCHR INCs
6649+ 48F4 CD D6 25             call    GETCHR          ; check if something follows
6650+ 48F7 CA 8D 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6651+ 48FA 22 5E 61             ld      (TMPBFR1),HL    ; save current code string pointer
6652+ 48FD CD 79 2A             call    EVAL            ; Evaluate expression
6653+ 4900 3A ED 60             ld      A,(TYPE)        ; Get variable type
6654+ 4903 B7                   or      A               ; Is it a string variable?
6655+ 4904 C9                   ret                     ; return to caller
6656+ 4905
6657+ 4905
6658+ 4905              ; shared code between LOAD and SAVE
6659+ 4905              ; get 3 arguments after the command LOAD or SAVE
6660+ 4905              ; and load them into appropriate registers
6661+ 4905 2A 5E 61     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6662+ 4908 CD ED 32             call    GETINT          ; get 1st pointer
6663+ 490B 32 F6 60             ld      (TMPDBF),A      ; store it into a temp buffer
6664+ 490E CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6665+ 4911 2C                   defb    ','
6666+ 4912 CD ED 32             call    GETINT          ; get 2nd pointer
6667+ 4915 32 F7 60             ld      (TMPDBF+1),A    ; store it into a temp buffer
6668+ 4918 CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6669+ 491B 2C                   defb    ','
6670+ 491C CD ED 32             call    GETINT          ; get 3rd pointer
6671+ 491F 32 F8 60             ld      (TMPDBF+2),A    ; store it into a temp buffer
6672+ 4922 CD 09 10             call    CF_INIT         ; init CF card
6673+ 4925 DA A5 20             jp      C,NRERR         ; error if device not available/ready
6674+ 4928 3A F6 60             ld      A,(TMPDBF)      ; retrieve 1st pointer
6675+ 492B 4F                   ld      C,A
6676+ 492C 3A F7 60             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6677+ 492F 47                   ld      B,A
6678+ 4930 3A F8 60             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6679+ 4933 5F                   ld      E,A
6680+ 4934 16 00                ld      D,$00           ; set disk
6681+ 4936 C9                   ret                     ; return to caller
6682+ 4937
6683+ 4937
6684+ 4937              ; save a file onto the disk
6685+ 4937 CD 93 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6686+ 493A 2B                   dec     HL              ; dec 'cos GETCHR INCs
6687+ 493B CD D6 25             call    GETCHR          ; check if something follows
6688+ 493E CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6689+ 4941 22 5E 61             ld      (TMPBFR1),HL    ; save current code string pointer
6690+ 4944 CD 79 2A             call    EVAL            ; Evaluate expression
6691+ 4947 3A ED 60             ld      A,(TYPE)        ; Get variable type
6692+ 494A B7                   or      A               ; Is it a string variable?
6693+ 494B CA 92 49             jp      Z,SAVEST        ; no - load a single sector
6694+ 494E CD D1 4B             call    CHKFN1          ; yes, evaluate string
6695+ 4951 3E 80                ld      A,$80           ; set BAS for file type
6696+ 4953 32 0D 61             ld      (TPBF4),A
6697+ 4956 2B                   dec     HL              ; dec 'cos GETCHR INCs
6698+ 4957 CD D6 25             call    GETCHR          ; check if something follows
6699+ 495A 28 21                jr      Z,SAVE1         ; no, jump over
6700+ 495C CD 8D 23             call    CHKSYN          ; yes - Make sure ',' follows
6701+ 495F 2C                   defb    ','
6702+ 4960 CD 67 2A             call    GETNUM          ; Get memory address
6703+ 4963 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
6704+ 4966 ED 53 0F 61          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6705+ 496A CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6706+ 496D 2C                   defb    ','
6707+ 496E CD 67 2A             call    GETNUM          ; Get memory address
6708+ 4971 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
6709+ 4974 ED 53 11 61          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6710+ 4978 3E 81                ld      A,$81           ; set BIN for file type
6711+ 497A 32 0D 61             ld      (TPBF4),A
6712+ 497D CD FF 46     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6713+ 4980 C2 A2 20             jp      NZ,IMERR        ; raise error if in indirect mode
6714+ 4983 22 5E 61             ld      (TMPBFR1),HL    ; store code string pointer
6715+ 4986 21 B0 49             ld      HL,TXTSVG       ; loading message
6716+ 4989 CD 6F 2F             call    PRS             ; print
6717+ 498C CD E5 13             call    SAVFILE         ; load file into memory
6718+ 498F C3 A4 49             jp      SVEND           ; retrieve registers and leave
6719+ 4992 2A F6 60     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6720+ 4995 CD 05 49             call    GET3AR          ; get 3 arguments
6721+ 4998 22 5E 61             ld      (TMPBFR1),HL    ; store code string pointer
6722+ 499B CD B9 10             call    CF_WR_SEC       ; read sector
6723+ 499E 38 0B                jr      C,SVERR
6724+ 49A0 CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6725+ 49A3 AF                   xor     A               ; clear Carry
6726+ 49A4 2A 5E 61     SVEND:  ld      HL,(TMPBFR1)    ; retrieve code string pointer
6727+ 49A7 DA DC 49             jp      C,DOS_ERR       ; jump if DOS error
6728+ 49AA C9                   ret                     ; return to caller
6729+ 49AB 1E 3E        SVERR:  ld      E,D3            ; save error
6730+ 49AD C3 A7 20             jp      ERROR
6731+ 49B0 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6731+ 49B4 6E 67 20 66
6731+ 49B8 69 6C 65 2E
6731+ 49BC 2E 2E 20 0D
6731+ 49C0 00
6732+ 49C1
6733+ 49C1
6734+ 49C1              ; FILES
6735+ 49C1              ; list files on disk
6736+ 49C1 CD 93 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6737+ 49C4 CD B4 18             call    CLRIOBF         ; clear I/O buffer
6738+ 49C7 CD 09 10             call    CF_INIT         ; init CF card
6739+ 49CA DA DC 49             jp      C,DOS_ERR       ; error if device not available/ready
6740+ 49CD C5                   push    BC              ; store BC
6741+ 49CE D5                   push    DE              ; store DE
6742+ 49CF E5                   push    HL              ; store HL
6743+ 49D0 16 01                ld      D,$01           ; print disk details and file list
6744+ 49D2 CD A7 12             call    LST_FILES       ; list files
6745+ 49D5 E1                   pop     HL
6746+ 49D6 D1                   pop     DE
6747+ 49D7 C1                   pop     BC
6748+ 49D8 DA DC 49             jp      C,DOS_ERR       ; any error?
6749+ 49DB C9                   ret                     ; return to caller
6750+ 49DC
6751+ 49DC
6752+ 49DC              ; raise a DOS error
6753+ 49DC 3A F5 60     DOS_ERR:ld      A,(DOSER)       ; load error code
6754+ 49DF 5F                   ld      E,A             ; copy into E
6755+ 49E0 C3 A7 20             jp      ERROR           ; goto error routine
6756+ 49E3
6757+ 49E3
6758+ 49E3              ; check for ",1" argument
6759+ 49E3              ; check if 1 is passed as argument after LOAD and ERASE
6760+ 49E3 AF           CHK1AR: xor     A               ; reset A
6761+ 49E4 32 0D 61             ld      (TPBF4),A       ; default setting
6762+ 49E7                                              ; (load=store file in RAM using current BASIC pointers
6763+ 49E7                                              ; (erase=quick delete)
6764+ 49E7 2B                   dec     HL              ; dec 'cause GETCHR increments
6765+ 49E8 CD D6 25             call    GETCHR          ; check if something follows
6766+ 49EB C8                   ret     Z               ; if nothing follows, return
6767+ 49EC CD 8D 23             call    CHKSYN          ; Make sure ',' follows
6768+ 49EF 2C                   defb    ','
6769+ 49F0 CD ED 32             call    GETINT          ; get a value
6770+ 49F3 3D                   dec     A               ; decrement it
6771+ 49F4 C2 8D 20             jp      NZ,SNERR        ; not '1' - raise an error
6772+ 49F7 3C                   inc     A               ; A=1
6773+ 49F8 32 0D 61             ld      (TPBF4),A       ; load=store file in RAM using address in file
6774+ 49FB                                              ; erase=full delete
6775+ 49FB C9                   ret                     ; return to caller
6776+ 49FC
6777+ 49FC
6778+ 49FC              ; ERASE "filename"
6779+ 49FC              ; erase a file from disk
6780+ 49FC CD 93 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6781+ 49FF CD C7 4B             call    CHKFLNM         ; check for a disk name
6782+ 4A02 CD E3 49             call    CHK1AR          ; check for ",1" argument
6783+ 4A05 E5                   push    HL              ; store code string pointer
6784+ 4A06 21 29 4A             ld      HL,ERSTX        ; Point to message
6785+ 4A09 CD 6F 2F             call    PRS             ; print message for init confirmation
6786+ 4A0C E1                   pop     HL              ; retrieve HL
6787+ 4A0D CD A4 4B             call    CNFREQ          ; ask for confirmation
6788+ 4A10 38 33                jr      C,ABRTDS        ; if Carry set then abort
6789+ 4A12 CD 09 10             call    CF_INIT         ; init CF card
6790+ 4A15 DA DC 49             jp      C,DOS_ERR       ; error if device not available/ready
6791+ 4A18 E5                   push    HL              ; store code string pointer
6792+ 4A19 CD FB 15             call    FIL_ERASE       ; deleted file
6793+ 4A1C E1                   pop     HL
6794+ 4A1D DA DC 49             jp      C,DOS_ERR       ; leave if error
6795+ 4A20 E5                   push    HL              ; store HL
6796+ 4A21 21 37 4A             ld      HL,ERASED       ; point to message of file deleted
6797+ 4A24 CD 6F 2F             call    PRS             ; print it
6798+ 4A27 E1                   pop     HL              ; retrieve HL
6799+ 4A28 C9                   ret                     ; return to caller
6800+ 4A29 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6800+ 4A2D 74 65 20 66
6800+ 4A31 69 6C 65 3F
6800+ 4A35 20 00
6801+ 4A37 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6801+ 4A3B 20 64 65 6C
6801+ 4A3F 65 74 65 64
6801+ 4A43 0D 00
6802+ 4A45
6803+ 4A45
6804+ 4A45              ; disk operation aborted
6805+ 4A45 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6806+ 4A47 32 5A 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6807+ 4A4A E5                   push    HL              ; store HL
6808+ 4A4B 21 53 4A             ld      HL,ABRTXT       ; Point to message
6809+ 4A4E CD 6F 2F             call    PRS             ; print message for leaving init procedure
6810+ 4A51 E1                   pop     HL              ; retrieve HL
6811+ 4A52 C9                   ret                     ; return to caller
6812+ 4A53 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6812+ 4A57 72 74 65 64
6812+ 4A5B 00
6813+ 4A5C
6814+ 4A5C
6815+ 4A5C               ; DISK command -------
6816+ 4A5C              ; execute several operations on a disk:
6817+ 4A5C              ; "F": format/rewrite Master Sector
6818+ 4A5C              ; "R": rename disk
6819+ 4A5C              ; syntax: DISK "arg1"[,arg2][,1]
6820+ 4A5C              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6821+ 4A5C CD FF 46     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6822+ 4A5F C2 A2 20             jp      NZ,IMERR        ; raise error if in indirect mode
6823+ 4A62 CD 93 48             call    CHKDOS          ; check if DOS is enabled
6824+ 4A65                      ; check first argument
6825+ 4A65 2B                   dec     HL              ; dec 'cause GETCHR increments
6826+ 4A66 CD D6 25             call    GETCHR          ; check if something follows
6827+ 4A69 CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6828+ 4A6C CD 79 2A             call    EVAL            ; Evaluate expression
6829+ 4A6F CD 6B 2A             call    TSTSTR          ; Make sure it's a string
6830+ 4A72 22 F6 60             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6831+ 4A75 CD B2 30             call    GSTRCU          ; check that a string follows
6832+ 4A78 CD C3 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6833+ 4A7B 7B                   ld      A,E
6834+ 4A7C 3D                   dec     A               ; lenght must be = 1
6835+ 4A7D 2A F6 60             ld      HL,(TPHL)       ; retrieve code string pointer
6836+ 4A80 C2 8D 20             jp      NZ,SNERR
6837+ 4A83 0A                   ld      A,(BC)          ; load command
6838+ 4A84 E6 5F                and     %01011111       ; Force upper case
6839+ 4A86 FE 46                cp      'F'             ; format command?
6840+ 4A88 CA 98 4A             jp      Z,DSKFRM        ; yes, format disk
6841+ 4A8B FE 52                cp      'R'             ; rename command?
6842+ 4A8D CA 72 4B             jp      Z,DSKRNM        ; yes, rename disk
6843+ 4A90 FE 55                cp      'U'             ; undelete command?
6844+ 4A92 CA 65 4B             jp      Z,DSKUND        ; yes undelete files
6845+ 4A95 C3 8D 20             jp      SNERR           ; nothing more - raise a syntax error
6846+ 4A98
6847+ 4A98
6848+ 4A98              ; Format disk or rewrite Master sector
6849+ 4A98              ; syntax: DISK "F","disk name"[,1]
6850+ 4A98              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6851+ 4A98              ; ",1": just rewrite Master sector without overwriting current directory
6852+ 4A98              ; Format: set up a fresh new file system, re-writing the Master sector and
6853+ 4A98              ; initializing the directory
6854+ 4A98              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6855+ 4A98              ; re-calculating disk geometry
6856+ 4A98              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6857+ 4A98              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6858+ 4A98 CD 8D 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6859+ 4A9B 2C                   defb    ','
6860+ 4A9C CD C7 4B             call    CHKFLNM         ; check for file name
6861+ 4A9F CD E3 49             call    CHK1AR          ; check if ",1" follows - saved into A
6862+ 4AA2 11 EA 4A             ld      DE,MSTTXT       ; format message
6863+ 4AA5 B7                   or      A               ; A=0?
6864+ 4AA6 20 03                jr      NZ,CFINIT       ; no, jump over
6865+ 4AA8 11 1C 4B             ld      DE,FRMTXT       ; only Master Sector
6866+ 4AAB E5           CFINIT: push    HL              ; store code string pointer
6867+ 4AAC 62                   ld      H,D             ; Point to message
6868+ 4AAD 6B                   ld      L,E
6869+ 4AAE CD 6F 2F             call    PRS             ; print message for confirmation
6870+ 4AB1 E1                   pop     HL              ; retrieve HL
6871+ 4AB2 CD A4 4B             call    CNFREQ          ; ask for confirmation
6872+ 4AB5 DA 45 4A             jp      C,ABRTDS        ; if Carry set then abort
6873+ 4AB8 CD 09 10     INITDSK:call    CF_INIT         ; init CF card
6874+ 4ABB DA DC 49             jp      C,DOS_ERR       ; error if device not available/ready
6875+ 4ABE C5                   push    BC
6876+ 4ABF D5                   push    DE
6877+ 4AC0 E5                   push    HL              ; store code string pointer
6878+ 4AC1 CD F6 10             call    DSK_INIT        ; init disk
6879+ 4AC4 E1                   pop     HL
6880+ 4AC5 D1                   pop     DE
6881+ 4AC6 C1                   pop     BC
6882+ 4AC7 30 03                jr      NC,INITFN       ; leave if no errors
6883+ 4AC9 C3 DC 49             jp      DOS_ERR         ; raise error
6884+ 4ACC E5           INITFN: push    HL              ; store code string pointer
6885+ 4ACD 3A 5E 61             ld      A,(TMPBFR1)
6886+ 4AD0 B7                   or      A               ; full formatting?
6887+ 4AD1 20 0F                jr      NZ,MSPTOK       ; no
6888+ 4AD3 21 4E 4B             ld      HL,FRMTOK       ; yes, Point to message
6889+ 4AD6 CD 6F 2F             call    PRS             ; print message for init confirmation
6890+ 4AD9 D5                   push    DE
6891+ 4ADA 16 00                ld      D,$00           ; print only disk details, no file list
6892+ 4ADC CD A7 12             call    LST_FILES       ; print details of disk and list files
6893+ 4ADF D1                   pop     DE
6894+ 4AE0 E1                   pop     HL
6895+ 4AE1 C9                   ret                     ; return to caller
6896+ 4AE2 21 02 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6897+ 4AE5 CD 6F 2F             call    PRS             ; print message for init confirmation
6898+ 4AE8 E1                   pop     HL              ; retrieve code string pointer
6899+ 4AE9 C9                   ret                     ; return to caller
6900+ 4AEA 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6900+ 4AEE 69 74 65 20
6900+ 4AF2 4D 61 73 74
6900+ 4AF6 65 72 20 53
6900+ 4AFA 65 63 74 6F
6900+ 4AFE 72 3F 20 00
6901+ 4B02 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6901+ 4B06 74 65 72 20
6901+ 4B0A 53 65 63 74
6901+ 4B0E 6F 72 20 72
6901+ 4B12 65 77 72 69
6901+ 4B16 74 74 65 6E
6901+ 4B1A 0D 00
6902+ 4B1C 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6902+ 4B20 49 4E 47 21
6902+ 4B24 21 20 44 69
6902+ 4B28 73 6B 20 63
6902+ 4B2C 6F 6E 74 65
6902+ 4B30 6E 74 73 20
6902+ 4B34 77 69 6C 6C
6902+ 4B38 20 62 65 20
6902+ 4B3C 65 72 61 73
6902+ 4B40 65 64 2E 20
6903+ 4B44 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6903+ 4B48 65 65 64 3F
6903+ 4B4C 20 00
6904+ 4B4E 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6904+ 4B52 6D 61 74 74
6904+ 4B56 69 6E 67 20
6904+ 4B5A 63 6F 6D 70
6904+ 4B5E 6C 65 74 65
6904+ 4B62 64 0D 00
6905+ 4B65
6906+ 4B65
6907+ 4B65              ; undelete files
6908+ 4B65              ; look for files marked as "deleted" and undelete them
6909+ 4B65 2B           DSKUND: dec     HL              ; dec 'cause GETCHR increments
6910+ 4B66 CD D6 25             call    GETCHR          ; check if something follows
6911+ 4B69 C2 8D 20             jp      NZ,SNERR        ; if something else, raise a syntax error
6912+ 4B6C E5                   push    HL
6913+ 4B6D CD F1 16             call    DSKUNDFL        ; undelete files
6914+ 4B70 E1                   pop     HL
6915+ 4B71 C9                   ret
6916+ 4B72
6917+ 4B72
6918+ 4B72              ; disk rename
6919+ 4B72              ; change the name of the disk w/o altering anything else
6920+ 4B72 CD 8D 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6921+ 4B75 2C                   defb    ','
6922+ 4B76 CD C7 4B             call    CHKFLNM         ; check for file name
6923+ 4B79 E5                   push    HL              ; store code string pointer
6924+ 4B7A 21 96 4B             ld      HL,RNDKTX       ; Point to message
6925+ 4B7D CD 6F 2F             call    PRS             ; print message for confirmation
6926+ 4B80 E1                   pop     HL              ; retrieve HL
6927+ 4B81 CD A4 4B             call    CNFREQ          ; ask for confirmation
6928+ 4B84 DA 45 4A             jp      C,ABRTDS        ; if Carry set then abort
6929+ 4B87 CD 09 10             call    CF_INIT         ; init CF card
6930+ 4B8A DA DC 49             jp      C,DOS_ERR       ; error if device not available/ready
6931+ 4B8D E5                   push    HL              ; store code string pointer
6932+ 4B8E CD 2B 12             call    DSK_RNM         ; init disk
6933+ 4B91 E1                   pop     HL
6934+ 4B92 DA DC 49             jp      C,DOS_ERR       ; DOS error
6935+ 4B95 C9                   ret
6936+ 4B96 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6936+ 4B9A 6D 65 20 64
6936+ 4B9E 69 73 6B 3F
6936+ 4BA2 20 00
6937+ 4BA4
6938+ 4BA4
6939+ 4BA4              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6940+ 4BA4 CD 23 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6941+ 4BA7 AF                   xor     A
6942+ 4BA8 32 5A 61             ld      (PRNTVIDEO),A   ; disable print-on-video
6943+ 4BAB CD 2A 02             call    RXA             ; look for a pressed key
6944+ 4BAE FE 03                cp      CTRLC           ; is it RUN STOP?
6945+ 4BB0 28 13                jr      Z,CNFRQN        ; yes, abort operation
6946+ 4BB2 E6 DF                and     %11011111       ; only UPPERCASE char
6947+ 4BB4 FE 59                cp      'Y'             ; 'Y'?
6948+ 4BB6 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6949+ 4BB8 3E 01                ld      A,$01           ; re-enable...
6950+ 4BBA 32 5A 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6951+ 4BBD CD 1C 03             call    ECHO_CHAR       ; yes, echoes the char
6952+ 4BC0 CD 38 09             call    CURSOR_OFF      ; disable cursor
6953+ 4BC3 AF                   xor     A               ; reset Carry flag
6954+ 4BC4 C9                   ret                     ; return to caller
6955+ 4BC5 37           CNFRQN: scf                     ; set Carry flag
6956+ 4BC6 C9                   ret                     ; return to caller
6957+ 4BC7
6958+ 4BC7
6959+ 4BC7              ; check that a disk/file name follows
6960+ 4BC7 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6961+ 4BC8 CD D6 25             call    GETCHR          ; check if something follows
6962+ 4BCB CA 8D 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6963+ 4BCE CD 79 2A             call    EVAL            ; Evaluate expression
6964+ 4BD1 CD 6B 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6965+ 4BD4 22 F8 60             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6966+ 4BD7 ED 53 FA 60          ld      (TMPDBF+4),DE   ; store DE
6967+ 4BDB ED 43 FC 60          ld      (TMPDBF+6),BC
6968+ 4BDF CD B2 30             call    GSTRCU          ; get current string into pool
6969+ 4BE2 CD C3 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6970+ 4BE5 7B                   ld      A,E             ; check if lenght = 0
6971+ 4BE6 A7                   and     A               ; null string?
6972+ 4BE7 CA 8D 20             jp      Z,SNERR         ; yes, syntax error
6973+ 4BEA ED 53 62 61          ld      (DKLNPT),DE     ; no, store lenght
6974+ 4BEE ED 43 60 61          ld      (DKNMPT),BC     ; store address of temp string
6975+ 4BF2 2A F8 60             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6976+ 4BF5 ED 5B FA 60          ld      DE,(TMPDBF+4)   ; retrieve DE
6977+ 4BF9 ED 4B FC 60          ld      BC,(TMPDBF+6)   ; retrieve BC
6978+ 4BFD C9                   ret                     ; return to caller
6979+ 4BFE
6980+ 4BFE
6981+ 4BFE              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6982+ 4BFE CD 6A 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6983+ 4C01 CD 8C 26             call	DEINT           ; Get integer -32768 to 32767
6984+ 4C04 C5                   push	BC              ; Save contents of BC
6985+ 4C05 21 B7 61             ld      HL,PBUFF        ; load address of PBUFF into HL
6986+ 4C08 7A                   ld      A,D             ; Get MSB into A
6987+ 4C09 B7                   or      A               ; OR with LSB to see if param=0
6988+ 4C0A 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6989+ 4C0C CD 34 4C             call    BYT2ASC         ; Convert D to ASCII
6990+ 4C0F 78                   ld      A,B             ; cechk if B
6991+ 4C10 FE 30                cp      '0'             ; is 0
6992+ 4C12 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6993+ 4C14 70                   ld      (HL),B          ; Store it to PBUFF
6994+ 4C15 23                   inc     HL              ; Next location
6995+ 4C16 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6996+ 4C17 23                   inc     HL              ; Next location
6997+ 4C18 7B           HEX2:   ld      A,E             ; Get lower byte
6998+ 4C19 CD 34 4C             call    BYT2ASC         ; Convert E to ASCII
6999+ 4C1C 7A                   ld      A,D
7000+ 4C1D B7                   or      A
7001+ 4C1E 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
7002+ 4C20 78                   ld      A,B
7003+ 4C21 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
7004+ 4C23 28 02                jr      Z,HEX4
7005+ 4C25 70           HEX3:   ld      (HL),B          ; to PBUFF+2
7006+ 4C26 23                   inc     HL              ; Next location
7007+ 4C27 71           HEX4:   ld      (HL),C          ; to PBUFF+3
7008+ 4C28 23                   inc     HL              ; PBUFF+4 to zero
7009+ 4C29 AF                   xor     A               ; Terminating character
7010+ 4C2A 77                   ld      (HL),A          ; Store zero to terminate
7011+ 4C2B 23                   inc     HL              ; Make sure PBUFF is terminated
7012+ 4C2C 77                   ld      (HL),A          ; Store the double zero there
7013+ 4C2D C1                   pop     BC              ; Get BC back
7014+ 4C2E 21 B7 61             ld      HL,PBUFF        ; Reset to start of PBUFF
7015+ 4C31 C3 FF 2E             jp      STR1            ; Convert the PBUFF to a string and return it
7016+ 4C34 47           BYT2ASC:ld      B,A             ; Save original value
7017+ 4C35 E6 0F                and     $0F             ; Strip off upper nybble
7018+ 4C37 FE 0A                cp      $0A             ; 0-9?
7019+ 4C39 38 02                jr      C,ADD30         ; If A-F, add 7 more
7020+ 4C3B C6 07                add     A,$07           ; Bring value up to ASCII A-F
7021+ 4C3D C6 30        ADD30:  add     A,$30           ; And make ASCII
7022+ 4C3F 4F                   ld      C,A             ; Save converted char to C
7023+ 4C40 78                   ld      A,B             ; Retrieve original value
7024+ 4C41 0F                   rrca                    ; and Rotate it right
7025+ 4C42 0F                   rrca
7026+ 4C43 0F                   rrca
7027+ 4C44 0F                   rrca
7028+ 4C45 E6 0F                and     $0F             ; Mask off upper nybble
7029+ 4C47 FE 0A                cp      $0A             ; 0-9? < A hex?
7030+ 4C49 38 02                jr      C,ADD301        ; Skip Add 7
7031+ 4C4B C6 07                add     A,$07           ; Bring it up to ASCII A-F
7032+ 4C4D C6 30        ADD301: add     A,$30           ; And make it full ASCII
7033+ 4C4F 47                   ld      B,A             ; Store high order byte
7034+ 4C50 C9                   ret
7035+ 4C51
7036+ 4C51              ; Convert "&Hnnnn" to FPREG
7037+ 4C51              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7038+ 4C51              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7039+ 4C51 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7040+ 4C52 21 00 00             ld      HL,$0000        ; Zero out the value
7041+ 4C55 CD 6A 4C             call    GETHEX          ; Check the number for valid hex
7042+ 4C58 DA 8A 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7043+ 4C5B 18 05                jr      HEXLP1          ; Convert first character
7044+ 4C5D CD 6A 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7045+ 4C60 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7046+ 4C62 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7047+ 4C63 29                   add     HL,HL
7048+ 4C64 29                   add     HL,HL
7049+ 4C65 29                   add     HL,HL
7050+ 4C66 B5                   or      L               ; Add in D0-D3 into L
7051+ 4C67 6F                   ld      L,A             ; Save new value
7052+ 4C68 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7053+ 4C6A
7054+ 4C6A 13           GETHEX: inc     DE              ; Next location
7055+ 4C6B 1A                   ld      A,(DE)          ; Load character at pointer
7056+ 4C6C FE 20                cp      SPC
7057+ 4C6E CA 6A 4C             jp      Z,GETHEX        ; Skip spaces
7058+ 4C71 D6 30                sub     $30             ; Get absolute value
7059+ 4C73 D8                   ret     C               ; < "0", error
7060+ 4C74 FE 0A                cp      $0A
7061+ 4C76 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7062+ 4C78 D6 07                sub     $07             ; Reduce to A-F
7063+ 4C7A FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7064+ 4C7C D8                   ret     C               ; CY set if was :            ; < = > ? @
7065+ 4C7D FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7066+ 4C7F 3F                   ccf
7067+ 4C80 C9                   ret                     ; CY set if it wasn't valid hex
7068+ 4C81
7069+ 4C81 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7070+ 4C82 7A                   ld      A,D             ; Load DE into AC
7071+ 4C83 4B                   ld      C,E             ; For prep to
7072+ 4C84 E5                   push    HL
7073+ 4C85 CD 50 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7074+ 4C88 E1                   pop     HL
7075+ 4C89 C9                   ret
7076+ 4C8A
7077+ 4C8A DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7078+ 4C8C C3 A7 20             jp      ERROR
7079+ 4C8F
7080+ 4C8F              ; BIN$(NN) Convert integer to a 1-16 char binary string
7081+ 4C8F CD 6A 2A     BIN:    call    TSTNUM          ; Verify it's a number
7082+ 4C92 CD 8C 26             call    DEINT           ; Get integer -32768 to 32767
7083+ 4C95 C5           BIN2:   push    BC              ; Save contents of BC
7084+ 4C96 21 B7 61             ld      HL,PBUFF
7085+ 4C99 06 11                ld      B,$11           ; One higher than max char count (16+1)
7086+ 4C9B              ZEROSUP:                        ; Suppress leading zeros
7087+ 4C9B 05                   dec     B               ; Max 16 chars
7088+ 4C9C 78                   ld      A,B
7089+ 4C9D FE 01                cp      $01
7090+ 4C9F 28 08                jr      Z,BITOUT        ; Always output at least one character
7091+ 4CA1 CB 13                rl      E
7092+ 4CA3 CB 12                rl      D
7093+ 4CA5 30 F4                jr      NC,ZEROSUP
7094+ 4CA7 18 04                jr      BITOUT2
7095+ 4CA9 CB 13        BITOUT: rl      E
7096+ 4CAB CB 12                rl      D               ; Top bit now in carry
7097+ 4CAD 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7098+ 4CAF CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7099+ 4CB1 77                   ld      (HL),A
7100+ 4CB2 23                   inc     HL
7101+ 4CB3 05                   dec     B
7102+ 4CB4 20 F3                jr      NZ,BITOUT
7103+ 4CB6 AF                   xor     A               ; Terminating character
7104+ 4CB7 77                   ld      (HL),A          ; Store zero to terminate
7105+ 4CB8 23                   inc     HL              ; Make sure PBUFF is terminated
7106+ 4CB9 77                   ld      (HL),A          ; Store the double zero there
7107+ 4CBA C1                   pop     BC
7108+ 4CBB 21 B7 61             ld      HL,PBUFF
7109+ 4CBE C3 FF 2E             jp      STR1
7110+ 4CC1
7111+ 4CC1              ; Convert "&Bnnnn" to FPREG
7112+ 4CC1              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7113+ 4CC1 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7114+ 4CC2 21 00 00             ld      HL,$0000        ; Zero out the value
7115+ 4CC5 CD DE 4C             call    CHKBIN          ; Check the number for valid bin
7116+ 4CC8 DA EC 4C             jp      C,BINERR        ; First value wasn't bin, HX error
7117+ 4CCB D6 30        BINIT:  sub     '0'
7118+ 4CCD 29                   add     HL,HL           ; Rotate HL left
7119+ 4CCE B5                   or      L
7120+ 4CCF 6F                   ld      L,A
7121+ 4CD0 CD DE 4C             call    CHKBIN          ; Get second and addtional characters
7122+ 4CD3 30 F6                jr      NC,BINIT        ; Process if a bin character
7123+ 4CD5 EB                   ex      DE,HL           ; Value into DE, Code string into HL
7124+ 4CD6 7A                   ld      A,D             ; Load DE into AC
7125+ 4CD7 4B                   ld      C,E             ; For prep to
7126+ 4CD8 E5                   push    HL
7127+ 4CD9 CD 50 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7128+ 4CDC E1                   pop     HL
7129+ 4CDD C9                   ret
7130+ 4CDE
7131+ 4CDE              ; Char is in A, NC if char is 0 or 1
7132+ 4CDE 13           CHKBIN: inc     DE
7133+ 4CDF 1A                   ld      A,(DE)
7134+ 4CE0 FE 20                cp      SPC
7135+ 4CE2 CA DE 4C             jp      Z,CHKBIN        ; Skip spaces
7136+ 4CE5 FE 30                cp      '0'             ; Set C if < '0'
7137+ 4CE7 D8                   ret     C
7138+ 4CE8 FE 32                cp      '2'
7139+ 4CEA 3F                   ccf                     ; Set C if > '1'
7140+ 4CEB C9                   ret
7141+ 4CEC
7142+ 4CEC 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7143+ 4CEE C3 A7 20             jp      ERROR
7144+ 4CF1
7145+ 4CF1
7146+ 4CF1 C3 08 00     MONOUT: jp      $0008           ; output a char
7147+ 4CF4
7148+ 4CF4
7149+ 4CF4 CD 08 33     RESET:  call    DISNMI          ; disable NMI vector
7150+ 4CF7 3A A0 61             ld      A,(SERIALS_EN)  ; load status of serial lines
7151+ 4CFA E6 11                and     $11             ; are serial ports open?
7152+ 4CFC C4 FD 44             call    NZ,RSTSERS      ; yes, reset serials
7153+ 4CFF 3A A3 61             ld      A,(DOS_EN)      ; is DOS enabled
7154+ 4D02 A7                   and     A               ; if enabled, A<>0
7155+ 4D03 C4 81 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7156+ 4D06 F3                   di                      ; disable INTs
7157+ 4D07                  IFDEF LM80C64K
7158+ 4D07 C3 2A 5F             jp      ROM2RAM         ; Restart
7159+ 4D0A                  ELSE
7160+ 4D0A ~                    jp      $0000           ; Restart
7161+ 4D0A                  ENDIF
7162+ 4D0A
7163+ 4D0A
7164+ 4D0A 3E 00        INITST: ld      A,$00           ; Clear break flag
7165+ 4D0C 32 02 60             ld      (BRKFLG),A
7166+ 4D0F C3 7C 1B             jp      SYSINIT
7167+ 4D12
7168+ 4D12
7169+ 4D12 F5           TSTBIT: push    AF              ; Save bit mask
7170+ 4D13 A0                   and     B               ; Get common bits
7171+ 4D14 C1                   pop     BC              ; Restore bit mask
7172+ 4D15 B8                   cp      B               ; Same bit set?
7173+ 4D16 3E 00                ld      A,$00           ; Return 0 in A
7174+ 4D18 C9                   ret
7175+ 4D19
7176+ 4D19 CD 98 23     OUTNCR: call    OUTC            ; Output character in A
7177+ 4D1C C3 A3 28             jp      PRNTCRLF        ; Output CRLF
7178+ 4D1F
# file closed: ../include/basic/basic-1.07.asm
  87  4D1F
  88  4D1F              ; include utils
  89  4D1F                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4D1F              ; ------------------------------------------------------------------------------
   2+ 4D1F              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4D1F              ; ------------------------------------------------------------------------------
   4+ 4D1F              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4D1F              ; designed by Leonardo Miliani. More info at
   6+ 4D1F              ; www DOT leonardomiliani DOT com
   7+ 4D1F              ;
   8+ 4D1F              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4D1F              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4D1F              ;
  11+ 4D1F              ; * WKT are routines from WikiTI:
  12+ 4D1F              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4D1F              ;
  14+ 4D1F              ; * LAC are routines from Learn@Cemetch
  15+ 4D1F              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4D1F              ;
  17+ 4D1F              ; ------------------------------------------------------------------------------
  18+ 4D1F              ; Code Revision:
  19+ 4D1F              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4D1F              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4D1F              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4D1F              ;                   transform a 32-bit value into ASCII representation
  23+ 4D1F              ;
  24+ 4D1F              ; ------------------------------------------------------------------------------
  25+ 4D1F
  26+ 4D1F              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4D1F              ; values can be both signed or unsigned words
  28+ 4D1F              ; inputs: HL, DE
  29+ 4D1F              ; destroys: A,F,HL
  30+ 4D1F              ;
  31+ 4D1F              ; returns: Z=1 if HL = DE
  32+ 4D1F              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4D1F              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4D1F              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4D1F              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4D1F              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4D1F              ; Source: ALS
  38+ 4D1F
  39+ 4D1F B7           CMP16:  or      A           ; clear CARRY
  40+ 4D20 ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4D22 E0                   ret     PO          ; return if no overflow
  42+ 4D23 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4D24 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4D25 EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4D27 37                   scf                 ; ensure a Non-Zero result
  46+ 4D28 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4D29                                          ; ZERO flag = 0 for sure
  48+ 4D29 C9                   ret                 ; return
  49+ 4D2A
  50+ 4D2A              ; ----------------------------------------------------------------------
  51+ 4D2A
  52+ 4D2A              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4D2A              ; signed/unsigned product
  54+ 4D2A              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4D2A              ; destroys: A,F
  56+ 4D2A              ; returns: HL (product)
  57+ 4D2A              ; Source: ALS
  58+ 4D2A
  59+ 4D2A              ; initialize partial product, bit count
  60+ 4D2A C5           MUL16:  push    BC
  61+ 4D2B 4D                   ld      C,L         ; BC = multiplier
  62+ 4D2C 44                   ld      B,H
  63+ 4D2D 21 00 00             ld      HL,0        ; product = 0
  64+ 4D30 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4D32                      ; shift-and-add algorithm
  66+ 4D32                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4D32                      ; shift partial product, multiplier left 1 bit
  68+ 4D32 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4D34 CB 12                rl      D
  70+ 4D36 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4D38 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4D39 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4D3A 3D                   dec     A
  74+ 4D3B 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4D3D                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4D3D B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4D3E F2 42 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D41 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D42 C1           EXMUL16:pop     BC
  80+ 4D43 C9                   ret
  81+ 4D44
  82+ 4D44
  83+ 4D44              ; ----------------------------------------------------------------------
  84+ 4D44
  85+ 4D44              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D44              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D44              ; destroys: A,F
  88+ 4D44              ; operation: BC * DE
  89+ 4D44              ; returns: DEHL (product)
  90+ 4D44              ; Source: WKT
  91+ 4D44
  92+ 4D44 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D47 CB 23                sla     E		; optimised 1st iteration
  94+ 4D49 CB 12                rl      D
  95+ 4D4B 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D4D 60                   ld      H,B
  97+ 4D4E 69                   ld      L,C
  98+ 4D4F 3E 0F        MU32_1: ld      A,$0F
  99+ 4D51 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D52 CB 13                rl      E
 101+ 4D54 CB 12                rl      D
 102+ 4D56 30 04                jr      NC,MU32_2
 103+ 4D58 09                   add     HL,BC
 104+ 4D59 30 01                jr      NC,MU32_2
 105+ 4D5B 13                   inc     DE
 106+ 4D5C 3D           MU32_2: dec     A
 107+ 4D5D 20 F2                jr      NZ,MUL_32L
 108+ 4D5F C9                   ret
 109+ 4D60
 110+ 4D60              ; ----------------------------------------------------------------------
 111+ 4D60              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D60              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D60              ;
 114+ 4D60              ; inputs: HL
 115+ 4D60              ; destroys: A
 116+ 4D60              ; operation: ABS(HL)
 117+ 4D60              ; returns: HL with no sign or negated
 118+ 4D60              ; Source: WKT
 119+ 4D60
 120+ 4D60 CB 7C        absHL:  bit     7,H
 121+ 4D62 C8                   ret     Z
 122+ 4D63 AF           negHL:  xor     A
 123+ 4D64 95                   sub     L
 124+ 4D65 6F                   ld      L,A
 125+ 4D66 9F                   sbc     A,A
 126+ 4D67 94                   sub     H
 127+ 4D68 67                   ld      H,A
 128+ 4D69 C9                   ret
 129+ 4D6A
 130+ 4D6A              ; ------------------------------------------------------------------------------
 131+ 4D6A
 132+ 4D6A              ; 8/8 division
 133+ 4D6A              ; INPUT: D (dividend), E (divisor)
 134+ 4D6A              ; OPERATION: D/E
 135+ 4D6A              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D6A AF           DIV_8_8:    xor     A
 137+ 4D6B C5                       push    BC
 138+ 4D6C 06 08                    ld      B,08h
 139+ 4D6E CB 22        DIV_8_8LOOP:sla     D
 140+ 4D70 17                       rla
 141+ 4D71 BB                       cp      E
 142+ 4D72 38 02                    jr      C,$+4
 143+ 4D74 93                       sub     E
 144+ 4D75 14                       inc     D
 145+ 4D76 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D78 C1                       pop     BC
 147+ 4D79 C9                       ret
 148+ 4D7A
 149+ 4D7A              ; ----------------------------------------------------------------------
 150+ 4D7A              ; divide a 16-bit number by an 8-bit number
 151+ 4D7A              ; (16/8 division)
 152+ 4D7A              ;
 153+ 4D7A              ; inputs: HL (Dividend), C (divisor)
 154+ 4D7A              ; destroys: A, B
 155+ 4D7A              ; OPERATION: HL/C
 156+ 4D7A              ; returns: HL (quotient), A (remainder)
 157+ 4D7A              ; source: WKT
 158+ 4D7A
 159+ 4D7A AF           DIV_16_8:   xor     A
 160+ 4D7B 06 10                    ld      B,16
 161+ 4D7D 29           DIV_16_8LP: add     HL,HL
 162+ 4D7E 17                       rla
 163+ 4D7F 38 03                    jr      C,$+5
 164+ 4D81 B9                       cp      C
 165+ 4D82 38 02                    jr      C,$+4
 166+ 4D84 91                       sub     C
 167+ 4D85 2C                       inc     L
 168+ 4D86 10 F5                    djnz    DIV_16_8LP
 169+ 4D88 C9                       ret
 170+ 4D89
 171+ 4D89              ; ----------------------------------------------------------------------
 172+ 4D89              ; divide a 16-bit number by a 16-bit number
 173+ 4D89              ; (16/16 division)
 174+ 4D89              ;
 175+ 4D89              ; inputs: AC (Dividend), DE (divisor)
 176+ 4D89              ; destroys: HL,A,C
 177+ 4D89              ; OPERATION: AC/DE
 178+ 4D89              ; returns: AC (quotient), HL (remainder)
 179+ 4D89              ; source: WKT
 180+ 4D89 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4D8C 06 10                    ld      B, 16
 182+ 4D8E CB 21        DV16_16_LP: sla     C
 183+ 4D90 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4D92 17                       rla
 185+ 4D93 ED 6A                    adc     HL,HL
 186+ 4D95 ED 52                    sbc     HL,DE
 187+ 4D97 30 02                    jr      NC, $+4
 188+ 4D99 19                       add     HL,DE
 189+ 4D9A 0D                       dec     C
 190+ 4D9B 10 F1                    djnz    DV16_16_LP
 191+ 4D9D C9                       ret
 192+ 4D9E
 193+ 4D9E
 194+ 4D9E              ; ----------------------------------------------------------------------
 195+ 4D9E              ; divide a 32-bit number by a 16 bit-number
 196+ 4D9E              ; (32/16 division)
 197+ 4D9E              ;
 198+ 4D9E              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4D9E              ; destroys: HL,IX,BC
 200+ 4D9E              ; OPERATION: ACIX/DE
 201+ 4D9E              ; returns: ACIX (quotient), HL (remainder)
 202+ 4D9E              ; source: WKT
 203+ 4D9E
 204+ 4D9E 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4DA1 06 20                    ld      B,32
 206+ 4DA3 DD 29        DIV_32_16LP:add     IX,IX
 207+ 4DA5 CB 11                    rl      C
 208+ 4DA7 17                       rla
 209+ 4DA8 ED 6A                    adc     HL,HL
 210+ 4DAA 38 08                    jr      C,DIV_32_16OF
 211+ 4DAC ED 52                    sbc     HL,DE
 212+ 4DAE 30 07                    jr      NC,DIV_32_16SB
 213+ 4DB0 19                       add     HL,DE
 214+ 4DB1 10 F0                    djnz    DIV_32_16LP
 215+ 4DB3 C9                       ret
 216+ 4DB4 B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4DB5 ED 52                    sbc     HL,DE
 218+ 4DB7 DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4DB9 10 E8                    djnz    DIV_32_16LP
 220+ 4DBB C9                       ret
 221+ 4DBC
 222+ 4DBC
 223+ 4DBC              ; ----------------------------------------------------------------------
 224+ 4DBC              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4DBC              ;
 226+ 4DBC              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4DBC              ; destroys: AF, BC, DE, HL, IX
 228+ 4DBC              ; outputs: IY (last char in dest. string)
 229+ 4DBC              ; source: MSX Forum
 230+ 4DBC
 231+ 4DBC 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4DC0 0A 00 00 00
 231+ 4DC4 64 00 00 00
 231+ 4DC8 E8 03 00 00
 231+ 4DCC 10 27 00 00
 232+ 4DD0 A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4DD4 40 42 0F 00
 232+ 4DD8 80 96 98 00
 232+ 4DDC 00 E1 F5 05
 232+ 4DE0 00 CA 9A 3B
 233+ 4DE4 00 00 00 00  CLCN32Z:    defs    4
 234+ 4DE8
 235+ 4DE8 DD 22 E4 4D  CLCN32:     ld      (CLCN32Z),IX
 236+ 4DEC ED 53 E6 4D              ld      (CLCN32Z+$02),DE
 237+ 4DF0 DD 21 E0 4D              ld      IX,CLCN32T+$24
 238+ 4DF4 06 09                    ld      B,$09
 239+ 4DF6 0E 00                    ld      C,$00
 240+ 4DF8 3E 30        CLCN321:    ld      A,"0"
 241+ 4DFA B7                       or      A
 242+ 4DFB DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4DFE DD 56 01                 ld      D,(IX+$01)
 244+ 4E01 2A E4 4D                 ld      HL,(CLCN32Z)
 245+ 4E04 ED 52                    sbc     HL,DE
 246+ 4E06 22 E4 4D                 ld      (CLCN32Z),HL
 247+ 4E09 DD 5E 02                 ld      E,(IX+$02)
 248+ 4E0C DD 56 03                 ld      D,(IX+$03)
 249+ 4E0F 2A E6 4D                 ld      HL,(CLCN32Z+$02)
 250+ 4E12 ED 52                    sbc     HL,DE
 251+ 4E14 22 E6 4D                 ld      (CLCN32Z+$02),HL
 252+ 4E17 38 04                    jr      C,CLCN325
 253+ 4E19 0C                       inc     C
 254+ 4E1A 3C                       inc     A
 255+ 4E1B 18 DE                    jr      CLCN322
 256+ 4E1D DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4E20 DD 56 01                 ld      D,(IX+$01)
 258+ 4E23 2A E4 4D                 ld      HL,(CLCN32Z)
 259+ 4E26 19                       add     HL,DE
 260+ 4E27 22 E4 4D                 ld      (CLCN32Z),HL
 261+ 4E2A DD 5E 02                 ld      E,(IX+$02)
 262+ 4E2D DD 56 03                 ld      D,(IX+$03)
 263+ 4E30 2A E6 4D                 ld      HL,(CLCN32Z+$02)
 264+ 4E33 ED 5A                    adc     HL,DE
 265+ 4E35 22 E6 4D                 ld      (CLCN32Z+$02),HL
 266+ 4E38 11 FC FF                 ld      DE,-4
 267+ 4E3B DD 19                    add     IX,DE
 268+ 4E3D 0C                       inc     C
 269+ 4E3E 0D                       dec     C
 270+ 4E3F 28 05                    jr      Z,CLCN323
 271+ 4E41 FD 77 00                 ld      (IY+$00),A
 272+ 4E44 FD 23                    inc     IY
 273+ 4E46 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E48 3A E4 4D                 ld      A,(CLCN32Z)
 275+ 4E4B C6 30                    add     "0"
 276+ 4E4D FD 77 00                 ld      (IY+$00),A
 277+ 4E50 FD 36 01 00              ld      (IY+$01),0
 278+ 4E54 C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E55
  91  4E55              ; include the latest version of the font sets
  92  4E55                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E55              ; ------------------------------------------------------------------------------
   2+ 4E55              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E55              ; ------------------------------------------------------------------------------
   4+ 4E55              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E55              ; designed by Leonardo Miliani. More info at
   6+ 4E55              ; www DOT leonardomiliani DOT com
   7+ 4E55              ; ------------------------------------------------------------------------------
   8+ 4E55              ; Code Revision:
   9+ 4E55              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E55              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E55              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E55              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E55              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E55              ; R1.5 - 20200524 - New style for char #252
  15+ 4E55              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E55              ; ------------------------------------------------------------------------------
  17+ 4E55              ;
  18+ 4E55              ;-------------------------------------------------------------------------------
  19+ 4E55              ;
  20+ 4E55              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E55              ;
  22+ 4E55              ;-------------------------------------------------------------------------------
  23+ 4E55              ;
  24+ 4E55              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E55              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E55
  27+ 4E55              CHRST68 equ $
  28+ 4E55 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E59 00 00 00 00
  29+ 4E5D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E61 00 00 00 00
  30+ 4E65 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E69 00 00 00 00
  31+ 4E6D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E71 00 00 00 00
  32+ 4E75 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E79 00 00 00 00
  33+ 4E7D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4E81 00 00 00 00
  34+ 4E85 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4E89 00 00 00 00
  35+ 4E8D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4E91 00 00 00 00
  36+ 4E95 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4E99 00 00 00 00
  37+ 4E9D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4EA1 00 00 00 00
  38+ 4EA5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4EA9 00 00 00 00
  39+ 4EAD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4EB1 00 00 00 00
  40+ 4EB5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4EB9 00 00 00 00
  41+ 4EBD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4EC1 00 00 00 00
  42+ 4EC5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4EC9 00 00 00 00
  43+ 4ECD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4ED1 00 00 00 00
  44+ 4ED5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4ED9 00 00 00 00
  45+ 4EDD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4EE1 00 00 00 00
  46+ 4EE5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4EE9 00 00 00 00
  47+ 4EED 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4EF1 00 00 00 00
  48+ 4EF5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4EF9 00 00 00 00
  49+ 4EFD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4F01 00 00 00 00
  50+ 4F05 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4F09 00 00 00 00
  51+ 4F0D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4F11 00 00 00 00
  52+ 4F15 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4F19 00 00 00 00
  53+ 4F1D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4F21 00 00 00 00
  54+ 4F25 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4F29 00 00 00 00
  55+ 4F2D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4F31 00 00 00 00
  56+ 4F35 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4F39 00 00 00 00
  57+ 4F3D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F41 00 00 00 00
  58+ 4F45 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F49 00 00 00 00
  59+ 4F4D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F51 00 00 00 00
  60+ 4F55 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F59 00 00 00 00
  61+ 4F5D 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F61 20 00 20 00
  62+ 4F65 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F69 00 00 00 00
  63+ 4F6D 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F71 F8 50 50 00
  64+ 4F75 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F79 28 F0 20 00
  65+ 4F7D C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4F81 40 98 18 00
  66+ 4F85 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4F89 A8 90 68 00
  67+ 4F8D 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4F91 00 00 00 00
  68+ 4F95 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4F99 40 20 10 00
  69+ 4F9D 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4FA1 10 20 40 00
  70+ 4FA5 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4FA9 A8 20 00 00
  71+ 4FAD 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4FB1 20 20 00 00
  72+ 4FB5 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4FB9 60 20 40 00
  73+ 4FBD 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4FC1 00 00 00 00
  74+ 4FC5 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4FC9 00 60 60 00
  75+ 4FCD 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4FD1 40 80 00 00
  76+ 4FD5 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4FD9 C8 88 70 00
  77+ 4FDD 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 4FE1 20 20 70 00
  78+ 4FE5 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 4FE9 20 40 F8 00
  79+ 4FED F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 4FF1 08 88 70 00
  80+ 4FF5 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 4FF9 F8 10 10 00
  81+ 4FFD F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 5001 08 88 70 00
  82+ 5005 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 5009 88 88 70 00
  83+ 500D F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 5011 40 40 40 00
  84+ 5015 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 5019 88 88 70 00
  85+ 501D 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 5021 08 10 60 00
  86+ 5025 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 5029 30 30 00 00
  87+ 502D 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 5031 30 10 20 00
  88+ 5035 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 5039 40 20 10 00
  89+ 503D 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 5041 F8 00 00 00
  90+ 5045 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 5049 10 20 40 00
  91+ 504D 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 5051 20 00 20 00
  92+ 5055 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 5059 A8 A8 70 00
  93+ 505D 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 5061 F8 88 88 00
  94+ 5065 F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 5069 88 88 F0 00
  95+ 506D 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 5071 80 88 70 00
  96+ 5075 E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 5079 88 90 E0 00
  97+ 507D F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 5081 80 80 F8 00
  98+ 5085 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 5089 80 80 80 00
  99+ 508D 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 5091 88 88 78 00
 100+ 5095 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 5099 88 88 88 00
 101+ 509D 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 50A1 20 20 70 00
 102+ 50A5 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 50A9 10 90 60 00
 103+ 50AD 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 50B1 A0 90 88 00
 104+ 50B5 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 50B9 80 80 F8 00
 105+ 50BD 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 50C1 88 88 88 00
 106+ 50C5 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 50C9 88 88 88 00
 107+ 50CD 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 50D1 88 88 70 00
 108+ 50D5 F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 50D9 80 80 80 00
 109+ 50DD 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 50E1 A8 90 68 00
 110+ 50E5 F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 50E9 A0 90 88 00
 111+ 50ED 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 50F1 08 08 F0 00
 112+ 50F5 F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 50F9 20 20 20 00
 113+ 50FD 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 5101 88 88 70 00
 114+ 5105 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 5109 88 50 20 00
 115+ 510D 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 5111 A8 A8 50 00
 116+ 5115 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 5119 50 88 88 00
 117+ 511D 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 5121 20 20 20 00
 118+ 5125 F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 5129 40 80 F8 00
 119+ 512D 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 5131 40 40 70 00
 120+ 5135 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 5139 10 08 00 00
 121+ 513D 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 5141 10 10 70 00
 122+ 5145 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 5149 00 00 00 00
 123+ 514D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 5151 00 00 00 FC
 124+ 5155 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 5159 00 00 00 00
 125+ 515D 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 5161 78 88 78 00
 126+ 5165 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 5169 C8 88 F0 00
 127+ 516D 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 5171 80 88 70 00
 128+ 5175 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 5179 98 88 78 00
 129+ 517D 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 5181 F8 80 70 00
 130+ 5185 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 5189 40 40 40 00
 131+ 518D 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 5191 78 08 70 00
 132+ 5195 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 5199 88 88 88 00
 133+ 519D 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 51A1 20 20 20 00
 134+ 51A5 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 51A9 08 88 70 00
 135+ 51AD 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 51B1 C0 A0 90 00
 136+ 51B5 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 51B9 20 20 70 00
 137+ 51BD 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 51C1 A8 88 88 00
 138+ 51C5 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 51C9 88 88 88 00
 139+ 51CD 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 51D1 88 88 70 00
 140+ 51D5 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 51D9 F0 80 80 00
 141+ 51DD 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 51E1 78 08 08 00
 142+ 51E5 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 51E9 80 80 80 00
 143+ 51ED 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 51F1 70 08 F0 00
 144+ 51F5 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 51F9 40 48 30 00
 145+ 51FD 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 5201 88 98 68 00
 146+ 5205 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 5209 88 50 20 00
 147+ 520D 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 5211 A8 A8 50 00
 148+ 5215 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 5219 20 50 88 00
 149+ 521D 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 5221 68 08 70 00
 150+ 5225 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 5229 20 40 F8 00
 151+ 522D 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 5231 20 20 10 00
 152+ 5235 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 5239 20 20 20 00
 153+ 523D 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 5241 10 10 20 00
 154+ 5245 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 5249 00 00 00 00
 155+ 524D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 5251 00 00 00 00
 156+ 5255 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 5259 B4 84 78 00
 157+ 525D 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 5261 B4 CC 78 00
 158+ 5265 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 5269 FC 78 30 00
 159+ 526D 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 5271 F8 70 20 00
 160+ 5275 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 5279 A8 20 70 00
 161+ 527D 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 5281 A8 20 70 00
 162+ 5285 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 5289 FC 30 30 30
 163+ 528D 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 5291 3C 30 30 30
 164+ 5295 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 5299 F0 30 30 30
 165+ 529D 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 52A1 F0 00 00 00
 166+ 52A5 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 52A9 3C 00 00 00
 167+ 52AD 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 52B1 FC 00 00 00
 168+ 52B5 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 52B9 3C 30 30 30
 169+ 52BD 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 52C1 FC 30 30 30
 170+ 52C5 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 52C9 F0 30 30 30
 171+ 52CD 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 52D1 FC 00 00 00
 172+ 52D5 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 52D9 30 30 30 30
 173+ 52DD 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 52E1 70 60 E0 C0
 174+ 52E5 C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 52E9 38 18 1C 0C
 175+ 52ED CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 52F1 30 78 CC CC
 176+ 52F5 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 52F9 20 20 20 20
 177+ 52FD 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 5301 20 20 20 20
 178+ 5305 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 5309 20 20 20 20
 179+ 530D 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 5311 00 00 00 00
 180+ 5315 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 5319 00 00 00 00
 181+ 531D 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 5321 00 00 00 00
 182+ 5325 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 5329 20 20 20 20
 183+ 532D 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 5331 20 20 20 20
 184+ 5335 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 5339 20 20 20 20
 185+ 533D 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 5341 00 00 00 00
 186+ 5345 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 5349 20 20 20 20
 187+ 534D 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 5351 20 40 40 80
 188+ 5355 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 5359 10 08 08 04
 189+ 535D 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 5361 30 48 48 84
 190+ 5365 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 5369 00 00 FC FC
 191+ 536D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 5371 FC FC FC FC
 192+ 5375 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 5379 FC FC FC FC
 193+ 537D FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 5381 00 00 00 00
 194+ 5385 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 5389 00 00 00 00
 195+ 538D FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 5391 FC FC 00 00
 196+ 5395 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 5399 80 80 80 80
 197+ 539D E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 53A1 E0 E0 E0 E0
 198+ 53A5 F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 53A9 F8 F8 F8 F8
 199+ 53AD 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 53B1 04 04 04 04
 200+ 53B5 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 53B9 1C 1C 1C 1C
 201+ 53BD 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 53C1 7C 7C 7C 7C
 202+ 53C5 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 53C9 84 84 84 FC
 203+ 53CD 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 53D1 E0 E0 E0 E0
 204+ 53D5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 53D9 1C 1C 1C 1C
 205+ 53DD 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 53E1 00 00 00 00
 206+ 53E5 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 53E9 00 00 00 00
 207+ 53ED E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 53F1 1C 1C 1C 1C
 208+ 53F5 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 53F9 E0 E0 E0 E0
 209+ 53FD 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 5401 78 78 78 78
 210+ 5405 CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 5409 CC CC CC CC
 211+ 540D FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 5411 00 00 FC FC
 212+ 5415 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 5419 FC FC 00 00
 213+ 541D 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 5421 30 30 CC CC
 214+ 5425 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 5429 54 A8 54 A8
 215+ 542D 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 5431 64 30 98 CC
 216+ 5435 CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 5439 CC 64 30 98
 217+ 543D 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 5441 30 98 CC 64
 218+ 5445 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 5449 64 CC 98 30
 219+ 544D 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 5451 20 00 F8 00
 220+ 5455 C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 5459 C0 00 F8 00
 221+ 545D 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 5461 18 00 F8 00
 222+ 5465 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 5469 A0 60 20 00
 223+ 546D 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 5471 00 00 00 00
 224+ 5475 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 5479 70 00 00 00
 225+ 547D 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 5481 00 FC 00 00
 226+ 5485 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 5489 54 A8 00 00
 227+ 548D 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 5491 E0 C0 80 00
 228+ 5495 FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 5499 00 00 00 00
 229+ 549D 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 54A1 1C 0C 04 00
 230+ 54A5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 54A9 00 30 78 FC
 231+ 54AD 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 54B1 20 20 20 00
 232+ 54B5 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 54B9 40 80 00 00
 233+ 54BD 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 54C1 18 10 00 00
 234+ 54C5 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 54C9 24 1C 1C 3C
 235+ 54CD 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 54D1 20 F8 70 20
 236+ 54D5 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 54D9 90 E0 E0 F0
 237+ 54DD 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 54E1 60 20 00 00
 238+ 54E5 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 54E9 08 04 00 00
 239+ 54ED 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 54F1 F0 44 38 00
 240+ 54F5 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 54F9 28 28 28 00
 241+ 54FD 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 5501 1C 20 20 20
 242+ 5505 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 5509 E0 10 10 10
 243+ 550D 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 5511 00 00 00 00
 244+ 5515 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 5519 00 00 00 00
 245+ 551D 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 5521 3C 30 30 30
 246+ 5525 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 5529 F0 30 30 30
 247+ 552D 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 5531 E0 00 00 00
 248+ 5535 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 5539 1C 00 00 00
 249+ 553D 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 5541 48 30 00 00
 250+ 5545 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 5549 78 30 00 00
 251+ 554D 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 5551 FC 78 30 00
 252+ 5555 FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 5559 E0 C0 80 80
 253+ 555D FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 5561 1C 0C 04 04
 254+ 5565 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 5569 1C 3C 7C FC
 255+ 556D 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 5571 E0 F0 F8 FC
 256+ 5575 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 5579 F0 E0 C0 00
 257+ 557D 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 5581 78 CC 00 00
 258+ 5585 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 5589 70 20 70 20
 259+ 558D 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 5591 90 90 60 00
 260+ 5595 F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 5599 84 84 84 FC
 261+ 559D 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 55A1 84 84 84 FC
 262+ 55A5 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 55A9 48 48 48 78
 263+ 55AD FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 55B1 FC B4 B4 FC
 264+ 55B5 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 55B9 D4 D4 00 00
 265+ 55BD 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 55C1 78 48 48 48
 266+ 55C5 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 55C9 B4 84 78 00
 267+ 55CD 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 55D1 A8 80 00 00
 268+ 55D5 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 55D9 A0 88 70 00
 269+ 55DD 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 55E1 84 84 FC 00
 270+ 55E5 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 55E9 F0 F0 F0 00
 271+ 55ED 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 55F1 F0 F0 F0 00
 272+ 55F5 FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 55F9 94 94 84 FC
 273+ 55FD 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 5601 68 70 80 00
 274+ 5605 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 5609 6C 18 08 00
 275+ 560D 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 5611 20 60 E0 40
 276+ 5615 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 5619 E4 68 20 00
 277+ 561D 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 5621 E0 60 20 00
 278+ 5625 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 5629 F8 FC F0 90
 279+ 562D 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 5631 B4 84 78 00
 280+ 5635 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 5639 40 48 B0 00
 281+ 563D 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 5641 48 3C 84 78
 282+ 5645 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 5649 F8 00 20 00
 283+ 564D FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 5651 FC FC FC FC
 284+ 5655                      ; here ends the ASCII table
 285+ 5655
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  5655                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 5655              ; ------------------------------------------------------------------------------
   2+ 5655              ; LM80C - 8x8 CHARSET - R1.8
   3+ 5655              ; ------------------------------------------------------------------------------
   4+ 5655              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5655              ; designed by Leonardo Miliani. More info at
   6+ 5655              ; www DOT leonardomiliani DOT com
   7+ 5655              ; ------------------------------------------------------------------------------
   8+ 5655              ; Code Revision:
   9+ 5655              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 5655              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 5655              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 5655              ; R1.3 - 20191015 - More graphic chars
  13+ 5655              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 5655              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 5655              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 5655              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 5655              ; R1.8 - 20200524 - New style for char #252
  18+ 5655              ; ------------------------------------------------------------------------------
  19+ 5655              ;
  20+ 5655              ;-------------------------------------------------------------------------------
  21+ 5655              ;
  22+ 5655              ;               8 x 8    C  H  A  R  S  E  T
  23+ 5655              ;
  24+ 5655              ;-------------------------------------------------------------------------------
  25+ 5655              ;
  26+ 5655              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 5655
  28+ 5655              CHRST88 equ $
  29+ 5655 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 5659 00 00 00 00
  30+ 565D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 5661 00 00 00 00
  31+ 5665 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 5669 00 00 00 00
  32+ 566D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 5671 00 00 00 00
  33+ 5675 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 5679 00 00 00 00
  34+ 567D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 5681 00 00 00 00
  35+ 5685 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 5689 00 00 00 00
  36+ 568D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 5691 00 00 00 00
  37+ 5695 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 5699 00 00 00 00
  38+ 569D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 56A1 00 00 00 00
  39+ 56A5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 56A9 00 00 00 00
  40+ 56AD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 56B1 00 00 00 00
  41+ 56B5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 56B9 00 00 00 00
  42+ 56BD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 56C1 00 00 00 00
  43+ 56C5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 56C9 00 00 00 00
  44+ 56CD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 56D1 00 00 00 00
  45+ 56D5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 56D9 00 00 00 00
  46+ 56DD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 56E1 00 00 00 00
  47+ 56E5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 56E9 00 00 00 00
  48+ 56ED 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 56F1 00 00 00 00
  49+ 56F5 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 56F9 00 00 00 00
  50+ 56FD 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 5701 00 00 00 00
  51+ 5705 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 5709 00 00 00 00
  52+ 570D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 5711 00 00 00 00
  53+ 5715 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 5719 00 00 00 00
  54+ 571D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 5721 00 00 00 00
  55+ 5725 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 5729 00 00 00 00
  56+ 572D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 5731 00 00 00 00
  57+ 5735 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 5739 00 00 00 00
  58+ 573D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 5741 00 00 00 00
  59+ 5745 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 5749 00 00 00 00
  60+ 574D 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 5751 00 00 00 00
  61+ 5755 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 5759 00 00 00 00
  62+ 575D 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 5761 10 00 10 00
  63+ 5765 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 5769 00 00 00 00
  64+ 576D 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 5771 FE 28 28 00
  65+ 5775 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 5779 14 78 10 00
  66+ 577D 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 5781 10 26 46 00
  67+ 5785 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 5789 4A 44 3A 00
  68+ 578D 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 5791 00 00 00 00
  69+ 5795 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 5799 20 10 08 00
  70+ 579D 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 57A1 08 10 20 00
  71+ 57A5 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 57A9 38 54 10 00
  72+ 57AD 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 57B1 10 10 00 00
  73+ 57B5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 57B9 00 18 08 10
  74+ 57BD 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 57C1 00 00 00 00
  75+ 57C5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 57C9 00 18 18 00
  76+ 57CD 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 57D1 10 20 40 00
  77+ 57D5 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 57D9 64 44 38 00
  78+ 57DD 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 57E1 10 10 7C 00
  79+ 57E5 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 57E9 10 20 7C 00
  80+ 57ED 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 57F1 04 44 38 00
  81+ 57F5 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 57F9 7C 08 08 00
  82+ 57FD 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 5801 04 44 38 00
  83+ 5805 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 5809 44 44 38 00
  84+ 580D 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 5811 20 20 20 00
  85+ 5815 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 5819 44 44 38 00
  86+ 581D 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 5821 04 44 38 00
  87+ 5825 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 5829 18 18 00 00
  88+ 582D 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 5831 18 08 10 00
  89+ 5835 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 5839 10 08 04 00
  90+ 583D 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 5841 7E 00 00 00
  91+ 5845 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 5849 08 10 20 00
  92+ 584D 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 5851 10 00 10 00
  93+ 5855 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 5859 B8 80 84 78
  94+ 585D 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 5861 7C 44 44 00
  95+ 5865 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 5869 44 44 78 00
  96+ 586D 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 5871 40 44 38 00
  97+ 5875 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 5879 44 44 78 00
  98+ 587D 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 5881 40 40 7C 00
  99+ 5885 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 5889 40 40 40 00
 100+ 588D 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 5891 5C 44 38 00
 101+ 5895 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 5899 44 44 44 00
 102+ 589D 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 58A1 10 10 38 00
 103+ 58A5 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 58A9 04 44 38 00
 104+ 58AD 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 58B1 48 44 44 00
 105+ 58B5 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 58B9 40 40 7C 00
 106+ 58BD 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 58C1 42 42 42 00
 107+ 58C5 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 58C9 44 44 44 00
 108+ 58CD 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 58D1 44 44 38 00
 109+ 58D5 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 58D9 78 40 40 00
 110+ 58DD 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 58E1 54 48 34 00
 111+ 58E5 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 58E9 78 48 44 00
 112+ 58ED 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 58F1 04 04 78 00
 113+ 58F5 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 58F9 10 10 10 00
 114+ 58FD 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 5901 44 44 38 00
 115+ 5905 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 5909 44 28 10 00
 116+ 590D 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 5911 5A 5A 24 00
 117+ 5915 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 5919 28 44 44 00
 118+ 591D 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 5921 10 10 10 00
 119+ 5925 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 5929 20 40 7C 00
 120+ 592D 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 5931 20 20 38 00
 121+ 5935 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 5939 08 04 02 00
 122+ 593D 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 5941 08 08 38 00
 123+ 5945 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 5949 00 00 00 00
 124+ 594D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 5951 00 00 7E 00
 125+ 5955 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 5959 00 00 00 00
 126+ 595D 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 5961 3C 44 3C 00
 127+ 5965 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 5969 44 44 78 00
 128+ 596D 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 5971 40 44 38 00
 129+ 5975 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 5979 44 44 3C 00
 130+ 597D 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 5981 7C 40 38 00
 131+ 5985 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 5989 20 20 20 00
 132+ 598D 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 5991 44 3C 04 38
 133+ 5995 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 5999 44 44 44 00
 134+ 599D 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 59A1 10 10 10 00
 135+ 59A5 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 59A9 08 08 48 30
 136+ 59AD 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 59B1 60 50 48 00
 137+ 59B5 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 59B9 10 10 38 00
 138+ 59BD 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 59C1 4A 42 42 00
 139+ 59C5 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 59C9 44 44 44 00
 140+ 59CD 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 59D1 44 44 38 00
 141+ 59D5 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 59D9 44 78 40 40
 142+ 59DD 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 59E1 44 3C 04 04
 143+ 59E5 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 59E9 40 40 40 00
 144+ 59ED 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 59F1 38 04 78 00
 145+ 59F5 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 59F9 20 24 18 00
 146+ 59FD 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 5A01 44 4C 34 00
 147+ 5A05 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 5A09 44 28 10 00
 148+ 5A0D 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 5A11 54 54 28 00
 149+ 5A15 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 5A19 10 28 44 00
 150+ 5A1D 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 5A21 4C 34 04 38
 151+ 5A25 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 5A29 10 20 7C 00
 152+ 5A2D 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 5A31 20 20 18 00
 153+ 5A35 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 5A39 10 10 10 00
 154+ 5A3D 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A41 08 08 30 00
 155+ 5A45 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A49 00 00 00 00
 156+ 5A4D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A51 00 00 00 00
 157+ 5A55 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A59 A5 99 42 3C
 158+ 5A5D 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A61 DB E7 7E 3C
 159+ 5A65 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A69 7C 38 10 00
 160+ 5A6D 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A71 7C 38 10 00
 161+ 5A75 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A79 54 10 7C 00
 162+ 5A7D 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5A81 D6 10 7C 00
 163+ 5A85 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5A89 FF 18 18 18
 164+ 5A8D 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5A91 1F 18 18 18
 165+ 5A95 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5A99 F8 18 18 18
 166+ 5A9D 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5AA1 F8 00 00 00
 167+ 5AA5 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5AA9 1F 00 00 00
 168+ 5AAD 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5AB1 FF 00 00 00
 169+ 5AB5 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5AB9 1F 18 18 18
 170+ 5ABD 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5AC1 FF 18 18 18
 171+ 5AC5 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5AC9 F8 18 18 18
 172+ 5ACD 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5AD1 FF 00 00 00
 173+ 5AD5 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5AD9 18 18 18 18
 174+ 5ADD 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5AE1 38 70 E0 C0
 175+ 5AE5 C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5AE9 1C 0E 07 03
 176+ 5AED C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5AF1 3C 7E E7 C3
 177+ 5AF5 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5AF9 10 10 10 10
 178+ 5AFD 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5B01 10 10 10 10
 179+ 5B05 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5B09 10 10 10 10
 180+ 5B0D 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5B11 00 00 00 00
 181+ 5B15 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5B19 00 00 00 00
 182+ 5B1D 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5B21 00 00 00 00
 183+ 5B25 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5B29 10 10 10 10
 184+ 5B2D 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5B31 10 10 10 10
 185+ 5B35 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5B39 10 10 10 10
 186+ 5B3D 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B41 00 00 00 00
 187+ 5B45 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B49 10 10 10 10
 188+ 5B4D 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B51 10 20 40 80
 189+ 5B55 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B59 08 04 02 01
 190+ 5B5D 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B61 18 24 42 81
 191+ 5B65 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B69 00 00 FF FF
 192+ 5B6D 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B71 FF FF FF FF
 193+ 5B75 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B79 FF FF FF FF
 194+ 5B7D FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5B81 00 00 00 00
 195+ 5B85 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5B89 00 00 00 00
 196+ 5B8D FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5B91 FF FF 00 00
 197+ 5B95 C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5B99 C0 C0 C0 C0
 198+ 5B9D F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5BA1 F0 F0 F0 F0
 199+ 5BA5 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5BA9 FC FC FC FC
 200+ 5BAD 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5BB1 03 03 03 03
 201+ 5BB5 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5BB9 0F 0F 0F 0F
 202+ 5BBD 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5BC1 3F 3F 3F 3F
 203+ 5BC5 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5BC9 81 81 81 FF
 204+ 5BCD 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5BD1 F0 F0 F0 F0
 205+ 5BD5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5BD9 0F 0F 0F 0F
 206+ 5BDD 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5BE1 00 00 00 00
 207+ 5BE5 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5BE9 00 00 00 00
 208+ 5BED F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5BF1 0F 0F 0F 0F
 209+ 5BF5 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5BF9 F0 F0 F0 F0
 210+ 5BFD 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5C01 3C 3C 3C 3C
 211+ 5C05 C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5C09 C3 C3 C3 C3
 212+ 5C0D FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5C11 00 00 FF FF
 213+ 5C15 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5C19 FF FF 00 00
 214+ 5C1D 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5C21 33 33 CC CC
 215+ 5C25 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5C29 55 AA 55 AA
 216+ 5C2D 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5C31 66 33 99 CC
 217+ 5C35 CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5C39 CC 99 33 66
 218+ 5C3D 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C41 33 99 CC 66
 219+ 5C45 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C49 66 CC 99 33
 220+ 5C4D 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C51 10 00 7C 00
 221+ 5C55 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C59 60 00 7E 00
 222+ 5C5D 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C61 06 00 7E 00
 223+ 5C65 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C69 A0 60 20 00
 224+ 5C6D 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C71 00 00 00 00
 225+ 5C75 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C79 70 00 00 00
 226+ 5C7D 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5C81 00 7E 00 00
 227+ 5C85 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5C89 54 A8 00 00
 228+ 5C8D 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5C91 E0 C0 80 00
 229+ 5C95 FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5C99 00 00 00 00
 230+ 5C9D 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5CA1 07 03 01 00
 231+ 5CA5 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5CA9 10 38 7C FE
 232+ 5CAD 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5CB1 10 10 10 00
 233+ 5CB5 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5CB9 20 40 00 00
 234+ 5CBD 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5CC1 0C 08 00 00
 235+ 5CC5 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5CC9 0E 0E 1E 00
 236+ 5CCD 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5CD1 7C 38 10 00
 237+ 5CD5 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5CD9 E0 E0 F0 00
 238+ 5CDD 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5CE1 60 20 00 00
 239+ 5CE5 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5CE9 08 04 00 00
 240+ 5CED 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5CF1 F0 44 38 00
 241+ 5CF5 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5CF9 28 28 28 00
 242+ 5CFD 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5D01 08 10 10 10
 243+ 5D05 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5D09 20 10 10 10
 244+ 5D0D 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5D11 00 00 00 00
 245+ 5D15 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5D19 00 00 00 00
 246+ 5D1D 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5D21 0F 1C 18 18
 247+ 5D25 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5D29 F0 38 18 18
 248+ 5D2D 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5D31 E0 00 00 00
 249+ 5D35 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5D39 07 00 00 00
 250+ 5D3D 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D41 42 42 3C 00
 251+ 5D45 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D49 7E 7E 3C 00
 252+ 5D4D 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D51 7E 3C 18 00
 253+ 5D55 FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D59 F0 E0 C0 80
 254+ 5D5D FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D61 0F 07 03 01
 255+ 5D65 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D69 1F 3F 7F FF
 256+ 5D6D 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D71 F8 FC FE FF
 257+ 5D75 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D79 78 70 60 00
 258+ 5D7D 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5D81 3C 66 00 00
 259+ 5D85 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5D89 38 10 38 10
 260+ 5D8D 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5D91 44 44 38 00
 261+ 5D95 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5D99 42 42 42 7E
 262+ 5D9D 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5DA1 81 81 81 FF
 263+ 5DA5 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5DA9 54 54 54 7C
 264+ 5DAD FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5DB1 BD AD AD FF
 265+ 5DB5 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5DB9 AC AA EA 00
 266+ 5DBD 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5DC1 7E 66 66 66
 267+ 5DC5 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5DC9 9D 81 42 3C
 268+ 5DCD 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5DD1 A5 A2 00 00
 269+ 5DD5 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5DD9 48 42 42 3C
 270+ 5DDD 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5DE1 99 81 FF 00
 271+ 5DE5 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5DE9 7C 7C 7C 00
 272+ 5DED 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5DF1 F8 F8 F8 00
 273+ 5DF5 FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5DF9 A5 A5 81 FF
 274+ 5DFD 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5E01 52 24 58 80
 275+ 5E05 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5E09 81 76 0C 04
 276+ 5E0D 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5E11 08 18 38 10
 277+ 5E15 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5E19 F5 F5 31 12
 278+ 5E1D 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5E21 F0 F0 30 10
 279+ 5E25 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5E29 7C 7E 78 48
 280+ 5E2D 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5E31 A1 99 42 3C
 281+ 5E35 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5E39 20 22 5C 00
 282+ 5E3D 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E41 24 1E 42 3C
 283+ 5E45 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E49 7C 00 10 00
 284+ 5E4D FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E51 FF FF FF FF
 285+ 5E55
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E55                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E55              ; ------------------------------------------------------------------------------
   2+ 5E55              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E55              ; ------------------------------------------------------------------------------
   4+ 5E55              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E55              ; designed by Leonardo Miliani. More info at
   6+ 5E55              ; www DOT leonardomiliani DOT com
   7+ 5E55              ; ------------------------------------------------------------------------------
   8+ 5E55              ; Code Revision:
   9+ 5E55              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E55              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E55              ; ------------------------------------------------------------------------------
  12+ 5E55
  13+ 5E55              LOGOFONT:   equ $
  14+ 5E55 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E59 00 00 00 00
  15+ 5E5D FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E61 FF FF FF FF
  16+ 5E65 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E69 00 00 00 00
  17+ 5E6D 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E71 0F 0F 0F 0F
  18+ 5E75 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E79 FF FF FF FF
  19+ 5E7D F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5E81 F0 F0 F0 F0
  20+ 5E85 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5E89 0F 0F 0F 0F
  21+ 5E8D 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5E91 F0 F0 F0 F0
  22+ 5E95 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5E99 00 00 00 00
  23+ 5E9D 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5EA1 00 00 00 00
  24+ 5EA5 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5EA9 FF 07 03 00
  25+ 5EAD 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5EB1 FF E0 C0 00
  26+ 5EB5 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5EB9 19 1F 18 18
  27+ 5EBD 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5EC1 98 F8 18 18
  28+ 5EC5 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5EC9 0F 00 00 00
  29+ 5ECD 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5ED1 1F 1C 18 18
  30+ 5ED5 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5ED9 F8 38 18 18
  31+ 5EDD 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5EE1 F0 00 00 00
  32+ 5EE5 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5EE9 FF 00 00 00
  33+ 5EED 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5EF1 FF FF FF FF
  34+ 5EF5 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5EF9 FF FF FF FF
  35+ 5EFD FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5F01 F0 F0 F0 F0
  36+ 5F05 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5F09 0F 0F 0F 0F
  37+ 5F0D 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5F11 30 00 00 00
  38+ 5F15
# file closed: ../include/vdp/logo-fonts.asm
  95  5F15
  96  5F15              ; include ROM/RAM switcher
  97  5F15                  INCLUDE "../include/switcher/switcher-r11.asm"
# file opened: ../include/switcher/switcher-r11.asm
   1+ 5F15              ; ------------------------------------------------------------------------------
   2+ 5F15              ; LM80C - ROM/RAM SWITCHER - R1.1
   3+ 5F15              ; ------------------------------------------------------------------------------
   4+ 5F15              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F15              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F15              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F15              ; kind of warranty: you can use them at your own risk.
   8+ 5F15              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F15              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F15              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F15              ; redistribuite them.
  12+ 5F15              ; https://www.leonardomiliani.com
  13+ 5F15              ;
  14+ 5F15              ; Please support me by visiting the following links:
  15+ 5F15              ; Main project page: https://www.leonardomiliani.com
  16+ 5F15              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F15              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F15              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F15              ; ------------------------------------------------------------------------------
  20+ 5F15              ; Code Revision:
  21+ 5F15              ; R1.0   - 20200718 - First version
  22+ 5F15              ; R1.1   - 20200827 - PIO settings now are part of the file
  23+ 5F15              ;-------------------------------------------------------------------------------
  24+ 5F15
  25+ 5F15              TMP_FW_LOC:     equ     $8000           ; address from where to make a temporary copy of the FW
  26+ 5F15              ;-------------------------------------------------------------------------------
  27+ 5F15              ; THIS CODE WILL BE EXECUTED FROM RAM
  28+ 5F15 3E FC        RAMRUN:         ld      A,%11111100     ; set ROM off and RAM on..
  29+ 5F17 D3 01                        out     (PIO_DB),A      ; ...by setting bit #0 to 0 (and leave VRAM bank #0)
  30+ 5F19 01 59 5F                     ld      BC,END_OF_FW    ; let's copy back FW into low RAM - bytes to copy
  31+ 5F1C 21 00 80                     ld      HL,TMP_FW_LOC   ; source address
  32+ 5F1F 11 00 00                     ld      DE,$0000        ; dest. address
  33+ 5F22 ED B0                        ldir                    ; copy!
  34+ 5F24 AF                           xor     A
  35+ 5F25 D3 01                        out     (PIO_DB),A      ; all LEDs off - finished copying
  36+ 5F27 C3 AE 02                     jp      INIT_HW         ; return control to old init (now into RAM)
  37+ 5F2A
  38+ 5F2A              ;-------------------------------------------------------------------------------
  39+ 5F2A              ; copy the whole contents of ROM into RAM then disable the first memory
  40+ 5F2A 3A B6 5F     ROM2RAM:        ld      A,(basicStarted); check if BASIC is already started
  41+ 5F2D FE 59                        cp      'Y'             ; to see if this is a power-up
  42+ 5F2F 20 0F                        jr      NZ,CNTCP2RAM    ; no, continue copy to RAM
  43+ 5F31                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  44+ 5F31 3E CF                        ld      A,%11001111     ; set mode 3 ("control mode")
  45+ 5F33 D3 03                        out     (PIO_CB),A      ; for PIO port B
  46+ 5F35 AF                           xor     A               ; set LEDs off, RAM on, VRAM on bank #0
  47+ 5F36 D3 01                        out     (PIO_DB),A      ; send settings to PIO register
  48+ 5F38 D3 03                        out     (PIO_CB),A      ; set pins following register's status
  49+ 5F3A 21 E8 60                     ld      HL,TEMPSTACK    ; temporary stack
  50+ 5F3D C3 B1 02                     jp      INIT_HW2        ; jump to re-init HW
  51+ 5F40
  52+ 5F40                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  53+ 5F40 3E CF        CNTCP2RAM:      ld      A,%11001111     ; set mode 3 (mode control)
  54+ 5F42 D3 03                        out     (PIO_CB),A      ; for PIO port B
  55+ 5F44 3E FD                        ld      A,%11111101     ; set pin #0 as HIGH to enable ROM
  56+ 5F46 D3 01                        out     (PIO_DB),A      ; store the value into the internal register
  57+ 5F48 AF                           xor     A               ; set pins to OUTPUT
  58+ 5F49 D3 03                        out     (PIO_CB),A      ; for port B, activating the RAM
  59+ 5F4B 01 59 5F                     ld      BC,END_OF_FW    ; copy FW from ROM to high RAM
  60+ 5F4E 21 00 00                     ld      HL,$0000        ; source address
  61+ 5F51 11 00 80                     ld      DE,TMP_FW_LOC   ; dest. address
  62+ 5F54 ED B0                        ldir                    ; copy!
  63+ 5F56 C3 15 DF                     jp      RAMRUN+TMP_FW_LOC; jump to execute code into RAM
  64+ 5F59
  65+ 5F59              ;-------------------------------------------------------------------------------
  66+ 5F59              END_OF_FW:      equ     $   ; this is the last cell of the firmware
# file closed: ../include/switcher/switcher-r11.asm
  98  5F59
  99  5F59              ; include workspace equates
 100  5F59                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5F59              ; ------------------------------------------------------------------------------
   2+ 5F59              ; LM80C 64K - WORKSPACE EQUATES - R1.1
   3+ 5F59              ; ------------------------------------------------------------------------------
   4+ 5F59              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F59              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F59              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F59              ; kind of warranty: you can use them at your own risk.
   8+ 5F59              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F59              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F59              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F59              ; redistribuite them.
  12+ 5F59              ; https://www.leonardomiliani.com
  13+ 5F59              ;
  14+ 5F59              ; Please support me by visiting the following links:
  15+ 5F59              ; Main project page: https://www.leonardomiliani.com
  16+ 5F59              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F59              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F59              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F59              ; ------------------------------------------------------------------------------
  20+ 5F59
  21+ 5F59              ; set starting of RAM based on computer model
  22+ 5F59                  IFDEF LM80C64K
  23+ 5F59              SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5F59                  ELSE
  25+ 5F59 ~            SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5F59                  ENDIF
  27+ 5F59
  28+ 5F59              ;-------------------------------------------------------------------------------
  29+ 5F59              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5F59              serRdPtr        equ     serInPtr+2
  31+ 5F59              serBufUsed      equ     serRdPtr+2
  32+ 5F59              basicStarted    equ     serBufUsed+1
  33+ 5F59              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5F59              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5F59
  36+ 5F59              ; BASIC WORK SPACE LOCATIONS
  37+ 5F59              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5F59              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5F59              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5F59              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5F59              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5F59              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5F59              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5F59              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5F59              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5F59              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5F59              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5F59              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5F59              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5F59              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5F59              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5F59              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5F59              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5F59              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5F59              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5F59              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5F59              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5F59              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5F59              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5F59              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5F59              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5F59              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5F59              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5F59              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5F59              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5F59              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5F59              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5F59              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5F59              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5F59              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5F59              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5F59              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5F59              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5F59              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5F59              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5F59              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5F59              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5F59              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5F59              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5F59              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5F59              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5F59              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5F59              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5F59              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5F59              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5F59              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5F59              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5F59              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5F59              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5F59              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5F59              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5F59              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5F59              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5F59              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5F59              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5F59              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5F59              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5F59              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5F59              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5F59              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5F59              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5F59              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5F59              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5F59              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5F59              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5F59              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5F59              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5F59              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5F59              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5F59              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5F59              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5F59              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5F59              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5F59              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5F59              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5F59              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5F59              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5F59              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5F59              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5F59              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5F59              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5F59              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5F59              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5F59              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5F59                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5F59              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5F59              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5F59              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5F59              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5F59              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5F59              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5F59              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5F59              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5F59              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5F59              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5F59              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5F59              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5F59                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5F59              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5F59              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5F59              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5F59              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5F59              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5F59                                                      ; from here there are the RAM locations that
 145+ 5F59                                                      ; are saved during SAVE
 146+ 5F59              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5F59              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5F59              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5F59              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5F59              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5F59              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5F59              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5F59              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5F59              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5F59              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5F59              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5F59              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5F59              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5F59
# file closed: ../include/workspace/workspace-r1.1.asm
 101  5F59
 102  5F59              ; END OF ASSEMBLY SOURCE
 103  5F59              ;-------------------------------------------------------------------------------
 104  5F59
# file closed: LM80C_64K-firmware-r1.12.asm

Value    Label
------ - -----------------------------------------------------------
0x6196   CHCSNDDTN
0x6194   CHBSNDDTN
0x6001   NMIFLG
0x5F40   CNTCP2RAM
0x5F59   END_OF_FW
0x5F15   RAMRUN
0x8000   TMP_FW_LOC
0x4E46   CLCN323
0x4E1D   CLCN325
0x4DFB   CLCN322
0x4DF8   CLCN321
0x4DE4   CLCN32Z
0x4DBC   CLCN32T
0x4DB7   DIV_32_16SB
0x4DB4   DIV_32_16OF
0x4DA3   DIV_32_16LP
0x4D8E   DV16_16_LP
0x4D7D   DIV_16_8LP
0x4D6E   DIV_8_8LOOP
0x4D5C   MU32_2
0x4D51   MUL_32L
0x4D42   EXMUL16
0x4D39   MLP1
0x4D32   MLP
0x4D12 X TSTBIT
0x4CCB   BINIT
0x4CDE   CHKBIN
0x4CAD   BITOUT2
0x4CA9   BITOUT
0x4C9B   ZEROSUP
0x4C95 X BIN2
0x4C7D   NOSUB7
0x4C81   HEXIT
0x4C5D   HEXLP
0x4C62   HEXLP1
0x4C8A   HXERR
0x4C6A   GETHEX
0x4C4D   ADD301
0x4C3D   ADD30
0x4C27   HEX4
0x4C25   HEX3
0x4C16   HEX1
0x4C18   HEX2
0x4BC5   CNFRQN
0x4B96   RNDKTX
0x4B02   MSWROK
0x4B4E   FRMTOK
0x4AE2   MSPTOK
0x4ACC   INITFN
0x4AB8 X INITDSK
0x4B1C   FRMTXT
0x4AAB   CFINIT
0x4AEA   MSTTXT
0x4B65   DSKUND
0x4B72   DSKRNM
0x4A98   DSKFRM
0x60F6   TPHL
0x4A53   ABRTXT
0x4A37   ERASED
0x4A45   ABRTDS
0x4BA4   CNFREQ
0x4A29   ERSTX
0x4BC7   CHKFLNM
0x49AB   SVERR
0x49A4   SVEND
0x49B0   TXTSVG
0x497D   SAVE1
0x4992   SAVEST
0x49DC   DOS_ERR
0x48DA   LDERR
0x4905   GET3AR
0x48D3   LDEND
0x48DF   TXTLDG
0x49E3   CHK1AR
0x4BD1   CHKFN1
0x48BE   LOADST
0x48F0   LDSVPT
0x4893   CHKDOS
0x485B   PRTEND
0x484F   PRTK1
0x484C   OPNQT1
0x4834   CLSQT1
0x4890   CHKEY5
0x481C   PTCHR1
0x488D   CHKEY4
0x4824   CLSQT
0x47E7   PRTK3
0x47FF   PRTCHR
0x4836   OPNQT
0x47EA   CNTLTK
0x47D5   LDKEY
0x4884   CHKEY2
0x484E   PRTCKEY
0x487F   CHKEY1
0x47BE X PRTK2
0x47BC   PRTK4
0x47A8   CPKYEND
0x47A0   CPKEY1
0x4798   CPKEY3
0x4791   CPKEY2
0x4781   CPKEY
0x4773   DECLN1
0x485D   SETREP
0x4743   KEYCH
0x47AA   LSTKEYS
0x4721   HLPERR
0x46FF   DIRMOD
0x46C6   EXNRM
0x46B8   ENCHB
0x468D   SRLCNT
0x4675   STRPAR
0x4658   SETPAR2
0x4649   BITS8
0x463E   BITS7
0x464D   SETPAR
0x4634   BITS6
0x4611   SET_CTC
0x46E3   CTC_CFG
0x46EE   SCERR1
0x4600   SET_PT
0x45E7   CKBPS
0x46CD   SUP_BPS
0x45DB   SETSER
0x45CE   DEFSER
0x4583   CNTSER3
0x4566   CNTRX2
0x4571   CNTSER2
0x4533   SERLED
0x452D   SRPT2
0x450A   RPTRSSR
0x44FD   RSTSERS
0x4537   CNTSER
0x44F9   CHKZSER
0x44EA   SERVAR
0x46F2   SCERR
0x616C   SIOBFR
0x616B   STPBT
0x616A   PARBT
0x6169   DATABT
0x6167   BPS
0x6166   PRTNUM
0x44A4   RPTCVBF
0x4495   RPCLTMB
0x4488   CNTVALY
0x4458   CNTCL7
0x4434   CNTCL6
0x4410   CNTCL5
0x43EE   CNTCL4
0x43C8   CNTCL3
0x43A4   CNTCL2
0x4482   VALIDY
0x4380   CNTCL1
0x447D   VALIDX
0x4351   PLTCRL
0x4342   DLSZ
0x435A   ENDCRL
0x4315   RPTCL1
0x4302   RPTCRL
0x435E   DRWCRL
0x6170   DC
0x616E   YI
0x616C   XI
0x6168   YC
0x6166   XC
0x4291   DXGR
0x42BA   ENDDRAW
0x4261   CNTDRW
0x4245   RPTDRW
0x4242   STRE2
0x4235   ER2
0x4D63   negHL
0x4212   Y1GR
0x41E8   X1GR
0x4D60   absHL
0x449C   CLRVDBF
0x448D   CLRTMBF
0x6172   DX
0x6170   SY
0x616E   SX
0x616C   E2
0x616A   ER
0x6168   Y2
0x6166   X2
0x6160   Y1
0x615E   X1
0x4D6A   DIV_8_8
0x4152   PXLSET
0x412E   CNTPLT1
0x414E   NOGD
0x415A   XY2HL
0x40C9   PNTEND
0x40D3   CTPOINT
0x4080   PAINT5
0x404F   PAINT3
0x4090   CHECKPY
0x403C   PAINT2
0x410D   CNTPLOT
0x400C   MNPAINT
0x4009   PAINT1
0x4008   PAINT11
0x408F   CHECKPA
0x3FFA   PAINT0
0x4087   EXITPAI
0x3FED   NXTLOOP
0x408B   EXITPA2
0x40E7   PNTRTN
0x44AB   CLRPRM
0x616A   ORGSP
0x6169 X SPB
0x6168 X SPA
0x6166   PNT
0x3F7F   GPCPCH1
0x3F75 X GPCPCHR
0x3F5B   GPNTCO1
0x3F51 X GPNTCOL
0x3F46   RPGPNT
0x3F31   GPNT
0x3F1C   CNTGPT2
0x3F9C   CKCOL
0x616C   TMPHL
0x616A   NUMCHR
0x6168   CHRPNT
0x6166   TMPADR
0x615E   MIXCOL
0x6160   TMPCLR
0x6164   GY
0x6162   GX
0x44C4   GMERR
0x3EB6   CHKG2M
0x3EB0   CHKCLR0
0x3E7B   RPTLDCL
0x3E72   LOADCLR
0x3E86   SETBRCL
0x3E9F   MIXCLRS
0x3E6B   CLREX2
0x3E62   CLRG2
0x3E59   CLRG1
0x3E4F   CLRTXT
0x3E52   CLRMC
0x3EAC   CHKCLR1
0x3DA7   CKMAGN
0x3DF4   CHKSCAR
0x3D9C X SETVDP
0x3DB5   SCVDP
0x3D78   RPTPS
0x3D73 X DIR_PAU
0x3D4D X RECWRD
0x3D29 X ARET
0x3D04   ATNTAB
0x3CFA   ATN1
0x3CB3   SINTAB
0x3C97   SIN1
0x3CAF   QUARTR
0x3CAB   HALFPI
0x3C44   RND2
0x3C28   RND1
0x3C55   RNDTAB
0x5FF4   LSTRND
0x3C4D   RESEED
0x5FD1   SEED
0x3BD4   SUMLP
0x3BCB   SMSER1
0x3B9B   EXPTAB
0x3B43   POWER2
0x3B26   POWER1
0x3B08   NEGAFT
0x3AD3   EXPTEN
0x3AE0   NOENED
0x3AB5   SUPTLZ
0x3AC1   DOEBIT
0x3A90   TRYAGN
0x3A81   DIGTXT
0x3AF6   POWERS
0x3A70   MAKNUM
0x3A4B   GTSIXD
0x3A54   INRNG
0x3A36   SIXDIG
0x3AE3   RNGTST
0x3ADD   JSTZER
0x3A27   SPCFST
0x61B7   PBUFF
0x39D1   MULTEN
0x39C6   ENDCON
0x39D0   SCALPL
0x39BA   SCALMI
0x39FA   EDIGIT
0x39A5   EXPLP
0x39B7   CONEXP
0x39B3   DPOINT
0x39D8   ADDIG
0x398F   MANLP
0x3987   CNVNUM
0x3968   MLDBLP
0x3940   DCBCDE
0x3909   CMPFP
0x38D1   DETHLB
0x38CA   INCHL
0x387D   RETREL
0x385D   MLSP10
0x3850   OVTST1
0x3855   OVTST2
0x3856   OVTST3
0x3802   RESDIV
0x5FC3   DIVSUP
0x37EF   DIVLP
0x5FCF   DIV4
0x5FC4   DIV1
0x5FC8   DIV2
0x5FCC   DIV3
0x37BC   DIV10
0x3754   NOMADD
0x3743   MUL8LP
0x3766   BYTSFT
0x373A   MULT8
0x61C4   MULVAL
0x3832   ADDEXP
0x3718   FPMULT
0x370F   MULLN2
0x39EF   RSCALE
0x3BBC   SUMSER
0x37CA   DVBCDE
0x36CA   LOGTAB
0x36C6   UNITY
0x36B4   SHRLP
0x36B1   SHRITE
0x36A4   SCALLP
0x61B6   SGNRES
0x3675   FPROND
0x3664   RONDB
0x3648   NORMAL
0x3644   SAVEXP
0x3650   PNORM
0x362B   CONPOS
0x36B8   SHRT1
0x3663   RONDUP
0x3682   PLUCDE
0x361D   MINCDE
0x36A2   SCALE
0x38DA   SIGNS
0x35F7   NOSWAP
0x35DA   SUBCDE
0x35D4   SUBPHL
0x35DD   FPADD
0x3AF2   HALF
0x35CB   ROUND
0x35C8 X ENDINK2
0x35AD   CHKINK
0x35A9   SRTINK
0x35BF   ENDINK
0x3595   INKEY2
0x3586   CMP_A
0x3534   NOS3
0x351B   NOS2
0x3508   NOS1
0x34D8   SNDOVR
0x352B   WRTSND
0x34A3   SND1
0x3435   RPVOLCG
0x3441   VOLCH
0x339A   PKEPRMS
0x3384   SYSRET
0x3376   NOSYSPR
0x3338   NMIINT
0x3344   NMIVR1
0x332E   NMIEINT
0x332A   NMI2
0x3335   NMIDINT
0x3308   DISNMI
0x3319   NM1
0x5FC1   OTPORT
0x32D1   WAITLP
0x32D0   NOXOR
0x5FC0   OUTSUB
0x32DA   SETIO
0x5FF8   INPSUB
0x5FF9   INPORT
0x3299   VAL2
0x329C   VAL3
0x3643   RESZER
0x325A   RSTSTR
0x32A5   MIDNUM
0x3226   LVINSTR
0x3230   CNTZIN
0x31D0   RP2INST
0x31F9   CNT1INS
0x31A9   RPTINST
0x321B   RZINSTR
0x6174   DY
0x3198   EMPTINS
0x616E   TF
0x616C   TP
0x616A   PT2
0x6166   PT
0x6164   ADRS2
0x6162   LNS2
0x6160   ADRS1
0x615E   LNS1
0x311F   ALLFOL
0x3117   MID1
0x4CEC   BINERR
0x3115   RIGHT1
0x32A0   LFRGNM
0x32F0   MAKINT
0x30F4 X GTFLNM
0x30E5   GETLEN
0x30CE   POPHL
0x30AF   GETSTR
0x30A6   TSALP
0x309C   SSTSA
0x30B5   GSTRHL
0x3009   GRBARY
0x3040   SCNEND
0x2FE9   GNXARY
0x301A   STRADD
0x2FEA   ARRLP
0x2FD4   SMPVAR
0x3017   STPOOL
0x2FC3   GRBLP
0x2FB5   GARBLP
0x2FA6   TESTOS
0x2F8A   GRBDON
0x2F79   PRSLP
0x2F6E   PRNUMS
0x2F4F   TSTOPL
0x2F43   CRTSTE
0x2F34   QTSTLP
0x2F1E   MKTMST
0x30A5   TOSTRA
0x2F21   CRTMST
0x2F88   TESTR
0x310D   TOPOOL
0x2EFF   STR1
0x2F27   SVSTAD
0x2EE8   CHEKFN
0x2E60   PASSA
0x388B   RETINT
0x2FB2   GARBGE
0x2E4B   FRENUM
0x2E2A   ENDTMR
0x2DF6   FNDELP
0x2E15   ENDDIM
0x2DD4   ZERARY
0x3960   MLDEBC
0x2DB6   DEFSIZ
0x2DAE   CRARLP
0x2D8E   BSERR
0x2DF1   FINDEL
0x2D75   NXTARY
0x2D93   CREARY
0x2D61   FNDARY
0x2D39   SCPTLP
0x2D17   ZEROLP
0x2D28   RETNUL
0x2D25   RETADR
0x2CE6   FNTHR
0x2CF1   CFEVAL
0x2CD8   FNDVAR
0x3764   POPHRT
0x61AE   FNARG
0x2D33   SBSCPT
0x2CBE   NSCFOR
0x2D5B   ARLDSV
0x2CAE   NOTSTR
0x2C93   ENDNAM
0x2C9F   CHARTY
0x2C92   SVNAM2
0x2C7B   GTFNAM
0x60EC   LCRFLG
0x2C68   DIMRET
0x3886   FLGREL
0x387F   FLGDIF
0x2C2F   CMPSTR
0x30B6   GSTRDE
0x30B2   GSTRCU
0x2C47   CMPRES
0x2C05   CMPLG1
0x2C03   CMPLOG
0x2BEC   PXOR1
0x2BDF X PAND1
0x2BE4   POR1
0x2E50   ACPASS
0x38B5   FPBCDE
0x2BC4   CNTLGC
0x2BAA   SGNEXP
0x2BA1   GOFUNC
0x2B99   FNVAL
0x2B5A   FRMEVL
0x2B52   RETNUM
0x389D   INVSGN
0x2B3E   EVLPAR
0x2B68   FNOFST
0x2E92   DOFN
0x2C51   EVNOT
0x2B46   MINUS
0x4CC1   BINTFP
0x4C51   HEXTFP
0x2B1B   NOTAMP
0x2B57   CONVAR
0x38A5   STAKFP
0x2AD9   STKTHS
0x3065   CONCAT
0x2BF1   TSTRED
0x612D   CUROPR
0x2AB1   FOPRND
0x2A95   RLTLP
0x2A88   EVAL3
0x6138   NXTOPR
0x2A85   EVAL2
0x2AF0   OPRND
0x2A7C   EVAL1
0x2A75   OPNPAR
0x2A6B   TSTSTR
0x2A57   KILFOR
0x38C3   LOADFP
0x35CE   ADDPHL
0x38B2   PHLTFP
0x2A1F   NEXT1
0x2A11   FANDT
0x29E8   EXTIG
0x29CD   MORDT
0x397B   ASCTFP
0x29C1   LTSTND
0x2F31   DTSTR
0x29A7   ITMSEP
0x29AA   STRENT
0x29B6   INPBIN
0x29F8   FDTLP
0x298C   ANTVLU
0x2960   NEDMOR
0x2964   GTVLUS
0x2958   NXTITM
0x2933   NOPMPT
0x2EDA   IDTEST
0x6135   READFG
0x2908   BADINP
0x28F6   REDO
0x28E7   SPCLP
0x28E0   DOSPC
0x32EA   FNDNUM
0x28C0   ZONELP
0x28AD   CNTEND
0x2F72   PRS1
0x2F2D   CRTST
0x3A19   NUMASC
0x288A   PRNTST
0x28EF   NEXITM
0x28B2   DOCOM
0x28CB   DOTAB
0x2843   PRNTLP
0x283C   MRPRNT
0x2825   IF0
0x282E   IF1
0x281C   IFGO
0x2800   ONGOLP
0x27FF   ONGO
0x32ED   GETINT
0x38CC   FPTHL
0x38CF   DETHL4
0x2F09   SAVSTR
0x30D0   BAKTMP
0x6127   TMPSTR
0x27E0   MVSTPT
0x27D8   CRESTR
0x61B2   FPREG
0x27B1   LETSTR
0x27E9   LETNUM
0x2A6C   CHKTYP
0x2A79   EVAL
0x60ED   TYPE
0x2C76   GETVAR
0x2788   NXTSTT
0x2785   NXTSTL
0x277E   NXTDTA
0x2779   RETLIN
0x273B   RUNLIN
0x26F4   STORED
0x26AA   GTLNLP
0x26A7   GETLN
0x38EF   CMPNUM
0x391C   FPINT
0x61B5   FPEXP
0x2686   DEPINT
0x2683 X POSINT
0x34DE   NOISUP
0x2680   FPSINT
0x2678   CHKLTR
0x5FFF   CHKSUM
0x266B X ACCSUM
0x264C   ERRINT
0x613A   ERRLIN
0x263B   NOLIN
0x2625   INPBRK
0x6002   BRKFLG
0x260F   STALL
0x2619   BRK
0x61AA   NXTDAT
0x25FC   UPDATA
0x25FB   RESTNL
0x25BE   ONJMP
0x25BD   IFJMP
0x2628   ENDPRG
0x2596   RUNCNT
0x2592   PUTFID
0x3874   TSTSGN
0x2589   SAVSTP
0x38C0   BCDEFP
0x2A67   GETNUM
0x2A6A   TSTNUM
0x254D   FORFND
0x2531   FORSLP
0x612F   LOOPST
0x2516   CNTWTSP
0x250A   WTSPC
0x2502   LVSRLN
0x24F7   SRCLN1
0x24D4   OUTWRD
0x24E2   NXTLN
0x24BB   LSTLP3
0x24B8   LSTLP2
0x24AC   LST07
0x24A9   LST08
0x406E   PAINT4
0x247E   LST02
0x247B   LST05
0x243E   LST06
0x2467   LST03
0x2442   LSTNOT
0x2423   LST01H
0x2487   LISTLP
0x24F6   SRCLN
0x24F0   SRCHLIN
0x2420   LST01
0x244F   LSTALL
0x3D2A   GETINP
0x4CF1   MONOUT
0x23CB   SND2VID
0x23B8   INCLEN
0x60EB   CURPOS
0x5FFB   LWIDTH
0x23BC   DINPOS
0x2FA4   POPAF
0x238D   CHKSYN
0x237E   OUTIT
0x2381   OUTNBS
0x4D19   OUTNCR
0x236A   PUTBUF
0x2899   ENDINP
0x2364   GMNCR
0x236F   PUTCTL
0x232F   PROCES
0x23D9   CLOTST
0x2307   KILIN
0x22FC   DELCHR
0x2316   MORINP
0x2304   OTKLN
0x22F0   ECHDEL
0x5FFD   NULFLG
0x22DC   DODEL
0x22C3   NXTCHR
0x22BD   TSTREM
0x22BA   SETLIT
0x229C   NOCHNG
0x2293   NOSPC
0x22A4   MATCH
0x2282   NXTBYT
0x2272   GETNXT
0x2270   SEARCH
0x22A8   RETNAD
0x2257   FNDWRD
0x22D3   ENDBUF
0x22CC   CPYLIT
0x22AC   MOVDIR
0x222D   CRNCLP
0x60EE   DATFLG
0x6003   RINPUT
0x2208   DOAGN
0x61AC   FNRGNM
0x6133   FORFLG
0x613C   CONTAD
0x6119   TMSTPT
0x611B   TMSTPL
0x61A6   VAREND
0x612B   STRBOT
0x6136   BRKLIN
0x21D9   INTVAR
0x21AC   SRCHLP
0x608E   BASTXT
0x219D   FNDEND
0x2191   PTRLP
0x21D5   RUNFST
0x2184   MOVBUF
0x218C   SETPTR
0x2156   SFTPRG
0x2165   INEWLN
0x2755   ULERR
0x214E   LINFND
0x21A9   SRCHLN
0x6134   LSTBIN
0x25B6   EXCUTE
0x2224   CRUNCH
0x230D   GETLIN
0x20FA   GETCMD
0x20EC   POPNOK
0x3A06   LINEIN
0x600A   HLPLN
0x20E8   PTLN
0x20CB   ERRIN
0x2891   STTLIN
0x5FFE   CTLOFG
0x20A5   NRERR
0x20A2   IMERR
0x209F   TMERR
0x209C   OVERR
0x2099   UFERR
0x2096   DDERR
0x2093   NFERR
0x2090   DZERR
0x6131   DATLIN
0x2087   DATSNR
0x2085   LDG1ND
0x2074   LDG1
0x2067   EXITGM
0x20A7   ERROR
0x2062   OMERR
0x61A8   ARREND
0x204A   CHKSTK
0x203F   MOVLP
0x203C   MOVSTR
0x2053   ENFMEM
0x2039   MOVUP
0x2030   INDFND
0x201A   LOKFOR
0x2016   BAKSTK
0x2010   BRKMSG
0x200B   OKMSG
0x200A   ZERBYT
0x2006   INMSG
0x1FFF   ERRMSG
0x1F7D X DEFFNKS
0x1F7B   AUTORP
0x230D   TTYLIN
0x26A1   FCERR
0x2BBD   POR
0x2BC2   PXOR
0x2BBA   PAND
0x362E   BNORM
0x3B16   POWER
0x376B   DINT
0x3773   MOD
0x37C8   DIV
0x3716   MULT
0x35D8   PSUB
0x39F5   PADD
0x1F08   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x21C9   NEW
0x4937   SAVE
0x489D   LOAD
0x26CB   CLEAR
0x23F4   LIST
0x2652   CONT
0x2840   PRINT
0x4CF4   RESET
0x3358   SYS
0x3D40   WIDTH
0x3EBF   GPRINT
0x32FE   NMI
0x4726   KEY
0x3D2C   CLS
0x4708   HELP
0x44C9   SERIAL
0x3FAF   PAINT
0x42BE   CIRCLE
0x4185   DRAW
0x40F2   PLOT
0x3E04   COLOR
0x3D6A   PAUSE
0x3413   VOLUME
0x344C   SOUND
0x33C0   LOCATE
0x3540   VREG
0x33F2   SREG
0x33B5   VPOKE
0x3D53   DOKE
0x33B0   POKE
0x2E65   DEF
0x32BC   WAIT
0x4A5C   DISK
0x49FC   ERASE
0x49C1   FILES
0x27F0   ON
0x32B6   POUT
0x261E   STOP
0x2781   REM
0x275A   RETURN
0x272B   GOSUB
0x25E6   RESTOR
0x280E   IF
0x2717   RUN
0x273C   GOTO
0x2796   LET
0x2953   READ
0x2C71   DIM
0x2919   INPUT
0x277F   DATA
0x2A1C   NEXT
0x251D   FOR
0x2620   PEND
0x1E9A   WORDTB
0x1D09   WORDS
0x3241   MID
0x3237   RIGHT
0x3111   LEFT
0x4C8F   BIN
0x4BFE   HEX
0x3101   CHR
0x30F0   ASC
0x3271   VAL
0x2EF9   STR
0x456D   RXEND
0x30E1   LEN
0x3141   INSTR
0x409F   POINT
0x357B   INKEY
0x3567   SSTAT
0x355C   VSTAT
0x338D   VPEEK
0x3D48   DEEK
0x3386   PEEK
0x3CDD   ATN
0x3CC8   TAN
0x3D89   SCREEN
0x3C67   SIN
0x3C61   COS
0x3B5B   EXP
0x36D7   LOG
0x3BEC   RND
0x3B0D   SQR
0x2E5D   POS
0x32AA   INP
0x2E2F   FRE
0x6168   PT1
0x5FBD   USR
0x3899   ABS_
0x3947   INT
0x2E19   TMR
0x3883   SGN
0x1CC5   FNCTAB
0x20ED   PRNTOK
0x4733   RESFN
0x1C39   BRKRET
0x6096   STACK
0x1C4E   BFREE
0x3A0E   PRNTHL
0x1C45   BLNSPC
0x1C9D   DOSMSG
0x1C26   SETTP1
0x21CA   CLRPTR
0x6006   STRSPC
0x60EF   LSTRAM
0x1BF6   NODOS
0x2387   CPDEHL
0x208D   SNERR
0x26A6   ATOH
0x1BD1   SETTOP
0x1BAD   MLOOP
0x622B   STLOOK
0x1BBF   TSTMEM
0x25D6   GETCHR
0x220C   PROMPT
0x1CBA   MEMMSG
0x1B97   MSIZE
0x1BAA   MNOASK
0x345A   CTSNDC
0x61C7   PROGST
0x28A3   PRNTCRLF
0x21EF   CLREG
0x24CA   FNDTOK
0x1FFF   INITBE
0x1F26   INITAB
0x1B7C   SYSINIT
0x5FB7   WRKSPC
0x2E51   ABPASS
0x2886   PRNTNB
0x268C   DEINT
0x1B75   CSTART
0x1C36   WARMST
0x1B6E   STARTB
0x191F X ERRORS
0x1B59   D8MSG
0x191D X D8PTR
0x1B4D   D7MSG
0x191B X D7PRT
0x1B39   D6MSG
0x1919 X D6PTR
0x1B2F   D5MSG
0x1917 X D5PTR
0x1B2A   D4MSG
0x1915 X D4PTR
0x1B25   D3MSG
0x3976   NOMLAD
0x1913 X D3PRT
0x1B17   D2MSG
0x1911 X D2PRT
0x1B0B   D1MSG
0x190F X D1PRT
0x1AFB   D0MSG
0x190D X D0PTR
0x1AEA   NRMSG
0x190B X NRPRT
0x1AD4   IMMSG
0x1909 X IMPRT
0x1ACA   HPMSG
0x1907 X HPPTR
0x1AB4   SOMSG
0x1A9B   SAMSG
0x1903 X SAPTR
0x1A86   SCMSG
0x1901 X SCPTR
0x18FF X GMPRT
0x1A6A   BNMSG
0x18FD X BNPTR
0x1A5F   HXMSG
0x18FB X HXPTR
0x1A4F   MOMSG
0x18F9 X MOPTR
0x18F7 X UFPTR
0x1A2A   CNMSG
0x18F5 X CNPTR
0x1A0F   STMSG
0x18F3 X STPTR
0x1905 X SOPTR
0x19FF   LSMSG
0x18F1 X LSPTR
0x19EB   OSMSG
0x4D4F   MU32_1
0x18EF X OSPTR
0x19DC   TMMSG
0x18ED X TMPTR
0x19C8   IDMSG
0x18EB X IDPTR
0x19B7   DZMSG
0x18E9 X DZPTR
0x19A2   DDMSG
0x18E7 X DDPTR
0x1994   BSMSG
0x18E5 X BSPTR
0x1985   ULMSG
0x4887   CHKEY3
0x18E3 X ULPTR
0x1977   OMMSG
0x18E1 X OMPTR
0x196E   OVMSG
0x18DF X OVPTR
0x1958   FCMSG
0x18DD X FCPTR
0x194C   ODMSG
0x18DB X ODPTR
0x1937   RGMSG
0x18D9 X RGPTR
0x1930   SNMSG
0x18D7 X SNPTR
0x191F   NFMSG
0x18D5 X NFPTR
0x18D5   ERRTBL
0x003E   D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x28E5   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x18BE   RSTIOBF
0x18BD   CLRBUFF
0x18B3 X CHK_NAM_LV
0x18B2   CHK_C_CF
0x1A39   UFMSG
0x4C34   BYT2ASC
0x1879   PRN_WHEX1
0x1877 X PRN_WHEX
0x188E   BYTEHEX
0x186E   PRN_HEX1
0x186D X PRN_HEX
0x1864   PRNTSIZ
0x4DE8   CLCN32
0x1840   CHKNMVAL3
0x189E   CHK_NAM
0x1830   CHKNMVAL2
0x6160   DKNMPT
0x6091   BUFFER
0x182A   CHKNMVAL1
0x6162   DKLNPT
0x181B   CHKDSKVAL2
0x181A   CHKDSKVALE
0x1805   CHKDSKVAL1
0x17E4   CHATOZE
0x17D9   CH0TO9E
0x17D1   CH0TO9
0x17AA   RND_ID1
0x179E X LDMSCT1
0x1777   FNDFREDIR5
0x1783   FNDFREDIR3
0x1758   FNDFREDIR2
0x174E   FNDFREDIR1
0x1764   FNDFREDIR4
0x1733   DSKUNDTXT
0x1719   DSKUNDPR
0x17DC   CHATOZ
0x17BE   RND8
0x172E   DSKUNDFL2
0x16FD   DSKUNDFL1
0x328F   VAL1
0x16F1   DSKUNDFL
0x16EA   CHKSTNM7
0x16E4 X CHKSTNM5
0x16ED   FLNTEXS
0x16EF   FLEXST
0x16C4   CHKSTNM6
0x16BA   CHKSTNM3
0x16CF   CHKSTNM10
0x169B   CHKSTNM8
0x1695 X CHKSTNM2
0x168F   CHKSTNM1
0x1678   FIL_ERA2
0x166D   FIL_ERA1
0x167B   FIL_ERA3
0x1645   FIL_ERA6
0x164C   FIL_ERA5
0x15FB   FIL_ERASE
0x15EF   LDFL5
0x15F6   LDFLEX
0x15B8   LDFL3
0x1598   LDFL2
0x1594   LDFL1
0x1578   LDFL4
0x153E   LODFILE
0x1532   SAVFL12
0x150D X SAVFL11
0x1539   SAVFLEXT
0x14ED   SAVFL4
0x14DB   SAVFL10
0x14BF   SAVFL2
0x1497   SAVFL9
0x1847   DE2HL
0x144E X SAVFL7
0x144A   SAVFL6
0x4D89   DIV_16_16
0x1437   SAVFL1
0x61A4   PROGND
0x142F   SAVFL3
0x173E   FNDFREDIR
0x1685   FILE_EXIST
0x178C   LDENTRIES
0x13E5   SAVFILE
0x13D1 X EXITFLS
0x1854   PRN16ASCII
0x4D44   MUL_U32
0x1851   PRN32ASCII
0x184C   HL2DE
0x1382   LSTFILES7
0x1369 X LSTFILES5
0x2504   TSTSPC
0x2601   TSTBRK
0x1350 X LSTFILES8
0x185A   PRN16ASCIX
0x132F   LSTFILES21
0x1332   LSTFILESPR
0x13D6   FILETP
0x1327   LSTFILES20
0x130B   LSTFILES3
0x12F8   LSTFILES4
0x12F2 X LSTFILES2
0x12EC   LSTFILES1
0x1392   PNTSTATS
0x12C0   INPR1
0x2F6F   PRS
0x17E7   CHKDSKVAL
0x12A7   LST_FILES
0x129D   TLFLSTX
0x128C   ALFLSTXT
0x1281   TLSCTTX
0x1275   DSKNMTX
0x60F5   DOSER
0x0046   D7
0x1266   DOSVERSERR
0x0040   D4
0x1262   LODERR
0x0048   D8
0x125E   FLNTFND
0x003A   D1
0x125A   NAMERR
0x0044   D6
0x1256   DUPLERR
0x0042   D5
0x1252   DSKFULL
0x126D   RET_ERR
0x003C   D2
0x1680   WRT_ERR
0x179B   LDMSCT
0x122B   DSK_RNM
0x1225   DOS_FT8
0x1212   DOS_FT9
0x121F   DOS_FT10
0x11F8   DOS_FTA
0x1223   DOS_FT7
0x2398   OUTC
0x124E   D2ERR
0x17A7   RND_ID
0x11AF X DOS_FT5
0x126B   D1ERR
0x181F   CHKNMVAL
0x1187   DOS_FT2
0x116B X DOS_FT0
0x116C   DOS_FT1
0x115E   DOS_FTC
0x4D9E   DIV_32_16
0x60F1   DOSBFR
0x18C9   CLRDOSBF
0x18B4   CLRIOBF
0x10F6   DSK_INIT
0x6111   ENDMEM
0x610F   SRTMEM
0x610D   TPBF4
0x616A   RADIUS
0x610B   TPBF3
0x6109   TPBF2
0x6107   TPBF1
0x6105   RAM_PTR
0x6103   LSB_SCT
0x6101   MSB_SCT
0x6100   SCT_SIZ
0x60FE   BYT_SIZ
0x60FC   NTR_NBR
0x60FA   DIR_SCT
0x60F6   DIR_STRT
0x60F6   TMPDBF
0x10F4   DSKDIRADR
0x10E5   DFSCT0
0x10D4   CF_WR_SEC2
0x10D2   CF_WR_SEC1
0x10E1   CF_WR_EXIT
0x10B9   CF_WR_SEC
0x10AC   CF_RD_SECT
0x10B6   CF_RD_EXIT
0x3AD1   OUTEXP
0x60F3   IOBUFF
0x10A0   CF_RD_CMD
0x108D   CF_RD_SEC
0x1081   CF_STANDBY
0x107E X CR_DV_ERR
0x107F   CR_DV_RD_E
0x60F8   DAT_STRT
0x1072   CR_DV_RD_1
0x1359   LSTFILES6
0x104B   CF_SETSTR
0x103E   CF_DAT_RDY
0x103C   RETERR
0x102F   CF_CMDRDY
0x106D   CR_DEV_RDY
0x101F   CF_NOP
0x1009   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0EE1   CNTFNK
0x0EF4   PRNTFNK
0x0EE7   PUTCHRBUF1
0x0ECD   LDFNKEYCHR
0x600E   FNKEYS
0x6008   LINEAT
0x1C5C   SIGNON
0x0EB4 X LVKBRDCHK
0x0EAD   PNT2VD
0x0EA0   PUTCHRBUF
0x0E8E   SNDKEYTOBFR
0x0EB5   PRNTFNKEY
0x0E86   CHKFNK
0x0F01   FNKEYSORD
0x0E80   CNTKBCK
0x0003   CTRLC
0x600D   AUTOKE
0x3631   BNRMLP
0x0E6D   SENDKEY
0x0E3E   SETNEWAUTO
0x0EB0   LVKBRDCHK2
0x600C   KEYDEL
0x0E4E   CHKAUTO
0x619D   KEYTMR
0x0E60   NEWKEY
0x0F89   KBMAP_ALT
0x0FC9   KBMAP_CTRL
0x0E05   CHKALT
0x0E0C   LOADMAP
0x0F49   KBMAP_SFT
0x0DFC   CHKCTRL
0x0F09   KBMAP
0x0DE8   CHKLN
0x619C   STATUSKEY
0x619B   LASTKEYPRSD
0x0DD0   ENDCTRLCK
0x0DCA   TESTCTRL
0x0DE6   FINDKEY
0x0DBD   TESTALT
0x6199   KBTMP
0x0DD4   NOKEYPRSD
0x0D8E   RPTKBDRD
0x0D8A   CHECKKBD
0x0D7C   CHECKCTRL
0x619F   CONTROLKEYS
0x0D6E   CHECKALT
0x0D2E   CNTCHKSND
0x0CF3   CHKSNDCH
0x0CC1   RPTWLCMBP
0x0CD7   NOBPDAT
0x0CBE   SENDSND
0x0CCF   WLCBPDAT
0x0CE4   WRTSNDREG
0x0CDF   SETSNDREG
0x0CA5   SNDREGCFG
0x0C91   CLRPSGREGS
0x0C8D   EMPTSNDBFR
0x0B3F X VDPMODESETEX2
0x0B37 X VDPMODESETMC
0x0B2F X VDPMODESET2
0x2F2E   QTSTR
0x0B27 X VDPMODESET1
0x0B15   SENDCHRPTRNS
0x5655   CHRST88
0x0B13   NXTCHAR
0x4E55   CHRST68
0x0AF5   LDREGVLS
0x0B1F   VDPMODESET
0x0ADE   RSTVDPRAMREG
0x6192   CHASNDDTN
0x0ACF   EMPTVRM
0x0A64 X CNTNULL2
0x0A57   RPTNLLSRC2
0x4D2A   MUL16
0x0A32   ADDNEWLINE
0x09FF   SNDCHRTOBFR
0x09E6   CNTNULL
0x09D6   RPTNLLSRC
0x0A1E   PRNTRETURN
0x6164   TMPBFR4
0x6162   TMPBFR3
0x6160   SRTTXT
0x6160   TMPBFR2
0x09AC   RPTEMPTYROW
0x0991   WRITEBUF
0x0969   LOADNEXTCOL
0x6166   VIDEOBUFF
0x0957   SCROLLNXTRW
0x6190   VIDTMP2
0x618E   VIDTMP1
0x0936   EXITCURSOR_ON
0x0920   EXITCURSORDOWN
0x0900   EXITCURSORRGHT
0x08FA   CONTCRSRGT
0x08E7   CHCKYPOS2
0x08CC   EXITCURSORUP
0x08A3   CHKYPOS
0x0890   EXITCURSORLEFT
0x088D   CONTCRSLFT
0x087C   CHCKYPOS
0x0892   MVCRS2LFT
0x084D   MVBKSP
0x0860   LVBKSP
0x0020   SPC
0x0818 X ENDINSRT
0x0813   NXTINST
0x4D1F   CMP16
0x0802   CHKHL
0x6162   ENDTXT
0x0A3F   ENDOFLN
0x615E   CUR_POS
0x07E0   PUTCRSCHR
0x093F   SCROLLUP
0x07A0   SETCRSRY
0x1028   CF_BUSY
0x07A1   SETCSRCOORDS
0x07B3   EXITCHAR2VID
0x0777   NXTCPCK
0x076A   RPTCPCK
0x07C0   PLACEHOLDER
0x000A   LF
0x07E4   INSERTKEY
0x001A   INSRT
0x0903   CURSORDOWN
0x001F   CRSDN
0x08CE   CURSORRIGHT
0x001D   CRSRGT
0x08B5   CURSORUP
0x001E   CRSUP
0x0869   CURSORLEFT
0x001C   CRSLFT
0x0826   BACKSPACE
0x3E21   CNTCKCL
0x0008   BKSP
0x09B8   CRGRETURN
0x000C   CS
0x0019   HOME
0x0739   CHRTBL
0x4D7A   DIV_16_8
0x0728   HL2XY
0x0A65   POS_TB_CRS_32
0x071A   CONT_POS_CURS
0x0A95   POS_TB_CRS_40
0x6159   LSTCSRSTA
0x6158   CRSR_STATE
0x06D2   MOVSHOWCRS
0x06E7   NEWCRSRCOORD
0x06FC   RSTCHRCRS
0x0705   LOAD_CRSR_POS
0x06BB   READ_VSTAT
0x06B0   WRITE_VREG
0x069B   WRITE_VIDEO_LOC
0x0686   READ_VIDEO_LOC
0x06CC   MOVCRS
0x6155   SCR_CUR_NX
0x0000   NLLCR
0x6156   SCR_CUR_NY
0x067C   ATHOME
0x06C2   POS_CURSOR
0x066F   CLEARVIDBUF
0x065C   RPTFLL1
0x064A   SNDCLRSET
0x0647   STARTEMPTY
0x0611   CLRG2PTNTBL
0x05F7   RPTEMPTYBUF
0x05F1   LDCOLSTOEMPTY
0x0630   EMPTYMC
0x0600   EMPTYG2
0x05CF   LVCKSPLK
0x05D1   DOCOLDRESET
0x0D39   READKBLN
0x05AD   SNDLOGPT
0x368E   COMPL
0x5E55   LOGOFONT
0x0CBB   NOBEEP
0x0CB5   WLCMBEEP
0x0579   RPT100
0x05BC   CHKSPCK
0x058F   BEEPOFF
0x0583   SETBEEP
0x054D   DEC_D
0x61A3   DOS_EN
0x615E   TMPBFR1
0x053B   RPT104
0x0597   LOADLOGOCHRS
0x0533   RPT103
0x0B47   LM80CLOGO
0x051D   RPT102
0x0C98   RSTPSG
0x051A   RPT101
0x05B7   CLRTABLE
0x056C   ERASECLRTBL
0x0654   SETNAMETABLE
0x0AEB   SET_GFX_MODE2
0x6157   SCR_ORG_CHR
0x05D8   EMPTYVIDBUF
0x0457   LDCLRTBMD1
0x615C   FRGNDCLR
0x0666   SETVDPADRS
0x04E7   ENDVDPSET
0x6151   SCR_NAM_TB
0x5FFC   COMMAN
0x614F   SCR_SIZE_H
0x614E   SCR_SIZE_W
0x615D   BKGNDCLR
0x6154   SCR_CURS_Y
0x04DE   LDCLRTBEX2
0x6153   SCR_CURS_X
0x0AFF   LOADCHARSET
0x03F6 X TXTMD
0x04A5   EXG2MD
0x0482   MCMD
0x0460   G2MD
0x0420   G1MD
0x6150   SCR_MODE
0x0AD8   CLR_RAM_REG
0x0AE3   SET_GFX_MODE
0x0AC5   EMPTY_VRAM
0x0365   RESTMR
0x036A   CTCCONF
0x033C X SIO_B_SETS
0x0336   SIO_A_SETS
0x1B6B   WARM
0x1B68   COLD
0x0938   CURSOR_OFF
0x031C   ECHO_CHAR
0x030F   CHECKWARM
0x02F8   CORW
0x0923   CURSOR_ON
0x03B4   MSGTXT2
0x0304   COLDSTART
0x5FB6   basicStarted
0x0376   MSGTXT1
0x4D0A   INITST
0x03D1   initVDP
0x04F2   SHOW_LOGO
0x0C87   initPSG
0x0340   initCTC
0x02B1   INIT_HW2
0x60E8   TEMPSTACK
0x02AE   INIT_HW
0x0D4E   KEYBOARD
0x0CE9   MNGSNDS
0x07C1   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x613E   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x5FB3   serRdPtr
0x5F59   SERBUF_START
0x0214   NOTWRAP
0x00B1   bufWrap
0x5FB1   serInPtr
0x0208   NOTFULL
0x5FB5   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x61A2   SERBBITS
0x019D   SIO_RTS_OFF
0x61A1   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x46F7   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x61A0   SERIALS_EN
0x01CB   SIO_A_DI
0x1A75   GMMSG
0x0757   CHAR2VID
0x615A   PRNTVIDEO
0x6198   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x615B   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x619A   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x5FBA   NMIUSR
0x614B   CTC3IV
0x6148   CTC2IV
0x6145   CTC1IV
0x6142   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x5F2A   ROM2RAM
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0031   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
