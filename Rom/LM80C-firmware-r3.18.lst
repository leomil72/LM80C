# file opened: LM80C-firmware-r3.18.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C - FIRMWARE - R3.18
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; output binary file
  55  0000                  OUTPUT "LM80C-firmware-r3.18.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "3.18"
  62  0000
  63  0000              ; define shorter VDP_DAT load instruction
  64  0000                  DEFINE LD_VDP_DAT ld      C,VDP_DAT
  65  0000
  66  0000              ; ------------------------------------------------------------------------------
  67  0000              ; include the latest version of the bootloader: this sets up the address aliases
  68  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  69  0000                  INCLUDE "../include/bootloader/bootloader-1.05.asm"
# file opened: ../include/bootloader/bootloader-1.05.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.04
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM8064K
  54+ 0000 ~            VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000              VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 ~                            jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0001                  ELSE
  80+ 0001 C3 B0 02                     jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 64 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 67 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 4D 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 35 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 23 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check serial status
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 7A 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 C1 81                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 C4 81                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 C7 81                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 CA 81                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 61 80                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 140+ 0094 43 20 43 4F
 141+ 0098 4C 4F 52 00                  defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 141+ 009C 00 00 00 00
 142+ 00A0                  ELSE
 143+ 00A0 ~                            defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 144+ 00A0 ~                            defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$30,$29,$00
 147+ 00AC 32 30 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 33  FWVER:          defm    "FW ","3.18",$20,"2021-01-05",$20,"18:25:48",$00
 152+ 00D4 2E 31 38 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 31 2D
 152+ 00E0 30 35 20 31
 152+ 00E4 38 3A 32 35
 152+ 00E8 3A 34 38 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8E 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 1A 82                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD F4 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 30 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 1A 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 DB 81                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 30 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 18 82                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A D8 81                     ld      A,(CRSR_STATE)  ; check cursor state
 182+ 0128 B7                           or      A               ; is it on?
 183+ 0129 C4 6E 07                     call    NZ,CHAR2VID     ; yes, print on screen
 184+ 012C F1                           pop     AF              ; retrieve char
 185+ 012D CD 4D 02                     call    TXA             ; send back to serial
 186+ 0130 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0131 F1                           pop     AF              ; and A
 188+ 0132 FB                           ei                      ; re-enable interrupts
 189+ 0133 ED 4D                        reti                    ; and exit
 190+ 0135
 191+ 0135              ;-------------------------------------------------------------------------------
 192+ 0135              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0135              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0135              ; a break char
 195+ 0135 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0136 CD 8E 01                     call    A_RTS_OFF       ; disable RTS
 197+ 0139 CD C2 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013C 3A 20 82                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 013F CB 97                        res     2,A             ; disable RX on port 1
 200+ 0141 32 20 82                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0144 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0146 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0148 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014A 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014C D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014E AF           EMPTYCHABFR:    xor     A
 207+ 014F D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0151 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0153 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0155 CA 5C 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0158 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015A 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015C F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015D 21 25 3D                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0160 E3                           ex      (SP),HL         ; store onto stack
 216+ 0161 FB                           ei                      ; re-enable interrupts
 217+ 0162 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0164
 219+ 0164              ;-------------------------------------------------------------------------------
 220+ 0164              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0164              ;-------------------------------------------------------------------------------
 222+ 0164
 223+ 0164              ;-------------------------------------------------------------------------------
 224+ 0164              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0164 FB           RX_CHB_AVAIL:   ei
 226+ 0165 ED 4D                        reti
 227+ 0167
 228+ 0167              ;-------------------------------------------------------------------------------
 229+ 0167              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0167              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0167              ; a break char
 232+ 0167 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0168 CD 96 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016B CD CA 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016E 3A 20 82                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0171 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0173 32 20 82                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0176 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0178 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017A D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017C 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017E D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0180 AF           EMPTYCHBBFR:    xor     A
 244+ 0181 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0183 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0185 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0187 CA 5C 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018A DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018C 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018E
 251+ 018E
 252+ 018E              ;-------------------------------------------------------------------------------
 253+ 018E              ;               Z80 SIO MANAGEMENT
 254+ 018E              ;-------------------------------------------------------------------------------
 255+ 018E              ; disable RTS:
 256+ 018E              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018E C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 018F 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0191 3A 21 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0194 18 06                        jr      SIO_RTS_OFF
 261+ 0196 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0197 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 0199 3A 22 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019C 47           SIO_RTS_OFF:    ld      B,A             ; store data bits
 265+ 019D 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 266+ 019F ED 79                        out     (C),A
 267+ 01A1 78                           ld      A,B             ; retrieve data bits
 268+ 01A2 F6 28                        or      %00101000       ; TX enable; RTS disable
 269+ 01A4 ED 79                        out     (C),A           ; send setting
 270+ 01A6 C1                           pop     BC              ; retrieve BC
 271+ 01A7 C9                           ret                     ; exit
 272+ 01A8
 273+ 01A8              ;-------------------------------------------------------------------------------
 274+ 01A8              ; enable RTS
 275+ 01A8              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 276+ 01A8 C5           A_RTS_ON:       push    BC              ; store BC
 277+ 01A9 0E 22                        ld      C,SIO_CA        ; select channel A
 278+ 01AB 3A 21 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 279+ 01AE 18 06                        jr      SIO_RTS_ON
 280+ 01B0 C5           B_RTS_ON:       push    BC              ; store BC
 281+ 01B1 0E 23                        ld      C,SIO_CB        ; select channel B
 282+ 01B3 3A 22 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 283+ 01B6 47           SIO_RTS_ON:     ld      B,A             ; store data bits
 284+ 01B7 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 285+ 01B9 ED 79                        out     (C),A
 286+ 01BB 78                           ld      A,B             ; retrieve data bits
 287+ 01BC F6 2A                        or      %00101010       ; TX enable; RTS enable
 288+ 01BE ED 79                        out     (C),A           ; send setting
 289+ 01C0 C1                           pop     BC              ; retrieve BC
 290+ 01C1 C9                           ret                     ; return
 291+ 01C2
 292+ 01C2              ;-------------------------------------------------------------------------------
 293+ 01C2              ; disable SIO RX channel
 294+ 01C2 C5           SIO_A_DI:       push    BC              ; store BC
 295+ 01C3 0E 22                        ld      C,SIO_CA        ; SIO channel A
 296+ 01C5 3A 21 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 297+ 01C8 18 06                        jr      SIO_RXDI        ; jump to disable RX
 298+ 01CA C5           SIO_B_DI:       push    BC              ; store BC
 299+ 01CB 0E 23                        ld      C,SIO_CB        ; SIO channel B
 300+ 01CD 3A 22 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 301+ 01D0 47           SIO_RXDI:       ld      B,A             ; store data bits
 302+ 01D1 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 303+ 01D3 ED 79                        out     (C),A
 304+ 01D5 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 305+ 01D6 ED 79                        out     (C),A
 306+ 01D8 C1                           pop     BC              ; retrieve BC
 307+ 01D9 C9                           ret                     ; return
 308+ 01DA
 309+ 01DA              ;-------------------------------------------------------------------------------
 310+ 01DA              ; enable SIO RX channel
 311+ 01DA C5           SIO_A_EI:       push    BC              ; store BC
 312+ 01DB 0E 22                        ld      C,SIO_CA
 313+ 01DD 3A 21 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 314+ 01E0 18 06                        jr      SIO_RXEN
 315+ 01E2 C5           SIO_B_EI:       push    BC              ; store BC
 316+ 01E3 0E 23                        ld      C,SIO_CB
 317+ 01E5 3A 22 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 318+ 01E8 47           SIO_RXEN:       ld      B,A             ; store data bits
 319+ 01E9 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 320+ 01EB ED 79                        out     (C),A           ; select register
 321+ 01ED 78                           ld      A,B             ; retrieve data bits
 322+ 01EE CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 323+ 01F0 ED 79                        out     (C),A           ; send settings to SIO
 324+ 01F2 C1                           pop     BC              ; retrieve BC
 325+ 01F3 C9                           ret
 326+ 01F4
 327+ 01F4              ;------------------------------------------------------------------------------
 328+ 01F4              ; put a char into the input buffer, char is into A
 329+ 01F4              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 330+ 01F4              ; the RETURN key is pressed on the keyboard
 331+ 01F4 F5           CHARINTOBFR:    push    AF              ; store it
 332+ 01F5 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 333+ 01F8 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 334+ 01FA DA FF 01                     jp      C,NOTFULL       ; then store the char
 335+ 01FD F1                           pop     AF              ; else drop it
 336+ 01FE C9                           ret                     ; and exit
 337+ 01FF 2A 58 80     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 338+ 0202 23                           inc     HL              ; load pointer to find first free cell
 339+ 0203 7D                           ld      A,L             ; only check low byte because buffer<256
 340+ 0204 FE 58                        cp      bufWrap         ; check if the pointer is at the last cell
 341+ 0206 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 342+ 0208 21 00 80                     ld      HL,SERBUF_START ; else load the address of the first cell
 343+ 020B 22 58 80     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 344+ 020E F1                           pop     AF              ; then recover the char
 345+ 020F 77                           ld      (HL),A          ; and store it in the appropriate cell
 346+ 0210 3A 5C 80                     ld      A,(serBufUsed)  ; load the size of the input buffer
 347+ 0213 3C                           inc     A               ; increment it
 348+ 0214 32 5C 80                     ld      (serBufUsed),A  ; and store the new size
 349+ 0217 FE 50                        cp      SER_FULLSIZE    ; check if input buffer is full
 350+ 0219 D8                           ret     C               ; exit if buffer is not full
 351+ 021A 3A 20 82                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 352+ 021D 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 353+ 021E DC 8E 01                     call    C,A_RTS_OFF     ; ...stop receiving further chars
 354+ 0221 AF                           xor     A               ; clear Carry to set a buffer full condition
 355+ 0222 C9                           ret
 356+ 0223
 357+ 0223
 358+ 0223              ;-------------------------------------------------------------------------------
 359+ 0223              ; retrieve a char from the input buffer
 360+ 0223 3A 5C 80     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 361+ 0226 A7                           and     A               ; check if it's 0 (empty)
 362+ 0227 CA 23 02                     jp      Z,RXA           ; if it's empty, wait for a char
 363+ 022A F3                           di                      ; disable interrupts
 364+ 022B E5                           push    HL              ; store HL
 365+ 022C 2A 5A 80                     ld      HL,(serRdPtr)   ; load pointer to first available char
 366+ 022F 23                           inc     HL              ; increment it (go to the next char)
 367+ 0230 7D                           ld      A,L             ; check if the end of the buffer has been reached
 368+ 0231 FE 58                        cp      bufWrap         ; (only check low byte because buffer<256)
 369+ 0233 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 370+ 0235 21 00 80                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 371+ 0238 22 5A 80     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 372+ 023B 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 373+ 023E 3D                           dec     A               ; decrement it
 374+ 023F 32 5C 80                     ld      (serBufUsed),A  ; and store the new size
 375+ 0242 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 376+ 0244 30 03                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 377+ 0246 CD A8 01                     call    A_RTS_ON        ; else re-enable receiving chars
 378+ 0249 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 379+ 024A E1                           pop     HL              ; retrieve HL
 380+ 024B FB                           ei                      ; re-enable interrupts
 381+ 024C C9                           ret                     ; return
 382+ 024D
 383+ 024D              ;------------------------------------------------------------------------------
 384+ 024D              ; sends a char over the serial (trick for INTs from WikiTI)
 385+ 024D              ; char is into A
 386+ 024D F5           TXA:            push    AF              ; store AF
 387+ 024E C5                           push    BC              ; store BC
 388+ 024F 47                           ld      B,A             ; store char
 389+ 0250 ED 57                        ld      A,I             ; when loading I into A, P/V is set to the value of IFF (P/V is set if INTs enabled)
 390+ 0252 EA 57 02                     jp      PE,CNTTXA       ; if set, jump over
 391+ 0255 ED 57                        ld      A,I             ; if not set, test again to fix "false negative" from interrupt occurring at first test
 392+ 0257 F5           CNTTXA:         push    AF              ; store current P/V flag
 393+ 0258 F3                           di                      ; disable INTs
 394+ 0259 3A 20 82                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025C FE 05                        cp      %00000101       ; check if serial 1 is open and RX/TX is enabled
 396+ 025E 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0260 78                           ld      A,B             ; retrieve char
 398+ 0261 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0263 CD 6E 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0266 F1           TXA_EXIT:       pop     AF              ; retrieve P/V flag
 401+ 0267 E2 6B 02                     jp      PO,EXTXA        ; if P is reset, INTs were disabled so we can leave right now
 402+ 026A FB                           ei                      ; INTs were enabled, so re-enable interrupts
 403+ 026B C1           EXTXA:          pop     BC              ; retrieve BC
 404+ 026C F1                           pop     AF              ; retrieve AF
 405+ 026D C9                           ret                     ; return
 406+ 026E
 407+ 026E              ;------------------------------------------------------------------------------
 408+ 026E              ; wait until outgoing serial has been sent
 409+ 026E 97           TX_EMP:         sub     A               ; set A to 0
 410+ 026F 3C                           inc     A               ; set A to 1
 411+ 0270 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 412+ 0272 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 413+ 0274 CB 47                        bit     0,A             ; check if all chars have been sent
 414+ 0276 CA 6E 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 415+ 0279 C9                           ret                     ; else exit
 416+ 027A
 417+ 027A
 418+ 027A              ;------------------------------------------------------------------------------
 419+ 027A              ; check if there is some chars into the buffer
 420+ 027A 3A 5C 80     CKINCHAR:       ld      A,(serBufUsed)  ; load char in buffer
 421+ 027D A7                           and     A               ; compare to 0
 422+ 027E C9                           ret                     ; return
 423+ 027F
 424+ 027F              ;------------------------------------------------------------------------------
 425+ 027F              ; print a text from memory, and terminate when $00 is found
 426+ 027F 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 427+ 0280 B7                           or      A               ; is it $00 (end string)?
 428+ 0281 C8                           ret     Z               ; Yes, then return
 429+ 0282 32 DB 81                     ld      (CHR4VID),A     ; store char
 430+ 0285 F3                           di
 431+ 0286 CD 6E 07                     call    CHAR2VID        ; and send it to screen
 432+ 0289 FB                           ei
 433+ 028A 23                           inc     HL              ; and select the next one
 434+ 028B 18 F2                        jr      RAWPRINT        ; repeat
 435+ 028D
 436+ 028D              ;-------------------------------------------------
 437+ 028D              ; Interrupt service routine (ISR) for CH3 timer
 438+ 028D              ; this is used to increment the 100ths of a second counter and for cursor flashing
 439+ 028D F5           CH3_TIMER:      push    AF              ; save regs. A,
 440+ 028E C5                           push    BC              ; BC,
 441+ 028F D5                           push    DE              ; DE,
 442+ 0290 E5                           push    HL              ; HL
 443+ 0291 21 BD 81                     ld      HL,TMRCNT       ; load starting address of the timer
 444+ 0294 06 04                        ld      B,$04           ; 4 bytes to check
 445+ 0296 34           INCTMR3:        inc     (HL)            ; increment timer
 446+ 0297 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 447+ 0299 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 448+ 029A 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 449+ 029C CD D8 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 450+ 029F CD 04 0D                     call    MNGSNDS         ; call the tone managemenet
 451+ 02A2 3A BD 81                     ld      A,(TMRCNT)      ; check for keyboard management
 452+ 02A5 1F                           rra                     ; bit 0 = 1 ?
 453+ 02A6 D4 69 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 454+ 02A9 E1                           pop     HL              ; retrieve HL,
 455+ 02AA D1                           pop     DE              ; DE,
 456+ 02AB C1                           pop     BC              ; BC,
 457+ 02AC F1                           pop     AF              ; and A
 458+ 02AD FB                           ei                      ; re-enable interrupts
 459+ 02AE ED 4D                        reti                    ; exit from ISR
 460+ 02B0
 461+ 02B0              ;------------------------------------------------------------------------------
 462+ 02B0              ;               HARDWARE INITIALISATION
 463+ 02B0              ;------------------------------------------------------------------------------
 464+ 02B0              ; first run - setup HW & SW
 465+ 02B0              ; (on LN80C 64K runs from RAM)
 466+ 02B0 21 8F 81     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 467+ 02B3 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 468+ 02B4 21 00 80                     ld      HL,SERBUF_START ; set beginning of input buffer
 469+ 02B7 22 58 80                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 470+ 02BA 22 5A 80                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 471+ 02BD AF                           xor     A               ; reset A
 472+ 02BE 32 5C 80                     ld      (serBufUsed),A  ; actual buffer size is 0
 473+ 02C1 32 20 82                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 474+ 02C4                  IFDEF LM80C
 475+ 02C4 CD 3B 03                     call    HELLOWRLD       ; little serial blink with LEDs
 476+ 02C7                  ENDIF
 477+ 02C7 CD 60 03                     call    initCTC         ; configure CTC, then...
 478+ 02CA CD A2 0C                     call    initPSG         ; ...configure PSG
 479+ 02CD CD 12 05                     call    SHOW_LOGO       ; show computer logo
 480+ 02D0 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 481+ 02D2 CD EF 03                     call    initVDP         ; set video display
 482+ 02D5 AF                           xor     A
 483+ 02D6 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 484+ 02D8 ED 5E                        im      2               ; interrupt mode 2
 485+ 02DA FB                           ei                      ; enable interrupts
 486+ 02DB                              ; print system messages
 487+ 02DB AF                           xor     A               ; A=0 so...
 488+ 02DC 32 18 82                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 489+ 02DF 3C                           inc     A               ; A=1...
 490+ 02E0 32 DA 81                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 491+ 02E3 21 96 03                     ld      HL,MSGTXT1      ; sign-on message
 492+ 02E6 CD 7F 02                     call    RAWPRINT        ; print message
 493+ 02E9 3A 5D 80                     ld      A,(basicStarted); check if BASIC is already started
 494+ 02EC FE 59                        cp      'Y'             ; to see if this is a power-up
 495+ 02EE 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 496+ 02F0 21 D2 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 497+ 02F3 CD 7F 02                     call    RAWPRINT        ; print message
 498+ 02F6 CD 3A 09                     call    CURSOR_ON       ; enable cursor
 499+ 02F9 AF                           xor     A
 500+ 02FA 32 DA 81                     ld      (PRNTVIDEO),A   ; disable print-on-video
 501+ 02FD CD 23 02     CORW:           call    RXA             ; look for a pressed key
 502+ 0300 E6 DF                        and     %11011111       ; only UPPERCASE char
 503+ 0302 FE 43                        cp      'C'             ; cold start?
 504+ 0304 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 505+ 0306 CD 21 03                     call    ECHO_CHAR       ; echoes the char
 506+ 0309 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 507+ 030B 32 5D 80                     ld      (basicStarted),A
 508+ 030E CD 4F 09                     call    CURSOR_OFF      ; disable cursor
 509+ 0311 C3 08 12                     jp      COLD            ; start BASIC COLD
 510+ 0314 FE 57        CHECKWARM:      cp      'W'
 511+ 0316 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 512+ 0318 CD 21 03                     call    ECHO_CHAR       ; echoes the char
 513+ 031B CD 4F 09                     call    CURSOR_OFF      ; disable cursor
 514+ 031E C3 0B 12                     jp      WARM            ; start BASIC WARM
 515+ 0321
 516+ 0321              ;-------------------------------------------------------------------------------
 517+ 0321              ; send back char received through ch. A
 518+ 0321 32 DB 81     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 519+ 0324 AF                           xor     A
 520+ 0325 32 18 82                     ld      (KBDNPT),A      ; input is not from keyboard
 521+ 0328 F3                           di                      ; disable INTs
 522+ 0329 CD 6E 07                     call    CHAR2VID        ; echoes back the pressed key,
 523+ 032C 3E 0D                        ld      A,CR            ; then set a CR
 524+ 032E 32 DB 81                     ld      (CHR4VID),A     ; set char for video printing
 525+ 0331 CD 6E 07                     call    CHAR2VID        ; and send it to screen
 526+ 0334 FB                           ei                      ; re-enable INTs
 527+ 0335 3E 01                        ld      A,$01
 528+ 0337 32 DA 81                     ld      (PRNTVIDEO),A   ; re-enable video printing
 529+ 033A C9                           ret                     ; return to caller
 530+ 033B
 531+ 033B                  IFDEF LM80C
 532+ 033B              ;-------------------------------------------------------------------------------
 533+ 033B              ; little serial blink with LEDs
 534+ 033B 0E 09        HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 535+ 033D 3E CF                        ld      A,%11001111     ; set mode 3 (mode control)
 536+ 033F D3 03                        out     (PIO_CB),A      ; for PIO port B
 537+ 0341 AF                           xor     A               ; set pins to OUTPUT
 538+ 0342 D3 03                        out     (PIO_CB),A      ; for port B
 539+ 0344 3C                           inc     A               ; LSB on
 540+ 0345 D3 01        LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 541+ 0347 1E 20                        ld      E,$20           ; little delay
 542+ 0349 06 00        DEC_E:          ld      B,$00           ; count to 256
 543+ 034B 10 FE        COUNTER:        djnz    COUNTER         ; decrement inner counter
 544+ 034D 1D                           dec     E               ; decrement outer counter
 545+ 034E 20 F9                        jr      NZ,DEC_E        ; finish delay
 546+ 0350 CB 27                        sla     A               ; shift reg.A to left 1 bit
 547+ 0352 0D                           dec     C               ; next LED
 548+ 0353 20 F0                        jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 549+ 0355 C9                           ret                     ; return to caller
 550+ 0356                  ENDIF
 551+ 0356              ;-------------------------------------------------------------------------------
 552+ 0356              ; Z80 SIO default settings for serial channels
 553+ 0356 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 554+ 0357 18                           defb    %00011000       ; write into WR0: channel reset
 555+ 0358 04                           defb    %00000100       ; write into WR0: select WR4
 556+ 0359 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 557+ 035A 05                           defb    %00000101       ; write into WR0: select WR5
 558+ 035B E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 559+ 035C 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 560+ 035D 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 561+ 035E 02                           defb    %00000010       ; write into WR0: select WR2
 562+ 035F 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 563+ 0360                                                      ; will be affected by the channel & condition that raised the interrupt
 564+ 0360                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 565+ 0360                                                      ; for special conditions
 566+ 0360              ;------------------------------------------------------------------------------
 567+ 0360              ;               Z80 CTC SETTING UP
 568+ 0360              ;------------------------------------------------------------------------------
 569+ 0360              initCTC:
 570+ 0360 21 8A 03                     ld      HL,CTCCONF      ; CTC configuration
 571+ 0363 11 C1 81                     ld      DE,CTC0IV       ; CTC interrupt vector table
 572+ 0366 01 0C 00                     ld      BC,$000C        ; 12 bytes
 573+ 0369 ED B0                        ldir                    ; copy data
 574+ 036B              ;CH0, CH1, & CH2 disabled
 575+ 036B 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 576+ 036D                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 577+ 036D D3 10                        out     (CTC_CH0),A     ; set CH0
 578+ 036F D3 11                        out     (CTC_CH1),A     ; set CH1
 579+ 0371 D3 12                        out     (CTC_CH2),A     ; set CH2
 580+ 0373              ;init CH3
 581+ 0373              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 582+ 0373              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 583+ 0373 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 584+ 0375                                                      ; time constant follows; cont. operation; command word
 585+ 0375 D3 13                        out     (CTC_CH3),A     ; send to CH3
 586+ 0377 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 587+ 0379 D3 13                        out     (CTC_CH3),A     ; send to CH3
 588+ 037B 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 589+ 037D                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 590+ 037D                                                      ; so int vector is 01000xx00
 591+ 037D D3 10                        out     (CTC_CH0),A     ; send to CTC
 592+ 037F                              ; reset cells of 100ths of a second counter
 593+ 037F AF                           xor     A               ; reset A
 594+ 0380 21 BD 81                     ld      HL,TMRCNT       ; load TMR pointer
 595+ 0383 06 04                        ld      B,$04           ; 4 memory cells
 596+ 0385 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 597+ 0386 23                           inc     HL              ; next cell
 598+ 0387 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 599+ 0389 C9                           ret
 600+ 038A
 601+ 038A
 602+ 038A              ;------------------------------------------------------------------------------
 603+ 038A              ; jump table for CHx interrupts
 604+ 038A FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 605+ 038D FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 606+ 0390 FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 607+ 0393 C3 8D 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 608+ 0396
 609+ 0396
 610+ 0396              ;------------------------------------------------------------------------------
 611+ 0396              ; welcome messages
 612+ 0396              MSGTXT1:
 613+ 0396                  IFDEF LM80C64K
 614+ 0396 ~                            defm    "    LM80C 64K Color Computer",CR
 615+ 0396                  ELSE
 616+ 0396 20 20 20 20                  defm    "      LM80C Color Computer",CR
 616+ 039A 20 20 4C 4D
 616+ 039E 38 30 43 20
 616+ 03A2 43 6F 6C 6F
 616+ 03A6 72 20 43 6F
 616+ 03AA 6D 70 75 74
 616+ 03AE 65 72 0D
 617+ 03B1                  ENDIF
 618+ 03B1 20 62 79 20                  defm    " by Leonardo Miliani * FW R","3.18",CR,0
 618+ 03B5 4C 65 6F 6E
 618+ 03B9 61 72 64 6F
 618+ 03BD 20 4D 69 6C
 618+ 03C1 69 61 6E 69
 618+ 03C5 20 2A 20 46
 618+ 03C9 57 20 52 33
 618+ 03CD 2E 31 38 0D
 618+ 03D1 00
 619+ 03D2 0D           MSGTXT2:        defb    CR
 620+ 03D3 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 620+ 03D7 43 3E 6F 6C
 620+ 03DB 64 20 6F 72
 620+ 03DF 20 3C 57 3E
 620+ 03E3 61 72 6D 20
 620+ 03E7 73 74 61 72
 620+ 03EB 74 3F 20 00
 621+ 03EF
# file closed: ../include/bootloader/bootloader-1.05.asm
  70  03EF
  71  03EF              ; incude the latest version of the VDP module
  72  03EF                  INCLUDE "../include/vdp/vdp-1.3.asm"
# file opened: ../include/vdp/vdp-1.3.asm
   1+ 03EF              ; ------------------------------------------------------------------------------
   2+ 03EF              ; LM80C - VDP ROUTINES - 1.3
   3+ 03EF              ; ------------------------------------------------------------------------------
   4+ 03EF              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03EF              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03EF              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03EF              ; kind of warranty: you can use them at your own risk.
   8+ 03EF              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03EF              ; maintain the copyright notices, include this advice and the note to the
  10+ 03EF              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03EF              ; redistribuite them.
  12+ 03EF              ; https://www.leonardomiliani.com
  13+ 03EF              ;
  14+ 03EF              ; Please support me by visiting the following links:
  15+ 03EF              ; Main project page: https://www.leonardomiliani.com
  16+ 03EF              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03EF              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03EF              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03EF              ; ------------------------------------------------------------------------------
  20+ 03EF              ;
  21+ 03EF              ;------------------------------------------------------------------------------
  22+ 03EF              ; VDP INITIALISATION
  23+ 03EF              ; initialize VDP for a specific graphics mode
  24+ 03EF              ; INPUT: E -> contains the graphics mode:
  25+ 03EF              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03EF D5           initVDP:        push    DE              ; store E
  27+ 03F0 CD DE 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03F3 CD FD 0A                     call    SET_GFX_MODE    ; load register settings
  29+ 03F6 CD F2 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03F9 D1                           pop     DE              ; restore reg. E
  31+ 03FA AF                           xor     A               ; reset A
  32+ 03FB 47                           ld      B,A             ; reset B (will be used later)
  33+ 03FC 7B                           ld      A,E             ; move E into A
  34+ 03FD 32 CF 81                     ld      (SCR_MODE),A    ; store screen mode
  35+ 0400 FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 0402 CA 3E 04                     jp      Z,G1MD          ; yes, jump over
  37+ 0405 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 0407 CA 7F 04                     jp      Z,G2MD          ; yes, jump over
  39+ 040A FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 040C CA A1 04                     jp      Z,MCMD          ; yes, jump over
  41+ 040F FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 0411 CA C4 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 0414                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 0414
  45+ 0414              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 0414
  47+ 0414                              ; TEXT MODE (G0)
  48+ 0414                              ; load charset
  49+ 0414 60           TXTMD:          ld      H,B
  50+ 0415 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 0416 CD 19 0B                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 0419                              ; set cursor & video overlay
  53+ 0419 AF                           xor     A               ; reset A
  54+ 041A 32 D3 81                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 041D 32 D4 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 0420 3E 05                        ld      A,$05           ; light blue
  57+ 0422 32 DD 81                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0425 3E 28                        ld      A,$28
  59+ 0427 32 CD 81                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 042A 3E 18                        ld      A,$18
  61+ 042C 32 CE 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 042F 3E 1E                        ld      A,$1E
  63+ 0431 32 A3 80                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0434 11 00 08                     ld      DE,$0800
  65+ 0437 ED 53 D1 81                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 043B C3 07 05                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 043E
  68+ 043E                              ; GRAPHICS 1 MODE (G1)
  69+ 043E                              ; load pattern table
  70+ 043E 68           G1MD:           ld      L,B
  71+ 043F 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 0440 CD 19 0B                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0443                              ; set cursor & video overlay
  74+ 0443 AF                           xor     A               ; position cursor
  75+ 0444 32 D3 81                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0447 32 D4 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 044A 3E 20                        ld      A,$20
  78+ 044C 32 CD 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 044F 3E 18                        ld      A,$18
  80+ 0451 32 CE 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0454 3E 14                        ld      A,$14
  82+ 0456 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 0459 11 00 18                     ld      DE,$1800
  84+ 045C ED 53 D1 81                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 0460                              ; load color table
  86+ 0460 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0463 CD 7D 06                     call    SETVDPADRS
  88+ 0466 3E 01                        ld      A,$01           ; foreground color...
  89+ 0468 32 DC 81                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 046B 3E 0F                        ld      A,$0F           ; background color...
  91+ 046D 32 DD 81                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 0470 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0472 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0474 0E 30                        ld      C,VDP_DAT              ; VDP data mode
  95+ 0476 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0478 00                           nop
  97+ 0479 00                           nop
  98+ 047A 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 047C C3 07 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 047F
 101+ 047F                              ; GRAPHICS 2 MODE (G2)
 102+ 047F AF           G2MD:           xor     A               ; position cursor
 103+ 0480 32 D3 81                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0483 32 D4 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0486 32 CD 81                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 0489 3C                           inc     A               ; black on...
 107+ 048A 32 DC 81                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 048D 3E 0F                        ld      A,$0F           ; white on...
 109+ 048F 32 DD 81                     ld      (BKGNDCLR),A    ; ...background
 110+ 0492 3E C0                        ld      A,$C0
 111+ 0494 32 CE 81                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0497 11 00 18                     ld      DE,$1800
 113+ 049A ED 53 D1 81                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 049E C3 07 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 04A1
 116+ 04A1                              ; MULTICOLOR MODE (G3)
 117+ 04A1 AF           MCMD:           xor     A               ; position cursor
 118+ 04A2 32 D3 81                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 04A5 32 D4 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 04A8 3E 0F                        ld      A,$0F           ; white color for...
 121+ 04AA 32 DD 81                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 04AD 32 DC 81                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 04B0 3E 40                        ld      A,$40
 124+ 04B2 32 CD 81                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 04B5 3E 30                        ld      A,$30
 126+ 04B7 32 CE 81                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 04BA 11 00 08                     ld      DE,$0800
 128+ 04BD ED 53 D1 81                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04C1 C3 07 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04C4
 131+ 04C4                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04C4              EXG2MD:         ; load pattern table
 133+ 04C4 60                           ld      H,B
 134+ 04C5 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04C6 CD 19 0B                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04C9                              ; set cursor & video overlay
 137+ 04C9 AF                           xor     A               ; position cursor
 138+ 04CA 32 D3 81                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04CD 32 D4 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04D0 3E 20                        ld      A,$20
 141+ 04D2 32 CD 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04D5 3E 18                        ld      A,$18
 143+ 04D7 32 CE 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04DA 3E 14                        ld      A,$14
 145+ 04DC 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04DF 11 00 38                     ld      DE,$3800
 147+ 04E2 ED 53 D1 81                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04E6                               ; load color table
 149+ 04E6 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04E9 CD 7D 06                     call    SETVDPADRS
 151+ 04EC 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04EE 32 DC 81                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04F1 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04F3 32 DD 81                     ld      (BKGNDCLR),A    ; ...background
 155+ 04F6 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04F8 16 08                        ld      D,$08           ; 8 pages of
 157+ 04FA 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04FC 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 159+ 04FE ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 0500 00                           nop
 161+ 0501 00                           nop
 162+ 0502 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 0504 15                           dec     D               ; did we fill up all the cells?
 164+ 0505 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 0507                              ; LAST VDP SETTINGS
 166+ 0507 CD 4F 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 050A CD EB 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 050D AF                           xor     A
 169+ 050E 32 D7 81                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 0511 C9                           ret                     ; return to caller
 171+ 0512
 172+ 0512
 173+ 0512              ; show initial logo
 174+ 0512 CD DE 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 0515                              ; set VDP for G2 mode
 176+ 0515 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 0517 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 051A CD 05 0B                     call    SET_GFX_MODE2   ; load register settings
 179+ 051D 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 051F ED 51                        out     (C),D           ; send data to VDP
 181+ 0521 ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0523                              ; set name table
 183+ 0523 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0526 CD 6A 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0529 CD 89 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 052C                              ; set colors for logo
 187+ 052C 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 052F CD 7D 06                     call    SETVDPADRS
 189+ 0532 06 05                        ld      B,$05           ; 5 bands
 190+ 0534 21 D6 05                     ld      HL,CLRTABLE
 191+ 0537 0E 30                        ld      C,VDP_DAT              ; set VDP_DAT
 192+ 0539 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 053B 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 053D 7E                           ld      A,(HL)          ; load data
 195+ 053E ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 0540 00                           nop                     ; little delay
 197+ 0541 1D                           dec     E               ; decrement counter
 198+ 0542 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0544 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0546 15                           dec     D               ; decrement char band counter
 201+ 0547 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0549 23                           inc     HL              ; next pattern
 203+ 054A 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 054C                              ; set pattern table
 205+ 054C 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 054F 11 62 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0552 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0554 CD B5 05     RPT103:         call    LOADLOGOCHRS
 209+ 0557 13                           inc     DE              ; next logo pattern
 210+ 0558 10 FA                        djnz    RPT103
 211+ 055A 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 055C CD B5 05     RPT104:         call    LOADLOGOCHRS
 213+ 055F 13                           inc     DE              ; next logo pattern
 214+ 0560 10 FA                        djnz    RPT104
 215+ 0562                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0562 06 02                        ld      B,$02           ; two times
 217+ 0564 AF                           xor     A               ; reset A
 218+ 0565 57                           ld      D,A             ; 256 times
 219+ 0566 5F                           ld      E,A             ; x 256 times
 220+ 0567 32 DE 81                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 056A                  IFDEF LM80C64K
 222+ 056A ~                            inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 056A                  ENDIF
 224+ 056A 32 23 82                     ld      (DOS_EN),A      ; DOS enabled
 225+ 056D 00           DEC_D:          nop                     ; does nothing...
 226+ 056E 00                           nop
 227+ 056F 00                           nop
 228+ 0570 00                           nop
 229+ 0571 00                           nop
 230+ 0572 00                           nop                     ; ...until here
 231+ 0573 1D                           dec     E               ; decrement E
 232+ 0574 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0576 7A                           ld      A,D
 234+ 0577 FE 40                        cp      $40             ; ...equal to 64
 235+ 0579 CC A1 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 057C 15                           dec     D
 237+ 057D 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 057F 3A DE 81                     ld      A,(TMPBFR1)     ; sound state
 239+ 0582 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0584 C4 AD 05                     call    NZ,BEEPOFF      ; yes
 241+ 0587                  IFDEF LM80C64K
 242+ 0587 ~                            call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 0587 ~                                                    ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 0587                  ENDIF
 245+ 0587 10 E4                        djnz    DEC_D           ; repeat
 246+ 0589              ERASECLRTBL:    ; erase color table
 247+ 0589 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 058B 16 0A                        ld      D,$0A           ; 10 pages
 249+ 058D 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 058F 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0592 CD 7D 06                     call    SETVDPADRS      ; send address
 252+ 0595 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 253+ 0597 ED 79        RPT100:         out     (C),A           ; send data
 254+ 0599 00                           nop
 255+ 059A 00                           nop                     ; little delay
 256+ 059B 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 059D 15                           dec     D
 258+ 059E 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 05A0 C9                           ret                     ; return to caller
 260+ 05A1
 261+ 05A1              ; play a beep
 262+ 05A1 3A DE 81     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 05A4 B7                           or      A               ; is it 0?
 264+ 05A5 C0                           ret     NZ              ; no, exit
 265+ 05A6 3C                           inc     A               ; flag to 1
 266+ 05A7 32 DE 81                     ld      (TMPBFR1),A     ; set sound
 267+ 05AA C3 D0 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 05AD
 269+ 05AD              ; beep off
 270+ 05AD 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 05AF 32 DE 81                     ld      (TMPBFR1),A     ; set flag
 272+ 05B2 C3 D6 0C                     jp      NOBEEP          ; stop beep and return
 273+ 05B5
 274+ 05B5
 275+ 05B5              ; used to load the chars that will compose the logo of the splash screen
 276+ 05B5 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 05B6 87                           add     A,A
 278+ 05B7 87                           add     A,A
 279+ 05B8 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 05B9 C5                           push    BC
 281+ 05BA D5                           push    DE              ; store BC and DE
 282+ 05BB E5                           push    HL              ; store VRAM address to write to
 283+ 05BC 21 42 50                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05BF 5F                           ld      E,A
 285+ 05C0 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05C2 19                           add     HL,DE           ; get address of pattern data
 287+ 05C3 EB                           ex      DE,HL           ; move address into DE
 288+ 05C4 E1                           pop     HL              ; retrieve VRAM address
 289+ 05C5 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05C7 CD 7D 06                     call    SETVDPADRS      ; set VDP address
 291+ 05CA 0E 30                        ld      C,VDP_DAT              ; VDP_DAT
 292+ 05CC 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05CD ED 79                        out     (C),A           ; and send to VRAM
 294+ 05CF 13                           inc     DE              ; next byte into RAM
 295+ 05D0 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05D1 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05D3 D1                           pop     DE
 298+ 05D4 C1                           pop     BC              ; retrieve BC & DE
 299+ 05D5 C9                           ret                     ; return to caller
 300+ 05D6              CLRTABLE:       equ $
 301+ 05D6 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05DA 1D
 302+ 05DB
 303+ 05DB
 304+ 05DB              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05DB              ; if yes, then disable DOS functions recovering RAM
 306+ 05DB F5           CHKSPCK:        push    AF
 307+ 05DC 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05DE CD 54 0D                     call    READKBLN        ; read row
 309+ 05E1 CB 57                        bit     2,A             ; test if CTRL key is pressed
 310+ 05E3 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 311+ 05E5 AF                           xor     A               ; yes, so...
 312+ 05E6 32 23 82                     ld      (DOS_EN),A      ; ...disable DOS
 313+ 05E9 F1           LVCKSPLK:       pop     AF
 314+ 05EA C9                           ret
 315+ 05EB
 316+ 05EB
 317+ 05EB              ; empty video buffer
 318+ 05EB 3A CF 81     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 319+ 05EE FE 02                        cp      $02             ; is it G2 mode?
 320+ 05F0 CA 14 06                     jp      Z,EMPTYG2       ; yes, jump over
 321+ 05F3 FE 03                        cp      $03             ; is it MC mode?
 322+ 05F5 CA 45 06                     jp      Z,EMPTYMC       ; yes, jump over
 323+ 05F8 3A CE 81                     ld      A,(SCR_SIZE_H)  ; load height of screen
 324+ 05FB 47                           ld      B,A             ; move rows into B
 325+ 05FC AF                           xor     A               ; filling char is $00
 326+ 05FD 2A D1 81                     ld      HL,(SCR_NAM_TB) ; load the name table address
 327+ 0600 CD 7D 06                     call    SETVDPADRS      ; send address to VDP
 328+ 0603 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 329+ 0605 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 330+ 0606 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 331+ 0609 57                           ld      D,A             ; move A into D
 332+ 060A 7B                           ld      A,E             ; recover filling char
 333+ 060B ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 334+ 060D 00                           nop
 335+ 060E 15                           dec     D               ; decr. D
 336+ 060F 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 337+ 0611 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 338+ 0613 C9                           ret                     ; return to caller
 339+ 0614 2A D1 81     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 340+ 0617 CD 6A 06                     call    SETNAMETABLE    ; set name table
 341+ 061A 21 00 00                     ld      HL,$0000        ; set pattern table
 342+ 061D CD 7D 06                     call    SETVDPADRS      ; send address to VDP
 343+ 0620 AF                           xor     A               ; empty pattern
 344+ 0621 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 345+ 0623 47                           ld      B,A             ; 256 bytes for page
 346+ 0624 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 347+ 0626 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 348+ 0628 00                           nop                     ; little delay
 349+ 0629 00                           nop
 350+ 062A 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 351+ 062C 15                           dec     D               ; next page
 352+ 062D 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 353+ 062F 21 00 20                     ld      HL,$2000        ; load the color table address
 354+ 0632 CD 7D 06                     call    SETVDPADRS      ; send address to VDP
 355+ 0635 3A DC 81                     ld      A,(FRGNDCLR)    ; load foreground
 356+ 0638 87                           add     A,A
 357+ 0639 87                           add     A,A
 358+ 063A 87                           add     A,A
 359+ 063B 87                           add     A,A             ; move to high nibble
 360+ 063C 57                           ld      D,A             ; store into D
 361+ 063D 3A DD 81                     ld      A,(BKGNDCLR)    ; load background color
 362+ 0640 B2                           or      D               ; combine with background color
 363+ 0641 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 364+ 0643 18 17                        jr      STARTEMPTY
 365+ 0645 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 366+ 0648 CD 6A 06                     call    SETNAMETABLE    ; set name table
 367+ 064B 21 00 00                     ld      HL,$0000        ; color table address
 368+ 064E CD 7D 06                     call    SETVDPADRS      ; send address to VDP
 369+ 0651 3A DD 81                     ld      A,(BKGNDCLR)    ; load background
 370+ 0654 57                           ld      D,A             ; store into D
 371+ 0655 87                           add     A,A
 372+ 0656 87                           add     A,A
 373+ 0657 87                           add     A,A
 374+ 0658 87                           add     A,A             ; move to high nibble
 375+ 0659 B2                           or      D               ; set background color for high and low nibble
 376+ 065A 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 377+ 065C 0E 30        STARTEMPTY:     ld      C,VDP_DAT       ; VDP address for passing data
 378+ 065E 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 379+ 0660 ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 380+ 0662 00                           nop                     ; wait a while
 381+ 0663 00                           nop
 382+ 0664 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 383+ 0666 15                           dec     D               ; have we filled all the pages?
 384+ 0667 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 385+ 0669 C9                           ret                     ; return to caller
 386+ 066A
 387+ 066A              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 388+ 066A CD 7D 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 389+ 066D 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 390+ 066F 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 391+ 0671 AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 392+ 0672 47                           ld      B,A             ; reset B
 393+ 0673 ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 394+ 0675 00                           nop
 395+ 0676 3C                           inc     A               ; increment # of name
 396+ 0677 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 397+ 0679 15                           dec     D               ; did we fill all the pages?
 398+ 067A 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 399+ 067C C9                           ret                     ; return to caller
 400+ 067D
 401+ 067D              ; set an address into VRAM: address is in HL - HL is changed after it
 402+ 067D 0E 32        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 403+ 067F CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 404+ 0681 ED 69                        out     (C),L           ; send low and...
 405+ 0683 ED 61                        out     (C),H           ; ...high byte of the first cell
 406+ 0685 C9                           ret                     ; return to caller
 407+ 0686
 408+ 0686              ; clear the video buffer and position the cursor at 0,0
 409+ 0686 CD EB 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 410+ 0689 AF                           xor     A               ; reset A
 411+ 068A 32 D3 81                     ld      (SCR_CURS_X),A  ; cursor X to 0
 412+ 068D 32 D4 81                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 413+ 0690 C3 D9 06                     jp      POS_CURSOR      ; position cursor & return to caller
 414+ 0693
 415+ 0693              ; HOME: position the cursor at coords. 0,0
 416+ 0693 AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 417+ 0694 32 D6 81                     ld      (SCR_CUR_NY),A  ; ...new Y...
 418+ 0697 32 D5 81                     ld      (SCR_CUR_NX),A  ; ...and new X
 419+ 069A C3 E3 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 420+ 069D
 421+ 069D              ; load the char or byte at the VRAM position set by HL
 422+ 069D              ; value is returned into A
 423+ 069D C5           READ_VIDEO_LOC: push    BC              ; store BC
 424+ 069E 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 425+ 06A0 44                           ld      B,H
 426+ 06A1 CB B8                        res     7,B
 427+ 06A3 CB B0                        res     6,B
 428+ 06A5 ED 69                        out     (C),L           ; low byte then...
 429+ 06A7 ED 41                        out     (C),B           ; high byte
 430+ 06A9 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 431+ 06AB 00                           nop                     ; wait...
 432+ 06AC 00                           nop                     ; ...a while
 433+ 06AD 00                           nop
 434+ 06AE                  IFDEF LM80C64K
 435+ 06AE ~                            nop
 436+ 06AE                  ENDIF
 437+ 06AE ED 78                        in      A,(C)           ; read byte at current VRAM location
 438+ 06B0 C1                           pop     BC              ; restore BC
 439+ 06B1 C9                           ret                     ; return to caller
 440+ 06B2
 441+ 06B2              ; write a byte at the VRAM position pointed by HL
 442+ 06B2              ; value is in A
 443+ 06B2 C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 444+ 06B3 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 445+ 06B5 44                           ld      B,H             ; copy H into B
 446+ 06B6 CB B8                        res     7,B
 447+ 06B8 CB F0                        set     6,B             ; write to VRAM
 448+ 06BA ED 69                        out     (C),L           ; low byte then...
 449+ 06BC ED 41                        out     (C),B           ; high byte of VRAM address
 450+ 06BE 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 451+ 06C0 00                           nop                     ; wait...
 452+ 06C1 00                           nop                     ; ...a while
 453+ 06C2 00                           nop
 454+ 06C3                  IFDEF LM80C64K
 455+ 06C3 ~                            nop
 456+ 06C3                  ENDIF
 457+ 06C3 ED 79                        out     (C),A           ; write byte into VRAM
 458+ 06C5 C1                           pop     BC              ; restore BC
 459+ 06C6 C9                           ret                     ; return to caller
 460+ 06C7
 461+ 06C7              ; write a value into a specific VDP register
 462+ 06C7              ; value is in E, register is in A
 463+ 06C7 C5           WRITE_VREG:     push    BC              ; store BC
 464+ 06C8 C6 80                        add     A,$80           ; set VDP to write to registers
 465+ 06CA 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 466+ 06CC ED 59                        out     (C),E           ; send data to VDP
 467+ 06CE ED 79                        out     (C),A           ; select the destination register
 468+ 06D0 C1                           pop     BC              ; restore BC
 469+ 06D1 C9                           ret                     ; return to caller
 470+ 06D2
 471+ 06D2              ; read VDP status register and return value into A
 472+ 06D2 C5           READ_VSTAT:     push    BC              ; store BC
 473+ 06D3 0E 32                        ld      C,VDP_SET       ; VDP register access
 474+ 06D5 ED 78                        in      A,(C)           ; read status register
 475+ 06D7 C1                           pop     BC              ; restore BC
 476+ 06D8 C9                           ret                     ; return to caller
 477+ 06D9
 478+ 06D9              ; position the cursor at the current coordinates, preserving underlying char
 479+ 06D9 CD 1C 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 480+ 06DC CD 9D 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 481+ 06DF 32 D7 81                     ld      (SCR_ORG_CHR),A ; store the current char
 482+ 06E2 C9                           ret
 483+ 06E3
 484+ 06E3              ; move cursor to new X,Y coordinates
 485+ 06E3 CD 13 07     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 486+ 06E6 CD FE 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 487+ 06E9 CD D9 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 488+ 06EC 3A D8 81                     ld      A,(CRSR_STATE)  ; load status of cursor
 489+ 06EF A7                           and     A               ; is cursor off?
 490+ 06F0 C8                           ret     Z               ; yes, return
 491+ 06F1 3A BD 81                     ld      A,(TMRCNT)      ; load timer
 492+ 06F4 E6 20                        and     $20             ; check status of cursor flashing
 493+ 06F6 32 D9 81                     ld      (LSTCSRSTA),A   ; store the last cursor state
 494+ 06F9 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 495+ 06FB C3 B2 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 496+ 06FE
 497+ 06FE
 498+ 06FE              ; set new cursor's coordinates
 499+ 06FE 3A D5 81     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 500+ 0701 32 D3 81                     ld      (SCR_CURS_X),A  ; write new X
 501+ 0704 3A D6 81                     ld      A,(SCR_CUR_NY)  ; load new Y
 502+ 0707 32 D4 81                     ld      (SCR_CURS_Y),A  ; write new Y
 503+ 070A 3E FF                        ld      A,$FF           ; delete new values
 504+ 070C 32 D5 81                     ld      (SCR_CUR_NX),A  ; of X
 505+ 070F 32 D6 81                     ld      (SCR_CUR_NY),A  ; and Y
 506+ 0712 C9                           ret
 507+ 0713
 508+ 0713              ; recover char under the cursor and prints it onto the screen
 509+ 0713 CD 1C 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 510+ 0716 3A D7 81                     ld      A,(SCR_ORG_CHR) ; recover old char
 511+ 0719 C3 B2 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 512+ 071C
 513+ 071C              ; retrieve cursor position from either current coordinates or next place
 514+ 071C              ; return address position into HL
 515+ 071C 3A D4 81     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 516+ 071F 6F                           ld      L,A             ; move it into reg.L
 517+ 0720 AF                           xor     A               ; reset A
 518+ 0721 67                           ld      H,A             ; reset H
 519+ 0722 47                           ld      B,A             ; reset B
 520+ 0723 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 521+ 0724 11 AE 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 522+ 0727 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 523+ 072A FE 28                        cp      $28             ; is it 40 cols?
 524+ 072C 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 525+ 072E 11 7E 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 526+ 0731 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 527+ 0732 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 528+ 0733 23                           inc     HL
 529+ 0734 56                           ld      D,(HL)
 530+ 0735 2A D1 81                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 531+ 0738 19                           add     HL,DE           ; starting address of the current row into name table
 532+ 0739 3A D3 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 533+ 073C 4F                           ld      C,A             ; transfer A into C
 534+ 073D 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 535+ 073E C9                           ret
 536+ 073F
 537+ 073F              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 538+ 073F              ; return them into L,A for X,Y
 539+ 073F D5           HL2XY:          push    DE              ; store DE
 540+ 0740 ED 5B D1 81                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 541+ 0744 AF                           xor     A               ; clear Carry
 542+ 0745 ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 543+ 0747 D1                           pop     DE
 544+ 0748 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 545+ 074B 4F                           ld      C,A             ; move it into C
 546+ 074C CD 1E 40                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 547+ 074F C9                           ret                     ; return to caller
 548+ 0750
 549+ 0750              ;-------------------------------------------------------------------------------
 550+ 0750              ; char table for jumps
 551+ 0750 19           CHRTBL:         defb    HOME
 552+ 0751 93 06                        defw    ATHOME          ; move the cursor to 0,0
 553+ 0753
 554+ 0753 0C                           defb    CS
 555+ 0754 86 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 556+ 0756
 557+ 0756 0D                           defb    CR
 558+ 0757 D1 09                        defw    CRGRETURN       ; go to the beginning of the next line
 559+ 0759
 560+ 0759 08                           defb    BKSP
 561+ 075A 3D 08                        defw    BACKSPACE       ; move cursor left 1 position
 562+ 075C
 563+ 075C 1C                           defb    CRSLFT
 564+ 075D 80 08                        defw    CURSORLEFT      ; move cursor left
 565+ 075F
 566+ 075F 1E                           defb    CRSUP
 567+ 0760 CC 08                        defw    CURSORUP        ; move cursor up
 568+ 0762
 569+ 0762 1D                           defb    CRSRGT
 570+ 0763 E5 08                        defw    CURSORRIGHT     ; move cursor right
 571+ 0765
 572+ 0765 1F                           defb    CRSDN
 573+ 0766 1A 09                        defw    CURSORDOWN      ; move cursor up
 574+ 0768
 575+ 0768 1A                           defb    INSRT
 576+ 0769 FB 07                        defw    INSERTKEY       ; insert a space
 577+ 076B
 578+ 076B 0A                           defb    LF
 579+ 076C D7 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 580+ 076E
 581+ 076E              ; send current char to video buffer
 582+ 076E F5           CHAR2VID:       push    AF              ; store AF
 583+ 076F C5                           push    BC              ; store BC
 584+ 0770 D5                           push    DE              ; store DE
 585+ 0771 E5                           push    HL              ; store HL
 586+ 0772 3A D8 81                     ld      A,(CRSR_STATE)  ; store cursor state...
 587+ 0775 F5                           push    AF              ; into stack
 588+ 0776 CD 4F 09                     call    CURSOR_OFF      ; cursor off
 589+ 0779 3A DB 81                     ld      A,(CHR4VID)     ; recover char
 590+ 077C 06 0A                        ld      B,$0A           ; 10 chars to check
 591+ 077E 21 50 07                     ld      HL,CHRTBL       ; address of key table
 592+ 0781 BE           RPTCPCK:        cp      (HL)            ; compare with char
 593+ 0782 23                           inc     HL              ; beginning of sub-routine address
 594+ 0783 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 595+ 0785 5E                           ld      E,(HL)          ; load addres into DE
 596+ 0786 23                           inc     HL
 597+ 0787 56                           ld      D,(HL)
 598+ 0788 EB                           ex      DE,HL           ; move user routine's address into HL
 599+ 0789 11 CA 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 600+ 078C D5                           push    DE              ; store into stack
 601+ 078D E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 602+ 078E 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 603+ 078F 23                           inc     HL              ; ...to the next char code
 604+ 0790 10 EF                        djnz    RPTCPCK         ; repeat
 605+ 0792                              ; it'a not a special char, just print it
 606+ 0792 CD 1C 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 607+ 0795 3A DB 81                     ld      A,(CHR4VID)     ; recover char to print
 608+ 0798 CD B2 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 609+ 079B 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 610+ 079E 5F                           ld      E,A             ; store cursor Y into E
 611+ 079F 3A D3 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 612+ 07A2 3C                           inc     A               ; move 1 step to right
 613+ 07A3 21 CD 81                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 614+ 07A6 BE                           cp      (HL)            ; have we reached the most right position?
 615+ 07A7 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 616+ 07A9 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 617+ 07AA 7B                           ld      A,E             ; move cursor Y into A
 618+ 07AB 21 CE 81                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 619+ 07AE BE                           cp      (HL)            ; have we reached the bottom of the screen?
 620+ 07AF 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 621+ 07B1 D5                           push    DE
 622+ 07B2 CD 56 09                     call    SCROLLUP        ; scroll screen up
 623+ 07B5 D1                           pop     DE
 624+ 07B6 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 625+ 07B7 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 626+ 07B8 32 D3 81     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 627+ 07BB 7B                           ld      A,E             ; recover Y
 628+ 07BC 32 D4 81                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 629+ 07BF CD D9 06                     call    POS_CURSOR      ; position cursor into new location
 630+ 07C2 3A BD 81                     ld      A,(TMRCNT)      ; load status of cursor flashing
 631+ 07C5 E6 20                        and     $20             ; check cursor state
 632+ 07C7 32 D9 81                     ld      (LSTCSRSTA),A   ; store the last cursor state
 633+ 07CA AF           EXITCHAR2VID:   xor     A               ; reset char
 634+ 07CB 32 DB 81                     ld      (CHR4VID),A     ; to be sent to screen
 635+ 07CE F1                           pop     AF              ; recover cursor state
 636+ 07CF A7                           and     A               ; was it off (A=0)?
 637+ 07D0 C4 3A 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 638+ 07D3 E1                           pop     HL              ; restore HL
 639+ 07D4 D1                           pop     DE              ; restore DE
 640+ 07D5 C1                           pop     BC              ; restore BC
 641+ 07D6 F1                           pop     AF              ; restore AF
 642+ 07D7 C9           PLACEHOLDER:    ret                     ; return to caller
 643+ 07D8
 644+ 07D8              ; flash the cursor at the current position
 645+ 07D8              ; (this sub-routine is called by CH3 timer ISR)
 646+ 07D8 3A D8 81     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 647+ 07DB A7                           and     A               ; cursor off (A=0)?
 648+ 07DC C8                           ret     Z               ; yes, return
 649+ 07DD 3A BD 81                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 650+ 07E0 E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 651+ 07E2 21 D9 81                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 652+ 07E5 BE                           cp      (HL)            ; compare current state with last state
 653+ 07E6 C8                           ret     Z               ; same state, no change required - exit
 654+ 07E7 77                           ld      (HL),A          ; save new state
 655+ 07E8 F5                           push    AF              ; store A (keep state for later use)
 656+ 07E9 CD 1C 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 657+ 07EC F1                           pop     AF              ; recover current state
 658+ 07ED 06 FF                        ld      B,$FF           ; cursor char
 659+ 07EF FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 660+ 07F1 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 661+ 07F3 3A D7 81                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 662+ 07F6 47                           ld      B,A             ; move char into B
 663+ 07F7 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 664+ 07F8 C3 B2 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 665+ 07FB
 666+ 07FB
 667+ 07FB              ; insert an empty space at the current position of the cursor, moving the following text
 668+ 07FB              ; 1 cell straight
 669+ 07FB CD 13 07     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 670+ 07FE CD 1C 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 671+ 0801 22 DE 81                     ld      (CUR_POS),HL    ; store it
 672+ 0804 CD 58 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 673+ 0807                                                      ; DE is the address of the bottom right cell of the screen
 674+ 0807 22 E2 81                     ld      (ENDTXT),HL     ; store it
 675+ 080A ED 4B DE 81                  ld      BC,(CUR_POS)    ; load starting address
 676+ 080E AF                           xor     A
 677+ 080F ED 42                        sbc     HL,BC           ; how many positions to move?
 678+ 0811 CA E9 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 679+ 0814 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 680+ 0816 2A E2 81                     ld      HL,(ENDTXT)     ; load address of the end of text
 681+ 0819 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 682+ 081A E5                           push    HL
 683+ 081B CD DF 3F                     call    CMP16           ; is it the last cell (bottom right) of screen?
 684+ 081E E1                           pop     HL
 685+ 081F D2 2A 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 686+ 0822 CD 9D 06                     call    READ_VIDEO_LOC  ; no, so read current char
 687+ 0825 23                           inc     HL              ; next cell
 688+ 0826 CD B2 06                     call    WRITE_VIDEO_LOC ; write into new position
 689+ 0829 2B                           dec     HL              ; decrement to old position
 690+ 082A 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 691+ 082B 79                           ld      A,C
 692+ 082C B0                           or      B               ; finished?
 693+ 082D 20 EA                        jr      NZ,CHKHL        ; no, repeat
 694+ 082F 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 695+ 0831 2A DE 81                     ld      HL,(CUR_POS)    ; get cursor position
 696+ 0834 32 D7 81                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 697+ 0837 CD B2 06                     call    WRITE_VIDEO_LOC ; empty current video location
 698+ 083A C3 E9 06                     jp      MOVSHOWCRS      ; re-place cursor
 699+ 083D
 700+ 083D              ; delete the char at the left of the cursor
 701+ 083D CD 13 07     BACKSPACE:      call    RSTCHRCRS       ; restore char
 702+ 0840 2A D1 81                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 703+ 0843 44 4D                        ld      BC,HL           ; store into BC
 704+ 0845 CD 1C 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 705+ 0848 54 5D                        ld      DE,HL           ; copy into DE
 706+ 084A AF                           xor     A               ; reset Carry
 707+ 084B ED 42                        sbc     HL,BC           ; check how many chars between
 708+ 084D CA 77 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 709+ 0850 ED 53 DE 81                  ld      (CUR_POS),DE    ; store current cursor position
 710+ 0854 CD 58 0A                     call    ENDOFLN         ; check end of text
 711+ 0857 ED 5B DE 81                  ld      DE,(CUR_POS)    ; retrieve cursor position
 712+ 085B AF                           xor     A               ; reset Carry
 713+ 085C ED 52                        sbc     HL,DE           ; check if none follows
 714+ 085E CA 77 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 715+ 0861 44 4D                        ld      BC,HL           ; save numbers of chars to move
 716+ 0863 EB                           ex      DE,HL           ; copy starting position into HL
 717+ 0864 CD 9D 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 718+ 0867 2B                           dec     HL              ; 1 position to left
 719+ 0868 CD B2 06                     call    WRITE_VIDEO_LOC ; write char
 720+ 086B 23                           inc     HL              ; goto next char to copy (2 steps to right)
 721+ 086C 23                           inc     HL
 722+ 086D 0B                           dec     BC              ; decrement # of chars
 723+ 086E 79                           ld      A,C
 724+ 086F B0                           or      B               ; 0 chars?
 725+ 0870 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 726+ 0872 2B                           dec     HL
 727+ 0873 AF                           xor     A
 728+ 0874 CD B2 06                     call    WRITE_VIDEO_LOC ; reset last char
 729+ 0877 CD A9 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 730+ 087A CD FE 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 731+ 087D C3 E9 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 732+ 0880
 733+ 0880
 734+ 0880              ; move cursor to left
 735+ 0880 F5           CURSORLEFT:     push    AF              ; store A
 736+ 0881 3A D3 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 737+ 0884 A7                           and     A               ; is it at the most left of the screen (X=0)?
 738+ 0885 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 739+ 0887 3D                           dec     A               ; no, decrement X
 740+ 0888 32 D5 81                     ld      (SCR_CUR_NX),A  ; store new X
 741+ 088B 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 742+ 088E 32 D6 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 743+ 0891 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 744+ 0893 3A D4 81     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 745+ 0896 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 746+ 0897 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 747+ 0899 3D                           dec     A               ; no, decrement Y
 748+ 089A 32 D6 81                     ld      (SCR_CUR_NY),A  ; store new Y
 749+ 089D 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 750+ 08A0 3D                           dec     A               ; cursor to the most right position (width-0)
 751+ 08A1 32 D5 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 752+ 08A4 CD E3 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 753+ 08A7 F1           EXITCURSORLEFT: pop     AF              ; restore A
 754+ 08A8 C9                           ret                     ; return to caller
 755+ 08A9
 756+ 08A9              ; move cursor 1 position to the left
 757+ 08A9 3A D3 81     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 758+ 08AC A7                           and     A               ; is it at the most left of the screen (X=0)?
 759+ 08AD 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 760+ 08AF 3D                           dec     A               ; no, decrement X
 761+ 08B0 32 D5 81                     ld      (SCR_CUR_NX),A  ; store new X
 762+ 08B3 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 763+ 08B6 32 D6 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 764+ 08B9 C9                           ret                     ; go on moving cursor
 765+ 08BA 3A D4 81     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 766+ 08BD A7                           and     A               ; is it at the most top of the screen (Y=0)?
 767+ 08BE 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 768+ 08C0 3D                           dec     A               ; no, decrement Y
 769+ 08C1 32 D6 81                     ld      (SCR_CUR_NY),A  ; store new Y
 770+ 08C4 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 771+ 08C7 3D                           dec     A               ; cursor to the most right position (width-1)
 772+ 08C8 32 D5 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 773+ 08CB C9                           ret                     ; return to caller
 774+ 08CC
 775+ 08CC              ; move cursor up
 776+ 08CC F5           CURSORUP:       push    AF              ; store A
 777+ 08CD 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 778+ 08D0 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 779+ 08D1 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 780+ 08D3 3D                           dec     A               ; no, decrement Y
 781+ 08D4 32 D6 81                     ld      (SCR_CUR_NY),A  ; store new Y
 782+ 08D7 3A D3 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 783+ 08DA 32 D5 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 784+ 08DD CD 13 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 785+ 08E0 CD E3 06                     call    MOVCRS          ; move cursor into new position
 786+ 08E3 F1           EXITCURSORUP:   pop     AF              ; restore A
 787+ 08E4 C9                           ret                     ; return to caller
 788+ 08E5
 789+ 08E5
 790+ 08E5              ; move cursor to right
 791+ 08E5 F5           CURSORRIGHT:    push    AF              ; store A
 792+ 08E6 C5                           push    BC              ; store B
 793+ 08E7 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 794+ 08EA 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 795+ 08EB 47                           ld      B,A             ; move A into B
 796+ 08EC 3A D3 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 797+ 08EF B8                           cp      B               ; is cursor at the most right position on the screen?
 798+ 08F0 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 799+ 08F2 3C                           inc     A               ; no, so increment X
 800+ 08F3 32 D5 81                     ld      (SCR_CUR_NX),A  ; store new X
 801+ 08F6 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 802+ 08F9 32 D6 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 803+ 08FC 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 804+ 08FE 3A CE 81     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 805+ 0901 3D                           dec     A               ; decrement it (last row can only be 23)
 806+ 0902 47                           ld      B,A             ; move bottom into B
 807+ 0903 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 808+ 0906 B8                           cp      B               ; is the cursor at the bottom of the screen?
 809+ 0907 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 810+ 0909 3C                           inc     A               ; no, increment Y
 811+ 090A 32 D6 81                     ld      (SCR_CUR_NY),A  ; store new Y
 812+ 090D AF                           xor     A               ; move cursor to top left
 813+ 090E 32 D5 81                     ld      (SCR_CUR_NX),A  ; store new X
 814+ 0911 CD 13 07     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 815+ 0914 CD E3 06                     call    MOVCRS          ; move cursor into new position
 816+ 0917 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 817+ 0918 F1                           pop     AF              ; restore A
 818+ 0919 C9                           ret                     ; return to caller
 819+ 091A
 820+ 091A
 821+ 091A              ; move cursor down
 822+ 091A F5           CURSORDOWN:     push    AF              ; store A
 823+ 091B C5                           push    BC              ; store B
 824+ 091C 3A CE 81                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 825+ 091F 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 826+ 0920 47                           ld      B,A             ; move X into B
 827+ 0921 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 828+ 0924 B8                           cp      B               ; is current cursor position < 23?
 829+ 0925 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 830+ 0927 3C                           inc     A               ; yes, increment Y
 831+ 0928 32 D6 81                     ld      (SCR_CUR_NY),A  ; store new Y
 832+ 092B 3A D3 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 833+ 092E 32 D5 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 834+ 0931 CD 13 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 835+ 0934 CD E3 06                     call    MOVCRS          ; move cursor into new position
 836+ 0937 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 837+ 0938 F1                           pop     AF              ; retrieve A
 838+ 0939 C9                           ret                     ; return to caller
 839+ 093A
 840+ 093A
 841+ 093A              ; set cursor on (visible on screen)
 842+ 093A F5           CURSOR_ON:      push    AF              ; store AF
 843+ 093B 3A D8 81                     ld      A,(CRSR_STATE)  ; load cursor state
 844+ 093E B7                           or      A               ; is it on?
 845+ 093F 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 846+ 0941 3A CE 81                     ld      A,(SCR_SIZE_H)  ; check the video mode
 847+ 0944 FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 848+ 0946 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 849+ 0948 3E 01                        ld      A,$01           ; cursor state ON
 850+ 094A 32 D8 81                     ld      (CRSR_STATE),A  ; set state
 851+ 094D F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 852+ 094E C9                           ret                     ; return to caller
 853+ 094F
 854+ 094F              ; set cursor off (invisible on screen)
 855+ 094F F5           CURSOR_OFF:     push    AF              ; store AF
 856+ 0950 AF                           xor     A               ; cursor state OFF
 857+ 0951 32 D8 81                     ld      (CRSR_STATE),A  ; set state
 858+ 0954 F1                           pop     AF              ; restore AF
 859+ 0955 C9                           ret
 860+ 0956
 861+ 0956              ; scroll the screen 1 row up
 862+ 0956 AF           SCROLLUP:       xor     A
 863+ 0957 32 DA 81                     ld      (PRNTVIDEO),A
 864+ 095A 2A D1 81                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 865+ 095D 22 0E 82                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 866+ 0960 3A CD 81                     ld      A,(SCR_SIZE_W)  ; load the screen width
 867+ 0963 5F                           ld      E,A             ; move width into E
 868+ 0964 16 00                        ld      D,$00           ; reset D
 869+ 0966 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 870+ 0967 22 10 82                     ld      (VIDTMP2),HL    ; store address of source row
 871+ 096A 3A CE 81                     ld      A,(SCR_SIZE_H)  ; load the screen height
 872+ 096D 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 873+ 096E 47                           ld      B,A             ; move # of rows into B
 874+ 096F 3A CD 81     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 875+ 0972 5F                           ld      E,A             ; move width into E
 876+ 0973 2A 10 82                     ld      HL,(VIDTMP2)    ; load source address
 877+ 0976 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 878+ 0978 ED 69                        out     (C),L           ; low byte of source
 879+ 097A ED 61                        out     (C),H           ; high byte of source
 880+ 097C 21 E6 81                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 881+ 097F 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 882+ 0981 ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 883+ 0983 77                           ld      (HL),A          ; store char
 884+ 0984 23                           inc     HL              ; next cell of the buffer
 885+ 0985 1D                           dec     E               ; count the chars to be read
 886+ 0986 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 887+ 0988 3A CD 81                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 888+ 098B 5F                           ld      E,A             ; move # of rows into E
 889+ 098C 16 00                        ld      D,$00           ; reset D
 890+ 098E 2A 0E 82                     ld      HL,(VIDTMP1)    ; load address of destination row
 891+ 0991 E5                           push    HL              ; store HL
 892+ 0992 2A 10 82                     ld      HL,(VIDTMP2)    ; current source will be..
 893+ 0995 22 0E 82                     ld      (VIDTMP1),HL    ; ..new destination
 894+ 0998 19                           add     HL,DE           ; address of new
 895+ 0999 22 10 82                     ld      (VIDTMP2),HL    ; source row
 896+ 099C E1                           pop     HL              ; restore address of current destination row
 897+ 099D CB F4                        set     6,H             ; writing mode
 898+ 099F 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 899+ 09A1 ED 69                        out     (C),L           ; low byte
 900+ 09A3 ED 61                        out     (C),H           ; high byte of address
 901+ 09A5 21 E6 81                     ld      HL,VIDEOBUFF    ; video buffer address
 902+ 09A8 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 903+ 09AA 7E           WRITEBUF:       ld      A,(HL)          ; load char
 904+ 09AB ED 79                        out     (C),A           ; send char
 905+ 09AD 23                           inc     HL              ; increment buffer index
 906+ 09AE 1D                           dec     E               ; next row
 907+ 09AF 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 908+ 09B1 10 BC                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 909+ 09B3 3A CD 81                     ld      A,(SCR_SIZE_W)  ; reload screen width
 910+ 09B6 47                           ld      B,A             ; cells to empty into B
 911+ 09B7 AF                           xor     A               ; null char
 912+ 09B8 0E 32                        ld      C,VDP_SET       ; VDP set mode
 913+ 09BA 2A 0E 82                     ld      HL,(VIDTMP1)    ; load address of the last row
 914+ 09BD CB F4                        set     6,H             ; writing mode
 915+ 09BF ED 69                        out     (C),L           ; low byte then..
 916+ 09C1 ED 61                        out     (C),H           ; high byte of address
 917+ 09C3 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 918+ 09C5 ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 919+ 09C7 00                           nop                     ; delay
 920+ 09C8 00                           nop
 921+ 09C9 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 922+ 09CB 3E 01                        ld      A,$01
 923+ 09CD 32 DA 81                     ld      (PRNTVIDEO),A   ; set print-on-video on
 924+ 09D0 C9                           ret                     ; return to caller
 925+ 09D1
 926+ 09D1              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 927+ 09D1              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 928+ 09D1              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 929+ 09D1              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 930+ 09D1              CUR_POS         equ     TMPBFR1         ; cursor position
 931+ 09D1              SRTTXT          equ     TMPBFR2         ; start of text line
 932+ 09D1              ENDTXT          equ     TMPBFR3         ; end of text line
 933+ 09D1              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 934+ 09D1 3A D8 81                     ld      A,(CRSR_STATE)  ; recover cursor state
 935+ 09D4 32 E4 81                     ld      (TMPBFR4),A     ; store status
 936+ 09D7 A7                           and     A               ; is cursor on?
 937+ 09D8 C4 4F 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 938+ 09DB CD 13 07                     call    RSTCHRCRS       ; restore char under it
 939+ 09DE                              ; first, check if cursor if off, so that we just interpret return as a new line command
 940+ 09DE 3A 18 82                     ld      A,(KBDNPT)      ; check if input from keyboad
 941+ 09E1 A7                           and     A               ; if 0, input is not from keyboard...
 942+ 09E2 CA 37 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 943+ 09E5                              ; first part: look for the beginning of the text line on screen
 944+ 09E5 CD 1C 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 945+ 09E8 22 DE 81                     ld      (CUR_POS),HL    ; store it
 946+ 09EB ED 5B D1 81                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 947+ 09EF E5           RPTNLLSRC:      push    HL
 948+ 09F0 CD DF 3F                     call    CMP16           ; check if at "home"
 949+ 09F3 E1                           pop     HL
 950+ 09F4 CA FF 09                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 951+ 09F7 2B                           dec     HL              ; go 1 step back
 952+ 09F8 CD 9D 06                     call    READ_VIDEO_LOC  ; read char of current position
 953+ 09FB A7                           and     A               ; is it $00 (null char)?
 954+ 09FC 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 955+ 09FE 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 956+ 09FF                              ; second part: look for the ending of the text on screen
 957+ 09FF 22 E0 81     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 958+ 0A02 CD 58 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 959+ 0A05 22 E2 81                     ld      (ENDTXT),HL     ; store ending of text line
 960+ 0A08 ED 5B E0 81                  ld      DE,(SRTTXT)     ; load beginning of text line
 961+ 0A0C A7                           and     A               ; clear Carry
 962+ 0A0D ED 52                        sbc     HL,DE           ; how many chars?
 963+ 0A0F 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 964+ 0A11                              ;---    central part: send the text on the screen to the interpreter
 965+ 0A11 2A E0 81                     ld      HL,(SRTTXT)     ; load beginning of text line
 966+ 0A14 ED 5B E2 81                  ld      DE,(ENDTXT)     ; load ending of text line
 967+ 0A18 CD 9D 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 968+ 0A1B E5                           push    HL
 969+ 0A1C CD F4 01                     call    CHARINTOBFR     ; send char to buffer
 970+ 0A1F E1                           pop     HL
 971+ 0A20 23                           inc     HL              ; go to next char
 972+ 0A21 E5                           push    HL              ; store HL
 973+ 0A22 CD DF 3F                     call    CMP16           ; check if DE=HL (finish chars)
 974+ 0A25 E1                           pop     HL
 975+ 0A26 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 976+ 0A28 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 977+ 0A2A CD F4 01                     call    CHARINTOBFR     ; send to buffer
 978+ 0A2D 2A E2 81                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 979+ 0A30 CD 3F 07                     call    HL2XY           ; retrieve X,Y from address
 980+ 0A33 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 981+ 0A34 32 D4 81                     ld      (SCR_CURS_Y),A  ; store new Y
 982+ 0A37                              ;---    final part: go at the beginning of a new line on the screen
 983+ 0A37 AF           PRNTRETURN:     xor     A               ; move to col 0
 984+ 0A38 32 D3 81                     ld      (SCR_CURS_X),A  ; store new X
 985+ 0A3B 3A D4 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 986+ 0A3E 3C                           inc     A               ; new row
 987+ 0A3F 21 CE 81                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 988+ 0A42 BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 989+ 0A43 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 990+ 0A45 3D                           dec     A               ; yes, so come back 1 row, then...
 991+ 0A46 F5                           push    AF              ; (store A)
 992+ 0A47 CD 56 09                     call    SCROLLUP        ; ...scroll the screen before to...
 993+ 0A4A F1                           pop     AF              ; (retrieve A)
 994+ 0A4B 32 D4 81     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 995+ 0A4E 3A E4 81                     ld      A,(TMPBFR4)     ; retrieve cursor state
 996+ 0A51 A7                           and     A               ; was it off (A=0)?
 997+ 0A52 C4 3A 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 998+ 0A55 C3 D9 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
 999+ 0A58
1000+ 0A58              ; find end of text line
1001+ 0A58              ; destroys A, DE, and HL - store address of last char of text line into HL,
1002+ 0A58              ; while DE contains the address of the bottom right cell of the screen
1003+ 0A58 3A CE 81     ENDOFLN:        ld      A,(SCR_SIZE_H)
1004+ 0A5B 5F                           ld      E,A             ; load screen height into DE
1005+ 0A5C 3A CD 81                     ld      A,(SCR_SIZE_W)
1006+ 0A5F 6F                           ld      L,A             ; load screen width into HL
1007+ 0A60 AF                           xor     A
1008+ 0A61 67                           ld      H,A
1009+ 0A62 57                           ld      D,A
1010+ 0A63 CD EA 3F                     call    MUL16           ; multiply HL times DE to get the screen size
1011+ 0A66 ED 5B D1 81                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1012+ 0A6A 19                           add     HL,DE           ; get the address...
1013+ 0A6B 2B                           dec     HL              ; ...of the "last" video cell
1014+ 0A6C EB                           ex      DE,HL           ; store address into DE
1015+ 0A6D 2A DE 81                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1016+ 0A70 E5           RPTNLLSRC2:     push    HL
1017+ 0A71 CD DF 3F                     call    CMP16           ; check if at last position on screen (bottom right corner)
1018+ 0A74 E1                           pop     HL
1019+ 0A75 C8                           ret     Z               ; if yes, exit because these is nothing after
1020+ 0A76 23                           inc     HL              ; 1 more step forward
1021+ 0A77 CD 9D 06                     call    READ_VIDEO_LOC  ; read char of current position
1022+ 0A7A A7                           and     A               ; is it $00 (null char)?
1023+ 0A7B 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1024+ 0A7D C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1025+ 0A7E
1026+ 0A7E
1027+ 0A7E              ; ------------------------------------------------------------------------------
1028+ 0A7E                              ; this table contains the values of the offsets to be added to
1029+ 0A7E                              ; the starting address of the name table to find the correct
1030+ 0A7E                              ; value of the first cell of the corresponding row
1031+ 0A7E                              ; (by doing so, it's faster than doing a multipication)
1032+ 0A7E                              ; table for graphics 1 text mode: 32 cols
1033+ 0A7E 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1033+ 0A82 40 00 60 00
1033+ 0A86 80 00 A0 00
1033+ 0A8A C0 00 E0 00
1034+ 0A8E 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1034+ 0A92 40 01 60 01
1034+ 0A96 80 01 A0 01
1034+ 0A9A C0 01 E0 01
1035+ 0A9E 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1035+ 0AA2 40 02 60 02
1035+ 0AA6 80 02 A0 02
1035+ 0AAA C0 02 E0 02
1036+ 0AAE                              ; table for pure text mode: 40 cols
1037+ 0AAE 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1037+ 0AB2 50 00 78 00
1037+ 0AB6 A0 00 C8 00
1037+ 0ABA F0 00 18 01
1038+ 0ABE 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1038+ 0AC2 90 01 B8 01
1038+ 0AC6 E0 01 08 02
1038+ 0ACA 30 02 58 02
1039+ 0ACE 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1039+ 0AD2 D0 02 F8 02
1039+ 0AD6 20 03 48 03
1039+ 0ADA 70 03 98 03
1040+ 0ADE
1041+ 0ADE              ; ------------------------------------------------------------------------------
1042+ 0ADE              ; reset VRAM
1043+ 0ADE AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1044+ 0ADF 67                           ld      H,A
1045+ 0AE0 6F                           ld      L,A             ; reset HL
1046+ 0AE1 CD 7D 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1047+ 0AE4 06 40                        ld      B,$40           ; $40 pages of RAM...
1048+ 0AE6 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1049+ 0AE7 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1050+ 0AE9 ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1051+ 0AEB 14                           inc     D               ; next cell
1052+ 0AEC 00                           nop
1053+ 0AED 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1054+ 0AEF 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1055+ 0AF1 C9                           ret                     ; return to caller
1056+ 0AF2
1057+ 0AF2              ; clear video registers in SRAM
1058+ 0AF2 21 CD 81     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1059+ 0AF5 AF                           xor     A               ; $00 to clean the registers
1060+ 0AF6 06 45                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1061+ 0AF8 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1062+ 0AF9 23                           inc     HL              ; next register
1063+ 0AFA 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1064+ 0AFC C9                           ret                     ; return to caller
1065+ 0AFD
1066+ 0AFD              ; ------------------------------------------------------------------------------
1067+ 0AFD              ; set a specific graphics mode, passed into reg. E
1068+ 0AFD 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1069+ 0AFF CB 23                        sla     E               ; multiply E by 8..
1070+ 0B01 CB 23                        sla     E               ; so that reg. E can point..
1071+ 0B03 CB 23                        sla     E               ; to the correct settings
1072+ 0B05 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1073+ 0B07 21 3A 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1074+ 0B0A 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1075+ 0B0B 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1076+ 0B0D 0E 32                        ld      C,VDP_SET       ; VDP set
1077+ 0B0F 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1078+ 0B10 ED 51                        out     (C),D           ; send data to VDP
1079+ 0B12 ED 79                        out     (C),A           ; indicate the register to send data to
1080+ 0B14 3C                           inc     A               ; next register
1081+ 0B15 23                           inc     HL              ; next value
1082+ 0B16 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1083+ 0B18 C9                           ret
1084+ 0B19
1085+ 0B19              ; ------------------------------------------------------------------------------
1086+ 0B19              LOADCHARSET:    ; reg. A contains the video mode
1087+ 0B19                              ; reg. HL contains address of pattern table into VRAM
1088+ 0B19 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1089+ 0B1B CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1090+ 0B1D 0E 32                        ld      C,VDP_SET       ; load VDP address into C
1091+ 0B1F ED 69                        out     (C),L           ; send low byte of address
1092+ 0B21 ED 61                        out     (C),H           ; send high byte
1093+ 0B23 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1094+ 0B25 21 42 40                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1095+ 0B28 A7                           and     A               ; is it text mode (A=0)?
1096+ 0B29 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1097+ 0B2B 21 42 48                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1098+ 0B2E 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1099+ 0B30 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1100+ 0B31 ED 79                        out     (C),A           ; write byte into VRAM
1101+ 0B33 23                           inc     HL              ; inc byte pointer
1102+ 0B34 15                           dec     D               ; 8 bytes sents (0 char)?
1103+ 0B35 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1104+ 0B37 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1105+ 0B39 C9                           ret                     ; return to caller
1106+ 0B3A
1107+ 0B3A              ;------------------------------------------------------------------------------
1108+ 0B3A              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1109+ 0B3A              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1110+ 0B3A              ; COLOR TABLE:      color settings for chars/tiles
1111+ 0B3A
1112+ 0B3A                              ; VDP register settings for a text display
1113+ 0B3A 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1114+ 0B3B D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1115+ 0B3C 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1116+ 0B3D 00                           defb    $00             ; reg.3: not used in text mode
1117+ 0B3E 00                           defb    $00             ; reg.4: pattern table set to $0000
1118+ 0B3F 00                           defb    $00             ; reg.5: not used in text mode
1119+ 0B40 00                           defb    $00             ; reg.6: not used in text mode
1120+ 0B41 F5                           defb    $f5             ; reg.7: white text on light blue background
1121+ 0B42
1122+ 0B42              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1123+ 0B42 00                           defb    %00000000       ; reg.0: ext. video off
1124+ 0B43 C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1125+ 0B44 06                           defb    $06             ; reg.2: name table address: $1800
1126+ 0B45 80                           defb    $80             ; reg.3: color table address: $2000
1127+ 0B46 00                           defb    $00             ; reg.4: pattern table address: $0000
1128+ 0B47 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1129+ 0B48 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1130+ 0B49 05                           defb    $05             ; reg.7: backdrop color (light blue)
1131+ 0B4A
1132+ 0B4A              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1133+ 0B4A 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1134+ 0B4B C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1135+ 0B4C 06                           defb    $06             ; reg.2: name table addr.: $1800
1136+ 0B4D FF                           defb    $FF             ; reg.3: color table addr.: $2000
1137+ 0B4E 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1138+ 0B4F 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1139+ 0B50 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1140+ 0B51 05                           defb    $05             ; reg.7: backdrop color: light blue
1141+ 0B52
1142+ 0B52              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1143+ 0B52 00                           defb    %00000000       ; reg.0: ext. video dis.
1144+ 0B53 CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1145+ 0B54 02                           defb    $02             ; reg.2: name table addr.: $0800
1146+ 0B55 00                           defb    $00             ; reg.3: don't care
1147+ 0B56 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1148+ 0B57 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1149+ 0B58 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1150+ 0B59 0F                           defb    $0F             ; reg.7: backdrop color (white)
1151+ 0B5A
1152+ 0B5A              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1153+ 0B5A 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1154+ 0B5B C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1155+ 0B5C 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1156+ 0B5D 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1157+ 0B5E 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1158+ 0B5F 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1159+ 0B60 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1160+ 0B61 05                           defb    $05             ; reg.7: backdrop color: light blue
1161+ 0B62
1162+ 0B62              LM80CLOGO:      ; patterns to compose the splash screen logo
1163+ 0B62                              ; 1st band
1164+ 0B62 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1164+ 0B66 00 00 00 00
1164+ 0B6A 00 00 00 00
1164+ 0B6E 00 00 00 00
1164+ 0B72 00 00 00 00
1164+ 0B76 00 00 00 00
1164+ 0B7A 00 00 00 00
1164+ 0B7E 00 00 00 00
1165+ 0B82 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1165+ 0B86 0B 10 00 00
1165+ 0B8A 00 00 00 00
1165+ 0B8E 00 00 00 00
1165+ 0B92 00 00 00 00
1165+ 0B96 00 00 00 00
1165+ 0B9A 00 00 00 00
1165+ 0B9E 00 00 00 00
1166+ 0BA2                              ; 2nd band
1167+ 0BA2 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1167+ 0BA6 00 0C 00 00
1167+ 0BAA 00 01 00 00
1167+ 0BAE 00 14 00 00
1167+ 0BB2 06 05 06 15
1167+ 0BB6 16 07 06 15
1167+ 0BBA 16 07 06 01
1167+ 0BBE 01 07 00 00
1168+ 0BC2 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1168+ 0BC6 00 0C 00 00
1168+ 0BCA 00 01 00 00
1168+ 0BCE 00 01 14 06
1168+ 0BD2 01 05 03 05
1168+ 0BD6 03 05 03 05
1168+ 0BDA 03 05 03 05
1168+ 0BDE 03 05 00 00
1169+ 0BE2                              ; 3rd band
1170+ 0BE2 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1170+ 0BE6 00 0C 00 00
1170+ 0BEA 00 01 00 00
1170+ 0BEE 00 01 01 01
1170+ 0BF2 01 05 09 14
1170+ 0BF6 13 08 03 05
1170+ 0BFA 13 05 03 05
1170+ 0BFE 00 00 00 00
1171+ 0C02 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1171+ 0C06 00 0C 00 00
1171+ 0C0A 00 01 00 00
1171+ 0C0E 00 01 00 08
1171+ 0C12 03 05 06 15
1171+ 0C16 16 07 03 01
1171+ 0C1A 16 05 03 05
1171+ 0C1E 00 00 00 00
1172+ 0C22                              ; 4th band
1173+ 0C22 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1173+ 0C26 00 0C 00 00
1173+ 0C2A 00 01 00 00
1173+ 0C2E 00 01 00 00
1173+ 0C32 03 05 03 05
1173+ 0C36 03 05 03 05
1173+ 0C3A 03 05 03 05
1173+ 0C3E 03 05 00 00
1174+ 0C42 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1174+ 0C46 00 0C 00 00
1174+ 0C4A 00 01 04 04
1174+ 0C4E 00 01 00 00
1174+ 0C52 03 05 09 14
1174+ 0C56 13 08 09 14
1174+ 0C5A 13 08 09 01
1174+ 0C5E 01 08 00 00
1175+ 0C62                              ; 5th band
1176+ 0C62 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1176+ 0C66 12 11 00 00
1176+ 0C6A 00 00 00 00
1176+ 0C6E 00 00 00 00
1176+ 0C72 00 00 00 00
1176+ 0C76 00 00 00 00
1176+ 0C7A 00 00 00 00
1176+ 0C7E 00 00 00 00
1177+ 0C82 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1177+ 0C86 00 00 00 00
1177+ 0C8A 00 00 00 00
1177+ 0C8E 00 00 00 00
1177+ 0C92 00 00 00 00
1177+ 0C96 00 00 00 00
1177+ 0C9A 00 00 00 00
1177+ 0C9E 00 00 00 00
# file closed: ../include/vdp/vdp-1.3.asm
  73  0CA2
  74  0CA2              ; incude the latest version of the PSG module
  75  0CA2                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0CA2              ; ------------------------------------------------------------------------------
   2+ 0CA2              ; LM80C - PSG ROUTINES - 1.1
   3+ 0CA2              ; ------------------------------------------------------------------------------
   4+ 0CA2              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0CA2              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0CA2              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0CA2              ; kind of warranty: you can use them at your own risk.
   8+ 0CA2              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0CA2              ; maintain the copyright notices, include this advice and the note to the
  10+ 0CA2              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0CA2              ; redistribuite them.
  12+ 0CA2              ; https://www.leonardomiliani.com
  13+ 0CA2              ;
  14+ 0CA2              ; Please support me by visiting the following links:
  15+ 0CA2              ; Main project page: https://www.leonardomiliani.com
  16+ 0CA2              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0CA2              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0CA2              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0CA2              ; ------------------------------------------------------------------------------
  20+ 0CA2              ;
  21+ 0CA2              ; ------------------------------------------------------------------------------
  22+ 0CA2
  23+ 0CA2              ;------------------------------------------------------------------------------
  24+ 0CA2
  25+ 0CA2              ; configure the PSG
  26+ 0CA2 21 12 82     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0CA5 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0CA7 AF                           xor     A               ; reset A
  29+ 0CA8 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0CA9 23                           inc     HL              ; next register
  31+ 0CAA 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0CAC 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0CAE 21 C0 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0CB1 16 00                        ld      D,$00           ; first register
  35+ 0CB3 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0CB4 CD FA 0C                     call    SETSNDREG       ; select register
  37+ 0CB7 7E                           ld      A,(HL)          ; load value
  38+ 0CB8 CD FF 0C                     call    WRTSNDREG       ; write to register
  39+ 0CBB 14                           inc     D               ; next register
  40+ 0CBC 23                           inc     HL              ; next value
  41+ 0CBD 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CBF C9                           ret                     ; return to caller
  43+ 0CC0
  44+ 0CC0 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CC4 00 00 00 BF
  45+ 0CC8 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CCC 00 00 FF FF
  46+ 0CD0                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CD0
  48+ 0CD0
  49+ 0CD0              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CD0 21 EA 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CD3 C3 D9 0C                     jp      SENDSND
  52+ 0CD6 21 F2 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CD9 C5           SENDSND:        push    BC
  54+ 0CDA 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CDC 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CDD CD FA 0C                     call    SETSNDREG
  57+ 0CE0 23                           inc     HL              ; next cell
  58+ 0CE1 7E                           ld      A,(HL)          ; read value
  59+ 0CE2 CD FF 0C                     call    WRTSNDREG
  60+ 0CE5 23                           inc     HL
  61+ 0CE6 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CE8 C1                           pop     BC
  63+ 0CE9 C9                           ret                     ; return to caller
  64+ 0CEA
  65+ 0CEA 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CEE 05 00 0A 0F
  66+ 0CF2 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CF6 0A 00 07 BF
  67+ 0CFA
  68+ 0CFA
  69+ 0CFA              ; select register on PSG
  70+ 0CFA 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0CFC ED 79                        out     (C),A           ; set register
  72+ 0CFE C9                           ret                     ; return to caller
  73+ 0CFF
  74+ 0CFF              ; send data to PSG
  75+ 0CFF 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0D01 ED 79                        out     (C),A           ; send data
  77+ 0D03 C9                           ret                     ; return to caller
  78+ 0D04
  79+ 0D04              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0D04              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0D04              ; shut off the audio channel whose counter has reached 0.
  82+ 0D04              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0D04 DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0D06 DD 21 12 82                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0D0A 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0D0C 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0D0E DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0D11 DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0D14 7B                           ld      A,E             ; load E into A
  90+ 0D15 B2                           or      D               ; check that DE=0
  91+ 0D16 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0D18 1B                           dec     DE              ; no, so decrement DE
  93+ 0D19 7B                           ld      A,E             ; reload E into A...
  94+ 0D1A DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D1D DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D20 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D21 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D23                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D23                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D23                                                      ; then set 0 into its tone registers
 101+ 0D23 16 07                        ld      D,$07           ; mixer register
 102+ 0D25 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D27 ED 51                        out     (C),D           ; set mixer register
 104+ 0D29 ED 78                        in      A,(C)           ; load current value
 105+ 0D2B B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D2C ED 51                        out     (C),D           ; select mixer register
 107+ 0D2E 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D30 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D32 3E 03                        ld      A,$03           ; three channels
 110+ 0D34 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D35 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D36 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D38 ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D3A 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D3C 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D3E ED 69                        out     (C),L           ; write 0 into register
 117+ 0D40 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D42 3C                           inc     A               ; next tone register
 119+ 0D43 ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D45 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D47 ED 69                        out     (C),L           ; write 0 into register
 122+ 0D49 DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D4B DD 23                        inc     IX              ; ...next channel...
 124+ 0D4D CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D4F 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D51 DD E1                        pop     IX              ; restore IX
 127+ 0D53 C9                           ret                     ; return to caller
 128+ 0D54
 129+ 0D54              ; read a specific row of the keyboard matrix, set by A
 130+ 0D54              ; return read into A
 131+ 0D54 C5           READKBLN:       push    BC              ; store BC
 132+ 0D55 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D57 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D59 ED 41                        out     (C),B           ; select reg #15
 135+ 0D5B 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D5D ED 79                        out     (C),A           ; activate the row
 137+ 0D5F 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D61 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D63 ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D65 ED 78                        in      A,(C)           ; read register #14
 141+ 0D67 C1                           pop     BC              ; retrieve BC
 142+ 0D68 C9                           ret
 143+ 0D69
 144+ 0D69              ; read the keyboard matrix to look for a key pressure
 145+ 0D69 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D6B 06 07                        ld      B,$07           ; set register #7...
 147+ 0D6D ED 41                        out     (C),B           ; ...to work with
 148+ 0D6F ED 78                        in      A,(C)           ; read register #7
 149+ 0D71 CB FF                        set     7,A             ; port A set to output
 150+ 0D73 CB B7                        res     6,A             ; port B set to input
 151+ 0D75 ED 41                        out     (C),B           ; set register #7
 152+ 0D77 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D79 ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D7B                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D7B 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D7D CD 54 0D                     call    READKBLN        ; read row
 157+ 0D80 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D82 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D84 21 1F 82                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D87 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D89 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D8B CD 54 0D                     call    READKBLN        ; read ALT row
 163+ 0D8E CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D90 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D92 21 1F 82                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D95 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0D97 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0D99 CD 54 0D                     call    READKBLN        ; read CTRL row
 169+ 0D9C CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0D9E 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0DA0 21 1F 82                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0DA3 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0DA5 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0DA7 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0DA9 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0DAB 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0DAD ED 51                        out     (C),D           ; select reg. #15
 178+ 0DAF 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0DB1 ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0DB3 5F                           ld      E,A             ; save current line into E
 181+ 0DB4 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0DB6 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0DB8 ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0DBA 00                           nop
 185+ 0DBB ED 78                        in      A,(C)           ; read register #14
 186+ 0DBD FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DBF 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DC1                              ; check control keys
 189+ 0DC1 32 19 82                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DC4 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DC5 FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DC7 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DC9 3A 19 82                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DCC CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DCE 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DD0 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DD2 FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DD4 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DD6 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DD8 FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DDA 3A 19 82                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DDD 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DDF CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DE1 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DE3 CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DE5 CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DE7 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DE9 CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DEB FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DED 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DEF 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DF0 0F                           rrca                    ; rotate right by 1
 213+ 0DF1 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DF3 AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DF4 32 1B 82                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0DF7 32 1F 82                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0DFA 32 18 82                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0DFD 32 1C 82                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0E00 C9                           ret                     ; ...and leave
 220+ 0E01 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0E03 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0E04 CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0E06 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0E08 3A 1F 82                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0E0B 21 24 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0E0E FE 01                        cp      $01             ; SHIFT flag?
 227+ 0E10 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0E12 21 64 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0E15 18 10                        jr      LOADMAP         ; and load it
 230+ 0E17 FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0E19 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E1B 21 E4 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E1E 18 07                        jr      LOADMAP         ; and load it
 234+ 0E20 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E22 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E24 21 A4 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E27 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E28 48                           ld      C,B             ; move B into C and...
 239+ 0E29 CB 21                        sla     C               ; ...multiply it...
 240+ 0E2B CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E2D CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E2F 06 00                        ld      B,$00           ; reset B
 243+ 0E31 09                           add     HL,BC           ; find the address of the current row
 244+ 0E32 50                           ld      D,B             ; reset D
 245+ 0E33 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E34 3A 1B 82                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E37 BE                           cp      (HL)            ; is it the same key?
 248+ 0E38 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E3A 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E3C 2A BD 81                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E3F ED 5B 1D 82                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E43 3A 1C 82                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E46 FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E48 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E4A AF                           xor     A               ; clear Carry
 256+ 0E4B ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E4D 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E4F 3A B3 80                     ld      A,(KEYDEL)
 259+ 0E52 5F                           ld      E,A
 260+ 0E53 CD DF 3F                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E56 DA CB 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E59 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E5B 32 1C 82                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E5E 2A BD 81                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E61 22 1D 82                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E64 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E66 C3 88 0E                     jp      SENDKEY         ; send key
 268+ 0E69 AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E6A ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E6C 16 00                        ld      D,$00
 271+ 0E6E 3A B4 80                     ld      A,(AUTOKE)
 272+ 0E71 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E72 CD DF 3F                     call    CMP16           ; check if interval is greater than delay
 274+ 0E75 DA CB 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E78 C3 59 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E7B AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E7C 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E7D 32 1C 82                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E80 ED 4B BD 81                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E84 ED 43 1D 82                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E88 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E89 32 1B 82                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E8C 32 1A 82                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E8F 32 DB 81                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E92 FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E94 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E96 CD F4 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0E99 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0E9B 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0E9E 21 1C 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0EA1 BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0EA2 CA D0 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0EA5 0C                           inc     C               ; next FN key
 294+ 0EA6 23                           inc     HL              ; next FN key code
 295+ 0EA7 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0EA9 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0EAB 32 18 82                     ld      (KBDNPT),A      ; to keyboard
 298+ 0EAE 3A DA 81                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0EB1 B7                           or      A               ; is the print-on-video disabled?
 300+ 0EB2 CA BB 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0EB5 3A D8 81                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0EB8 B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0EB9 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EBB AF           PUTCHRBUF:      xor     A
 305+ 0EBC 32 18 82                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EBF 3A 1A 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0EC2 CD F4 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0EC5 C3 CB 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0EC8 CD 6E 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0ECB AF           LVKBRDCHK2:     xor     A
 311+ 0ECC 32 1F 82                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0ECF C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0ED0                              ; manage FN keys
 314+ 0ED0 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0ED1 2A AF 80                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0ED4 23                           inc     HL              ; -1 means direct statement
 317+ 0ED5 7C                           ld      A,H
 318+ 0ED6 B5                           or      L
 319+ 0ED7 7A                           ld      A,D             ; retrieve char
 320+ 0ED8 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EDA 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EDB 87                           add     A,A
 323+ 0EDC 87                           add     A,A
 324+ 0EDD 87                           add     A,A
 325+ 0EDE 87                           add     A,A             ; FN key number * 16
 326+ 0EDF 4F                           ld      C,A             ; move it into C
 327+ 0EE0 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EE2 21 B5 80                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0EE5 09                           add     HL,BC           ; get correct text address
 330+ 0EE6 06 10                        ld      B,$10           ; 16 chars
 331+ 0EE8 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0EE9 A7                           and     A               ; null char?
 333+ 0EEA CA CB 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0EED 57                           ld      D,A             ; pass char into D
 335+ 0EEE 3A DA 81                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0EF1 B7                           or      A               ; is the print-on-video disabled?
 337+ 0EF2 CA 02 0F                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EF5 3A D8 81                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0EF8 B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0EF9 C4 0F 0F                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0EFC 23           CNTFNK:         inc     HL              ; next char
 342+ 0EFD 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0EFF C3 CB 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0F02 AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0F03 32 18 82                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0F06 7A                           ld      A,D             ; retrieve char
 347+ 0F07 E5                           push    HL              ; store HL
 348+ 0F08 CD F4 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0F0B E1                           pop     HL              ; retrieve HL
 350+ 0F0C C3 FC 0E                     jp      CNTFNK          ; repeat
 351+ 0F0F 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0F10 32 DB 81                     ld      (CHR4VID),A     ; store char for printing
 353+ 0F13 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0F15 32 18 82                     ld      (KBDNPT),A      ; to keyboard
 355+ 0F18 CD 6E 07                     call    CHAR2VID        ; print on screen
 356+ 0F1B C9                           ret                     ; return to caller
 357+ 0F1C
 358+ 0F1C
 359+ 0F1C              ;-----------------------------------------------------------------------
 360+ 0F1C 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F20 06 16 17 18
 361+ 0F24              ;-----------------------------------------------------------------------
 362+ 0F24              ; key codes
 363+ 0F24 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F28 20 10 71 32
 364+ 0F2C 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F30 7A 73 65 34
 365+ 0F34 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F38 63 66 74 36
 366+ 0F3C 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F40 62 68 75 38
 367+ 0F44 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F48 6D 6B 6F 30
 368+ 0F4C 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F50 2E 3A 2D 1E
 369+ 0F54 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F58 1B 3D 2B 1D
 370+ 0F5C 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F60 01 02 04 18
 371+ 0F64
 372+ 0F64              ; shifted codes - not all the keys have the shifted version
 373+ 0F64 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F68 20 10 51 22
 374+ 0F6C 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F70 5A 53 45 24
 375+ 0F74 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F78 43 46 54 26
 376+ 0F7C 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F80 42 48 55 28
 377+ 0F84 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F88 4D 4B 4F 5E
 378+ 0F8C 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F90 3E 5B 5F 1E
 379+ 0F94 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0F98 1B C6 2B 1D
 380+ 0F9C 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0FA0 05 06 16 17
 381+ 0FA4
 382+ 0FA4              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0FA4 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0FA8 20 10 DE C4
 384+ 0FAC 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0FB0 83 82 A5 34
 385+ 0FB4 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0FB8 9D A3 A8 36
 386+ 0FBC 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FC0 9E AC D5 38
 387+ 0FC4 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FC8 A0 D7 87 C3
 388+ 0FCC 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FD0 C0 7B 90 1E
 389+ 0FD4 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FD8 1B D1 94 1D
 390+ 0FDC 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FE0 05 06 16 17
 391+ 0FE4
 392+ 0FE4              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FE4 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FE8 20 10 9A 32
 394+ 0FEC 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FF0 98 96 99 34
 395+ 0FF4 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 0FF8 B1 AF A5 36
 396+ 0FFC 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 1000 B3 A9 A7 38
 397+ 1004 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 1008 AB B5 A4 30
 398+ 100C 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 1010 2E 3A BA 1E
 399+ 1014 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 1018 1B D4 B9 1D
 400+ 101C 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1020 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  76  1024
  77  1024              ; include the latest version of the LM80C BASIC interpreter
  78  1024                  INCLUDE "../include/basic/basic-1.03.asm"
# file opened: ../include/basic/basic-1.03.asm
   1+ 1024              ; ------------------------------------------------------------------------------
   2+ 1024              ; LM80C BASIC (32K/64K) - R3.17
   3+ 1024              ; ------------------------------------------------------------------------------
   4+ 1024              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1024              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1024              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1024              ; kind of warranty: you can use them at your own risk.
   8+ 1024              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1024              ; maintain the copyright notices, include this advice and the note to the
  10+ 1024              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1024              ; redistribuite them.
  12+ 1024              ; https://www.leonardomiliani.com
  13+ 1024              ;
  14+ 1024              ; Please support me by visiting the following links:
  15+ 1024              ; Main project page: https://www.leonardomiliani.com
  16+ 1024              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1024              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1024              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1024              ; ------------------------------------------------------------------------------
  20+ 1024              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 1024              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 1024              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 1024
  24+ 1024
  25+ 1024              ;------------------------------------------------------------------------------
  26+ 1024              ;  L M 8 0 C   B A S I C
  27+ 1024              ;------------------------------------------------------------------------------
  28+ 1024
  29+ 1024              ; GENERAL EQUATES
  30+ 1024
  31+ 1024              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 1024              CTRLC           equ     $03             ; Control "C"
  33+ 1024              CTRLG           equ     $07             ; Control "G"
  34+ 1024              BKSP            equ     $08             ; Back space
  35+ 1024              LF              equ     $0A             ; Line feed
  36+ 1024              CS              equ     $0C             ; Clear screen
  37+ 1024              CR              equ     $0D             ; Carriage return
  38+ 1024              CTRLO           equ     $0F             ; Control "O"
  39+ 1024              CTRLQ           equ     $11             ; Control "Q"
  40+ 1024              CTRLR           equ     $12             ; Control "R"
  41+ 1024              CTRLS           equ     $13             ; Control "S"
  42+ 1024              CTRLU           equ     $15             ; Control "U"
  43+ 1024              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 1024              ESC             equ     $1B             ; Escape
  45+ 1024              SPC             equ     $20             ; Space
  46+ 1024              DEL             equ     $7F             ; Delete
  47+ 1024              INSRT           equ     $1A             ; Insert Key
  48+ 1024              ; cursor ASCII codes
  49+ 1024              CRSLFT          equ     $1C             ; cursor left
  50+ 1024              CRSRGT          equ     $1D             ; cursor right
  51+ 1024              CRSUP           equ     $1E             ; cursor up
  52+ 1024              CRSDN           equ     $1F             ; cursor down
  53+ 1024
  54+ 1024
  55+ 1024              ;-------------------------------------------------------------------------
  56+ 1024              ; BASIC ERROR MESSAGES
  57+ 1024              ; the interpreter looks for a single-byte code in the following list,
  58+ 1024              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 1024              ; find where to retrieve the message text in "ERRORS"
  60+ 1024
  61+ 1024              ; BASIC ERROR CODE VALUES
  62+ 1024              ; These values act as an offset to point to the error message into the error table
  63+ 1024              ; must be incremented by 2 because they point to a word address jump
  64+ 1024              NF              equ     $00     ; NEXT without FOR
  65+ 1024              SN              equ     $02     ; Syntax error
  66+ 1024              RG              equ     $04     ; RETURN without GOSUB
  67+ 1024              OD              equ     $06     ; Out of DATA
  68+ 1024              FC              equ     $08     ; Function call error
  69+ 1024              OV              equ     $0A     ; Overflow
  70+ 1024              OM              equ     $0C     ; Out of memory
  71+ 1024              UL              equ     $0E     ; Undefined line number
  72+ 1024              BS              equ     $10     ; Bad subscript
  73+ 1024              DD              equ     $12     ; Re-Dimensioned array
  74+ 1024              DZ              equ     $14     ; Division by zero (/0)
  75+ 1024              ID              equ     $16     ; Illegal direct
  76+ 1024              TM              equ     $18     ; Type mis-match
  77+ 1024              OS              equ     $1A     ; Out of string space
  78+ 1024              LS              equ     $1C     ; String too long
  79+ 1024              ST              equ     $1E     ; String formula too complex
  80+ 1024              CN              equ     $20     ; Can't continue
  81+ 1024              UF              equ     $22     ; Undefined FN function
  82+ 1024              MO              equ     $24     ; Missing operand
  83+ 1024              HX              equ     $26     ; HEX error
  84+ 1024              BN              equ     $28     ; BIN error
  85+ 1024              GM              equ     $2A     ; No Graphics Mode
  86+ 1024              SC              equ     $2C     ; Serial configuration
  87+ 1024              SA              equ     $2E     ; Serial port already open
  88+ 1024              SO              equ     $30     ; Serial buffer overrun
  89+ 1024              HP              equ     $32     ; HELP call
  90+ 1024
  91+ 1024              ; BASIC ERROR POINTER TABLE
  92+ 1024              ERRTBL: equ $
  93+ 1024 58 10        NFPTR:  defw    NFMSG
  94+ 1026 69 10        SNPTR:  defw    SNMSG
  95+ 1028 70 10        RGPTR:  defw    RGMSG
  96+ 102A 85 10        ODPTR:  defw    ODMSG
  97+ 102C 91 10        FCPTR:  defw    FCMSG
  98+ 102E A7 10        OVPTR:  defw    OVMSG
  99+ 1030 B0 10        OMPTR:  defw    OMMSG
 100+ 1032 BE 10        ULPTR:  defw    ULMSG
 101+ 1034 CD 10        BSPTR:  defw    BSMSG
 102+ 1036 DB 10        DDPTR:  defw    DDMSG
 103+ 1038 F0 10        DZPTR:  defw    DZMSG
 104+ 103A 01 11        IDPTR:  defw    IDMSG
 105+ 103C 10 11        TMPTR:  defw    TMMSG
 106+ 103E 1F 11        OSPTR:  defw    OSMSG
 107+ 1040 33 11        LSPTR:  defw    LSMSG
 108+ 1042 43 11        STPTR:  defw    STMSG
 109+ 1044 5E 11        CNPTR:  defw    CNMSG
 110+ 1046 6D 11        UFPTR:  defw    UFMSG
 111+ 1048 83 11        MOPTR:  defw    MOMSG
 112+ 104A 93 11        HXPTR:  defw    HXMSG
 113+ 104C 9E 11        BNPTR:  defw    BNMSG
 114+ 104E A9 11        GMPRT:  defw    GMMSG
 115+ 1050 BA 11        SCPTR:  defw    SCMSG
 116+ 1052 CF 11        SAPTR:  defw    SAMSG
 117+ 1054 E8 11        SOPTR:  defw    SOMSG
 118+ 1056 FE 11        HPPTR:  defw    HPMSG
 119+ 1058
 120+ 1058              ; BASIC ERROR MESSAGE LIST
 121+ 1058              ERRORS  equ $
 122+ 1058 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 122+ 105C 20 57 69 74
 122+ 1060 68 6F 75 74
 122+ 1064 20 46 4F 52
 122+ 1068 00
 123+ 1069 53 79 6E 74  SNMSG:  defb    "Syntax",0
 123+ 106D 61 78 00
 124+ 1070 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 124+ 1074 52 4E 20 77
 124+ 1078 69 74 68 6F
 124+ 107C 75 74 20 47
 124+ 1080 4F 53 55 42
 124+ 1084 00
 125+ 1085 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 125+ 1089 6F 66 20 44
 125+ 108D 41 54 41 00
 126+ 1091 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 126+ 1095 67 61 6C 20
 126+ 1099 46 75 6E 63
 126+ 109D 74 69 6F 6E
 126+ 10A1 20 43 61 6C
 126+ 10A5 6C 00
 127+ 10A7 4F 76 65 72  OVMSG:  defb    "Overflow",0
 127+ 10AB 66 6C 6F 77
 127+ 10AF 00
 128+ 10B0 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 128+ 10B4 6F 66 20 4D
 128+ 10B8 65 6D 6F 72
 128+ 10BC 79 00
 129+ 10BE 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 129+ 10C2 66 69 6E 65
 129+ 10C6 64 20 4C 69
 129+ 10CA 6E 65 00
 130+ 10CD 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 130+ 10D1 53 75 62 73
 130+ 10D5 63 72 69 70
 130+ 10D9 74 00
 131+ 10DB 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 131+ 10DF 69 6D 65 6E
 131+ 10E3 73 69 6F 6E
 131+ 10E7 65 64 20 41
 131+ 10EB 72 72 61 79
 131+ 10EF 00
 132+ 10F0 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 132+ 10F4 73 69 6F 6E
 132+ 10F8 20 62 79 20
 132+ 10FC 5A 65 72 6F
 132+ 1100 00
 133+ 1101 49 6C 6C 65  IDMSG:  defb    "Illegal Direct",0
 133+ 1105 67 61 6C 20
 133+ 1109 44 69 72 65
 133+ 110D 63 74 00
 134+ 1110 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 134+ 1114 20 4D 69 73
 134+ 1118 2D 6D 61 74
 134+ 111C 63 68 00
 135+ 111F 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 135+ 1123 6F 66 20 53
 135+ 1127 74 72 69 6E
 135+ 112B 67 20 53 70
 135+ 112F 61 63 65 00
 136+ 1133 53 74 72 69  LSMSG:  defb    "String Too Long",0
 136+ 1137 6E 67 20 54
 136+ 113B 6F 6F 20 4C
 136+ 113F 6F 6E 67 00
 137+ 1143 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 137+ 1147 6E 67 20 46
 137+ 114B 6F 72 6D 75
 137+ 114F 6C 61 20 54
 137+ 1153 6F 6F 20 43
 137+ 1157 6F 6D 70 6C
 137+ 115B 65 78 00
 138+ 115E 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 138+ 1162 74 20 43 6F
 138+ 1166 6E 74 69 6E
 138+ 116A 75 65 00
 139+ 116D 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 139+ 1171 66 69 6E 65
 139+ 1175 64 20 46 4E
 139+ 1179 20 46 75 6E
 139+ 117D 63 74 69 6F
 139+ 1181 6E 00
 140+ 1183 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 140+ 1187 69 6E 67 20
 140+ 118B 4F 70 65 72
 140+ 118F 61 6E 64 00
 141+ 1193 48 45 58 20  HXMSG:  defb    "HEX Format",0
 141+ 1197 46 6F 72 6D
 141+ 119B 61 74 00
 142+ 119E 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 142+ 11A2 46 6F 72 6D
 142+ 11A6 61 74 00
 143+ 11A9 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 143+ 11AD 72 61 70 68
 143+ 11B1 69 63 73 20
 143+ 11B5 4D 6F 64 65
 143+ 11B9 00
 144+ 11BA 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 144+ 11BE 61 6C 20 43
 144+ 11C2 6F 6E 66 69
 144+ 11C6 67 75 72 61
 144+ 11CA 74 69 6F 6E
 144+ 11CE 00
 145+ 11CF 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 145+ 11D3 61 6C 20 50
 145+ 11D7 6F 72 74 20
 145+ 11DB 41 6C 72 65
 145+ 11DF 61 64 79 20
 145+ 11E3 4F 70 65 6E
 145+ 11E7 00
 146+ 11E8 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 146+ 11EC 61 6C 20 42
 146+ 11F0 75 66 66 65
 146+ 11F4 72 20 4F 76
 146+ 11F8 65 72 72 75
 146+ 11FC 6E 00
 147+ 11FE 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 147+ 1202 20 43 61 6C
 147+ 1206 6C 00
 148+ 1208
 149+ 1208
 150+ 1208              ;-----------------------------------------------------------------------------
 151+ 1208              ; STARTING POINTS FOR BASIC BOOT
 152+ 1208              ; COLD: reset every memory pointer, acting as a power-up boot
 153+ 1208              ; WARM: preserve program in memory, keeping every current pointer
 154+ 1208
 155+ 1208 C3 0E 12     COLD:   jp      STARTB          ; Jump for cold start
 156+ 120B C3 BC 12     WARM:   jp      WARMST          ; Jump for warm start
 157+ 120E
 158+ 120E C3 15 12     STARTB: jp      CSTART          ; Jump to initialise
 159+ 1211 C9 1C                defw    DEINT           ; Get integer -32768 to 32767
 160+ 1213 86 24                defw    ABPASS          ; Return integer in AB
 161+ 1215 21 5E 80     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 162+ 1218 F9                   ld      SP,HL           ; Set up a temporary stack
 163+ 1219 C3 CA 3F             jp      INITST          ; Go to initialise
 164+ 121C
 165+ 121C 21 89 15     INIT:   ld      HL,INITAB       ; Initialise workspace
 166+ 121F 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 167+ 1222 11 5E 80             ld      DE,WRKSPC       ; Into workspace RAM
 168+ 1225 ED B0                ldir                    ; Copy data
 169+ 1227 EB                   ex      DE,HL           ; Copy DE into HL
 170+ 1228 F9                   ld      SP,HL           ; Temporary stack
 171+ 1229 CD 3C 18             call    CLREG           ; Clear registers and stack
 172+ 122C CD E0 1E             call    PRNTCRLF        ; Output CRLF
 173+ 122F 32 91 81             ld      (BUFFER+88+1),A ; Mark end of buffer
 174+ 1232 32 47 82             ld      (PROGST),A      ; Initialise program area
 175+ 1235 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 176+ 1237 21 23 13     MSIZE:  ld      HL,MEMMSG       ; Point to message
 177+ 123A CD A4 25             call    PRS             ; Output "Memory size"
 178+ 123D CD 59 18             call    PROMPT          ; Get input with '?'
 179+ 1240 CD 3A 09             call    CURSOR_ON       ; enable cursor
 180+ 1243 CD 13 1C             call    GETCHR          ; Get next character
 181+ 1246 B7                   or      A               ; Set flags
 182+ 1247 C2 5F 12             jp      NZ,TSTMEM       ; If number - Test if RAM there
 183+ 124A 21 AB 82     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 184+ 124D 23           MLOOP:  inc     HL              ; Next byte
 185+ 124E 7C                   ld      A,H             ; Above address FFFF ?
 186+ 124F B5                   or      L
 187+ 1250 CA 71 12             jp      Z,SETTOP        ; Yes - 64K RAM
 188+ 1253 7E                   ld      A,(HL)          ; Get contents
 189+ 1254 47                   ld      B,A             ; Save it
 190+ 1255 2F                   cpl                     ; Flip all bits
 191+ 1256 77                   ld      (HL),A          ; Put it back
 192+ 1257 BE                   cp      (HL)            ; RAM there if same
 193+ 1258 70                   ld      (HL),B          ; Restore old contents
 194+ 1259 CA 4D 12             jp      Z,MLOOP         ; If RAM - test next byte
 195+ 125C C3 71 12             jp      SETTOP          ; Top of RAM found
 196+ 125F
 197+ 125F CD E3 1C     TSTMEM: call    ATOH            ; Get high memory into DE
 198+ 1262 B7                   or      A               ; Set flags on last byte
 199+ 1263 C2 F0 16             jp      NZ,SNERR        ; ?SN Error if bad character
 200+ 1266 EB                   ex      DE,HL           ; Address into HL
 201+ 1267 2B                   dec     HL              ; Back one byte
 202+ 1268 3E D9                ld      A,%11011001     ; Test byte
 203+ 126A 46                   ld      B,(HL)          ; Get old contents
 204+ 126B 77                   ld      (HL),A          ; Load test byte
 205+ 126C BE                   cp      (HL)            ; RAM there if same
 206+ 126D 70                   ld      (HL),B          ; Restore old contents
 207+ 126E C2 37 12             jp      NZ,MSIZE        ; Ask again if no RAM
 208+ 1271
 209+ 1271 CD 4F 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 210+ 1274 2B                   dec     HL              ; Back one byte
 211+ 1275 11 AA 82             ld      DE,STLOOK-1     ; See if enough RAM
 212+ 1278 CD CC 19             call    CPDEHL          ; Compare DE with HL
 213+ 127B DA 37 12             jp      C,MSIZE         ; Ask again if not enough RAM
 214+ 127E 3A 23 82             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 215+ 1281 1F                   rra                     ; is DOS disabled?
 216+ 1282 30 04                jr      NC,NODOS        ; yes, so jump over
 217+ 1284 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 218+ 1287 19                   add     HL,DE           ; ...for I/O buffer
 219+ 1288 11 9C FF     NODOS:  ld      DE,0-100        ; 100 Bytes string space
 220+ 128B 22 96 81             ld      (LSTRAM),HL     ; Save last available RAM
 221+ 128E 19                   add     HL,DE           ; Allocate string space
 222+ 128F 22 AD 80             ld      (STRSPC),HL     ; Save string space
 223+ 1292 CD 17 18             call    CLRPTR          ; Clear program area
 224+ 1295 2A AD 80             ld      HL,(STRSPC)     ; Get end of memory
 225+ 1298 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 226+ 129B 19                   add     HL,DE           ; Adjust HL
 227+ 129C 11 47 82             ld      DE,PROGST       ; Start of program text
 228+ 129F 7D                   ld      A,L             ; Get LSB
 229+ 12A0 93                   sub     E               ; Adjust it
 230+ 12A1 6F                   ld      L,A             ; Re-save
 231+ 12A2 7C                   ld      A,H             ; Get MSB
 232+ 12A3 9A                   sbc     A,D             ; Adjust it
 233+ 12A4 67                   ld      H,A             ; Re-save
 234+ 12A5 E5                   push    HL              ; Save bytes free
 235+ 12A6 21 E2 12             ld      HL,SIGNON       ; Sign-on message
 236+ 12A9 CD A4 25             call    PRS             ; Output string
 237+ 12AC 21 CB 12             ld      HL,BLNSPC       ; Empty space
 238+ 12AF CD A4 25             call    PRS             ; Output string
 239+ 12B2 E1                   pop     HL              ; Get bytes free back
 240+ 12B3 CD 43 30             call    PRNTHL          ; Output amount of free memory
 241+ 12B6 21 D4 12             ld      HL,BFREE        ; " Bytes free" message
 242+ 12B9 CD A4 25             call    PRS             ; Output string
 243+ 12BC
 244+ 12BC 31 3D 81     WARMST: ld      SP,STACK        ; Temporary stack
 245+ 12BF CD 3C 18     BRKRET: call    CLREG           ; Clear registers and stack
 246+ 12C2 CD 61 3D             call    RESFN           ; reset FN keys and auto-repeat
 247+ 12C5 CD 3A 09             call    CURSOR_ON       ; enable cursor
 248+ 12C8 C3 4A 17             jp      PRNTOK          ; Go to get command line
 249+ 12CB
 250+ 12CB 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 250+ 12CF 20 20 20 20
 250+ 12D3 00
 251+ 12D4 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 251+ 12D8 65 73 20 66
 251+ 12DC 72 65 65 0D
 251+ 12E0 0D 00
 252+ 12E2
 253+ 12E2 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.17 ",251,"2021 L.Miliani"
 253+ 12E6 43 20 42 41
 253+ 12EA 53 49 43 20
 253+ 12EE 33 2E 31 37
 253+ 12F2 20 FB 32 30
 253+ 12F6 32 31 20 4C
 253+ 12FA 2E 4D 69 6C
 253+ 12FE 69 61 6E 69
 254+ 1302 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 254+ 1306 20 42 41 53
 254+ 130A 49 43 20 34
 254+ 130E 2E 37 20 20
 254+ 1312 FB 31 39 37
 254+ 1316 38 20 4D 69
 254+ 131A 63 72 6F 73
 254+ 131E 6F 66 74 0D
 254+ 1322 00
 255+ 1323
 256+ 1323 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 256+ 1327 72 79 20 74
 256+ 132B 6F 70 00
 257+ 132E
 258+ 132E              ; The following list reports all the functions supported by the interpreter.
 259+ 132E              ; To add a custom function, the user must first insert the reserved word here,
 260+ 132E              ; then into the list of the reserved words below, and finally must increment the
 261+ 132E              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 262+ 132E              ; function.
 263+ 132E
 264+ 132E              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 265+ 132E              ; this list must be coherent with the tokens' functions list. This means that every
 266+ 132E              ; entry here must have the corresponding entry in the tokens list.
 267+ 132E B8 2E        FNCTAB: defw    SGN
 268+ 1330 4E 24                defw    TMR         ; added by Leonardo Miliani
 269+ 1332 7C 2F                defw    INT
 270+ 1334 CE 2E                defw    ABS_        ; _ necessary for assembler warning
 271+ 1336 64 80                defw    USR
 272+ 1338 64 24                defw    FRE
 273+ 133A DF 28                defw    INP
 274+ 133C 92 24                defw    POS
 275+ 133E 42 31                defw    SQR
 276+ 1340 21 32                defw    RND
 277+ 1342 0C 2D                defw    LOG
 278+ 1344 90 31                defw    EXP
 279+ 1346 96 32                defw    COS
 280+ 1348 9C 32                defw    SIN
 281+ 134A FD 32                defw    TAN
 282+ 134C 12 33                defw    ATN
 283+ 134E BB 29                defw    PEEK
 284+ 1350 7D 33                defw    DEEK
 285+ 1352 C2 29                defw    VPEEK       ; added by Leonardo Miliani
 286+ 1354 91 2B                defw    VSTAT       ; added by Leonardo Miliani
 287+ 1356 9C 2B                defw    SSTAT       ; added by Leonardo Miliani
 288+ 1358 B0 2B                defw    INKEY       ; added by Leonardo Miliani
 289+ 135A D6 36                defw    POINT       ; added by Leonardo Miliani
 290+ 135C 76 27                defw    INSTR       ; added by Leonardo Miliani
 291+ 135E 16 27                defw    LEN
 292+ 1360 2E 25                defw    STR
 293+ 1362 A6 28                defw    VAL
 294+ 1364 25 27                defw    ASC
 295+ 1366 36 27                defw    CHR
 296+ 1368 C5 3E                defw    HEX         ; added by Grant Searle
 297+ 136A 56 3F                defw    BIN         ; added by Grant Searle
 298+ 136C 46 27                defw    LEFT
 299+ 136E 6C 28                defw    RIGHT
 300+ 1370 76 28                defw    MID
 301+ 1372
 302+ 1372              ; RESERVED WORD LIST
 303+ 1372              ; Here are all the reserved words used by the interpreter
 304+ 1372              ; To add custom functions/commands, the user must insert the keyword
 305+ 1372              ; in this list, following the schematic
 306+ 1372 C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 307+ 1375 C6 4F 52             defb    'F'+$80,"OR"
 308+ 1378 CE 45 58 54          defb    'N'+$80,"EXT"
 309+ 137C C4 41 54 41          defb    'D'+$80,"ATA"
 310+ 1380 C9 4E 50 55          defb    'I'+$80,"NPUT"
 310+ 1384 54
 311+ 1385 C4 49 4D             defb    'D'+$80,"IM"
 312+ 1388 D2 45 41 44          defb    'R'+$80,"EAD"
 313+ 138C CC 45 54             defb    'L'+$80,"ET"
 314+ 138F C7 4F 54 4F          defb    'G'+$80,"OTO"
 315+ 1393 D2 55 4E             defb    'R'+$80,"UN"
 316+ 1396 C9 46                defb    'I'+$80,"F"
 317+ 1398 D2 45 53 54          defb    'R'+$80,"ESTORE"
 317+ 139C 4F 52 45
 318+ 139F C7 4F 53 55          defb    'G'+$80,"OSUB"
 318+ 13A3 42
 319+ 13A4 D2 45 54 55          defb    'R'+$80,"ETURN"
 319+ 13A8 52 4E
 320+ 13AA D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 321+ 13AD D3 54 4F 50          defb    'S'+$80,"TOP"
 322+ 13B1 CF 55 54             defb    'O'+$80,"UT"
 323+ 13B4 CF 4E                defb    'O'+$80,"N"
 324+ 13B6 C6 49 4C 45          defb    'F'+$80,"ILES"
 324+ 13BA 53
 325+ 13BB C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 325+ 13BF 45
 326+ 13C0 D7 41 49 54          defb    'W'+$80,"AIT"
 327+ 13C4 C4 45 46             defb    'D'+$80,"EF"
 328+ 13C7 D0 4F 4B 45          defb    'P'+$80,"OKE"
 329+ 13CB C4 4F 4B 45          defb    'D'+$80,"OKE"
 330+ 13CF D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 330+ 13D3 45
 331+ 13D4 D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 332+ 13D8 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 333+ 13DC D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 333+ 13E0 45 4E
 334+ 13E2 CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 334+ 13E6 54 45
 335+ 13E8 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 335+ 13EC 44
 336+ 13ED D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 336+ 13F1 4D 45
 337+ 13F3 D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 337+ 13F7 45
 338+ 13F8 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 338+ 13FC 52
 339+ 13FD D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 340+ 1401 C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 341+ 1405 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 341+ 1409 4C 45
 342+ 140B D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 342+ 140F 54
 343+ 1410 D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 343+ 1414 41 4C
 344+ 1416 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 345+ 141A C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 346+ 141D CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 347+ 1420 CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 348+ 1423 C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 348+ 1427 4E 54
 349+ 1429 D7 49 44 54          defb    'W'+$80,"IDTH"
 349+ 142D 48
 350+ 142E D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 351+ 1431 D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 351+ 1435 54
 352+ 1436 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 353+ 143A D0 52 49 4E          defb    'P'+$80,"RINT"
 353+ 143E 54
 354+ 143F C3 4F 4E 54          defb    'C'+$80,"ONT"
 355+ 1443 CC 49 53 54          defb    'L'+$80,"IST"
 356+ 1447 C3 4C 45 41          defb    'C'+$80,"LEAR"
 356+ 144B 52
 357+ 144C CC 4F 41 44          defb    'L'+$80,"OAD"
 358+ 1450 D3 41 56 45          defb    'S'+$80,"AVE"
 359+ 1454 CE 45 57             defb    'N'+$80,"EW"
 360+ 1457 D4 41 42 28          defb    'T'+$80,"AB("
 361+ 145B D4 4F                defb    'T'+$80,"O"
 362+ 145D C6 4E                defb    'F'+$80,"N"
 363+ 145F D3 50 43 28          defb    'S'+$80,"PC("
 364+ 1463 D4 48 45 4E          defb    'T'+$80,"HEN"
 365+ 1467 CE 4F 54             defb    'N'+$80,"OT"
 366+ 146A D3 54 45 50          defb    'S'+$80,"TEP"
 367+ 146E                      ; from here: operators
 368+ 146E AB                   defb    '+'+$80
 369+ 146F AD                   defb    '-'+$80
 370+ 1470 AA                   defb    '*'+$80
 371+ 1471 AF                   defb    '/'+$80
 372+ 1472 A5                   defb    '%'+$80
 373+ 1473 A3                   defb    '#'+$80
 374+ 1474 DE                   defb    '^'+$80
 375+ 1475 C1 4E 44             defb    'A'+$80,"ND"
 376+ 1478 D8 4F 52             defb    'X'+$80,"OR"
 377+ 147B CF 52                defb    'O'+$80,"R"
 378+ 147D BE                   defb    '>'+$80
 379+ 147E BD                   defb    '='+$80
 380+ 147F BC                   defb    '<'+$80
 381+ 1480
 382+ 1480                      ; from here there are the tokens' FUNCTIONS list
 383+ 1480                      ; this list must be coherent with the functions list above
 384+ 1480 D3 47 4E             defb    'S'+$80,"GN"
 385+ 1483 D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 386+ 1486 C9 4E 54             defb    'I'+$80,"NT"
 387+ 1489 C1 42 53             defb    'A'+$80,"BS"
 388+ 148C D5 53 52             defb    'U'+$80,"SR"
 389+ 148F C6 52 45             defb    'F'+$80,"RE"
 390+ 1492 C9 4E 50             defb    'I'+$80,"NP"
 391+ 1495 D0 4F 53             defb    'P'+$80,"OS"
 392+ 1498 D3 51 52             defb    'S'+$80,"QR"
 393+ 149B D2 4E 44             defb    'R'+$80,"ND"
 394+ 149E CC 4F 47             defb    'L'+$80,"OG"
 395+ 14A1 C5 58 50             defb    'E'+$80,"XP"
 396+ 14A4 C3 4F 53             defb    'C'+$80,"OS"
 397+ 14A7 D3 49 4E             defb    'S'+$80,"IN"
 398+ 14AA D4 41 4E             defb    'T'+$80,"AN"
 399+ 14AD C1 54 4E             defb    'A'+$80,"TN"
 400+ 14B0 D0 45 45 4B          defb    'P'+$80,"EEK"
 401+ 14B4 C4 45 45 4B          defb    'D'+$80,"EEK"
 402+ 14B8 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 402+ 14BC 4B
 403+ 14BD D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 403+ 14C1 54
 404+ 14C2 D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 404+ 14C6 54
 405+ 14C7 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 405+ 14CB 59
 406+ 14CC D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 406+ 14D0 54
 407+ 14D1 C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 407+ 14D5 52
 408+ 14D6 CC 45 4E             defb    'L'+$80,"EN"
 409+ 14D9 D3 54 52 24          defb    'S'+$80,"TR$"
 410+ 14DD D6 41 4C             defb    'V'+$80,"AL"
 411+ 14E0 C1 53 43             defb    'A'+$80,"SC"
 412+ 14E3 C3 48 52 24          defb    'C'+$80,"HR$"
 413+ 14E7 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 414+ 14EB C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 415+ 14EF CC 45 46 54          defb    'L'+$80,"EFT$"
 415+ 14F3 24
 416+ 14F4 D2 49 47 48          defb    'R'+$80,"IGHT$"
 416+ 14F8 54 24
 417+ 14FA CD 49 44 24          defb    'M'+$80,"ID$"
 418+ 14FE 80                   defb    $80                     ; End-of-list marker
 419+ 14FF
 420+ 14FF              ; KEYWORD ADDRESS TABLE
 421+ 14FF              ; this list must be coherent with the commands'
 422+ 14FF              ; tokens list above
 423+ 14FF 5D 1C        WORDTB: defw    PEND
 424+ 1501 5A 1B                defw    FOR
 425+ 1503 51 20                defw    NEXT
 426+ 1505 BC 1D                defw    DATA
 427+ 1507 56 1F                defw    INPUT
 428+ 1509 A6 22                defw    DIM
 429+ 150B 88 1F                defw    READ
 430+ 150D D3 1D                defw    LET
 431+ 150F 79 1D                defw    GOTO
 432+ 1511 54 1D                defw    RUN
 433+ 1513 4B 1E                defw    IF
 434+ 1515 23 1C                defw    RESTOR
 435+ 1517 68 1D                defw    GOSUB
 436+ 1519 97 1D                defw    RETURN
 437+ 151B BE 1D                defw    REM         ; original REM
 438+ 151D 5B 1C                defw    STOP
 439+ 151F EB 28                defw    POUT
 440+ 1521 2D 1E                defw    ON
 441+ 1523 C3 3E                defw    FILES       ; changed by Leonardo Miliani - was NULL
 442+ 1525 C4 3E                defw    ERASE       ; added by Leonardo Miliani
 443+ 1527 F1 28                defw    WAIT
 444+ 1529 9A 24                defw    DEF
 445+ 152B E5 29                defw    POKE
 446+ 152D 88 33                defw    DOKE
 447+ 152F EA 29                defw    VPOKE       ; added by Leonardo Miliani
 448+ 1531 27 2A                defw    SREG        ; added by Leonardo Miliani
 449+ 1533 75 2B                defw    VREG        ; added by Leonardo Miliani
 450+ 1535 BE 33                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 451+ 1537 F5 29                defw    LOCATE      ; added by Leonardo Miliani
 452+ 1539 81 2A                defw    SOUND       ; added by Leonardo Miliani
 453+ 153B 48 2A                defw    VOLUME      ; added by Leonardo Miliani
 454+ 153D 9F 33                defw    PAUSE       ; added by Leonardo Miliani
 455+ 153F 39 34                defw    COLOR       ; added by Leonardo Miliani
 456+ 1541 29 37                defw    PLOT        ; added by Leonardo Miliani
 457+ 1543 BC 37                defw    DRAW        ; added by Leonardo Miliani
 458+ 1545 F2 38                defw    CIRCLE      ; added by Leonardo Miliani
 459+ 1547 E6 35                defw    PAINT       ; added by Leonardo Miliani
 460+ 1549 F7 3A                defw    SERIAL      ; added by Leonardo Miliani
 461+ 154B 39 3D                defw    HELP        ; changed by Leonardo Miliani - was LINES
 462+ 154D 61 33                defw    CLS
 463+ 154F 54 3D                defw    KEY         ; added by Leonardo Miliani
 464+ 1551 33 29                defw    NMI         ; added by Leonardo Miliani
 465+ 1553 F5 34                defw    GPRINT      ; added by Leonardo Miliani
 466+ 1555 75 33                defw    WIDTH
 467+ 1557 8D 29                defw    SYS         ; added by Leonardo Miliani
 468+ 1559 BB 3F                defw    RESET       ; new behaviour: now it resets the system
 469+ 155B C0 1D                defw    REM+2       ; ELSE: added by Leonardo Miliani
 470+ 155D 7D 1E                defw    PRINT
 471+ 155F 8F 1C                defw    CONT
 472+ 1561 31 1A                defw    LIST
 473+ 1563 08 1D                defw    CLEAR
 474+ 1565 C1 3E                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 475+ 1567 C2 3E                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 476+ 1569 16 18                defw    NEW
 477+ 156B
 478+ 156B              ; RESERVED WORD TOKEN VALUES
 479+ 156B              ; if you add a function or command you must increment by 1
 480+ 156B              ; the values below. Pay attention that you must increment only the
 481+ 156B              ; values AFTER the position where you entered the function/command word
 482+ 156B              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 483+ 156B              ; DOKE and SCREEN, and since REM is the reserved work listed below
 484+ 156B              ; that is before the point where VPOKE has been entered, every entry
 485+ 156B              ; after REM has been incremented.
 486+ 156B              ; Another example: when TMR has been added, since it's a function, every
 487+ 156B              ; entry after & included ZSGN must be checked (read below)
 488+ 156B
 489+ 156B              ZEND    equ     $80             ; END        <-- from here, there are the commands
 490+ 156B              ZFOR    equ     $81             ; FOR
 491+ 156B              ZDATA   equ     $83             ; DATA
 492+ 156B              ZGOTO   equ     $88             ; GOTO
 493+ 156B              ZGOSUB  equ     $8C             ; GOSUB
 494+ 156B              ZREM    equ     $8E             ; REM
 495+ 156B              ZELSE   equ     $AE             ; ELSE
 496+ 156B              ZPRINT  equ     $AF             ; PRINT
 497+ 156B              ZNEW    equ     $B5             ; NEW
 498+ 156B
 499+ 156B              ZTAB    equ     $B6             ; TAB
 500+ 156B              ZTO     equ     $B7             ; TO
 501+ 156B              ZFN     equ     $B8             ; FN
 502+ 156B              ZSPC    equ     $B9             ; SPC
 503+ 156B              ZTHEN   equ     $BA             ; THEN
 504+ 156B              ZNOT    equ     $BB             ; NOT
 505+ 156B              ZSTEP   equ     $BC             ; STEP
 506+ 156B
 507+ 156B              ZPLUS   equ     $BD             ; +         <-- from here, there are the math operators
 508+ 156B              ZMINUS  equ     $BE             ; -
 509+ 156B              ZTIMES  equ     $BF             ; *
 510+ 156B              ZDIV    equ     $C0             ; /
 511+ 156B              ZMOD    equ     $C1             ; %
 512+ 156B              ZDINT   equ     $C2             ; #
 513+ 156B              ZOR     equ     $C6             ; OR
 514+ 156B              ZGTR    equ     $C7             ; >
 515+ 156B              ZEQUAL  equ     $C8             ; M
 516+ 156B              ZLTH    equ     $C9             ; <
 517+ 156B
 518+ 156B              ZSGN    equ     $CA             ; SGN       <-- from here, there are the functions
 519+ 156B              ZPOINT  equ     $E0             ; ZPOINT    <-- if the user enters a custom function, between
 520+ 156B                                              ;               SGN and POINT, he/she must increment this pointer by 1
 521+ 156B              ZINSTR  equ     $E1             ; ZINSTR    <-- same here
 522+ 156B              ZLEFT   equ     $E9             ; LEFT$     <-- if the user enters a custom function anywhere,
 523+ 156B                                              ;               he/she must increment this pointer by 1
 524+ 156B
 525+ 156B              ; ARITHMETIC PRECEDENCE TABLE
 526+ 156B              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 527+ 156B              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 528+ 156B 79           PRITAB: defb    $79             ; Precedence value
 529+ 156C 2A 30                defw    PADD            ; FPREG = <last> + FPREG
 530+ 156E
 531+ 156E 79                   defb    $79             ; Precedence value
 532+ 156F 0D 2C                defw    PSUB            ; FPREG = <last> - FPREG
 533+ 1571
 534+ 1571 7C                   defb    $7C             ; Precedence value
 535+ 1572 4B 2D                defw    MULT            ; PPREG = <last> * FPREG
 536+ 1574
 537+ 1574 7C                   defb    $7C             ; Precedence value
 538+ 1575 FD 2D                defw    DIV             ; FPREG = <last> / FPREG
 539+ 1577
 540+ 1577 7C                   defb    $7C             ; Precedence value
 541+ 1578 A8 2D                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 542+ 157A
 543+ 157A 7C                   defb    $7C             ; precedence value
 544+ 157B A0 2D                defw    DINT            ; FPREG = INT(<last> / FPREG )
 545+ 157D
 546+ 157D 7F                   defb    $7F             ; Precedence value
 547+ 157E 4B 31                defw    POWER           ; FPREG = <last> ^ FPREG
 548+ 1580
 549+ 1580 50                   defb    $50             ; Precedence value
 550+ 1581 EF 21                defw    PAND            ; FPREG = <last> AND FPREG
 551+ 1583
 552+ 1583 4A                   defb    $4A             ; Precedence value
 553+ 1584 F7 21                defw    PXOR            ; FPREG = <last> XOR FPREG
 554+ 1586
 555+ 1586 46                   defb    $46             ; Precedence value
 556+ 1587 F2 21                defw    POR             ; FPREG = <last> OR FPREG
 557+ 1589
 558+ 1589
 559+ 1589              ; INITIALISATION TABLE -------------------------------------------------------
 560+ 1589              ; these values are copied into RAM at startup
 561+ 1589 C3 BC 12     INITAB: jp      WARMST          ; Warm start jump
 562+ 158C ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 563+ 158F C3 DE 1C             jp      FCERR           ; "USR (X)" jump (Set to Error)
 564+ 1592 D3 00                out     (0),A           ; "out p,n" skeleton
 565+ 1594 C9                   ret
 566+ 1595 D6 00                sub     $00             ; Division support routine
 567+ 1597 6F                   ld      L,A
 568+ 1598 7C                   ld      A,H
 569+ 1599 DE 00                sbc     A,$00
 570+ 159B 67                   ld      H,A
 571+ 159C 78                   ld      A,B
 572+ 159D DE 00                sbc     A,$00
 573+ 159F 47                   ld      B,A
 574+ 15A0 3E 00                ld      A,$00
 575+ 15A2 C9                   ret
 576+ 15A3 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 577+ 15A6 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 578+ 15AA 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 579+ 15AE 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 580+ 15B2 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 581+ 15B6 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 582+ 15BA 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 583+ 15BE 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 584+ 15C2 D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 585+ 15C6 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 586+ 15CA DB 00                in      A,($00)         ; INP (x) skeleton
 587+ 15CC C9                   ret
 588+ 15CD FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 589+ 15CE 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 590+ 15CF 00                   defb    $00             ; No nulls after input bytes
 591+ 15D0 00                   defb    $00             ; Output enabled (^O off)
 592+ 15D1 00 00                defw    $00             ; Array load/save check sum
 593+ 15D3 00                   defb    $00             ; Break not by NMI
 594+ 15D4 00                   defb    $00             ; Break flag
 595+ 15D5 C3 52 19             jp      TTYLIN          ; Input reflection (set to TTY)
 596+ 15D8 AB 82                defw    STLOOK          ; Temp string space
 597+ 15DA FE FF                defw    -2              ; Current line number (cold)
 598+ 15DC FF FF                defw    -1              ; Current line with errors (no errors)
 599+ 15DE 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 600+ 15DF 08                   defb    $08             ; auto-repeat delay
 601+ 15E0 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 601+ 15E4 0D 00 00 00
 601+ 15E8 00 00 00 00
 601+ 15EC 00 00 00 00
 602+ 15F0 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 602+ 15F4 00 00 00 00
 602+ 15F8 00 00 00 00
 602+ 15FC 00 00 00 00
 603+ 1600 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 603+ 1604 45 4E 31 0D
 603+ 1608 00 00 00 00
 603+ 160C 00 00 00 00
 604+ 1610 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 604+ 1614 52 31 2C 31
 604+ 1618 35 2C 35 0D
 604+ 161C 00 00 00 00
 605+ 1620 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 605+ 1624 41 4C 31 2C
 605+ 1628 33 38 34 30
 605+ 162C 30 0D 00 00
 606+ 1630 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 606+ 1634 45 4E 32 0D
 606+ 1638 00 00 00 00
 606+ 163C 00 00 00 00
 607+ 1640 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 607+ 1644 0D 00 00 00
 607+ 1648 00 00 00 00
 607+ 164C 00 00 00 00
 608+ 1650 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 608+ 1654 0D 00 00 00
 608+ 1658 00 00 00 00
 608+ 165C 00 00 00 00
 609+ 1660 48 82                defw    PROGST+1        ; Start of program text
 610+ 1662              INITBE:
 611+ 1662
 612+ 1662              ; END OF INITIALISATION TABLE ---------------------------------------------------
 613+ 1662
 614+ 1662 20 45 72 72  ERRMSG: defb    " Error",0
 614+ 1666 6F 72 00
 615+ 1669 20 69 6E 20  INMSG:  defb    " in ",0
 615+ 166D 00
 616+ 166E              ZERBYT  equ     $-1             ; A zero byte
 617+ 166E 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 617+ 1672 00
 618+ 1673 42 72 65 61  BRKMSG: defb    "Break",0
 618+ 1677 6B 00
 619+ 1679
 620+ 1679 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 621+ 167C 39                   add     HL,SP           ; same index as specified
 622+ 167D 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 623+ 167E 23                   inc     HL              ; Point to index address
 624+ 167F FE 81                cp      ZFOR            ; Is it a "FOR" token
 625+ 1681 C0                   ret     NZ              ; No - exit
 626+ 1682 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 627+ 1683 23                   inc     HL
 628+ 1684 46                   ld      B,(HL)
 629+ 1685 23                   inc     HL              ; Point to sign of STEP
 630+ 1686 E5                   push    HL              ; Save pointer to sign
 631+ 1687 69                   ld      L,C             ; HL = address of "FOR" index
 632+ 1688 60                   ld      H,B
 633+ 1689 7A                   ld      A,D             ; See if an index was specified
 634+ 168A B3                   or      E               ; DE = 0 if no index specified
 635+ 168B EB                   ex      DE,HL           ; Specified index into HL
 636+ 168C CA 93 16             jp      Z,INDFND        ; Skip if no index given
 637+ 168F EB                   ex      DE,HL           ; Index back into DE
 638+ 1690 CD CC 19             call    CPDEHL          ; Compare index with one given
 639+ 1693 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 640+ 1696 E1                   pop     HL              ; Restore pointer to sign
 641+ 1697 C8                   ret     Z               ; Return if block found
 642+ 1698 09                   add     HL,BC           ; Point to next block
 643+ 1699 C3 7D 16             jp      LOKFOR          ; Keep on looking
 644+ 169C
 645+ 169C CD B6 16     MOVUP:  call    ENFMEM          ; See if enough memory
 646+ 169F C5           MOVSTR: push    BC              ; Save end of source
 647+ 16A0 E3                   ex      (SP),HL         ; Swap source and dest" end
 648+ 16A1 C1                   pop     BC              ; Get end of destination
 649+ 16A2 CD CC 19     MOVLP:  call    CPDEHL          ; See if list moved
 650+ 16A5 7E                   ld      A,(HL)          ; Get byte
 651+ 16A6 02                   ld      (BC),A          ; Move it
 652+ 16A7 C8                   ret     Z               ; Exit if all done
 653+ 16A8 0B                   dec     BC              ; Next byte to move to
 654+ 16A9 2B                   dec     HL              ; Next byte to move
 655+ 16AA C3 A2 16             jp      MOVLP           ; Loop until all bytes moved
 656+ 16AD
 657+ 16AD E5           CHKSTK: push    HL              ; Save code string address
 658+ 16AE 2A 28 82             ld      HL,(ARREND)     ; Lowest free memory
 659+ 16B1 06 00                ld      B,$00           ; BC = Number of levels to test
 660+ 16B3 09                   add     HL,BC           ; 2 Bytes for each level
 661+ 16B4 09                   add     HL,BC
 662+ 16B5 3E                   defb    $3E             ; Skip "push HL"
 663+ 16B6 E5           ENFMEM: push    HL              ; Save code string address
 664+ 16B7 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 665+ 16B9 95                   sub     L
 666+ 16BA 6F                   ld      L,A
 667+ 16BB 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 668+ 16BD 9C                   sbc     A,H
 669+ 16BE DA C5 16             jp      C,OMERR         ; Not enough - ?OM Error
 670+ 16C1 67                   ld      H,A
 671+ 16C2 39                   add     HL,SP           ; Test if stack is overflowed
 672+ 16C3 E1                   pop     HL              ; Restore code string address
 673+ 16C4 D8                   ret     C               ; Return if enough memory
 674+ 16C5 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 675+ 16C7 C3 04 17             jp      ERROR
 676+ 16CA
 677+ 16CA
 678+ 16CA              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 679+ 16CA F5           EXITGM: push    AF              ; store AF
 680+ 16CB 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
 681+ 16CE FE 02                cp      $02             ; G2?
 682+ 16D0 CA D7 16             jp      Z,LDG1          ; yes, back to G1
 683+ 16D3 FE 03                cp      $03             ; G3?
 684+ 16D5 20 11                jr      NZ,LDG1ND       ; no, so return
 685+ 16D7 E5           LDG1:   push    HL              ; store HL
 686+ 16D8 D5                   push    DE              ; store DE
 687+ 16D9 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 688+ 16DC F3                   di                      ; disable INTs
 689+ 16DD CD EF 03             call    initVDP         ; initialize VDP with mode pointed by E
 690+ 16E0 FB                   ei                      ; re-enable INTs
 691+ 16E1 3E 01                ld      A,$01           ; activate the...
 692+ 16E3 32 DA 81             ld      (PRNTVIDEO),A   ; ...video buffer...
 693+ 16E6 D1                   pop     DE              ; retrieve DE
 694+ 16E7 E1                   pop     HL              ; retrieve HL
 695+ 16E8 F1           LDG1ND: pop     AF              ; retrieve AF
 696+ 16E9 C9                   ret                     ; return to caller
 697+ 16EA
 698+ 16EA
 699+ 16EA 2A B0 81     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 700+ 16ED 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 701+ 16F0 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 702+ 16F2 01                   defb    $01             ; Skip "ld E,DZ"
 703+ 16F3 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 704+ 16F5 01                   defb    $01             ; Skip "ld E,NF"
 705+ 16F6 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 706+ 16F8 01                   defb    $01             ; Skip "ld E,DD"
 707+ 16F9 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 708+ 16FB 01                   defb    $01             ; Skip "ld E,UF"
 709+ 16FC 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 710+ 16FE 01                   defb    $01             ; Skip "ld E,OV
 711+ 16FF 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 712+ 1701 01                   defb    $01             ; Skip "ld E,TM"
 713+ 1702 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 714+ 1704
 715+ 1704 CD 3C 18     ERROR:  call    CLREG           ; Clear registers and stack
 716+ 1707 CD CA 16             call    EXITGM          ; exit from graphic modes
 717+ 170A 32 A5 80             ld      (CTLOFG),A      ; Enable output (A is 0)
 718+ 170D CD 3A 09             call    CURSOR_ON       ; enable cursor
 719+ 1710 CD CE 1E             call    STTLIN          ; Start new line
 720+ 1713 21 24 10             ld      HL,ERRTBL       ; Point to error codes
 721+ 1716 57                   ld      D,A             ; D = 0 (A is 0)
 722+ 1717 3E 3F                ld      A,'?'
 723+ 1719 CD DD 19             call    OUTC            ; Output '?'
 724+ 171C 19                   add     HL,DE           ; Offset to correct error code
 725+ 171D 5E                   ld      E,(HL)          ; load pointer to error message
 726+ 171E 23                   inc     HL              ; by loading LSB,
 727+ 171F 56                   ld      D,(HL)          ; then MSB
 728+ 1720 62 6B                ld      HL,DE           ; load pointer to HL
 729+ 1722 CD A4 25             call    PRS             ; Output error message
 730+ 1725 21 62 16             ld      HL,ERRMSG       ; "Error" message
 731+ 1728 CD A4 25     ERRIN:  call    PRS             ; Output message
 732+ 172B 2A AF 80             ld      HL,(LINEAT)     ; Get line of error
 733+ 172E 11 FE FF             ld      DE,-2           ; Cold start error if -2
 734+ 1731 CD CC 19             call    CPDEHL          ; See if cold start error
 735+ 1734 CA 15 12             jp      Z,CSTART        ; Cold start error - Restart
 736+ 1737 7C                   ld      A,H             ; Was it a direct error?
 737+ 1738 A5                   and     L               ; Line = -1 if direct error
 738+ 1739 3C                   inc     A
 739+ 173A CA 45 17             jp      Z,PTLN          ; Yes, jump over
 740+ 173D E5                   push    HL              ; indirect mode - store HL
 741+ 173E 2A AF 80             ld      HL,(LINEAT)     ; copy current line number
 742+ 1741 22 B1 80             ld      (HLPLN),HL      ; save in HELP line register
 743+ 1744 E1                   pop     HL              ; retrieve HL
 744+ 1745 C4 3B 30     PTLN:   call    NZ,LINEIN       ; No - output line of error
 745+ 1748
 746+ 1748 3E                   defb    $3E             ; Skip "pop BC"
 747+ 1749 C1           POPNOK: pop     BC              ; Drop address in input buffer
 748+ 174A
 749+ 174A              ; run into direct mode: print OK and get command
 750+ 174A AF           PRNTOK: xor     A               ; Output "Ok" and get command
 751+ 174B 32 A5 80             ld      (CTLOFG),A      ; Enable output
 752+ 174E CD CE 1E             call    STTLIN          ; Start new line
 753+ 1751 21 6E 16             ld      HL,OKMSG        ; "Ok" message
 754+ 1754 CD A4 25             call    PRS             ; Output "Ok"
 755+ 1757 CD 3A 09     GETCMD: call    CURSOR_ON       ; enable cursor
 756+ 175A 21 FF FF             ld      HL,-1           ; Flag direct mode
 757+ 175D 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 758+ 1760 CD 52 19             call    GETLIN          ; Get an input line
 759+ 1763 DA 57 17             jp      C,GETCMD        ; Get line again if break
 760+ 1766 CD 13 1C             call    GETCHR          ; Get first character
 761+ 1769 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 762+ 176A DA F0 16             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 763+ 176D 1F                   rra                     ; recover original char and Carry
 764+ 176E 3C                   inc     A               ; Test if end of line
 765+ 176F 3D                   dec     A               ; Without affecting Carry
 766+ 1770 CA 57 17             jp      Z,GETCMD        ; Nothing entered - Get another
 767+ 1773 F5                   push    AF              ; Save Carry status
 768+ 1774 CD 4F 09             call    CURSOR_OFF      ; cursor disabled
 769+ 1777 CD E3 1C             call    ATOH            ; Get line number into DE
 770+ 177A D5                   push    DE              ; Save line number
 771+ 177B CD 69 18             call    CRUNCH          ; Tokenise rest of line
 772+ 177E 47                   ld      B,A             ; Length of tokenised line
 773+ 177F D1                   pop     DE              ; Restore line number
 774+ 1780 F1                   pop     AF              ; Restore Carry
 775+ 1781 D2 F3 1B             jp      NC,EXCUTE       ; No line number - Direct mode
 776+ 1784 D5                   push    DE              ; Save line number
 777+ 1785 C5                   push    BC              ; Save length of tokenised line
 778+ 1786 AF                   xor     A
 779+ 1787 32 B3 81             ld      (LSTBIN),A      ; Clear last byte input
 780+ 178A CD 13 1C             call    GETCHR          ; Get next character
 781+ 178D B7                   or      A               ; Set flags
 782+ 178E F5                   push    AF              ; And save them
 783+ 178F CD F6 17             call    SRCHLN          ; Search for line number in DE
 784+ 1792 DA 9B 17             jp      C,LINFND        ; Jump if line found
 785+ 1795 F1                   pop     AF              ; Get status
 786+ 1796 F5                   push    AF              ; And re-save
 787+ 1797 CA 92 1D             jp      Z,ULERR         ; Nothing after number - Error
 788+ 179A B7                   or      A               ; Clear Carry
 789+ 179B C5           LINFND: push    BC              ; Save address of line in prog
 790+ 179C D2 B2 17             jp      NC,INEWLN       ; Line not found - Insert new
 791+ 179F EB                   ex      DE,HL           ; Next line address in DE
 792+ 17A0 2A 24 82             ld      HL,(PROGND)     ; End of program
 793+ 17A3 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 794+ 17A4 02                   ld      (BC),A
 795+ 17A5 03                   inc     BC              ; Next destination
 796+ 17A6 13                   inc     DE              ; Next source
 797+ 17A7 CD CC 19             call    CPDEHL          ; All done?
 798+ 17AA C2 A3 17             jp      NZ,SFTPRG       ; More to do
 799+ 17AD 60                   ld      H,B             ; HL - New end of program
 800+ 17AE 69                   ld      L,C
 801+ 17AF 22 24 82             ld      (PROGND),HL     ; Update end of program
 802+ 17B2
 803+ 17B2 D1           INEWLN: pop     DE              ; Get address of line,
 804+ 17B3 F1                   pop     AF              ; Get status
 805+ 17B4 CA D9 17             jp      Z,SETPTR        ; No text - Set up pointers
 806+ 17B7 2A 24 82             ld      HL,(PROGND)     ; Get end of program
 807+ 17BA E3                   ex      (SP),HL         ; Get length of input line
 808+ 17BB C1                   pop     BC              ; End of program to BC
 809+ 17BC 09                   add     HL,BC           ; Find new end
 810+ 17BD E5                   push    HL              ; Save new end
 811+ 17BE CD 9C 16             call    MOVUP           ; Make space for line
 812+ 17C1 E1                   pop     HL              ; Restore new end
 813+ 17C2 22 24 82             ld      (PROGND),HL     ; Update end of program pointer
 814+ 17C5 EB                   ex      DE,HL           ; Get line to move up in HL
 815+ 17C6 74                   ld      (HL),H          ; Save MSB
 816+ 17C7 D1                   pop     DE              ; Get new line number
 817+ 17C8 23                   inc     HL              ; Skip pointer
 818+ 17C9 23                   inc     HL
 819+ 17CA 73                   ld      (HL),E          ; Save LSB of line number
 820+ 17CB 23                   inc     HL
 821+ 17CC 72                   ld      (HL),D          ; Save MSB of line number
 822+ 17CD 23                   inc     HL              ; To first byte in line
 823+ 17CE 11 38 81             ld      DE,BUFFER       ; Copy buffer to program
 824+ 17D1 1A           MOVBUF: ld      A,(DE)          ; Get source
 825+ 17D2 77                   ld      (HL),A          ; Save destinations
 826+ 17D3 23                   inc     HL              ; Next source
 827+ 17D4 13                   inc     DE              ; Next destination
 828+ 17D5 B7                   or      A               ; Done?
 829+ 17D6 C2 D1 17             jp      NZ,MOVBUF       ; No - Repeat
 830+ 17D9 CD 22 18     SETPTR: call    RUNFST          ; Set line pointers
 831+ 17DC 23                   inc     HL              ; To LSB of pointer
 832+ 17DD EB                   ex      DE,HL           ; Address to DE
 833+ 17DE 62           PTRLP:  ld      H,D             ; Address to HL
 834+ 17DF 6B                   ld      L,E
 835+ 17E0 7E                   ld      A,(HL)          ; Get LSB of pointer
 836+ 17E1 23                   inc     HL              ; To MSB of pointer
 837+ 17E2 B6                   or      (HL)            ; Compare with MSB pointer
 838+ 17E3 CA 57 17             jp      Z,GETCMD        ; Get command line if end
 839+ 17E6 23                   inc     HL              ; To LSB of line number
 840+ 17E7 23                   inc     HL              ; Skip line number
 841+ 17E8 23                   inc     HL              ; Point to first byte in line
 842+ 17E9 AF                   xor     A               ; Looking for 00 byte
 843+ 17EA BE           FNDEND: cp      (HL)            ; Found end of line?
 844+ 17EB 23                   inc     HL              ; Move to next byte
 845+ 17EC C2 EA 17             jp      NZ,FNDEND       ; No - Keep looking
 846+ 17EF EB                   ex      DE,HL           ; Next line address to HL
 847+ 17F0 73                   ld      (HL),E          ; Save LSB of pointer
 848+ 17F1 23                   inc     HL
 849+ 17F2 72                   ld      (HL),D          ; Save MSB of pointer
 850+ 17F3 C3 DE 17             jp      PTRLP           ; Do next line
 851+ 17F6
 852+ 17F6 2A 35 81     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 853+ 17F9 44           SRCHLP: ld      B,H             ; BC = Address to look at
 854+ 17FA 4D                   ld      C,L
 855+ 17FB 7E                   ld      A,(HL)          ; Get address of next line
 856+ 17FC 23                   inc     HL
 857+ 17FD B6                   or      (HL)            ; End of program found?
 858+ 17FE 2B                   dec     HL
 859+ 17FF C8                   ret     Z               ; Yes - Line not found
 860+ 1800 23                   inc     HL
 861+ 1801 23                   inc     HL
 862+ 1802 7E                   ld      A,(HL)          ; Get LSB of line number
 863+ 1803 23                   inc     HL
 864+ 1804 66                   ld      H,(HL)          ; Get MSB of line number
 865+ 1805 6F                   ld      L,A
 866+ 1806 CD CC 19             call    CPDEHL          ; Compare with line in DE
 867+ 1809 60                   ld      H,B             ; HL = Start of this line
 868+ 180A 69                   ld      L,C
 869+ 180B 7E                   ld      A,(HL)          ; Get LSB of next line address
 870+ 180C 23                   inc     HL
 871+ 180D 66                   ld      H,(HL)          ; Get MSB of next line address
 872+ 180E 6F                   ld      L,A             ; Next line to HL
 873+ 180F 3F                   ccf
 874+ 1810 C8                   ret     Z               ; Lines found - Exit
 875+ 1811 3F                   ccf
 876+ 1812 D0                   ret     NC              ; Line not found,at line after
 877+ 1813 C3 F9 17             jp      SRCHLP          ; Keep looking
 878+ 1816
 879+ 1816 C0           NEW:    ret     NZ              ; Return if any more on line
 880+ 1817 2A 35 81     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 881+ 181A AF                   xor     A               ; Set program area to empty
 882+ 181B 77                   ld      (HL),A          ; Save LSB = 00
 883+ 181C 23                   inc     HL
 884+ 181D 77                   ld      (HL),A          ; Save MSB = 00
 885+ 181E 23                   inc     HL
 886+ 181F 22 24 82             ld      (PROGND),HL     ; Set program end
 887+ 1822
 888+ 1822 2A 35 81     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 889+ 1825 2B                   dec     HL
 890+ 1826
 891+ 1826 22 B5 81     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 892+ 1829 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
 893+ 182C 22 AA 81             ld      (STRBOT),HL     ; Clear string space
 894+ 182F AF                   xor     A
 895+ 1830 CD 23 1C             call    RESTOR          ; Reset DATA pointers
 896+ 1833 2A 24 82             ld      HL,(PROGND)     ; Get end of program
 897+ 1836 22 26 82             ld      (VAREND),HL     ; Clear variables
 898+ 1839 22 28 82             ld      (ARREND),HL     ; Clear arrays
 899+ 183C
 900+ 183C C1           CLREG:  pop     BC              ; Save return address
 901+ 183D 2A AD 80             ld      HL,(STRSPC)     ; Get end of working RAM
 902+ 1840 F9                   ld      SP,HL           ; Set stack
 903+ 1841 21 9A 81             ld      HL,TMSTPL       ; Temporary string pool
 904+ 1844 22 98 81             ld      (TMSTPT),HL     ; Reset temporary string ptr
 905+ 1847 AF                   xor     A               ; A = 00
 906+ 1848 6F                   ld      L,A             ; HL = 0000
 907+ 1849 67                   ld      H,A
 908+ 184A 22 BB 81             ld      (CONTAD),HL     ; No CONTinue
 909+ 184D 32 B2 81             ld      (FORFLG),A      ; Clear FOR flag
 910+ 1850 22 2C 82             ld      (FNRGNM),HL     ; Clear FN argument
 911+ 1853 E5                   push    HL              ; HL = 0000
 912+ 1854 C5                   push    BC              ; Put back return
 913+ 1855 2A B5 81     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 914+ 1858 C9                   ret                     ; Return to execution driver
 915+ 1859
 916+ 1859 3E 3F        PROMPT: ld      A,'?'           ; '?'
 917+ 185B CD DD 19             call    OUTC            ; Output character
 918+ 185E 3E 00                ld      A,NLLCR         ; null char
 919+ 1860 CD DD 19             call    OUTC            ; Output character
 920+ 1863 CD 3A 09             call    CURSOR_ON       ; enable cursor
 921+ 1866 C3 AA 80             jp      RINPUT          ; Get input line
 922+ 1869
 923+ 1869 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 924+ 186A 32 95 81             ld      (DATFLG),A      ; Reset literal flag
 925+ 186D 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 926+ 186F 11 38 81             ld      DE,BUFFER       ; Start of input buffer
 927+ 1872 7E           CRNCLP: ld      A,(HL)          ; Get byte
 928+ 1873 FE 20                cp      SPC             ; Is it a space?
 929+ 1875 CA F1 18             jp      Z,MOVDIR        ; Yes - Copy direct
 930+ 1878 47                   ld      B,A             ; Save character
 931+ 1879 FE 22                cp      $22             ; '"'             ; Is it a quote?
 932+ 187B CA 11 19             jp      Z,CPYLIT        ; Yes - Copy literal string
 933+ 187E B7                   or      A               ; Is it end of buffer?
 934+ 187F CA 18 19             jp      Z,ENDBUF        ; Yes - End buffer
 935+ 1882 3A 95 81             ld      A,(DATFLG)      ; Get data type
 936+ 1885 B7                   or      A               ; Literal?
 937+ 1886 7E                   ld      A,(HL)          ; Get byte to copy
 938+ 1887 C2 F1 18             jp      NZ,MOVDIR       ; Literal - Copy direct
 939+ 188A FE 3F                cp      '?'             ; Is it '?' short for PRINT
 940+ 188C 3E AF                ld      A,ZPRINT        ; "PRINT" token
 941+ 188E CA F1 18             jp      Z,MOVDIR        ; Yes - replace it
 942+ 1891 7E                   ld      A,(HL)          ; Get byte again
 943+ 1892 FE 30                cp      '0'             ; Is it less than '0'
 944+ 1894 DA 9C 18             jp      C,FNDWRD        ; Yes - Look for reserved words
 945+ 1897 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
 946+ 1899 DA F1 18             jp      C,MOVDIR        ; Yes - copy it direct
 947+ 189C D5           FNDWRD: push    DE              ; Look for reserved words
 948+ 189D 11 71 13             ld      DE,WORDS-1      ; Point to table
 949+ 18A0 C5                   push    BC              ; Save count
 950+ 18A1 01 ED 18             ld      BC,RETNAD       ; Where to return to
 951+ 18A4 C5                   push    BC              ; Save return address
 952+ 18A5 06 7F                ld      B,ZEND-1        ; First token value -1
 953+ 18A7 7E                   ld      A,(HL)          ; Get byte
 954+ 18A8 FE 61                cp      'a'             ; Less than 'a' ?
 955+ 18AA DA B5 18             jp      C,SEARCH        ; Yes - search for words
 956+ 18AD FE 7B                cp      'z'+1           ; Greater than 'z' ?
 957+ 18AF D2 B5 18             jp      NC,SEARCH       ; Yes - search for words
 958+ 18B2 E6 5F                and     %01011111       ; Force upper case
 959+ 18B4 77                   ld      (HL),A          ; Replace byte
 960+ 18B5 4E           SEARCH: ld      C,(HL)          ; Search for a word
 961+ 18B6 EB                   ex      DE,HL
 962+ 18B7 23           GETNXT: inc     HL              ; Get next reserved word
 963+ 18B8 B6                   or      (HL)            ; Start of word?
 964+ 18B9 F2 B7 18             jp      P,GETNXT        ; No - move on
 965+ 18BC 04                   inc     B               ; Increment token value
 966+ 18BD 7E                   ld      A,(HL)          ; Get byte from table
 967+ 18BE E6 7F                and     %01111111       ; Strip bit 7
 968+ 18C0 C8                   ret     Z               ; Return if end of list
 969+ 18C1 B9                   cp      C               ; Same character as in buffer?
 970+ 18C2 C2 B7 18             jp      NZ,GETNXT       ; No - get next word
 971+ 18C5 EB                   ex      DE,HL
 972+ 18C6 E5                   push    HL              ; Save start of word
 973+ 18C7
 974+ 18C7 13           NXTBYT: inc     DE              ; Look through rest of word
 975+ 18C8 1A                   ld      A,(DE)          ; Get byte from table
 976+ 18C9 B7                   or      A               ; End of word ?
 977+ 18CA FA E9 18             jp      M,MATCH         ; Yes - Match found
 978+ 18CD 4F                   ld      C,A             ; Save it
 979+ 18CE 78                   ld      A,B             ; Get token value
 980+ 18CF FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
 981+ 18D1 C2 D8 18             jp      NZ,NOSPC        ; No - Don't allow spaces
 982+ 18D4 CD 13 1C             call    GETCHR          ; Get next character
 983+ 18D7 2B                   dec     HL              ; Cancel increment from GETCHR
 984+ 18D8 23           NOSPC:  inc     HL              ; Next byte
 985+ 18D9 7E                   ld      A,(HL)          ; Get byte
 986+ 18DA FE 61                cp      'a'             ; Less than 'a' ?
 987+ 18DC DA E1 18             jp      C,NOCHNG        ; Yes - don't change
 988+ 18DF E6 5F                and     %01011111       ; Make upper case
 989+ 18E1 B9           NOCHNG: cp      C               ; Same as in buffer ?
 990+ 18E2 CA C7 18             jp      Z,NXTBYT        ; Yes - keep testing
 991+ 18E5 E1                   pop     HL              ; Get back start of word
 992+ 18E6 C3 B5 18             jp      SEARCH          ; Look at next word
 993+ 18E9
 994+ 18E9 48           MATCH:  ld      C,B             ; Word found - Save token value
 995+ 18EA F1                   pop     AF              ; Throw away return
 996+ 18EB EB                   ex      DE,HL
 997+ 18EC C9                   ret                     ; Return to "RETNAD"
 998+ 18ED EB           RETNAD: ex      DE,HL           ; Get address in string
 999+ 18EE 79                   ld      A,C             ; Get token value
1000+ 18EF C1                   pop     BC              ; Restore buffer length
1001+ 18F0 D1                   pop     DE              ; Get destination address
1002+ 18F1 23           MOVDIR: inc     HL              ; Next source in buffer
1003+ 18F2 12                   ld      (DE),A          ; Put byte in buffer
1004+ 18F3 13                   inc     DE              ; Move up buffer
1005+ 18F4 0C                   inc     C               ; Increment length of buffer
1006+ 18F5 D6 3A                sub     ':'             ; End of statement?
1007+ 18F7 CA FF 18             jp      Z,SETLIT        ; Jump if multi-statement line
1008+ 18FA FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1009+ 18FC C2 02 19             jp      NZ,TSTREM       ; No - see if REM
1010+ 18FF 32 95 81     SETLIT: ld      (DATFLG),A      ; Set literal flag
1011+ 1902 D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1012+ 1904 C2 72 18             jp      NZ,CRNCLP       ; No - Leave flag
1013+ 1907 47                   ld      B,A             ; Copy rest of buffer
1014+ 1908 7E           NXTCHR: ld      A,(HL)          ; Get byte
1015+ 1909 B7                   or      A               ; End of line ?
1016+ 190A CA 18 19             jp      Z,ENDBUF        ; Yes - Terminate buffer
1017+ 190D B8                   cp      B               ; End of statement ?
1018+ 190E CA F1 18             jp      Z,MOVDIR        ; Yes - Get next one
1019+ 1911 23           CPYLIT: inc     HL              ; Move up source string
1020+ 1912 12                   ld      (DE),A          ; Save in destination
1021+ 1913 0C                   inc     C               ; Increment length
1022+ 1914 13                   inc     DE              ; Move up destination
1023+ 1915 C3 08 19             jp      NXTCHR          ; Repeat
1024+ 1918
1025+ 1918 21 37 81     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1026+ 191B 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1027+ 191C 13                   inc     DE
1028+ 191D 12                   ld      (DE),A          ; A = 00
1029+ 191E 13                   inc     DE
1030+ 191F 12                   ld      (DE),A          ; A = 00
1031+ 1920 C9                   ret
1032+ 1921
1033+ 1921 3A A4 80     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1034+ 1924 B7                   or      A               ; Is it zero?
1035+ 1925 3E 00                ld      A,$00           ; Zero A - Leave flags
1036+ 1927 32 A4 80             ld      (NULFLG),A      ; Zero null flag
1037+ 192A C2 35 19             jp      NZ,ECHDEL       ; Set - Echo it
1038+ 192D 05                   dec     B               ; Decrement length
1039+ 192E CA 52 19             jp      Z,GETLIN        ; Get line again if empty
1040+ 1931 CD DD 19             call    OUTC            ; Output null character
1041+ 1934 3E                   defb    $3E             ; Skip "dec B"
1042+ 1935 05           ECHDEL: dec     B               ; Count bytes in buffer
1043+ 1936 2B                   dec     HL              ; Back space buffer
1044+ 1937 CA 49 19             jp      Z,OTKLN         ; No buffer - Try again
1045+ 193A 7E                   ld      A,(HL)          ; Get deleted byte
1046+ 193B CD DD 19             call    OUTC            ; Echo it
1047+ 193E C3 5B 19             jp      MORINP          ; Get more input
1048+ 1941
1049+ 1941 05           DELCHR: dec     B               ; Count bytes in buffer
1050+ 1942 2B                   dec     HL              ; Back space buffer
1051+ 1943 CD DD 19             call    OUTC            ; Output character in A
1052+ 1946 C2 5B 19             jp      NZ,MORINP       ; Not end - Get more
1053+ 1949 CD DD 19     OTKLN:  call    OUTC            ; Output character in A
1054+ 194C CD E0 1E     KILIN:  call    PRNTCRLF        ; Output CRLF
1055+ 194F C3 52 19             jp      TTYLIN          ; Get line again
1056+ 1952
1057+ 1952              GETLIN:
1058+ 1952 21 38 81     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1059+ 1955 06 01                ld      B,$01           ; Set buffer as empty
1060+ 1957 AF                   xor     A
1061+ 1958 32 A4 80             ld      (NULFLG),A      ; Clear null flag
1062+ 195B CD 1E 1A     MORINP: call    CLOTST          ; Get character and test ^O
1063+ 195E 4F                   ld      C,A             ; Save character in C
1064+ 195F FE 7F                cp      DEL             ; Delete character?
1065+ 1961 CA 21 19             jp      Z,DODEL         ; Yes - Process it
1066+ 1964 3A A4 80             ld      A,(NULFLG)      ; Get null flag
1067+ 1967 B7                   or      A               ; Test null flag status
1068+ 1968 CA 74 19             jp      Z,PROCES        ; Reset - Process character
1069+ 196B 3E 00                ld      A,$00           ; Set a null
1070+ 196D CD DD 19             call    OUTC            ; Output null
1071+ 1970 AF                   xor     A               ; Clear A
1072+ 1971 32 A4 80             ld      (NULFLG),A      ; Reset null flag
1073+ 1974 79           PROCES: ld      A,C             ; Get character
1074+ 1975 FE 07                cp      CTRLG           ; Bell?
1075+ 1977 CA B4 19             jp      Z,PUTCTL        ; Yes - Save it
1076+ 197A FE 03                cp      CTRLC           ; Is it control "C"?
1077+ 197C CC A9 19             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1078+ 197F 37                   scf                     ; Flag break
1079+ 1980 C8                   ret     Z               ; Return if control "C"
1080+ 1981 FE 0D                cp      CR              ; Is it enter?
1081+ 1983 CA D6 1E             jp      Z,ENDINP        ; Yes - Terminate input
1082+ 1986 FE 15                cp      CTRLU           ; Is it control "U"?
1083+ 1988 CA 4C 19             jp      Z,KILIN         ; Yes - Get another line
1084+ 198B FE 08                cp      BKSP            ; Is it backspace?
1085+ 198D CA 41 19             jp      Z,DELCHR        ; Yes - Delete character
1086+ 1990 FE 12                cp      CTRLR           ; Is it control "R"?
1087+ 1992 C2 AF 19             jp      NZ,PUTBUF       ; No - Put in buffer
1088+ 1995 C5                   push    BC              ; Save buffer length
1089+ 1996 D5                   push    DE              ; Save DE
1090+ 1997 E5                   push    HL              ; Save buffer address
1091+ 1998 36 00                ld      (HL),$00        ; Mark end of buffer
1092+ 199A CD D9 3F             call    OUTNCR          ; Output and do CRLF
1093+ 199D 21 38 81             ld      HL,BUFFER       ; Point to buffer start
1094+ 19A0 CD A4 25             call    PRS             ; Output buffer
1095+ 19A3 E1                   pop     HL              ; Restore buffer address
1096+ 19A4 D1                   pop     DE              ; Restore DE
1097+ 19A5 C1                   pop     BC              ; Restore buffer length
1098+ 19A6 C3 5B 19             jp      MORINP          ; Get another character
1099+ 19A9 CD CA 16     GMNCR:  call    EXITGM          ; exit from graphic mode
1100+ 19AC C3 E0 1E             jp      PRNTCRLF        ; output CRLF
1101+ 19AF
1102+ 19AF FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1103+ 19B1 DA 5B 19             jp      C,MORINP        ; Yes - Ignore
1104+ 19B4 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1105+ 19B5 FE 59                cp      $58+$01         ; Test for line overflow
1106+ 19B7 3E 08                ld      A,BKSP          ; Set a bell
1107+ 19B9 D2 C6 19             jp      NC,OUTNBS       ; Ring bell if buffer full
1108+ 19BC 79                   ld      A,C             ; Get character
1109+ 19BD 71                   ld      (HL),C          ; Save in buffer
1110+ 19BE 32 B3 81             ld      (LSTBIN),A      ; Save last input byte
1111+ 19C1 23                   inc     HL              ; Move up buffer
1112+ 19C2 04                   inc     B               ; Increment length
1113+ 19C3 C3 5B 19     OUTIT:  jp      MORINP          ; Get another character
1114+ 19C6
1115+ 19C6 CD DD 19     OUTNBS: call    OUTC            ; Output bell and back over it
1116+ 19C9 C3 C3 19             jp      OUTIT           ; get more chars
1117+ 19CC
1118+ 19CC 7C           CPDEHL: ld      A,H             ; Get H
1119+ 19CD 92                   sub     D               ; Compare with D
1120+ 19CE C0                   ret     NZ              ; Different - Exit
1121+ 19CF 7D                   ld      A,L             ; Get L
1122+ 19D0 93                   sub     E               ; Compare with E
1123+ 19D1 C9                   ret                     ; Return status
1124+ 19D2
1125+ 19D2 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1126+ 19D3 E3                   ex      (SP),HL         ; Address of test byte
1127+ 19D4 BE                   cp      (HL)            ; Same as in code string?
1128+ 19D5 23                   inc     HL              ; Return address
1129+ 19D6 E3                   ex      (SP),HL         ; Put it back
1130+ 19D7 CA 13 1C             jp      Z,GETCHR        ; Yes - Get next character
1131+ 19DA C3 F0 16             jp      SNERR           ; Different - ?SN Error
1132+ 19DD
1133+ 19DD F5           OUTC:   push    AF              ; Save character
1134+ 19DE 3A A5 80             ld      A,(CTLOFG)      ; Get control "O" flag
1135+ 19E1 B7                   or      A               ; Is it set?
1136+ 19E2 C2 D9 25             jp      NZ,POPAF        ; Yes - don't output
1137+ 19E5 F1                   pop     AF              ; Restore character
1138+ 19E6 C5                   push    BC              ; Save buffer length
1139+ 19E7 F5                   push    AF              ; Save character
1140+ 19E8 FE 20                cp      SPC             ; Is it a control code?
1141+ 19EA DA 01 1A             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1142+ 19ED 3A A2 80             ld      A,(LWIDTH)      ; Get line width
1143+ 19F0 47                   ld      B,A             ; To B
1144+ 19F1 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1145+ 19F4 04                   inc     B               ; Width 255?
1146+ 19F5 CA FD 19             jp      Z,INCLEN        ; Yes - No width limit
1147+ 19F8 05                   dec     B               ; Restore width
1148+ 19F9 B8                   cp      B               ; At end of line?
1149+ 19FA CC E0 1E             call    Z,PRNTCRLF      ; Yes - output CRLF
1150+ 19FD 3C           INCLEN: inc     A               ; Move on one character
1151+ 19FE 32 92 81             ld      (CURPOS),A      ; Save new position
1152+ 1A01 AF           DINPOS: xor     A
1153+ 1A02 32 18 82             ld      (KBDNPT),A      ; set flag for no char from keyboard
1154+ 1A05 F1                   pop     AF              ; Restore character
1155+ 1A06 C1                   pop     BC              ; Restore buffer length
1156+ 1A07 F5                   push    AF
1157+ 1A08 CD 10 1A             call    SND2VID         ; send char to video
1158+ 1A0B F1                   pop     AF
1159+ 1A0C CD B8 3F             call    MONOUT          ; send char to serial if enabled
1160+ 1A0F C9                   ret
1161+ 1A10
1162+ 1A10              ; print char to video if cursor is on
1163+ 1A10 32 DB 81     SND2VID:ld      (CHR4VID),A     ; store A
1164+ 1A13 3A DA 81             ld      A,(PRNTVIDEO)   ; check print-on-video
1165+ 1A16 B7                   or      A               ; is it off?
1166+ 1A17 C8                   ret     Z               ; yes, so return
1167+ 1A18 F3                   di                      ; disable INTs
1168+ 1A19 CD 6E 07             call    CHAR2VID        ; cursor is on, so print char on screen
1169+ 1A1C FB                   ei                      ; re-enable INTs
1170+ 1A1D C9                   ret                     ; return to caller
1171+ 1A1E
1172+ 1A1E CD 5F 33     CLOTST: call    GETINP          ; Get input character
1173+ 1A21 FE 0F                cp      CTRLO           ; Is it control "O"?
1174+ 1A23 C0                   ret     NZ              ; No don't flip flag
1175+ 1A24 3A A5 80             ld      A,(CTLOFG)      ; Get flag
1176+ 1A27 2F                   cpl                     ; Flip it
1177+ 1A28 32 A5 80             ld      (CTLOFG),A      ; Put it back
1178+ 1A2B A7                   and     A               ; is output enabled?
1179+ 1A2C CC 3A 09             call    Z,CURSOR_ON     ; yes, so cursor on
1180+ 1A2F AF                   xor     A               ; Null character
1181+ 1A30 C9                   ret
1182+ 1A31
1183+ 1A31              ; LIST: list the program stored into memory
1184+ 1A31 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1185+ 1A32 2B                   dec     HL              ; dec 'cos GETCHR INCs
1186+ 1A33 CD 13 1C             call    GETCHR          ; Get next character
1187+ 1A36 CA 8C 1A             jp      Z,LSTALL        ; list all if nothing follows
1188+ 1A39 FE BE                cp      ZMINUS          ; is it '-'?
1189+ 1A3B 20 20                jr      NZ,LST01        ; no, look for a line number
1190+ 1A3D 11 00 00             ld      DE,$0000        ; yes, set search from 0
1191+ 1A40 CD 2D 1B             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1192+ 1A43 ED 43 DE 81          ld      (TMPBFR1),BC    ; store address of starting line
1193+ 1A47 CD D2 19             call    CHKSYN          ; skip '-'
1194+ 1A4A BE                   defb    ZMINUS
1195+ 1A4B CD E3 1C             call    ATOH            ; now, look for another number (ASCII number to DE)
1196+ 1A4E CD 33 1B             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1197+ 1A51 ED 43 E0 81          ld      (TMPBFR2),BC    ; store address of ending line
1198+ 1A55 ED 4B DE 81          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1199+ 1A59 C5                   push    BC              ; store address of line for later use
1200+ 1A5A C3 C4 1A             jp      LISTLP          ; go listing
1201+ 1A5D CD E3 1C     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1202+ 1A60 ED 53 E4 81  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1203+ 1A64 CD 2D 1B             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1204+ 1A67 ED 43 DE 81          ld      (TMPBFR1),BC    ; store address of starting line
1205+ 1A6B ED 43 E0 81          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1206+ 1A6F 2B                   dec     HL              ; dec 'cos GETCHR INCs
1207+ 1A70 CD 13 1C             call    GETCHR          ; Get next character
1208+ 1A73 CA 7F 1A             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1209+ 1A76 FE BE                cp      ZMINUS          ; is it '-'?
1210+ 1A78 CA A4 1A             jp      Z,LST03         ; yes, read ending line
1211+ 1A7B C5           LST06:  push    BC              ; store address for later use
1212+ 1A7C C3 C4 1A             jp      LISTLP          ; jump to list
1213+ 1A7F ED 5B E4 81  LSTNOT: ld      DE,(TMPBFR4)
1214+ 1A83 CD 2D 1B             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1215+ 1A86 DA 7B 1A             jp      C,LST06
1216+ 1A89 C3 4A 17             jp      PRNTOK
1217+ 1A8C 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1218+ 1A8F CD 2D 1B             call    SRCHLIN         ; get address of last line
1219+ 1A92 ED 43 E0 81          ld      (TMPBFR2),BC    ; store it
1220+ 1A96 11 00 00             ld      DE,$0000        ; set start to first line in memory
1221+ 1A99 CD 2D 1B             call    SRCHLIN         ; get address of first line
1222+ 1A9C ED 43 DE 81          ld      (TMPBFR1),BC    ; store it
1223+ 1AA0 C5                   push    BC              ; store address of starting line for later use
1224+ 1AA1 C3 C4 1A             jp      LISTLP          ; start printing
1225+ 1AA4 CD D2 19     LST03:  call    CHKSYN          ; skip '-'
1226+ 1AA7 BE                   defb    ZMINUS
1227+ 1AA8 CD E3 1C             call    ATOH            ; look for another number (return into DE)
1228+ 1AAB 7A                   ld      A,D
1229+ 1AAC B3                   or      E               ; is line=0?
1230+ 1AAD 20 09                jr      NZ,LST05        ; no, jump over
1231+ 1AAF 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1232+ 1AB2 CD 2D 1B             call    SRCHLIN         ; get address of last line
1233+ 1AB5 C3 BB 1A             jp      LST02
1234+ 1AB8 CD 33 1B     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1235+ 1ABB ED 43 E0 81  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1236+ 1ABF ED 4B DE 81          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1237+ 1AC3 C5                   push    BC              ; store it for later use
1238+ 1AC4 E1           LISTLP: pop     HL              ; Restore address of line
1239+ 1AC5 4E                   ld      C,(HL)          ; Get LSB of next line
1240+ 1AC6 23                   inc     HL
1241+ 1AC7 46                   ld      B,(HL)          ; Get MSB of next line
1242+ 1AC8 23                   inc     HL
1243+ 1AC9 78                   ld      A,B             ; BC = 0 (End of program)?
1244+ 1ACA B1                   or      C
1245+ 1ACB CA 4A 17             jp      Z,PRNTOK        ; Yes - Go to command mode
1246+ 1ACE CD 3E 1C             call    TSTBRK          ; Test for break key
1247+ 1AD1 CD 41 1B             call    TSTSPC          ; test for space
1248+ 1AD4 C5                   push    BC              ; Save address of next line
1249+ 1AD5 3A D3 81             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1250+ 1AD8 A7                   and     A               ; is it at the beginning of a new line?
1251+ 1AD9 20 0B                jr      NZ,LST08        ; No, jump over
1252+ 1ADB 3E 0D                ld      A,CR            ; yes, so just send a CR
1253+ 1ADD CD B8 3F             call    MONOUT          ; to serial if it's open
1254+ 1AE0 AF                   xor     A               ; then, set cursor
1255+ 1AE1 32 92 81             ld      (CURPOS),A      ; to position 0
1256+ 1AE4 18 03                jr      LST07           ; and continue
1257+ 1AE6 CD E0 1E     LST08:  call    PRNTCRLF        ; output CRLF
1258+ 1AE9 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1259+ 1AEA 23                   inc     HL
1260+ 1AEB 56                   ld      D,(HL)          ; Get MSB of line number
1261+ 1AEC 23                   inc     HL
1262+ 1AED E5                   push    HL              ; Save address of line start
1263+ 1AEE EB                   ex      DE,HL           ; Line number to HL
1264+ 1AEF CD 43 30             call    PRNTHL          ; Output line number in decimal
1265+ 1AF2 3E 20                ld      A,SPC           ; Space after line number
1266+ 1AF4 E1                   pop     HL              ; Restore start of line address
1267+ 1AF5 CD DD 19     LSTLP2: call    OUTC            ; Output character in A
1268+ 1AF8 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1269+ 1AF9 B7                   or      A               ; End of line?
1270+ 1AFA 23                   inc     HL              ; To next byte in line
1271+ 1AFB CA 1F 1B             jp      Z,NXTLN         ; Yes - check next line
1272+ 1AFE F2 F5 1A             jp      P,LSTLP2        ; No token - output it
1273+ 1B01 D6 7F                sub     ZEND-1          ; Find and output word
1274+ 1B03 4F                   ld      C,A             ; Token offset+1 to C
1275+ 1B04 11 72 13             ld      DE,WORDS        ; Reserved word list
1276+ 1B07 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1277+ 1B08 13                   inc     DE              ; Move on to next
1278+ 1B09 B7                   or      A               ; Is it start of word?
1279+ 1B0A F2 07 1B             jp      P,FNDTOK        ; No - Keep looking for word
1280+ 1B0D 0D                   dec     C               ; Count words
1281+ 1B0E C2 07 1B             jp      NZ,FNDTOK       ; Not there - keep looking
1282+ 1B11 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1283+ 1B13 CD DD 19             call    OUTC            ; Output character
1284+ 1B16 1A                   ld      A,(DE)          ; Get next character
1285+ 1B17 13                   inc     DE              ; Move on to next
1286+ 1B18 B7                   or      A               ; Is it end of word?
1287+ 1B19 F2 11 1B             jp      P,OUTWRD        ; No - output the rest
1288+ 1B1C C3 F8 1A             jp      LSTLP3          ; Next byte in line
1289+ 1B1F D1           NXTLN:  pop     DE              ; recover address of current line
1290+ 1B20 2A E0 81             ld      HL,(TMPBFR2)    ; address of last line to print
1291+ 1B23 CD DF 3F             call    CMP16           ; check if current line is over last printable line
1292+ 1B26 DA 4A 17             jp      C,PRNTOK        ; finish - leave & print OK
1293+ 1B29 D5                   push    DE              ; store address of current line
1294+ 1B2A C3 C4 1A             jp      LISTLP          ; continue listing
1295+ 1B2D              ; look for the address of a program line
1296+ 1B2D E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1297+ 1B2E CD F6 17             call    SRCHLN          ; search for line number in DE
1298+ 1B31 E1                   pop     HL              ; retrieve HL
1299+ 1B32 C9                   ret                     ; return to caller
1300+ 1B33              ; look for the address of a program line - if the line isn't found,
1301+ 1B33              ; it look backward for the previous line
1302+ 1B33 E5           SRCLN:  push    HL              ; store HL
1303+ 1B34 CD F6 17     SRCLN1: call    SRCHLN          ; search for line in DE
1304+ 1B37 DA 3F 1B             jp      C,LVSRLN        ; found it, leave loop
1305+ 1B3A 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1306+ 1B3B 7B                   ld      A,E
1307+ 1B3C B2                   or      D               ; is line number zero?
1308+ 1B3D 20 F5                jr      NZ,SRCLN1       ; no, continue
1309+ 1B3F E1           LVSRLN: pop     HL              ; retrieve HL
1310+ 1B40 C9                   ret                     ; return to caller
1311+ 1B41
1312+ 1B41              ; during LISTing, check if PAUSE is pressed, then pause listing and
1313+ 1B41              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1314+ 1B41 3A 1A 82     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1315+ 1B44 FE 20                cp      SPC             ; Is it SPACE?
1316+ 1B46 C0                   ret     NZ              ; No, return
1317+ 1B47 CD 5F 33     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1318+ 1B4A FE 20                cp      SPC             ; is it SPACE?
1319+ 1B4C 20 05                jr      NZ,CNTWTSP      ; no, continue
1320+ 1B4E AF                   xor     A
1321+ 1B4F 32 1A 82             ld      (TMPKEYBFR),A   ; reset key
1322+ 1B52 C9                   ret                     ; return to caller
1323+ 1B53 FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1324+ 1B55 20 F0                jr      NZ,WTSPC        ; no, loop
1325+ 1B57 C3 BF 12             jp      BRKRET          ; exit and output "Ok"
1326+ 1B5A
1327+ 1B5A
1328+ 1B5A 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1329+ 1B5C 32 B2 81             ld      (FORFLG),A      ; Save "FOR" flag
1330+ 1B5F CD D3 1D             call    LET             ; Set up initial index
1331+ 1B62 C1                   pop     BC              ; Drop RETurn address
1332+ 1B63 E5                   push    HL              ; Save code string address
1333+ 1B64 CD BC 1D             call    DATA            ; Get next statement address
1334+ 1B67 22 AE 81             ld      (LOOPST),HL     ; Save it for start of loop
1335+ 1B6A 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1336+ 1B6D 39                   add     HL,SP           ; Point to it
1337+ 1B6E CD 7D 16     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1338+ 1B71 D1                   pop     DE              ; Get code string address
1339+ 1B72 C2 8A 1B             jp      NZ,FORFND       ; No nesting found
1340+ 1B75 09                   add     HL,BC           ; Move into "FOR" block
1341+ 1B76 D5                   push    DE              ; Save code string address
1342+ 1B77 2B                   dec     HL
1343+ 1B78 56                   ld      D,(HL)          ; Get MSB of loop statement
1344+ 1B79 2B                   dec     HL
1345+ 1B7A 5E                   ld      E,(HL)          ; Get LSB of loop statement
1346+ 1B7B 23                   inc     HL
1347+ 1B7C 23                   inc     HL
1348+ 1B7D E5                   push    HL              ; Save block address
1349+ 1B7E 2A AE 81             ld      HL,(LOOPST)     ; Get address of loop statement
1350+ 1B81 CD CC 19             call    CPDEHL          ; Compare the FOR loops
1351+ 1B84 E1                   pop     HL              ; Restore block address
1352+ 1B85 C2 6E 1B             jp      NZ,FORSLP       ; Different FORs - Find another
1353+ 1B88 D1                   pop     DE              ; Restore code string address
1354+ 1B89 F9                   ld      SP,HL           ; Remove all nested loops
1355+ 1B8A
1356+ 1B8A EB           FORFND: ex      DE,HL           ; Code string address to HL
1357+ 1B8B 0E 08                ld      C,$08
1358+ 1B8D CD AD 16             call    CHKSTK          ; Check for 8 levels of stack
1359+ 1B90 E5                   push    HL              ; Save code string address
1360+ 1B91 2A AE 81             ld      HL,(LOOPST)     ; Get first statement of loop
1361+ 1B94 E3                   ex      (SP),HL         ; Save and restore code string
1362+ 1B95 E5                   push    HL              ; Re-save code string address
1363+ 1B96 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
1364+ 1B99 E3                   ex      (SP),HL         ; Save and restore code string
1365+ 1B9A CD 9F 20             call    TSTNUM          ; Make sure it's a number
1366+ 1B9D CD D2 19             call    CHKSYN          ; Make sure "TO" is next
1367+ 1BA0 B7                   defb    ZTO             ; "TO" token
1368+ 1BA1 CD 9C 20             call    GETNUM          ; Get "TO" expression value
1369+ 1BA4 E5                   push    HL              ; Save code string address
1370+ 1BA5 CD F5 2E             call    BCDEFP          ; Move "TO" value to BCDE
1371+ 1BA8 E1                   pop     HL              ; Restore code string address
1372+ 1BA9 C5                   push    BC              ; Save "TO" value in block
1373+ 1BAA D5                   push    DE
1374+ 1BAB 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1375+ 1BAE 51                   ld      D,C             ; C=0
1376+ 1BAF 5A                   ld      E,D             ; D=0
1377+ 1BB0 7E                   ld      A,(HL)          ; Get next byte in code string
1378+ 1BB1 FE BC                cp      ZSTEP           ; See if "STEP" is stated
1379+ 1BB3 3E 01                ld      A,$01           ; Sign of step = 1
1380+ 1BB5 C2 C6 1B             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1381+ 1BB8 CD 13 1C             call    GETCHR          ; Jump over "STEP" token
1382+ 1BBB CD 9C 20             call    GETNUM          ; Get step value
1383+ 1BBE E5                   push    HL              ; Save code string address
1384+ 1BBF CD F5 2E             call    BCDEFP          ; Move STEP to BCDE
1385+ 1BC2 CD A9 2E             call    TSTSGN          ; Test sign of FPREG
1386+ 1BC5 E1                   pop     HL              ; Restore code string address
1387+ 1BC6 C5           SAVSTP: push    BC              ; Save the STEP value in block
1388+ 1BC7 D5                   push    DE
1389+ 1BC8 F5                   push    AF              ; Save sign of STEP
1390+ 1BC9 33                   inc     SP              ; Don't save flags
1391+ 1BCA E5                   push    HL              ; Save code string address
1392+ 1BCB 2A B5 81             ld      HL,(BRKLIN)     ; Get address of index variable
1393+ 1BCE E3                   ex      (SP),HL         ; Save and restore code string
1394+ 1BCF 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1395+ 1BD1 C5                   push    BC              ; Save it
1396+ 1BD2 33                   inc     SP              ; Don't save C
1397+ 1BD3
1398+ 1BD3 CD 3E 1C     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1399+ 1BD6 22 B5 81             ld      (BRKLIN),HL     ; Save code address for break
1400+ 1BD9 7E                   ld      A,(HL)          ; Get next byte in code string
1401+ 1BDA FE 3A                cp      ':'             ; Multi statement line?
1402+ 1BDC CA F3 1B             jp      Z,EXCUTE        ; Yes - Execute it
1403+ 1BDF B7                   or      A               ; End of line?
1404+ 1BE0 C2 F0 16             jp      NZ,SNERR        ; No - Syntax error
1405+ 1BE3 23                   inc     HL              ; Point to address of next line
1406+ 1BE4 7E                   ld      A,(HL)          ; Get LSB of line pointer
1407+ 1BE5 23                   inc     HL
1408+ 1BE6 B6                   or      (HL)            ; Is it zero (End of prog)?
1409+ 1BE7 CA 65 1C             jp      Z,ENDPRG        ; Yes - Terminate execution
1410+ 1BEA 23                   inc     HL              ; Point to line number
1411+ 1BEB 5E                   ld      E,(HL)          ; Get LSB of line number
1412+ 1BEC 23                   inc     HL
1413+ 1BED 56                   ld      D,(HL)          ; Get MSB of line number
1414+ 1BEE EB                   ex      DE,HL           ; Line number to HL
1415+ 1BEF 22 AF 80             ld      (LINEAT),HL     ; Save as current line number
1416+ 1BF2 EB                   ex      DE,HL           ; Line number back to DE
1417+ 1BF3 CD 13 1C     EXCUTE: call    GETCHR          ; Get key word
1418+ 1BF6 11 D3 1B             ld      DE,RUNCNT       ; Where to RETurn to
1419+ 1BF9 D5                   push    DE              ; Save for RETurn
1420+ 1BFA C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1421+ 1BFB
1422+ 1BFB D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1423+ 1BFD DA D3 1D             jp      C,LET           ; No - try to assign it
1424+ 1C00 FE 36                cp      ZNEW+1-ZEND     ; END to NEW ?
1425+ 1C02 D2 F0 16             jp      NC,SNERR        ; Not a key word - ?SN Error
1426+ 1C05 07                   rlca                    ; Double it
1427+ 1C06 4F                   ld      C,A             ; BC = Offset into table
1428+ 1C07 06 00                ld      B,0
1429+ 1C09 EB                   ex      DE,HL           ; Save code string address
1430+ 1C0A 21 FF 14             ld      HL,WORDTB       ; Keyword address table
1431+ 1C0D 09                   add     HL,BC           ; Point to routine address
1432+ 1C0E 4E                   ld      C,(HL)          ; Get LSB of routine address
1433+ 1C0F 23                   inc     HL
1434+ 1C10 46                   ld      B,(HL)          ; Get MSB of routine address
1435+ 1C11 C5                   push    BC              ; Save routine address
1436+ 1C12 EB                   ex      DE,HL           ; Restore code string address
1437+ 1C13
1438+ 1C13              ; get a char from input buffer: exit with NC if character found is
1439+ 1C13              ; not a number; exit with Z if nothing found; char is into A
1440+ 1C13 23           GETCHR: inc     HL              ; Point to next character
1441+ 1C14 7E                   ld      A,(HL)          ; Get next code string byte
1442+ 1C15 FE 3A                cp      ':'             ; Z if ':'
1443+ 1C17 D0                   ret     NC              ; NC if > "9"
1444+ 1C18 FE 20                cp      SPC
1445+ 1C1A CA 13 1C             jp      Z,GETCHR        ; Skip over spaces
1446+ 1C1D FE 30                cp      '0'
1447+ 1C1F 3F                   ccf                     ; NC if < '0'
1448+ 1C20 3C                   inc     A               ; Test for zero - Leave carry
1449+ 1C21 3D                   dec     A               ; Z if Null
1450+ 1C22 C9                   ret
1451+ 1C23
1452+ 1C23 EB           RESTOR: ex      DE,HL           ; Save code string address
1453+ 1C24 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1454+ 1C27 CA 38 1C             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1455+ 1C2A EB                   ex      DE,HL           ; Restore code string address
1456+ 1C2B CD E3 1C             call    ATOH            ; Get line number to DE
1457+ 1C2E E5                   push    HL              ; Save code string address
1458+ 1C2F CD F6 17             call    SRCHLN          ; Search for line number in DE
1459+ 1C32 60                   ld      H,B             ; HL = Address of line
1460+ 1C33 69                   ld      L,C
1461+ 1C34 D1                   pop     DE              ; Restore code string address
1462+ 1C35 D2 92 1D             jp      NC,ULERR        ; ?UL Error if not found
1463+ 1C38 2B           RESTNL: dec     HL              ; Byte before DATA statement
1464+ 1C39 22 2A 82     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1465+ 1C3C EB                   ex      DE,HL           ; Restore code string address
1466+ 1C3D C9                   ret
1467+ 1C3E
1468+ 1C3E
1469+ 1C3E              ; check if CTRL-C is into input buffer
1470+ 1C3E DF           TSTBRK: rst     $18             ; Check input status
1471+ 1C3F C8                   ret     Z               ; No key, go back
1472+ 1C40 D7                   rst     $10             ; Get the key into A
1473+ 1C41 FE 1B                cp      ESC             ; Escape key?
1474+ 1C43 28 11                jr      Z,BRK           ; Yes, break
1475+ 1C45 FE 03                cp      CTRLC           ; <Ctrl-C>
1476+ 1C47 28 0D                jr      Z,BRK           ; Yes, break
1477+ 1C49 FE 13                cp      CTRLS           ; Stop scrolling?
1478+ 1C4B C0                   ret     NZ              ; Other key, ignore
1479+ 1C4C
1480+ 1C4C
1481+ 1C4C              ; wait for a key while listing
1482+ 1C4C D7           STALL:  rst     $10             ; Wait for key
1483+ 1C4D FE 11                cp      CTRLQ           ; Resume scrolling?
1484+ 1C4F C8                   ret     Z               ; Release the chokehold
1485+ 1C50 FE 03                cp      CTRLC           ; Second break?
1486+ 1C52 28 07                jr      Z,STOP          ; Break during hold exits prog
1487+ 1C54 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1488+ 1C56
1489+ 1C56 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1490+ 1C58 32 A9 80             ld      (BRKFLG),A      ; Store it
1491+ 1C5B
1492+ 1C5B C0           STOP:   ret     NZ              ; Exit if anything else
1493+ 1C5C F6                   defb    $F6             ; Flag "STOP"
1494+ 1C5D C0           PEND:   ret     NZ              ; Exit if anything else
1495+ 1C5E 22 B5 81             ld      (BRKLIN),HL     ; Save point of break
1496+ 1C61 21                   defb    $21             ; Skip "OR 11111111B"
1497+ 1C62 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1498+ 1C64 C1                   pop     BC              ; Return not needed and more
1499+ 1C65 2A AF 80     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1500+ 1C68 F5                   push    AF              ; Save STOP / END status
1501+ 1C69 7D                   ld      A,L             ; Is it direct break?
1502+ 1C6A A4                   and     H
1503+ 1C6B 3C                   inc     A               ; Line is -1 if direct break
1504+ 1C6C CA 78 1C             jp      Z,NOLIN         ; Yes - No line number
1505+ 1C6F 22 B9 81             ld      (ERRLIN),HL     ; Save line of break
1506+ 1C72 2A B5 81             ld      HL,(BRKLIN)     ; Get point of break
1507+ 1C75 22 BB 81             ld      (CONTAD),HL     ; Save point to CONTinue
1508+ 1C78 AF           NOLIN:  xor     A
1509+ 1C79 32 A5 80             ld      (CTLOFG),A      ; Enable output
1510+ 1C7C CD CE 1E             call    STTLIN          ; Start a new line
1511+ 1C7F F1                   pop     AF              ; Restore STOP / END status
1512+ 1C80 21 73 16             ld      HL,BRKMSG       ; "Break" message
1513+ 1C83 C2 89 1C             jp      NZ,ERRINT       ; "in line" wanted?
1514+ 1C86 C3 4A 17             jp      PRNTOK          ; Go to command mode
1515+ 1C89 CD CA 16     ERRINT: call    EXITGM          ; exit from graphics mode
1516+ 1C8C C3 28 17             jp      ERRIN           ; print message
1517+ 1C8F
1518+ 1C8F
1519+ 1C8F              ; CONTinue after a break/error
1520+ 1C8F 21 FF FF     CONT:   ld      HL,-1           ; reset...
1521+ 1C92 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1522+ 1C95 2A BB 81             ld      HL,(CONTAD)     ; Get CONTinue address
1523+ 1C98 7C                   ld      A,H             ; Is it zero?
1524+ 1C99 B5                   or      L
1525+ 1C9A 1E 20                ld      E,CN            ; ?CN Error
1526+ 1C9C CA 04 17             jp      Z,ERROR         ; Yes - output "?CN Error"
1527+ 1C9F EB                   ex      DE,HL           ; Save code string address
1528+ 1CA0 2A B9 81             ld      HL,(ERRLIN)     ; Get line of last break
1529+ 1CA3 22 AF 80             ld      (LINEAT),HL     ; Set up current line number
1530+ 1CA6 EB                   ex      DE,HL           ; Restore code string address
1531+ 1CA7 C9                   ret                     ; CONTinue where left off
1532+ 1CA8
1533+ 1CA8 E5           ACCSUM: push    HL              ; Save address in array
1534+ 1CA9 2A A6 80             ld      HL,(CHKSUM)     ; Get check sum
1535+ 1CAC 06 00                ld      B,$00           ; BC - Value of byte
1536+ 1CAE 4F                   ld      C,A
1537+ 1CAF 09                   add     HL,BC           ; Add byte to check sum
1538+ 1CB0 22 A6 80             ld      (CHKSUM),HL     ; Re-save check sum
1539+ 1CB3 E1                   pop     HL              ; Restore address in array
1540+ 1CB4 C9                   ret
1541+ 1CB5
1542+ 1CB5 7E           CHKLTR: ld      A,(HL)          ; Get byte
1543+ 1CB6 FE 41                cp      'A'             ; < 'a' ?
1544+ 1CB8 D8                   ret     C               ; Carry set if not letter
1545+ 1CB9 FE 5B                cp      'Z'+1           ; > 'z' ?
1546+ 1CBB 3F                   ccf
1547+ 1CBC C9                   ret                     ; Carry set if not letter
1548+ 1CBD
1549+ 1CBD CD 13 1C     FPSINT: call    GETCHR          ; Get next character
1550+ 1CC0 CD 9C 20     POSINT: call    GETNUM          ; Get integer 0 to 32767
1551+ 1CC3 CD A9 2E     DEPINT: call    TSTSGN          ; Test sign of FPREG
1552+ 1CC6 FA DE 1C             jp      M,FCERR         ; Negative - ?FC Error
1553+ 1CC9 3A 35 82     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1554+ 1CCC FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1555+ 1CCE DA 51 2F             jp      C,FPINT         ; Yes - convert it
1556+ 1CD1 01 80 90             ld      BC,$9080        ; BCDE = -32768
1557+ 1CD4 11 00 00             ld      DE,$0000
1558+ 1CD7 E5                   push    HL              ; Save code string address
1559+ 1CD8 CD 24 2F             call    CMPNUM          ; Compare FPREG with BCDE
1560+ 1CDB E1                   pop     HL              ; Restore code string address
1561+ 1CDC 51                   ld      D,C             ; MSB to D
1562+ 1CDD C8                   ret     Z               ; Return if in range
1563+ 1CDE 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1564+ 1CE0 C3 04 17             jp      ERROR           ; Output error-
1565+ 1CE3
1566+ 1CE3
1567+ 1CE3              ; convert a number in ASCII chars into an integer into DE
1568+ 1CE3 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1569+ 1CE4 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1570+ 1CE7 CD 13 1C     GTLNLP: call    GETCHR          ; Get next character
1571+ 1CEA D0                   ret     NC              ; Exit if not a digit
1572+ 1CEB E5                   push    HL              ; Save code string address
1573+ 1CEC F5                   push    AF              ; Save digit
1574+ 1CED 21 98 19             ld      HL,65529/10     ; Largest number 65529
1575+ 1CF0 CD CC 19             call    CPDEHL          ; Number in range?
1576+ 1CF3 DA F0 16             jp      C,SNERR         ; No - ?SN Error
1577+ 1CF6 62                   ld      H,D             ; HL = Number
1578+ 1CF7 6B                   ld      L,E
1579+ 1CF8 19                   add     HL,DE           ; Times 2
1580+ 1CF9 29                   add     HL,HL           ; Times 4
1581+ 1CFA 19                   add     HL,DE           ; Times 5
1582+ 1CFB 29                   add     HL,HL           ; Times 10
1583+ 1CFC F1                   pop     AF              ; Restore digit
1584+ 1CFD D6 30                sub     '0'             ; Make it 0 to 9
1585+ 1CFF 5F                   ld      E,A             ; DE = Value of digit
1586+ 1D00 16 00                ld      D,0
1587+ 1D02 19                   add     HL,DE           ; Add to number
1588+ 1D03 EB                   ex      DE,HL           ; Number to DE
1589+ 1D04 E1                   pop     HL              ; Restore code string address
1590+ 1D05 C3 E7 1C             jp      GTLNLP          ; Go to next character
1591+ 1D08
1592+ 1D08 CA 26 18     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1593+ 1D0B CD 9C 20             call    GETNUM          ; Evaluate a number
1594+ 1D0E CD C9 1C             call    DEINT           ; Get integer -32768 to 32767 into DE
1595+ 1D11 2B                   dec     HL              ; Cancel increment
1596+ 1D12 CD 13 1C             call    GETCHR          ; Get next character
1597+ 1D15 E5                   push    HL              ; Save code string address
1598+ 1D16 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
1599+ 1D19 CA 31 1D             jp      Z,STORED        ; No value given - Use stored
1600+ 1D1C E1                   pop     HL              ; Restore code string address
1601+ 1D1D CD D2 19             call    CHKSYN          ; Check for comma
1602+ 1D20 2C                   defb    ','
1603+ 1D21 D5                   push    DE              ; Save number
1604+ 1D22 CD 9C 20             call    GETNUM          ; Evaluate a number
1605+ 1D25 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767 into DE
1606+ 1D28 2B                   dec     HL              ; Cancel increment
1607+ 1D29 CD 13 1C             call    GETCHR          ; Get next character
1608+ 1D2C C2 F0 16             jp      NZ,SNERR        ; ?SN Error if more on line
1609+ 1D2F E3                   ex      (SP),HL         ; Save code string address
1610+ 1D30 EB                   ex      DE,HL           ; Number to DE
1611+ 1D31 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1612+ 1D32 93                   sub     E               ; Subtract LSB of string space
1613+ 1D33 5F                   ld      E,A             ; Save LSB
1614+ 1D34 7C                   ld      A,H             ; Get MSB of new RAM top
1615+ 1D35 9A                   sbc     A,D             ; Subtract MSB of string space
1616+ 1D36 57                   ld      D,A             ; Save MSB
1617+ 1D37 DA C5 16             jp      C,OMERR         ; ?OM Error if not enough mem
1618+ 1D3A E5                   push    HL              ; Save RAM top
1619+ 1D3B 2A 24 82             ld      HL,(PROGND)     ; Get program end
1620+ 1D3E 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1621+ 1D41 09                   add     HL,BC           ; Get lowest address
1622+ 1D42 CD CC 19             call    CPDEHL          ; Enough memory?
1623+ 1D45 D2 C5 16             jp      NC,OMERR        ; No - ?OM Error
1624+ 1D48 EB                   ex      DE,HL           ; RAM top to HL
1625+ 1D49 22 AD 80             ld      (STRSPC),HL     ; Set new string space
1626+ 1D4C E1                   pop     HL              ; End of memory to use
1627+ 1D4D 22 96 81             ld      (LSTRAM),HL     ; Set new top of RAM
1628+ 1D50 E1                   pop     HL              ; Restore code string address
1629+ 1D51 C3 26 18             jp      INTVAR          ; Initialise variables
1630+ 1D54
1631+ 1D54 E5           RUN:    push    HL              ; store HL
1632+ 1D55 21 FF FF             ld      HL,-1           ; reset...
1633+ 1D58 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1634+ 1D5B E1                   pop     HL              ; retrieve HL
1635+ 1D5C CA 22 18             jp      Z,RUNFST        ; RUN from start if just RUN
1636+ 1D5F CD 26 18             call    INTVAR          ; Initialise variables
1637+ 1D62 01 D3 1B             ld      BC,RUNCNT       ; Execution driver loop
1638+ 1D65 C3 78 1D             jp      RUNLIN          ; RUN from line number
1639+ 1D68
1640+ 1D68 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1641+ 1D6A CD AD 16             call    CHKSTK          ; Check for 3 levels of stack
1642+ 1D6D C1                   pop     BC              ; Get return address
1643+ 1D6E E5                   push    HL              ; Save code string for RETURN
1644+ 1D6F E5                   push    HL              ; And for GOSUB routine
1645+ 1D70 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1646+ 1D73 E3                   ex      (SP),HL         ; Into stack - Code string out
1647+ 1D74 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1648+ 1D76 F5                   push    AF              ; Save token
1649+ 1D77 33                   inc     SP              ; Don't save flags
1650+ 1D78
1651+ 1D78 C5           RUNLIN: push    BC              ; Save return address
1652+ 1D79 CD E3 1C     GOTO:   call    ATOH            ; ASCII number to DE binary
1653+ 1D7C CD BE 1D             call    REM             ; Get end of line
1654+ 1D7F E5                   push    HL              ; Save end of line
1655+ 1D80 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1656+ 1D83 CD CC 19             call    CPDEHL          ; Line after current?
1657+ 1D86 E1                   pop     HL              ; Restore end of line
1658+ 1D87 23                   inc     HL              ; Start of next line
1659+ 1D88 DC F9 17             call    C,SRCHLP        ; Line is after current line
1660+ 1D8B D4 F6 17             call    NC,SRCHLN       ; Line is before current line
1661+ 1D8E 60                   ld      H,B             ; Set up code string address
1662+ 1D8F 69                   ld      L,C
1663+ 1D90 2B                   dec     HL              ; Incremented after
1664+ 1D91 D8                   ret     C               ; Line found
1665+ 1D92 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1666+ 1D94 C3 04 17             jp      ERROR           ; Output error message
1667+ 1D97
1668+ 1D97 C0           RETURN: ret     NZ              ; Return if not just RETURN
1669+ 1D98 16 FF                ld      D,-1            ; Flag "GOSUB" search
1670+ 1D9A CD 79 16             call    BAKSTK          ; Look "GOSUB" block
1671+ 1D9D F9                   ld      SP,HL           ; Kill all FORs in subroutine
1672+ 1D9E FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1673+ 1DA0 1E 04                ld      E,RG            ; ?RG Error
1674+ 1DA2 C2 04 17             jp      NZ,ERROR        ; Error if no "GOSUB" found
1675+ 1DA5 E1                   pop     HL              ; Get RETURN line number
1676+ 1DA6 22 AF 80             ld      (LINEAT),HL     ; Save as current
1677+ 1DA9 23                   inc     HL              ; Was it from direct statement?
1678+ 1DAA 7C                   ld      A,H
1679+ 1DAB B5                   or      L               ; Return to line
1680+ 1DAC C2 B6 1D             jp      NZ,RETLIN       ; No - Return to line
1681+ 1DAF 3A B3 81             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1682+ 1DB2 B7                   or      A               ; If so buffer is corrupted
1683+ 1DB3 C2 49 17             jp      NZ,POPNOK       ; Yes - Go to command mode
1684+ 1DB6 21 D3 1B     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1685+ 1DB9 E3                   ex      (SP),HL         ; Into stack - Code string out
1686+ 1DBA 3E                   defb    $3E             ; Skip "pop HL"
1687+ 1DBB E1           NXTDTA: pop     HL              ; Restore code string address
1688+ 1DBC
1689+ 1DBC 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1690+ 1DBE 0E 00        REM:    ld      C,$00           ; 00  End of statement
1691+ 1DC0 06 00                ld      B,$00
1692+ 1DC2 79           NXTSTL: ld      A,C             ; Statement and byte
1693+ 1DC3 48                   ld      C,B
1694+ 1DC4 47                   ld      B,A             ; Statement end byte
1695+ 1DC5 7E           NXTSTT: ld      A,(HL)          ; Get byte
1696+ 1DC6 B7                   or      A               ; End of line?
1697+ 1DC7 C8                   ret     Z               ; Yes - Exit
1698+ 1DC8 B8                   cp      B               ; End of statement?
1699+ 1DC9 C8                   ret     Z               ; Yes - Exit
1700+ 1DCA 23                   inc     HL              ; Next byte
1701+ 1DCB FE 22                cp      $22             ; '"'             ; Literal string?
1702+ 1DCD CA C2 1D             jp      Z,NXTSTL        ; Yes - Look for another '"'
1703+ 1DD0 C3 C5 1D             jp      NXTSTT          ; Keep looking
1704+ 1DD3
1705+ 1DD3 CD AB 22     LET:    call    GETVAR          ; Get variable name
1706+ 1DD6 CD D2 19             call    CHKSYN          ; Make sure "=" follows
1707+ 1DD9 C8                   defb    ZEQUAL          ; "=" token
1708+ 1DDA D5                   push    DE              ; Save address of variable
1709+ 1DDB 3A 94 81             ld      A,(TYPE)        ; Get data type
1710+ 1DDE F5                   push    AF              ; Save type
1711+ 1DDF CD AE 20             call    EVAL            ; Evaluate expression
1712+ 1DE2 F1                   pop     AF              ; Restore type
1713+ 1DE3 E3                   ex      (SP),HL         ; Save code - Get var addr
1714+ 1DE4 22 B5 81             ld      (BRKLIN),HL     ; Save address of variable
1715+ 1DE7 1F                   rra                     ; Adjust type
1716+ 1DE8 CD A1 20             call    CHKTYP          ; Check types are the same
1717+ 1DEB CA 26 1E             jp      Z,LETNUM        ; Numeric - Move value
1718+ 1DEE E5           LETSTR: push    HL              ; Save address of string var
1719+ 1DEF 2A 32 82             ld      HL,(FPREG)      ; Pointer to string entry
1720+ 1DF2 E5                   push    HL              ; Save it on stack
1721+ 1DF3 23                   inc     HL              ; Skip over length
1722+ 1DF4 23                   inc     HL
1723+ 1DF5 5E                   ld      E,(HL)          ; LSB of string address
1724+ 1DF6 23                   inc     HL
1725+ 1DF7 56                   ld      D,(HL)          ; MSB of string address
1726+ 1DF8 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1727+ 1DFB CD CC 19             call    CPDEHL          ; Is string before program?
1728+ 1DFE D2 15 1E             jp      NC,CRESTR       ; Yes - Create string entry
1729+ 1E01 2A AD 80             ld      HL,(STRSPC)     ; Point to string space
1730+ 1E04 CD CC 19             call    CPDEHL          ; Is string literal in program?
1731+ 1E07 D1                   pop     DE              ; Restore address of string
1732+ 1E08 D2 1D 1E             jp      NC,MVSTPT       ; Yes - Set up pointer
1733+ 1E0B 21 A6 81             ld      HL,TMPSTR       ; Temporary string pool
1734+ 1E0E CD CC 19             call    CPDEHL          ; Is string in temporary pool?
1735+ 1E11 D2 1D 1E             jp      NC,MVSTPT       ; No - Set up pointer
1736+ 1E14 3E                   defb    $3E             ; Skip "pop DE"
1737+ 1E15 D1           CRESTR: pop     DE              ; Restore address of string
1738+ 1E16 CD 05 27             call    BAKTMP          ; Back to last tmp-str entry
1739+ 1E19 EB                   ex      DE,HL           ; Address of string entry
1740+ 1E1A CD 3E 25             call    SAVSTR          ; Save string in string area
1741+ 1E1D CD 05 27     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1742+ 1E20 E1                   pop     HL              ; Get string pointer
1743+ 1E21 CD 04 2F             call    DETHL4          ; Move string pointer to var
1744+ 1E24 E1                   pop     HL              ; Restore code string address
1745+ 1E25 C9                   ret
1746+ 1E26
1747+ 1E26 E5           LETNUM: push    HL              ; Save address of variable
1748+ 1E27 CD 01 2F             call    FPTHL           ; Move value to variable
1749+ 1E2A D1                   pop     DE              ; Restore address of variable
1750+ 1E2B E1                   pop     HL              ; Restore code string address
1751+ 1E2C C9                   ret
1752+ 1E2D
1753+ 1E2D CD 22 29     ON:     call    GETINT          ; Get integer 0-255
1754+ 1E30 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1755+ 1E31 47                   ld      B,A             ; Save in B
1756+ 1E32 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1757+ 1E34 CA 3C 1E             jp      Z,ONGO          ; Yes - Find line number
1758+ 1E37 CD D2 19             call    CHKSYN          ; Make sure it's "GOTO"
1759+ 1E3A 88                   defb    ZGOTO           ; "GOTO" token
1760+ 1E3B 2B                   dec     HL              ; Cancel increment
1761+ 1E3C 4B           ONGO:   ld      C,E             ; Integer of branch value
1762+ 1E3D 0D           ONGOLP: dec     C               ; Count branches
1763+ 1E3E 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1764+ 1E3F CA FB 1B             jp      Z,ONJMP         ; Go to that line if right one
1765+ 1E42 CD E4 1C             call    GETLN           ; Get line number to DE
1766+ 1E45 FE 2C                cp      ','             ; Another line number?
1767+ 1E47 C0                   ret     NZ              ; No - Drop through
1768+ 1E48 C3 3D 1E             jp      ONGOLP          ; Yes - loop
1769+ 1E4B
1770+ 1E4B CD AE 20     IF:     call    EVAL            ; Evaluate expression
1771+ 1E4E 7E                   ld      A,(HL)          ; Get token
1772+ 1E4F FE 88                cp      ZGOTO           ; "GOTO" token?
1773+ 1E51 CA 59 1E             jp      Z,IFGO          ; Yes - Get line
1774+ 1E54 CD D2 19             call    CHKSYN          ; Make sure it's "THEN"
1775+ 1E57 BA                   defb    ZTHEN           ; "THEN" token
1776+ 1E58 2B                   dec     HL              ; Cancel increment
1777+ 1E59 CD 9F 20     IFGO:   call    TSTNUM          ; Make sure it's numeric
1778+ 1E5C CD A9 2E             call    TSTSGN          ; Test state of expression
1779+ 1E5F CA 6B 1E             jp      Z,IF1           ; False - Jump over
1780+ 1E62 CD 13 1C     IF0:    call    GETCHR          ; Get next character
1781+ 1E65 DA 79 1D             jp      C,GOTO          ; Number - GOTO that line
1782+ 1E68 C3 FA 1B             jp      IFJMP           ; Otherwise do statement
1783+ 1E6B 0E AE        IF1:    ld      C,ZELSE
1784+ 1E6D CD C0 1D             call    REM+2           ; check statement
1785+ 1E70 B7                   or      A               ; end of line?
1786+ 1E71 C8                   ret     Z               ; yes, leave
1787+ 1E72 FE AE                cp      ZELSE
1788+ 1E74 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1789+ 1E76 C3 62 1E             jp      IF0             ; return to IF
1790+ 1E79
1791+ 1E79
1792+ 1E79 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1793+ 1E7A CD 13 1C             call    GETCHR          ; Get next character
1794+ 1E7D CA E0 1E     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1795+ 1E80 C8           PRNTLP: ret     Z               ; End of list - Exit
1796+ 1E81 FE B6                cp      ZTAB            ; "TAB(" token?
1797+ 1E83 CA 08 1F             jp      Z,DOTAB         ; Yes - Do TAB routine
1798+ 1E86 FE B9                cp      ZSPC            ; "SPC(" token?
1799+ 1E88 CA 08 1F             jp      Z,DOTAB         ; Yes - Do SPC routine
1800+ 1E8B E5                   push    HL              ; Save code string address
1801+ 1E8C FE 2C                cp      ','             ; Comma?
1802+ 1E8E CA EF 1E             jp      Z,DOCOM         ; Yes - Move to next zone
1803+ 1E91 FE 3B                cp      ';'             ; Semi-colon?
1804+ 1E93 CA 2C 1F             jp      Z,NEXITM        ; Do semi-colon routine
1805+ 1E96 C1                   pop     BC              ; Code string address to BC
1806+ 1E97 CD AE 20             call    EVAL            ; Evaluate expression
1807+ 1E9A E5                   push    HL              ; Save code string address
1808+ 1E9B 3A 94 81             ld      A,(TYPE)        ; Get variable type
1809+ 1E9E B7                   or      A               ; Is it a string variable?
1810+ 1E9F C2 C7 1E             jp      NZ,PRNTST       ; Yes - Output string contents
1811+ 1EA2 CD 4E 30             call    NUMASC          ; Convert number to text
1812+ 1EA5 CD 62 25             call    CRTST           ; Create temporary string
1813+ 1EA8 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1814+ 1EAA 2A 32 82             ld      HL,(FPREG)      ; Get length of output
1815+ 1EAD 34                   inc     (HL)            ; Plus 1 for the space
1816+ 1EAE 2A 32 82             ld      HL,(FPREG)      ; < Not needed >
1817+ 1EB1 3A A2 80             ld      A,(LWIDTH)      ; Get width of line
1818+ 1EB4 47                   ld      B,A             ; To B
1819+ 1EB5 04                   inc     B               ; Width 255 (No limit)?
1820+ 1EB6 CA C3 1E             jp      Z,PRNTNB        ; Yes - Output number string
1821+ 1EB9 04                   inc     B               ; Adjust it
1822+ 1EBA 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1823+ 1EBD 86                   add     A,(HL)          ; Add length of string
1824+ 1EBE 3D                   dec     A               ; Adjust it
1825+ 1EBF B8                   cp      B               ; Will output fit on this line?
1826+ 1EC0 D4 E0 1E             call    NC,PRNTCRLF     ; No - CRLF first
1827+ 1EC3 CD A7 25     PRNTNB: call    PRS1            ; Output string at (HL)
1828+ 1EC6 AF                   xor     A               ; Skip call by setting 'z' flag
1829+ 1EC7 C4 A7 25     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1830+ 1ECA E1                   pop     HL              ; Restore code string address
1831+ 1ECB C3 79 1E             jp      MRPRNT          ; See if more to PRINT
1832+ 1ECE
1833+ 1ECE 3A 92 81     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1834+ 1ED1 B7                   or      A               ; Already at start?
1835+ 1ED2 C8                   ret     Z               ; Yes - Do nothing
1836+ 1ED3 C3 E0 1E             jp      PRNTCRLF        ; Start a new line
1837+ 1ED6
1838+ 1ED6 AF           ENDINP: xor     A
1839+ 1ED7 32 18 82             ld      (KBDNPT),A      ; char is not from keyboard
1840+ 1EDA 77                   ld      (HL),A          ; Mark end of buffer
1841+ 1EDB 21 37 81             ld      HL,BUFFER-1     ; Point to buffer
1842+ 1EDE 18 0A                jr      CNTEND
1843+ 1EE0 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1844+ 1EE2 CD DD 19             call    OUTC            ; Output character
1845+ 1EE5 3E 0A                ld      A,LF            ; Load a LF
1846+ 1EE7 CD DD 19             call    OUTC            ; Output character
1847+ 1EEA AF           CNTEND: xor     A               ; Set to position 0
1848+ 1EEB 32 92 81             ld      (CURPOS),A      ; Store it
1849+ 1EEE C9                   ret                     ; return to caller
1850+ 1EEF
1851+ 1EEF 3A A3 80     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1852+ 1EF2 47                   ld      B,A             ; Save in B
1853+ 1EF3 3A D3 81             ld      A,(SCR_CURS_X)  ; Get current position
1854+ 1EF6 B8                   cp      B               ; Within the limit?
1855+ 1EF7 D4 E0 1E             call    NC,PRNTCRLF     ; No - output CRLF
1856+ 1EFA D2 2C 1F             jp      NC,NEXITM       ; Get next item
1857+ 1EFD D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1858+ 1EFF D2 FD 1E             jp      NC,ZONELP       ; Repeat if more zones
1859+ 1F02 2F                   cpl                     ; Number of null chars to output
1860+ 1F03 0E 00                ld      C,NLLCR         ; null char
1861+ 1F05 C3 22 1F             jp      ASPCS           ; Output them
1862+ 1F08
1863+ 1F08 F5           DOTAB:  push    AF              ; Save token
1864+ 1F09 CD 1F 29             call    FNDNUM          ; Evaluate expression
1865+ 1F0C CD D2 19             call    CHKSYN          ; Make sure ")" follows
1866+ 1F0F 29                   defb    ')'
1867+ 1F10 2B                   dec     HL              ; Back space on to ")"
1868+ 1F11 F1                   pop     AF              ; Restore token
1869+ 1F12 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1870+ 1F14 D6 B9                sub     ZSPC            ; Was it "SPC(" ?
1871+ 1F16 E5                   push    HL              ; Save code string address
1872+ 1F17 CA 1D 1F             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1873+ 1F1A 3A D3 81             ld      A,(SCR_CURS_X)  ; Get current X position
1874+ 1F1D 2F           DOSPC:  cpl                     ; Number of spaces to print to
1875+ 1F1E 83                   add     A,E             ; Total number to print
1876+ 1F1F D2 2C 1F             jp      NC,NEXITM       ; TAB < Current POS(X)
1877+ 1F22 3C           ASPCS:  inc     A               ; Output A spaces
1878+ 1F23 47                   ld      B,A             ; Save number to print
1879+ 1F24 79           SPCLP:  ld      A,C             ; char to print
1880+ 1F25 CD DD 19             call    OUTC            ; Output character in A
1881+ 1F28 05                   dec     B               ; Count them
1882+ 1F29 C2 24 1F             jp      NZ,SPCLP        ; Repeat if more
1883+ 1F2C E1           NEXITM: pop     HL              ; Restore code string address
1884+ 1F2D CD 13 1C             call    GETCHR          ; Get next character
1885+ 1F30 C3 80 1E             jp      PRNTLP          ; More to print
1886+ 1F33
1887+ 1F33 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1887+ 1F37 6F 20 66 72
1887+ 1F3B 6F 6D 20 73
1887+ 1F3F 74 61 72 74
1887+ 1F43 0D 00
1888+ 1F45
1889+ 1F45 3A B4 81     BADINP: ld      A,(READFG)      ; READ or INPUT?
1890+ 1F48 B7                   or      A
1891+ 1F49 C2 EA 16             jp      NZ,DATSNR       ; READ - ?SN Error
1892+ 1F4C C1                   pop     BC              ; Throw away code string addr
1893+ 1F4D 21 33 1F             ld      HL,REDO         ; "Redo from start" message
1894+ 1F50 CD A4 25             call    PRS             ; Output string
1895+ 1F53 C3 55 18             jp      DOAGN           ; Do last INPUT again
1896+ 1F56
1897+ 1F56 CD 0F 25     INPUT:  call    IDTEST          ; Test for illegal direct
1898+ 1F59 7E                   ld      A,(HL)          ; Get character after "INPUT"
1899+ 1F5A FE 22                cp      $22             ; '"' ; Is there a prompt string?
1900+ 1F5C 3E 00                ld      A,$00           ; Clear A and leave flags
1901+ 1F5E 32 A5 80             ld      (CTLOFG),A      ; Enable output
1902+ 1F61 C2 70 1F             jp      NZ,NOPMPT       ; No prompt - get input
1903+ 1F64 CD 63 25             call    QTSTR           ; Get string terminated by '"'
1904+ 1F67 CD D2 19             call    CHKSYN          ; Check for ';' after prompt
1905+ 1F6A 3B                   defb    ";"
1906+ 1F6B E5                   push    HL              ; Save code string address
1907+ 1F6C CD A7 25             call    PRS1            ; Output prompt string
1908+ 1F6F 3E                   defb    $3E             ; Skip "push HL"
1909+ 1F70 E5           NOPMPT: push    HL              ; Save code string address
1910+ 1F71 CD 59 18             call    PROMPT          ; Get input with "? " prompt
1911+ 1F74 C1                   pop     BC              ; Restore code string address
1912+ 1F75 DA 62 1C             jp      C,INPBRK        ; Break pressed - Exit
1913+ 1F78 23                   inc     HL              ; Next byte
1914+ 1F79 7E                   ld      A,(HL)          ; Get it
1915+ 1F7A B7                   or      A               ; End of line?
1916+ 1F7B 2B                   dec     HL              ; Back again
1917+ 1F7C C5                   push    BC              ; Re-save code string address
1918+ 1F7D CD 4F 09             call    CURSOR_OFF      ; disable cursor
1919+ 1F80 CA BB 1D             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1920+ 1F83 36 2C                ld      (HL),','        ; Store comma as separator
1921+ 1F85 C3 8D 1F             jp      NXTITM          ; Get next item
1922+ 1F88
1923+ 1F88 E5           READ:   push    HL              ; Save code string address
1924+ 1F89 2A 2A 82             ld      HL,(NXTDAT)     ; Next DATA statement
1925+ 1F8C F6                   defb    $F6             ; Flag "READ"
1926+ 1F8D AF           NXTITM: xor     A               ; Flag "INPUT"
1927+ 1F8E 32 B4 81             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1928+ 1F91 E3                   ex      (SP),HL         ; Get code str' , Save pointer
1929+ 1F92 C3 99 1F             jp      GTVLUS          ; Get values
1930+ 1F95
1931+ 1F95 CD D2 19     NEDMOR: call    CHKSYN          ; Check for comma between items
1932+ 1F98 2C                   defb    ','
1933+ 1F99 CD AB 22     GTVLUS: call    GETVAR          ; Get variable name
1934+ 1F9C E3                   ex      (SP),HL         ; Save code str" , Get pointer
1935+ 1F9D D5                   push    DE              ; Save variable address
1936+ 1F9E 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
1937+ 1F9F FE 2C                cp      ','             ; Comma?
1938+ 1FA1 CA C1 1F             jp      Z,ANTVLU        ; Yes - Get another value
1939+ 1FA4 3A B4 81             ld      A,(READFG)      ; Is it READ?
1940+ 1FA7 B7                   or      A
1941+ 1FA8 C2 2D 20             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
1942+ 1FAB 3E 3F                ld      A,'?'           ; More INPUT needed
1943+ 1FAD CD DD 19             call    OUTC            ; Output character
1944+ 1FB0 CD 59 18             call    PROMPT          ; Get INPUT with prompt
1945+ 1FB3 D1                   pop     DE              ; Variable address
1946+ 1FB4 C1                   pop     BC              ; Code string address
1947+ 1FB5 DA 62 1C             jp      C,INPBRK        ; Break pressed
1948+ 1FB8 23                   inc     HL              ; Point to next DATA byte
1949+ 1FB9 7E                   ld      A,(HL)          ; Get byte
1950+ 1FBA B7                   or      A               ; Is it zero (No input) ?
1951+ 1FBB 2B                   dec     HL              ; Back space INPUT pointer
1952+ 1FBC C5                   push    BC              ; Save code string address
1953+ 1FBD CA BB 1D             jp      Z,NXTDTA        ; Find end of buffer
1954+ 1FC0 D5                   push    DE              ; Save variable address
1955+ 1FC1 3A 94 81     ANTVLU: ld      A,(TYPE)        ; Check data type
1956+ 1FC4 B7                   or      A               ; Is it numeric?
1957+ 1FC5 CA EB 1F             jp      Z,INPBIN        ; Yes - Convert to binary
1958+ 1FC8 CD 13 1C             call    GETCHR          ; Get next character
1959+ 1FCB 57                   ld      D,A             ; Save input character
1960+ 1FCC 47                   ld      B,A             ; Again
1961+ 1FCD FE 22                cp      $22             ; '"'     ; Start of literal sting?
1962+ 1FCF CA DF 1F             jp      Z,STRENT        ; Yes - Create string entry
1963+ 1FD2 3A B4 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
1964+ 1FD5 B7                   or      A
1965+ 1FD6 57                   ld      D,A             ; Save 00 if "INPUT"
1966+ 1FD7 CA DC 1F             jp      Z,ITMSEP        ; "INPUT" - End with 00
1967+ 1FDA 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
1968+ 1FDC 06 2C        ITMSEP: ld      B,','           ; Item separator
1969+ 1FDE 2B                   dec     HL              ; Back space for DTSTR
1970+ 1FDF CD 66 25     STRENT: call    DTSTR           ; Get string terminated by D
1971+ 1FE2 EB                   ex      DE,HL           ; String address to DE
1972+ 1FE3 21 F6 1F             ld      HL,LTSTND       ; Where to go after LETSTR
1973+ 1FE6 E3                   ex      (SP),HL         ; Save HL , get input pointer
1974+ 1FE7 D5                   push    DE              ; Save address of string
1975+ 1FE8 C3 EE 1D             jp      LETSTR          ; Assign string to variable
1976+ 1FEB
1977+ 1FEB CD 13 1C     INPBIN: call    GETCHR          ; Get next character
1978+ 1FEE CD B0 2F             call    ASCTFP          ; Convert ASCII to FP number
1979+ 1FF1 E3                   ex      (SP),HL         ; Save input ptr, Get var addr
1980+ 1FF2 CD 01 2F             call    FPTHL           ; Move FPREG to variable
1981+ 1FF5 E1                   pop     HL              ; Restore input pointer
1982+ 1FF6 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
1983+ 1FF7 CD 13 1C             call    GETCHR          ; Get next character
1984+ 1FFA CA 02 20             jp      Z,MORDT         ; End of line - More needed?
1985+ 1FFD FE 2C                cp      ','             ; Another value?
1986+ 1FFF C2 45 1F             jp      NZ,BADINP       ; No - Bad input
1987+ 2002 E3           MORDT:  ex      (SP),HL         ; Get code string address
1988+ 2003 2B                   dec     HL              ; dec 'cos GETCHR INCs
1989+ 2004 CD 13 1C             call    GETCHR          ; Get next character
1990+ 2007 C2 95 1F             jp      NZ,NEDMOR       ; More needed - Get it
1991+ 200A D1                   pop     DE              ; Restore DATA pointer
1992+ 200B 3A B4 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
1993+ 200E B7                   or      A
1994+ 200F EB                   ex      DE,HL           ; DATA pointer to HL
1995+ 2010 C2 39 1C             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
1996+ 2013 D5                   push    DE              ; Save code string address
1997+ 2014 B6                   or      (HL)            ; More input given?
1998+ 2015 21 1D 20             ld      HL,EXTIG        ; "?Extra ignored" message
1999+ 2018 C4 A4 25             call    NZ,PRS          ; Output string if extra given
2000+ 201B E1                   pop     HL              ; Restore code string address
2001+ 201C C9                   ret
2002+ 201D
2003+ 201D 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2003+ 2021 72 61 20 69
2003+ 2025 67 6E 6F 72
2003+ 2029 65 64 0D 00
2004+ 202D
2005+ 202D CD BC 1D     FDTLP:  call    DATA            ; Get next statement
2006+ 2030 B7                   or      A               ; End of line?
2007+ 2031 C2 46 20             jp      NZ,FANDT        ; No - See if DATA statement
2008+ 2034 23                   inc     HL
2009+ 2035 7E                   ld      A,(HL)          ; End of program?
2010+ 2036 23                   inc     HL
2011+ 2037 B6                   or      (HL)            ; 00 00 Ends program
2012+ 2038 1E 06                ld      E,OD            ; ?OD Error
2013+ 203A CA 04 17             jp      Z,ERROR         ; Yes - Out of DATA
2014+ 203D 23                   inc     HL
2015+ 203E 5E                   ld      E,(HL)          ; LSB of line number
2016+ 203F 23                   inc     HL
2017+ 2040 56                   ld      D,(HL)          ; MSB of line number
2018+ 2041 EB                   ex      DE,HL
2019+ 2042 22 B0 81             ld      (DATLIN),HL     ; Set line of current DATA item
2020+ 2045 EB                   ex      DE,HL
2021+ 2046 CD 13 1C     FANDT:  call    GETCHR          ; Get next character
2022+ 2049 FE 83                cp      ZDATA           ; "DATA" token
2023+ 204B C2 2D 20             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2024+ 204E C3 C1 1F             jp      ANTVLU          ; Found - Convert input
2025+ 2051
2026+ 2051 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2027+ 2054 C4 AB 22     NEXT1:  call    NZ,GETVAR       ; Get index address
2028+ 2057 22 B5 81             ld      (BRKLIN),HL     ; Save code string address
2029+ 205A CD 79 16             call    BAKSTK          ; Look for "FOR" block
2030+ 205D C2 F6 16             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2031+ 2060 F9                   ld      SP,HL           ; Clear nested loops
2032+ 2061 D5                   push    DE              ; Save index address
2033+ 2062 7E                   ld      A,(HL)          ; Get sign of STEP
2034+ 2063 23                   inc     HL
2035+ 2064 F5                   push    AF              ; Save sign of STEP
2036+ 2065 D5                   push    DE              ; Save index address
2037+ 2066 CD E7 2E             call    PHLTFP          ; Move index value to FPREG
2038+ 2069 E3                   ex      (SP),HL         ; Save address of TO value
2039+ 206A E5                   push    HL              ; Save address of index
2040+ 206B CD 03 2C             call    ADDPHL          ; Add STEP to index value
2041+ 206E E1                   pop     HL              ; Restore address of index
2042+ 206F CD 01 2F             call    FPTHL           ; Move value to index variable
2043+ 2072 E1                   pop     HL              ; Restore address of TO value
2044+ 2073 CD F8 2E             call    LOADFP          ; Move TO value to BCDE
2045+ 2076 E5                   push    HL              ; Save address of line of FOR
2046+ 2077 CD 24 2F             call    CMPNUM          ; Compare index with TO value
2047+ 207A E1                   pop     HL              ; Restore address of line num
2048+ 207B C1                   pop     BC              ; Address of sign of STEP
2049+ 207C 90                   sub     B               ; Compare with expected sign
2050+ 207D CD F8 2E             call    LOADFP          ; BC = Loop stmt,DE = Line num
2051+ 2080 CA 8C 20             jp      Z,KILFOR        ; Loop finished - Terminate it
2052+ 2083 EB                   ex      DE,HL           ; Loop statement line number
2053+ 2084 22 AF 80             ld      (LINEAT),HL     ; Set loop line number
2054+ 2087 69                   ld      L,C             ; Set code string to loop
2055+ 2088 60                   ld      H,B
2056+ 2089 C3 CF 1B             jp      PUTFID          ; Put back "FOR" and continue
2057+ 208C
2058+ 208C F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2059+ 208D 2A B5 81             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2060+ 2090 7E                   ld      A,(HL)          ; Get next byte in code string
2061+ 2091 FE 2C                cp      ','             ; More NEXTs ?
2062+ 2093 C2 D3 1B             jp      NZ,RUNCNT       ; No - Do next statement
2063+ 2096 CD 13 1C             call    GETCHR          ; Position to index name
2064+ 2099 CD 54 20             call    NEXT1           ; Re-enter NEXT routine
2065+ 209C              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2066+ 209C
2067+ 209C CD AE 20     GETNUM: call    EVAL            ; Get a numeric expression
2068+ 209F F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2069+ 20A0 37           TSTSTR: scf                     ; Set carry (string)
2070+ 20A1 3A 94 81     CHKTYP: ld      A,(TYPE)        ; Check types match
2071+ 20A4 8F                   adc     A,A             ; Expected + actual
2072+ 20A5 B7                   or      A               ; Clear carry , set parity
2073+ 20A6 E8                   ret     PE              ; Even parity - Types match
2074+ 20A7 C3 02 17             jp      TMERR           ; Different types - Error
2075+ 20AA
2076+ 20AA CD D2 19     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2077+ 20AD 28                   defb    '('
2078+ 20AE 2B           EVAL:   dec     HL              ; Evaluate expression & save
2079+ 20AF 16 00                ld      D,$00           ; Precedence value
2080+ 20B1 D5           EVAL1:  push    DE              ; Save precedence
2081+ 20B2 0E 01                ld      C,$01
2082+ 20B4 CD AD 16             call    CHKSTK          ; Check for 1 level of stack
2083+ 20B7 CD 25 21             call    OPRND           ; Get next expression value
2084+ 20BA 22 B7 81     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2085+ 20BD 2A B7 81     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2086+ 20C0 C1                   pop     BC              ; Precedence value and operator
2087+ 20C1 78                   ld      A,B             ; Get precedence value
2088+ 20C2 FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2089+ 20C4 D4 9F 20             call    NC,TSTNUM       ; No - Make sure it's a number
2090+ 20C7 7E                   ld      A,(HL)          ; Get next operator / function
2091+ 20C8 16 00                ld      D,$00           ; Clear Last relation
2092+ 20CA D6 C7        RLTLP:  sub     ZGTR            ; ">" Token
2093+ 20CC DA E6 20             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2094+ 20CF FE 03                cp      ZLTH+1-ZGTR     ; < = >
2095+ 20D1 D2 E6 20             jp      NC,FOPRND       ; Function - Call it
2096+ 20D4 FE 01                cp      ZEQUAL-ZGTR     ; "="
2097+ 20D6 17                   rla                     ; <- Test for legal
2098+ 20D7 AA                   xor     D               ; <- combinations of < = >
2099+ 20D8 BA                   cp      D               ; <- by combining last token
2100+ 20D9 57                   ld      D,A             ; <- with current one
2101+ 20DA DA F0 16             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2102+ 20DD 22 AC 81             ld      (CUROPR),HL     ; Save address of current token
2103+ 20E0 CD 13 1C             call    GETCHR          ; Get next character
2104+ 20E3 C3 CA 20             jp      RLTLP           ; Treat the two as one
2105+ 20E6
2106+ 20E6 7A           FOPRND: ld      A,D             ; < = > found ?
2107+ 20E7 B7                   or      A
2108+ 20E8 C2 26 22             jp      NZ,TSTRED       ; Yes - Test for reduction
2109+ 20EB 7E                   ld      A,(HL)          ; Get operator token
2110+ 20EC 22 AC 81             ld      (CUROPR),HL     ; Save operator address
2111+ 20EF D6 BD                sub     ZPLUS           ; Operator or function?
2112+ 20F1 D8                   ret     C               ; Neither - Exit
2113+ 20F2 FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2114+ 20F4 D0                   ret     NC              ; No - Exit
2115+ 20F5 5F                   ld      E,A             ; Coded operator
2116+ 20F6 3A 94 81             ld      A,(TYPE)        ; Get data type
2117+ 20F9 3D                   dec     A               ; FF = numeric , 00 = string
2118+ 20FA B3                   or      E               ; Combine with coded operator
2119+ 20FB 7B                   ld      A,E             ; Get coded operator
2120+ 20FC CA 9A 26             jp      Z,CONCAT        ; String concatenation
2121+ 20FF 07                   rlca                    ; Times 2
2122+ 2100 83                   add     A,E             ; Times 3
2123+ 2101 5F                   ld      E,A             ; To DE (D is 0)
2124+ 2102 21 6B 15             ld      HL,PRITAB       ; Precedence table
2125+ 2105 19                   add     HL,DE           ; To the operator concerned
2126+ 2106 78                   ld      A,B             ; Last operator precedence
2127+ 2107 56                   ld      D,(HL)          ; Get evaluation precedence
2128+ 2108 BA                   cp      D               ; Compare with eval precedence
2129+ 2109 D0                   ret     NC              ; Exit if higher precedence
2130+ 210A 23                   inc     HL              ; Point to routine address
2131+ 210B CD 9F 20             call    TSTNUM          ; Make sure it's a number
2132+ 210E
2133+ 210E C5           STKTHS: push    BC              ; Save last precedence & token
2134+ 210F 01 BD 20             ld      BC,EVAL3        ; Where to go on prec' break
2135+ 2112 C5                   push    BC              ; Save on stack for return
2136+ 2113 43                   ld      B,E             ; Save operator
2137+ 2114 4A                   ld      C,D             ; Save precedence
2138+ 2115 CD DA 2E             call    STAKFP          ; Move value to stack
2139+ 2118 58                   ld      E,B             ; Restore operator
2140+ 2119 51                   ld      D,C             ; Restore precedence
2141+ 211A 4E                   ld      C,(HL)          ; Get LSB of routine address
2142+ 211B 23                   inc     HL
2143+ 211C 46                   ld      B,(HL)          ; Get MSB of routine address
2144+ 211D 23                   inc     HL
2145+ 211E C5                   push    BC              ; Save routine address
2146+ 211F 2A AC 81             ld      HL,(CUROPR)     ; Address of current operator
2147+ 2122 C3 B1 20             jp      EVAL1           ; Loop until prec' break
2148+ 2125
2149+ 2125 AF           OPRND:  xor     A               ; Get operand routine
2150+ 2126 32 94 81             ld      (TYPE),A        ; Set numeric expected
2151+ 2129 CD 13 1C             call    GETCHR          ; Get next character
2152+ 212C 1E 24                ld      E,MO            ; ?MO Error
2153+ 212E CA 04 17             jp      Z,ERROR         ; No operand - Error
2154+ 2131 DA B0 2F             jp      C,ASCTFP        ; Number - Get value
2155+ 2134 CD B5 1C             call    CHKLTR          ; See if a letter
2156+ 2137 D2 8C 21             jp      NC,CONVAR       ; Letter - Find variable
2157+ 213A FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2158+ 213C 20 12                jr      NZ,NOTAMP
2159+ 213E CD 13 1C             call    GETCHR          ; Get next character
2160+ 2141 FE 48                cp      'H'             ; Hex number indicated? [function added]
2161+ 2143 CA 18 3F             jp      Z,HEXTFP        ; Convert Hex to FPREG
2162+ 2146 FE 42                cp      'B'             ; Binary number indicated? [function added]
2163+ 2148 CA 88 3F             jp      Z,BINTFP        ; Convert Bin to FPREG
2164+ 214B 1E 02                ld      E,SN            ; If neither then a ?SN Error
2165+ 214D CA 04 17             jp      Z,ERROR         ;
2166+ 2150 FE BD        NOTAMP: cp      ZPLUS           ; '+' Token ?
2167+ 2152 CA 25 21             jp      Z,OPRND         ; Yes - Look for operand
2168+ 2155 FE 2E                cp      '.'             ; '.' ?
2169+ 2157 CA B0 2F             jp      Z,ASCTFP        ; Yes - Create FP number
2170+ 215A FE BE                cp      ZMINUS          ; '-' Token ?
2171+ 215C CA 7B 21             jp      Z,MINUS         ; Yes - Do minus
2172+ 215F FE 22                cp      $22             ; '"'             ; Literal string ?
2173+ 2161 CA 63 25             jp      Z,QTSTR         ; Get string terminated by '"'
2174+ 2164 FE BB                cp      ZNOT            ; "NOT" Token ?
2175+ 2166 CA 86 22             jp      Z,EVNOT         ; Yes - Eval NOT expression
2176+ 2169 FE B8                cp      ZFN             ; "FN" Token ?
2177+ 216B CA C7 24             jp      Z,DOFN          ; Yes - Do FN routine
2178+ 216E D6 CA                sub     ZSGN            ; Is it a function?
2179+ 2170 D2 9D 21             jp      NC,FNOFST       ; Yes - Evaluate function
2180+ 2173 CD AA 20     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2181+ 2176 CD D2 19             call    CHKSYN          ; Make sure ")" follows
2182+ 2179 29                   defb    ')'
2183+ 217A C9                   ret
2184+ 217B
2185+ 217B 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2186+ 217D CD B1 20             call    EVAL1           ; Evaluate until prec' break
2187+ 2180 2A B7 81             ld      HL,(NXTOPR)     ; Get next operator address
2188+ 2183 E5                   push    HL              ; Save next operator address
2189+ 2184 CD D2 2E             call    INVSGN          ; Negate value
2190+ 2187 CD 9F 20     RETNUM: call    TSTNUM          ; Make sure it's a number
2191+ 218A E1                   pop     HL              ; Restore next operator address
2192+ 218B C9                   ret
2193+ 218C
2194+ 218C CD AB 22     CONVAR: call    GETVAR          ; Get variable address to DE
2195+ 218F E5           FRMEVL: push    HL              ; Save code string address
2196+ 2190 EB                   ex      DE,HL           ; Variable address to HL
2197+ 2191 22 32 82             ld      (FPREG),HL      ; Save address of variable
2198+ 2194 3A 94 81             ld      A,(TYPE)        ; Get type
2199+ 2197 B7                   or      A               ; Numeric?
2200+ 2198 CC E7 2E             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2201+ 219B E1                   pop     HL              ; Restore code string address
2202+ 219C C9                   ret
2203+ 219D
2204+ 219D 06 00        FNOFST: ld      B,$00           ; Get address of function
2205+ 219F 07                   rlca                    ; Double function offset
2206+ 21A0 4F                   ld      C,A             ; BC = Offset in function table
2207+ 21A1 C5                   push    BC              ; Save adjusted token value
2208+ 21A2 CD 13 1C             call    GETCHR          ; Get next character
2209+ 21A5 79                   ld      A,C             ; Get adjusted token value
2210+ 21A6 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2211+ 21A8 CA D6 36             jp      Z,POINT         ; Yes, do "POINT"
2212+ 21AB FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2213+ 21AD CA 76 27             jp      Z,INSTR         ; Yes, do "INSTR"
2214+ 21B0 FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2215+ 21B2 DA CE 21             jp      C,FNVAL         ; No - Do function
2216+ 21B5 CD AA 20             call    OPNPAR          ; Evaluate expression  (X,...
2217+ 21B8 CD D2 19             call    CHKSYN          ; Make sure ',' follows
2218+ 21BB 2C                   defb    ','
2219+ 21BC CD A0 20             call    TSTSTR          ; Make sure it's a string
2220+ 21BF EB                   ex      DE,HL           ; Save code string address
2221+ 21C0 2A 32 82             ld      HL,(FPREG)      ; Get address of string
2222+ 21C3 E3                   ex      (SP),HL         ; Save address of string
2223+ 21C4 E5                   push    HL              ; Save adjusted token value
2224+ 21C5 EB                   ex      DE,HL           ; Restore code string address
2225+ 21C6 CD 22 29             call    GETINT          ; Get integer 0-255
2226+ 21C9 EB                   ex      DE,HL           ; Save code string address
2227+ 21CA E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2228+ 21CB C3 D6 21             jp      GOFUNC          ; Jump to string function
2229+ 21CE
2230+ 21CE CD 73 21     FNVAL:  call    EVLPAR          ; Evaluate expression
2231+ 21D1 E3                   ex      (SP),HL         ; HL = Adjusted token value
2232+ 21D2 11 87 21             ld      DE,RETNUM       ; Return number from function
2233+ 21D5 D5                   push    DE              ; Save on stack
2234+ 21D6 01 2E 13     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2235+ 21D9 09                   add     HL,BC           ; Point to right address
2236+ 21DA 4E                   ld      C,(HL)          ; Get LSB of address
2237+ 21DB 23                   inc     HL              ;
2238+ 21DC 66                   ld      H,(HL)          ; Get MSB of address
2239+ 21DD 69                   ld      L,C             ; Address to HL
2240+ 21DE E9                   jp      (HL)            ; Jump to function
2241+ 21DF
2242+ 21DF 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2243+ 21E0 FE BE                cp      ZMINUS          ; '-' token ?
2244+ 21E2 C8                   ret     Z               ; Yes - Return
2245+ 21E3 FE 2D                cp      '-'             ; '-' ASCII ?
2246+ 21E5 C8                   ret     Z               ; Yes - Return
2247+ 21E6 14                   inc     D               ; Inc to flag positive exponent
2248+ 21E7 FE 2B                cp      '+'             ; '+' ASCII ?
2249+ 21E9 C8                   ret     Z               ; Yes - Return
2250+ 21EA FE BD                cp      ZPLUS           ; '+' token ?
2251+ 21EC C8                   ret     Z               ; Yes - Return
2252+ 21ED 2B                   dec     HL              ; dec 'cos GETCHR INCs
2253+ 21EE C9                   ret                     ; Return "NZ"
2254+ 21EF
2255+ 21EF              ; execute OR, AND, and XOR operations
2256+ 21EF AF           PAND:   xor     A               ; for AND, Z=1
2257+ 21F0 18 07                jr      CNTLGC
2258+ 21F2 AF           POR:    xor     A               ; for OR, Z=0, S=1
2259+ 21F3 D6 01                sub     $01
2260+ 21F5 18 02                jr      CNTLGC
2261+ 21F7 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2262+ 21F8 3C                   inc     A
2263+ 21F9 F5           CNTLGC: push    AF              ; store operand's flags
2264+ 21FA CD 9F 20             call    TSTNUM          ; Make sure it's a number
2265+ 21FD CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
2266+ 2200 F1                   pop     AF              ; retrieve operand's flags
2267+ 2201 EB                   ex      DE,HL           ; <- Get last
2268+ 2202 C1                   pop     BC              ; <-  value
2269+ 2203 E3                   ex      (SP),HL         ; <-  from
2270+ 2204 EB                   ex      DE,HL           ; <-  stack
2271+ 2205 CD EA 2E             call    FPBCDE          ; Move last value to FPREG
2272+ 2208 F5                   push    AF              ; store operand's flags
2273+ 2209 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
2274+ 220C F1                   pop     AF              ; retrieve operand's flags
2275+ 220D C1                   pop     BC              ; Get value
2276+ 220E 79                   ld      A,C             ; Get LSB
2277+ 220F 21 85 24             ld      HL,ACPASS       ; Address of save AC as current
2278+ 2212 20 05                jr      NZ,POR1         ; if X/OR, jump over
2279+ 2214 A3           PAND1:  and     E               ; "AND" LSBs
2280+ 2215 4F                   ld      C,A             ; Save LSB
2281+ 2216 78                   ld      A,B             ; Get MSB
2282+ 2217 A2                   and     D               ; "AND" MSBs
2283+ 2218 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2284+ 2219 F2 21 22     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2285+ 221C B3                   or      E               ; "OR" LSBs
2286+ 221D 4F                   ld      C,A             ; Save LSB
2287+ 221E 78                   ld      A,B             ; Get MSB
2288+ 221F B2                   or      D               ; "OR" MSBs
2289+ 2220 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2290+ 2221 AB           PXOR1:  xor     E               ; "XOR" LSBs
2291+ 2222 4F                   ld      C,A             ; Save LSB
2292+ 2223 78                   ld      A,B             ; Get MSB
2293+ 2224 AA                   xor     D               ; "XOR" MSBs
2294+ 2225 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2295+ 2226
2296+ 2226 21 38 22     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2297+ 2229 3A 94 81             ld      A,(TYPE)        ; Get data type
2298+ 222C 1F                   rra                     ; Carry set = string
2299+ 222D 7A                   ld      A,D             ; Get last precedence value
2300+ 222E 17                   rla                     ; Times 2 plus carry
2301+ 222F 5F                   ld      E,A             ; To E
2302+ 2230 16 64                ld      D,$64           ; Relational precedence
2303+ 2232 78                   ld      A,B             ; Get current precedence
2304+ 2233 BA                   cp      D               ; Compare with last
2305+ 2234 D0                   ret     NC              ; Eval if last was rel' or log'
2306+ 2235 C3 0E 21             jp      STKTHS          ; Stack this one and get next
2307+ 2238
2308+ 2238 3A 22        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2309+ 223A 79           CMPLG1: ld      A,C             ; Get data type
2310+ 223B B7                   or      A
2311+ 223C 1F                   rra
2312+ 223D C1                   pop     BC              ; Get last expression to BCDE
2313+ 223E D1                   pop     DE
2314+ 223F F5                   push    AF              ; Save status
2315+ 2240 CD A1 20             call    CHKTYP          ; Check that types match
2316+ 2243 21 7C 22             ld      HL,CMPRES       ; Result to comparison
2317+ 2246 E5                   push    HL              ; Save for RETurn
2318+ 2247 CA 24 2F             jp      Z,CMPNUM        ; Compare values if numeric
2319+ 224A AF                   xor     A               ; Compare two strings
2320+ 224B 32 94 81             ld      (TYPE),A        ; Set type to numeric
2321+ 224E D5                   push    DE              ; Save string name
2322+ 224F CD E7 26             call    GSTRCU          ; Get current string
2323+ 2252 7E                   ld      A,(HL)          ; Get length of string
2324+ 2253 23                   inc     HL
2325+ 2254 23                   inc     HL
2326+ 2255 4E                   ld      C,(HL)          ; Get LSB of address
2327+ 2256 23                   inc     HL
2328+ 2257 46                   ld      B,(HL)          ; Get MSB of address
2329+ 2258 D1                   pop     DE              ; Restore string name
2330+ 2259 C5                   push    BC              ; Save address of string
2331+ 225A F5                   push    AF              ; Save length of string
2332+ 225B CD EB 26             call    GSTRDE          ; Get second string
2333+ 225E CD F8 2E             call    LOADFP          ; Get address of second string
2334+ 2261 F1                   pop     AF              ; Restore length of string 1
2335+ 2262 57                   ld      D,A             ; Length to D
2336+ 2263 E1                   pop     HL              ; Restore address of string 1
2337+ 2264 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2338+ 2265 B2                   or      D               ; Bytes of string 1 to do
2339+ 2266 C8                   ret     Z               ; Exit if all bytes compared
2340+ 2267 7A                   ld      A,D             ; Get bytes of string 1 to do
2341+ 2268 D6 01                sub     $01
2342+ 226A D8                   ret     C               ; Exit if end of string 1
2343+ 226B AF                   xor     A
2344+ 226C BB                   cp      E               ; Bytes of string 2 to do
2345+ 226D 3C                   inc     A
2346+ 226E D0                   ret     NC              ; Exit if end of string 2
2347+ 226F 15                   dec     D               ; Count bytes in string 1
2348+ 2270 1D                   dec     E               ; Count bytes in string 2
2349+ 2271 0A                   ld      A,(BC)          ; Byte in string 2
2350+ 2272 BE                   cp      (HL)            ; Compare to byte in string 1
2351+ 2273 23                   inc     HL              ; Move up string 1
2352+ 2274 03                   inc     BC              ; Move up string 2
2353+ 2275 CA 64 22             jp      Z,CMPSTR        ; Same - Try next bytes
2354+ 2278 3F                   ccf                     ; Flag difference (">" or "<")
2355+ 2279 C3 B4 2E             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2356+ 227C
2357+ 227C 3C           CMPRES: inc     A               ; Increment current value
2358+ 227D 8F                   adc     A,A             ; Double plus carry
2359+ 227E C1                   pop     BC              ; Get other value
2360+ 227F A0                   and     B               ; Combine them
2361+ 2280 C6 FF                add     A,-1            ; Carry set if different
2362+ 2282 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2363+ 2283 C3 BB 2E             jp      FLGREL          ; Set current value & continue
2364+ 2286
2365+ 2286 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2366+ 2288 CD B1 20             call    EVAL1           ; Eval until precedence break
2367+ 228B CD 9F 20             call    TSTNUM          ; Make sure it's a number
2368+ 228E CD C9 1C             call    DEINT           ; Get integer -32768 - 32767
2369+ 2291 7B                   ld      A,E             ; Get LSB
2370+ 2292 2F                   cpl                     ; Invert LSB
2371+ 2293 4F                   ld      C,A             ; Save "NOT" of LSB
2372+ 2294 7A                   ld      A,D             ; Get MSB
2373+ 2295 2F                   cpl                     ; Invert MSB
2374+ 2296 CD 85 24             call    ACPASS          ; Save AC as current
2375+ 2299 C1                   pop     BC              ; Clean up stack
2376+ 229A C3 BD 20             jp      EVAL3           ; Continue evaluation
2377+ 229D
2378+ 229D 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2379+ 229E CD 13 1C             call    GETCHR          ; Get next character
2380+ 22A1 C8                   ret     Z               ; End of DIM statement
2381+ 22A2 CD D2 19             call    CHKSYN          ; Make sure ',' follows
2382+ 22A5 2C                   defb    ','
2383+ 22A6 01 9D 22     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2384+ 22A9 C5                   push    BC              ; Save on stack
2385+ 22AA F6                   defb    $F6             ; Flag "Create" variable
2386+ 22AB AF           GETVAR: xor     A               ; Find variable address,to DE
2387+ 22AC 32 93 81             ld      (LCRFLG),A      ; Set locate / create flag
2388+ 22AF 46                   ld      B,(HL)          ; Get First byte of name
2389+ 22B0 CD B5 1C     GTFNAM: call    CHKLTR          ; See if a letter
2390+ 22B3 DA F0 16             jp      C,SNERR         ; ?SN Error if not a letter
2391+ 22B6 AF                   xor     A
2392+ 22B7 4F                   ld      C,A             ; Clear second byte of name
2393+ 22B8 32 94 81             ld      (TYPE),A        ; Set type to numeric
2394+ 22BB CD 13 1C             call    GETCHR          ; Get next character
2395+ 22BE DA C7 22             jp      C,SVNAM2        ; Numeric - Save in name
2396+ 22C1 CD B5 1C             call    CHKLTR          ; See if a letter
2397+ 22C4 DA D4 22             jp      C,CHARTY        ; Not a letter - Check type
2398+ 22C7 4F           SVNAM2: ld      C,A             ; Save second byte of name
2399+ 22C8 CD 13 1C     ENDNAM: call    GETCHR          ; Get next character
2400+ 22CB DA C8 22             jp      C,ENDNAM        ; Numeric - Get another
2401+ 22CE CD B5 1C             call    CHKLTR          ; See if a letter
2402+ 22D1 D2 C8 22             jp      NC,ENDNAM       ; Letter - Get another
2403+ 22D4 D6 24        CHARTY: sub     '$'             ; String variable?
2404+ 22D6 C2 E3 22             jp      NZ,NOTSTR       ; No - Numeric variable
2405+ 22D9 3C                   inc     A               ; A = 1 (string type)
2406+ 22DA 32 94 81             ld      (TYPE),A        ; Set type to string
2407+ 22DD 0F                   rrca                    ; A = 80H , Flag for string
2408+ 22DE 81                   add     A,C             ; 2nd byte of name has bit 7 on
2409+ 22DF 4F                   ld      C,A             ; Resave second byte on name
2410+ 22E0 CD 13 1C             call    GETCHR          ; Get next character
2411+ 22E3 3A B2 81     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2412+ 22E6 3D                   dec     A
2413+ 22E7 CA 90 23             jp      Z,ARLDSV        ; Yes - Get array name
2414+ 22EA F2 F3 22             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2415+ 22ED 7E                   ld      A,(HL)          ; Get byte again
2416+ 22EE D6 28                sub     '('             ; Subscripted variable?
2417+ 22F0 CA 68 23             jp      Z,SBSCPT        ; Yes - Sort out subscript
2418+ 22F3
2419+ 22F3 AF           NSCFOR: xor     A               ; Simple variable
2420+ 22F4 32 B2 81             ld      (FORFLG),A      ; Clear "FOR" flag
2421+ 22F7 E5                   push    HL              ; Save code string address
2422+ 22F8 50                   ld      D,B             ; DE = Variable name to find
2423+ 22F9 59                   ld      E,C
2424+ 22FA 2A 2C 82             ld      HL,(FNRGNM)     ; FN argument name
2425+ 22FD CD CC 19             call    CPDEHL          ; Is it the FN argument?
2426+ 2300 11 2E 82             ld      DE,FNARG        ; Point to argument value
2427+ 2303 CA 99 2D             jp      Z,POPHRT        ; Yes - Return FN argument value
2428+ 2306 2A 26 82             ld      HL,(VAREND)     ; End of variables
2429+ 2309 EB                   ex      DE,HL           ; Address of end of search
2430+ 230A 2A 24 82             ld      HL,(PROGND)     ; Start of variables address
2431+ 230D CD CC 19     FNDVAR: call    CPDEHL          ; End of variable list table?
2432+ 2310 CA 26 23             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2433+ 2313 79                   ld      A,C             ; Get second byte of name
2434+ 2314 96                   sub     (HL)            ; Compare with name in list
2435+ 2315 23                   inc     HL              ; Move on to first byte
2436+ 2316 C2 1B 23             jp      NZ,FNTHR        ; Different - Find another
2437+ 2319 78                   ld      A,B             ; Get first byte of name
2438+ 231A 96                   sub     (HL)            ; Compare with name in list
2439+ 231B 23           FNTHR:  inc     HL              ; Move on to LSB of value
2440+ 231C CA 5A 23             jp      Z,RETADR        ; Found - Return address
2441+ 231F 23                   inc     HL              ; <- Skip
2442+ 2320 23                   inc     HL              ; <- over
2443+ 2321 23                   inc     HL              ; <- F.P.
2444+ 2322 23                   inc     HL              ; <- value
2445+ 2323 C3 0D 23             jp      FNDVAR          ; Keep looking
2446+ 2326
2447+ 2326 E1           CFEVAL: pop     HL              ; Restore code string address
2448+ 2327 E3                   ex      (SP),HL         ; Get return address
2449+ 2328 D5                   push    DE              ; Save address of variable
2450+ 2329 11 8F 21             ld      DE,FRMEVL       ; Return address in EVAL
2451+ 232C CD CC 19             call    CPDEHL          ; Called from EVAL ?
2452+ 232F D1                   pop     DE              ; Restore address of variable
2453+ 2330 CA 5D 23             jp      Z,RETNUL        ; Yes - Return null variable
2454+ 2333 E3                   ex      (SP),HL         ; Put back return
2455+ 2334 E5                   push    HL              ; Save code string address
2456+ 2335 C5                   push    BC              ; Save variable name
2457+ 2336 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2458+ 2339 2A 28 82             ld      HL,(ARREND)     ; End of arrays
2459+ 233C E5                   push    HL              ; Save end of arrays
2460+ 233D 09                   add     HL,BC           ; Move up 6 bytes
2461+ 233E C1                   pop     BC              ; Source address in BC
2462+ 233F E5                   push    HL              ; Save new end address
2463+ 2340 CD 9C 16             call    MOVUP           ; Move arrays up
2464+ 2343 E1                   pop     HL              ; Restore new end address
2465+ 2344 22 28 82             ld      (ARREND),HL     ; Set new end address
2466+ 2347 60                   ld      H,B             ; End of variables to HL
2467+ 2348 69                   ld      L,C
2468+ 2349 22 26 82             ld      (VAREND),HL     ; Set new end address
2469+ 234C
2470+ 234C 2B           ZEROLP: dec     HL              ; Back through to zero variable
2471+ 234D 36 00                ld      (HL),$00        ; Zero byte in variable
2472+ 234F CD CC 19             call    CPDEHL          ; Done them all?
2473+ 2352 C2 4C 23             jp      NZ,ZEROLP       ; No - Keep on going
2474+ 2355 D1                   pop     DE              ; Get variable name
2475+ 2356 73                   ld      (HL),E          ; Store second character
2476+ 2357 23                   inc     HL
2477+ 2358 72                   ld      (HL),D          ; Store first character
2478+ 2359 23                   inc     HL
2479+ 235A EB           RETADR: ex      DE,HL           ; Address of variable in DE
2480+ 235B E1                   pop     HL              ; Restore code string address
2481+ 235C C9                   ret
2482+ 235D
2483+ 235D 32 35 82     RETNUL: ld      (FPEXP),A       ; Set result to zero
2484+ 2360 21 6D 16             ld      HL,ZERBYT       ; Also set a null string
2485+ 2363 22 32 82             ld      (FPREG),HL      ; Save for EVAL
2486+ 2366 E1                   pop     HL              ; Restore code string address
2487+ 2367 C9                   ret
2488+ 2368
2489+ 2368 E5           SBSCPT: push    HL              ; Save code string address
2490+ 2369 2A 93 81             ld      HL,(LCRFLG)     ; Locate/Create and Type
2491+ 236C E3                   ex      (SP),HL         ; Save and get code string
2492+ 236D 57                   ld      D,A             ; Zero number of dimensions
2493+ 236E D5           SCPTLP: push    DE              ; Save number of dimensions
2494+ 236F C5                   push    BC              ; Save array name
2495+ 2370 CD BD 1C             call    FPSINT          ; Get subscript (0-32767)
2496+ 2373 C1                   pop     BC              ; Restore array name
2497+ 2374 F1                   pop     AF              ; Get number of dimensions
2498+ 2375 EB                   ex      DE,HL
2499+ 2376 E3                   ex      (SP),HL         ; Save subscript value
2500+ 2377 E5                   push    HL              ; Save LCRFLG and TYPE
2501+ 2378 EB                   ex      DE,HL
2502+ 2379 3C                   inc     A               ; Count dimensions
2503+ 237A 57                   ld      D,A             ; Save in D
2504+ 237B 7E                   ld      A,(HL)          ; Get next byte in code string
2505+ 237C FE 2C                cp      ','             ; Comma (more to come)?
2506+ 237E CA 6E 23             jp      Z,SCPTLP        ; Yes - More subscripts
2507+ 2381 CD D2 19             call    CHKSYN          ; Make sure ")" follows
2508+ 2384 29                   defb    ')'
2509+ 2385 22 B7 81             ld      (NXTOPR),HL     ; Save code string address
2510+ 2388 E1                   pop     HL              ; Get LCRFLG and TYPE
2511+ 2389 22 93 81             ld      (LCRFLG),HL     ; Restore Locate/create & type
2512+ 238C 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2513+ 238E D5                   push    DE              ; Save number of dimensions (D)
2514+ 238F 11                   defb    $11             ; Skip "push HL" and "push AF'
2515+ 2390
2516+ 2390 E5           ARLDSV: push    HL              ; Save code string address
2517+ 2391 F5                   push    AF              ; A = 00 , Flags set = Z,N
2518+ 2392 2A 26 82             ld      HL,(VAREND)     ; Start of arrays
2519+ 2395 3E                   defb    $3E             ; Skip "add HL,DE"
2520+ 2396 19           FNDARY: add     HL,DE           ; Move to next array start
2521+ 2397 EB                   ex      DE,HL
2522+ 2398 2A 28 82             ld      HL,(ARREND)     ; End of arrays
2523+ 239B EB                   ex      DE,HL           ; Current array pointer
2524+ 239C CD CC 19             call    CPDEHL          ; End of arrays found?
2525+ 239F CA C8 23             jp      Z,CREARY        ; Yes - Create array
2526+ 23A2 7E                   ld      A,(HL)          ; Get second byte of name
2527+ 23A3 B9                   cp      C               ; Compare with name given
2528+ 23A4 23                   inc     HL              ; Move on
2529+ 23A5 C2 AA 23             jp      NZ,NXTARY       ; Different - Find next array
2530+ 23A8 7E                   ld      A,(HL)          ; Get first byte of name
2531+ 23A9 B8                   cp      B               ; Compare with name given
2532+ 23AA 23           NXTARY: inc     HL              ; Move on
2533+ 23AB 5E                   ld      E,(HL)          ; Get LSB of next array address
2534+ 23AC 23                   inc     HL
2535+ 23AD 56                   ld      D,(HL)          ; Get MSB of next array address
2536+ 23AE 23                   inc     HL
2537+ 23AF C2 96 23             jp      NZ,FNDARY       ; Not found - Keep looking
2538+ 23B2 3A 93 81             ld      A,(LCRFLG)      ; Found Locate or Create it?
2539+ 23B5 B7                   or      A
2540+ 23B6 C2 F9 16             jp      NZ,DDERR        ; Create - ?DD Error
2541+ 23B9 F1                   pop     AF              ; Locate - Get number of dim'ns
2542+ 23BA 44                   ld      B,H             ; BC Points to array dim'ns
2543+ 23BB 4D                   ld      C,L
2544+ 23BC CA 99 2D             jp      Z,POPHRT        ; Jump if array load/save
2545+ 23BF 96                   sub     (HL)            ; Same number of dimensions?
2546+ 23C0 CA 26 24             jp      Z,FINDEL        ; Yes - Find element
2547+ 23C3 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2548+ 23C5 C3 04 17             jp      ERROR           ; Output error
2549+ 23C8
2550+ 23C8 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2551+ 23CB F1                   pop     AF              ; Array to save or 0 dim'ns?
2552+ 23CC CA DE 1C             jp      Z,FCERR         ; Yes - ?FC Error
2553+ 23CF 71                   ld      (HL),C          ; Save second byte of name
2554+ 23D0 23                   inc     HL
2555+ 23D1 70                   ld      (HL),B          ; Save first byte of name
2556+ 23D2 23                   inc     HL
2557+ 23D3 4F                   ld      C,A             ; Number of dimensions to C
2558+ 23D4 CD AD 16             call    CHKSTK          ; Check if enough memory
2559+ 23D7 23                   inc     HL              ; Point to number of dimensions
2560+ 23D8 23                   inc     HL
2561+ 23D9 22 AC 81             ld      (CUROPR),HL     ; Save address of pointer
2562+ 23DC 71                   ld      (HL),C          ; Set number of dimensions
2563+ 23DD 23                   inc     HL
2564+ 23DE 3A 93 81             ld      A,(LCRFLG)      ; Locate of Create?
2565+ 23E1 17                   rla                     ; Carry set = Create
2566+ 23E2 79                   ld      A,C             ; Get number of dimensions
2567+ 23E3 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2568+ 23E6 D2 EB 23             jp      NC,DEFSIZ       ; Locate - Set default size
2569+ 23E9 C1                   pop     BC              ; Get specified dimension size
2570+ 23EA 03                   inc     BC              ; Include zero element
2571+ 23EB 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2572+ 23EC 23                   inc     HL
2573+ 23ED 70                   ld      (HL),B          ; Save MSB of dimension size
2574+ 23EE 23                   inc     HL
2575+ 23EF F5                   push    AF              ; Save num' of dim'ns an status
2576+ 23F0 E5                   push    HL              ; Save address of dim'n size
2577+ 23F1 CD 95 2F             call    MLDEBC          ; Multiply DE by BC to find
2578+ 23F4 EB                   ex      DE,HL           ; amount of mem needed (to DE)
2579+ 23F5 E1                   pop     HL              ; Restore address of dimension
2580+ 23F6 F1                   pop     AF              ; Restore number of dimensions
2581+ 23F7 3D                   dec     A               ; Count them
2582+ 23F8 C2 E3 23             jp      NZ,CRARLP       ; Do next dimension if more
2583+ 23FB F5                   push    AF              ; Save locate/create flag
2584+ 23FC 42                   ld      B,D             ; MSB of memory needed
2585+ 23FD 4B                   ld      C,E             ; LSB of memory needed
2586+ 23FE EB                   ex      DE,HL
2587+ 23FF 19                   add     HL,DE           ; Add bytes to array start
2588+ 2400 DA C5 16             jp      C,OMERR         ; Too big - Error
2589+ 2403 CD B6 16             call    ENFMEM          ; See if enough memory
2590+ 2406 22 28 82             ld      (ARREND),HL     ; Save new end of array
2591+ 2409
2592+ 2409 2B           ZERARY: dec     HL              ; Back through array data
2593+ 240A 36 00                ld      (HL),$00        ; Set array element to zero
2594+ 240C CD CC 19             call    CPDEHL          ; All elements zeroed?
2595+ 240F C2 09 24             jp      NZ,ZERARY       ; No - Keep on going
2596+ 2412 03                   inc     BC              ; Number of bytes + 1
2597+ 2413 57                   ld      D,A             ; A=0
2598+ 2414 2A AC 81             ld      HL,(CUROPR)     ; Get address of array
2599+ 2417 5E                   ld      E,(HL)          ; Number of dimensions
2600+ 2418 EB                   ex      DE,HL           ; To HL
2601+ 2419 29                   add     HL,HL           ; Two bytes per dimension size
2602+ 241A 09                   add     HL,BC           ; Add number of bytes
2603+ 241B EB                   ex      DE,HL           ; Bytes needed to DE
2604+ 241C 2B                   dec     HL
2605+ 241D 2B                   dec     HL
2606+ 241E 73                   ld      (HL),E          ; Save LSB of bytes needed
2607+ 241F 23                   inc     HL
2608+ 2420 72                   ld      (HL),D          ; Save MSB of bytes needed
2609+ 2421 23                   inc     HL
2610+ 2422 F1                   pop     AF              ; Locate / Create?
2611+ 2423 DA 4A 24             jp      C,ENDDIM        ; A is 0 , End if create
2612+ 2426 47           FINDEL: ld      B,A             ; Find array element
2613+ 2427 4F                   ld      C,A
2614+ 2428 7E                   ld      A,(HL)          ; Number of dimensions
2615+ 2429 23                   inc     HL
2616+ 242A 16                   defb    $16             ; Skip "pop HL"
2617+ 242B E1           FNDELP: pop     HL              ; Address of next dim' size
2618+ 242C 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2619+ 242D 23                   inc     HL
2620+ 242E 56                   ld      D,(HL)          ; Get MSB of dim'n size
2621+ 242F 23                   inc     HL
2622+ 2430 E3                   ex      (SP),HL         ; Save address - Get index
2623+ 2431 F5                   push    AF              ; Save number of dim'ns
2624+ 2432 CD CC 19             call    CPDEHL          ; Dimension too large?
2625+ 2435 D2 C3 23             jp      NC,BSERR        ; Yes - ?BS Error
2626+ 2438 E5                   push    HL              ; Save index
2627+ 2439 CD 95 2F             call    MLDEBC          ; Multiply previous by size
2628+ 243C D1                   pop     DE              ; Index supplied to DE
2629+ 243D 19                   add     HL,DE           ; Add index to pointer
2630+ 243E F1                   pop     AF              ; Number of dimensions
2631+ 243F 3D                   dec     A               ; Count them
2632+ 2440 44                   ld      B,H             ; MSB of pointer
2633+ 2441 4D                   ld      C,L             ; LSB of pointer
2634+ 2442 C2 2B 24             jp      NZ,FNDELP       ; More - Keep going
2635+ 2445 29                   add     HL,HL           ; 4 Bytes per element
2636+ 2446 29                   add     HL,HL
2637+ 2447 C1                   pop     BC              ; Start of array
2638+ 2448 09                   add     HL,BC           ; Point to element
2639+ 2449 EB                   ex      DE,HL           ; Address of element to DE
2640+ 244A 2A B7 81     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2641+ 244D C9                   ret
2642+ 244E
2643+ 244E
2644+ 244E              ; returns the value of the 32-bit system tick counter as
2645+ 244E              ; two 16-bit words
2646+ 244E CD 9F 20     TMR:    call    TSTNUM          ; Make sure it's a number
2647+ 2451 CD C9 1C             call    DEINT           ; Get integer (-32768 to 32767)
2648+ 2454 2A BD 81             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2649+ 2457 7B                   ld      A,E
2650+ 2458 B2                   or      D               ; is it 0?
2651+ 2459 CA 5F 24             jp      Z,ENDTMR        ; yes, jump over
2652+ 245C 2A BF 81             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2653+ 245F 45           ENDTMR: ld      B,L             ; move bytes...
2654+ 2460 7C                   ld      A,H             ; ...into AB
2655+ 2461 C3 86 24             jp      ABPASS          ; return word into AB
2656+ 2464
2657+ 2464
2658+ 2464              ; returns the free space for BASIC or into the string pool
2659+ 2464 2A 28 82     FRE:    ld      HL,(ARREND)     ; Start of free memory
2660+ 2467 EB                   ex      DE,HL           ; To DE
2661+ 2468 21 00 00             ld      HL,$0000        ; End of free memory
2662+ 246B 39                   add     HL,SP           ; Current stack value
2663+ 246C 3A 94 81             ld      A,(TYPE)        ; Dummy argument type
2664+ 246F B7                   or      A
2665+ 2470 CA 80 24             jp      Z,FRENUM        ; Numeric - Free variable space
2666+ 2473 CD E7 26             call    GSTRCU          ; Current string to pool
2667+ 2476 CD E7 25             call    GARBGE          ; Garbage collection
2668+ 2479 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2669+ 247C EB                   ex      DE,HL           ; To DE
2670+ 247D 2A AA 81             ld      HL,(STRBOT)     ; Bottom of string space
2671+ 2480 7D           FRENUM: ld      A,L             ; Get LSB of end
2672+ 2481 93                   sub     E               ; Subtract LSB of beginning
2673+ 2482 4F                   ld      C,A             ; Save difference if C
2674+ 2483 7C                   ld      A,H             ; Get MSB of end
2675+ 2484 9A                   sbc     A,D             ; Subtract MSB of beginning
2676+ 2485 41           ACPASS: ld      B,C             ; Return integer AC
2677+ 2486 50           ABPASS: ld      D,B             ; Return integer AB
2678+ 2487 1E 00                ld      E,$00
2679+ 2489 21 94 81             ld      HL,TYPE         ; Point to type
2680+ 248C 73                   ld      (HL),E          ; Set type to numeric
2681+ 248D 06 90                ld      B,$80+$10       ; 16 bit integer
2682+ 248F C3 C0 2E             jp      RETINT          ; Return the integer
2683+ 2492
2684+ 2492              ; returns the X position of the cursor during a print
2685+ 2492 3A 92 81     POS:    ld      A,(CURPOS)      ; Get cursor position
2686+ 2495 47           PASSA:  ld      B,A             ; Put A into AB
2687+ 2496 AF                   xor     A               ; Zero A
2688+ 2497 C3 86 24             jp      ABPASS          ; Return integer AB
2689+ 249A
2690+ 249A CD 1D 25     DEF:    call    CHEKFN          ; Get "FN" and name
2691+ 249D CD 0F 25             call    IDTEST          ; Test for illegal direct
2692+ 24A0 01 BC 1D             ld      BC,DATA         ; To get next statement
2693+ 24A3 C5                   push    BC              ; Save address for RETurn
2694+ 24A4 D5                   push    DE              ; Save address of function ptr
2695+ 24A5 CD D2 19             call    CHKSYN          ; Make sure "(" follows
2696+ 24A8 28                   defb    '('
2697+ 24A9 CD AB 22             call    GETVAR          ; Get argument variable name
2698+ 24AC E5                   push    HL              ; Save code string address
2699+ 24AD EB                   ex      DE,HL           ; Argument address to HL
2700+ 24AE 2B                   dec     HL
2701+ 24AF 56                   ld      D,(HL)          ; Get first byte of arg name
2702+ 24B0 2B                   dec     HL
2703+ 24B1 5E                   ld      E,(HL)          ; Get second byte of arg name
2704+ 24B2 E1                   pop     HL              ; Restore code string address
2705+ 24B3 CD 9F 20             call    TSTNUM          ; Make sure numeric argument
2706+ 24B6 CD D2 19             call    CHKSYN          ; Make sure ")" follows
2707+ 24B9 29                   defb    ')'
2708+ 24BA CD D2 19             call    CHKSYN          ; Make sure "=" follows
2709+ 24BD C8                   defb    ZEQUAL          ; "=" token
2710+ 24BE 44                   ld      B,H             ; Code string address to BC
2711+ 24BF 4D                   ld      C,L
2712+ 24C0 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2713+ 24C1 71                   ld      (HL),C          ; Save LSB of FN code string
2714+ 24C2 23                   inc     HL
2715+ 24C3 70                   ld      (HL),B          ; Save MSB of FN code string
2716+ 24C4 C3 5C 25             jp      SVSTAD          ; Save address and do function
2717+ 24C7
2718+ 24C7 CD 1D 25     DOFN:   call    CHEKFN          ; Make sure FN follows
2719+ 24CA D5                   push    DE              ; Save function pointer address
2720+ 24CB CD 73 21             call    EVLPAR          ; Evaluate expression in "()"
2721+ 24CE CD 9F 20             call    TSTNUM          ; Make sure numeric result
2722+ 24D1 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2723+ 24D2 5E                   ld      E,(HL)          ; Get LSB of FN code string
2724+ 24D3 23                   inc     HL
2725+ 24D4 56                   ld      D,(HL)          ; Get MSB of FN code string
2726+ 24D5 23                   inc     HL
2727+ 24D6 7A                   ld      A,D             ; And function DEFined?
2728+ 24D7 B3                   or      E
2729+ 24D8 CA FC 16             jp      Z,UFERR         ; No - ?UF Error
2730+ 24DB 7E                   ld      A,(HL)          ; Get LSB of argument address
2731+ 24DC 23                   inc     HL
2732+ 24DD 66                   ld      H,(HL)          ; Get MSB of argument address
2733+ 24DE 6F                   ld      L,A             ; HL = Arg variable address
2734+ 24DF E5                   push    HL              ; Save it
2735+ 24E0 2A 2C 82             ld      HL,(FNRGNM)     ; Get old argument name
2736+ 24E3 E3                   ex      (SP),HL         ; Save old , Get new
2737+ 24E4 22 2C 82             ld      (FNRGNM),HL     ; Set new argument name
2738+ 24E7 2A 30 82             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2739+ 24EA E5                   push    HL              ; Save it
2740+ 24EB 2A 2E 82             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2741+ 24EE E5                   push    HL              ; Save it
2742+ 24EF 21 2E 82             ld      HL,FNARG        ; HL = Value of argument
2743+ 24F2 D5                   push    DE              ; Save FN code string address
2744+ 24F3 CD 01 2F             call    FPTHL           ; Move FPREG to argument
2745+ 24F6 E1                   pop     HL              ; Get FN code string address
2746+ 24F7 CD 9C 20             call    GETNUM          ; Get value from function
2747+ 24FA 2B                   dec     HL              ; dec 'cos GETCHR INCs
2748+ 24FB CD 13 1C             call    GETCHR          ; Get next character
2749+ 24FE C2 F0 16             jp      NZ,SNERR        ; Bad character in FN - Error
2750+ 2501 E1                   pop     HL              ; Get MSB,EXP of old arg
2751+ 2502 22 2E 82             ld      (FNARG),HL      ; Restore it
2752+ 2505 E1                   pop     HL              ; Get LSB,NLSB of old arg
2753+ 2506 22 30 82             ld      (FNARG+2),HL    ; Restore it
2754+ 2509 E1                   pop     HL              ; Get name of old arg
2755+ 250A 22 2C 82             ld      (FNRGNM),HL     ; Restore it
2756+ 250D E1                   pop     HL              ; Restore code string address
2757+ 250E C9                   ret
2758+ 250F
2759+ 250F E5           IDTEST: push    HL              ; Save code string address
2760+ 2510 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
2761+ 2513 23                   inc     HL              ; -1 means direct statement
2762+ 2514 7C                   ld      A,H
2763+ 2515 B5                   or      L
2764+ 2516 E1                   pop     HL              ; Restore code string address
2765+ 2517 C0                   ret     NZ              ; Return if in program
2766+ 2518 1E 16                ld      E,ID            ; ?ID Error
2767+ 251A C3 04 17             jp      ERROR
2768+ 251D
2769+ 251D CD D2 19     CHEKFN: call    CHKSYN          ; Make sure FN follows
2770+ 2520 B8                   defb    ZFN             ; "FN" token
2771+ 2521 3E 80                ld      A,$80
2772+ 2523 32 B2 81             ld      (FORFLG),A      ; Flag FN name to find
2773+ 2526 B6                   or      (HL)            ; FN name has bit 7 set
2774+ 2527 47                   ld      B,A             ; in first byte of name
2775+ 2528 CD B0 22             call    GTFNAM          ; Get FN name
2776+ 252B C3 9F 20             jp      TSTNUM          ; Make sure numeric function
2777+ 252E
2778+ 252E CD 9F 20     STR:    call    TSTNUM          ; Make sure it's a number
2779+ 2531 CD 4E 30             call    NUMASC          ; Turn number into text
2780+ 2534 CD 62 25     STR1:   call    CRTST           ; Create string entry for it
2781+ 2537 CD E7 26             call    GSTRCU          ; Current string to pool
2782+ 253A 01 42 27             ld      BC,TOPOOL       ; Save in string pool
2783+ 253D C5                   push    BC              ; Save address on stack
2784+ 253E
2785+ 253E 7E           SAVSTR: ld      A,(HL)          ; Get string length
2786+ 253F 23                   inc     HL
2787+ 2540 23                   inc     HL
2788+ 2541 E5                   push    HL              ; Save pointer to string
2789+ 2542 CD BD 25             call    TESTR           ; See if enough string space
2790+ 2545 E1                   pop     HL              ; Restore pointer to string
2791+ 2546 4E                   ld      C,(HL)          ; Get LSB of address
2792+ 2547 23                   inc     HL
2793+ 2548 46                   ld      B,(HL)          ; Get MSB of address
2794+ 2549 CD 56 25             call    CRTMST          ; Create string entry
2795+ 254C E5                   push    HL              ; Save pointer to MSB of addr
2796+ 254D 6F                   ld      L,A             ; Length of string
2797+ 254E CD DA 26             call    TOSTRA          ; Move to string area
2798+ 2551 D1                   pop     DE              ; Restore pointer to MSB
2799+ 2552 C9                   ret
2800+ 2553
2801+ 2553 CD BD 25     MKTMST: call    TESTR           ; See if enough string space
2802+ 2556 21 A6 81     CRTMST: ld      HL,TMPSTR       ; Temporary string
2803+ 2559 E5                   push    HL              ; Save it
2804+ 255A 77                   ld      (HL),A          ; Save length of string
2805+ 255B 23                   inc     HL
2806+ 255C 23           SVSTAD: inc     HL
2807+ 255D 73                   ld      (HL),E          ; Save LSB of address
2808+ 255E 23                   inc     HL
2809+ 255F 72                   ld      (HL),D          ; Save MSB of address
2810+ 2560 E1                   pop     HL              ; Restore pointer
2811+ 2561 C9                   ret
2812+ 2562
2813+ 2562 2B           CRTST:  dec     HL              ; dec - INCed after
2814+ 2563 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2815+ 2565 50                   ld      D,B             ; Quote to D
2816+ 2566 E5           DTSTR:  push    HL              ; Save start
2817+ 2567 0E FF                ld      C,-1            ; Set counter to -1
2818+ 2569 23           QTSTLP: inc     HL              ; Move on
2819+ 256A 7E                   ld      A,(HL)          ; Get byte
2820+ 256B 0C                   inc     C               ; Count bytes
2821+ 256C B7                   or      A               ; End of line?
2822+ 256D CA 78 25             jp      Z,CRTSTE        ; Yes - Create string entry
2823+ 2570 BA                   cp      D               ; Terminator D found?
2824+ 2571 CA 78 25             jp      Z,CRTSTE        ; Yes - Create string entry
2825+ 2574 B8                   cp      B               ; Terminator B found?
2826+ 2575 C2 69 25             jp      NZ,QTSTLP       ; No - Keep looking
2827+ 2578 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2828+ 257A CC 13 1C             call    Z,GETCHR        ; Yes - Get next character
2829+ 257D E3                   ex      (SP),HL         ; Starting quote
2830+ 257E 23                   inc     HL              ; First byte of string
2831+ 257F EB                   ex      DE,HL           ; To DE
2832+ 2580 79                   ld      A,C             ; Get length
2833+ 2581 CD 56 25             call    CRTMST          ; Create string entry
2834+ 2584 11 A6 81     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2835+ 2587 2A 98 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2836+ 258A 22 32 82             ld      (FPREG),HL      ; Save address of string ptr
2837+ 258D 3E 01                ld      A,$01
2838+ 258F 32 94 81             ld      (TYPE),A        ; Set type to string
2839+ 2592 CD 04 2F             call    DETHL4          ; Move string to pool
2840+ 2595 CD CC 19             call    CPDEHL          ; Out of string pool?
2841+ 2598 22 98 81             ld      (TMSTPT),HL     ; Save new pointer
2842+ 259B E1                   pop     HL              ; Restore code string address
2843+ 259C 7E                   ld      A,(HL)          ; Get next code byte
2844+ 259D C0                   ret     NZ              ; Return if pool OK
2845+ 259E 1E 1E                ld      E,ST            ; ?ST Error
2846+ 25A0 C3 04 17             jp      ERROR           ; String pool overflow
2847+ 25A3
2848+ 25A3 23           PRNUMS: inc     HL              ; Skip leading space
2849+ 25A4 CD 62 25     PRS:    call    CRTST           ; Create string entry for it
2850+ 25A7 CD E7 26     PRS1:   call    GSTRCU          ; Current string to pool
2851+ 25AA CD F8 2E             call    LOADFP          ; Move string block to BCDE
2852+ 25AD 1C                   inc     E               ; Length + 1
2853+ 25AE 1D           PRSLP:  dec     E               ; Count characters
2854+ 25AF C8                   ret     Z               ; End of string
2855+ 25B0 0A                   ld      A,(BC)          ; Get byte to output
2856+ 25B1 CD DD 19             call    OUTC            ; Output character in A
2857+ 25B4 FE 0D                cp      CR              ; Return?
2858+ 25B6 CC EA 1E             call    Z,CNTEND        ; Yes - Position cursor to 0
2859+ 25B9 03                   inc     BC              ; Next byte in string
2860+ 25BA C3 AE 25             jp      PRSLP           ; More characters to output
2861+ 25BD
2862+ 25BD B7           TESTR:  or      A               ; Test if enough room
2863+ 25BE 0E                   defb    $0E             ; No garbage collection done
2864+ 25BF F1           GRBDON: pop     AF              ; Garbage collection done
2865+ 25C0 F5                   push    AF              ; Save status
2866+ 25C1 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2867+ 25C4 EB                   ex      DE,HL           ; To DE
2868+ 25C5 2A AA 81             ld      HL,(STRBOT)     ; Bottom of string area
2869+ 25C8 2F                   cpl                     ; Negate length (Top down)
2870+ 25C9 4F                   ld      C,A             ; -Length to BC
2871+ 25CA 06 FF                ld      B,-1            ; BC = -ve length of string
2872+ 25CC 09                   add     HL,BC           ; Add to bottom of space in use
2873+ 25CD 23                   inc     HL              ; Plus one for 2's complement
2874+ 25CE CD CC 19             call    CPDEHL          ; Below string RAM area?
2875+ 25D1 DA DB 25             jp      C,TESTOS        ; Tidy up if not done else err
2876+ 25D4 22 AA 81             ld      (STRBOT),HL     ; Save new bottom of area
2877+ 25D7 23                   inc     HL              ; Point to first byte of string
2878+ 25D8 EB                   ex      DE,HL           ; Address to DE
2879+ 25D9 F1           POPAF:  pop     AF              ; Throw away status push
2880+ 25DA C9                   ret
2881+ 25DB
2882+ 25DB F1           TESTOS: pop     AF              ; Garbage collect been done?
2883+ 25DC 1E 1A                ld      E,OS            ; ?OS Error
2884+ 25DE CA 04 17             jp      Z,ERROR         ; Yes - Not enough string space
2885+ 25E1 BF                   cp      A               ; Flag garbage collect done
2886+ 25E2 F5                   push    AF              ; Save status
2887+ 25E3 01 BF 25             ld      BC,GRBDON       ; Garbage collection done
2888+ 25E6 C5                   push    BC              ; Save for RETurn
2889+ 25E7 2A 96 81     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2890+ 25EA 22 AA 81     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2891+ 25ED 21 00 00             ld      HL,$0000
2892+ 25F0 E5                   push    HL              ; Flag no string found
2893+ 25F1 2A AD 80             ld      HL,(STRSPC)     ; Get bottom of string space
2894+ 25F4 E5                   push    HL              ; Save bottom of string space
2895+ 25F5 21 9A 81             ld      HL,TMSTPL       ; Temporary string pool
2896+ 25F8 EB           GRBLP:  ex      DE,HL
2897+ 25F9 2A 98 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2898+ 25FC EB                   ex      DE,HL
2899+ 25FD CD CC 19             call    CPDEHL          ; Temporary string pool done?
2900+ 2600 01 F8 25             ld      BC,GRBLP        ; Loop until string pool done
2901+ 2603 C2 4C 26             jp      NZ,STPOOL       ; No - See if in string area
2902+ 2606 2A 24 82             ld      HL,(PROGND)     ; Start of simple variables
2903+ 2609 EB           SMPVAR: ex      DE,HL
2904+ 260A 2A 26 82             ld      HL,(VAREND)     ; End of simple variables
2905+ 260D EB                   ex      DE,HL
2906+ 260E CD CC 19             call    CPDEHL          ; All simple strings done?
2907+ 2611 CA 1F 26             jp      Z,ARRLP         ; Yes - Do string arrays
2908+ 2614 7E                   ld      A,(HL)          ; Get type of variable
2909+ 2615 23                   inc     HL
2910+ 2616 23                   inc     HL
2911+ 2617 B7                   or      A               ; "S" flag set if string
2912+ 2618 CD 4F 26             call    STRADD          ; See if string in string area
2913+ 261B C3 09 26             jp      SMPVAR          ; Loop until simple ones done
2914+ 261E
2915+ 261E C1           GNXARY: pop     BC              ; Scrap address of this array
2916+ 261F EB           ARRLP:  ex      DE,HL
2917+ 2620 2A 28 82             ld      HL,(ARREND)     ; End of string arrays
2918+ 2623 EB                   ex      DE,HL
2919+ 2624 CD CC 19             call    CPDEHL          ; All string arrays done?
2920+ 2627 CA 75 26             jp      Z,SCNEND        ; Yes - Move string if found
2921+ 262A CD F8 2E             call    LOADFP          ; Get array name to BCDE
2922+ 262D 7B                   ld      A,E             ; Get type of array
2923+ 262E E5                   push    HL              ; Save address of num of dim'ns
2924+ 262F 09                   add     HL,BC           ; Start of next array
2925+ 2630 B7                   or      A               ; Test type of array
2926+ 2631 F2 1E 26             jp      P,GNXARY        ; Numeric array - Ignore it
2927+ 2634 22 AC 81             ld      (CUROPR),HL     ; Save address of next array
2928+ 2637 E1                   pop     HL              ; Get address of num of dim'ns
2929+ 2638 4E                   ld      C,(HL)          ; BC = Number of dimensions
2930+ 2639 06 00                ld      B,$00
2931+ 263B 09                   add     HL,BC           ; Two bytes per dimension size
2932+ 263C 09                   add     HL,BC
2933+ 263D 23                   inc     HL              ; Plus one for number of dim'ns
2934+ 263E EB           GRBARY: ex      DE,HL
2935+ 263F 2A AC 81             ld      HL,(CUROPR)     ; Get address of next array
2936+ 2642 EB                   ex      DE,HL
2937+ 2643 CD CC 19             call    CPDEHL          ; Is this array finished?
2938+ 2646 CA 1F 26             jp      Z,ARRLP         ; Yes - Get next one
2939+ 2649 01 3E 26             ld      BC,GRBARY       ; Loop until array all done
2940+ 264C C5           STPOOL: push    BC              ; Save return address
2941+ 264D F6 80                or      $80             ; Flag string type
2942+ 264F 7E           STRADD: ld      A,(HL)          ; Get string length
2943+ 2650 23                   inc     HL
2944+ 2651 23                   inc     HL
2945+ 2652 5E                   ld      E,(HL)          ; Get LSB of string address
2946+ 2653 23                   inc     HL
2947+ 2654 56                   ld      D,(HL)          ; Get MSB of string address
2948+ 2655 23                   inc     HL
2949+ 2656 F0                   ret     P               ; Not a string - Return
2950+ 2657 B7                   or      A               ; Set flags on string length
2951+ 2658 C8                   ret     Z               ; Null string - Return
2952+ 2659 44                   ld      B,H             ; Save variable pointer
2953+ 265A 4D                   ld      C,L
2954+ 265B 2A AA 81             ld      HL,(STRBOT)     ; Bottom of new area
2955+ 265E CD CC 19             call    CPDEHL          ; String been done?
2956+ 2661 60                   ld      H,B             ; Restore variable pointer
2957+ 2662 69                   ld      L,C
2958+ 2663 D8                   ret     C               ; String done - Ignore
2959+ 2664 E1                   pop     HL              ; Return address
2960+ 2665 E3                   ex      (SP),HL         ; Lowest available string area
2961+ 2666 CD CC 19             call    CPDEHL          ; String within string area?
2962+ 2669 E3                   ex      (SP),HL         ; Lowest available string area
2963+ 266A E5                   push    HL              ; Re-save return address
2964+ 266B 60                   ld      H,B             ; Restore variable pointer
2965+ 266C 69                   ld      L,C
2966+ 266D D0                   ret     NC              ; Outside string area - Ignore
2967+ 266E C1                   pop     BC              ; Get return , Throw 2 away
2968+ 266F F1                   pop     AF              ;
2969+ 2670 F1                   pop     AF              ;
2970+ 2671 E5                   push    HL              ; Save variable pointer
2971+ 2672 D5                   push    DE              ; Save address of current
2972+ 2673 C5                   push    BC              ; Put back return address
2973+ 2674 C9                   ret                     ; Go to it
2974+ 2675
2975+ 2675 D1           SCNEND: pop     DE              ; Addresses of strings
2976+ 2676 E1                   pop     HL              ;
2977+ 2677 7D                   ld      A,L             ; HL = 0 if no more to do
2978+ 2678 B4                   or      H
2979+ 2679 C8                   ret     Z               ; No more to do - Return
2980+ 267A 2B                   dec     HL
2981+ 267B 46                   ld      B,(HL)          ; MSB of address of string
2982+ 267C 2B                   dec     HL
2983+ 267D 4E                   ld      C,(HL)          ; LSB of address of string
2984+ 267E E5                   push    HL              ; Save variable address
2985+ 267F 2B                   dec     HL
2986+ 2680 2B                   dec     HL
2987+ 2681 6E                   ld      L,(HL)          ; HL = Length of string
2988+ 2682 26 00                ld      H,$00
2989+ 2684 09                   add     HL,BC           ; Address of end of string+1
2990+ 2685 50                   ld      D,B             ; String address to DE
2991+ 2686 59                   ld      E,C
2992+ 2687 2B                   dec     HL              ; Last byte in string
2993+ 2688 44                   ld      B,H             ; Address to BC
2994+ 2689 4D                   ld      C,L
2995+ 268A 2A AA 81             ld      HL,(STRBOT)     ; Current bottom of string area
2996+ 268D CD 9F 16             call    MOVSTR          ; Move string to new address
2997+ 2690 E1                   pop     HL              ; Restore variable address
2998+ 2691 71                   ld      (HL),C          ; Save new LSB of address
2999+ 2692 23                   inc     HL
3000+ 2693 70                   ld      (HL),B          ; Save new MSB of address
3001+ 2694 69                   ld      L,C             ; Next string area+1 to HL
3002+ 2695 60                   ld      H,B
3003+ 2696 2B                   dec     HL              ; Next string area address
3004+ 2697 C3 EA 25             jp      GARBLP          ; Look for more strings
3005+ 269A
3006+ 269A C5           CONCAT: push    BC              ; Save prec' opr & code string
3007+ 269B E5                   push    HL              ;
3008+ 269C 2A 32 82             ld      HL,(FPREG)      ; Get first string
3009+ 269F E3                   ex      (SP),HL         ; Save first string
3010+ 26A0 CD 25 21             call    OPRND           ; Get second string
3011+ 26A3 E3                   ex      (SP),HL         ; Restore first string
3012+ 26A4 CD A0 20             call    TSTSTR          ; Make sure it's a string
3013+ 26A7 7E                   ld      A,(HL)          ; Get length of second string
3014+ 26A8 E5                   push    HL              ; Save first string
3015+ 26A9 2A 32 82             ld      HL,(FPREG)      ; Get second string
3016+ 26AC E5                   push    HL              ; Save second string
3017+ 26AD 86                   add     A,(HL)          ; Add length of second string
3018+ 26AE 1E 1C                ld      E,LS            ; ?LS Error
3019+ 26B0 DA 04 17             jp      C,ERROR         ; String too long - Error
3020+ 26B3 CD 53 25             call    MKTMST          ; Make temporary string
3021+ 26B6 D1                   pop     DE              ; Get second string to DE
3022+ 26B7 CD EB 26             call    GSTRDE          ; Move to string pool if needed
3023+ 26BA E3                   ex      (SP),HL         ; Get first string
3024+ 26BB CD EA 26             call    GSTRHL          ; Move to string pool if needed
3025+ 26BE E5                   push    HL              ; Save first string
3026+ 26BF 2A A8 81             ld      HL,(TMPSTR+2)   ; Temporary string address
3027+ 26C2 EB                   ex      DE,HL           ; To DE
3028+ 26C3 CD D1 26             call    SSTSA           ; First string to string area
3029+ 26C6 CD D1 26             call    SSTSA           ; Second string to string area
3030+ 26C9 21 BA 20             ld      HL,EVAL2        ; Return to evaluation loop
3031+ 26CC E3                   ex      (SP),HL         ; Save return,get code string
3032+ 26CD E5                   push    HL              ; Save code string address
3033+ 26CE C3 84 25             jp      TSTOPL          ; To temporary string to pool
3034+ 26D1
3035+ 26D1 E1           SSTSA:  pop     HL              ; Return address
3036+ 26D2 E3                   ex      (SP),HL         ; Get string block,save return
3037+ 26D3 7E                   ld      A,(HL)          ; Get length of string
3038+ 26D4 23                   inc     HL
3039+ 26D5 23                   inc     HL
3040+ 26D6 4E                   ld      C,(HL)          ; Get LSB of string address
3041+ 26D7 23                   inc     HL
3042+ 26D8 46                   ld      B,(HL)          ; Get MSB of string address
3043+ 26D9 6F                   ld      L,A             ; Length to L
3044+ 26DA 2C           TOSTRA: inc     L               ; inc - DECed after
3045+ 26DB 2D           TSALP:  dec     L               ; Count bytes moved
3046+ 26DC C8                   ret     Z               ; End of string - Return
3047+ 26DD 0A                   ld      A,(BC)          ; Get source
3048+ 26DE 12                   ld      (DE),A          ; Save destination
3049+ 26DF 03                   inc     BC              ; Next source
3050+ 26E0 13                   inc     DE              ; Next destination
3051+ 26E1 C3 DB 26             jp      TSALP           ; Loop until string moved
3052+ 26E4
3053+ 26E4 CD A0 20     GETSTR: call    TSTSTR          ; Make sure it's a string
3054+ 26E7 2A 32 82     GSTRCU: ld      HL,(FPREG)      ; Get current string
3055+ 26EA EB           GSTRHL: ex      DE,HL           ; Save DE
3056+ 26EB CD 05 27     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3057+ 26EE EB                   ex      DE,HL           ; Restore DE
3058+ 26EF C0                   ret     NZ              ; No - Return
3059+ 26F0 D5                   push    DE              ; Save string
3060+ 26F1 50                   ld      D,B             ; String block address to DE
3061+ 26F2 59                   ld      E,C
3062+ 26F3 1B                   dec     DE              ; Point to length
3063+ 26F4 4E                   ld      C,(HL)          ; Get string length
3064+ 26F5 2A AA 81             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 26F8 CD CC 19             call    CPDEHL          ; Last one in string area?
3066+ 26FB C2 03 27             jp      NZ,POPHL        ; No - Return
3067+ 26FE 47                   ld      B,A             ; Clear B (A=0)
3068+ 26FF 09                   add     HL,BC           ; Remove string from str' area
3069+ 2700 22 AA 81             ld      (STRBOT),HL     ; Save new bottom of str' area
3070+ 2703 E1           POPHL:  pop     HL              ; Restore string
3071+ 2704 C9                   ret
3072+ 2705
3073+ 2705 2A 98 81     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3074+ 2708 2B                   dec     HL              ; Back
3075+ 2709 46                   ld      B,(HL)          ; Get MSB of address
3076+ 270A 2B                   dec     HL              ; Back
3077+ 270B 4E                   ld      C,(HL)          ; Get LSB of address
3078+ 270C 2B                   dec     HL              ; Back
3079+ 270D 2B                   dec     HL              ; Back
3080+ 270E CD CC 19             call    CPDEHL          ; String last in string pool?
3081+ 2711 C0                   ret     NZ              ; Yes - Leave it
3082+ 2712 22 98 81             ld      (TMSTPT),HL     ; Save new string pool top
3083+ 2715 C9                   ret
3084+ 2716
3085+ 2716 01 95 24     LEN:    ld      BC,PASSA        ; To return integer A
3086+ 2719 C5                   push    BC              ; Save address
3087+ 271A CD E4 26     GETLEN: call    GETSTR          ; Get string and its length
3088+ 271D AF                   xor     A
3089+ 271E 57                   ld      D,A             ; Clear D
3090+ 271F 32 94 81             ld      (TYPE),A        ; Set type to numeric
3091+ 2722 7E                   ld      A,(HL)          ; Get length of string
3092+ 2723 B7                   or      A               ; Set status flags
3093+ 2724 C9                   ret
3094+ 2725
3095+ 2725 01 95 24     ASC:    ld      BC,PASSA        ; To return integer A
3096+ 2728 C5                   push    BC              ; Save address
3097+ 2729 CD 1A 27     GTFLNM: call    GETLEN          ; Get length of string
3098+ 272C CA DE 1C             jp      Z,FCERR         ; Null string - Error
3099+ 272F 23                   inc     HL
3100+ 2730 23                   inc     HL
3101+ 2731 5E                   ld      E,(HL)          ; Get LSB of address
3102+ 2732 23                   inc     HL
3103+ 2733 56                   ld      D,(HL)          ; Get MSB of address
3104+ 2734 1A                   ld      A,(DE)          ; Get first byte of string
3105+ 2735 C9                   ret
3106+ 2736
3107+ 2736 3E 01        CHR:    ld      A,$01           ; One character string
3108+ 2738 CD 53 25             call    MKTMST          ; Make a temporary string
3109+ 273B CD 25 29             call    MAKINT          ; Make it integer A
3110+ 273E 2A A8 81             ld      HL,(TMPSTR+2)   ; Get address of string
3111+ 2741 73                   ld      (HL),E          ; Save character
3112+ 2742 C1           TOPOOL: pop     BC              ; Clean up stack
3113+ 2743 C3 84 25             jp      TSTOPL          ; Temporary string to pool
3114+ 2746
3115+ 2746 CD D5 28     LEFT:   call    LFRGNM          ; Get number and ending ")"
3116+ 2749 AF                   xor     A               ; Start at first byte in string
3117+ 274A E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3118+ 274B 4F                   ld      C,A             ; Starting position in string
3119+ 274C E5           MID1:   push    HL              ; Save string block address
3120+ 274D 7E                   ld      A,(HL)          ; Get length of string
3121+ 274E B8                   cp      B               ; Compare with number given
3122+ 274F DA 54 27             jp      C,ALLFOL        ; All following bytes required
3123+ 2752 78                   ld      A,B             ; Get new length
3124+ 2753 11                   defb    $11             ; Skip "ld C,0"
3125+ 2754 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3126+ 2756 C5                   push    BC              ; Save position in string
3127+ 2757 CD BD 25             call    TESTR           ; See if enough string space
3128+ 275A C1                   pop     BC              ; Get position in string
3129+ 275B E1                   pop     HL              ; Restore string block address
3130+ 275C E5                   push    HL              ; And re-save it
3131+ 275D 23                   inc     HL
3132+ 275E 23                   inc     HL
3133+ 275F 46                   ld      B,(HL)          ; Get LSB of address
3134+ 2760 23                   inc     HL
3135+ 2761 66                   ld      H,(HL)          ; Get MSB of address
3136+ 2762 68                   ld      L,B             ; HL = address of string
3137+ 2763 06 00                ld      B,$00           ; BC = starting address
3138+ 2765 09                   add     HL,BC           ; Point to that byte
3139+ 2766 44                   ld      B,H             ; BC = source string
3140+ 2767 4D                   ld      C,L
3141+ 2768 CD 56 25             call    CRTMST          ; Create a string entry
3142+ 276B 6F                   ld      L,A             ; Length of new string
3143+ 276C CD DA 26             call    TOSTRA          ; Move string to string area
3144+ 276F D1                   pop     DE              ; Clear stack
3145+ 2770 CD EB 26             call    GSTRDE          ; Move to string pool if needed
3146+ 2773 C3 84 25             jp      TSTOPL          ; Temporary string to pool
3147+ 2776
3148+ 2776
3149+ 2776              ; INSTR statement - look for a string inside another string
3150+ 2776              ; usage: INSTR(A$,B$) -> search for B$ into A$
3151+ 2776              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3152+ 2776              ; return 1~255 to indicate the starting position of B$ into A$
3153+ 2776              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3154+ 2776              LNS1    equ     TMPBFR1
3155+ 2776              ADRS1   equ     TMPBFR2
3156+ 2776              LNS2    equ     TMPBFR3
3157+ 2776              ADRS2   equ     TMPBFR4
3158+ 2776              PT      equ     VIDEOBUFF
3159+ 2776              PT1     equ     VIDEOBUFF+2
3160+ 2776              PT2     equ     VIDEOBUFF+4
3161+ 2776              TP      equ     VIDEOBUFF+6
3162+ 2776              TF      equ     VIDEOBUFF+8
3163+ 2776 CD D2 19     INSTR:  call    CHKSYN          ; make sure "(" follows
3164+ 2779 28                   defb    '('
3165+ 277A 2B                   dec     HL              ; dec 'cause GETCHR increments
3166+ 277B CD 13 1C             call    GETCHR          ; check if something follows
3167+ 277E CA F0 16             jp      Z,SNERR         ; if nothing else, raise a syntax error
3168+ 2781 CD AE 20             call    EVAL            ; Evaluate expression
3169+ 2784 CD A0 20             call    TSTSTR          ; Make sure it's a string
3170+ 2787 22 E6 81             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3171+ 278A CD E7 26             call    GSTRCU          ; check that a string follows
3172+ 278D CD F8 2E             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3173+ 2790 ED 53 DE 81          ld      (LNS1),DE       ; store values into
3174+ 2794 ED 43 E0 81          ld      (ADRS1),BC      ; temp buffers
3175+ 2798 2A E6 81             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3176+ 279B CD D2 19             call    CHKSYN          ; Make sure ',' follows
3177+ 279E 2C                   defb    ','
3178+ 279F 2B                   dec     HL              ; dec 'cause GETCHR increments
3179+ 27A0 CD 13 1C             call    GETCHR          ; check if something follows
3180+ 27A3 CA F0 16             jp      Z,SNERR         ; if nothing else, raise a syntax error
3181+ 27A6 CD AE 20             call    EVAL            ; Evaluate expression
3182+ 27A9 CD A0 20             call    TSTSTR          ; Make sure it's a string
3183+ 27AC 22 E6 81             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3184+ 27AF CD E7 26             call    GSTRCU          ; check that a string follows
3185+ 27B2 CD F8 2E             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3186+ 27B5 ED 53 E2 81          ld      (LNS2),DE       ; store values into
3187+ 27B9 ED 43 E4 81          ld      (ADRS2),BC      ; temp buffers
3188+ 27BD 2A E6 81             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3189+ 27C0 CD D2 19             call    CHKSYN          ; make sure ")" follows
3190+ 27C3 29                   defb    ')'
3191+ 27C4 E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3192+ 27C5 FD E1                pop     IY              ; ...into IY
3193+ 27C7 AF                   xor     A               ; reset 10 RAM cells
3194+ 27C8 06 0A                ld      B,$0A           ; (INSTR registers)
3195+ 27CA 21 E6 81             ld      HL,PT           ; first cell
3196+ 27CD 77           EMPTINS:ld      (HL),A          ; reset cell
3197+ 27CE 23                   inc     HL              ; next cell
3198+ 27CF 10 FC                djnz    EMPTINS         ; repeat
3199+ 27D1 ED 5B E2 81          ld      DE,(LNS2)       ; load len(S2) into DE
3200+ 27D5 2A DE 81             ld      HL,(LNS1)       ; load len(S1) into HL
3201+ 27D8 CD DF 3F             call    CMP16           ; check that len(S1)>=len(S2)
3202+ 27DB DA 50 28             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3203+ 27DE AF           RPTINST:xor     A               ; reset...
3204+ 27DF 32 EC 81             ld      (TP),A          ; ...TP...
3205+ 27E2 32 EE 81             ld      (TF),A          ; ...and TF
3206+ 27E5 ED 4B E6 81          ld      BC,(PT)         ; pointer to S1
3207+ 27E9 2A E0 81             ld      HL,(ADRS1)      ; first cell of S1
3208+ 27EC 09                   add     HL,BC           ; get current position into RAM
3209+ 27ED 7E                   ld      A,(HL)          ; load S1(PT)
3210+ 27EE 2A E4 81             ld      HL,(ADRS2)      ; pointer to first char of S2
3211+ 27F1 BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3212+ 27F2 20 3A                jr      NZ,CNT1INS      ; no, continue
3213+ 27F4 3A E6 81             ld      A,(PT)          ; load current PT
3214+ 27F7 32 EC 81             ld      (TP),A          ; TP=PT
3215+ 27FA 32 E8 81             ld      (PT1),A         ; P1=PT
3216+ 27FD AF                   xor     A               ; set...
3217+ 27FE 32 EA 81             ld      (PT2),A         ; ...PT2=0
3218+ 2801 3C                   inc     A               ;
3219+ 2802 32 EE 81             ld      (TF),A          ; set TF=1
3220+ 2805 ED 4B E8 81  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3221+ 2809 2A E0 81             ld      HL,(ADRS1)      ; load address of S1
3222+ 280C 09                   add     HL,BC           ; find char of S1 pointed by PT1
3223+ 280D 7E                   ld      A,(HL)          ; load S1(PT1)
3224+ 280E ED 4B EA 81          ld      BC,(PT2)        ; load pointer PT2
3225+ 2812 2A E4 81             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3226+ 2815 09                   add     HL,BC           ; find S2(PT2)
3227+ 2816 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3228+ 2817 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3229+ 2819 21 E8 81             ld      HL,PT1
3230+ 281C 34                   inc     (HL)            ; increment PT1
3231+ 281D 3A EA 81             ld      A,(PT2)
3232+ 2820 3C                   inc     A               ; increment PT2
3233+ 2821 32 EA 81             ld      (PT2),A
3234+ 2824 CA 2E 28             jp      Z,CNT1INS       ; if PT2>255 then exit
3235+ 2827 21 E2 81             ld      HL,LNS2         ; len(S2)
3236+ 282A BE                   cp      (HL)            ; PT2=len(S2)?
3237+ 282B DA 05 28             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3238+ 282E 3A EE 81     CNT1INS:ld      A,(TF)          ; check TF
3239+ 2831 A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3240+ 2832 20 1C                jr      NZ,RZINSTR      ; no, exit
3241+ 2834 2A DE 81             ld      HL,(LNS1)       ; load len(S1)
3242+ 2837 ED 4B E2 81          ld      BC,(LNS2)       ; load len(S2)
3243+ 283B ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3244+ 283D ED 5B E6 81          ld      DE,(PT)         ; load pointer
3245+ 2841 1C                   inc     E               ; PT=PT+1
3246+ 2842 ED 53 E6 81          ld      (PT),DE         ; store new value
3247+ 2846 EB                   ex      DE,HL           ; invert registers
3248+ 2847 CD DF 3F             call    CMP16           ; check if PT>len(S1)-len(S2)
3249+ 284A DA DE 27             jp      C,RPTINST       ; repeat if <
3250+ 284D CA DE 27             jp      Z,RPTINST       ; repeat if =
3251+ 2850 3A EE 81     RZINSTR:ld      A,(TF)          ; current value of TF
3252+ 2853 A7                   and     A               ; is it 0?
3253+ 2854 CA 5B 28             jp      Z,LVINSTR       ; yes, return 0
3254+ 2857 3A EC 81             ld      A,(TP)          ; return TP...
3255+ 285A 3C                   inc     A               ; ...incremented by 1
3256+ 285B E1           LVINSTR:pop     HL              ; drop original return point
3257+ 285C FD E5                push    IY              ; load current string address from IY into stack
3258+ 285E 11 87 21             ld      DE,RETNUM       ; Address of Return number from function...
3259+ 2861 D5                   push    DE              ; ...saved on stack
3260+ 2862 C3 95 24             jp      PASSA           ; return TP
3261+ 2865 AF           CNTZIN: xor     A               ; set...
3262+ 2866 32 EE 81             ld      (TF),A          ; TF=0
3263+ 2869 C3 2E 28             jp      CNT1INS         ; continue
3264+ 286C
3265+ 286C
3266+ 286C              ; returns the right portion of a string
3267+ 286C CD D5 28     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3268+ 286F D1                   pop     DE              ; Get string length
3269+ 2870 D5                   push    DE              ; And re-save
3270+ 2871 1A                   ld      A,(DE)          ; Get length
3271+ 2872 90                   sub     B               ; Move back N bytes
3272+ 2873 C3 4A 27             jp      RIGHT1          ; Go and get sub-string
3273+ 2876
3274+ 2876              ; returns a piece of a string
3275+ 2876 EB           MID:    ex      DE,HL           ; Get code string address
3276+ 2877 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3277+ 2878 CD DA 28             call    MIDNUM          ; Get number supplied
3278+ 287B 04                   inc     B               ; Is it character zero?
3279+ 287C 05                   dec     B
3280+ 287D CA DE 1C             jp      Z,FCERR         ; Yes - Error
3281+ 2880 C5                   push    BC              ; Save starting position
3282+ 2881 1E FF                ld      E,$FF           ; All of string
3283+ 2883 FE 29                cp      ')'             ; Any length given?
3284+ 2885 CA 8F 28             jp      Z,RSTSTR        ; No - Rest of string
3285+ 2888 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3286+ 288B 2C                   defb    ','
3287+ 288C CD 22 29             call    GETINT          ; Get integer 0-255
3288+ 288F CD D2 19     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3289+ 2892 29                   defb    ')'
3290+ 2893 F1                   pop     AF              ; Restore starting position
3291+ 2894 E3                   ex      (SP),HL         ; Get string,save code string
3292+ 2895 01 4C 27             ld      BC,MID1         ; Continuation of MID$ routine
3293+ 2898 C5                   push    BC              ; Save for return
3294+ 2899 3D                   dec     A               ; Starting position-1
3295+ 289A BE                   cp      (HL)            ; Compare with length
3296+ 289B 06 00                ld      B,$00           ; Zero bytes length
3297+ 289D D0                   ret     NC              ; Null string if start past end
3298+ 289E 4F                   ld      C,A             ; Save starting position-1
3299+ 289F 7E                   ld      A,(HL)          ; Get length of string
3300+ 28A0 91                   sub     C               ; Subtract start
3301+ 28A1 BB                   cp      E               ; Enough string for it?
3302+ 28A2 47                   ld      B,A             ; Save maximum length available
3303+ 28A3 D8                   ret     C               ; Truncate string if needed
3304+ 28A4 43                   ld      B,E             ; Set specified length
3305+ 28A5 C9                   ret                     ; Go and create string
3306+ 28A6
3307+ 28A6
3308+ 28A6              ; return the value of a numeric string
3309+ 28A6 CD 1A 27     VAL:    call    GETLEN          ; Get length of string
3310+ 28A9 CA 78 2C             jp      Z,RESZER        ; Result zero
3311+ 28AC 5F                   ld      E,A             ; Save length
3312+ 28AD 23                   inc     HL
3313+ 28AE 23                   inc     HL
3314+ 28AF 7E                   ld      A,(HL)          ; Get LSB of address
3315+ 28B0 23                   inc     HL
3316+ 28B1 66                   ld      H,(HL)          ; Get MSB of address
3317+ 28B2 6F                   ld      L,A             ; HL = String address
3318+ 28B3 E5                   push    HL              ; Save string address
3319+ 28B4 19                   add     HL,DE
3320+ 28B5 46                   ld      B,(HL)          ; Get end of string+1 byte
3321+ 28B6 72                   ld      (HL),D          ; Zero it to terminate
3322+ 28B7 E3                   ex      (SP),HL         ; Save string end,get start
3323+ 28B8 C5                   push    BC              ; Save end+1 byte
3324+ 28B9 7E                   ld      A,(HL)          ; Get starting byte
3325+ 28BA FE 24                cp      '$'             ; Hex number indicated? [function added]
3326+ 28BC C2 C4 28             jp      NZ,VAL1
3327+ 28BF CD 18 3F             call    HEXTFP          ; Convert Hex to FPREG
3328+ 28C2 18 0D                jr      VAL3
3329+ 28C4 FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3330+ 28C6 C2 CE 28             jp      NZ,VAL2
3331+ 28C9 CD 88 3F             call    BINTFP          ; Convert Bin to FPREG
3332+ 28CC 18 03                jr      VAL3
3333+ 28CE CD B0 2F     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3334+ 28D1 C1           VAL3:   pop     BC              ; Restore end+1 byte
3335+ 28D2 E1                   pop     HL              ; Restore end+1 address
3336+ 28D3 70                   ld      (HL),B          ; Put back original byte
3337+ 28D4 C9                   ret
3338+ 28D5
3339+ 28D5 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3340+ 28D6 CD D2 19             call    CHKSYN          ; Make sure ")" follows
3341+ 28D9 29                   defb    ')'
3342+ 28DA C1           MIDNUM: pop     BC              ; Get return address
3343+ 28DB D1                   pop     DE              ; Get number supplied
3344+ 28DC C5                   push    BC              ; Re-save return address
3345+ 28DD 43                   ld      B,E             ; Number to B
3346+ 28DE C9                   ret
3347+ 28DF
3348+ 28DF CD 25 29     INP:    call    MAKINT          ; Make it integer A
3349+ 28E2 32 A0 80             ld      (INPORT),A      ; Set input port
3350+ 28E5 CD 9F 80             call    INPSUB          ; Get input from port
3351+ 28E8 C3 95 24             jp      PASSA           ; Return integer A
3352+ 28EB
3353+ 28EB CD 0F 29     POUT:   call    SETIO           ; Set up port number
3354+ 28EE C3 67 80             jp      OUTSUB          ; Output data and return
3355+ 28F1
3356+ 28F1 CD 0F 29     WAIT:   call    SETIO           ; Set up port number
3357+ 28F4 F5                   push    AF              ; Save AND mask
3358+ 28F5 1E 00                ld      E,$00           ; Assume zero if none given
3359+ 28F7 2B                   dec     HL              ; dec 'cos GETCHR INCs
3360+ 28F8 CD 13 1C             call    GETCHR          ; Get next character
3361+ 28FB CA 05 29             jp      Z,NOXOR         ; No XOR byte given
3362+ 28FE CD D2 19             call    CHKSYN          ; Make sure ',' follows
3363+ 2901 2C                   defb    ','
3364+ 2902 CD 22 29             call    GETINT          ; Get integer 0-255 to XOR with
3365+ 2905 C1           NOXOR:  pop     BC              ; Restore AND mask
3366+ 2906 CD 9F 80     WAITLP: call    INPSUB          ; Get input
3367+ 2909 AB                   xor     E               ; Flip selected bits
3368+ 290A A0                   and     B               ; Result non-zero?
3369+ 290B CA 06 29             jp      Z,WAITLP        ; No = keep waiting
3370+ 290E C9                   ret
3371+ 290F
3372+ 290F CD 22 29     SETIO:  call    GETINT          ; Get integer 0-255
3373+ 2912 32 A0 80             ld      (INPORT),A      ; Set input port
3374+ 2915 32 68 80             ld      (OTPORT),A      ; Set output port
3375+ 2918 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3376+ 291B 2C                   defb    ','
3377+ 291C C3 22 29             jp      GETINT          ; Get integer 0-255 and return
3378+ 291F
3379+ 291F CD 13 1C     FNDNUM: call    GETCHR          ; Get next character
3380+ 2922 CD 9C 20     GETINT: call    GETNUM          ; Get a number from 0 to 255
3381+ 2925 CD C3 1C     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3382+ 2928 7A                   ld      A,D             ; Get MSB of number
3383+ 2929 B7                   or      A               ; Zero?
3384+ 292A C2 DE 1C             jp      NZ,FCERR        ; No - Error
3385+ 292D 2B                   dec     HL              ; dec 'cos GETCHR INCs
3386+ 292E CD 13 1C             call    GETCHR          ; Get next character
3387+ 2931 7B                   ld      A,E             ; Get number to A
3388+ 2932 C9                   ret
3389+ 2933
3390+ 2933
3391+ 2933              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3392+ 2933              ; address must point to an ISR routine that terminates with EI/RETN instructions
3393+ 2933 CD 9C 20     NMI:    call    GETNUM          ; Get memory address
3394+ 2936 CD C9 1C             call    DEINT           ; get integer -32768 to 32767
3395+ 2939 7B                   ld      A,E             ; check if address is 0
3396+ 293A B2                   or      D
3397+ 293B 20 11                jr      NZ,NM1          ; no, so jump over
3398+ 293D F3           DISNMI: di                      ; disable INTs
3399+ 293E CD 6A 29             call    NMIDINT         ; disable VDP INT
3400+ 2941 E5                   push    HL              ; store HL
3401+ 2942 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3402+ 2945 22 61 80             ld      (NMIUSR),HL     ; store RETN
3403+ 2948 AF                   xor     A
3404+ 2949 32 63 80             ld      (NMIUSR+2),A    ; "NOP"
3405+ 294C 18 11                jr      NMI2            ; execute the last part of code
3406+ 294E E5           NM1:    push    HL              ; store current HL
3407+ 294F EB                   ex      DE,HL           ; move address argument into HL
3408+ 2950 F3                   di                      ; disable INTs
3409+ 2951 CD 6A 29             call    NMIDINT         ; disable VDP INT, if enabled
3410+ 2954 3E C3                ld      A,$C3           ; "jp" instruction
3411+ 2956 32 61 80             ld      (NMIUSR),A      ; store it
3412+ 2959 22 62 80             ld      (NMIUSR+1),HL   ; store address
3413+ 295C CD 63 29             call    NMIEINT         ; re-enable VDP INT
3414+ 295F FB           NMI2:   ei                      ; re-enable INTS
3415+ 2960 00                   nop                     ; wait for INTs
3416+ 2961 E1                   pop    HL               ; retrieve HL
3417+ 2962 C9                   ret                     ; return to caller
3418+ 2963              ; enable VDP INT
3419+ 2963 CD 79 29     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3420+ 2966 F6 20                or      %00100000       ; enable VDP INT
3421+ 2968 18 03                jr      NMIINT          ; rest of code is shared
3422+ 296A              ; disable VDP INT
3423+ 296A CD 79 29     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3424+ 296D D5           NMIINT: push    DE              ; store DE
3425+ 296E 5F                   ld      E,A             ; move value into E
3426+ 296F 3E 01                ld      A,$01           ; VREG #1
3427+ 2971 F3                   di                      ; disable INTs
3428+ 2972 CD C7 06             call    WRITE_VREG      ; disable VDP INT
3429+ 2975 FB                   ei                      ; re-enable INTs
3430+ 2976 00                   nop                     ; wait for INTs being enabled
3431+ 2977 D1                   pop     DE              ; retrieve DE
3432+ 2978 C9                   ret                     ; return to caller
3433+ 2979
3434+ 2979              ; load VREG #1 setting for current screen mode and return it into A
3435+ 2979 E5           NMIVR1: push    HL              ; store HL
3436+ 297A D5                   push    DE              ; store DE
3437+ 297B 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
3438+ 297E 87                   add     A,A             ; multiply A by 8...
3439+ 297F 87                   add     A,A             ; ...so that reg. A can points..
3440+ 2980 87                   add     A,A             ; to the correct settings
3441+ 2981 3C                   inc     A               ; need to change VREG 1
3442+ 2982 5F                   ld      E,A             ; copy A into E
3443+ 2983 16 00                ld      D,$00           ; reset D
3444+ 2985 21 3A 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3445+ 2988 19                   add     HL,DE           ; ...for current screen mode
3446+ 2989 7E                   ld      A,(HL)          ; load current setting
3447+ 298A D1                   pop     DE              ; retrieve DE
3448+ 298B E1                   pop     HL              ; retrieve HL
3449+ 298C C9                   ret                     ; return to caller
3450+ 298D
3451+ 298D              ; execute a machine language routine, eventually passing a param into A
3452+ 298D CD 9C 20     SYS:    call    GETNUM          ; Get memory address
3453+ 2990 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
3454+ 2993 ED 53 E0 81          ld      (TMPBFR2),DE    ; store user routine's address
3455+ 2997 AF                   xor     A               ; reset A
3456+ 2998 32 DE 81             ld      (TMPBFR1),A     ; store into temp buffer
3457+ 299B 2B                   dec     HL              ; dec 'cos GETCHR INCs
3458+ 299C CD 13 1C             call    GETCHR          ; check next character
3459+ 299F 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3460+ 29A1 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3461+ 29A4 2C                   defb    ','
3462+ 29A5 CD 22 29             call    GETINT          ; get byte value (0~255) if something follows
3463+ 29A8 32 DE 81             ld      (TMPBFR1),A     ; store into temp buffer
3464+ 29AB 3A DE 81     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3465+ 29AE ED 5B E0 81          ld      DE,(TMPBFR2)    ; recover user routine's address
3466+ 29B2 E5                   push    HL              ; save code string address
3467+ 29B3 EB                   ex      DE,HL           ; move user routine's address into HL
3468+ 29B4 11 B9 29             ld      DE,SYSRET       ; set point of return after the user routine
3469+ 29B7 D5                   push    DE              ; store into stack
3470+ 29B8 E9                   jp      (HL)            ; call user routine
3471+ 29B9 E1           SYSRET: pop     HL              ; retrieve code string address
3472+ 29BA C9                   ret                     ; return to caller
3473+ 29BB
3474+ 29BB
3475+ 29BB              ; read the contents of a RAM location
3476+ 29BB CD C9 1C     PEEK:   call    DEINT           ; Get memory address into DE
3477+ 29BE 1A                   ld      A,(DE)          ; Read value of memory cell
3478+ 29BF C3 95 24             jp      PASSA           ; Return into A
3479+ 29C2
3480+ 29C2              ; read the contents of a VRAM location
3481+ 29C2 CD C9 1C     VPEEK:  call    DEINT           ; Get VRAM address into DE
3482+ 29C5 EB                   ex      DE,HL           ; Copy param into HL
3483+ 29C6 F3                   di                      ; Disable interrupts
3484+ 29C7 CD 9D 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3485+ 29CA FB                   ei                      ; Re-enable interrupts
3486+ 29CB EB                   ex      DE,HL           ; Restore HL
3487+ 29CC C3 95 24             jp      PASSA           ; Return value into A
3488+ 29CF
3489+ 29CF              ; recover params for POKE/VPOKE commands
3490+ 29CF              ; returns address into DE and byte to be written into A
3491+ 29CF CD 9C 20     PKEPRMS:call    GETNUM          ; Get memory address
3492+ 29D2 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
3493+ 29D5 ED 53 DE 81          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3494+ 29D9 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3495+ 29DC 2C                   defb    ','
3496+ 29DD CD 22 29             call    GETINT          ; Get integer 0-255
3497+ 29E0 ED 5B DE 81          ld      DE,(TMPBFR1)    ; Restore memory address
3498+ 29E4 C9                   ret                     ; Return to caller
3499+ 29E5
3500+ 29E5              ; write a byte into a RAM location
3501+ 29E5 CD CF 29     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3502+ 29E8 12                   ld      (DE),A          ; Load it into memory
3503+ 29E9 C9                   ret
3504+ 29EA
3505+ 29EA              ; write a byte into a VRAM location
3506+ 29EA CD CF 29     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3507+ 29ED EB                   ex      DE,HL           ; Copy address into HL
3508+ 29EE F3                   di                      ; Disable interrupts
3509+ 29EF CD B2 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3510+ 29F2 FB                   ei                      ; Re-enable interrupts
3511+ 29F3 EB                   ex      DE,HL           ; Restore HL
3512+ 29F4 C9                   ret                     ; Return to caller
3513+ 29F5
3514+ 29F5              ; position the cursor at a specific X,Y location onto screen
3515+ 29F5 CD 22 29     LOCATE: call    GETINT          ; get the first param into A
3516+ 29F8 E5                   push    HL              ; store HL
3517+ 29F9 21 CD 81             ld      HL,SCR_SIZE_W   ; load address of screen width
3518+ 29FC 5E                   ld      E,(HL)          ; load screen width into E
3519+ 29FD E1                   pop     HL              ; restore HL
3520+ 29FE BB                   cp      E               ; compare witdh with param
3521+ 29FF D2 DE 1C             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3522+ 2A02 32 DE 81             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3523+ 2A05 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3524+ 2A08 2C                   defb    ','
3525+ 2A09 CD 22 29             call    GETINT          ; Get the second param into A
3526+ 2A0C E5                   push    HL              ; store HL
3527+ 2A0D 21 CE 81             ld      HL,SCR_SIZE_H   ; load address of screen width
3528+ 2A10 5E                   ld      E,(HL)          ; load screen width into A
3529+ 2A11 E1                   pop     HL              ; restore HL
3530+ 2A12 BB                   cp      E               ; compare witdh with param
3531+ 2A13 D2 DE 1C             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3532+ 2A16 32 D6 81             ld      (SCR_CUR_NY),A  ; store new Y
3533+ 2A19 3A DE 81             ld      A,(TMPBFR1)     ; recover the new X
3534+ 2A1C 32 D5 81             ld      (SCR_CUR_NX),A  ; store new X
3535+ 2A1F E5                   push    HL              ; store HL
3536+ 2A20 F3                   di                      ; disable INTs
3537+ 2A21 CD E3 06             call    MOVCRS          ; move cursor to new location
3538+ 2A24 FB                   ei                      ; re-enable INTs
3539+ 2A25 E1                   pop     HL              ; restore HL
3540+ 2A26 C9                   ret                     ; return to caller
3541+ 2A27
3542+ 2A27              ; write a byte into one of the PSG registers
3543+ 2A27 CD 22 29     SREG:   call    GETINT          ; Get register number back into A
3544+ 2A2A FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3545+ 2A2C D2 DE 1C             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3546+ 2A2F 32 DE 81             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3547+ 2A32 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3548+ 2A35 2C                   defb    ','
3549+ 2A36 CD 22 29             call    GETINT          ; get second value (0-255), returned into A
3550+ 2A39 5F                   ld      E,A             ; store value into E
3551+ 2A3A 3A DE 81             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3552+ 2A3D F3                   di                      ; disable INTs
3553+ 2A3E 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3554+ 2A40 ED 79                out     (C),A           ; send register # to PSG
3555+ 2A42 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3556+ 2A44 ED 59                out     (C),E           ; send byte to write into selected register
3557+ 2A46 FB                   ei                      ; re-enable INTs
3558+ 2A47 C9                   ret                     ; return to caller
3559+ 2A48
3560+ 2A48              ; VOLUME ch,vol
3561+ 2A48              ; set the volume for the audio channels
3562+ 2A48              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3563+ 2A48 CD 22 29     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3564+ 2A4B FE 04                cp      $04             ; check if it's in the range 0~3
3565+ 2A4D D2 DE 1C             jp      NC,FCERR        ; if not, exit with Illegal function call error
3566+ 2A50 32 DE 81             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3567+ 2A53 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3568+ 2A56 2C                   defb    ','
3569+ 2A57 CD 22 29             call    GETINT          ; get integer 0-255 (recover channel)
3570+ 2A5A FE 10                cp      $10             ; check if it's in the range 0~15
3571+ 2A5C D2 DE 1C             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3572+ 2A5F 57                   ld      D,A             ; store volume into D
3573+ 2A60 3A DE 81             ld      A,(TMPBFR1)     ; retrieve channel
3574+ 2A63 A7                   and     A               ; is it 0? (0=every channel)
3575+ 2A64 20 10                jr      NZ,VOLCH        ; no, jump over
3576+ 2A66 06 03                ld      B,$03           ; yes, set every channel
3577+ 2A68 1E 08                ld      E,$08           ; register volume of first channel
3578+ 2A6A 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3579+ 2A6C ED 59                out     (C),E           ; set register #
3580+ 2A6E 0E 41                ld      C,PSG_DAT       ; PSG data port
3581+ 2A70 ED 51                out     (C),D           ; send volume
3582+ 2A72 1C                   inc     E               ; next register
3583+ 2A73 10 F5                djnz    RPVOLCG         ; repeat for each channel
3584+ 2A75 C9                   ret                     ; return to caller
3585+ 2A76 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3586+ 2A78 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3587+ 2A7A ED 79                out     (C),A           ; set register
3588+ 2A7C 0E 41                ld      C,PSG_DAT       ; PSG data port
3589+ 2A7E ED 51                out     (C),D           ; send volume level
3590+ 2A80 C9                   ret                     ; return to caller
3591+ 2A81
3592+ 2A81              ; SOUND ch,tone,dur
3593+ 2A81              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3594+ 2A81              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3595+ 2A81              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3596+ 2A81 CD 22 29     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3597+ 2A84 A7                   and     A               ; is it zero?
3598+ 2A85 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3599+ 2A87 E5                   push    HL              ; store HL
3600+ 2A88 F3                   di                      ; disable INTs
3601+ 2A89 CD AC 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3602+ 2A8C FB                   ei                      ; re-enable INTs
3603+ 2A8D E1                   pop     HL              ; retrieve HL
3604+ 2A8E C9                   ret                     ; return to caller
3605+ 2A8F 32 DE 81     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3606+ 2A92 FE 04                cp      $04             ; is channel >3?
3607+ 2A94 D2 13 2B             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3608+ 2A97 CD D2 19             call    CHKSYN          ; No, continue checking by making sure ',' follows
3609+ 2A9A 2C                   defb    ','
3610+ 2A9B CD 9C 20             call    GETNUM          ; Get tone frequency
3611+ 2A9E CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
3612+ 2AA1 ED 53 E0 81          ld      (TMPBFR2),DE    ; Store frequency
3613+ 2AA5 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3614+ 2AA8 2C                   defb    ','
3615+ 2AA9 CD 9C 20             call    GETNUM          ; Get duration
3616+ 2AAC CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
3617+ 2AAF ED 53 E2 81          ld      (TMPBFR3),DE    ; Store duration
3618+ 2AB3                                              ; CHECK CHANNEL
3619+ 2AB3 3A DE 81             ld      A,(TMPBFR1)     ; recover channel
3620+ 2AB6 FE 01                cp      $01             ; is channel <1?
3621+ 2AB8 DA DE 1C             jp      C,FCERR         ; Yes - Illegal function call error
3622+ 2ABB                                              ; CHECK FREQUENCY
3623+ 2ABB ED 5B E0 81          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3624+ 2ABF 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3625+ 2AC0 FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3626+ 2AC2 D2 DE 1C             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3627+ 2AC5                                              ; CHECK DURATION
3628+ 2AC5 ED 5B E2 81          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3629+ 2AC9 7A                   ld      A,D             ; check if it is in the range 0~16383...
3630+ 2ACA E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3631+ 2ACC C2 DE 1C             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3632+ 2ACF                                              ;
3633+ 2ACF                                              ; SET TONE:
3634+ 2ACF                                              ; let's start by setting up the channel
3635+ 2ACF 3A DE 81             ld      A,(TMPBFR1)     ; restore channel value
3636+ 2AD2 FE 03                cp      $03             ; is it 3?
3637+ 2AD4 20 02                jr      NZ,SND1         ; no, jump over
3638+ 2AD6 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3639+ 2AD8 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3640+ 2AD9 CD 60 2B             call    WRTSND          ; enable line into mixer of channel stored in A
3641+ 2ADC                                              ; SET FREQUENCY
3642+ 2ADC                                              ; we simply get frequency and subtract from 4096. The result
3643+ 2ADC                                              ; is put into register pair of the corresponding freq tone channel
3644+ 2ADC ED 5B E0 81          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3645+ 2AE0 E5                   push    HL              ; store HL (it will be used by the subroutine)
3646+ 2AE1 21 00 10             ld      HL,$1000        ; load 4096 into HL
3647+ 2AE4 A7                   and     A               ; reset C flag
3648+ 2AE5 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3649+ 2AE7 3A DE 81             ld      A,(TMPBFR1)     ; restore channel value
3650+ 2AEA 3D                   dec     A               ; set A into the range 0~2
3651+ 2AEB 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3652+ 2AEC 0E 40                ld      C,PSG_REG       ; PSG register port
3653+ 2AEE ED 79                out     (C),A           ; select first register of the pair
3654+ 2AF0 0E 41                ld      C,PSG_DAT       ; PSG data port
3655+ 2AF2 ED 69                out     (C),L           ; send high byte
3656+ 2AF4 0E 40                ld      C,PSG_REG       ; PSG register support
3657+ 2AF6 3C                   inc     A               ; second register of the pair
3658+ 2AF7 ED 79                out     (C),A           ; select register
3659+ 2AF9 0E 41                ld      C,PSG_DAT       ; PSG data port
3660+ 2AFB ED 61                out     (C),H           ; send low byte
3661+ 2AFD ED 5B E2 81          ld      DE,(TMPBFR3)    ; recover duration
3662+ 2B01 3A DE 81             ld      A,(TMPBFR1)     ; recover channel value
3663+ 2B04 3D                   dec     A               ; set channel into the range 0~2
3664+ 2B05 87                   add     A,A             ; double A to find the correct offset
3665+ 2B06 21 12 82             ld      HL,CHASNDDTN    ; set duration into...
3666+ 2B09 85                   add     A,L             ; ...the proper...
3667+ 2B0A 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3668+ 2B0C 24                   inc     H               ; yes, increment H)
3669+ 2B0D 6F           SNDOVR: ld      L,A             ; ...register pair...
3670+ 2B0E 73                   ld      (HL),E          ; ...and store the value
3671+ 2B0F 23                   inc     HL
3672+ 2B10 72                   ld      (HL),D
3673+ 2B11 E1                   pop     HL              ; retrieve HL
3674+ 2B12 C9                   ret                     ; Return to caller
3675+ 2B13 FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3676+ 2B15 D2 DE 1C             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3677+ 2B18 CD D2 19             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3678+ 2B1B 2C                   defb    ','
3679+ 2B1C CD 22 29             call    GETINT          ; get integer 0-255 (frequency)
3680+ 2B1F FE 20                cp      $20             ; make sure it's in range 0~31
3681+ 2B21 D2 DE 1C             jp      NC,FCERR        ; no, so Illegal function call
3682+ 2B24 32 E0 81             ld      (TMPBFR2),A     ; store freq.
3683+ 2B27 2B                   dec     HL              ; dec 'cos GETCHR INCs
3684+ 2B28 CD 13 1C             call    GETCHR          ; check that nothing follows
3685+ 2B2B C2 F0 16             jp      NZ,SNERR        ; error if no empty line
3686+ 2B2E 3A E0 81             ld      A,(TMPBFR2)     ; retrieve freq.
3687+ 2B31 5F                   ld      E,A             ; store freq into E
3688+ 2B32 3A DE 81             ld      A,(TMPBFR1)     ; retrieve channel
3689+ 2B35 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3690+ 2B37 FE 03                cp      $03             ; is it 3?
3691+ 2B39 20 02                jr      NZ,NOS1         ; no, jump over
3692+ 2B3B 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3693+ 2B3D 87           NOS1:   add     A,A
3694+ 2B3E 87                   add     A,A
3695+ 2B3F 87                   add     A,A             ; let's move A 3 bits to left
3696+ 2B40 47                   ld      B,A             ; store channel into B
3697+ 2B41 7B                   ld      A,E             ; check if
3698+ 2B42 A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3699+ 2B43 F3                   di                      ; disable INts
3700+ 2B44 20 0A                jr      NZ,NOS2         ; no, so jump over
3701+ 2B46 3E 07                ld      A,$07           ; mixer register
3702+ 2B48 CD FA 0C             call    SETSNDREG       ; set mixer register
3703+ 2B4B ED 78                in      A,(C)           ; load current mixer value
3704+ 2B4D B0                   or      B               ; disable noise
3705+ 2B4E 18 19                jr      NOS3            ; continue over
3706+ 2B50 78           NOS2:   ld      A,B             ; recover channel
3707+ 2B51 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3708+ 2B52 CD 60 2B             call    WRTSND          ; enable line into mixer of channel stored in A
3709+ 2B55 3E 06                ld      A,$06           ; write into noise register
3710+ 2B57 CD FA 0C             call    SETSNDREG       ; set register into PSG
3711+ 2B5A 7B                   ld      A,E             ; load value for noise frequency
3712+ 2B5B CD FF 0C             call    WRTSNDREG       ; write data into register $06
3713+ 2B5E FB                   ei                      ; re-enable INTs
3714+ 2B5F C9                   ret
3715+ 2B60                      ; enable line into mixer of channel stored in A
3716+ 2B60 47           WRTSND: ld      B,A             ; move channel into B
3717+ 2B61 3E 07                ld      A,$07           ; mixer register
3718+ 2B63 CD FA 0C             call    SETSNDREG       ; set mixer register
3719+ 2B66 ED 78                in      A,(C)           ; load current value
3720+ 2B68 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3721+ 2B69                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3722+ 2B69                                              ; the register is still unchanged after reset) is 11111111 and
3723+ 2B69                                              ; 11111111 AND 11111110 is equal to 11111110
3724+ 2B69                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3725+ 2B69 47           NOS3:   ld      B,A             ; store new mixer value into B
3726+ 2B6A 3E 07                ld      A,$07           ; mixer address
3727+ 2B6C CD FA 0C             call    SETSNDREG       ; set register
3728+ 2B6F 78                   ld      A,B             ; retrieve new mixer value from B
3729+ 2B70 CD FF 0C             call    WRTSNDREG       ; send new value for the mixer
3730+ 2B73 FB                   ei                      ; re-enable INTs
3731+ 2B74 C9                   ret                     ; return to caller
3732+ 2B75
3733+ 2B75              ; write a byte into one of the VDP registers
3734+ 2B75 CD 22 29     VREG:   call    GETINT          ; Get register number back into A
3735+ 2B78 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3736+ 2B7A D2 DE 1C             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3737+ 2B7D 32 DE 81             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3738+ 2B80 CD D2 19             call    CHKSYN          ; Make sure ',' follows
3739+ 2B83 2C                   defb    ','
3740+ 2B84 CD 22 29             call    GETINT          ; get value (0-255)
3741+ 2B87 5F                   ld      E,A             ; store value into E
3742+ 2B88 3A DE 81             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3743+ 2B8B F3                   di                      ; disable INTs
3744+ 2B8C CD C7 06             call    WRITE_VREG      ; write value into VDP register
3745+ 2B8F FB                   ei                      ; re-enable INTs
3746+ 2B90 C9                   ret                     ; return to caller
3747+ 2B91
3748+ 2B91              ; read the VDP status register and return it into A
3749+ 2B91 CD C9 1C     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3750+ 2B94 F3                   di                      ; disable INTs
3751+ 2B95 CD D2 06             call    READ_VSTAT      ; read VDP register status
3752+ 2B98 FB                   ei                      ; re-enable INTs
3753+ 2B99 C3 95 24             jp      PASSA           ; Return integer A
3754+ 2B9C
3755+ 2B9C              ; read from PSG register and return it into A
3756+ 2B9C CD C9 1C     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3757+ 2B9F 7B                   ld      A,E             ; consider LSB
3758+ 2BA0 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3759+ 2BA2 D2 DE 1C             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3760+ 2BA5 F3                   di                      ; disable INts
3761+ 2BA6 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3762+ 2BA8 ED 79                out     (C),A           ; send register to read from
3763+ 2BAA ED 78                in      A,(C)           ; read register's contents and store into A
3764+ 2BAC FB                   ei                      ; re-enable INTs
3765+ 2BAD C3 95 24             jp      PASSA           ; return A
3766+ 2BB0
3767+ 2BB0              ; read the temp key buffer and return the value of the current key being pressed
3768+ 2BB0              ; can wait for the number of 100thds of second before to return
3769+ 2BB0 CD 0F 25     INKEY:  call    IDTEST          ; Test for illegal direct
3770+ 2BB3 CD C9 1C             call    DEINT           ; get number param (100thds of second to wait) into DE
3771+ 2BB6 C5                   push    BC              ; store BC
3772+ 2BB7 3A BD 81             ld      A,(TMRCNT)      ; Load current value of system timer
3773+ 2BBA 47                   ld      B,A             ; move it into B
3774+ 2BBB 3A BD 81     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3775+ 2BBE B8                   cp      B               ; ...to let the sniffer collect...
3776+ 2BBF 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3777+ 2BC1 7A                   ld      A,D             ; check the param
3778+ 2BC2 B3                   or      E               ; if DE<>0 then...
3779+ 2BC3 20 05                jr      NZ,INKEY2       ; ...jump over...
3780+ 2BC5 3A 1A 82             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3781+ 2BC8 18 2A                jr      ENDINK          ; ...return it
3782+ 2BCA 7A           INKEY2: ld      A,D             ; check if param>1023
3783+ 2BCB FE 04                cp      $04             ; to do this we check if MSB>3
3784+ 2BCD D2 DE 1C             jp      NC,FCERR        ; if MSB >=4 then error
3785+ 2BD0 E5                   push    HL              ; store HL
3786+ 2BD1 21 09 00             ld      HL,$0009        ; check if value
3787+ 2BD4 CD DF 3F             call    CMP16           ; is < 10
3788+ 2BD7 E1                   pop     HL              ; retrieve HL
3789+ 2BD8 DA DE 2B             jp      C,SRTINK        ; if value >= 10 then jump over
3790+ 2BDB 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3791+ 2BDE 3A BD 81     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3792+ 2BE1 47                   ld      B,A             ; move it into B
3793+ 2BE2 3A 1A 82     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3794+ 2BE5 A7                   and     A               ; is it 0?
3795+ 2BE6 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3796+ 2BE8 3A BD 81             ld      A,(TMRCNT)      ; load the first byte of the system timer
3797+ 2BEB B8                   cp      B               ; is it the same value?
3798+ 2BEC 28 F4                jr      Z,CHKINK        ; yes, so read again
3799+ 2BEE 47                   ld      B,A             ; store new value
3800+ 2BEF 1B                   dec     DE              ; no, decrement timer
3801+ 2BF0 7A                   ld      A,D             ; check if zero reached
3802+ 2BF1 B3                   or      E               ; by ORing D and E
3803+ 2BF2 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3804+ 2BF4 C1           ENDINK: pop     BC              ; restore BC
3805+ 2BF5 F5                   push    AF              ; store A
3806+ 2BF6 F3                   di                      ; disable INTs
3807+ 2BF7 AF                   xor     A               ; clear the...
3808+ 2BF8 32 1A 82             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3809+ 2BFB FB                   ei                      ; re-enable INTs
3810+ 2BFC F1                   pop     AF              ; retrieve A
3811+ 2BFD C3 95 24     ENDINK2:jp      PASSA           ; return A as ASCII value
3812+ 2C00
3813+ 2C00
3814+ 2C00 21 27 31     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3815+ 2C03 CD F8 2E     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3816+ 2C06 C3 12 2C             jp      FPADD           ; Add BCDE to FPREG
3817+ 2C09
3818+ 2C09
3819+ 2C09 CD F8 2E     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3820+ 2C0C 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3821+ 2C0D C1           PSUB:   pop     BC              ; Get FP number from stack
3822+ 2C0E D1                   pop     DE
3823+ 2C0F CD D2 2E     SUBCDE: call    INVSGN          ; Negate FPREG
3824+ 2C12 78           FPADD:  ld      A,B             ; Get FP exponent
3825+ 2C13 B7                   or      A               ; Is number zero?
3826+ 2C14 C8                   ret     Z               ; Yes - Nothing to add
3827+ 2C15 3A 35 82             ld      A,(FPEXP)       ; Get FPREG exponent
3828+ 2C18 B7                   or      A               ; Is this number zero?
3829+ 2C19 CA EA 2E             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3830+ 2C1C 90                   sub     B               ; BCDE number larger?
3831+ 2C1D D2 2C 2C             jp      NC,NOSWAP       ; No - Don't swap them
3832+ 2C20 2F                   cpl                     ; Two's complement
3833+ 2C21 3C                   inc     A               ;  FP exponent
3834+ 2C22 EB                   ex      DE,HL
3835+ 2C23 CD DA 2E             call    STAKFP          ; Put FPREG on stack
3836+ 2C26 EB                   ex      DE,HL
3837+ 2C27 CD EA 2E             call    FPBCDE          ; Move BCDE to FPREG
3838+ 2C2A C1                   pop     BC              ; Restore number from stack
3839+ 2C2B D1                   pop     DE
3840+ 2C2C FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3841+ 2C2E D0                   ret     NC              ; Yes - First number is result
3842+ 2C2F F5                   push    AF              ; Save number of bits to scale
3843+ 2C30 CD 0F 2F             call    SIGNS           ; Set MSBs & sign of result
3844+ 2C33 67                   ld      H,A             ; Save sign of result
3845+ 2C34 F1                   pop     AF              ; Restore scaling factor
3846+ 2C35 CD D7 2C             call    SCALE           ; Scale BCDE to same exponent
3847+ 2C38 B4                   or      H               ; Result to be positive?
3848+ 2C39 21 32 82             ld      HL,FPREG        ; Point to FPREG
3849+ 2C3C F2 52 2C             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3850+ 2C3F CD B7 2C             call    PLUCDE          ; Add FPREG to CDE
3851+ 2C42 D2 98 2C             jp      NC,RONDUP       ; No overflow - Round it up
3852+ 2C45 23                   inc     HL              ; Point to exponent
3853+ 2C46 34                   inc     (HL)            ; Increment it
3854+ 2C47 CA FF 16             jp      Z,OVERR         ; Number overflowed - Error
3855+ 2C4A 2E 01                ld      L,$01           ; 1 bit to shift right
3856+ 2C4C CD ED 2C             call    SHRT1           ; Shift result right
3857+ 2C4F C3 98 2C             jp      RONDUP          ; Round it up
3858+ 2C52
3859+ 2C52 AF           MINCDE: xor     A               ; Clear A and carry
3860+ 2C53 90                   sub     B               ; Negate exponent
3861+ 2C54 47                   ld      B,A             ; Re-save exponent
3862+ 2C55 7E                   ld      A,(HL)          ; Get LSB of FPREG
3863+ 2C56 9B                   sbc     A, E            ; Subtract LSB of BCDE
3864+ 2C57 5F                   ld      E,A             ; Save LSB of BCDE
3865+ 2C58 23                   inc     HL
3866+ 2C59 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3867+ 2C5A 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3868+ 2C5B 57                   ld      D,A             ; Save NMSB of BCDE
3869+ 2C5C 23                   inc     HL
3870+ 2C5D 7E                   ld      A,(HL)          ; Get MSB of FPREG
3871+ 2C5E 99                   sbc     A,C             ; Subtract MSB of BCDE
3872+ 2C5F 4F                   ld      C,A             ; Save MSB of BCDE
3873+ 2C60 DC C3 2C     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3874+ 2C63
3875+ 2C63 68           BNORM:  ld      L,B             ; L = Exponent
3876+ 2C64 63                   ld      H,E             ; H = LSB
3877+ 2C65 AF                   xor     A
3878+ 2C66 47           BNRMLP: ld      B,A             ; Save bit count
3879+ 2C67 79                   ld      A,C             ; Get MSB
3880+ 2C68 B7                   or      A               ; Is it zero?
3881+ 2C69 C2 85 2C             jp      NZ,PNORM        ; No - Do it bit at a time
3882+ 2C6C 4A                   ld      C,D             ; MSB = NMSB
3883+ 2C6D 54                   ld      D,H             ; NMSB= LSB
3884+ 2C6E 65                   ld      H,L             ; LSB = VLSB
3885+ 2C6F 6F                   ld      L,A             ; VLSB= 0
3886+ 2C70 78                   ld      A,B             ; Get exponent
3887+ 2C71 D6 08                sub     $08             ; Count 8 bits
3888+ 2C73 FE E0                cp      -24-8           ; Was number zero?
3889+ 2C75 C2 66 2C             jp      NZ,BNRMLP       ; No - Keep normalising
3890+ 2C78 AF           RESZER: xor     A               ; Result is zero
3891+ 2C79 32 35 82     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3892+ 2C7C C9                   ret
3893+ 2C7D
3894+ 2C7D 05           NORMAL: dec     B               ; Count bits
3895+ 2C7E 29                   add     HL,HL           ; Shift HL left
3896+ 2C7F 7A                   ld      A,D             ; Get NMSB
3897+ 2C80 17                   rla                     ; Shift left with last bit
3898+ 2C81 57                   ld      D,A             ; Save NMSB
3899+ 2C82 79                   ld      A,C             ; Get MSB
3900+ 2C83 8F                   adc     A,A             ; Shift left with last bit
3901+ 2C84 4F                   ld      C,A             ; Save MSB
3902+ 2C85 F2 7D 2C     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3903+ 2C88 78                   ld      A,B             ; Number of bits shifted
3904+ 2C89 5C                   ld      E,H             ; Save HL in EB
3905+ 2C8A 45                   ld      B,L
3906+ 2C8B B7                   or      A               ; Any shifting done?
3907+ 2C8C CA 98 2C             jp      Z,RONDUP        ; No - Round it up
3908+ 2C8F 21 35 82             ld      HL,FPEXP        ; Point to exponent
3909+ 2C92 86                   add     A,(HL)          ; Add shifted bits
3910+ 2C93 77                   ld      (HL),A          ; Re-save exponent
3911+ 2C94 D2 78 2C             jp      NC,RESZER       ; Underflow - Result is zero
3912+ 2C97 C8                   ret     Z               ; Result is zero
3913+ 2C98 78           RONDUP: ld      A,B             ; Get VLSB of number
3914+ 2C99 21 35 82     RONDB:  ld      HL,FPEXP        ; Point to exponent
3915+ 2C9C B7                   or      A               ; Any rounding?
3916+ 2C9D FC AA 2C             call    M,FPROND        ; Yes - Round number up
3917+ 2CA0 46                   ld      B,(HL)          ; B = Exponent
3918+ 2CA1 23                   inc     HL
3919+ 2CA2 7E                   ld      A,(HL)          ; Get sign of result
3920+ 2CA3 E6 80                and     %10000000       ; Only bit 7 needed
3921+ 2CA5 A9                   xor     C               ; Set correct sign
3922+ 2CA6 4F                   ld      C,A             ; Save correct sign in number
3923+ 2CA7 C3 EA 2E             jp      FPBCDE          ; Move BCDE to FPREG
3924+ 2CAA
3925+ 2CAA 1C           FPROND: inc     E               ; Round LSB
3926+ 2CAB C0                   ret     NZ              ; Return if ok
3927+ 2CAC 14                   inc     D               ; Round NMSB
3928+ 2CAD C0                   ret     NZ              ; Return if ok
3929+ 2CAE 0C                   inc     C               ; Round MSB
3930+ 2CAF C0                   ret     NZ              ; Return if ok
3931+ 2CB0 0E 80                ld      C,$80           ; Set normal value
3932+ 2CB2 34                   inc     (HL)            ; Increment exponent
3933+ 2CB3 C0                   ret     NZ              ; Return if ok
3934+ 2CB4 C3 FF 16             jp      OVERR           ; Overflow error
3935+ 2CB7
3936+ 2CB7 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
3937+ 2CB8 83                   add     A,E             ; Add LSB of BCDE
3938+ 2CB9 5F                   ld      E,A             ; Save LSB of BCDE
3939+ 2CBA 23                   inc     HL
3940+ 2CBB 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3941+ 2CBC 8A                   adc     A,D             ; Add NMSB of BCDE
3942+ 2CBD 57                   ld      D,A             ; Save NMSB of BCDE
3943+ 2CBE 23                   inc     HL
3944+ 2CBF 7E                   ld      A,(HL)          ; Get MSB of FPREG
3945+ 2CC0 89                   adc     A,C             ; Add MSB of BCDE
3946+ 2CC1 4F                   ld      C,A             ; Save MSB of BCDE
3947+ 2CC2 C9                   ret
3948+ 2CC3
3949+ 2CC3 21 36 82     COMPL:  ld      HL,SGNRES       ; Sign of result
3950+ 2CC6 7E                   ld      A,(HL)          ; Get sign of result
3951+ 2CC7 2F                   cpl                     ; Negate it
3952+ 2CC8 77                   ld      (HL),A          ; Put it back
3953+ 2CC9 AF                   xor     A
3954+ 2CCA 6F                   ld      L,A             ; Set L to zero
3955+ 2CCB 90                   sub     B               ; Negate exponent,set carry
3956+ 2CCC 47                   ld      B,A             ; Re-save exponent
3957+ 2CCD 7D                   ld      A,L             ; Load zero
3958+ 2CCE 9B                   sbc     A,E             ; Negate LSB
3959+ 2CCF 5F                   ld      E,A             ; Re-save LSB
3960+ 2CD0 7D                   ld      A,L             ; Load zero
3961+ 2CD1 9A                   sbc     A,D             ; Negate NMSB
3962+ 2CD2 57                   ld      D,A             ; Re-save NMSB
3963+ 2CD3 7D                   ld      A,L             ; Load zero
3964+ 2CD4 99                   sbc     A,C             ; Negate MSB
3965+ 2CD5 4F                   ld      C,A             ; Re-save MSB
3966+ 2CD6 C9                   ret
3967+ 2CD7
3968+ 2CD7 06 00        SCALE:  ld      B,$00           ; Clear underflow
3969+ 2CD9 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
3970+ 2CDB DA E6 2C             jp      C,SHRITE        ; No - Shift right A bits
3971+ 2CDE 43                   ld      B,E             ; <- Shift
3972+ 2CDF 5A                   ld      E,D             ; <- right
3973+ 2CE0 51                   ld      D,C             ; <- eight
3974+ 2CE1 0E 00                ld      C,$00           ; <- bits
3975+ 2CE3 C3 D9 2C             jp      SCALLP          ; More bits to shift
3976+ 2CE6
3977+ 2CE6 C6 09        SHRITE: add     A,8+1           ; Adjust count
3978+ 2CE8 6F                   ld      L,A             ; Save bits to shift
3979+ 2CE9 AF           SHRLP:  xor     A               ; Flag for all done
3980+ 2CEA 2D                   dec     L               ; All shifting done?
3981+ 2CEB C8                   ret     Z               ; Yes - Return
3982+ 2CEC 79                   ld      A,C             ; Get MSB
3983+ 2CED 1F           SHRT1:  rra                     ; Shift it right
3984+ 2CEE 4F                   ld      C,A             ; Re-save
3985+ 2CEF 7A                   ld      A,D             ; Get NMSB
3986+ 2CF0 1F                   rra                     ; Shift right with last bit
3987+ 2CF1 57                   ld      D,A             ; Re-save it
3988+ 2CF2 7B                   ld      A,E             ; Get LSB
3989+ 2CF3 1F                   rra                     ; Shift right with last bit
3990+ 2CF4 5F                   ld      E,A             ; Re-save it
3991+ 2CF5 78                   ld      A,B             ; Get underflow
3992+ 2CF6 1F                   rra                     ; Shift right with last bit
3993+ 2CF7 47                   ld      B,A             ; Re-save underflow
3994+ 2CF8 C3 E9 2C             jp      SHRLP           ; More bits to do
3995+ 2CFB
3996+ 2CFB 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
3997+ 2CFF
3998+ 2CFF 03           LOGTAB: defb    $03             ; Table used by LOG
3999+ 2D00 AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4000+ 2D04 F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4001+ 2D08 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4002+ 2D0C
4003+ 2D0C CD A9 2E     LOG:    call    TSTSGN          ; Test sign of value
4004+ 2D0F B7                   or      A
4005+ 2D10 EA DE 1C             jp      PE,FCERR        ; ?FC Error if <= zero
4006+ 2D13 21 35 82             ld      HL,FPEXP        ; Point to exponent
4007+ 2D16 7E                   ld      A,(HL)          ; Get exponent
4008+ 2D17 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4009+ 2D1A 11 F3 04             ld      DE,$04F3
4010+ 2D1D 90                   sub     B               ; Scale value to be < 1
4011+ 2D1E F5                   push    AF              ; Save scale factor
4012+ 2D1F 70                   ld      (HL),B          ; Save new exponent
4013+ 2D20 D5                   push    DE              ; Save SQR(1/2)
4014+ 2D21 C5                   push    BC
4015+ 2D22 CD 12 2C             call    FPADD           ; Add SQR(1/2) to value
4016+ 2D25 C1                   pop     BC              ; Restore SQR(1/2)
4017+ 2D26 D1                   pop     DE
4018+ 2D27 04                   inc     B               ; Make it SQR(2)
4019+ 2D28 CD FF 2D             call    DVBCDE          ; Divide by SQR(2)
4020+ 2D2B 21 FB 2C             ld      HL,UNITY        ; Point to 1.
4021+ 2D2E CD 09 2C             call    SUBPHL          ; Subtract FPREG from 1
4022+ 2D31 21 FF 2C             ld      HL,LOGTAB       ; Coefficient table
4023+ 2D34 CD F1 31             call    SUMSER          ; Evaluate sum of series
4024+ 2D37 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4025+ 2D3A 11 00 00             ld      DE,$0000
4026+ 2D3D CD 12 2C             call    FPADD           ; Subtract 0.5 from FPREG
4027+ 2D40 F1                   pop     AF              ; Restore scale factor
4028+ 2D41 CD 24 30             call    RSCALE          ; Re-scale number
4029+ 2D44 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4030+ 2D47 11 18 72             ld      DE,$7218
4031+ 2D4A 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4032+ 2D4B
4033+ 2D4B C1           MULT:   pop     BC              ; Get number from stack
4034+ 2D4C D1                   pop     DE
4035+ 2D4D CD A9 2E     FPMULT: call    TSTSGN          ; Test sign of FPREG
4036+ 2D50 C8                   ret     Z               ; Return zero if zero
4037+ 2D51 2E 00                ld      L,$00           ; Flag add exponents
4038+ 2D53 CD 67 2E             call    ADDEXP          ; Add exponents
4039+ 2D56 79                   ld      A,C             ; Get MSB of multiplier
4040+ 2D57 32 44 82             ld      (MULVAL),A      ; Save MSB of multiplier
4041+ 2D5A EB                   ex      DE,HL
4042+ 2D5B 22 45 82             ld      (MULVAL+1),HL   ; Save rest of multiplier
4043+ 2D5E 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4044+ 2D61 50                   ld      D,B
4045+ 2D62 58                   ld      E,B
4046+ 2D63 21 63 2C             ld      HL,BNORM        ; Address of normalise
4047+ 2D66 E5                   push    HL              ; Save for return
4048+ 2D67 21 6F 2D             ld      HL,MULT8        ; Address of 8 bit multiply
4049+ 2D6A E5                   push    HL              ; Save for NMSB,MSB
4050+ 2D6B E5                   push    HL              ;
4051+ 2D6C 21 32 82             ld      HL,FPREG        ; Point to number
4052+ 2D6F 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4053+ 2D70 23                   inc     HL              ; Point to NMSB
4054+ 2D71 B7                   or      A               ; Test LSB
4055+ 2D72 CA 9B 2D             jp      Z,BYTSFT        ; Zero - shift to next byte
4056+ 2D75 E5                   push    HL              ; Save address of number
4057+ 2D76 2E 08                ld      L,$08           ; 8 bits to multiply by
4058+ 2D78 1F           MUL8LP: rra                     ; Shift LSB right
4059+ 2D79 67                   ld      H,A             ; Save LSB
4060+ 2D7A 79                   ld      A,C             ; Get MSB
4061+ 2D7B D2 89 2D             jp      NC,NOMADD       ; Bit was zero - Don't add
4062+ 2D7E E5                   push    HL              ; Save LSB and count
4063+ 2D7F 2A 45 82             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4064+ 2D82 19                   add     HL,DE           ; Add NMSB and LSB
4065+ 2D83 EB                   ex      DE,HL           ; Leave sum in DE
4066+ 2D84 E1                   pop     HL              ; Restore MSB and count
4067+ 2D85 3A 44 82             ld      A,(MULVAL)      ; Get MSB of multiplier
4068+ 2D88 89                   adc     A,C             ; Add MSB
4069+ 2D89 1F           NOMADD: rra                     ; Shift MSB right
4070+ 2D8A 4F                   ld      C,A             ; Re-save MSB
4071+ 2D8B 7A                   ld      A,D             ; Get NMSB
4072+ 2D8C 1F                   rra                     ; Shift NMSB right
4073+ 2D8D 57                   ld      D,A             ; Re-save NMSB
4074+ 2D8E 7B                   ld      A,E             ; Get LSB
4075+ 2D8F 1F                   rra                     ; Shift LSB right
4076+ 2D90 5F                   ld      E,A             ; Re-save LSB
4077+ 2D91 78                   ld      A,B             ; Get VLSB
4078+ 2D92 1F                   rra                     ; Shift VLSB right
4079+ 2D93 47                   ld      B,A             ; Re-save VLSB
4080+ 2D94 2D                   dec     L               ; Count bits multiplied
4081+ 2D95 7C                   ld      A,H             ; Get LSB of multiplier
4082+ 2D96 C2 78 2D             jp      NZ,MUL8LP       ; More - Do it
4083+ 2D99 E1           POPHRT: pop     HL              ; Restore address of number
4084+ 2D9A C9                   ret
4085+ 2D9B
4086+ 2D9B 43           BYTSFT: ld      B,E             ; Shift partial product left
4087+ 2D9C 5A                   ld      E,D
4088+ 2D9D 51                   ld      D,C
4089+ 2D9E 4F                   ld      C,A
4090+ 2D9F C9                   ret
4091+ 2DA0
4092+ 2DA0
4093+ 2DA0              ; WORKING ââ
4094+ 2DA0 C1           DINT:   pop     BC              ; Get number from stack
4095+ 2DA1 D1                   pop     DE
4096+ 2DA2 CD FF 2D             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4097+ 2DA5 C3 7C 2F             jp      INT             ; return INT(FPREG)
4098+ 2DA8
4099+ 2DA8
4100+ 2DA8              ; A MODULO B - return remainder of the integer division A/B where:
4101+ 2DA8              ; A is in stack; B is in FPREG
4102+ 2DA8              ; math is:
4103+ 2DA8              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4104+ 2DA8 CD 7C 2F     MOD:    call    INT             ; B=INT(B)
4105+ 2DAB CD F5 2E             call    BCDEFP          ; copy B (from FPREG) into BCDE
4106+ 2DAE ED 53 E2 81          ld      (TMPBFR3),DE    ; store B into...
4107+ 2DB2 ED 43 E4 81          ld      (TMPBFR4),BC    ; ...a temp buffer
4108+ 2DB6 C1                   pop     BC              ; recover A...
4109+ 2DB7 D1                   pop     DE              ; ...from stack
4110+ 2DB8 CD EA 2E             call    FPBCDE          ; store A into FPREG
4111+ 2DBB CD 7C 2F             call    INT             ; get integer part: A=INT(A)
4112+ 2DBE CD F5 2E             call    BCDEFP          ; copy A (from FPREG) into BCDE
4113+ 2DC1 ED 53 DE 81          ld      (TMPBFR1),DE    ; store A into...
4114+ 2DC5 ED 43 E0 81          ld      (TMPBFR2),BC    ; ...a temp buffer
4115+ 2DC9                                              ; begin calculation
4116+ 2DC9 2A E2 81             ld      HL,(TMPBFR3)    ; move B...
4117+ 2DCC 22 32 82             ld      (FPREG),HL      ; ...from...
4118+ 2DCF 2A E4 81             ld      HL,(TMPBFR4)    ; ...temp buffer...
4119+ 2DD2 22 34 82             ld      (FPREG+2),HL    ; ...into FPREG
4120+ 2DD5 CD FF 2D             call    DVBCDE          ; compute A/B and store into FPREG
4121+ 2DD8 CD 7C 2F             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4122+ 2DDB ED 5B E2 81          ld      DE,(TMPBFR3)    ; load B...
4123+ 2DDF ED 4B E4 81          ld      BC,(TMPBFR4)    ; ...into BCDE
4124+ 2DE3 CD 4D 2D             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4125+ 2DE6 ED 5B DE 81          ld      DE,(TMPBFR1)    ; retrieve A from...
4126+ 2DEA ED 4B E0 81          ld      BC,(TMPBFR2)    ; ...temp buffer
4127+ 2DEE C3 0F 2C             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4128+ 2DF1
4129+ 2DF1
4130+ 2DF1 CD DA 2E     DIV10:  call    STAKFP          ; Save FPREG on stack
4131+ 2DF4 01 20 84             ld      BC,$8420        ; BCDE = 10.
4132+ 2DF7 11 00 00             ld      DE,$0000
4133+ 2DFA CD EA 2E             call    FPBCDE          ; Move 10 to FPREG
4134+ 2DFD
4135+ 2DFD C1           DIV:    pop     BC              ; Get number from stack
4136+ 2DFE D1                   pop     DE
4137+ 2DFF CD A9 2E     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4138+ 2E02 CA F3 16             jp      Z,DZERR         ; Error if division by zero
4139+ 2E05 2E FF                ld      L,-1            ; Flag subtract exponents
4140+ 2E07 CD 67 2E             call    ADDEXP          ; Subtract exponents
4141+ 2E0A 34                   inc     (HL)            ; Add 2 to exponent to adjust
4142+ 2E0B 34                   inc     (HL)
4143+ 2E0C 2B                   dec     HL              ; Point to MSB
4144+ 2E0D 7E                   ld      A,(HL)          ; Get MSB of dividend
4145+ 2E0E 32 73 80             ld      (DIV3),A        ; Save for subtraction
4146+ 2E11 2B                   dec     HL
4147+ 2E12 7E                   ld      A,(HL)          ; Get NMSB of dividend
4148+ 2E13 32 6F 80             ld      (DIV2),A        ; Save for subtraction
4149+ 2E16 2B                   dec     HL
4150+ 2E17 7E                   ld      A,(HL)          ; Get MSB of dividend
4151+ 2E18 32 6B 80             ld      (DIV1),A        ; Save for subtraction
4152+ 2E1B 41                   ld      B,C             ; Get MSB
4153+ 2E1C EB                   ex      DE,HL           ; NMSB,LSB to HL
4154+ 2E1D AF                   xor     A
4155+ 2E1E 4F                   ld      C,A             ; Clear MSB of quotient
4156+ 2E1F 57                   ld      D,A             ; Clear NMSB of quotient
4157+ 2E20 5F                   ld      E,A             ; Clear LSB of quotient
4158+ 2E21 32 76 80             ld      (DIV4),A        ; Clear overflow count
4159+ 2E24 E5           DIVLP:  push    HL              ; Save divisor
4160+ 2E25 C5                   push    BC
4161+ 2E26 7D                   ld      A,L             ; Get LSB of number
4162+ 2E27 CD 6A 80             call    DIVSUP          ; Subt' divisor from dividend
4163+ 2E2A DE 00                sbc     A,$00           ; Count for overflows
4164+ 2E2C 3F                   ccf
4165+ 2E2D D2 37 2E             jp      NC,RESDIV       ; Restore divisor if borrow
4166+ 2E30 32 76 80             ld      (DIV4),A        ; Re-save overflow count
4167+ 2E33 F1                   pop     AF              ; Scrap divisor
4168+ 2E34 F1                   pop     AF
4169+ 2E35 37                   scf                     ; Set carry to
4170+ 2E36 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4171+ 2E37
4172+ 2E37 C1           RESDIV: pop     BC              ; Restore divisor
4173+ 2E38 E1                   pop     HL
4174+ 2E39 79                   ld      A,C             ; Get MSB of quotient
4175+ 2E3A 3C                   inc     A
4176+ 2E3B 3D                   dec     A
4177+ 2E3C 1F                   rra                     ; Bit 0 to bit 7
4178+ 2E3D FA 99 2C             jp      M,RONDB         ; Done - Normalise result
4179+ 2E40 17                   rla                     ; Restore carry
4180+ 2E41 7B                   ld      A,E             ; Get LSB of quotient
4181+ 2E42 17                   rla                     ; Double it
4182+ 2E43 5F                   ld      E,A             ; Put it back
4183+ 2E44 7A                   ld      A,D             ; Get NMSB of quotient
4184+ 2E45 17                   rla                     ; Double it
4185+ 2E46 57                   ld      D,A             ; Put it back
4186+ 2E47 79                   ld      A,C             ; Get MSB of quotient
4187+ 2E48 17                   rla                     ; Double it
4188+ 2E49 4F                   ld      C,A             ; Put it back
4189+ 2E4A 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4190+ 2E4B 78                   ld      A,B             ; Get MSB of divisor
4191+ 2E4C 17                   rla                     ; Double it
4192+ 2E4D 47                   ld      B,A             ; Put it back
4193+ 2E4E 3A 76 80             ld      A,(DIV4)        ; Get VLSB of quotient
4194+ 2E51 17                   rla                     ; Double it
4195+ 2E52 32 76 80             ld      (DIV4),A        ; Put it back
4196+ 2E55 79                   ld      A,C             ; Get MSB of quotient
4197+ 2E56 B2                   or      D               ; Merge NMSB
4198+ 2E57 B3                   or      E               ; Merge LSB
4199+ 2E58 C2 24 2E             jp      NZ,DIVLP        ; Not done - Keep dividing
4200+ 2E5B E5                   push    HL              ; Save divisor
4201+ 2E5C 21 35 82             ld      HL,FPEXP        ; Point to exponent
4202+ 2E5F 35                   dec     (HL)            ; Divide by 2
4203+ 2E60 E1                   pop     HL              ; Restore divisor
4204+ 2E61 C2 24 2E             jp      NZ,DIVLP        ; Ok - Keep going
4205+ 2E64 C3 FF 16             jp      OVERR           ; Overflow error
4206+ 2E67
4207+ 2E67
4208+ 2E67 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4209+ 2E68 B7                   or      A               ; Test it
4210+ 2E69 CA 8B 2E             jp      Z,OVTST3        ; Zero - Result zero
4211+ 2E6C 7D                   ld      A,L             ; Get add/subtract flag
4212+ 2E6D 21 35 82             ld      HL,FPEXP        ; Point to exponent
4213+ 2E70 AE                   xor     (HL)            ; Add or subtract it
4214+ 2E71 80                   add     A,B             ; Add the other exponent
4215+ 2E72 47                   ld      B,A             ; Save new exponent
4216+ 2E73 1F                   rra                     ; Test exponent for overflow
4217+ 2E74 A8                   xor     B
4218+ 2E75 78                   ld      A,B             ; Get exponent
4219+ 2E76 F2 8A 2E             jp      P,OVTST2        ; Positive - Test for overflow
4220+ 2E79 C6 80                add     A,$80           ; Add excess 128
4221+ 2E7B 77                   ld      (HL),A          ; Save new exponent
4222+ 2E7C CA 99 2D             jp      Z,POPHRT        ; Zero - Result zero
4223+ 2E7F CD 0F 2F             call    SIGNS           ; Set MSBs and sign of result
4224+ 2E82 77                   ld      (HL),A          ; Save new exponent
4225+ 2E83 2B                   dec     HL              ; Point to MSB
4226+ 2E84 C9                   ret
4227+ 2E85
4228+ 2E85 CD A9 2E     OVTST1: call    TSTSGN          ; Test sign of FPREG
4229+ 2E88 2F                   cpl                     ; Invert sign
4230+ 2E89 E1                   pop     HL              ; Clean up stack
4231+ 2E8A B7           OVTST2: or      A               ; Test if new exponent zero
4232+ 2E8B E1           OVTST3: pop     HL              ; Clear off return address
4233+ 2E8C F2 78 2C             jp      P,RESZER        ; Result zero
4234+ 2E8F C3 FF 16             jp      OVERR           ; Overflow error
4235+ 2E92
4236+ 2E92 CD F5 2E     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4237+ 2E95 78                   ld      A,B             ; Get exponent
4238+ 2E96 B7                   or      A               ; Is it zero?
4239+ 2E97 C8                   ret     Z               ; Yes - Result is zero
4240+ 2E98 C6 02                add     A,$02           ; Multiply by 4
4241+ 2E9A DA FF 16             jp      C,OVERR         ; Overflow - ?OV Error
4242+ 2E9D 47                   ld      B,A             ; Re-save exponent
4243+ 2E9E CD 12 2C             call    FPADD           ; Add BCDE to FPREG (Times 5)
4244+ 2EA1 21 35 82             ld      HL,FPEXP        ; Point to exponent
4245+ 2EA4 34                   inc     (HL)            ; Double number (Times 10)
4246+ 2EA5 C0                   ret     NZ              ; Ok - Return
4247+ 2EA6 C3 FF 16             jp      OVERR           ; Overflow error
4248+ 2EA9
4249+ 2EA9 3A 35 82     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4250+ 2EAC B7                   or      A
4251+ 2EAD C8                   ret     Z               ; RETurn if number is zero
4252+ 2EAE 3A 34 82             ld      A,(FPREG+2)     ; Get MSB of FPREG
4253+ 2EB1 FE                   defb    0FEH            ; Test sign
4254+ 2EB2 2F           RETREL: cpl                     ; Invert sign
4255+ 2EB3 17                   rla                     ; Sign bit to carry
4256+ 2EB4 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4257+ 2EB5 C0                   ret     NZ              ; Return -1 if negative
4258+ 2EB6 3C                   inc     A               ; Bump to +1
4259+ 2EB7 C9                   ret                     ; Positive - Return +1
4260+ 2EB8
4261+ 2EB8 CD A9 2E     SGN:    call    TSTSGN          ; Test sign of FPREG
4262+ 2EBB 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4263+ 2EBD 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4264+ 2EC0 21 35 82     RETINT: ld      HL,FPEXP        ; Point to exponent
4265+ 2EC3 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4266+ 2EC4 70                   ld      (HL),B          ; Save exponent
4267+ 2EC5 06 00                ld      B,0             ; CDE = integer to normalise
4268+ 2EC7 23                   inc     HL              ; Point to sign of result
4269+ 2EC8 36 80                ld      (HL),$80        ; Set sign of result
4270+ 2ECA 17                   rla                     ; Carry = sign of integer
4271+ 2ECB C3 60 2C             jp      CONPOS          ; Set sign of result
4272+ 2ECE
4273+ 2ECE CD A9 2E     ABS_:   call    TSTSGN          ; Test sign of FPREG
4274+ 2ED1 F0                   ret     P               ; Return if positive
4275+ 2ED2 21 34 82     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4276+ 2ED5 7E                   ld      A,(HL)          ; Get sign of mantissa
4277+ 2ED6 EE 80                xor     $80             ; Invert sign of mantissa
4278+ 2ED8 77                   ld      (HL),A          ; Re-save sign of mantissa
4279+ 2ED9 C9                   ret
4280+ 2EDA
4281+ 2EDA EB           STAKFP: ex      DE,HL           ; Save code string address
4282+ 2EDB 2A 32 82             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4283+ 2EDE E3                   ex      (SP),HL         ; Stack them,get return
4284+ 2EDF E5                   push    HL              ; Re-save return
4285+ 2EE0 2A 34 82             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4286+ 2EE3 E3                   ex      (SP),HL         ; Stack them,get return
4287+ 2EE4 E5                   push    HL              ; Re-save return
4288+ 2EE5 EB                   ex      DE,HL           ; Restore code string address
4289+ 2EE6 C9                   ret
4290+ 2EE7
4291+ 2EE7              ; store F.P. number from BCDE into (FPREG)
4292+ 2EE7 CD F8 2E     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4293+ 2EEA EB           FPBCDE: ex      DE,HL           ; Save code string address
4294+ 2EEB 22 32 82             ld      (FPREG),HL      ; Save LSB,NLSB of number
4295+ 2EEE 60                   ld      H,B             ; Exponent of number
4296+ 2EEF 69                   ld      L,C             ; MSB of number
4297+ 2EF0 22 34 82             ld      (FPREG+2),HL    ; Save MSB and exponent
4298+ 2EF3 EB                   ex      DE,HL           ; Restore code string address
4299+ 2EF4 C9                   ret
4300+ 2EF5
4301+ 2EF5              ; load F.P. number from (FPREG) into BCDE
4302+ 2EF5 21 32 82     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4303+ 2EF8 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4304+ 2EF9 23                   inc     HL
4305+ 2EFA 56                   ld      D,(HL)          ; Get NMSB of number
4306+ 2EFB 23                   inc     HL
4307+ 2EFC 4E                   ld      C,(HL)          ; Get MSB of number
4308+ 2EFD 23                   inc     HL
4309+ 2EFE 46                   ld      B,(HL)          ; Get exponent of number
4310+ 2EFF 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4311+ 2F00 C9                   ret
4312+ 2F01
4313+ 2F01              ; move floating point from (FPREG) into (HL)
4314+ 2F01 11 32 82     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4315+ 2F04 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4316+ 2F06 1A           DETHLB: ld      A,(DE)          ; Get source
4317+ 2F07 77                   ld      (HL),A          ; Save destination
4318+ 2F08 13                   inc     DE              ; Next source
4319+ 2F09 23                   inc     HL              ; Next destination
4320+ 2F0A 05                   dec     B               ; Count bytes
4321+ 2F0B C2 06 2F             jp      NZ,DETHLB       ; Loop if more
4322+ 2F0E C9                   ret
4323+ 2F0F
4324+ 2F0F 21 34 82     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4325+ 2F12 7E                   ld      A,(HL)          ; Get MSB
4326+ 2F13 07                   rlca                    ; Old sign to carry
4327+ 2F14 37                   scf                     ; Set MSBit
4328+ 2F15 1F                   rra                     ; Set MSBit of MSB
4329+ 2F16 77                   ld      (HL),A          ; Save new MSB
4330+ 2F17 3F                   ccf                     ; Complement sign
4331+ 2F18 1F                   rra                     ; Old sign to carry
4332+ 2F19 23                   inc     HL
4333+ 2F1A 23                   inc     HL
4334+ 2F1B 77                   ld      (HL),A          ; Set sign of result
4335+ 2F1C 79                   ld      A,C             ; Get MSB
4336+ 2F1D 07                   rlca                    ; Old sign to carry
4337+ 2F1E 37                   scf                     ; Set MSBit
4338+ 2F1F 1F                   rra                     ; Set MSBit of MSB
4339+ 2F20 4F                   ld      C,A             ; Save MSB
4340+ 2F21 1F                   rra
4341+ 2F22 AE                   xor     (HL)            ; New sign of result
4342+ 2F23 C9                   ret
4343+ 2F24
4344+ 2F24 78           CMPNUM: ld      A,B             ; Get exponent of number
4345+ 2F25 B7                   or      A
4346+ 2F26 CA A9 2E             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4347+ 2F29 21 B2 2E             ld      HL,RETREL       ; Return relation routine
4348+ 2F2C E5                   push    HL              ; Save for return
4349+ 2F2D CD A9 2E             call    TSTSGN          ; Test sign of FPREG
4350+ 2F30 79                   ld      A,C             ; Get MSB of number
4351+ 2F31 C8                   ret     Z               ; FPREG zero - Number's MSB
4352+ 2F32 21 34 82             ld      HL,FPREG+2      ; MSB of FPREG
4353+ 2F35 AE                   xor     (HL)            ; Combine signs
4354+ 2F36 79                   ld      A,C             ; Get MSB of number
4355+ 2F37 F8                   ret     M               ; Exit if signs different
4356+ 2F38 CD 3E 2F             call    CMPFP           ; Compare FP numbers
4357+ 2F3B 1F                   rra                     ; Get carry to sign
4358+ 2F3C A9                   xor     C               ; Combine with MSB of number
4359+ 2F3D C9                   ret
4360+ 2F3E
4361+ 2F3E 23           CMPFP:  inc     HL              ; Point to exponent
4362+ 2F3F 78                   ld      A,B             ; Get exponent
4363+ 2F40 BE                   cp      (HL)            ; Compare exponents
4364+ 2F41 C0                   ret     NZ              ; Different
4365+ 2F42 2B                   dec     HL              ; Point to MBS
4366+ 2F43 79                   ld      A,C             ; Get MSB
4367+ 2F44 BE                   cp      (HL)            ; Compare MSBs
4368+ 2F45 C0                   ret     NZ              ; Different
4369+ 2F46 2B                   dec     HL              ; Point to NMSB
4370+ 2F47 7A                   ld      A,D             ; Get NMSB
4371+ 2F48 BE                   cp      (HL)            ; Compare NMSBs
4372+ 2F49 C0                   ret     NZ              ; Different
4373+ 2F4A 2B                   dec     HL              ; Point to LSB
4374+ 2F4B 7B                   ld      A,E             ; Get LSB
4375+ 2F4C 96                   sub     (HL)            ; Compare LSBs
4376+ 2F4D C0                   ret     NZ              ; Different
4377+ 2F4E E1                   pop     HL              ; Drop RETurn
4378+ 2F4F E1                   pop     HL              ; Drop another RETurn
4379+ 2F50 C9                   ret
4380+ 2F51
4381+ 2F51 47           FPINT:  ld      B,A             ; <- Move
4382+ 2F52 4F                   ld      C,A             ; <- exponent
4383+ 2F53 57                   ld      D,A             ; <- to all
4384+ 2F54 5F                   ld      E,A             ; <- bits
4385+ 2F55 B7                   or      A               ; Test exponent
4386+ 2F56 C8                   ret     Z               ; Zero - Return zero
4387+ 2F57 E5                   push    HL              ; Save pointer to number
4388+ 2F58 CD F5 2E             call    BCDEFP          ; Move FPREG to BCDE
4389+ 2F5B CD 0F 2F             call    SIGNS           ; Set MSBs & sign of result
4390+ 2F5E AE                   xor     (HL)            ; Combine with sign of FPREG
4391+ 2F5F 67                   ld      H,A             ; Save combined signs
4392+ 2F60 FC 75 2F             call    M,DCBCDE        ; Negative - Decrement BCDE
4393+ 2F63 3E 98                ld      A,$80+24        ; 24 bits
4394+ 2F65 90                   sub     B               ; Bits to shift
4395+ 2F66 CD D7 2C             call    SCALE           ; Shift BCDE
4396+ 2F69 7C                   ld      A,H             ; Get combined sign
4397+ 2F6A 17                   rla                     ; Sign to carry
4398+ 2F6B DC AA 2C             call    C,FPROND        ; Negative - Round number up
4399+ 2F6E 06 00                ld      B,$00           ; Zero exponent
4400+ 2F70 DC C3 2C             call    C,COMPL         ; If negative make positive
4401+ 2F73 E1                   pop     HL              ; Restore pointer to number
4402+ 2F74 C9                   ret
4403+ 2F75
4404+ 2F75 1B           DCBCDE: dec     DE              ; Decrement BCDE
4405+ 2F76 7A                   ld      A,D             ; Test LSBs
4406+ 2F77 A3                   and     E
4407+ 2F78 3C                   inc     A
4408+ 2F79 C0                   ret     NZ              ; Exit if LSBs not FFFF
4409+ 2F7A 0B                   dec     BC              ; Decrement MSBs
4410+ 2F7B C9                   ret
4411+ 2F7C
4412+ 2F7C 21 35 82     INT:    ld      HL,FPEXP        ; Point to exponent
4413+ 2F7F 7E                   ld      A,(HL)          ; Get exponent
4414+ 2F80 FE 98                cp      $80+24          ; Integer accuracy only?
4415+ 2F82 3A 32 82             ld      A,(FPREG)       ; Get LSB
4416+ 2F85 D0                   ret     NC              ; Yes - Already integer
4417+ 2F86 7E                   ld      A,(HL)          ; Get exponent
4418+ 2F87 CD 51 2F             call    FPINT           ; F.P to integer
4419+ 2F8A 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4420+ 2F8C 7B                   ld      A,E             ; Get LSB of number
4421+ 2F8D F5                   push    AF              ; Save LSB
4422+ 2F8E 79                   ld      A,C             ; Get MSB of number
4423+ 2F8F 17                   rla                     ; Sign to carry
4424+ 2F90 CD 60 2C             call    CONPOS          ; Set sign of result
4425+ 2F93 F1                   pop     AF              ; Restore LSB of number
4426+ 2F94 C9                   ret
4427+ 2F95
4428+ 2F95 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4429+ 2F98 78                   ld      A,B             ; Test multiplier
4430+ 2F99 B1                   or      C
4431+ 2F9A C8                   ret     Z               ; Return zero if zero
4432+ 2F9B 3E 10                ld      A,$10           ; 16 bits
4433+ 2F9D 29           MLDBLP: add     HL,HL           ; Shift P.P left
4434+ 2F9E DA C3 23             jp      C,BSERR         ; ?BS Error if overflow
4435+ 2FA1 EB                   ex      DE,HL
4436+ 2FA2 29                   add     HL,HL           ; Shift multiplier left
4437+ 2FA3 EB                   ex      DE,HL
4438+ 2FA4 D2 AB 2F             jp      NC,NOMLAD       ; Bit was zero - No add
4439+ 2FA7 09                   add     HL,BC           ; Add multiplicand
4440+ 2FA8 DA C3 23             jp      C,BSERR         ; ?BS Error if overflow
4441+ 2FAB 3D           NOMLAD: dec     A               ; Count bits
4442+ 2FAC C2 9D 2F             jp      NZ,MLDBLP       ; More
4443+ 2FAF C9                   ret
4444+ 2FB0
4445+ 2FB0 FE 2D        ASCTFP: cp      '-'             ; Negative?
4446+ 2FB2 F5                   push    AF              ; Save it and flags
4447+ 2FB3 CA BC 2F             jp      Z,CNVNUM        ; Yes - Convert number
4448+ 2FB6 FE 2B                cp      '+'             ; Positive?
4449+ 2FB8 CA BC 2F             jp      Z,CNVNUM        ; Yes - Convert number
4450+ 2FBB 2B                   dec     HL              ; dec 'cos GETCHR INCs
4451+ 2FBC CD 78 2C     CNVNUM: call    RESZER          ; Set result to zero
4452+ 2FBF 47                   ld      B,A             ; Digits after point counter
4453+ 2FC0 57                   ld      D,A             ; Sign of exponent
4454+ 2FC1 5F                   ld      E,A             ; Exponent of ten
4455+ 2FC2 2F                   cpl
4456+ 2FC3 4F                   ld      C,A             ; Before or after point flag
4457+ 2FC4 CD 13 1C     MANLP:  call    GETCHR          ; Get next character
4458+ 2FC7 DA 0D 30             jp      C,ADDIG         ; Digit - Add to number
4459+ 2FCA FE 2E                cp      '.'
4460+ 2FCC CA E8 2F             jp      Z,DPOINT        ; '.' - Flag point
4461+ 2FCF FE 45                cp      'E'
4462+ 2FD1 C2 EC 2F             jp      NZ,CONEXP       ; Not 'E' - Scale number
4463+ 2FD4 CD 13 1C             call    GETCHR          ; Get next character
4464+ 2FD7 CD DF 21             call    SGNEXP          ; Get sign of exponent
4465+ 2FDA CD 13 1C     EXPLP:  call    GETCHR          ; Get next character
4466+ 2FDD DA 2F 30             jp      C,EDIGIT        ; Digit - Add to exponent
4467+ 2FE0 14                   inc     D               ; Is sign negative?
4468+ 2FE1 C2 EC 2F             jp      NZ,CONEXP       ; No - Scale number
4469+ 2FE4 AF                   xor     A
4470+ 2FE5 93                   sub     E               ; Negate exponent
4471+ 2FE6 5F                   ld      E,A             ; And re-save it
4472+ 2FE7 0C                   inc     C               ; Flag end of number
4473+ 2FE8 0C           DPOINT: inc     C               ; Flag point passed
4474+ 2FE9 CA C4 2F             jp      Z,MANLP         ; Zero - Get another digit
4475+ 2FEC E5           CONEXP: push    HL              ; Save code string address
4476+ 2FED 7B                   ld      A,E             ; Get exponent
4477+ 2FEE 90                   sub     B               ; Subtract digits after point
4478+ 2FEF F4 05 30     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4479+ 2FF2 F2 FB 2F             jp      P,ENDCON        ; Positive - All done
4480+ 2FF5 F5                   push    AF              ; Save number of times to /10
4481+ 2FF6 CD F1 2D             call    DIV10           ; Divide by 10
4482+ 2FF9 F1                   pop     AF              ; Restore count
4483+ 2FFA 3C                   inc     A               ; Count divides
4484+ 2FFB
4485+ 2FFB C2 EF 2F     ENDCON: jp      NZ,SCALMI       ; More to do
4486+ 2FFE D1                   pop     DE              ; Restore code string address
4487+ 2FFF F1                   pop     AF              ; Restore sign of number
4488+ 3000 CC D2 2E             call    Z,INVSGN        ; Negative - Negate number
4489+ 3003 EB                   ex      DE,HL           ; Code string address to HL
4490+ 3004 C9                   ret
4491+ 3005
4492+ 3005 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4493+ 3006 F5           MULTEN: push    AF              ; Save count
4494+ 3007 CD 92 2E             call    MLSP10          ; Multiply number by 10
4495+ 300A F1                   pop     AF              ; Restore count
4496+ 300B 3D                   dec     A               ; Count multiplies
4497+ 300C C9                   ret
4498+ 300D
4499+ 300D D5           ADDIG:  push    DE              ; Save sign of exponent
4500+ 300E 57                   ld      D,A             ; Save digit
4501+ 300F 78                   ld      A,B             ; Get digits after point
4502+ 3010 89                   adc     A,C             ; Add one if after point
4503+ 3011 47                   ld      B,A             ; Re-save counter
4504+ 3012 C5                   push    BC              ; Save point flags
4505+ 3013 E5                   push    HL              ; Save code string address
4506+ 3014 D5                   push    DE              ; Save digit
4507+ 3015 CD 92 2E             call    MLSP10          ; Multiply number by 10
4508+ 3018 F1                   pop     AF              ; Restore digit
4509+ 3019 D6 30                sub     '0'             ; Make it absolute
4510+ 301B CD 24 30             call    RSCALE          ; Re-scale number
4511+ 301E E1                   pop     HL              ; Restore code string address
4512+ 301F C1                   pop     BC              ; Restore point flags
4513+ 3020 D1                   pop     DE              ; Restore sign of exponent
4514+ 3021 C3 C4 2F             jp      MANLP           ; Get another digit
4515+ 3024
4516+ 3024 CD DA 2E     RSCALE: call    STAKFP          ; Put number on stack
4517+ 3027 CD BB 2E             call    FLGREL          ; Digit to add to FPREG
4518+ 302A C1           PADD:   pop     BC              ; Restore number
4519+ 302B D1                   pop     DE
4520+ 302C C3 12 2C             jp      FPADD           ; Add BCDE to FPREG and return
4521+ 302F
4522+ 302F 7B           EDIGIT: ld      A,E             ; Get digit
4523+ 3030 07                   rlca                    ; Times 2
4524+ 3031 07                   rlca                    ; Times 4
4525+ 3032 83                   add     A,E             ; Times 5
4526+ 3033 07                   rlca                    ; Times 10
4527+ 3034 86                   add     A,(HL)          ; Add next digit
4528+ 3035 D6 30                sub     '0'             ; Make it absolute
4529+ 3037 5F                   ld      E,A             ; Save new digit
4530+ 3038 C3 DA 2F             jp      EXPLP           ; Look for another digit
4531+ 303B
4532+ 303B E5           LINEIN: push    HL              ; Save code string address
4533+ 303C 21 69 16             ld      HL,INMSG        ; Output " in "
4534+ 303F CD A4 25             call    PRS             ; Output string at HL
4535+ 3042 E1                   pop     HL              ; Restore code string address
4536+ 3043 EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4537+ 3044 AF                   xor     A
4538+ 3045 06 98                ld      B,$80+24        ; 24 bits
4539+ 3047 CD C0 2E             call    RETINT          ; Return the integer
4540+ 304A 21 A3 25             ld      HL,PRNUMS       ; Print number string
4541+ 304D E5                   push    HL              ; Save for return
4542+ 304E 21 37 82     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4543+ 3051 E5                   push    HL              ; Save for return
4544+ 3052 CD A9 2E             call    TSTSGN          ; Test sign of FPREG
4545+ 3055 36 20                ld      (HL),SPC        ; Space at start
4546+ 3057 F2 5C 30             jp      P,SPCFST        ; Positive - Space to start
4547+ 305A 36 2D                ld      (HL),'-'        ; '-' sign at start
4548+ 305C 23           SPCFST: inc     HL              ; First byte of number
4549+ 305D 36 30                ld      (HL),'0'        ; '0' if zero
4550+ 305F CA 12 31             jp      Z,JSTZER        ; Return '0' if zero
4551+ 3062 E5                   push    HL              ; Save buffer address
4552+ 3063 FC D2 2E             call    M,INVSGN        ; Negate FPREG if negative
4553+ 3066 AF                   xor     A               ; Zero A
4554+ 3067 F5                   push    AF              ; Save it
4555+ 3068 CD 18 31             call    RNGTST          ; Test number is in range
4556+ 306B 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4557+ 306E 11 F8 4F             ld      DE,$4FF8
4558+ 3071 CD 24 2F             call    CMPNUM          ; Compare numbers
4559+ 3074 B7                   or      A
4560+ 3075 E2 89 30             jp      PO,INRNG        ; > 99999.9 - Sort it out
4561+ 3078 F1                   pop     AF              ; Restore count
4562+ 3079 CD 06 30             call    MULTEN          ; Multiply by ten
4563+ 307C F5                   push    AF              ; Re-save count
4564+ 307D C3 6B 30             jp      SIXDIG          ; Test it again
4565+ 3080
4566+ 3080 CD F1 2D     GTSIXD: call    DIV10           ; Divide by 10
4567+ 3083 F1                   pop     AF              ; Get count
4568+ 3084 3C                   inc     A               ; Count divides
4569+ 3085 F5                   push    AF              ; Re-save count
4570+ 3086 CD 18 31             call    RNGTST          ; Test number is in range
4571+ 3089 CD 00 2C     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4572+ 308C 3C                   inc     A
4573+ 308D CD 51 2F             call    FPINT           ; F.P to integer
4574+ 3090 CD EA 2E             call    FPBCDE          ; Move BCDE to FPREG
4575+ 3093 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4576+ 3096 F1                   pop     AF              ; Restore count
4577+ 3097 81                   add     A,C             ; 6 digits before point
4578+ 3098 3C                   inc     A               ; Add one
4579+ 3099 FA A5 30             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4580+ 309C FE 08                cp      6+1+1           ; More than 999999 ?
4581+ 309E D2 A5 30             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4582+ 30A1 3C                   inc     A               ; Adjust for exponent
4583+ 30A2 47                   ld      B,A             ; Exponent of number
4584+ 30A3 3E 02                ld      A,2             ; Make it zero after
4585+ 30A5
4586+ 30A5 3D           MAKNUM: dec     A               ; Adjust for digits to do
4587+ 30A6 3D                   dec     A
4588+ 30A7 E1                   pop     HL              ; Restore buffer address
4589+ 30A8 F5                   push    AF              ; Save count
4590+ 30A9 11 2B 31             ld      DE,POWERS       ; Powers of ten
4591+ 30AC 05                   dec     B               ; Count digits before point
4592+ 30AD C2 B6 30             jp      NZ,DIGTXT       ; Not zero - Do number
4593+ 30B0 36 2E                ld      (HL),'.'        ; Save point
4594+ 30B2 23                   inc     HL              ; Move on
4595+ 30B3 36 30                ld      (HL),'0'        ; Save zero
4596+ 30B5 23                   inc     HL              ; Move on
4597+ 30B6 05           DIGTXT: dec     B               ; Count digits before point
4598+ 30B7 36 2E                ld      (HL),'.'        ; Save point in case
4599+ 30B9 CC FF 2E             call    Z,INCHL         ; Last digit - move on
4600+ 30BC C5                   push    BC              ; Save digits before point
4601+ 30BD E5                   push    HL              ; Save buffer address
4602+ 30BE D5                   push    DE              ; Save powers of ten
4603+ 30BF CD F5 2E             call    BCDEFP          ; Move FPREG to BCDE
4604+ 30C2 E1                   pop     HL              ; Powers of ten table
4605+ 30C3 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4606+ 30C5 04           TRYAGN: inc     B               ; Count subtractions
4607+ 30C6 7B                   ld      A,E             ; Get LSB
4608+ 30C7 96                   sub     (HL)            ; Subtract LSB
4609+ 30C8 5F                   ld      E,A             ; Save LSB
4610+ 30C9 23                   inc     HL
4611+ 30CA 7A                   ld      A,D             ; Get NMSB
4612+ 30CB 9E                   sbc     A,(HL)          ; Subtract NMSB
4613+ 30CC 57                   ld      D,A             ; Save NMSB
4614+ 30CD 23                   inc     HL
4615+ 30CE 79                   ld      A,C             ; Get MSB
4616+ 30CF 9E                   sbc     A,(HL)          ; Subtract MSB
4617+ 30D0 4F                   ld      C,A             ; Save MSB
4618+ 30D1 2B                   dec     HL              ; Point back to start
4619+ 30D2 2B                   dec     HL
4620+ 30D3 D2 C5 30             jp      NC,TRYAGN       ; No overflow - Try again
4621+ 30D6 CD B7 2C             call    PLUCDE          ; Restore number
4622+ 30D9 23                   inc     HL              ; Start of next number
4623+ 30DA CD EA 2E             call    FPBCDE          ; Move BCDE to FPREG
4624+ 30DD EB                   ex      DE,HL           ; Save point in table
4625+ 30DE E1                   pop     HL              ; Restore buffer address
4626+ 30DF 70                   ld      (HL),B          ; Save digit in buffer
4627+ 30E0 23                   inc     HL              ; And move on
4628+ 30E1 C1                   pop     BC              ; Restore digit count
4629+ 30E2 0D                   dec     C               ; Count digits
4630+ 30E3 C2 B6 30             jp      NZ,DIGTXT       ; More - Do them
4631+ 30E6 05                   dec     B               ; Any decimal part?
4632+ 30E7 CA F6 30             jp      Z,DOEBIT        ; No - Do 'E' bit
4633+ 30EA 2B           SUPTLZ: dec     HL              ; Move back through buffer
4634+ 30EB 7E                   ld      A,(HL)          ; Get character
4635+ 30EC FE 30                cp      '0'             ; '0' character?
4636+ 30EE CA EA 30             jp      Z,SUPTLZ        ; Yes - Look back for more
4637+ 30F1 FE 2E                cp      '.'             ; A decimal point?
4638+ 30F3 C4 FF 2E             call    NZ,INCHL        ; Move back over digit
4639+ 30F6
4640+ 30F6 F1           DOEBIT: pop     AF              ; Get 'E' flag
4641+ 30F7 CA 15 31             jp      Z,NOENED        ; No 'E' needed - End buffer
4642+ 30FA 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4643+ 30FC 23                   inc     HL              ; And move on
4644+ 30FD 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4645+ 30FF F2 06 31             jp      P,OUTEXP        ; Positive - Output exponent
4646+ 3102 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4647+ 3104 2F                   cpl                     ; Negate exponent
4648+ 3105 3C                   inc     A
4649+ 3106 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4650+ 3108 04           EXPTEN: inc     B               ; Count subtractions
4651+ 3109 D6 0A                sub     $0A             ; Tens digit
4652+ 310B D2 08 31             jp      NC,EXPTEN       ; More to do
4653+ 310E C6 3A                add     A,'0'+10        ; Restore and make ASCII
4654+ 3110 23                   inc     HL              ; Move on
4655+ 3111 70                   ld      (HL),B          ; Save MSB of exponent
4656+ 3112 23           JSTZER: inc     HL              ;
4657+ 3113 77                   ld      (HL),A          ; Save LSB of exponent
4658+ 3114 23                   inc     HL
4659+ 3115 71           NOENED: ld      (HL),C          ; Mark end of buffer
4660+ 3116 E1                   pop     HL              ; Restore code string address
4661+ 3117 C9                   ret
4662+ 3118
4663+ 3118 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4664+ 311B 11 F7 23             ld      DE,$23F7
4665+ 311E CD 24 2F             call    CMPNUM          ; Compare numbers
4666+ 3121 B7                   or      A
4667+ 3122 E1                   pop     HL              ; Return address to HL
4668+ 3123 E2 80 30             jp      PO,GTSIXD       ; Too big - Divide by ten
4669+ 3126 E9                   jp      (HL)            ; Otherwise return to caller
4670+ 3127
4671+ 3127 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4672+ 312B
4673+ 312B A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4674+ 312E 10 27 00             defb    $10,$27,$00  ;  10000
4675+ 3131 E8 03 00             defb    $E8,$03,$00  ;   1000
4676+ 3134 64 00 00             defb    $64,$00,$00  ;    100
4677+ 3137 0A 00 00             defb    $0A,$00,$00  ;     10
4678+ 313A 01 00 00             defb    $01,$00,$00  ;      1
4679+ 313D
4680+ 313D 21 D2 2E     NEGAFT: ld      HL,INVSGN       ; Negate result
4681+ 3140 E3                   ex      (SP),HL         ; To be done after caller
4682+ 3141 E9                   jp      (HL)            ; Return to caller
4683+ 3142
4684+ 3142 CD DA 2E     SQR:    call    STAKFP          ; Put value on stack
4685+ 3145 21 27 31             ld      HL,HALF         ; Set power to 1/2
4686+ 3148 CD E7 2E             call    PHLTFP          ; Move 1/2 to FPREG
4687+ 314B
4688+ 314B C1           POWER:  pop     BC              ; Get base
4689+ 314C D1                   pop     DE
4690+ 314D CD A9 2E             call    TSTSGN          ; Test sign of power
4691+ 3150 78                   ld      A,B             ; Get exponent of base
4692+ 3151 CA 90 31             jp      Z,EXP           ; Make result 1 if zero
4693+ 3154 F2 5B 31             jp      P,POWER1        ; Positive base - Ok
4694+ 3157 B7                   or      A               ; Zero to negative power?
4695+ 3158 CA F3 16             jp      Z,DZERR         ; Yes - ?/0 Error
4696+ 315B B7           POWER1: or      A               ; Base zero?
4697+ 315C CA 79 2C             jp      Z,SAVEXP        ; Yes - Return zero
4698+ 315F D5                   push    DE              ; Save base
4699+ 3160 C5                   push    BC
4700+ 3161 79                   ld      A,C             ; Get MSB of base
4701+ 3162 F6 7F                or      %01111111       ; Get sign status
4702+ 3164 CD F5 2E             call    BCDEFP          ; Move power to BCDE
4703+ 3167 F2 78 31             jp      P,POWER2        ; Positive base - Ok
4704+ 316A D5                   push    DE              ; Save power
4705+ 316B C5                   push    BC
4706+ 316C CD 7C 2F             call    INT             ; Get integer of power
4707+ 316F C1                   pop     BC              ; Restore power
4708+ 3170 D1                   pop     DE
4709+ 3171 F5                   push    AF              ; MSB of base
4710+ 3172 CD 24 2F             call    CMPNUM          ; Power an integer?
4711+ 3175 E1                   pop     HL              ; Restore MSB of base
4712+ 3176 7C                   ld      A,H             ; but don't affect flags
4713+ 3177 1F                   rra                     ; Exponent odd or even?
4714+ 3178 E1           POWER2: pop     HL              ; Restore MSB and exponent
4715+ 3179 22 34 82             ld      (FPREG+2),HL    ; Save base in FPREG
4716+ 317C E1                   pop     HL              ; LSBs of base
4717+ 317D 22 32 82             ld      (FPREG),HL      ; Save in FPREG
4718+ 3180 DC 3D 31             call    C,NEGAFT        ; Odd power - Negate result
4719+ 3183 CC D2 2E             call    Z,INVSGN        ; Negative base - Negate it
4720+ 3186 D5                   push    DE              ; Save power
4721+ 3187 C5                   push    BC
4722+ 3188 CD 0C 2D             call    LOG             ; Get LOG of base
4723+ 318B C1                   pop     BC              ; Restore power
4724+ 318C D1                   pop     DE
4725+ 318D CD 4D 2D             call    FPMULT          ; Multiply LOG by power
4726+ 3190
4727+ 3190 CD DA 2E     EXP:    call    STAKFP          ; Put value on stack
4728+ 3193 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4729+ 3196 11 3B AA             ld      DE,$AA3B
4730+ 3199 CD 4D 2D             call    FPMULT          ; Multiply value by 1/LN(2)
4731+ 319C 3A 35 82             ld      A,(FPEXP)       ; Get exponent
4732+ 319F FE 88                cp      $80+8           ; Is it in range?
4733+ 31A1 D2 85 2E             jp      NC,OVTST1       ; No - Test for overflow
4734+ 31A4 CD 7C 2F             call    INT             ; Get INT of FPREG
4735+ 31A7 C6 80                add     A,$80           ; For excess 128
4736+ 31A9 C6 02                add     A,$02           ; Exponent > 126?
4737+ 31AB DA 85 2E             jp      C,OVTST1        ; Yes - Test for overflow
4738+ 31AE F5                   push    AF              ; Save scaling factor
4739+ 31AF 21 FB 2C             ld      HL,UNITY        ; Point to 1.
4740+ 31B2 CD 03 2C             call    ADDPHL          ; Add 1 to FPREG
4741+ 31B5 CD 44 2D             call    MULLN2          ; Multiply by LN(2)
4742+ 31B8 F1                   pop     AF              ; Restore scaling factor
4743+ 31B9 C1                   pop     BC              ; Restore exponent
4744+ 31BA D1                   pop     DE
4745+ 31BB F5                   push    AF              ; Save scaling factor
4746+ 31BC CD 0F 2C             call    SUBCDE          ; Subtract exponent from FPREG
4747+ 31BF CD D2 2E             call    INVSGN          ; Negate result
4748+ 31C2 21 D0 31             ld      HL,EXPTAB       ; Coefficient table
4749+ 31C5 CD 00 32             call    SMSER1          ; Sum the series
4750+ 31C8 11 00 00             ld      DE,$0000        ; Zero LSBs
4751+ 31CB C1                   pop     BC              ; Scaling factor
4752+ 31CC 4A                   ld      C,D             ; Zero MSB
4753+ 31CD C3 4D 2D             jp      FPMULT          ; Scale result to correct value
4754+ 31D0
4755+ 31D0 08           EXPTAB: defb    $08             ; Table used by EXP
4756+ 31D1 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4757+ 31D5 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4758+ 31D9 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4759+ 31DD E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4760+ 31E1 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4761+ 31E5 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4762+ 31E9 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4763+ 31ED 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4764+ 31F1
4765+ 31F1 CD DA 2E     SUMSER: call    STAKFP          ; Put FPREG on stack
4766+ 31F4 11 4B 2D             ld      DE,MULT         ; Multiply by "X"
4767+ 31F7 D5                   push    DE              ; To be done after
4768+ 31F8 E5                   push    HL              ; Save address of table
4769+ 31F9 CD F5 2E             call    BCDEFP          ; Move FPREG to BCDE
4770+ 31FC CD 4D 2D             call    FPMULT          ; Square the value
4771+ 31FF E1                   pop     HL              ; Restore address of table
4772+ 3200 CD DA 2E     SMSER1: call    STAKFP          ; Put value on stack
4773+ 3203 7E                   ld      A,(HL)          ; Get number of coefficients
4774+ 3204 23                   inc     HL              ; Point to start of table
4775+ 3205 CD E7 2E             call    PHLTFP          ; Move coefficient to FPREG
4776+ 3208 06                   defb    06H             ; Skip "pop AF"
4777+ 3209 F1           SUMLP:  pop     AF              ; Restore count
4778+ 320A C1                   pop     BC              ; Restore number
4779+ 320B D1                   pop     DE
4780+ 320C 3D                   dec     A               ; Cont coefficients
4781+ 320D C8                   ret     Z               ; All done
4782+ 320E D5                   push    DE              ; Save number
4783+ 320F C5                   push    BC
4784+ 3210 F5                   push    AF              ; Save count
4785+ 3211 E5                   push    HL              ; Save address in table
4786+ 3212 CD 4D 2D             call    FPMULT          ; Multiply FPREG by BCDE
4787+ 3215 E1                   pop     HL              ; Restore address in table
4788+ 3216 CD F8 2E             call    LOADFP          ; Number at HL to BCDE
4789+ 3219 E5                   push    HL              ; Save address in table
4790+ 321A CD 12 2C             call    FPADD           ; Add coefficient to FPREG
4791+ 321D E1                   pop     HL              ; Restore address in table
4792+ 321E C3 09 32             jp      SUMLP           ; More coefficients
4793+ 3221
4794+ 3221
4795+ 3221              ; random number generator
4796+ 3221              ; a negative argument is used as a seed for the RNG
4797+ 3221              ; 0 is used to repeat the last random number
4798+ 3221              ; a positive argument generates a new random number
4799+ 3221 CD A9 2E     RND:    call    TSTSGN          ; Test sign of FPREG
4800+ 3224 21 7A 80             ld      HL,SEED+2       ; Random number seed
4801+ 3227 FA 82 32             jp      M,RESEED        ; Negative - Re-seed
4802+ 322A 21 9B 80             ld      HL,LSTRND       ; Last random number
4803+ 322D CD E7 2E             call    PHLTFP          ; Move last RND to FPREG
4804+ 3230 21 7A 80             ld      HL,SEED+2       ; Random number seed
4805+ 3233 C8                   ret     Z               ; Return if RND(0)
4806+ 3234 86                   add     A,(HL)          ; Add (SEED)+2)
4807+ 3235 E6 07                and     %00000111       ; 0 to 7
4808+ 3237 06 00                ld      B,$00
4809+ 3239 77                   ld      (HL),A          ; Re-save seed
4810+ 323A 23                   inc     HL              ; Move to coefficient table
4811+ 323B 87                   add     A,A             ; 4 bytes
4812+ 323C 87                   add     A,A             ; per entry
4813+ 323D 4F                   ld      C,A             ; BC = Offset into table
4814+ 323E 09                   add     HL,BC           ; Point to coefficient
4815+ 323F CD F8 2E             call    LOADFP          ; Coefficient to BCDE
4816+ 3242 CD 4D 2D             call    FPMULT  ;       ; Multiply FPREG by coefficient
4817+ 3245 3A 79 80             ld      A,(SEED+1)      ; Get (SEED+1)
4818+ 3248 3C                   inc     A               ; Add 1
4819+ 3249 E6 03                and     %00000011       ; 0 to 3
4820+ 324B 06 00                ld      B,$00
4821+ 324D FE 01                cp      $01             ; Is it zero?
4822+ 324F 88                   adc     A,B             ; Yes - Make it 1
4823+ 3250 32 79 80             ld      (SEED+1),A      ; Re-save seed
4824+ 3253 21 86 32             ld      HL,RNDTAB-4     ; Addition table
4825+ 3256 87                   add     A,A             ; 4 bytes
4826+ 3257 87                   add     A,A             ; per entry
4827+ 3258 4F                   ld      C,A             ; BC = Offset into table
4828+ 3259 09                   add     HL,BC           ; Point to value
4829+ 325A CD 03 2C             call    ADDPHL          ; Add value to FPREG
4830+ 325D CD F5 2E     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4831+ 3260 7B                   ld      A,E             ; Get LSB
4832+ 3261 59                   ld      E,C             ; LSB = MSB
4833+ 3262 EE 4F                xor     %01001111       ; Fiddle around
4834+ 3264 4F                   ld      C,A             ; New MSB
4835+ 3265 36 80                ld      (HL),$80        ; Set exponent
4836+ 3267 2B                   dec     HL              ; Point to MSB
4837+ 3268 46                   ld      B,(HL)          ; Get MSB
4838+ 3269 36 80                ld      (HL),$80        ; Make value -0.5
4839+ 326B 21 78 80             ld      HL,SEED         ; Random number seed
4840+ 326E 34                   inc     (HL)            ; Count seed
4841+ 326F 7E                   ld      A,(HL)          ; Get seed
4842+ 3270 D6 AB                sub     $AB             ; Do it modulo 171
4843+ 3272 C2 79 32             jp      NZ,RND2         ; Non-zero - Ok
4844+ 3275 77                   ld      (HL),A          ; Zero seed
4845+ 3276 0C                   inc     C               ; Fillde about
4846+ 3277 15                   dec     D               ; with the
4847+ 3278 1C                   inc     E               ; number
4848+ 3279 CD 63 2C     RND2:   call    BNORM           ; Normalise number
4849+ 327C 21 9B 80             ld      HL,LSTRND       ; Save random number
4850+ 327F C3 01 2F             jp      FPTHL           ; Move FPREG to last and return
4851+ 3282
4852+ 3282 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4853+ 3283 2B                   dec     HL
4854+ 3284 77                   ld      (HL),A
4855+ 3285 2B                   dec     HL
4856+ 3286 77                   ld      (HL),A
4857+ 3287 C3 5D 32             jp      RND1            ; Return RND seed
4858+ 328A
4859+ 328A 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4860+ 328E 99 E9 92 69          defb    $99,$E9,$92,$69
4861+ 3292 10 D1 75 68          defb    $10,$D1,$75,$68
4862+ 3296
4863+ 3296              ; COS and SIN functions
4864+ 3296 21 E0 32     COS:    ld      HL,HALFPI       ; Point to PI/2
4865+ 3299 CD 03 2C             call    ADDPHL          ; Add it to PPREG
4866+ 329C CD DA 2E     SIN:    call    STAKFP          ; Put angle on stack
4867+ 329F 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4868+ 32A2 11 DB 0F             ld      DE,$0FDB
4869+ 32A5 CD EA 2E             call    FPBCDE          ; Move 2 PI to FPREG
4870+ 32A8 C1                   pop     BC              ; Restore angle
4871+ 32A9 D1                   pop     DE
4872+ 32AA CD FF 2D             call    DVBCDE          ; Divide angle by 2 PI
4873+ 32AD CD DA 2E             call    STAKFP          ; Put it on stack
4874+ 32B0 CD 7C 2F             call    INT             ; Get INT of result
4875+ 32B3 C1                   pop     BC              ; Restore number
4876+ 32B4 D1                   pop     DE
4877+ 32B5 CD 0F 2C             call    SUBCDE          ; Make it 0 <= value < 1
4878+ 32B8 21 E4 32             ld      HL,QUARTR       ; Point to 0.25
4879+ 32BB CD 09 2C             call    SUBPHL          ; Subtract value from 0.25
4880+ 32BE CD A9 2E             call    TSTSGN          ; Test sign of value
4881+ 32C1 37                   scf                     ; Flag positive
4882+ 32C2 F2 CC 32             jp      P,SIN1          ; Positive - Ok
4883+ 32C5 CD 00 2C             call    ROUND           ; Add 0.5 to value
4884+ 32C8 CD A9 2E             call    TSTSGN          ; Test sign of value
4885+ 32CB B7                   or      A               ; Flag negative
4886+ 32CC F5           SIN1:   push    AF              ; Save sign
4887+ 32CD F4 D2 2E             call    P,INVSGN        ; Negate value if positive
4888+ 32D0 21 E4 32             ld      HL,QUARTR       ; Point to 0.25
4889+ 32D3 CD 03 2C             call    ADDPHL          ; Add 0.25 to value
4890+ 32D6 F1                   pop     AF              ; Restore sign
4891+ 32D7 D4 D2 2E             call    NC,INVSGN       ; Negative - Make positive
4892+ 32DA 21 E8 32             ld      HL,SINTAB       ; Coefficient table
4893+ 32DD C3 F1 31             jp      SUMSER          ; Evaluate sum of series
4894+ 32E0
4895+ 32E0 DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4896+ 32E4
4897+ 32E4 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4898+ 32E8
4899+ 32E8 05           SINTAB: defb    $05             ; Table used by SIN
4900+ 32E9 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4901+ 32ED 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4902+ 32F1 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4903+ 32F5 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4904+ 32F9 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4905+ 32FD
4906+ 32FD CD DA 2E     TAN:    call    STAKFP          ; Put angle on stack
4907+ 3300 CD 9C 32             call    SIN             ; Get SIN of angle
4908+ 3303 C1                   pop     BC              ; Restore angle
4909+ 3304 E1                   pop     HL
4910+ 3305 CD DA 2E             call    STAKFP          ; Save SIN of angle
4911+ 3308 EB                   ex      DE,HL           ; BCDE = Angle
4912+ 3309 CD EA 2E             call    FPBCDE          ; Angle to FPREG
4913+ 330C CD 96 32             call    COS             ; Get COS of angle
4914+ 330F C3 FD 2D             jp      DIV             ; TAN = SIN / COS
4915+ 3312
4916+ 3312 CD A9 2E     ATN:    call    TSTSGN          ; Test sign of value
4917+ 3315 FC 3D 31             call    M,NEGAFT        ; Negate result after if -ve
4918+ 3318 FC D2 2E             call    M,INVSGN        ; Negate value if -ve
4919+ 331B 3A 35 82             ld      A,(FPEXP)       ; Get exponent
4920+ 331E FE 81                cp      81H             ; Number less than 1?
4921+ 3320 DA 2F 33             jp      C,ATN1          ; Yes - Get arc tangnt
4922+ 3323 01 00 81             ld      BC,$8100        ; BCDE = 1
4923+ 3326 51                   ld      D,C
4924+ 3327 59                   ld      E,C
4925+ 3328 CD FF 2D             call    DVBCDE          ; Get reciprocal of number
4926+ 332B 21 09 2C             ld      HL,SUBPHL       ; Sub angle from PI/2
4927+ 332E E5                   push    HL              ; Save for angle > 1
4928+ 332F 21 39 33     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4929+ 3332 CD F1 31             call    SUMSER          ; Evaluate sum of series
4930+ 3335 21 E0 32             ld      HL,HALFPI       ; PI/2 - angle in case > 1
4931+ 3338 C9                   ret                     ; Number > 1 - Sub from PI/2
4932+ 3339
4933+ 3339 09           ATNTAB: defb    $09             ; Table used by ATN
4934+ 333A 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
4935+ 333E 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
4936+ 3342 FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
4937+ 3346 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
4938+ 334A 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
4939+ 334E C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
4940+ 3352 E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
4941+ 3356 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
4942+ 335A 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
4943+ 335E
4944+ 335E
4945+ 335E C9           ARET:   ret                     ; A RETurn instruction
4946+ 335F
4947+ 335F D7           GETINP: rst     $10             ; input a character
4948+ 3360 C9                   ret
4949+ 3361
4950+ 3361 E5           CLS:    push    HL
4951+ 3362 D5                   push    DE
4952+ 3363 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
4953+ 3366 FE 02                cp      $02             ; G2 mode?
4954+ 3368 CC EB 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
4955+ 336B D1                   pop     DE
4956+ 336C E1                   pop     HL
4957+ 336D 3E 0C                ld      A,CS            ; ASCII Clear screen
4958+ 336F CD 10 1A             call    SND2VID         ; send to screen
4959+ 3372 C3 B8 3F             jp      MONOUT          ; Output character
4960+ 3375
4961+ 3375 CD 22 29     WIDTH:  call    GETINT          ; Get integer 0-255
4962+ 3378 7B                   ld      A,E             ; Width to A
4963+ 3379 32 A2 80             ld      (LWIDTH),A      ; Set width
4964+ 337C C9                   ret
4965+ 337D
4966+ 337D
4967+ 337D              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
4968+ 337D              ; i.e., the first location is the LSB, while the second one is the MSB
4969+ 337D CD C9 1C     DEEK:   call    DEINT           ; Get integer -32768 to 32767
4970+ 3380 D5                   push    DE              ; Save number
4971+ 3381 E1                   pop     HL              ; Number to HL
4972+ 3382 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
4973+ 3383 23                   inc     HL
4974+ 3384 7E                   ld      A,(HL)          ; Get MSB of contents
4975+ 3385 C3 86 24             jp      ABPASS          ; Return integer AB
4976+ 3388
4977+ 3388              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
4978+ 3388              ; i.e., the LSB will go into the first location, while the MSB into the second one
4979+ 3388 CD 9C 20     DOKE:   call    GETNUM          ; Get a number
4980+ 338B CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
4981+ 338E D5                   push    DE              ; Save address
4982+ 338F CD D2 19             call    CHKSYN          ; Make sure ',' follows
4983+ 3392 2C                   defb    ','
4984+ 3393 CD 9C 20             call    GETNUM          ; Get a number
4985+ 3396 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
4986+ 3399 E3                   ex      (SP),HL         ; Save value,get address
4987+ 339A 73                   ld      (HL),E          ; Save LSB of value
4988+ 339B 23                   inc     HL
4989+ 339C 72                   ld      (HL),D          ; Save MSB of value
4990+ 339D E1                   pop     HL              ; Restore code string address
4991+ 339E C9                   ret
4992+ 339F
4993+ 339F              ; stop the execution of code for a certain bit of time. The pause
4994+ 339F              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
4995+ 339F CD 9C 20     PAUSE:  call    GETNUM          ; Get a number
4996+ 33A2 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
4997+ 33A5 7A                   ld      A,D             ; load D into A
4998+ 33A6 B3                   or      E               ; are D & E equal to $00?
4999+ 33A7 C8                   ret     Z               ; if yes, then return
5000+ 33A8 C5           DIR_PAU:push    BC              ; store BC
5001+ 33A9 3A BD 81             ld      A,(TMRCNT)      ; Load current value of system timer
5002+ 33AC 47                   ld      B,A             ; move it into B
5003+ 33AD CD 3E 1C     RPTPS:  call    TSTBRK          ; Test for break key
5004+ 33B0 3A BD 81             ld      A,(TMRCNT)      ; Load current value of system timer
5005+ 33B3 B8                   cp      B               ; is it the same value?
5006+ 33B4 28 F7                jr      Z,RPTPS         ; yes, so read again
5007+ 33B6 47                   ld      B,A             ; no, so store the new value
5008+ 33B7 1B                   dec     DE              ; decrement interval
5009+ 33B8 7A                   ld      A,D             ; load D into A
5010+ 33B9 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5011+ 33BA 20 F1                jr      NZ,RPTPS        ; no, repeat
5012+ 33BC C1                   pop     BC              ; yes, recover BC and continue
5013+ 33BD C9                   ret
5014+ 33BE
5015+ 33BE              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5016+ 33BE              ; where X is graphic mode:
5017+ 33BE              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5018+ 33BE              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5019+ 33BE              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5020+ 33BE              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5021+ 33BE              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5022+ 33BE AF           SCREEN: xor     A
5023+ 33BF 32 E0 81             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5024+ 33C2 CD 22 29             call    GETINT          ; Get integer 0-255
5025+ 33C5 FE 05                cp      $05             ; is it a valid mode (0~4)?
5026+ 33C7 D2 DE 1C             jp      NC,FCERR        ; No - Illegal function call Error
5027+ 33CA 32 DE 81             ld      (TMPBFR1),A     ; store graphic mode
5028+ 33CD A7                   and     A               ; is it 0 (text mode)?
5029+ 33CE CA EA 33             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5030+ 33D1 CD 29 34     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5031+ 33D4 DA DC 33             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5032+ 33D7 3E 02                ld      A,$02           ; no, so set sprite size
5033+ 33D9 32 E0 81             ld      (TMPBFR2),A     ; ...to 16x16
5034+ 33DC CD 29 34     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5035+ 33DF DA EA 33             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5036+ 33E2 3A E0 81             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5037+ 33E5 F6 01                or      $01             ; ...set sprite magnification to 2x...
5038+ 33E7 32 E0 81             ld      (TMPBFR2),A     ; ...and save flags again
5039+ 33EA F3           SCVDP:  di                      ; disable INTs
5040+ 33EB D5                   push    DE              ; store DE
5041+ 33EC E5                   push    HL              ; store HL
5042+ 33ED 3A DE 81             ld      A,(TMPBFR1)     ; recover graphic mode
5043+ 33F0 5F                   ld      E,A             ; and store it into E
5044+ 33F1 3A E0 81             ld      A,(TMPBFR2)     ; recover sprite flags
5045+ 33F4 57                   ld      D,A             ; and store them into D
5046+ 33F5 D5                   push    DE              ; store D & E
5047+ 33F6 CD EF 03             call    initVDP         ; initialize VDP with mode pointed by E
5048+ 33F9 D1                   pop     DE              ; retrieve D & E
5049+ 33FA 7B                   ld      A,E             ; move graphic mode into A
5050+ 33FB 87                   add     A,A
5051+ 33FC 87                   add     A,A
5052+ 33FD 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5053+ 33FE 5F                   ld      E,A             ; and pass it into E
5054+ 33FF D5                   push    DE              ; store sprite flags in E
5055+ 3400 16 00                ld      D,$00           ; reset D
5056+ 3402 21 3B 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5057+ 3405 19                   add     HL,DE           ; load correct reg#1 setting
5058+ 3406 D1                   pop     DE              ; retrieve sprite flags from E
5059+ 3407 7E                   ld      A,(HL)          ; load reg#1 setting
5060+ 3408 E6 FC                and     %11111100       ; reset size & magn. bits
5061+ 340A B2                   or      D               ; set size & magn. bits
5062+ 340B 5F                   ld      E,A             ; value into E
5063+ 340C 3E 01                ld      A,$01           ; reg #1
5064+ 340E CD C7 06             call    WRITE_VREG      ; send setting to reg #1
5065+ 3411 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
5066+ 3414 23                   inc     HL              ; -1 means direct statement
5067+ 3415 7C                   ld      A,H
5068+ 3416 B5                   or      L
5069+ 3417 CC 3A 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5070+ 341A FB                   ei                      ; re-enable interrupts
5071+ 341B E1                   pop     HL              ; restore HL
5072+ 341C D1                   pop     DE              ; restore DE
5073+ 341D 3A CE 81             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5074+ 3420 FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5075+ 3422 D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5076+ 3423 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5077+ 3425 32 DA 81             ld      (PRNTVIDEO),A   ; ...video buffer...
5078+ 3428 C9                   ret                     ; ...and return to caller
5079+ 3429
5080+ 3429              ; check an additional argument for SCREEN - There are 2 ways of working:
5081+ 3429              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5082+ 3429              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5083+ 3429 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5084+ 342A CD 13 1C             call    GETCHR          ; Get next character
5085+ 342D 37                   scf                     ; set carry flag
5086+ 342E C8                   ret     Z               ; return if nothing follows with Carry=1
5087+ 342F CD D2 19             call    CHKSYN          ; Make sure ',' follows
5088+ 3432 2C                   defb    ','
5089+ 3433 CD 22 29             call    GETINT          ; get value
5090+ 3436 1F                   rra                     ; Carry=bit #0
5091+ 3437 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5092+ 3438 C9                   ret                     ; return
5093+ 3439
5094+ 3439
5095+ 3439              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5096+ 3439              ; a=foreground color / b=background color / c=border color
5097+ 3439              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5098+ 3439              ; the number of arguments is based on the current screen mode
5099+ 3439 CD 22 29     COLOR:  call    GETINT          ; get first value
5100+ 343C CD E2 34             call    CHKCLR1         ; check if it's in range 1~15
5101+ 343F 32 DE 81             ld      (TMPBFR1),A     ; store it
5102+ 3442 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
5103+ 3445 FE 03                cp      $03             ; is it multicolor mode?
5104+ 3447 20 0D                jr      NZ,CNTCKCL      ; no, continue
5105+ 3449 3E 0F                ld      A,$0F           ; white for...
5106+ 344B 32 DC 81             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5107+ 344E 3A DE 81             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5108+ 3451 32 E2 81             ld      (TMPBFR3),A     ; move color into temp buffer 3
5109+ 3454 18 31                jr      CLRMC           ; jump to set color
5110+ 3456 CD D2 19     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5111+ 3459 2C                   defb    ','
5112+ 345A CD 22 29             call    GETINT          ; get second value
5113+ 345D CD E2 34             call    CHKCLR1         ; check if it's in range 1~15
5114+ 3460 32 E0 81             ld      (TMPBFR2),A     ; store it
5115+ 3463 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
5116+ 3466 A7                   and     A               ; is it text mode?
5117+ 3467 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5118+ 3469 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5119+ 346C 2C                   defb    ','
5120+ 346D CD 22 29             call    GETINT          ; get third value
5121+ 3470 CD E2 34             call    CHKCLR1         ; check if it's in range 1~15
5122+ 3473 32 E2 81             ld      (TMPBFR3),A     ; store it
5123+ 3476 D5                   push    DE              ; store DE
5124+ 3477 3A CF 81             ld      A,(SCR_MODE)    ; check screen mode
5125+ 347A FE 01                cp      $01             ; is it G1 mode?
5126+ 347C 28 10                jr      Z,CLRG1         ; yes, jump over
5127+ 347E FE 02                cp      $02             ; is it G2 mode?
5128+ 3480 28 15                jr      Z,CLRG2         ; yes, jump over
5129+ 3482 18 1C                jr      CLREX2          ; last case can only be ExG2
5130+ 3484 CD D5 34     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5131+ 3487 32 E2 81     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5132+ 348A D5                   push    DE              ; store DE
5133+ 348B F3                   di                      ; disable INTs
5134+ 348C 18 2E                jr      SETBRCL         ; set colors and exit
5135+ 348E CD D5 34     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5136+ 3491 16 01                ld      D,$01           ; repeat 1 time
5137+ 3493 06 20                ld      B,$20           ; 32 bytes of colors
5138+ 3495 18 10                jr      LOADCLR         ; load colors
5139+ 3497 CD D5 34     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5140+ 349A 16 18                ld      D,$18           ; 18 pages of...
5141+ 349C 06 00                ld      B,$00           ; ...256 bytes each
5142+ 349E 18 07                jr      LOADCLR         ; load colors
5143+ 34A0 CD D5 34     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5144+ 34A3 16 08                ld      D,$08           ; 8 pages of...
5145+ 34A5 06 00                ld      B,$00           ; ...256 bytes each
5146+ 34A7 E5           LOADCLR:push    HL              ; store HL
5147+ 34A8 21 00 20             ld      HL,$2000        ; color table start: $2000
5148+ 34AB F3                   di                      ; disable INTs
5149+ 34AC CD 7D 06             call    SETVDPADRS
5150+ 34AF 0E 30                ld      C,VDP_DAT       ; VDP data mode
5151+ 34B1 ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5152+ 34B3 00                   nop
5153+ 34B4 00                   nop
5154+ 34B5 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5155+ 34B7 15                   dec     D               ; did we fill up all the pages?
5156+ 34B8 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5157+ 34BA FB                   ei
5158+ 34BB E1                   pop     HL              ; retrieve HL
5159+ 34BC 3A DE 81     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5160+ 34BF 32 DC 81             ld      (FRGNDCLR),A    ; store it
5161+ 34C2 3A E0 81             ld      A,(TMPBFR2)     ; retrieve background color
5162+ 34C5 32 DD 81             ld      (BKGNDCLR),A    ; store it
5163+ 34C8 3A E2 81             ld      A,(TMPBFR3)     ; recover border color
5164+ 34CB 5F                   ld      E,A             ; move it into E
5165+ 34CC 3E 07                ld      A,$07           ; set VDP register 7
5166+ 34CE F3                   di
5167+ 34CF CD C7 06             call    WRITE_VREG      ; send value to VDP: set border color
5168+ 34D2 FB                   ei                      ; re-enable INTs
5169+ 34D3 D1                   pop     DE              ; retrieve DE
5170+ 34D4 C9                   ret                     ; return to caller
5171+ 34D5
5172+ 34D5
5173+ 34D5              ; mix 2 color nibbles in 1 byte
5174+ 34D5 3A E0 81     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5175+ 34D8 47                   ld      B,A             ; move it into B
5176+ 34D9 3A DE 81             ld      A,(TMPBFR1)     ; retrieve foreground color
5177+ 34DC 87                   add     A,A             ; move foreground color into the high nibble of A
5178+ 34DD 87                   add     A,A
5179+ 34DE 87                   add     A,A
5180+ 34DF 87                   add     A,A
5181+ 34E0 B0                   or      B               ; put background color into the low nibble of A
5182+ 34E1 C9                   ret                     ; return to caller
5183+ 34E2
5184+ 34E2
5185+ 34E2              ; check if the color is not 0 and into the range 1~15
5186+ 34E2 A7           CHKCLR1:and     A               ; is it 0?
5187+ 34E3 CA F0 16             jp      Z,SNERR         ; yes, raise a SN error
5188+ 34E6 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5189+ 34E8 D2 F0 16             jp      NC,SNERR        ; no, raise a SN error
5190+ 34EB C9                   ret                     ; param is OK, can return
5191+ 34EC
5192+ 34EC
5193+ 34EC              ; check if in graphics 2 mode
5194+ 34EC 3A CF 81     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5195+ 34EF FE 02                cp      $02             ; actually, we can paint only in G2
5196+ 34F1 C2 F2 3A             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5197+ 34F4 C9                   ret                     ; return to caller
5198+ 34F5
5199+ 34F5
5200+ 34F5              ; print a text in screen 2
5201+ 34F5              ; GPRINT text,x,y[,fc[,bc]]
5202+ 34F5              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5203+ 34F5              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5204+ 34F5              ; colors (1~15), resp.
5205+ 34F5              ; (portions of code are from nippur72)
5206+ 34F5              GX      equ     TMPBFR3
5207+ 34F5              GY      equ     TMPBFR4
5208+ 34F5              TMPCLR  equ     TMPBFR2
5209+ 34F5              MIXCOL  equ     TMPBFR1
5210+ 34F5              TMPADR  equ     VIDEOBUFF
5211+ 34F5              CHRPNT  equ     VIDEOBUFF+$02
5212+ 34F5              NUMCHR  equ     VIDEOBUFF+$04
5213+ 34F5              TMPHL   equ     VIDEOBUFF+$06
5214+ 34F5 CD EC 34     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5215+ 34F8 2B                   dec     HL              ; dec 'cos GETCHR INCs
5216+ 34F9 CD 13 1C             call    GETCHR          ; check if something follows
5217+ 34FC CA F0 16             jp      Z,SNERR         ; if nothing else, raise a syntax error
5218+ 34FF 22 E6 81             ld      (VIDEOBUFF),HL  ; save current code string pointer
5219+ 3502 CD AE 20             call    EVAL            ; Evaluate expression
5220+ 3505 CD A0 20             call    TSTSTR          ; Make sure it's a string
5221+ 3508 22 EC 81             ld      (TMPHL),HL      ; store code string pointer
5222+ 350B CD E7 26             call    GSTRCU          ; Current string to pool
5223+ 350E CD F8 2E             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5224+ 3511 ED 43 E8 81          ld      (CHRPNT),BC     ; store string pointer
5225+ 3515 ED 53 EA 81          ld      (NUMCHR),DE     ; store string lenght
5226+ 3519 2A EC 81             ld      HL,(TMPHL)      ; store code string pointer
5227+ 351C CD D2 19             call    CHKSYN          ; Make sure ',' follows
5228+ 351F 2C                   defb    ','
5229+ 3520 CD 22 29             call    GETINT          ; get X coord.
5230+ 3523 FE 20                cp      $20             ; is it in rage 0~31?
5231+ 3525 D2 DE 1C             jp      NC,FCERR        ; Illegal function call error
5232+ 3528 32 E2 81             ld      (GX),A          ; store into temp. buffer
5233+ 352B CD D2 19             call    CHKSYN          ; Make sure ',' follows
5234+ 352E 2C                   defb    ','
5235+ 352F CD 22 29             call    GETINT          ; get Y coord.
5236+ 3532 FE 18                cp      $18             ; is it in range 0~23?
5237+ 3534 D2 DE 1C             jp      NC,FCERR        ; Illegal function call error
5238+ 3537 32 E4 81             ld      (GY),A          ; store into temp. buffer
5239+ 353A 11 E0 81             ld      DE,TMPCLR
5240+ 353D 3A DD 81             ld      A,(BKGNDCLR)    ; load background color
5241+ 3540 12                   ld      (DE),A          ; store into temp buff
5242+ 3541 3A DC 81             ld      A,(FRGNDCLR)    ; load foreground color
5243+ 3544 1B                   dec     DE
5244+ 3545 1B                   dec     DE
5245+ 3546 12                   ld      (DE),A          ; store into temp buff
5246+ 3547 CD D3 35             call    CKCOL           ; check color
5247+ 354A CA 52 35             jp      Z,CNTGPT2       ; if anything follows, jump over
5248+ 354D 13                   inc     DE
5249+ 354E 13                   inc     DE
5250+ 354F CD D3 35             call    CKCOL           ; check background color
5251+ 3552 CD D5 34     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5252+ 3555 32 DE 81             ld      (MIXCOL),A      ; store mixed colors
5253+ 3558 E5                   push    HL              ; store code string address
5254+ 3559 ED 4B E8 81          ld      BC,(CHRPNT)     ; retrieve string pointer
5255+ 355D ED 5B EA 81          ld      DE,(NUMCHR)     ; retrieve string lenght
5256+ 3561 1C                   inc     E               ; Length + 1
5257+ 3562 CD 67 35             call    GPNT            ; print on G2
5258+ 3565 E1                   pop     HL              ; recover HL
5259+ 3566 C9                   ret                     ; return to caller
5260+ 3567 D5           GPNT:   push    DE              ; store string lenght (E)
5261+ 3568                      ; calculate VRAM address of first char
5262+ 3568 3A E2 81             LD      A,(GX)          ; load X
5263+ 356B 6F                   ld      L,A             ;
5264+ 356C 26 00                ld      H,0             ; HL = X
5265+ 356E 29                   add     HL,HL           ;
5266+ 356F 29                   add     HL,HL           ;
5267+ 3570 29                   add     HL,HL           ; X=X*8
5268+ 3571 3A E4 81             ld      A,(GY)          ; load Y
5269+ 3574 57                   ld      D,A             ; move it into D
5270+ 3575 1E 00                ld      E,0             ; DE =Y*256
5271+ 3577 19                   add     HL,DE           ; address = X*8 + Y*256
5272+ 3578 22 E6 81             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5273+ 357B D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5274+ 357C 1D           RPGPNT: dec     E               ; Count characters
5275+ 357D C8                   ret     Z               ; End of string - return
5276+ 357E D5                   push    DE              ; store chars counter
5277+ 357F                      ; calculate dest address in color vram
5278+ 357F 2A E6 81             ld      HL,(TMPADR)     ; recover VRAM address
5279+ 3582 11 00 20             ld      DE,$2000        ; color map address
5280+ 3585 19                   add     HL,DE           ; HL = $2000 + XY address
5281+ 3586 F3                   di                      ; disable INTs
5282+ 3587                      ; send color settings
5283+ 3587 CD 7D 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5284+ 358A 3A DE 81             ld      A,(MIXCOL)      ; load color settings
5285+ 358D 06 08                ld      B,$08           ; repeat for 8 rows
5286+ 358F 0E 30                ld      C,VDP_DAT              ; VDP data mode
5287+ 3591 ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5288+ 3593 00                   nop                     ; wait...
5289+ 3594 00                   nop                     ; ...a...
5290+ 3595 00                   nop                     ; ...while
5291+ 3596 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5292+ 3598                      ; calculate source address
5293+ 3598 2A E8 81             ld      HL,(CHRPNT)     ; load char pointer
5294+ 359B 7E                   ld      A,(HL)          ; get char
5295+ 359C 23                   inc     HL              ; increment char pointer
5296+ 359D 22 E8 81             ld      (CHRPNT),HL     ; store char pointer
5297+ 35A0 6F                   ld      L,A             ;
5298+ 35A1 26 00                ld      H,$00           ; char into HL
5299+ 35A3 29                   add     HL,HL           ;
5300+ 35A4 29                   add     HL,HL           ;
5301+ 35A5 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5302+ 35A6 11 42 48             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5303+ 35A9 19                   add     HL,DE           ; HL = start of characters in ROM
5304+ 35AA EB                   ex      DE,HL           ; store address into DE
5305+ 35AB 2A E6 81     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5306+ 35AE CD 7D 06             call    SETVDPADRS      ; send it to VDP
5307+ 35B1 EB                   ex      DE,HL           ; restore address into HL
5308+ 35B2 06 08                ld      B,$08           ; repeat for 8 rows
5309+ 35B4 0E 30                ld      C,VDP_DAT              ; VDP data mode
5310+ 35B6 ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5311+ 35B8 00                   nop                     ; wait...
5312+ 35B9 00                   nop                     ; ...a...
5313+ 35BA 00                   nop                     ; ...while
5314+ 35BB 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5315+ 35BD FB                   ei                      ; re-enable INTs
5316+ 35BE 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5317+ 35C1 2A E6 81             ld      HL,(TMPADR)     ; load VRAM address
5318+ 35C4 19                   add     HL,DE           ; get address of next VRAM cell
5319+ 35C5 22 E6 81             ld      (TMPADR),HL     ; store new VRAM address
5320+ 35C8 11 00 18             ld      DE,$1800        ; forbidden address
5321+ 35CB CD DF 3F             call    CMP16           ; check if the printing has gone out of the screen
5322+ 35CE D1                   pop     DE              ; retrieve number of chars to be printed
5323+ 35CF D0                   ret     NC              ; if HL>=$1800 then leave
5324+ 35D0 C3 7C 35             jp      RPGPNT          ; otherwise, check if more chars to output
5325+ 35D3
5326+ 35D3              ; used by GPRINT to get a color argument (if present)
5327+ 35D3 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5328+ 35D4 CD 13 1C             call    GETCHR          ; Get next character
5329+ 35D7 C8                   ret     Z               ; return if nothing follows
5330+ 35D8 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5331+ 35DB 2C                   defb    ','
5332+ 35DC D5                   push    DE              ; store DE
5333+ 35DD CD 22 29             call    GETINT          ; get value
5334+ 35E0 CD E2 34             call    CHKCLR1         ; check if color is in range 1~15
5335+ 35E3 D1                   pop     DE              ; retrieve DE
5336+ 35E4 12                   ld      (DE),A          ; store color into temp buffer
5337+ 35E5 C9                   ret                     ; return to caller
5338+ 35E6
5339+ 35E6
5340+ 35E6              ; paint X,Y[,C]: in graphics mode, fills an area starting
5341+ 35E6              ; at point X,Y, using default color or, if used, with
5342+ 35E6              ; color set by C
5343+ 35E6              ; TMPBFR1       X
5344+ 35E6              ; TMPBFR2       Y
5345+ 35E6              ; TMPBFR3       COLOR
5346+ 35E6              PNT     equ     VIDEOBUFF
5347+ 35E6              SPA     equ     VIDEOBUFF+$02
5348+ 35E6              SPB     equ     VIDEOBUFF+$03
5349+ 35E6              ORGSP   equ     VIDEOBUFF+$04
5350+ 35E6 CD EC 34     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5351+ 35E9 CD 22 29             call    GETINT          ; get X
5352+ 35EC 32 DE 81             ld      (TMPBFR1),A     ; store X
5353+ 35EF CD D2 19             call    CHKSYN          ; Make sure ',' follows
5354+ 35F2 2C                   defb    ','
5355+ 35F3 CD 22 29             call    GETINT          ; get Y coords,
5356+ 35F6 FE C0                cp      $C0             ; check if Y is in range 0~191
5357+ 35F8 D2 DE 1C             jp      NC,FCERR        ; no, raise an FC error
5358+ 35FB 32 E0 81             ld      (TMPBFR2),A     ; store Y
5359+ 35FE CD D9 3A             call    CLRPRM          ; check if color has been passed
5360+ 3601 3A E2 81             ld      A,(TMPBFR3)     ; load color
5361+ 3604 A7                   and     A               ; check if 0
5362+ 3605 CA DE 1C             jp      Z,FCERR         ; yes, raise an error
5363+ 3608 E5                   push    HL              ; store HL
5364+ 3609 C5                   push    BC              ; store BC
5365+ 360A D5                   push    DE              ; store DE
5366+ 360B                      ; start algorithm
5367+ 360B CD 1E 37             call    PNTRTN          ; check if pixel is already set
5368+ 360E C2 C2 36             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5369+ 3611 ED 73 EA 81          ld      (ORGSP),SP      ; no, store current Stack Pointer
5370+ 3615 21 01 00             ld      HL,$0001        ; HL=1
5371+ 3618 22 E6 81             ld      (PNT),HL        ; set PNT
5372+ 361B 3A DE 81             ld      A,(TMPBFR1)     ; load starting X...
5373+ 361E 47                   ld      B,A             ; ...into B
5374+ 361F 3A E0 81             ld      A,(TMPBFR2)     ; load starting Y...
5375+ 3622 4F                   ld      C,A             ; ...into C
5376+ 3623 C5                   push    BC              ; store starting X,Y into stack
5377+ 3624                      ; main loop
5378+ 3624 2A E6 81     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5379+ 3627 7C                   ld      A,H             ; check if PNT=0
5380+ 3628 B5                   or      L
5381+ 3629 CA BE 36             jp      Z,EXITPAI       ; yes, no more points to process - exit
5382+ 362C 2B                   dec     HL              ; no, so decrement PNT...
5383+ 362D 22 E6 81             ld      (PNT),HL        ; ...and store it
5384+ 3630 C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5385+ 3631 CD C6 36     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5386+ 3634 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5387+ 3636 78                   ld      A,B             ; pixel is reset, check if X1=0
5388+ 3637 A7                   and     A               ; (reached the limit of the screen)
5389+ 3638 CA 40 36             jp      Z,PAINT1        ; yes, jump over
5390+ 363B 05                   dec     B               ; no, decrement X1...
5391+ 363C C3 31 36             jp      PAINT0          ; ...and repeat
5392+ 363F 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5393+ 3640 AF           PAINT1: xor     A               ; reset A
5394+ 3641 57                   ld      D,A             ; set SA=0
5395+ 3642 5F                   ld      E,A             ; set SB=0
5396+ 3643 CD C6 36     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5397+ 3646 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5398+ 3648 78                   ld      A,B             ; copy X1
5399+ 3649 32 DE 81             ld      (TMPBFR1),A     ; into buffer
5400+ 364C 79                   ld      A,C             ; copy Y
5401+ 364D 32 E0 81             ld      (TMPBFR2),A     ; into buffer
5402+ 3650 CD 44 37             call    CNTPLOT         ; plot pixel X1,Y
5403+ 3653 7A                   ld      A,D             ; load SA into A
5404+ 3654 A7                   and     A               ; SA=0?
5405+ 3655 20 1C                jr      NZ,PAINT2       ; no, jump over
5406+ 3657 79                   ld      A,C             ; load Y
5407+ 3658 FE 01                cp      $01             ; Y>0?
5408+ 365A DA 73 36             jp      C,PAINT2        ; no, jump over
5409+ 365D 3D                   dec     A               ; yes, Y=Y-1
5410+ 365E CD C7 36             call    CHECKPY         ; check pixel X1,Y-1
5411+ 3661 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5412+ 3663 0D                   dec     C               ; Y=Y-1
5413+ 3664 C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5414+ 3665 0C                   inc     C               ; retrieve original Y
5415+ 3666 2A E6 81             ld      HL,(PNT)        ; load PNT
5416+ 3669 23                   inc     HL              ; increment PNT
5417+ 366A 22 E6 81             ld      (PNT),HL        ; store new PNT
5418+ 366D 3E 01                ld      A,$01           ; set SA=1 and...
5419+ 366F 57                   ld      D,A             ; ...store SA into memory
5420+ 3670 C3 86 36             jp      PAINT3          ; jump over
5421+ 3673 7A           PAINT2: ld      A,D             ; load SA into A
5422+ 3674 1F                   rra                     ; check if SA=1
5423+ 3675 30 0F                jr      NC,PAINT3       ; no, jump over
5424+ 3677 79                   ld      A,C             ; load Y
5425+ 3678 FE 01                cp      $01             ; Y>0?
5426+ 367A DA 86 36             jp      C,PAINT3        ; no, jump over
5427+ 367D 3D                   dec     A               ; Y=Y-1
5428+ 367E CD C7 36             call    CHECKPY         ; check pixel X1,Y-1
5429+ 3681 CA 86 36             jp      Z,PAINT3        ; if pixel is off, jump over
5430+ 3684 AF                   xor     A               ; pixel is on, so...
5431+ 3685 57                   ld      D,A             ; ...set SA=0
5432+ 3686 7B           PAINT3: ld      A,E             ; check if...
5433+ 3687 A7                   and     A               ; SB=0
5434+ 3688 20 1B                jr      NZ,PAINT4       ; no, jump over
5435+ 368A 79                   ld      A,C             ; load Y
5436+ 368B FE BF                cp      $BF             ; Y<191?
5437+ 368D 30 16                jr      NC,PAINT4       ; no, jump over
5438+ 368F 3C                   inc     A               ; Y=Y+1
5439+ 3690 CD C7 36             call    CHECKPY         ; check pixel X1,Y+1
5440+ 3693 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5441+ 3695 0C                   inc     C               ; Y=Y+1
5442+ 3696 C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5443+ 3697 0D                   dec     C               ; retrieve original Y
5444+ 3698 2A E6 81             ld      HL,(PNT)        ; PNT
5445+ 369B 23                   inc     HL              ; PNT=PNT+1
5446+ 369C 22 E6 81             ld      (PNT),HL        ; store PNT
5447+ 369F 3E 01                ld      A,$01           ; SB=1
5448+ 36A1 5F                   ld      E,A             ; set SB
5449+ 36A2 C3 B7 36             jp      PAINT5          ; jump over
5450+ 36A5 7B           PAINT4: ld      A,E             ; load SB
5451+ 36A6 1F                   rra                     ; check if SB=1
5452+ 36A7 30 0E                jr      NC,PAINT5       ; no, jump over
5453+ 36A9 79                   ld      A,C             ; load Y
5454+ 36AA FE BF                cp      $BF             ; Y<191?
5455+ 36AC 30 09                jr      NC,PAINT5       ; no, jump over
5456+ 36AE 3C                   inc     A               ; Y=Y+1
5457+ 36AF CD C7 36             call    CHECKPY         ; check pixel X1,Y+1
5458+ 36B2 CA B7 36             jp      Z,PAINT5        ; if pixel is off, jump over
5459+ 36B5 AF                   xor     A               ; pixel is on, so...
5460+ 36B6 5F                   ld      E,A             ; ...set SB=0
5461+ 36B7 04           PAINT5: inc     B               ; X1=X1+1
5462+ 36B8 CA 24 36             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5463+ 36BB C3 43 36             jp      MNPAINT         ; otherwise, repeat for next X
5464+ 36BE ED 7B EA 81  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5465+ 36C2 D1           EXITPA2:pop     DE              ; retrieve DE
5466+ 36C3 C1                   pop     BC              ; retrieve BC
5467+ 36C4 E1                   pop     HL              ; retrieve HL
5468+ 36C5 C9                   ret                     ; return to caller
5469+ 36C6 79           CHECKPA:ld      A,C             ; copy Y into A
5470+ 36C7 32 E0 81     CHECKPY:ld      (TMPBFR2),A     ; store Y
5471+ 36CA 78                   ld      A,B             ; copy X1 into A
5472+ 36CB 32 DE 81             ld      (TMPBFR1),A     ; store X1
5473+ 36CE C5                   push    BC              ; save X1,Y
5474+ 36CF D5                   push    DE
5475+ 36D0 CD 1E 37             call    PNTRTN          ; check if pixel is set/reset
5476+ 36D3 D1                   pop     DE
5477+ 36D4 C1                   pop     BC              ; retrieve X1,Y
5478+ 36D5 C9                   ret                     ; return to caller
5479+ 36D6
5480+ 36D6
5481+ 36D6              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5482+ 36D6 CD EC 34     POINT:  call    CHKG2M          ; check if in graphic mode 2
5483+ 36D9 CD D2 19             call    CHKSYN          ; make sure "(" follows
5484+ 36DC 28                   defb    '('
5485+ 36DD CD 22 29             call    GETINT          ; get X coords.
5486+ 36E0 32 DE 81             ld      (TMPBFR1),A     ; store it into a temp buffer
5487+ 36E3 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5488+ 36E6 2C                   defb    ','
5489+ 36E7 CD 22 29             call    GETINT          ; get Y coords,
5490+ 36EA FE C0                cp      $C0             ; check if Y is in range 0~191
5491+ 36EC D2 DE 1C             jp      NC,FCERR        ; no, raise an FC error
5492+ 36EF 32 E0 81             ld      (TMPBFR2),A     ; store into a temp buffer
5493+ 36F2 CD D2 19             call    CHKSYN          ; make sure ")" follows
5494+ 36F5 29                   defb    ')'
5495+ 36F6 E5                   push    HL              ; store current string address - the point after the ")" - ...
5496+ 36F7 FD E1                pop     IY              ; ...into IY
5497+ 36F9 CD 1E 37             call    PNTRTN          ; check if pixel is set or reset
5498+ 36FC 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5499+ 36FE AF                   xor     A               ; no, it's OFF. make sure to reset A...
5500+ 36FF 47                   ld      B,A             ; ...and B
5501+ 3700 E1           PNTEND: pop     HL              ; drop original return point
5502+ 3701 FD E5                push    IY              ; load current string address from IY into stack
5503+ 3703 11 87 21             ld      DE,RETNUM       ; Address of Return number from function...
5504+ 3706 D5                   push    DE              ; ...saved on stack
5505+ 3707 C3 86 24             jp      ABPASS          ; return AB
5506+ 370A CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5507+ 370C F3                   di
5508+ 370D CD 9D 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5509+ 3710 FB                   ei
5510+ 3711 CB 3F                srl     A               ; shift A...
5511+ 3713 CB 3F                srl     A               ; ...4 times...
5512+ 3715 CB 3F                srl     A               ; ...to move foreground color...
5513+ 3717 CB 3F                srl     A               ; ...into lowest nibble
5514+ 3719 47                   ld      B,A             ; color into B
5515+ 371A AF                   xor     A               ; reset MSB
5516+ 371B C3 00 37             jp      PNTEND          ; return AB
5517+ 371E CD 91 37     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5518+ 3721 57                   ld      D,A             ; store pixel index
5519+ 3722 F3                   di                      ; disable INTs
5520+ 3723 CD 9D 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5521+ 3726 FB                   ei                      ; re-enable INTs
5522+ 3727 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5523+ 3728 C9                   ret                     ; return to caller
5524+ 3729
5525+ 3729
5526+ 3729              ; PLOT X,Y[,color]
5527+ 3729              ; plot a pixel in graphic mode 2
5528+ 3729 CD EC 34     PLOT:   call    CHKG2M          ; check if in G2 mode
5529+ 372C CD 22 29             call    GETINT          ; get X coords.
5530+ 372F 32 DE 81             ld      (TMPBFR1),A     ; store it into a temp buffer
5531+ 3732 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5532+ 3735 2C                   defb    ','
5533+ 3736 CD 22 29             call    GETINT          ; get Y coords,
5534+ 3739 FE C0                cp      $C0             ; check if Y is in range 0~191
5535+ 373B D2 DE 1C             jp      NC,FCERR        ; no, raise an FC error
5536+ 373E 32 E0 81             ld      (TMPBFR2),A     ; store into a temp buffer
5537+ 3741 CD D9 3A             call    CLRPRM          ; check if param "color" has been passed
5538+ 3744 E5           CNTPLOT:push    HL              ; store HL
5539+ 3745 C5                   push    BC              ; store BC
5540+ 3746 D5                   push    DE              ; store DE
5541+ 3747 CD 91 37             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5542+ 374A D2 85 37             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5543+ 374D 57                   ld      D,A             ; move pixel value into D
5544+ 374E 3A E2 81             ld      A,(TMPBFR3)     ; retrieve color
5545+ 3751 A7                   and     A               ; is it 0? (background, or reset pixel)
5546+ 3752 20 11                jr      NZ,CNTPLT1      ; no, continue
5547+ 3754 F3                   di                      ; yes - so, disable INTs
5548+ 3755 CD 9D 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5549+ 3758 FB                   ei                      ; re-enable INTs
5550+ 3759 5F                   ld      E,A             ; store value of cell
5551+ 375A 7A                   ld      A,D             ; retrieve pixel
5552+ 375B 2F                   cpl                     ; revert bits
5553+ 375C A3                   and     E               ; set video pixel to off
5554+ 375D F3                   di                      ; disable INTs
5555+ 375E CD B2 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5556+ 3761 FB                   ei                      ; re-enable INTs
5557+ 3762 C3 85 37             jp      NOGD            ; leave
5558+ 3765 87           CNTPLT1:add     A,A             ; now we move low nibble
5559+ 3766 87                   add     A,A             ; in the high nibble
5560+ 3767 87                   add     A,A             ; by adding A to itself
5561+ 3768 87                   add     A,A             ; 4 times (this is a shift left 4)
5562+ 3769 5F                   ld      E,A             ; move it into E
5563+ 376A F3                   di                      ; disable INTs
5564+ 376B CD 9D 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5565+ 376E FB                   ei
5566+ 376F B2                   or      D               ; merge new pixel preserving original pattern
5567+ 3770 F3                   di
5568+ 3771 CD B2 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5569+ 3774 FB                   ei
5570+ 3775 CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5571+ 3777 F3                   di
5572+ 3778 CD 9D 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5573+ 377B FB                   ei
5574+ 377C E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5575+ 377E B3                   or      E               ; set new foreground color
5576+ 377F F3                   di
5577+ 3780 CD B2 06             call    WRITE_VIDEO_LOC ; write new color settings
5578+ 3783 FB                   ei                      ; re-enable INTs
5579+ 3784 00                   nop                     ; wait for INTs to be enabled again
5580+ 3785 D1           NOGD:   pop     DE              ; retrieve DE
5581+ 3786 C1                   pop     BC              ; retrieve BC
5582+ 3787 E1                   pop     HL              ; retrieve HL
5583+ 3788 C9                   ret                     ; return to caller
5584+ 3789 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5584+ 378D 08 04 02 01
5585+ 3791                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5586+ 3791
5587+ 3791
5588+ 3791              ; compute the VRAM address of the byte containing the pixel
5589+ 3791              ; being pointed by X,Y (TMPBFR1,TMPBFR1)
5590+ 3791              ; byte address is returned into HL
5591+ 3791              ; pixel is returned into A
5592+ 3791              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5593+ 3791                      ; where R(Y/8) is the remainder of (Y/8)
5594+ 3791                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5595+ 3791 3A E0 81             ld      A,(TMPBFR2)     ; retrieve Y
5596+ 3794 FE C0                cp      $C0             ; Y>=192?
5597+ 3796 D0                   ret     NC              ; yes, so leave
5598+ 3797 1E 08                ld      E,$08           ; load E with divisor
5599+ 3799 57                   ld      D,A             ; and store into D (dividend)
5600+ 379A CD 0E 40             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5601+ 379D 4F                   ld      C,A             ; store remainder into C
5602+ 379E 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5603+ 379F 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5604+ 37A1 3A DE 81             ld      A,(TMPBFR1)     ; retrieve X
5605+ 37A4 57                   ld      D,A             ; and move it into D (dividend)
5606+ 37A5 CD 0E 40             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5607+ 37A8 4F                   ld      C,A             ; store remainder into C
5608+ 37A9 7A                   ld      A,D             ; move quotient into A
5609+ 37AA 87                   add     A,A             ; multiply quotient by 8
5610+ 37AB 87                   add     A,A
5611+ 37AC 87                   add     A,A
5612+ 37AD 5F                   ld      E,A             ; store result into E
5613+ 37AE 16 00                ld      D,$00           ; reset D
5614+ 37B0 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5615+ 37B1 EB                   ex      DE,HL           ; move VRAM address into DE
5616+ 37B2 21 89 37             ld      HL,PXLSET       ; starting address of table for pixel to draw
5617+ 37B5 06 00                ld      B,$00           ; reset B
5618+ 37B7 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5619+ 37B8 7E                   ld      A,(HL)          ; load pixel data
5620+ 37B9 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5621+ 37BA 37                   scf                     ; set Carry for normal exit
5622+ 37BB C9                   ret                     ; return to caller
5623+ 37BC
5624+ 37BC
5625+ 37BC              ; DRAW X1,Y1,X2,Y2[,color]
5626+ 37BC              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5627+ 37BC              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5628+ 37BC              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5629+ 37BC              ; the values. If color is not specified, the foreground color set
5630+ 37BC              ; with COLOR will be used
5631+ 37BC              X1      equ     TMPBFR1
5632+ 37BC              Y1      equ     TMPBFR2
5633+ 37BC              X2      equ     VIDEOBUFF
5634+ 37BC              Y2      equ     VIDEOBUFF+$02
5635+ 37BC              ER      equ     VIDEOBUFF+$04
5636+ 37BC              E2      equ     VIDEOBUFF+$06
5637+ 37BC              SX      equ     VIDEOBUFF+$08
5638+ 37BC              SY      equ     VIDEOBUFF+$0A
5639+ 37BC              DX      equ     VIDEOBUFF+$0C
5640+ 37BC              DY      equ     VIDEOBUFF+$0E
5641+ 37BC CD EC 34     DRAW:   call    CHKG2M          ; check if in G2 mode
5642+ 37BF CD C1 3A             call    CLRVDBF         ; clear VIDEOBUFF
5643+ 37C2 CD 22 29             call    GETINT          ; get X1 coords.
5644+ 37C5 32 DE 81             ld      (X1),A          ; store it into a temp buffer
5645+ 37C8 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5646+ 37CB 2C                   defb    ','
5647+ 37CC CD 22 29             call    GETINT          ; get Y1 coords.
5648+ 37CF FE C0                cp      $C0             ; check if Y1 is in range 0~191
5649+ 37D1 D2 DE 1C             jp      NC,FCERR        ; no, raise an FC error
5650+ 37D4 32 E0 81             ld      (Y1),A          ; store into a temp buffer
5651+ 37D7 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5652+ 37DA 2C                   defb    ','
5653+ 37DB CD 22 29             call    GETINT          ; get X2 coords.
5654+ 37DE 32 E6 81             ld      (X2),A          ; store it into a temp buffer
5655+ 37E1 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5656+ 37E4 2C                   defb    ','
5657+ 37E5 CD 22 29             call    GETINT          ; get Y2 coords
5658+ 37E8 FE C0                cp      $C0             ; check if Y2 is in range 0~191
5659+ 37EA D2 DE 1C             jp      NC,FCERR        ; no, raise an FC error
5660+ 37ED 32 E8 81             ld      (Y2),A          ; store it into a temp buffer
5661+ 37F0 CD D9 3A             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5662+ 37F3 E5                   push    HL              ; store register we'll use
5663+ 37F4 D5                   push    DE
5664+ 37F5 C5                   push    BC
5665+ 37F6 ED 5B DE 81          ld      DE,(X1)         ; load X1 and
5666+ 37FA 2A E6 81             ld      HL,(X2)         ; X2
5667+ 37FD B7                   or      A               ; clear CARRY
5668+ 37FE ED 52                sbc     HL,DE           ; DX=X2-X1
5669+ 3800 CD 04 40             call    absHL           ; DX=ABS(DX)
5670+ 3803 22 F2 81             ld      (DX),HL         ; store DX
5671+ 3806 01 FF FF             ld      BC,$FFFF        ; SX=-1
5672+ 3809 2A DE 81             ld      HL,(X1)
5673+ 380C ED 5B E6 81          ld      DE,(X2)
5674+ 3810 CD DF 3F             call    CMP16           ; X1<X2?
5675+ 3813 CA 1C 38             jp      Z,X1GR          ; no, X1=X2
5676+ 3816 F2 1C 38             jp      P,X1GR          ; no, X1>X2
5677+ 3819 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5678+ 381C ED 43 EE 81  X1GR:   ld      (SX),BC         ; store SX
5679+ 3820 ED 5B E0 81          ld      DE,(Y1)
5680+ 3824 2A E8 81             ld      HL,(Y2)
5681+ 3827 B7                   or      A               ; clear Carry
5682+ 3828 ED 52                sbc     HL,DE           ; DY=Y2-Y1
5683+ 382A CD 04 40             call    absHL           ; DY=ABS(DY)
5684+ 382D 22 F4 81             ld      (DY),HL         ; store DY
5685+ 3830 01 FF FF             ld      BC,$FFFF        ; SY=-1
5686+ 3833 2A E0 81             ld      HL,(Y1)
5687+ 3836 ED 5B E8 81          ld      DE,(Y2)
5688+ 383A CD DF 3F             call    CMP16           ; is Y1<Y2?
5689+ 383D CA 46 38             jp      Z,Y1GR          ; no, Y1=Y2
5690+ 3840 F2 46 38             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5691+ 3843 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5692+ 3846 ED 43 F0 81  Y1GR:   ld      (SY),BC         ; store SY
5693+ 384A 2A F4 81             ld      HL,(DY)         ; ER=DY
5694+ 384D CD 07 40             call    negHL           ; ER=-DY
5695+ 3850 22 EA 81             ld      (ER),HL         ; store ER
5696+ 3853 2A F2 81             ld      HL,(DX)
5697+ 3856 ED 5B F4 81          ld      DE,(DY)
5698+ 385A CD DF 3F             call    CMP16           ; DX>DY?
5699+ 385D CA 69 38             jp      Z,ER2           ; no, DX=DY
5700+ 3860 FA 69 38             jp      M,ER2           ; no, DX<DY
5701+ 3863 2A F2 81             ld      HL,(DX)         ; reload DX
5702+ 3866 22 EA 81             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5703+ 3869 2A EA 81     ER2:    ld      HL,(ER)         ; load ER
5704+ 386C CB 2C                sra     H               ; right shift (and preserve sign)...
5705+ 386E CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5706+ 3870 CB 7C                bit     7,H             ; is the number negative?
5707+ 3872 CA 76 38             jp      Z,STRE2         ; no, jump over
5708+ 3875 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5709+ 3876 22 EA 81     STRE2:  ld      (ER),HL         ; store ER
5710+ 3879 CD 44 37     RPTDRW: call    CNTPLOT         ; plot first pixel
5711+ 387C 2A DE 81             ld      HL,(X1)
5712+ 387F ED 5B E6 81          ld      DE,(X2)
5713+ 3883 CD DF 3F             call    CMP16           ; X1=X2?
5714+ 3886 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5715+ 3888 2A E0 81             ld      HL,(Y1)         ; yes, so check
5716+ 388B ED 5B E8 81          ld      DE,(Y2)         ; also Y
5717+ 388F CD DF 3F             call    CMP16           ; Y1=Y2?
5718+ 3892 CA EE 38             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5719+ 3895 ED 5B EA 81  CNTDRW: ld      DE,(ER)
5720+ 3899 ED 53 EC 81          ld      (E2),DE         ; E2=ER
5721+ 389D 2A F2 81             ld      HL,(DX)
5722+ 38A0 CD 07 40             call    negHL           ; DX=-DX
5723+ 38A3 EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5724+ 38A4 CD DF 3F             call    CMP16           ; E2>-DX?
5725+ 38A7 CA C5 38             jp      Z,DXGR          ; no, E2=-DX: jump
5726+ 38AA FA C5 38             jp      M,DXGR          ; no, E2<-DX: jump
5727+ 38AD 2A EA 81             ld      HL,(ER)         ; yes
5728+ 38B0 ED 5B F4 81          ld      DE,(DY)
5729+ 38B4 B7                   or      A               ; clear CARRY
5730+ 38B5 ED 52                sbc     HL,DE           ; ER=ER-DY
5731+ 38B7 22 EA 81             ld      (ER),HL
5732+ 38BA 2A DE 81             ld      HL,(X1)
5733+ 38BD ED 5B EE 81          ld      DE,(SX)
5734+ 38C1 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5735+ 38C2 22 DE 81             ld      (X1),HL
5736+ 38C5 2A EC 81     DXGR:   ld      HL,(E2)
5737+ 38C8 ED 5B F4 81          ld      DE,(DY)
5738+ 38CC CD DF 3F             call    CMP16           ; E2<DY?
5739+ 38CF CA 79 38             jp      Z,RPTDRW        ; no, E2=DY: jump
5740+ 38D2 F2 79 38             jp      P,RPTDRW        ; no, E2>DY: jump
5741+ 38D5 2A EA 81             ld      HL,(ER)         ; yes
5742+ 38D8 ED 5B F2 81          ld      DE,(DX)
5743+ 38DC 19                   add     HL,DE           ; ER=ER+DX
5744+ 38DD 22 EA 81             ld      (ER),HL
5745+ 38E0 2A E0 81             ld      HL,(Y1)
5746+ 38E3 ED 5B F0 81          ld      DE,(SY)
5747+ 38E7 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5748+ 38E8 22 E0 81             ld      (Y1),HL
5749+ 38EB C3 79 38             jp      RPTDRW          ; repeat
5750+ 38EE C1           ENDDRAW:pop     BC              ; retrieve BC
5751+ 38EF D1                   pop     DE              ; retrieve DE
5752+ 38F0 E1                   pop     HL              ; retrieve HL
5753+ 38F1 C9                   ret                     ; return to caller
5754+ 38F2
5755+ 38F2
5756+ 38F2              ; CIRCLE X,Y,R[,C]
5757+ 38F2              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5758+ 38F2              ; and radius R, with optional color C. If color is not specified, the
5759+ 38F2              ; foreground color set with COLOR will be used
5760+ 38F2              XC      equ     VIDEOBUFF
5761+ 38F2              YC      equ     VIDEOBUFF+$02
5762+ 38F2              RADIUS  equ     VIDEOBUFF+$04
5763+ 38F2              XI      equ     VIDEOBUFF+$06
5764+ 38F2              YI      equ     VIDEOBUFF+$08
5765+ 38F2              DC      equ     VIDEOBUFF+$0A
5766+ 38F2 CD EC 34     CIRCLE: call    CHKG2M          ; check if in G2 mode
5767+ 38F5 CD C1 3A             call    CLRVDBF         ; clear VIDEOBUFF
5768+ 38F8 CD 22 29             call    GETINT          ; get X coords.
5769+ 38FB 32 E6 81             ld      (XC),A          ; store it into a temp buffer
5770+ 38FE CD D2 19             call    CHKSYN          ; Make sure ',' follows
5771+ 3901 2C                   defb    ','
5772+ 3902 CD 22 29             call    GETINT          ; get Y coords,
5773+ 3905 32 E8 81             ld      (YC),A          ; store it into a temp buffer
5774+ 3908 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5775+ 390B 2C                   defb    ','
5776+ 390C CD 22 29             call    GETINT          ; get radius
5777+ 390F 32 EA 81             ld      (RADIUS),A      ; store it into a temp buffer
5778+ 3912 CD D9 3A             call    CLRPRM          ; check if param "color" has been passed
5779+ 3915 C5                   push    BC              ; store BC
5780+ 3916 D5                   push    DE              ; store DE
5781+ 3917 E5                   push    HL              ; store HL
5782+ 3918 AF                   xor     A               ; clear A,
5783+ 3919 47                   ld      B,A             ; B,
5784+ 391A 4F                   ld      C,A             ; C,
5785+ 391B 57                   ld      D,A             ; D,
5786+ 391C 67                   ld      H,A             ; and H
5787+ 391D ED 43 EC 81          ld      (XI),BC         ; clear XI
5788+ 3921 3A EA 81             ld      A,(RADIUS)      ; load RADIUS into A
5789+ 3924 6F                   ld      L,A             ; HL now contains R
5790+ 3925 22 EE 81             ld      (YI),HL         ; YI=RADIUS
5791+ 3928 29                   add     HL,HL           ; R*2
5792+ 3929 EB                   ex      DE,HL           ; put HL into DE
5793+ 392A 21 03 00             ld      HL,$0003        ; HL = 3
5794+ 392D AF                   xor     A               ; clear Carry
5795+ 392E ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5796+ 3930 22 F0 81             ld      (DC),HL         ; store D
5797+ 3933 CD 92 39             call    DRWCRL          ; draw initial point
5798+ 3936 ED 5B EC 81  RPTCRL: ld      DE,(XI)         ; load XI
5799+ 393A 2A EE 81             ld      HL,(YI)         ; load YI
5800+ 393D CD DF 3F             call    CMP16           ; is YI<DI?
5801+ 3940 CA 49 39             jp      Z,RPTCL1        ; no, YI=XI
5802+ 3943 F2 49 39             jp      P,RPTCL1        ; no, YI>XI
5803+ 3946 C3 8E 39             jp      ENDCRL          ; yes, so we've finished
5804+ 3949 21 EC 81     RPTCL1: ld      HL,XI
5805+ 394C 34                   inc     (HL)            ; XI=XI+1
5806+ 394D 2A F0 81             ld      HL,(DC)         ; load D
5807+ 3950 7C                   ld      A,H
5808+ 3951 B5                   or      L               ; is D=0? Yes, jump over
5809+ 3952 CA 76 39             jp      Z,DLSZ
5810+ 3955 CB 7C                bit     7,H             ; is D<0?
5811+ 3957 20 1D                jr      NZ,DLSZ         ; yes, jump over
5812+ 3959 ED 5B EE 81          ld      DE,(YI)         ; D>0
5813+ 395D 1B                   dec     DE              ; so, YI=YI-1
5814+ 395E ED 53 EE 81          ld      (YI),DE         ; store YI
5815+ 3962 AF                   xor     A               ; clear Carry
5816+ 3963 2A EC 81             ld      HL,(XI)
5817+ 3966 ED 52                sbc     HL,DE           ; HL=XI-YI
5818+ 3968 29                   add     HL,HL
5819+ 3969 29                   add     HL,HL           ; HL=HL*4
5820+ 396A 11 0A 00             ld      DE,10
5821+ 396D 19                   add     HL,DE           ; HL=HL+10
5822+ 396E ED 5B F0 81          ld      DE,(DC)         ; load D
5823+ 3972 EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5824+ 3973 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5825+ 3974 18 0F                jr      PLTCRL          ; plot next pixel
5826+ 3976 2A EC 81     DLSZ:   ld      HL,(XI)         ; load XI
5827+ 3979 29                   add     HL,HL
5828+ 397A 29                   add     HL,HL           ; XI=XI*4
5829+ 397B 11 06 00             ld      DE,$0006
5830+ 397E 19                   add     HL,DE
5831+ 397F ED 5B F0 81          ld      DE,(DC)
5832+ 3983 EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5833+ 3984 19                   add     HL,DE           ; D=D+4*XI+6
5834+ 3985 22 F0 81     PLTCRL: ld      (DC),HL         ; store new D
5835+ 3988 CD 92 39             call    DRWCRL          ; plot pixel
5836+ 398B C3 36 39             jp      RPTCRL          ; repeat
5837+ 398E E1           ENDCRL: pop     HL
5838+ 398F D1                   pop     DE
5839+ 3990 C1                   pop     BC
5840+ 3991 C9                   ret                     ; return to caller
5841+ 3992 2A E6 81     DRWCRL: ld      HL,(XC)
5842+ 3995 ED 5B EC 81          ld      DE,(XI)
5843+ 3999 19                   add     HL,DE           ; X=XC+XI
5844+ 399A 22 DE 81             ld      (X1),HL         ; store X
5845+ 399D CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5846+ 39A0 DA B4 39             jp      C,CNTCL1        ; if Carry is set, X is not valid
5847+ 39A3 2A E8 81             ld      HL,(YC)
5848+ 39A6 ED 5B EE 81          ld      DE,(YI)
5849+ 39AA 19                   add     HL,DE           ; Y=YC+YI
5850+ 39AB 22 E0 81             ld      (Y1),HL         ; store Y
5851+ 39AE CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5852+ 39B1 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5853+ 39B4 AF           CNTCL1: xor     A               ; clear Carry
5854+ 39B5 2A E6 81             ld      HL,(XC)
5855+ 39B8 ED 5B EC 81          ld      DE,(XI)
5856+ 39BC ED 52                sbc     HL,DE           ; X=XC-XI
5857+ 39BE 22 DE 81             ld      (X1),HL         ; store X
5858+ 39C1 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5859+ 39C4 DA D8 39             jp      C,CNTCL2        ; if Carry is set, X is not valid
5860+ 39C7 2A E8 81             ld      HL,(YC)
5861+ 39CA ED 5B EE 81          ld      DE,(YI)
5862+ 39CE 19                   add     HL,DE           ; Y=YC+YI
5863+ 39CF 22 E0 81             ld      (Y1),HL         ; store Y
5864+ 39D2 CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5865+ 39D5 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5866+ 39D8 2A E6 81     CNTCL2: ld      HL,(XC)
5867+ 39DB ED 5B EC 81          ld      DE,(XI)
5868+ 39DF 19                   add     HL,DE           ; X=XC+XI
5869+ 39E0 22 DE 81             ld      (X1),HL         ; store X
5870+ 39E3 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5871+ 39E6 DA FC 39             jp      C,CNTCL3        ; if Carry is set, X is not valid
5872+ 39E9 AF                   xor     A               ; clear Carry
5873+ 39EA 2A E8 81             ld      HL,(YC)
5874+ 39ED ED 5B EE 81          ld      DE,(YI)
5875+ 39F1 ED 52                sbc     HL,DE           ; Y=YC-YI
5876+ 39F3 22 E0 81             ld      (Y1),HL         ; store Y
5877+ 39F6 CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5878+ 39F9 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5879+ 39FC AF           CNTCL3: xor     A               ; clear Carry
5880+ 39FD 2A E6 81             ld      HL,(XC)
5881+ 3A00 ED 5B EC 81          ld      DE,(XI)
5882+ 3A04 ED 52                sbc     HL,DE           ; X=XC-XI
5883+ 3A06 22 DE 81             ld      (X1),HL         ; store X
5884+ 3A09 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5885+ 3A0C DA 22 3A             jp      C,CNTCL4        ; if Carry is set, X is not valid
5886+ 3A0F AF                   xor     A               ; clear Carry
5887+ 3A10 2A E8 81             ld      HL,(YC)
5888+ 3A13 ED 5B EE 81          ld      DE,(YI)
5889+ 3A17 ED 52                sbc     HL,DE           ; Y=YC-YI
5890+ 3A19 22 E0 81             ld      (Y1),HL         ; store Y
5891+ 3A1C CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5892+ 3A1F D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5893+ 3A22 2A E6 81     CNTCL4: ld      HL,(XC)
5894+ 3A25 ED 5B EE 81          ld      DE,(YI)
5895+ 3A29 19                   add     HL,DE           ; X=XC+YI
5896+ 3A2A 22 DE 81             ld      (X1),HL         ; store X
5897+ 3A2D CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5898+ 3A30 DA 44 3A             jp      C,CNTCL5        ; if Carry is set, X is not valid
5899+ 3A33 2A E8 81             ld      HL,(YC)
5900+ 3A36 ED 5B EC 81          ld      DE,(XI)
5901+ 3A3A 19                   add     HL,DE           ; Y=YC+XI
5902+ 3A3B 22 E0 81             ld      (Y1),HL         ; store Y
5903+ 3A3E CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5904+ 3A41 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5905+ 3A44 AF           CNTCL5: xor     A               ; clear Carry
5906+ 3A45 2A E6 81             ld      HL,(XC)
5907+ 3A48 ED 5B EE 81          ld      DE,(YI)
5908+ 3A4C ED 52                sbc     HL,DE           ; X=XC-YI
5909+ 3A4E 22 DE 81             ld      (X1),HL         ; store X
5910+ 3A51 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5911+ 3A54 DA 68 3A             jp      C,CNTCL6        ; if Carry is set, X is not valid
5912+ 3A57 2A E8 81             ld      HL,(YC)
5913+ 3A5A ED 5B EC 81          ld      DE,(XI)
5914+ 3A5E 19                   add     HL,DE           ; Y=YC+XI
5915+ 3A5F 22 E0 81             ld      (Y1),HL         ; store Y
5916+ 3A62 CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5917+ 3A65 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5918+ 3A68 2A E6 81     CNTCL6: ld      HL,(XC)
5919+ 3A6B ED 5B EE 81          ld      DE,(YI)
5920+ 3A6F 19                   add     HL,DE           ; X=XC+YI
5921+ 3A70 22 DE 81             ld      (X1),HL         ; store X
5922+ 3A73 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5923+ 3A76 DA 8C 3A             jp      C,CNTCL7        ; if Carry is set, X is not valid
5924+ 3A79 AF                   xor     A               ; clear Carry
5925+ 3A7A 2A E8 81             ld      HL,(YC)
5926+ 3A7D ED 5B EC 81          ld      DE,(XI)
5927+ 3A81 ED 52                sbc     HL,DE           ; Y=YC-XI
5928+ 3A83 22 E0 81             ld      (Y1),HL         ; store Y
5929+ 3A86 CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5930+ 3A89 D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5931+ 3A8C AF           CNTCL7: xor     A               ; clear Carry
5932+ 3A8D 2A E6 81             ld      HL,(XC)
5933+ 3A90 ED 5B EE 81          ld      DE,(YI)
5934+ 3A94 ED 52                sbc     HL,DE           ; X=XC-YI
5935+ 3A96 22 DE 81             ld      (X1),HL         ; store X
5936+ 3A99 CD B1 3A             call    VALIDX          ; check if X is valid (0~255)
5937+ 3A9C D8                   ret     C               ; if Carry is set, X is not valid
5938+ 3A9D AF                   xor     A               ; clear Carry
5939+ 3A9E 2A E8 81             ld      HL,(YC)
5940+ 3AA1 ED 5B EC 81          ld      DE,(XI)
5941+ 3AA5 ED 52                sbc     HL,DE           ; Y=YC-XI
5942+ 3AA7 22 E0 81             ld      (Y1),HL         ; store Y
5943+ 3AAA CD B6 3A             call    VALIDY          ; check if Y is valid (0~191)
5944+ 3AAD D4 44 37             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5945+ 3AB0 C9                   ret                     ; return to caller
5946+ 3AB1
5947+ 3AB1              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
5948+ 3AB1              ; input: HL (value to check), can be negative
5949+ 3AB1              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
5950+ 3AB1              ; destroys: A
5951+ 3AB1 AF           VALIDX: xor     A               ; reset A
5952+ 3AB2 B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
5953+ 3AB3 C8                   ret     Z               ; yes, we can return (C is clear)
5954+ 3AB4 37                   scf                     ; set Carry flag to raise error
5955+ 3AB5 C9                   ret                     ; return to caller
5956+ 3AB6
5957+ 3AB6 AF           VALIDY: xor     A               ; reset A
5958+ 3AB7 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
5959+ 3AB8 28 02                jr      Z,CNTVALY       ; yes, continue checking
5960+ 3ABA 37                   scf                     ; no, raise error by setting Carry flag
5961+ 3ABB C9                   ret                     ; return to caller
5962+ 3ABC 7D           CNTVALY:ld      A,L
5963+ 3ABD FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
5964+ 3ABF 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
5965+ 3AC0 C9                   ret                     ; return to caller
5966+ 3AC1
5967+ 3AC1
5968+ 3AC1              ; clear VIDEOBUFF before using it as temp buffer
5969+ 3AC1 AF           CLRVDBF:xor     A               ; clear A
5970+ 3AC2 C5                   push    BC              ; store BC
5971+ 3AC3 E5                   push    HL              ; store HL
5972+ 3AC4 21 DE 81             ld      HL,TMPBFR1      ; address of 1st cell
5973+ 3AC7 06 06                ld      B,$06           ; 6 cells
5974+ 3AC9 77           RPTCVB1:ld      (HL),A          ; clear cell
5975+ 3ACA 23                   inc     HL              ; next cell
5976+ 3ACB 10 FC                djnz    RPTCVB1         ; repeat
5977+ 3ACD 06 28                ld      B,$28           ; 40 cells
5978+ 3ACF 21 E6 81             ld      HL,VIDEOBUFF    ; address of 1st cell
5979+ 3AD2 77           RPTCVB2:ld      (HL),A          ; clear cell
5980+ 3AD3 23                   inc     HL              ; next cell
5981+ 3AD4 10 FC                djnz    RPTCVB2         ; repeat
5982+ 3AD6 E1                   pop     HL              ; retrieve HL
5983+ 3AD7 C1                   pop     BC              ; retrieve BC
5984+ 3AD8 C9                   ret                     ; return to caller
5985+ 3AD9
5986+ 3AD9
5987+ 3AD9              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
5988+ 3AD9              ; commands. If not present, the default foreground color will be used
5989+ 3AD9 3A DC 81     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
5990+ 3ADC 32 E2 81             ld      (TMPBFR3),A     ; store into temp buffer
5991+ 3ADF 2B                   dec     HL              ; dec 'cos GETCHR INCs
5992+ 3AE0 CD 13 1C             call    GETCHR          ; Get next character
5993+ 3AE3 C8                   ret     Z               ; return foreground color if nothing follows
5994+ 3AE4 CD D2 19             call    CHKSYN          ; Make sure ',' follows
5995+ 3AE7 2C                   defb    ','
5996+ 3AE8 CD 22 29             call    GETINT          ; get value
5997+ 3AEB CD E6 34             call    CHKCLR0         ; check if color is in range 0~15
5998+ 3AEE 32 E2 81             ld      (TMPBFR3),A     ; store color into temp buffer
5999+ 3AF1 C9                   ret                     ; return to caller
6000+ 3AF2
6001+ 3AF2
6002+ 3AF2              ; no graphics mode error: raised when a graphics command is invoked
6003+ 3AF2              ; out of graphic 2 mode.
6004+ 3AF2 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6005+ 3AF4 C3 04 17             jp      ERROR           ; print error
6006+ 3AF7
6007+ 3AF7
6008+ 3AF7              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6009+ 3AF7              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6010+ 3AF7              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6011+ 3AF7              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6012+ 3AF7              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6013+ 3AF7              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6014+ 3AF7              ; they are assumed to be 8,0,1 resp.
6015+ 3AF7              PRTNUM  equ     VIDEOBUFF
6016+ 3AF7              BPS     equ     VIDEOBUFF+$01
6017+ 3AF7              DATABT  equ     BPS+$02
6018+ 3AF7              PARBT   equ     DATABT+$01
6019+ 3AF7              STPBT   equ     PARBT+$01
6020+ 3AF7              SIOBFR  equ     STPBT+$01
6021+ 3AF7 CD 22 29     SERIAL: call    GETINT          ; get port #
6022+ 3AFA A7                   and     A               ; is it zero?
6023+ 3AFB CA DE 1C             jp      Z,FCERR         ; yes, error
6024+ 3AFE FE 03                cp      $03             ; is it 1 or 2?
6025+ 3B00 D2 20 3D             jp      NC,SCERR        ; no, error
6026+ 3B03 32 E6 81             ld      (PRTNUM),A      ; store port number into a temp buffer
6027+ 3B06 CD D2 19             call    CHKSYN          ; Make sure ',' follows
6028+ 3B09 2C                   defb    ','
6029+ 3B0A 2B                   dec     HL
6030+ 3B0B CD 13 1C             call    GETCHR          ; check what's following
6031+ 3B0E CA F0 16             jp      Z,SNERR         ; error if nothing follows
6032+ 3B11 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6033+ 3B13 CD E3 1C             call    ATOH            ; get bps (returned into DE)
6034+ 3B16 18 0F                jr      CHKZSER         ; jump over
6035+ 3B18 CD 9C 20     SERVAR: call    GETNUM          ; get number
6036+ 3B1B CD A9 2E             call    TSTSGN          ; check value
6037+ 3B1E FA DE 1C             jp      M,FCERR         ; negative - illegal function call
6038+ 3B21 3A 35 82             ld      A,(FPEXP)       ; Get integer value to DE
6039+ 3B24 CD 51 2F             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6040+ 3B27 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6041+ 3B28 B3                   or      E               ; check if bps=0
6042+ 3B29 20 3A                jr      NZ,CNTSER       ; no, continue checking
6043+ 3B2B                      ; if baud rate is 0, then close the serial comm.
6044+ 3B2B 3A E6 81     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6045+ 3B2E 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6046+ 3B2F C6 22                add     SIO_CA          ; find correct channel
6047+ 3B31 4F                   ld      C,A             ; store serial channel
6048+ 3B32 F3                   di                      ; disable INTs
6049+ 3B33 AF                   xor     A               ; reset A
6050+ 3B34 16 01                ld      D,$01           ; start from WR1
6051+ 3B36 06 05                ld      B,$05           ; 5 registers
6052+ 3B38 ED 51        RPTRSSR:out     (C),D           ; select register
6053+ 3B3A ED 79                out     (C),A           ; reset register
6054+ 3B3C 14                   inc     D               ; next register
6055+ 3B3D 10 F9                djnz    RPTRSSR         ; repeat
6056+ 3B3F 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6057+ 3B41 ED 79                out     (C),A           ; send command to serial channel
6058+ 3B43 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6059+ 3B45 ED 79                out     (C),A           ; send command to serial channel
6060+ 3B47 FB                   ei                      ; re-enable INTs
6061+ 3B48 E5                   push    HL              ; store HL
6062+ 3B49 21 20 82             ld      HL,SERIALS_EN   ; serials enabled status byte
6063+ 3B4C DB 01                in      A,(PIO_DB)      ; read status LEDs
6064+ 3B4E CB 41                bit     0,C             ; check serial port
6065+ 3B50 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6066+ 3B52 CB B7                res     6,A             ; it's port 1
6067+ 3B54 CB A7                res     4,A             ; remove possible error LED
6068+ 3B56 CB 86                res     0,(HL)          ; disable port 1
6069+ 3B58 C3 61 3B             jp      SERLED          ; jump over
6070+ 3B5B CB BF        SRPT2:  res     7,A             ; it's port 2
6071+ 3B5D CB AF                res     5,A             ; remove possible error LED
6072+ 3B5F CB 8E                res     1,(HL)          ; disable port 2
6073+ 3B61 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6074+ 3B63 E1                   pop     HL              ; retrieve HL
6075+ 3B64 C9                   ret                     ; return to caller
6076+ 3B65                      ; check if bps=1, meaning reactivate RX on serial
6077+ 3B65 7A           CNTSER: ld      A,D
6078+ 3B66 B2                   or      D               ; check if bps<>1 by first checking D=0
6079+ 3B67 20 36                jr      NZ,CNTSER2      ; if not, jump over
6080+ 3B69 7B                   ld      A,E             ; then by checking that
6081+ 3B6A FE 01                cp      $01             ; E=1
6082+ 3B6C 20 31                jr      NZ,CNTSER2      ; if not, jump over
6083+ 3B6E 3A E6 81             ld      A,(PRTNUM)      ; load port number
6084+ 3B71 57                   ld      D,A             ; store port on D
6085+ 3B72 3A 20 82             ld      A,(SERIALS_EN)  ; load address of serial status cell
6086+ 3B75 A2                   and     D               ; check status
6087+ 3B76 CA 20 3D             jp      Z,SCERR         ; port not open, raise error
6088+ 3B79 F3                   di                      ; disable INTs
6089+ 3B7A 7A                   ld      A,D             ; move port # into A
6090+ 3B7B 5F                   ld      E,A             ; and also into E
6091+ 3B7C 87                   add     A
6092+ 3B7D 87                   add     A               ; move A to left times 2
6093+ 3B7E 57                   ld      D,A             ; move value into D
6094+ 3B7F 3A 20 82             ld      A,(SERIALS_EN)  ; load serial status byte
6095+ 3B82 B2                   or      D               ; re-enable RX
6096+ 3B83 32 20 82             ld      (SERIALS_EN),A  ; store new serial status
6097+ 3B86 7B                   ld      A,E             ; recover port #
6098+ 3B87 3D                   dec     A               ; check port
6099+ 3B88 20 0A                jr      NZ,CNTRX2       ; port is #2
6100+ 3B8A CD DA 01             call    SIO_A_EI        ; re-enable RX on port 1
6101+ 3B8D DB 01                in      A,(PIO_DB)      ; load status LEDs
6102+ 3B8F CB A7                res     4,A             ; remove error LED
6103+ 3B91 C3 9B 3B             jp      RXEND           ; terminate setting
6104+ 3B94 CD E2 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6105+ 3B97 DB 01                in      A,(PIO_DB)      ; load status LEDs
6106+ 3B99 CB AF                res     5,A             ; remove error LED
6107+ 3B9B D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6108+ 3B9D FB                   ei                      ; re-enable INTs
6109+ 3B9E C9                   ret                     ; return to caller
6110+ 3B9F                      ; set serial port comm.
6111+ 3B9F D5           CNTSER2:push    DE              ; store BPS
6112+ 3BA0 3A E6 81             ld      A,(PRTNUM)      ; load port number
6113+ 3BA3 57                   ld      D,A             ; move port # into D
6114+ 3BA4 3A 20 82             ld      A,(SERIALS_EN)  ; check if serial port is already open
6115+ 3BA7 A2                   and     D               ; by ANDing A with D
6116+ 3BA8 D1                   pop     DE              ; retrieve BPS
6117+ 3BA9 CA B1 3B             jp      Z,CNTSER3       ; not open, continue
6118+ 3BAC 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6119+ 3BAE C3 04 17             jp      ERROR           ; and leave
6120+ 3BB1 E5           CNTSER3:push    HL              ; store HL
6121+ 3BB2 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6122+ 3BB5 CD DF 3F             call    CMP16           ; is bps<=57,600?
6123+ 3BB8 E1                   pop     HL              ; but first, recover HL
6124+ 3BB9 DA 20 3D             jp      C,SCERR         ; no (bps>57,600) then error
6125+ 3BBC ED 53 E7 81          ld      (BPS),DE        ; store bps
6126+ 3BC0 2B                   dec     HL              ; dec 'cos GETCHR INCs
6127+ 3BC1 CD 13 1C             call    GETCHR          ; Get next character
6128+ 3BC4 CA FC 3B             jp      Z,DEFSER        ; defaults if nothing follows
6129+ 3BC7 CD D2 19             call    CHKSYN          ; Make sure ',' follows
6130+ 3BCA 2C                   defb    ','
6131+ 3BCB CD 22 29             call    GETINT          ; get data bits
6132+ 3BCE FE 05                cp      $05             ; is it <5?
6133+ 3BD0 DA 20 3D             jp      C,SCERR         ; yes, error
6134+ 3BD3 FE 09                cp      $09             ; is it >=9?
6135+ 3BD5 D2 DE 1C             jp      NC,FCERR        ; yes, error
6136+ 3BD8 32 E9 81             ld      (DATABT),A      ; store data bits
6137+ 3BDB CD D2 19             call    CHKSYN          ; Make sure ',' follows
6138+ 3BDE 2C                   defb    ','
6139+ 3BDF CD 22 29             call    GETINT          ; get parity bits
6140+ 3BE2 BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6141+ 3BE5 D2 20 3D             jp      NC,SCERR        ; no, error
6142+ 3BE8 32 EA 81             ld      (PARBT),A       ; store parity
6143+ 3BEB CD D2 19             call    CHKSYN          ; Make sure ',' follows
6144+ 3BEE 2C                   defb    ','
6145+ 3BEF CD 22 29             call    GETINT          ; get stop bits
6146+ 3BF2 FE 03                cp      $03             ; is it >=3?
6147+ 3BF4 D2 20 3D             jp      NC,SCERR        ; yes, error
6148+ 3BF7 32 EB 81             ld      (STPBT),A       ; store stop bits
6149+ 3BFA 18 0D                jr      SETSER          ; jump to set serial
6150+ 3BFC 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6151+ 3BFE 32 E9 81             ld      (DATABT),A
6152+ 3C01 AF                   xor     A               ; no parity bit
6153+ 3C02 32 EA 81             ld      (PARBT),A
6154+ 3C05 3C                   inc     A               ; 1 bit for stop
6155+ 3C06 32 EB 81             ld      (STPBT),A
6156+ 3C09                      ; check if bps are legal
6157+ 3C09 E5           SETSER: push    HL              ; store HL
6158+ 3C0A D5                   push    DE              ; store DE
6159+ 3C0B DD E5                push    IX              ; store IX
6160+ 3C0D DD 21 FB 3C          ld      IX,SUP_BPS      ; allowed BPSs
6161+ 3C11 06 0B                ld      B,$0B           ; 11 items
6162+ 3C13 0E 00                ld      C,$00           ; reset pointer
6163+ 3C15 2A E7 81     CKBPS:  ld      HL,(BPS)        ; load BPS
6164+ 3C18 DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6165+ 3C1B DD 56 01             ld      D,(IX+1)        ; load MSB of item
6166+ 3C1E CD DF 3F             call    CMP16           ; is it equal?
6167+ 3C21 CA 2E 3C             jp      Z,SET_PT        ; yes, found a correspondance
6168+ 3C24 DD 23                inc     IX
6169+ 3C26 DD 23                inc     IX              ; no, go to next entry
6170+ 3C28 0C                   inc     C               ; increment pointer
6171+ 3C29 10 EA                djnz    CKBPS           ; repeat for 10 entries
6172+ 3C2B C3 1C 3D             jp      SCERR1          ; if nothing found, raise an error
6173+ 3C2E              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6174+ 3C2E                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6175+ 3C2E                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6176+ 3C2E                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6177+ 3C2E F3                   di                      ; disable INTs
6178+ 3C2F 06 00                ld      B,$00           ; reset B
6179+ 3C31 21 11 3D             ld      HL,CTC_CFG      ; address of first CTC divider
6180+ 3C34 09                   add     HL,BC           ; adjust for correct CTC divider
6181+ 3C35 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6182+ 3C37 3A E6 81             ld      A,(PRTNUM)      ; load port number
6183+ 3C3A 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6184+ 3C3B DA 3F 3C             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6185+ 3C3E 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6186+ 3C3F 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6187+ 3C41                                              ; start upon loading time constant, time constant follows, sw reset, command word
6188+ 3C41 ED 79                out     (C),A           ; configure CTC channel
6189+ 3C43 7E                   ld      A,(HL)          ; load CTC divider
6190+ 3C44 ED 79                out     (C),A           ; send divider
6191+ 3C46                      ; configure SIO
6192+ 3C46 21 56 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6193+ 3C49 11 EC 81             ld      DE,SIOBFR       ; into a temp buffer
6194+ 3C4C 01 0A 00             ld      BC,$000A        ; 10 items to copy
6195+ 3C4F ED B0                ldir                    ; copy SIO settings into TEMP buffer
6196+ 3C51 3A F1 81             ld      A,(SIOBFR+5)    ; load WR5 setting
6197+ 3C54 47                   ld      B,A             ; move it into B
6198+ 3C55 3A E9 81             ld      A,(DATABT)      ; load DATA bits
6199+ 3C58 FE 05                cp      $05             ; is it 5 bits?
6200+ 3C5A 20 06                jr      NZ,BITS6        ; no, jump over
6201+ 3C5C CB B0                res     6,B
6202+ 3C5E CB A8                res     5,B             ; set D6 & D5 to 0
6203+ 3C60 18 19                jr      SETPAR          ; jump to set parity
6204+ 3C62 FE 06        BITS6:  cp      $06             ; is it 6 bits?
6205+ 3C64 20 06                jr      NZ,BITS7        ; no, jump over
6206+ 3C66 CB F0                set     6,B
6207+ 3C68 CB A8                res     5,B             ; set D6 & D5 to 1,0
6208+ 3C6A 18 0F                jr      SETPAR          ; jump to set parity
6209+ 3C6C FE 07        BITS7:  cp      $07             ; is it 7 bits?
6210+ 3C6E 20 07                jr      NZ,BITS8        ; no, jump over
6211+ 3C70 CB B0                res     6,B
6212+ 3C72 CB E8                set     5,B             ; set D6 & D5 to 0,1
6213+ 3C74 C3 7B 3C             jp      SETPAR          ; jump to set parity
6214+ 3C77 CB F0        BITS8:  set     6,B
6215+ 3C79 CB E8                set     5,B             ; set D6 & D5 to 1,1
6216+ 3C7B 21 21 82     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6217+ 3C7E 3A E6 81             ld      A,(PRTNUM)      ; check serial port number
6218+ 3C81 3D                   dec     A               ; is it port #1?
6219+ 3C82 CA 86 3C             jp      Z,SETPAR2       ; yes, jump over
6220+ 3C85 23                   inc     HL              ; port #2, use SERBBITS instead
6221+ 3C86 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6222+ 3C87 32 F1 81             ld      (SIOBFR+5),A    ; save DATA bits
6223+ 3C8A E6 60                and     %01100000       ; filter only D5&D6 bits
6224+ 3C8C 87                   add     A,A             ; shift left times 1
6225+ 3C8D 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6226+ 3C8E 3A EB 81             ld      A,(STPBT)       ; load STOP bits
6227+ 3C91 87                   add     A,A
6228+ 3C92 87                   add     A,A             ; 2 left shifts
6229+ 3C93 47                   ld      B,A             ; move forming byte into B
6230+ 3C94 3A EA 81             ld      A,(PARBT)       ; load PARITY setting
6231+ 3C97 A7                   and     A               ; is it 0?
6232+ 3C98 CA A3 3C             jp      Z,STRPAR        ; yes, jump over
6233+ 3C9B CB C0                set     0,B             ; set PARITY on
6234+ 3C9D 3D                   dec     A               ; is parity ODD?
6235+ 3C9E CA A3 3C             jp      Z,STRPAR        ; yes, so jump over
6236+ 3CA1 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6237+ 3CA3 3A EF 81     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6238+ 3CA6 E6 F0                and     %11110000       ; reset STOP & PARITY bits
6239+ 3CA8 B0                   or      B               ; set new STOP & PARITY bits
6240+ 3CA9 32 EF 81             ld      (SIOBFR+3),A    ; store new value
6241+ 3CAC                      ;set up TX and RX:
6242+ 3CAC                      ; the followings are settings for channel A
6243+ 3CAC 21 EC 81             ld      HL,SIOBFR       ; settings for SIO ch. A
6244+ 3CAF 06 06                ld      B,$06           ; 6 bytes to send
6245+ 3CB1 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6246+ 3CB3 3A E6 81             ld      A,(PRTNUM)      ; load port number
6247+ 3CB6 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6248+ 3CB7 DA BB 3C             jp      C,SRLCNT        ; port 1, continue
6249+ 3CBA 0C                   inc     C               ; port 2, increment address port into C
6250+ 3CBB ED B3        SRLCNT: otir                    ; send bytes to SIO
6251+ 3CBD                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6252+ 3CBD 06 04                ld      B,$04           ; other 4 bytes to send
6253+ 3CBF 51                   ld      D,C             ; store port address into D
6254+ 3CC0 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6255+ 3CC2 ED B3                otir                    ; send bytes to SIO
6256+ 3CC4                      ; the following are settings for selected channel
6257+ 3CC4 3E 01                ld      A,$01           ; write into WR0: select WR1
6258+ 3CC6 4A                   ld      C,D             ; retrieve port address
6259+ 3CC7 ED 79                out     (C),A
6260+ 3CC9 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6261+ 3CCB                                              ; buffer overrun is special condition
6262+ 3CCB ED 79                out     (C),A
6263+ 3CCD 21 20 82             ld      HL,SERIALS_EN
6264+ 3CD0 3A E6 81             ld      A,(PRTNUM)      ; retrieve serial channel
6265+ 3CD3 3D                   dec     A               ; channel A?
6266+ 3CD4 20 10                jr      NZ,ENCHB        ; no, jump over
6267+ 3CD6 CD DA 01             call    SIO_A_EI        ; enable RX on SIO channel A
6268+ 3CD9 CB C6                set     0,(HL)          ; set serial port 1 status ON
6269+ 3CDB CB D6                set     2,(HL)          ; set serial port 1 RX ON
6270+ 3CDD                      ; back to normal running
6271+ 3CDD FB                   ei                      ; re-enable INTs
6272+ 3CDE DB 01                in      A,(PIO_DB)      ; load status LEDs
6273+ 3CE0 CB F7                set     6,A             ; set status LED on
6274+ 3CE2 CB A7                res     4,A             ; set error LED off
6275+ 3CE4 18 0E                jr      EXNRM           ; leave
6276+ 3CE6 CD E2 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6277+ 3CE9 CB CE                set     1,(HL)          ; set serial port 2 status ON
6278+ 3CEB CB DE                set     3,(HL)          ; set serial port 2 RX ON
6279+ 3CED                      ; back to normal running
6280+ 3CED FB                   ei                      ; re-enable INTs
6281+ 3CEE DB 01                in      A,(PIO_DB)      ; load status LEDs
6282+ 3CF0 CB FF                set     7,A             ; set status LED on
6283+ 3CF2 CB AF                res     5,A             ; set error LED off
6284+ 3CF4 D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6285+ 3CF6 DD E1                pop     IX              ; retrieve IX
6286+ 3CF8 D1                   pop     DE              ; retrieve DE
6287+ 3CF9 E1                   pop     HL              ; retrieve HL
6288+ 3CFA C9                   ret                     ; return to caller
6289+ 3CFB
6290+ 3CFB              ; allowed bps (Bauds per second)
6291+ 3CFB 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6291+ 3CFF 80 70 00 4B
6291+ 3D03 40 38 80 25
6291+ 3D07 C0 12 10 0E
6291+ 3D0B 60 09 B0 04
6291+ 3D0F 58 02
6292+ 3D11              ; corresponding CTC divider
6293+ 3D11 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6293+ 3D15 08 0C 18 20
6293+ 3D19 30 60 C0
6294+ 3D1C
6295+ 3D1C
6296+ 3D1C              ; serial configuration error
6297+ 3D1C DD E1        SCERR1: pop     IX              ; retrieve IX
6298+ 3D1E D1                   pop     DE              ; retrieve DE
6299+ 3D1F E1                   pop     HL              ; retrieve HL
6300+ 3D20 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6301+ 3D22 C3 04 17             jp      ERROR           ; print error
6302+ 3D25
6303+ 3D25
6304+ 3D25              ; serial buffer overrun
6305+ 3D25 CD E0 1E     SOERR:  call    PRNTCRLF
6306+ 3D28 1E 30                ld      E,SO            ; Serial Buffer Overrun
6307+ 3D2A C3 04 17             jp      ERROR
6308+ 3D2D
6309+ 3D2D
6310+ 3D2D              ; check for direct mode
6311+ 3D2D E5           DIRMOD: push    HL              ; Save code string address
6312+ 3D2E 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6313+ 3D31 23                   inc     HL              ; -1 means direct statement
6314+ 3D32 7C                   ld      A,H
6315+ 3D33 B5                   or      L
6316+ 3D34 E1                   pop     HL              ; Restore code string address
6317+ 3D35 C2 4F 3D             jp      NZ,HLPERR       ; raise error if in indirect mode
6318+ 3D38 C9                   ret
6319+ 3D39
6320+ 3D39
6321+ 3D39              ; HELP lists the line program where an error occured
6322+ 3D39 CD 2D 3D     HELP:   call    DIRMOD          ; check if in direct mode
6323+ 3D3C E5                   push    HL              ; store HL
6324+ 3D3D 2A B1 80             ld      HL,(HLPLN)      ; load HELP line
6325+ 3D40 23                   inc     HL              ; increment HL
6326+ 3D41 7C                   ld      A,H
6327+ 3D42 B5                   or      L               ; check if there is a line into the HELP reg.
6328+ 3D43 E1                   pop     HL
6329+ 3D44 CA 4F 3D             jp      Z,HLPERR        ; no line found, raise error
6330+ 3D47 ED 5B B1 80          ld      DE,(HLPLN)      ; recover line
6331+ 3D4B C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6332+ 3D4C C3 60 1A             jp      LST01H          ; jump to list line
6333+ 3D4F 1E 32        HLPERR: ld      E,HP            ; HELP call error
6334+ 3D51 C3 04 17             jp      ERROR           ; raise error
6335+ 3D54
6336+ 3D54
6337+ 3D54              ; KEY command to list/modify function keys and auto-repeat
6338+ 3D54 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6339+ 3D55 CD 13 1C             call    GETCHR          ; Get next character
6340+ 3D58 CA D8 3D             jp      Z,LSTKEYS       ; jump if nothing follows
6341+ 3D5B                      ; change FN keys
6342+ 3D5B CD 22 29             call    GETINT          ; get a number
6343+ 3D5E A7                   and     A               ; is it 0?
6344+ 3D5F 20 10                jr      NZ,KEYCH        ; no, jump over
6345+ 3D61 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6346+ 3D62 D5                   push    DE              ; store HL & DE
6347+ 3D63 21 DE 15             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6348+ 3D66 11 B3 80             ld      DE,KEYDEL       ; pointer to destination
6349+ 3D69 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6350+ 3D6C ED B0                ldir                    ; restore default texts
6351+ 3D6E D1                   pop     DE              ; retrieve DE
6352+ 3D6F E1                   pop     HL              ; retrieve HL
6353+ 3D70 C9                   ret                     ; return to caller
6354+ 3D71 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6355+ 3D73 D2 8B 3E             jp      NC,SETREP       ; yes - jump over
6356+ 3D76 3D                   dec     A               ; FN key in range 0~7
6357+ 3D77 87                   add     A,A             ; multiply A...
6358+ 3D78 87                   add     A,A             ; ... times 4...
6359+ 3D79 87                   add     A,A             ; ... to get the correct...
6360+ 3D7A 87                   add     A,A             ; ... offset fo FN key text
6361+ 3D7B 32 DE 81             ld      (TMPBFR1),A     ; store FN key offset...
6362+ 3D7E AF                   xor     A               ; ...in a...
6363+ 3D7F 32 DF 81             ld      (TMPBFR1+1),A   ; ...16-bit register
6364+ 3D82 CD D2 19             call    CHKSYN          ; Make sure ',' follows
6365+ 3D85 2C                   defb    ','
6366+ 3D86 44 4D                ld      BC,HL           ; copy address into BC
6367+ 3D88 CD AE 20             call    EVAL            ; Evaluate expression (in E there is the length)
6368+ 3D8B E5                   push    HL              ; store string pointer
6369+ 3D8C 3A 94 81             ld      A,(TYPE)        ; Get variable type
6370+ 3D8F B7                   or      A               ; Is it a string variable?
6371+ 3D90 CA F0 16             jp      Z,SNERR         ; no - syntax error
6372+ 3D93 CD E7 26             call    GSTRCU          ; Current string to pool
6373+ 3D96 CD F8 2E             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6374+ 3D99 7B                   ld      A,E             ; copy length into A
6375+ 3D9A FE 11                cp      $11             ; is length > 16?
6376+ 3D9C DA A1 3D             jp      C,DECLN1        ; no, jump over
6377+ 3D9F 1E 10                ld      E,$10           ; yes, so set length to 16
6378+ 3DA1 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6379+ 3DA3 93                   sub     E               ; ...null chars needed to fill up...
6380+ 3DA4 57                   ld      D,A             ; ...the FN key text
6381+ 3DA5 C5                   push    BC              ; store address of string
6382+ 3DA6 ED 4B DE 81          ld      BC,(TMPBFR1)    ; load FN key offset
6383+ 3DAA 21 B5 80             ld      HL,FNKEYS       ; load address of FN keys texts
6384+ 3DAD 09                   add     HL,BC           ; get corrected address
6385+ 3DAE C1                   pop     BC              ; retrieve address of string chars
6386+ 3DAF 0A           CPKEY:  ld      A,(BC)          ; load char from string
6387+ 3DB0 FE 0D                cp      CR              ; return?
6388+ 3DB2 CA BF 3D             jp      Z,CPKEY2        ; yes, store char
6389+ 3DB5 FE 7B                cp      $7B             ; if char > "z" ?
6390+ 3DB7 D2 F0 16             jp      NC,SNERR        ; yes - syntax error
6391+ 3DBA FE 20                cp      $20             ; is char < space?
6392+ 3DBC DA F0 16             jp      C,SNERR         ; yes - syntax error
6393+ 3DBF FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6394+ 3DC1 DA C6 3D             jp      C,CPKEY3        ; no, continue
6395+ 3DC4 E6 5F                and     %01011111       ; set letters to uppercase
6396+ 3DC6 77           CPKEY3: ld      (HL),A          ; store char
6397+ 3DC7 23                   inc     HL              ; next string char
6398+ 3DC8 03                   inc     BC              ; next free cell
6399+ 3DC9 1D                   dec     E               ; decrement E
6400+ 3DCA 20 E3                jr      NZ,CPKEY        ; repeat until 0
6401+ 3DCC AF                   xor     A               ; null char
6402+ 3DCD 14                   inc     D               ; +1 to decrement below
6403+ 3DCE 15           CPKEY1: dec     D               ; how many null chars to insert?
6404+ 3DCF CA D6 3D             jp      Z,CPKYEND       ; no more nulls, so exit
6405+ 3DD2 77                   ld      (HL),A          ; store it
6406+ 3DD3 23                   inc     HL              ; next cell
6407+ 3DD4 18 F8                jr      CPKEY1          ; repeat
6408+ 3DD6 E1           CPKYEND:pop     HL              ; retrieve pointer to string
6409+ 3DD7 C9                   ret                     ; return to caller
6410+ 3DD8                                              ; list FN keys
6411+ 3DD8 E5           LSTKEYS:push    HL              ; Save code string address
6412+ 3DD9 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6413+ 3DDC 23                   inc     HL              ; -1 means direct statement
6414+ 3DDD 7C                   ld      A,H
6415+ 3DDE B5                   or      L
6416+ 3DDF E1                   pop     HL              ; Restore code string address
6417+ 3DE0 C2 F0 16             jp      NZ,SNERR        ; raise error if in indirect mode
6418+ 3DE3 E5                   push    HL              ; store HL
6419+ 3DE4 D5                   push    DE              ; store DE
6420+ 3DE5 21 B5 80             ld      HL,FNKEYS       ; load starting address of FN keys text
6421+ 3DE8 0E 01                ld      C,$01           ; 8 function keys
6422+ 3DEA 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6423+ 3DEC 11 AD 3E     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6424+ 3DEF CD 7C 3E             call    PRTCKEY         ; print it
6425+ 3DF2 79                   ld      A,C             ; load FN key
6426+ 3DF3 C6 30                add     $30             ; get number in ASCI code
6427+ 3DF5 CD DD 19             call    OUTC            ; print it
6428+ 3DF8 11 B2 3E             ld      DE,CHKEY2       ; message ": ""
6429+ 3DFB CD 7C 3E             call    PRTCKEY         ; print it
6430+ 3DFE 3E 01                ld      A,$01           ; " opened
6431+ 3E00 32 DE 81             ld      (TMPBFR1),A
6432+ 3E03 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6433+ 3E04 A7                   and     A               ; is it zero?
6434+ 3E05 CA 18 3E             jp      Z,CNTLTK        ; yes, go next char
6435+ 3E08 CD 64 3E             call    OPNQT           ; check if quotes are opened
6436+ 3E0B FE 22                cp      $22             ; check if char is "?
6437+ 3E0D CA 2D 3E             jp      Z,PRTCHR        ; yes, print "chr$("
6438+ 3E10 FE 0D                cp      CR              ; is it a CR?
6439+ 3E12 CA 2D 3E             jp      Z,PRTCHR        ; yes, print "chr$("
6440+ 3E15 CD DD 19     PRTK3:  call    OUTC            ; no, just print it
6441+ 3E18 23           CNTLTK: inc     HL              ; next char
6442+ 3E19 10 E8                djnz    LDKEY           ; continue until finished
6443+ 3E1B CD 52 3E             call    CLSQT           ; check if quotes are still open
6444+ 3E1E 3E 0D                ld      A,CR            ; go next line
6445+ 3E20 CD DD 19             call    OUTC            ; print it
6446+ 3E23 0C                   inc     C               ; next FN key
6447+ 3E24 79                   ld      A,C             ; check if...
6448+ 3E25 FE 09                cp      $09             ; finished keys?
6449+ 3E27 DA EA 3D             jp      C,PRTK4         ; no, repeat 1 more time
6450+ 3E2A D1                   pop     DE              ; retrieve DE
6451+ 3E2B E1                   pop     HL              ; retrieve HL
6452+ 3E2C C9                   ret                     ; return to caller
6453+ 3E2D E5           PRTCHR: push    HL              ; store HL
6454+ 3E2E CD 52 3E             call    CLSQT           ; check if quotes are closed
6455+ 3E31 3E 2B                ld      A,'+'           ; '+' char
6456+ 3E33 CD DD 19             call    OUTC            ; print it
6457+ 3E36 11 B5 3E             ld      DE,CHKEY3       ; address of "CHR$("
6458+ 3E39 CD 7C 3E             call    PRTCKEY         ; print it
6459+ 3E3C E1                   pop     HL              ; recover HL
6460+ 3E3D 23                   inc     HL              ; next char
6461+ 3E3E 05                   dec     B               ; increment char counter
6462+ 3E3F 11 BB 3E             ld      DE,CHKEY4       ; load address of RETURN
6463+ 3E42 7E                   ld      A,(HL)          ; load char
6464+ 3E43 FE 0D                cp      CR              ; is it a RETURN?
6465+ 3E45 20 03                jr      NZ,PTCHR1       ; no, jump over
6466+ 3E47 11 BE 3E             ld      DE,CHKEY5       ; yes, load address of "
6467+ 3E4A CD 7C 3E     PTCHR1: call    PRTCKEY         ; print it
6468+ 3E4D 3E 29                ld      A,')'           ; char )
6469+ 3E4F C3 15 3E             jp      PRTK3           ; continue
6470+ 3E52 F5           CLSQT:  push    AF              ; store A
6471+ 3E53 3A DE 81             ld      A,(TMPBFR1)     ; quote status
6472+ 3E56 A7                   and     A               ; are they closed?
6473+ 3E57 28 09                jr      Z,CLSQT1        ; if yes, return
6474+ 3E59 3E 22                ld      A,$22           ; no, so close them
6475+ 3E5B CD DD 19             call    OUTC            ; print "
6476+ 3E5E AF                   xor     A               ; set quotes
6477+ 3E5F 32 DE 81             ld      (TMPBFR1),A     ; as closed
6478+ 3E62 F1           CLSQT1: pop     AF              ; retrieve A
6479+ 3E63 C9                   ret                     ; return to caller
6480+ 3E64 F5           OPNQT:  push    AF              ; store A
6481+ 3E65 3A DE 81             ld      A,(TMPBFR1)     ; quote status
6482+ 3E68 A7                   and     A               ; are they open?
6483+ 3E69 20 0F                jr      NZ,OPNQT1       ; if yes, return
6484+ 3E6B 3E 2B                ld      A,'+'           ; no, so add '+
6485+ 3E6D CD DD 19             call    OUTC            ; print it
6486+ 3E70 3E 22                ld      A,$22           ; and then open quotes
6487+ 3E72 CD DD 19             call    OUTC            ; print them
6488+ 3E75 3E 01                ld      A,$01           ; set quotes
6489+ 3E77 32 DE 81             ld      (TMPBFR1),A     ; as opened
6490+ 3E7A F1           OPNQT1: pop     AF              ; retrieve A
6491+ 3E7B C9                   ret                     ; return to caller
6492+ 3E7C F5           PRTCKEY:push    AF              ; store original char
6493+ 3E7D 1A           PRTK1:  ld      A,(DE)          ; load char
6494+ 3E7E A7                   and     A               ; is it 0?
6495+ 3E7F CA 89 3E             jp      Z,PRTEND        ; yes, finished printing
6496+ 3E82 CD DD 19             call    OUTC            ; no, print char
6497+ 3E85 13                   inc     DE              ; next char
6498+ 3E86 C3 7D 3E             jp      PRTK1           ; repeat
6499+ 3E89 F1           PRTEND: pop     AF              ; retrieve AF
6500+ 3E8A C9                   ret                     ; return to caller
6501+ 3E8B FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6502+ 3E8D C2 F0 16             jp      NZ,SNERR        ; no, raise an error
6503+ 3E90 CD D2 19             call    CHKSYN          ; Check for comma
6504+ 3E93 2C                   defb    ','
6505+ 3E94 CD 22 29             call    GETINT          ; get a number
6506+ 3E97 32 DE 81             ld      (TMPBFR1),A     ; store it
6507+ 3E9A CD D2 19             call    CHKSYN          ; Check for comma
6508+ 3E9D 2C                   defb    ','
6509+ 3E9E CD 22 29             call    GETINT          ; get another number
6510+ 3EA1 E5                   push    HL              ; store HL
6511+ 3EA2 21 B4 80             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6512+ 3EA5 77                   ld      (HL),A          ; store auto-repeat delay
6513+ 3EA6 2B                   dec     HL              ; previous cell
6514+ 3EA7 3A DE 81             ld      A,(TMPBFR1)     ; retrieve value
6515+ 3EAA 77                   ld      (HL),A          ; store delay for auto-repeat
6516+ 3EAB E1                   pop     HL              ; retrieve HL
6517+ 3EAC C9                   ret
6518+ 3EAD 4B 45 59 20  CHKEY1: defb    "KEY ",0
6518+ 3EB1 00
6519+ 3EB2 3A 22 00     CHKEY2: defb    ":",34,0
6520+ 3EB5 63 68 72 24  CHKEY3: defb    "chr$(",0
6520+ 3EB9 28 00
6521+ 3EBB 31 33 00     CHKEY4: defb    "13",0
6522+ 3EBE 33 34 00     CHKEY5: defb    "34",0
6523+ 3EC1
6524+ 3EC1
6525+ 3EC1              ; LOAD "filename"
6526+ 3EC1              ; load a BASIC program from disk
6527+ 3EC1 C9           LOAD:   ret                     ; currently a stub for LOAD
6528+ 3EC2
6529+ 3EC2
6530+ 3EC2              ; SAVE "filename"
6531+ 3EC2              ; save a BASIC program on disk
6532+ 3EC2 C9           SAVE:   ret                     ; currently a stub for SAVE
6533+ 3EC3
6534+ 3EC3
6535+ 3EC3              ; FILES
6536+ 3EC3              ; list files on disk
6537+ 3EC3 C9           FILES:  ret                     ; currently a stub for FILES
6538+ 3EC4
6539+ 3EC4
6540+ 3EC4              ; ERASE "filename"
6541+ 3EC4              ; erase a file from disk
6542+ 3EC4 C9           ERASE:  ret                     ; currently a stub for ERASE
6543+ 3EC5
6544+ 3EC5
6545+ 3EC5              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6546+ 3EC5 CD 9F 20     HEX: 	call	TSTNUM          ; Verify it's a number
6547+ 3EC8 CD C9 1C             call	DEINT           ; Get integer -32768 to 32767
6548+ 3ECB C5                   push	BC              ; Save contents of BC
6549+ 3ECC 21 37 82             ld      HL,PBUFF        ; load address of PBUFF into HL
6550+ 3ECF 7A                   ld      A,D             ; Get MSB into A
6551+ 3ED0 B7                   or      A               ; OR with LSB to see if param=0
6552+ 3ED1 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6553+ 3ED3 CD FB 3E             call    BYT2ASC         ; Convert D to ASCII
6554+ 3ED6 78                   ld      A,B             ; cechk if B
6555+ 3ED7 FE 30                cp      '0'             ; is 0
6556+ 3ED9 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6557+ 3EDB 70                   ld      (HL),B          ; Store it to PBUFF
6558+ 3EDC 23                   inc     HL              ; Next location
6559+ 3EDD 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6560+ 3EDE 23                   inc     HL              ; Next location
6561+ 3EDF 7B           HEX2:   ld      A,E             ; Get lower byte
6562+ 3EE0 CD FB 3E             call    BYT2ASC         ; Convert E to ASCII
6563+ 3EE3 7A                   ld      A,D
6564+ 3EE4 B7                   or      A
6565+ 3EE5 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
6566+ 3EE7 78                   ld      A,B
6567+ 3EE8 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
6568+ 3EEA 28 02                jr      Z,HEX4
6569+ 3EEC 70           HEX3:   ld      (HL),B          ; to PBUFF+2
6570+ 3EED 23                   inc     HL              ; Next location
6571+ 3EEE 71           HEX4:   ld      (HL),C          ; to PBUFF+3
6572+ 3EEF 23                   inc     HL              ; PBUFF+4 to zero
6573+ 3EF0 AF                   xor     A               ; Terminating character
6574+ 3EF1 77                   ld      (HL),A          ; Store zero to terminate
6575+ 3EF2 23                   inc     HL              ; Make sure PBUFF is terminated
6576+ 3EF3 77                   ld      (HL),A          ; Store the double zero there
6577+ 3EF4 C1                   pop     BC              ; Get BC back
6578+ 3EF5 21 37 82             ld      HL,PBUFF        ; Reset to start of PBUFF
6579+ 3EF8 C3 34 25             jp      STR1            ; Convert the PBUFF to a string and return it
6580+ 3EFB 47           BYT2ASC:ld      B,A             ; Save original value
6581+ 3EFC E6 0F                and     $0F             ; Strip off upper nybble
6582+ 3EFE FE 0A                cp      $0A             ; 0-9?
6583+ 3F00 38 02                jr      C,ADD30         ; If A-F, add 7 more
6584+ 3F02 C6 07                add     A,$07           ; Bring value up to ASCII A-F
6585+ 3F04 C6 30        ADD30:  add     A,$30           ; And make ASCII
6586+ 3F06 4F                   ld      C,A             ; Save converted char to C
6587+ 3F07 78                   ld      A,B             ; Retrieve original value
6588+ 3F08 0F                   rrca                    ; and Rotate it right
6589+ 3F09 0F                   rrca
6590+ 3F0A 0F                   rrca
6591+ 3F0B 0F                   rrca
6592+ 3F0C E6 0F                and     $0F             ; Mask off upper nybble
6593+ 3F0E FE 0A                cp      $0A             ; 0-9? < A hex?
6594+ 3F10 38 02                jr      C,ADD301        ; Skip Add 7
6595+ 3F12 C6 07                add     A,$07           ; Bring it up to ASCII A-F
6596+ 3F14 C6 30        ADD301: add     A,$30           ; And make it full ASCII
6597+ 3F16 47                   ld      B,A             ; Store high order byte
6598+ 3F17 C9                   ret
6599+ 3F18
6600+ 3F18              ; Convert "&Hnnnn" to FPREG
6601+ 3F18              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
6602+ 3F18              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
6603+ 3F18 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
6604+ 3F19 21 00 00             ld      HL,$0000        ; Zero out the value
6605+ 3F1C CD 31 3F             call    GETHEX          ; Check the number for valid hex
6606+ 3F1F DA 51 3F             jp      C,HXERR         ; First value wasn't hex, HX error
6607+ 3F22 18 05                jr      HEXLP1          ; Convert first character
6608+ 3F24 CD 31 3F     HEXLP:  call    GETHEX          ; Get second and addtional characters
6609+ 3F27 38 1F                jr      C,HEXIT         ; Exit if not a hex character
6610+ 3F29 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
6611+ 3F2A 29                   add     HL,HL
6612+ 3F2B 29                   add     HL,HL
6613+ 3F2C 29                   add     HL,HL
6614+ 3F2D B5                   or      L               ; Add in D0-D3 into L
6615+ 3F2E 6F                   ld      L,A             ; Save new value
6616+ 3F2F 18 F3                jr      HEXLP           ; And continue until all hex characters are in
6617+ 3F31
6618+ 3F31 13           GETHEX: inc     DE              ; Next location
6619+ 3F32 1A                   ld      A,(DE)          ; Load character at pointer
6620+ 3F33 FE 20                cp      SPC
6621+ 3F35 CA 31 3F             jp      Z,GETHEX        ; Skip spaces
6622+ 3F38 D6 30                sub     $30             ; Get absolute value
6623+ 3F3A D8                   ret     C               ; < "0", error
6624+ 3F3B FE 0A                cp      $0A
6625+ 3F3D 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
6626+ 3F3F D6 07                sub     $07             ; Reduce to A-F
6627+ 3F41 FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
6628+ 3F43 D8                   ret     C               ; CY set if was :            ; < = > ? @
6629+ 3F44 FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
6630+ 3F46 3F                   ccf
6631+ 3F47 C9                   ret                     ; CY set if it wasn't valid hex
6632+ 3F48
6633+ 3F48 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
6634+ 3F49 7A                   ld      A,D             ; Load DE into AC
6635+ 3F4A 4B                   ld      C,E             ; For prep to
6636+ 3F4B E5                   push    HL
6637+ 3F4C CD 85 24             call    ACPASS          ; ACPASS to set AC as integer into FPREG
6638+ 3F4F E1                   pop     HL
6639+ 3F50 C9                   ret
6640+ 3F51
6641+ 3F51 DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
6642+ 3F53 C3 04 17             jp      ERROR
6643+ 3F56
6644+ 3F56              ; BIN$(NN) Convert integer to a 1-16 char binary string
6645+ 3F56 CD 9F 20     BIN:    call    TSTNUM          ; Verify it's a number
6646+ 3F59 CD C9 1C             call    DEINT           ; Get integer -32768 to 32767
6647+ 3F5C C5           BIN2:   push    BC              ; Save contents of BC
6648+ 3F5D 21 37 82             ld      HL,PBUFF
6649+ 3F60 06 11                ld      B,$11           ; One higher than max char count (16+1)
6650+ 3F62              ZEROSUP:                        ; Suppress leading zeros
6651+ 3F62 05                   dec     B               ; Max 16 chars
6652+ 3F63 78                   ld      A,B
6653+ 3F64 FE 01                cp      $01
6654+ 3F66 28 08                jr      Z,BITOUT        ; Always output at least one character
6655+ 3F68 CB 13                rl      E
6656+ 3F6A CB 12                rl      D
6657+ 3F6C 30 F4                jr      NC,ZEROSUP
6658+ 3F6E 18 04                jr      BITOUT2
6659+ 3F70 CB 13        BITOUT: rl      E
6660+ 3F72 CB 12                rl      D               ; Top bit now in carry
6661+ 3F74 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
6662+ 3F76 CE 00                adc     A,$00           ; If carry set then '0' --> '1'
6663+ 3F78 77                   ld      (HL),A
6664+ 3F79 23                   inc     HL
6665+ 3F7A 05                   dec     B
6666+ 3F7B 20 F3                jr      NZ,BITOUT
6667+ 3F7D AF                   xor     A               ; Terminating character
6668+ 3F7E 77                   ld      (HL),A          ; Store zero to terminate
6669+ 3F7F 23                   inc     HL              ; Make sure PBUFF is terminated
6670+ 3F80 77                   ld      (HL),A          ; Store the double zero there
6671+ 3F81 C1                   pop     BC
6672+ 3F82 21 37 82             ld      HL,PBUFF
6673+ 3F85 C3 34 25             jp      STR1
6674+ 3F88
6675+ 3F88              ; Convert "&Bnnnn" to FPREG
6676+ 3F88              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
6677+ 3F88 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
6678+ 3F89 21 00 00             ld      HL,$0000        ; Zero out the value
6679+ 3F8C CD A5 3F             call    CHKBIN          ; Check the number for valid bin
6680+ 3F8F DA B3 3F             jp      C,BINERR        ; First value wasn't bin, HX error
6681+ 3F92 D6 30        BINIT:  sub     '0'
6682+ 3F94 29                   add     HL,HL           ; Rotate HL left
6683+ 3F95 B5                   or      L
6684+ 3F96 6F                   ld      L,A
6685+ 3F97 CD A5 3F             call    CHKBIN          ; Get second and addtional characters
6686+ 3F9A 30 F6                jr      NC,BINIT        ; Process if a bin character
6687+ 3F9C EB                   ex      DE,HL           ; Value into DE, Code string into HL
6688+ 3F9D 7A                   ld      A,D             ; Load DE into AC
6689+ 3F9E 4B                   ld      C,E             ; For prep to
6690+ 3F9F E5                   push    HL
6691+ 3FA0 CD 85 24             call    ACPASS          ; ACPASS to set AC as integer into FPREG
6692+ 3FA3 E1                   pop     HL
6693+ 3FA4 C9                   ret
6694+ 3FA5
6695+ 3FA5              ; Char is in A, NC if char is 0 or 1
6696+ 3FA5 13           CHKBIN: inc     DE
6697+ 3FA6 1A                   ld      A,(DE)
6698+ 3FA7 FE 20                cp      SPC
6699+ 3FA9 CA A5 3F             jp      Z,CHKBIN        ; Skip spaces
6700+ 3FAC FE 30                cp      '0'             ; Set C if < '0'
6701+ 3FAE D8                   ret     C
6702+ 3FAF FE 32                cp      '2'
6703+ 3FB1 3F                   ccf                     ; Set C if > '1'
6704+ 3FB2 C9                   ret
6705+ 3FB3
6706+ 3FB3 1E 28        BINERR: ld      E,BN            ; ?BIN Error
6707+ 3FB5 C3 04 17             jp      ERROR
6708+ 3FB8
6709+ 3FB8
6710+ 3FB8 C3 08 00     MONOUT: jp      $0008           ; output a char
6711+ 3FBB
6712+ 3FBB
6713+ 3FBB 3A 20 82     RESET:  ld      A,(SERIALS_EN)
6714+ 3FBE E6 11                and     $11             ; are serial ports open?
6715+ 3FC0 C4 2B 3B             call    NZ,RSTSERS      ; yes, reset serials
6716+ 3FC3 CD 3D 29             call    DISNMI          ; disable NMI vector
6717+ 3FC6 F3                   di                      ; disable INTs
6718+ 3FC7                  IFDEF LM80C64K
6719+ 3FC7 ~                    jp      ROM2RAM         ; Restart
6720+ 3FC7                  ELSE
6721+ 3FC7 C3 00 00             jp      $0000           ; Restart
6722+ 3FCA                  ENDIF
6723+ 3FCA
6724+ 3FCA
6725+ 3FCA 3E 00        INITST: ld      A,$00           ; Clear break flag
6726+ 3FCC 32 A9 80             ld      (BRKFLG),A
6727+ 3FCF C3 1C 12             jp      INIT
6728+ 3FD2
6729+ 3FD2
6730+ 3FD2 F5           TSTBIT: push    AF              ; Save bit mask
6731+ 3FD3 A0                   and     B               ; Get common bits
6732+ 3FD4 C1                   pop     BC              ; Restore bit mask
6733+ 3FD5 B8                   cp      B               ; Same bit set?
6734+ 3FD6 3E 00                ld      A,$00           ; Return 0 in A
6735+ 3FD8 C9                   ret
6736+ 3FD9
6737+ 3FD9 CD DD 19     OUTNCR: call    OUTC            ; Output character in A
6738+ 3FDC C3 E0 1E             jp      PRNTCRLF        ; Output CRLF
6739+ 3FDF
# file closed: ../include/basic/basic-1.03.asm
  79  3FDF
  80  3FDF              ; include utils
  81  3FDF                  INCLUDE "../include/utils/utils-r11.asm"
# file opened: ../include/utils/utils-r11.asm
   1+ 3FDF              ; ------------------------------------------------------------------------------
   2+ 3FDF              ; LM80C - UTILITY ROUTINES - R1.1
   3+ 3FDF              ; ------------------------------------------------------------------------------
   4+ 3FDF              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 3FDF              ; designed by Leonardo Miliani. More info at
   6+ 3FDF              ; www DOT leonardomiliani DOT com
   7+ 3FDF              ;
   8+ 3FDF              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 3FDF              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 3FDF              ;
  11+ 3FDF              ; * WKT are routines from WikiTI:
  12+ 3FDF              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 3FDF              ;
  14+ 3FDF              ; * LAC are routines from Learn@Cemetch
  15+ 3FDF              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 3FDF              ;
  17+ 3FDF              ; ------------------------------------------------------------------------------
  18+ 3FDF              ; Code Revision:
  19+ 3FDF              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 3FDF              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 3FDF              ;
  22+ 3FDF              ; ------------------------------------------------------------------------------
  23+ 3FDF
  24+ 3FDF              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  25+ 3FDF              ; values can be both signed or unsigned words
  26+ 3FDF              ; inputs: HL, DE
  27+ 3FDF              ; destroys: A,F,HL
  28+ 3FDF              ;
  29+ 3FDF              ; returns: Z=1 if HL = DE
  30+ 3FDF              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  31+ 3FDF              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  32+ 3FDF              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  33+ 3FDF              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  34+ 3FDF              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  35+ 3FDF              ; Source: ALS
  36+ 3FDF
  37+ 3FDF B7           CMP16:  or      A           ; clear CARRY
  38+ 3FE0 ED 52                sbc     HL,DE       ; subtract DE from HL
  39+ 3FE2 E0                   ret     PO          ; return if no overflow
  40+ 3FE3 7C                   ld      A,H         ; overflow - invert SIGN flag
  41+ 3FE4 1F                   rra                 ; save CARRY flag in bit 7
  42+ 3FE5 EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  43+ 3FE7 37                   scf                 ; ensure a Non-Zero result
  44+ 3FE8 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  45+ 3FE9                                          ; ZERO flag = 0 for sure
  46+ 3FE9 C9                   ret                 ; return
  47+ 3FEA
  48+ 3FEA              ; ----------------------------------------------------------------------
  49+ 3FEA
  50+ 3FEA              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  51+ 3FEA              ; signed/unsigned product
  52+ 3FEA              ; inputs: HL (multiplicand); DE (multiplier)
  53+ 3FEA              ; destroys: A,F
  54+ 3FEA              ; returns: HL (product)
  55+ 3FEA              ; Source: ALS
  56+ 3FEA
  57+ 3FEA              ; initialize partial product, bit count
  58+ 3FEA C5           MUL16:  push    BC
  59+ 3FEB 4D                   ld      C,L         ; BC = multiplier
  60+ 3FEC 44                   ld      B,H
  61+ 3FED 21 00 00             ld      HL,0        ; product = 0
  62+ 3FF0 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  63+ 3FF2                      ; shift-and-add algorithm
  64+ 3FF2                      ; if MSB of multiplier is 1, add multiplicand to partial product
  65+ 3FF2                      ; shift partial product, multiplier left 1 bit
  66+ 3FF2 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  67+ 3FF4 CB 12                rl      D
  68+ 3FF6 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  69+ 3FF8 09                   add     HL,BC       ; add multiplicand to partial product
  70+ 3FF9 29           MLP1:   add     HL,HL       ; shift partial product left
  71+ 3FFA 3D                   dec     A
  72+ 3FFB 20 F5                jr      NZ,MLP      ; continue until count = 0
  73+ 3FFD                      ; add multiplicand one last time if MSB of multiplier is 1
  74+ 3FFD B2                   or      D           ; sign flag = MSB of multiplier
  75+ 3FFE F2 02 40             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  76+ 4001 09                   add     HL,BC       ; add multiplicand to product
  77+ 4002 C1           EXMUL16:pop     BC
  78+ 4003 C9                   ret
  79+ 4004
  80+ 4004              ; ----------------------------------------------------------------------
  81+ 4004              ; absolute value of HL (same applies to other 16-bit register pairs)
  82+ 4004              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
  83+ 4004              ;
  84+ 4004              ; inputs: HL
  85+ 4004              ; destroys: A
  86+ 4004              ; operation: ABS(HL)
  87+ 4004              ; returns: HL with no sign or negated
  88+ 4004              ; Source: WKT
  89+ 4004
  90+ 4004 CB 7C        absHL:  bit     7,H
  91+ 4006 C8                   ret     Z
  92+ 4007 AF           negHL:  xor     A
  93+ 4008 95                   sub     L
  94+ 4009 6F                   ld      L,A
  95+ 400A 9F                   sbc     A,A
  96+ 400B 94                   sub     H
  97+ 400C 67                   ld      H,A
  98+ 400D C9                   ret
  99+ 400E
 100+ 400E              ; ------------------------------------------------------------------------------
 101+ 400E
 102+ 400E              ; 8/8 division
 103+ 400E              ; INPUT: D (dividend), E (divisor)
 104+ 400E              ; OPERATION: D/E
 105+ 400E              ; OUTPUT: D (quotient), A (remainder)
 106+ 400E AF           DIV_8_8:    xor     A
 107+ 400F C5                       push    BC
 108+ 4010 06 08                    ld      B,08h
 109+ 4012 CB 22        DIV_8_8LOOP:sla     D
 110+ 4014 17                       rla
 111+ 4015 BB                       cp      E
 112+ 4016 38 02                    jr      C,$+4
 113+ 4018 93                       sub     E
 114+ 4019 14                       inc     D
 115+ 401A 10 F6                    djnz    DIV_8_8LOOP
 116+ 401C C1                       pop     BC
 117+ 401D C9                       ret
 118+ 401E
 119+ 401E              ; ----------------------------------------------------------------------
 120+ 401E              ; divide a 16-bit number by an 8-bit number
 121+ 401E              ; (16/8 division)
 122+ 401E              ;
 123+ 401E              ; inputs: HL (Dividend), C (divisor)
 124+ 401E              ; destroys: A
 125+ 401E              ; OPERATION: HL/C
 126+ 401E              ; returns: HL (quotient), A (remainder)
 127+ 401E              ; source: WKT
 128+ 401E
 129+ 401E AF           DIV_16_8:   xor     A
 130+ 401F 06 10                    ld      B,16
 131+ 4021 29           DIV_16_8LP: add     HL,HL
 132+ 4022 17                       rla
 133+ 4023 38 03                    jr      C,$+5
 134+ 4025 B9                       cp      C
 135+ 4026 38 02                    jr      C,$+4
 136+ 4028 91                       sub     C
 137+ 4029 2C                       inc     L
 138+ 402A 10 F5                    djnz    DIV_16_8LP
 139+ 402C C9                       ret
 140+ 402D
 141+ 402D              ; ----------------------------------------------------------------------
 142+ 402D              ; divide a 16-bit number by a 16-bit number
 143+ 402D              ; (16/16 division)
 144+ 402D              ;
 145+ 402D              ; inputs: AC (Dividend), DE (divisor)
 146+ 402D              ; destroys: HL,A,C
 147+ 402D              ; OPERATION: AC/DE
 148+ 402D              ; returns: AC (quotient), HL (remainder)
 149+ 402D              ; source: WKT
 150+ 402D 21 00 00     DIV_16_16:  ld      HL, 0
 151+ 4030 06 10                    ld      B, 16
 152+ 4032 CB 21        DV16_16_LP: sla     C
 153+ 4034 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 154+ 4036 17                       rla
 155+ 4037 ED 6A                    adc     HL,HL
 156+ 4039 ED 52                    sbc     HL,DE
 157+ 403B 30 02                    jr      NC, $+4
 158+ 403D 19                       add     HL,DE
 159+ 403E 0D                       dec     C
 160+ 403F 10 F1                    djnz    DV16_16_LP
 161+ 4041 C9                       ret
# file closed: ../include/utils/utils-r11.asm
  82  4042
  83  4042              ; include the latest version of the font sets
  84  4042                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4042              ; ------------------------------------------------------------------------------
   2+ 4042              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4042              ; ------------------------------------------------------------------------------
   4+ 4042              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4042              ; designed by Leonardo Miliani. More info at
   6+ 4042              ; www DOT leonardomiliani DOT com
   7+ 4042              ; ------------------------------------------------------------------------------
   8+ 4042              ; Code Revision:
   9+ 4042              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4042              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4042              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4042              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4042              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4042              ; R1.5 - 20200524 - New style for char #252
  15+ 4042              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4042              ; ------------------------------------------------------------------------------
  17+ 4042              ;
  18+ 4042              ;-------------------------------------------------------------------------------
  19+ 4042              ;
  20+ 4042              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4042              ;
  22+ 4042              ;-------------------------------------------------------------------------------
  23+ 4042              ;
  24+ 4042              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4042              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4042
  27+ 4042              CHRST68 equ $
  28+ 4042 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4046 00 00 00 00
  29+ 404A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 404E 00 00 00 00
  30+ 4052 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4056 00 00 00 00
  31+ 405A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 405E 00 00 00 00
  32+ 4062 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4066 00 00 00 00
  33+ 406A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 406E 00 00 00 00
  34+ 4072 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4076 00 00 00 00
  35+ 407A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 407E 00 00 00 00
  36+ 4082 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4086 00 00 00 00
  37+ 408A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 408E 00 00 00 00
  38+ 4092 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4096 00 00 00 00
  39+ 409A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 409E 00 00 00 00
  40+ 40A2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 40A6 00 00 00 00
  41+ 40AA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 40AE 00 00 00 00
  42+ 40B2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 40B6 00 00 00 00
  43+ 40BA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 40BE 00 00 00 00
  44+ 40C2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 40C6 00 00 00 00
  45+ 40CA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 40CE 00 00 00 00
  46+ 40D2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 40D6 00 00 00 00
  47+ 40DA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 40DE 00 00 00 00
  48+ 40E2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 40E6 00 00 00 00
  49+ 40EA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 40EE 00 00 00 00
  50+ 40F2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 40F6 00 00 00 00
  51+ 40FA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 40FE 00 00 00 00
  52+ 4102 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4106 00 00 00 00
  53+ 410A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 410E 00 00 00 00
  54+ 4112 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4116 00 00 00 00
  55+ 411A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 411E 00 00 00 00
  56+ 4122 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4126 00 00 00 00
  57+ 412A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 412E 00 00 00 00
  58+ 4132 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4136 00 00 00 00
  59+ 413A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 413E 00 00 00 00
  60+ 4142 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4146 00 00 00 00
  61+ 414A 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 414E 20 00 20 00
  62+ 4152 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4156 00 00 00 00
  63+ 415A 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 415E F8 50 50 00
  64+ 4162 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4166 28 F0 20 00
  65+ 416A C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 416E 40 98 18 00
  66+ 4172 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4176 A8 90 68 00
  67+ 417A 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 417E 00 00 00 00
  68+ 4182 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4186 40 20 10 00
  69+ 418A 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 418E 10 20 40 00
  70+ 4192 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4196 A8 20 00 00
  71+ 419A 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 419E 20 20 00 00
  72+ 41A2 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 41A6 60 20 40 00
  73+ 41AA 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 41AE 00 00 00 00
  74+ 41B2 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 41B6 00 60 60 00
  75+ 41BA 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 41BE 40 80 00 00
  76+ 41C2 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 41C6 C8 88 70 00
  77+ 41CA 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 41CE 20 20 70 00
  78+ 41D2 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 41D6 20 40 F8 00
  79+ 41DA F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 41DE 08 88 70 00
  80+ 41E2 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 41E6 F8 10 10 00
  81+ 41EA F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 41EE 08 88 70 00
  82+ 41F2 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 41F6 88 88 70 00
  83+ 41FA F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 41FE 40 40 40 00
  84+ 4202 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 4206 88 88 70 00
  85+ 420A 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 420E 08 10 60 00
  86+ 4212 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 4216 30 30 00 00
  87+ 421A 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 421E 30 10 20 00
  88+ 4222 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 4226 40 20 10 00
  89+ 422A 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 422E F8 00 00 00
  90+ 4232 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 4236 10 20 40 00
  91+ 423A 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 423E 20 00 20 00
  92+ 4242 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 4246 A8 A8 70 00
  93+ 424A 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 424E F8 88 88 00
  94+ 4252 F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 4256 88 88 F0 00
  95+ 425A 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 425E 80 88 70 00
  96+ 4262 E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 4266 88 90 E0 00
  97+ 426A F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 426E 80 80 F8 00
  98+ 4272 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 4276 80 80 80 00
  99+ 427A 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 427E 88 88 78 00
 100+ 4282 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 4286 88 88 88 00
 101+ 428A 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 428E 20 20 70 00
 102+ 4292 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 4296 10 90 60 00
 103+ 429A 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 429E A0 90 88 00
 104+ 42A2 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 42A6 80 80 F8 00
 105+ 42AA 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 42AE 88 88 88 00
 106+ 42B2 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 42B6 88 88 88 00
 107+ 42BA 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 42BE 88 88 70 00
 108+ 42C2 F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 42C6 80 80 80 00
 109+ 42CA 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 42CE A8 90 68 00
 110+ 42D2 F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 42D6 A0 90 88 00
 111+ 42DA 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 42DE 08 08 F0 00
 112+ 42E2 F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 42E6 20 20 20 00
 113+ 42EA 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 42EE 88 88 70 00
 114+ 42F2 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 42F6 88 50 20 00
 115+ 42FA 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 42FE A8 A8 50 00
 116+ 4302 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 4306 50 88 88 00
 117+ 430A 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 430E 20 20 20 00
 118+ 4312 F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 4316 40 80 F8 00
 119+ 431A 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 431E 40 40 70 00
 120+ 4322 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 4326 10 08 00 00
 121+ 432A 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 432E 10 10 70 00
 122+ 4332 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 4336 00 00 00 00
 123+ 433A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 433E 00 00 00 FC
 124+ 4342 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 4346 00 00 00 00
 125+ 434A 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 434E 78 88 78 00
 126+ 4352 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 4356 C8 88 F0 00
 127+ 435A 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 435E 80 88 70 00
 128+ 4362 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 4366 98 88 78 00
 129+ 436A 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 436E F8 80 70 00
 130+ 4372 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 4376 40 40 40 00
 131+ 437A 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 437E 78 08 70 00
 132+ 4382 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 4386 88 88 88 00
 133+ 438A 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 438E 20 20 20 00
 134+ 4392 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 4396 08 88 70 00
 135+ 439A 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 439E C0 A0 90 00
 136+ 43A2 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 43A6 20 20 70 00
 137+ 43AA 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 43AE A8 88 88 00
 138+ 43B2 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 43B6 88 88 88 00
 139+ 43BA 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 43BE 88 88 70 00
 140+ 43C2 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 43C6 F0 80 80 00
 141+ 43CA 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 43CE 78 08 08 00
 142+ 43D2 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 43D6 80 80 80 00
 143+ 43DA 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 43DE 70 08 F0 00
 144+ 43E2 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 43E6 40 48 30 00
 145+ 43EA 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 43EE 88 98 68 00
 146+ 43F2 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 43F6 88 50 20 00
 147+ 43FA 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 43FE A8 A8 50 00
 148+ 4402 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 4406 20 50 88 00
 149+ 440A 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 440E 68 08 70 00
 150+ 4412 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 4416 20 40 F8 00
 151+ 441A 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 441E 20 20 10 00
 152+ 4422 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 4426 20 20 20 00
 153+ 442A 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 442E 10 10 20 00
 154+ 4432 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 4436 00 00 00 00
 155+ 443A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 443E 00 00 00 00
 156+ 4442 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 4446 B4 84 78 00
 157+ 444A 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 444E B4 CC 78 00
 158+ 4452 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 4456 FC 78 30 00
 159+ 445A 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 445E F8 70 20 00
 160+ 4462 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 4466 A8 20 70 00
 161+ 446A 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 446E A8 20 70 00
 162+ 4472 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 4476 FC 30 30 30
 163+ 447A 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 447E 3C 30 30 30
 164+ 4482 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 4486 F0 30 30 30
 165+ 448A 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 448E F0 00 00 00
 166+ 4492 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 4496 3C 00 00 00
 167+ 449A 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 449E FC 00 00 00
 168+ 44A2 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 44A6 3C 30 30 30
 169+ 44AA 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 44AE FC 30 30 30
 170+ 44B2 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 44B6 F0 30 30 30
 171+ 44BA 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 44BE FC 00 00 00
 172+ 44C2 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 44C6 30 30 30 30
 173+ 44CA 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 44CE 70 60 E0 C0
 174+ 44D2 C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 44D6 38 18 1C 0C
 175+ 44DA CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 44DE 30 78 CC CC
 176+ 44E2 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 44E6 20 20 20 20
 177+ 44EA 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 44EE 20 20 20 20
 178+ 44F2 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 44F6 20 20 20 20
 179+ 44FA 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 44FE 00 00 00 00
 180+ 4502 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 4506 00 00 00 00
 181+ 450A 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 450E 00 00 00 00
 182+ 4512 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 4516 20 20 20 20
 183+ 451A 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 451E 20 20 20 20
 184+ 4522 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 4526 20 20 20 20
 185+ 452A 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 452E 00 00 00 00
 186+ 4532 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 4536 20 20 20 20
 187+ 453A 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 453E 20 40 40 80
 188+ 4542 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 4546 10 08 08 04
 189+ 454A 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 454E 30 48 48 84
 190+ 4552 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 4556 00 00 FC FC
 191+ 455A 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 455E FC FC FC FC
 192+ 4562 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 4566 FC FC FC FC
 193+ 456A FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 456E 00 00 00 00
 194+ 4572 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 4576 00 00 00 00
 195+ 457A FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 457E FC FC 00 00
 196+ 4582 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 4586 80 80 80 80
 197+ 458A E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 458E E0 E0 E0 E0
 198+ 4592 F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 4596 F8 F8 F8 F8
 199+ 459A 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 459E 04 04 04 04
 200+ 45A2 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 45A6 1C 1C 1C 1C
 201+ 45AA 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 45AE 7C 7C 7C 7C
 202+ 45B2 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 45B6 84 84 84 FC
 203+ 45BA 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 45BE E0 E0 E0 E0
 204+ 45C2 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 45C6 1C 1C 1C 1C
 205+ 45CA 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 45CE 00 00 00 00
 206+ 45D2 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 45D6 00 00 00 00
 207+ 45DA E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 45DE 1C 1C 1C 1C
 208+ 45E2 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 45E6 E0 E0 E0 E0
 209+ 45EA 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 45EE 78 78 78 78
 210+ 45F2 CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 45F6 CC CC CC CC
 211+ 45FA FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 45FE 00 00 FC FC
 212+ 4602 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 4606 FC FC 00 00
 213+ 460A 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 460E 30 30 CC CC
 214+ 4612 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 4616 54 A8 54 A8
 215+ 461A 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 461E 64 30 98 CC
 216+ 4622 CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 4626 CC 64 30 98
 217+ 462A 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 462E 30 98 CC 64
 218+ 4632 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 4636 64 CC 98 30
 219+ 463A 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 463E 20 00 F8 00
 220+ 4642 C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 4646 C0 00 F8 00
 221+ 464A 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 464E 18 00 F8 00
 222+ 4652 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 4656 A0 60 20 00
 223+ 465A 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 465E 00 00 00 00
 224+ 4662 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 4666 70 00 00 00
 225+ 466A 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 466E 00 FC 00 00
 226+ 4672 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 4676 54 A8 00 00
 227+ 467A 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 467E E0 C0 80 00
 228+ 4682 FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 4686 00 00 00 00
 229+ 468A 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 468E 1C 0C 04 00
 230+ 4692 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 4696 00 30 78 FC
 231+ 469A 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 469E 20 20 20 00
 232+ 46A2 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 46A6 40 80 00 00
 233+ 46AA 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 46AE 18 10 00 00
 234+ 46B2 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 46B6 24 1C 1C 3C
 235+ 46BA 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 46BE 20 F8 70 20
 236+ 46C2 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 46C6 90 E0 E0 F0
 237+ 46CA 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 46CE 60 20 00 00
 238+ 46D2 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 46D6 08 04 00 00
 239+ 46DA 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 46DE F0 44 38 00
 240+ 46E2 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 46E6 28 28 28 00
 241+ 46EA 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 46EE 1C 20 20 20
 242+ 46F2 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 46F6 E0 10 10 10
 243+ 46FA 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 46FE 00 00 00 00
 244+ 4702 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 4706 00 00 00 00
 245+ 470A 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 470E 3C 30 30 30
 246+ 4712 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 4716 F0 30 30 30
 247+ 471A 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 471E E0 00 00 00
 248+ 4722 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 4726 1C 00 00 00
 249+ 472A 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 472E 48 30 00 00
 250+ 4732 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 4736 78 30 00 00
 251+ 473A 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 473E FC 78 30 00
 252+ 4742 FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 4746 E0 C0 80 80
 253+ 474A FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 474E 1C 0C 04 04
 254+ 4752 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 4756 1C 3C 7C FC
 255+ 475A 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 475E E0 F0 F8 FC
 256+ 4762 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 4766 F0 E0 C0 00
 257+ 476A 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 476E 78 CC 00 00
 258+ 4772 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 4776 70 20 70 20
 259+ 477A 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 477E 90 90 60 00
 260+ 4782 F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 4786 84 84 84 FC
 261+ 478A 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 478E 84 84 84 FC
 262+ 4792 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 4796 48 48 48 78
 263+ 479A FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 479E FC B4 B4 FC
 264+ 47A2 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 47A6 D4 D4 00 00
 265+ 47AA 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 47AE 78 48 48 48
 266+ 47B2 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 47B6 B4 84 78 00
 267+ 47BA 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 47BE A8 80 00 00
 268+ 47C2 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 47C6 A0 88 70 00
 269+ 47CA 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 47CE 84 84 FC 00
 270+ 47D2 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 47D6 F0 F0 F0 00
 271+ 47DA 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 47DE F0 F0 F0 00
 272+ 47E2 FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 47E6 94 94 84 FC
 273+ 47EA 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 47EE 68 70 80 00
 274+ 47F2 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 47F6 6C 18 08 00
 275+ 47FA 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 47FE 20 60 E0 40
 276+ 4802 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 4806 E4 68 20 00
 277+ 480A 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 480E E0 60 20 00
 278+ 4812 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 4816 F8 FC F0 90
 279+ 481A 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 481E B4 84 78 00
 280+ 4822 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 4826 40 48 B0 00
 281+ 482A 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 482E 48 3C 84 78
 282+ 4832 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 4836 F8 00 20 00
 283+ 483A FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 483E FC FC FC FC
 284+ 4842                      ; here ends the ASCII table
 285+ 4842
# file closed: ../include/vdp/6x8fonts-r16.asm
  85  4842                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 4842              ; ------------------------------------------------------------------------------
   2+ 4842              ; LM80C - 8x8 CHARSET - R1.8
   3+ 4842              ; ------------------------------------------------------------------------------
   4+ 4842              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4842              ; designed by Leonardo Miliani. More info at
   6+ 4842              ; www DOT leonardomiliani DOT com
   7+ 4842              ; ------------------------------------------------------------------------------
   8+ 4842              ; Code Revision:
   9+ 4842              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 4842              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 4842              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 4842              ; R1.3 - 20191015 - More graphic chars
  13+ 4842              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 4842              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 4842              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 4842              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 4842              ; R1.8 - 20200524 - New style for char #252
  18+ 4842              ; ------------------------------------------------------------------------------
  19+ 4842              ;
  20+ 4842              ;-------------------------------------------------------------------------------
  21+ 4842              ;
  22+ 4842              ;               8 x 8    C  H  A  R  S  E  T
  23+ 4842              ;
  24+ 4842              ;-------------------------------------------------------------------------------
  25+ 4842              ;
  26+ 4842              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 4842
  28+ 4842              CHRST88 equ $
  29+ 4842 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 4846 00 00 00 00
  30+ 484A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 484E 00 00 00 00
  31+ 4852 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 4856 00 00 00 00
  32+ 485A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 485E 00 00 00 00
  33+ 4862 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 4866 00 00 00 00
  34+ 486A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 486E 00 00 00 00
  35+ 4872 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 4876 00 00 00 00
  36+ 487A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 487E 00 00 00 00
  37+ 4882 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 4886 00 00 00 00
  38+ 488A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 488E 00 00 00 00
  39+ 4892 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 4896 00 00 00 00
  40+ 489A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 489E 00 00 00 00
  41+ 48A2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 48A6 00 00 00 00
  42+ 48AA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 48AE 00 00 00 00
  43+ 48B2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 48B6 00 00 00 00
  44+ 48BA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 48BE 00 00 00 00
  45+ 48C2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 48C6 00 00 00 00
  46+ 48CA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 48CE 00 00 00 00
  47+ 48D2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 48D6 00 00 00 00
  48+ 48DA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 48DE 00 00 00 00
  49+ 48E2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 48E6 00 00 00 00
  50+ 48EA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 48EE 00 00 00 00
  51+ 48F2 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 48F6 00 00 00 00
  52+ 48FA 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 48FE 00 00 00 00
  53+ 4902 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 4906 00 00 00 00
  54+ 490A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 490E 00 00 00 00
  55+ 4912 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 4916 00 00 00 00
  56+ 491A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 491E 00 00 00 00
  57+ 4922 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 4926 00 00 00 00
  58+ 492A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 492E 00 00 00 00
  59+ 4932 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 4936 00 00 00 00
  60+ 493A 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 493E 00 00 00 00
  61+ 4942 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 4946 00 00 00 00
  62+ 494A 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 494E 10 00 10 00
  63+ 4952 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 4956 00 00 00 00
  64+ 495A 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 495E FE 28 28 00
  65+ 4962 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 4966 14 78 10 00
  66+ 496A 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 496E 10 26 46 00
  67+ 4972 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 4976 4A 44 3A 00
  68+ 497A 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 497E 00 00 00 00
  69+ 4982 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 4986 20 10 08 00
  70+ 498A 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 498E 08 10 20 00
  71+ 4992 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 4996 38 54 10 00
  72+ 499A 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 499E 10 10 00 00
  73+ 49A2 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 49A6 00 18 08 10
  74+ 49AA 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 49AE 00 00 00 00
  75+ 49B2 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 49B6 00 18 18 00
  76+ 49BA 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 49BE 10 20 40 00
  77+ 49C2 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 49C6 64 44 38 00
  78+ 49CA 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 49CE 10 10 7C 00
  79+ 49D2 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 49D6 10 20 7C 00
  80+ 49DA 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 49DE 04 44 38 00
  81+ 49E2 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 49E6 7C 08 08 00
  82+ 49EA 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 49EE 04 44 38 00
  83+ 49F2 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 49F6 44 44 38 00
  84+ 49FA 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 49FE 20 20 20 00
  85+ 4A02 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 4A06 44 44 38 00
  86+ 4A0A 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 4A0E 04 44 38 00
  87+ 4A12 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 4A16 18 18 00 00
  88+ 4A1A 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 4A1E 18 08 10 00
  89+ 4A22 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 4A26 10 08 04 00
  90+ 4A2A 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 4A2E 7E 00 00 00
  91+ 4A32 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 4A36 08 10 20 00
  92+ 4A3A 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 4A3E 10 00 10 00
  93+ 4A42 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 4A46 B8 80 84 78
  94+ 4A4A 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 4A4E 7C 44 44 00
  95+ 4A52 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 4A56 44 44 78 00
  96+ 4A5A 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 4A5E 40 44 38 00
  97+ 4A62 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 4A66 44 44 78 00
  98+ 4A6A 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 4A6E 40 40 7C 00
  99+ 4A72 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 4A76 40 40 40 00
 100+ 4A7A 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 4A7E 5C 44 38 00
 101+ 4A82 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 4A86 44 44 44 00
 102+ 4A8A 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 4A8E 10 10 38 00
 103+ 4A92 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 4A96 04 44 38 00
 104+ 4A9A 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 4A9E 48 44 44 00
 105+ 4AA2 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 4AA6 40 40 7C 00
 106+ 4AAA 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 4AAE 42 42 42 00
 107+ 4AB2 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 4AB6 44 44 44 00
 108+ 4ABA 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 4ABE 44 44 38 00
 109+ 4AC2 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 4AC6 78 40 40 00
 110+ 4ACA 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 4ACE 54 48 34 00
 111+ 4AD2 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 4AD6 78 48 44 00
 112+ 4ADA 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 4ADE 04 04 78 00
 113+ 4AE2 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 4AE6 10 10 10 00
 114+ 4AEA 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 4AEE 44 44 38 00
 115+ 4AF2 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 4AF6 44 28 10 00
 116+ 4AFA 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 4AFE 5A 5A 24 00
 117+ 4B02 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 4B06 28 44 44 00
 118+ 4B0A 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 4B0E 10 10 10 00
 119+ 4B12 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 4B16 20 40 7C 00
 120+ 4B1A 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 4B1E 20 20 38 00
 121+ 4B22 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 4B26 08 04 02 00
 122+ 4B2A 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 4B2E 08 08 38 00
 123+ 4B32 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 4B36 00 00 00 00
 124+ 4B3A 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 4B3E 00 00 7E 00
 125+ 4B42 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 4B46 00 00 00 00
 126+ 4B4A 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 4B4E 3C 44 3C 00
 127+ 4B52 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 4B56 44 44 78 00
 128+ 4B5A 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 4B5E 40 44 38 00
 129+ 4B62 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 4B66 44 44 3C 00
 130+ 4B6A 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 4B6E 7C 40 38 00
 131+ 4B72 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 4B76 20 20 20 00
 132+ 4B7A 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 4B7E 44 3C 04 38
 133+ 4B82 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 4B86 44 44 44 00
 134+ 4B8A 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 4B8E 10 10 10 00
 135+ 4B92 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 4B96 08 08 48 30
 136+ 4B9A 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 4B9E 60 50 48 00
 137+ 4BA2 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 4BA6 10 10 38 00
 138+ 4BAA 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 4BAE 4A 42 42 00
 139+ 4BB2 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 4BB6 44 44 44 00
 140+ 4BBA 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 4BBE 44 44 38 00
 141+ 4BC2 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 4BC6 44 78 40 40
 142+ 4BCA 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 4BCE 44 3C 04 04
 143+ 4BD2 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 4BD6 40 40 40 00
 144+ 4BDA 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 4BDE 38 04 78 00
 145+ 4BE2 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 4BE6 20 24 18 00
 146+ 4BEA 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 4BEE 44 4C 34 00
 147+ 4BF2 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 4BF6 44 28 10 00
 148+ 4BFA 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 4BFE 54 54 28 00
 149+ 4C02 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 4C06 10 28 44 00
 150+ 4C0A 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 4C0E 4C 34 04 38
 151+ 4C12 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 4C16 10 20 7C 00
 152+ 4C1A 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 4C1E 20 20 18 00
 153+ 4C22 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 4C26 10 10 10 00
 154+ 4C2A 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 4C2E 08 08 30 00
 155+ 4C32 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 4C36 00 00 00 00
 156+ 4C3A 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 4C3E 00 00 00 00
 157+ 4C42 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 4C46 A5 99 42 3C
 158+ 4C4A 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 4C4E DB E7 7E 3C
 159+ 4C52 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 4C56 7C 38 10 00
 160+ 4C5A 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 4C5E 7C 38 10 00
 161+ 4C62 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 4C66 54 10 7C 00
 162+ 4C6A 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 4C6E D6 10 7C 00
 163+ 4C72 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 4C76 FF 18 18 18
 164+ 4C7A 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 4C7E 1F 18 18 18
 165+ 4C82 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 4C86 F8 18 18 18
 166+ 4C8A 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 4C8E F8 00 00 00
 167+ 4C92 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 4C96 1F 00 00 00
 168+ 4C9A 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 4C9E FF 00 00 00
 169+ 4CA2 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 4CA6 1F 18 18 18
 170+ 4CAA 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 4CAE FF 18 18 18
 171+ 4CB2 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 4CB6 F8 18 18 18
 172+ 4CBA 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 4CBE FF 00 00 00
 173+ 4CC2 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 4CC6 18 18 18 18
 174+ 4CCA 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 4CCE 38 70 E0 C0
 175+ 4CD2 C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 4CD6 1C 0E 07 03
 176+ 4CDA C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 4CDE 3C 7E E7 C3
 177+ 4CE2 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 4CE6 10 10 10 10
 178+ 4CEA 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 4CEE 10 10 10 10
 179+ 4CF2 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 4CF6 10 10 10 10
 180+ 4CFA 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 4CFE 00 00 00 00
 181+ 4D02 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 4D06 00 00 00 00
 182+ 4D0A 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 4D0E 00 00 00 00
 183+ 4D12 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 4D16 10 10 10 10
 184+ 4D1A 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 4D1E 10 10 10 10
 185+ 4D22 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 4D26 10 10 10 10
 186+ 4D2A 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 4D2E 00 00 00 00
 187+ 4D32 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 4D36 10 10 10 10
 188+ 4D3A 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 4D3E 10 20 40 80
 189+ 4D42 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 4D46 08 04 02 01
 190+ 4D4A 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 4D4E 18 24 42 81
 191+ 4D52 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 4D56 00 00 FF FF
 192+ 4D5A 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 4D5E FF FF FF FF
 193+ 4D62 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 4D66 FF FF FF FF
 194+ 4D6A FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 4D6E 00 00 00 00
 195+ 4D72 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 4D76 00 00 00 00
 196+ 4D7A FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 4D7E FF FF 00 00
 197+ 4D82 C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 4D86 C0 C0 C0 C0
 198+ 4D8A F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 4D8E F0 F0 F0 F0
 199+ 4D92 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 4D96 FC FC FC FC
 200+ 4D9A 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 4D9E 03 03 03 03
 201+ 4DA2 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 4DA6 0F 0F 0F 0F
 202+ 4DAA 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 4DAE 3F 3F 3F 3F
 203+ 4DB2 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 4DB6 81 81 81 FF
 204+ 4DBA 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 4DBE F0 F0 F0 F0
 205+ 4DC2 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 4DC6 0F 0F 0F 0F
 206+ 4DCA 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 4DCE 00 00 00 00
 207+ 4DD2 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 4DD6 00 00 00 00
 208+ 4DDA F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 4DDE 0F 0F 0F 0F
 209+ 4DE2 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 4DE6 F0 F0 F0 F0
 210+ 4DEA 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 4DEE 3C 3C 3C 3C
 211+ 4DF2 C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 4DF6 C3 C3 C3 C3
 212+ 4DFA FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 4DFE 00 00 FF FF
 213+ 4E02 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 4E06 FF FF 00 00
 214+ 4E0A 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 4E0E 33 33 CC CC
 215+ 4E12 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 4E16 55 AA 55 AA
 216+ 4E1A 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 4E1E 66 33 99 CC
 217+ 4E22 CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 4E26 CC 99 33 66
 218+ 4E2A 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 4E2E 33 99 CC 66
 219+ 4E32 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 4E36 66 CC 99 33
 220+ 4E3A 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 4E3E 10 00 7C 00
 221+ 4E42 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 4E46 60 00 7E 00
 222+ 4E4A 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 4E4E 06 00 7E 00
 223+ 4E52 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 4E56 A0 60 20 00
 224+ 4E5A 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 4E5E 00 00 00 00
 225+ 4E62 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 4E66 70 00 00 00
 226+ 4E6A 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 4E6E 00 7E 00 00
 227+ 4E72 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 4E76 54 A8 00 00
 228+ 4E7A 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 4E7E E0 C0 80 00
 229+ 4E82 FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 4E86 00 00 00 00
 230+ 4E8A 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 4E8E 07 03 01 00
 231+ 4E92 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 4E96 10 38 7C FE
 232+ 4E9A 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 4E9E 10 10 10 00
 233+ 4EA2 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 4EA6 20 40 00 00
 234+ 4EAA 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 4EAE 0C 08 00 00
 235+ 4EB2 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 4EB6 0E 0E 1E 00
 236+ 4EBA 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 4EBE 7C 38 10 00
 237+ 4EC2 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 4EC6 E0 E0 F0 00
 238+ 4ECA 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 4ECE 60 20 00 00
 239+ 4ED2 F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 4ED6 08 04 00 00
 240+ 4EDA 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 4EDE F0 44 38 00
 241+ 4EE2 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 4EE6 28 28 28 00
 242+ 4EEA 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 4EEE 08 10 10 10
 243+ 4EF2 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 4EF6 20 10 10 10
 244+ 4EFA 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 4EFE 00 00 00 00
 245+ 4F02 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 4F06 00 00 00 00
 246+ 4F0A 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 4F0E 0F 1C 18 18
 247+ 4F12 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 4F16 F0 38 18 18
 248+ 4F1A 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 4F1E E0 00 00 00
 249+ 4F22 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 4F26 07 00 00 00
 250+ 4F2A 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 4F2E 42 42 3C 00
 251+ 4F32 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 4F36 7E 7E 3C 00
 252+ 4F3A 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 4F3E 7E 3C 18 00
 253+ 4F42 FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 4F46 F0 E0 C0 80
 254+ 4F4A FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 4F4E 0F 07 03 01
 255+ 4F52 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 4F56 1F 3F 7F FF
 256+ 4F5A 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 4F5E F8 FC FE FF
 257+ 4F62 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 4F66 78 70 60 00
 258+ 4F6A 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 4F6E 3C 66 00 00
 259+ 4F72 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 4F76 38 10 38 10
 260+ 4F7A 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 4F7E 44 44 38 00
 261+ 4F82 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 4F86 42 42 42 7E
 262+ 4F8A 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 4F8E 81 81 81 FF
 263+ 4F92 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 4F96 54 54 54 7C
 264+ 4F9A FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 4F9E BD AD AD FF
 265+ 4FA2 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 4FA6 AC AA EA 00
 266+ 4FAA 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 4FAE 7E 66 66 66
 267+ 4FB2 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 4FB6 9D 81 42 3C
 268+ 4FBA 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 4FBE A5 A2 00 00
 269+ 4FC2 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 4FC6 48 42 42 3C
 270+ 4FCA 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 4FCE 99 81 FF 00
 271+ 4FD2 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 4FD6 7C 7C 7C 00
 272+ 4FDA 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 4FDE F8 F8 F8 00
 273+ 4FE2 FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 4FE6 A5 A5 81 FF
 274+ 4FEA 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 4FEE 52 24 58 80
 275+ 4FF2 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 4FF6 81 76 0C 04
 276+ 4FFA 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 4FFE 08 18 38 10
 277+ 5002 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5006 F5 F5 31 12
 278+ 500A 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 500E F0 F0 30 10
 279+ 5012 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5016 7C 7E 78 48
 280+ 501A 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 501E A1 99 42 3C
 281+ 5022 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5026 20 22 5C 00
 282+ 502A 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 502E 24 1E 42 3C
 283+ 5032 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5036 7C 00 10 00
 284+ 503A FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 503E FF FF FF FF
 285+ 5042
# file closed: ../include/vdp/8x8fonts-r18.asm
  86  5042                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5042              ; ------------------------------------------------------------------------------
   2+ 5042              ; LM80C - LOGO CHARSET - R1.1
   3+ 5042              ; ------------------------------------------------------------------------------
   4+ 5042              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5042              ; designed by Leonardo Miliani. More info at
   6+ 5042              ; www DOT leonardomiliani DOT com
   7+ 5042              ; ------------------------------------------------------------------------------
   8+ 5042              ; Code Revision:
   9+ 5042              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5042              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5042              ; ------------------------------------------------------------------------------
  12+ 5042
  13+ 5042              LOGOFONT:   equ $
  14+ 5042 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5046 00 00 00 00
  15+ 504A FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 504E FF FF FF FF
  16+ 5052 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5056 00 00 00 00
  17+ 505A 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 505E 0F 0F 0F 0F
  18+ 5062 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5066 FF FF FF FF
  19+ 506A F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 506E F0 F0 F0 F0
  20+ 5072 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5076 0F 0F 0F 0F
  21+ 507A 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 507E F0 F0 F0 F0
  22+ 5082 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5086 00 00 00 00
  23+ 508A 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 508E 00 00 00 00
  24+ 5092 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5096 FF 07 03 00
  25+ 509A 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 509E FF E0 C0 00
  26+ 50A2 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 50A6 19 1F 18 18
  27+ 50AA 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 50AE 98 F8 18 18
  28+ 50B2 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 50B6 0F 00 00 00
  29+ 50BA 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 50BE 1F 1C 18 18
  30+ 50C2 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 50C6 F8 38 18 18
  31+ 50CA 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 50CE F0 00 00 00
  32+ 50D2 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 50D6 FF 00 00 00
  33+ 50DA 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 50DE FF FF FF FF
  34+ 50E2 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 50E6 FF FF FF FF
  35+ 50EA FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 50EE F0 F0 F0 F0
  36+ 50F2 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 50F6 0F 0F 0F 0F
  37+ 50FA 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 50FE 30 00 00 00
  38+ 5102
# file closed: ../include/vdp/logo-fonts.asm
  87  5102
  88  5102              ; include workspace equates
  89  5102                  INCLUDE "../include/workspace/workspace-r1.0.asm"
# file opened: ../include/workspace/workspace-r1.0.asm
   1+ 5102              ; ------------------------------------------------------------------------------
   2+ 5102              ; LM80C 64K - WORKSPACE EQUATES - R1.0
   3+ 5102              ; ------------------------------------------------------------------------------
   4+ 5102              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5102              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5102              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5102              ; kind of warranty: you can use them at your own risk.
   8+ 5102              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5102              ; maintain the copyright notices, include this advice and the note to the
  10+ 5102              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5102              ; redistribuite them.
  12+ 5102              ; https://www.leonardomiliani.com
  13+ 5102              ;
  14+ 5102              ; Please support me by visiting the following links:
  15+ 5102              ; Main project page: https://www.leonardomiliani.com
  16+ 5102              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5102              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5102              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5102              ; ------------------------------------------------------------------------------
  20+ 5102
  21+ 5102              ; set starting of RAM based on computer model
  22+ 5102                  IFDEF LM80C64K
  23+ 5102 ~            SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5102                  ELSE
  25+ 5102              SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5102                  ENDIF
  27+ 5102
  28+ 5102              ;-------------------------------------------------------------------------------
  29+ 5102              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5102              serRdPtr        equ     serInPtr+2
  31+ 5102              serBufUsed      equ     serRdPtr+2
  32+ 5102              basicStarted    equ     serBufUsed+1
  33+ 5102              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5102              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5102
  36+ 5102              ; BASIC WORK SPACE LOCATIONS
  37+ 5102              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5102              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5102              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5102              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5102              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5102              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5102              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5102              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5102              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5102              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5102              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5102              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5102              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5102              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5102              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5102              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5102              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5102              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5102              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5102              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5102              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5102              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5102              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5102              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5102              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5102              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5102              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5102              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5102              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5102              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5102              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5102              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5102              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5102              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5102              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5102              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5102              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5102              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5102              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5102              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5102              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location usable by BASIC
  78+ 5102              TMSTPT          equ     LSTRAM+$02      ; (2) Temporary string pointer
  79+ 5102              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  80+ 5102              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  81+ 5102              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  82+ 5102              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  83+ 5102              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  84+ 5102              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  85+ 5102              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  86+ 5102              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  87+ 5102              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  88+ 5102              BRKLIN          equ     READFG+$01      ; (2) Line of break
  89+ 5102              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  90+ 5102              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  91+ 5102              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  92+ 5102              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  93+ 5102              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  94+ 5102              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  95+ 5102              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
  96+ 5102              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
  97+ 5102              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
  98+ 5102              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
  99+ 5102              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 100+ 5102              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 101+ 5102              SCR_NAM_TB      equ     SCR_MODE+$02    ; (2) video name table address
 102+ 5102              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 103+ 5102              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 104+ 5102              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 105+ 5102              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 106+ 5102              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 107+ 5102              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 108+ 5102              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 109+ 5102              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 110+ 5102              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 111+ 5102              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 112+ 5102              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 113+ 5102              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 114+ 5102              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 115+ 5102              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 116+ 5102              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 117+ 5102              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 118+ 5102              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 119+ 5102              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 120+ 5102              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 121+ 5102                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 122+ 5102              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 123+ 5102              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 124+ 5102              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 125+ 5102              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 126+ 5102              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 127+ 5102              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 128+ 5102              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 129+ 5102              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 130+ 5102              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 131+ 5102              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 132+ 5102              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 133+ 5102              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 134+ 5102                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 135+ 5102              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 136+ 5102              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 137+ 5102              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 138+ 5102              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 139+ 5102              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 140+ 5102                                                      ; from here there are the RAM locations that
 141+ 5102                                                      ; are saved during SAVE
 142+ 5102              PROGND          equ     DOS_EN+$01      ; (2) End of program
 143+ 5102              VAREND          equ     PROGND+$02      ; (2) End of variables
 144+ 5102              ARREND          equ     VAREND+$02      ; (2) End of arrays
 145+ 5102              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 146+ 5102              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 147+ 5102              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 148+ 5102              FPREG           equ     FNARG+$04       ; (3) Floating point register
 149+ 5102              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 150+ 5102              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 151+ 5102              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 152+ 5102              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 153+ 5102              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 154+ 5102              STLOOK          equ     PROGST+$64      ; Start of memory test
 155+ 5102
# file closed: ../include/workspace/workspace-r1.0.asm
  90  5102
  91  5102              ; END OF ASSEMBLY SOURCE
  92  5102
  93  5102
  94  5102              ;-------------------------------------------------------------------------------
  95  5102
# file closed: LM80C-firmware-r3.18.asm

Value    Label
------ - -----------------------------------------------------------
0x8216   CHCSNDDTN
0x8214   CHBSNDDTN
0x80A8   NMIFLG
0x4032   DV16_16_LP
0x402D X DIV_16_16
0x4021   DIV_16_8LP
0x4012   DIV_8_8LOOP
0x4002   EXMUL16
0x3FF9   MLP1
0x3FF2   MLP
0x3FD2 X TSTBIT
0x3F92   BINIT
0x3FA5   CHKBIN
0x3F74   BITOUT2
0x3F70   BITOUT
0x3F62   ZEROSUP
0x3F5C X BIN2
0x3F44   NOSUB7
0x3F48   HEXIT
0x3F24   HEXLP
0x3F29   HEXLP1
0x3F51   HXERR
0x3F31   GETHEX
0x3F14   ADD301
0x3F04   ADD30
0x3EEE   HEX4
0x3EEC   HEX3
0x3EDD   HEX1
0x3EDF   HEX2
0x3E89   PRTEND
0x3E7D   PRTK1
0x3E7A   OPNQT1
0x3E62   CLSQT1
0x3EBE   CHKEY5
0x3E4A   PTCHR1
0x3EBB   CHKEY4
0x3E52   CLSQT
0x3E15   PRTK3
0x3E2D   PRTCHR
0x3E64   OPNQT
0x3E18   CNTLTK
0x3E03   LDKEY
0x3EB2   CHKEY2
0x3E7C   PRTCKEY
0x3EAD   CHKEY1
0x3DEC X PRTK2
0x3DEA   PRTK4
0x3DD6   CPKYEND
0x3DCE   CPKEY1
0x3DC6   CPKEY3
0x3DBF   CPKEY2
0x3DAF   CPKEY
0x3DA1   DECLN1
0x3E8B   SETREP
0x3D71   KEYCH
0x3DD8   LSTKEYS
0x3D4F   HLPERR
0x3D2D   DIRMOD
0x3CF4   EXNRM
0x3CE6   ENCHB
0x3CBB   SRLCNT
0x3CA3   STRPAR
0x3C86   SETPAR2
0x3C77   BITS8
0x3C6C   BITS7
0x3C7B   SETPAR
0x3C62   BITS6
0x3C3F   SET_CTC
0x3D11   CTC_CFG
0x3D1C   SCERR1
0x3C2E   SET_PT
0x3C15   CKBPS
0x3CFB   SUP_BPS
0x3C09   SETSER
0x3BFC   DEFSER
0x3BB1   CNTSER3
0x3B94   CNTRX2
0x3B9F   CNTSER2
0x3B61   SERLED
0x3B5B   SRPT2
0x3B38   RPTRSSR
0x3B2B   RSTSERS
0x3B65   CNTSER
0x3B27   CHKZSER
0x3B18   SERVAR
0x3D20   SCERR
0x81EC   SIOBFR
0x81EB   STPBT
0x81EA   PARBT
0x81E9   DATABT
0x81E7   BPS
0x81E6   PRTNUM
0x3AD2   RPTCVB2
0x3AC9   RPTCVB1
0x3ABC   CNTVALY
0x3A8C   CNTCL7
0x3A68   CNTCL6
0x3A44   CNTCL5
0x3A22   CNTCL4
0x39FC   CNTCL3
0x39D8   CNTCL2
0x3AB6   VALIDY
0x39B4   CNTCL1
0x3AB1   VALIDX
0x3985   PLTCRL
0x3976   DLSZ
0x398E   ENDCRL
0x3949   RPTCL1
0x3936   RPTCRL
0x3992   DRWCRL
0x81F0   DC
0x81EE   YI
0x81EC   XI
0x81EA   RADIUS
0x81E8   YC
0x81E6   XC
0x38C5   DXGR
0x38EE   ENDDRAW
0x3895   CNTDRW
0x3879   RPTDRW
0x3876   STRE2
0x3869   ER2
0x4007   negHL
0x3846   Y1GR
0x381C   X1GR
0x4004   absHL
0x3AC1   CLRVDBF
0x81F2   DX
0x81F0   SY
0x81EE   SX
0x81EC   E2
0x81EA   ER
0x81E8   Y2
0x81E6   X2
0x81E0   Y1
0x81DE   X1
0x400E   DIV_8_8
0x3789   PXLSET
0x3765   CNTPLT1
0x3785   NOGD
0x3791   XY2HL
0x3700   PNTEND
0x370A   CTPOINT
0x36B7   PAINT5
0x3686   PAINT3
0x36C7   CHECKPY
0x3673   PAINT2
0x3744   CNTPLOT
0x3643   MNPAINT
0x3640   PAINT1
0x363F   PAINT11
0x36C6   CHECKPA
0x3631   PAINT0
0x36BE   EXITPAI
0x3624   NXTLOOP
0x36C2   EXITPA2
0x371E   PNTRTN
0x3AD9   CLRPRM
0x81EA   ORGSP
0x81E9 X SPB
0x81E8 X SPA
0x81E6   PNT
0x35B6   GPCPCH1
0x35AB X GPCPCHR
0x3591   GPNTCO1
0x3587 X GPNTCOL
0x357C   RPGPNT
0x3567   GPNT
0x3552   CNTGPT2
0x35D3   CKCOL
0x81EC   TMPHL
0x81EA   NUMCHR
0x81E8   CHRPNT
0x81E6   TMPADR
0x81DE   MIXCOL
0x81E0   TMPCLR
0x81E4   GY
0x81E2   GX
0x3AF2   GMERR
0x34EC   CHKG2M
0x34E6   CHKCLR0
0x34B1   RPTLDCL
0x34A7   LOADCLR
0x34BC   SETBRCL
0x34D5   MIXCLRS
0x34A0   CLREX2
0x3497   CLRG2
0x348E   CLRG1
0x3484   CLRTXT
0x3487   CLRMC
0x34E2   CHKCLR1
0x33DC   CKMAGN
0x3429   CHKSCAR
0x33D1 X SETVDP
0x33EA   SCVDP
0x33AD   RPTPS
0x33A8 X DIR_PAU
0x3382 X RECWRD
0x335E X ARET
0x3339   ATNTAB
0x332F   ATN1
0x32E8   SINTAB
0x32CC   SIN1
0x32E4   QUARTR
0x32E0   HALFPI
0x3279   RND2
0x325D   RND1
0x328A   RNDTAB
0x809B   LSTRND
0x3282   RESEED
0x8078   SEED
0x3209   SUMLP
0x3200   SMSER1
0x31D0   EXPTAB
0x3178   POWER2
0x315B   POWER1
0x313D   NEGAFT
0x3108   EXPTEN
0x3106   OUTEXP
0x3115   NOENED
0x30EA   SUPTLZ
0x30F6   DOEBIT
0x30C5   TRYAGN
0x30B6   DIGTXT
0x312B   POWERS
0x30A5   MAKNUM
0x3080   GTSIXD
0x3089   INRNG
0x306B   SIXDIG
0x3118   RNGTST
0x3112   JSTZER
0x305C   SPCFST
0x8237   PBUFF
0x3006   MULTEN
0x2FFB   ENDCON
0x3005   SCALPL
0x2FEF   SCALMI
0x302F   EDIGIT
0x2FDA   EXPLP
0x2FEC   CONEXP
0x2FE8   DPOINT
0x300D   ADDIG
0x2FC4   MANLP
0x2FBC   CNVNUM
0x2FAB   NOMLAD
0x2F9D   MLDBLP
0x2F75   DCBCDE
0x2F3E   CMPFP
0x2F06   DETHLB
0x2EFF   INCHL
0x2EB2   RETREL
0x2E92   MLSP10
0x2E85   OVTST1
0x2E8A   OVTST2
0x2E8B   OVTST3
0x2E37   RESDIV
0x806A   DIVSUP
0x2E24   DIVLP
0x8076   DIV4
0x806B   DIV1
0x806F   DIV2
0x8073   DIV3
0x2DF1   DIV10
0x2D89   NOMADD
0x2D78   MUL8LP
0x2D9B   BYTSFT
0x2D6F   MULT8
0x8244   MULVAL
0x2E67   ADDEXP
0x2D4D   FPMULT
0x2D44   MULLN2
0x3024   RSCALE
0x31F1   SUMSER
0x2DFF   DVBCDE
0x2CFF   LOGTAB
0x2CFB   UNITY
0x2CE9   SHRLP
0x2CE6   SHRITE
0x2CD9   SCALLP
0x8236   SGNRES
0x2CAA   FPROND
0x2C99   RONDB
0x2C7D   NORMAL
0x2C79   SAVEXP
0x2C85   PNORM
0x2C60   CONPOS
0x2CED   SHRT1
0x2C98   RONDUP
0x2CB7   PLUCDE
0x2C52   MINCDE
0x2CD7   SCALE
0x2F0F   SIGNS
0x2C2C   NOSWAP
0x2C0F   SUBCDE
0x2C09   SUBPHL
0x2C12   FPADD
0x3127   HALF
0x2C00   ROUND
0x2BFD X ENDINK2
0x2BE2   CHKINK
0x2BDE   SRTINK
0x2BF4   ENDINK
0x2BCA   INKEY2
0x2BBB   CMP_A
0x2B69   NOS3
0x2B50   NOS2
0x2B3D   NOS1
0x2B0D   SNDOVR
0x2B60   WRTSND
0x2AD8   SND1
0x2A6A   RPVOLCG
0x2A76   VOLCH
0x29CF   PKEPRMS
0x29B9   SYSRET
0x29AB   NOSYSPR
0x296D   NMIINT
0x2979   NMIVR1
0x2963   NMIEINT
0x295F   NMI2
0x296A   NMIDINT
0x293D   DISNMI
0x294E   NM1
0x8068   OTPORT
0x2906   WAITLP
0x2905   NOXOR
0x8067   OUTSUB
0x290F   SETIO
0x809F   INPSUB
0x80A0   INPORT
0x28CE   VAL2
0x28D1   VAL3
0x28C4   VAL1
0x2C78   RESZER
0x288F   RSTSTR
0x28DA   MIDNUM
0x285B   LVINSTR
0x2865   CNTZIN
0x2805   RP2INST
0x282E   CNT1INS
0x27DE   RPTINST
0x2850   RZINSTR
0x81F4   DY
0x27CD   EMPTINS
0x81EE   TF
0x81EC   TP
0x81EA   PT2
0x81E6   PT
0x81E4   ADRS2
0x81E2   LNS2
0x81E0   ADRS1
0x81DE   LNS1
0x2754   ALLFOL
0x274C   MID1
0x3FB3   BINERR
0x274A   RIGHT1
0x28D5   LFRGNM
0x2925   MAKINT
0x2729 X GTFLNM
0x271A   GETLEN
0x2703   POPHL
0x26E4   GETSTR
0x26DB   TSALP
0x26D1   SSTSA
0x26EA   GSTRHL
0x263E   GRBARY
0x2675   SCNEND
0x261E   GNXARY
0x264F   STRADD
0x261F   ARRLP
0x2609   SMPVAR
0x264C   STPOOL
0x25F8   GRBLP
0x25EA   GARBLP
0x25DB   TESTOS
0x25BF   GRBDON
0x25AE   PRSLP
0x25A3   PRNUMS
0x2584   TSTOPL
0x2578   CRTSTE
0x2569   QTSTLP
0x2553   MKTMST
0x26DA   TOSTRA
0x2556   CRTMST
0x25BD   TESTR
0x2742   TOPOOL
0x2534   STR1
0x255C   SVSTAD
0x251D   CHEKFN
0x2495   PASSA
0x2EC0   RETINT
0x25E7   GARBGE
0x2480   FRENUM
0x245F   ENDTMR
0x242B   FNDELP
0x244A   ENDDIM
0x2409   ZERARY
0x2F95   MLDEBC
0x23EB   DEFSIZ
0x23E3   CRARLP
0x23C3   BSERR
0x2426   FINDEL
0x23AA   NXTARY
0x23C8   CREARY
0x2396   FNDARY
0x236E   SCPTLP
0x234C   ZEROLP
0x235D   RETNUL
0x235A   RETADR
0x231B   FNTHR
0x2326   CFEVAL
0x230D   FNDVAR
0x2D99   POPHRT
0x822E   FNARG
0x2368   SBSCPT
0x22F3   NSCFOR
0x2390   ARLDSV
0x22E3   NOTSTR
0x22C8   ENDNAM
0x22D4   CHARTY
0x22C7   SVNAM2
0x22B0   GTFNAM
0x8193   LCRFLG
0x229D   DIMRET
0x2EBB   FLGREL
0x2EB4   FLGDIF
0x2264   CMPSTR
0x26EB   GSTRDE
0x26E7   GSTRCU
0x227C   CMPRES
0x223A   CMPLG1
0x2238   CMPLOG
0x2221   PXOR1
0x2214 X PAND1
0x2219   POR1
0x2485   ACPASS
0x2EEA   FPBCDE
0x21F9   CNTLGC
0x21DF   SGNEXP
0x21D6   GOFUNC
0x21CE   FNVAL
0x218F   FRMEVL
0x2187   RETNUM
0x2ED2   INVSGN
0x2173   EVLPAR
0x219D   FNOFST
0x24C7   DOFN
0x2286   EVNOT
0x217B   MINUS
0x3F88   BINTFP
0x3F18   HEXTFP
0x2150   NOTAMP
0x218C   CONVAR
0x2EDA   STAKFP
0x210E   STKTHS
0x269A   CONCAT
0x2226   TSTRED
0x81AC   CUROPR
0x20E6   FOPRND
0x20CA   RLTLP
0x20BD   EVAL3
0x81B7   NXTOPR
0x20BA   EVAL2
0x2125   OPRND
0x20B1   EVAL1
0x20AA   OPNPAR
0x20A0   TSTSTR
0x208C   KILFOR
0x2EF8   LOADFP
0x2C03   ADDPHL
0x2EE7   PHLTFP
0x2054   NEXT1
0x2046   FANDT
0x201D   EXTIG
0x2002   MORDT
0x2FB0   ASCTFP
0x1FF6   LTSTND
0x2566   DTSTR
0x1FDC   ITMSEP
0x1FDF   STRENT
0x1FEB   INPBIN
0x202D   FDTLP
0x1FC1   ANTVLU
0x1F95   NEDMOR
0x1F99   GTVLUS
0x1F8D   NXTITM
0x1F70   NOPMPT
0x250F   IDTEST
0x81B4   READFG
0x1F45   BADINP
0x1F33   REDO
0x1F24   SPCLP
0x1F1D   DOSPC
0x291F   FNDNUM
0x1EFD   ZONELP
0x1EEA   CNTEND
0x25A7   PRS1
0x2562   CRTST
0x304E   NUMASC
0x1EC7   PRNTST
0x1F2C   NEXITM
0x1EEF   DOCOM
0x1F08   DOTAB
0x1E80   PRNTLP
0x1E79   MRPRNT
0x1E62   IF0
0x1E6B   IF1
0x1E59   IFGO
0x1E3D   ONGOLP
0x1E3C   ONGO
0x2922   GETINT
0x2F01   FPTHL
0x2F04   DETHL4
0x253E   SAVSTR
0x2705   BAKTMP
0x81A6   TMPSTR
0x1E1D   MVSTPT
0x1E15   CRESTR
0x8232   FPREG
0x1DEE   LETSTR
0x1E26   LETNUM
0x20A1   CHKTYP
0x20AE   EVAL
0x8194   TYPE
0x22AB   GETVAR
0x1DC5   NXTSTT
0x1DC2   NXTSTL
0x1DBB   NXTDTA
0x1DB6   RETLIN
0x1D78   RUNLIN
0x1D31   STORED
0x1CE7   GTLNLP
0x1CE4   GETLN
0x2F24   CMPNUM
0x2F51   FPINT
0x8235   FPEXP
0x1CC3   DEPINT
0x1CC0 X POSINT
0x2B13   NOISUP
0x1CBD   FPSINT
0x1CB5   CHKLTR
0x80A6   CHKSUM
0x1CA8 X ACCSUM
0x1C89   ERRINT
0x81B9   ERRLIN
0x1C78   NOLIN
0x1C62   INPBRK
0x80A9   BRKFLG
0x1C4C   STALL
0x1C56   BRK
0x822A   NXTDAT
0x1C39   UPDATA
0x1C38   RESTNL
0x1BFB   ONJMP
0x1BFA   IFJMP
0x1C65   ENDPRG
0x1BD3   RUNCNT
0x1BCF   PUTFID
0x2EA9   TSTSGN
0x1BC6   SAVSTP
0x2EF5   BCDEFP
0x209C   GETNUM
0x209F   TSTNUM
0x1B8A   FORFND
0x1B6E   FORSLP
0x81AE   LOOPST
0x1B53   CNTWTSP
0x1B47   WTSPC
0x1B3F   LVSRLN
0x1B34   SRCLN1
0x1B11   OUTWRD
0x1B1F   NXTLN
0x1AF8   LSTLP3
0x1AF5   LSTLP2
0x1AE9   LST07
0x1AE6   LST08
0x1B41   TSTSPC
0x1C3E   TSTBRK
0x36A5   PAINT4
0x1ABB   LST02
0x1AB8   LST05
0x1A7B   LST06
0x1AA4   LST03
0x1A7F   LSTNOT
0x1A60   LST01H
0x1AC4   LISTLP
0x1B33   SRCLN
0x1B2D   SRCHLIN
0x1A5D   LST01
0x1A8C   LSTALL
0x335F   GETINP
0x3FB8   MONOUT
0x1A10   SND2VID
0x19FD   INCLEN
0x8192   CURPOS
0x80A2   LWIDTH
0x1A01   DINPOS
0x25D9   POPAF
0x19D2   CHKSYN
0x19C3   OUTIT
0x19C6   OUTNBS
0x3FD9   OUTNCR
0x19AF   PUTBUF
0x1ED6   ENDINP
0x19A9   GMNCR
0x19B4   PUTCTL
0x1974   PROCES
0x1A1E   CLOTST
0x194C   KILIN
0x1941   DELCHR
0x195B   MORINP
0x1949   OTKLN
0x1935   ECHDEL
0x80A4   NULFLG
0x1921   DODEL
0x1908   NXTCHR
0x1902   TSTREM
0x18FF   SETLIT
0x18E1   NOCHNG
0x18D8   NOSPC
0x18E9   MATCH
0x18C7   NXTBYT
0x18B7   GETNXT
0x18B5   SEARCH
0x18ED   RETNAD
0x189C   FNDWRD
0x1918   ENDBUF
0x1911   CPYLIT
0x18F1   MOVDIR
0x1872   CRNCLP
0x8195   DATFLG
0x80AA   RINPUT
0x1855   DOAGN
0x822C   FNRGNM
0x81B2   FORFLG
0x81BB   CONTAD
0x8198   TMSTPT
0x819A   TMSTPL
0x8226   VAREND
0x81AA   STRBOT
0x81B5   BRKLIN
0x1826   INTVAR
0x17F9   SRCHLP
0x8135   BASTXT
0x17EA   FNDEND
0x17DE   PTRLP
0x1822   RUNFST
0x17D1   MOVBUF
0x17D9   SETPTR
0x17A3   SFTPRG
0x8224   PROGND
0x17B2   INEWLN
0x1D92   ULERR
0x179B   LINFND
0x17F6   SRCHLN
0x81B3   LSTBIN
0x1BF3   EXCUTE
0x1869   CRUNCH
0x1952   GETLIN
0x1757   GETCMD
0x1749   POPNOK
0x303B   LINEIN
0x80B1   HLPLN
0x1745   PTLN
0x1728   ERRIN
0x19DD   OUTC
0x1ECE   STTLIN
0x80A5   CTLOFG
0x1702   TMERR
0x16FF   OVERR
0x16FC   UFERR
0x16F9   DDERR
0x16F6   NFERR
0x16F3   DZERR
0x81B0   DATLIN
0x16EA   DATSNR
0x16E8   LDG1ND
0x16D7   LDG1
0x16CA   EXITGM
0x1704   ERROR
0x16C5   OMERR
0x8228   ARREND
0x16AD   CHKSTK
0x16A2   MOVLP
0x169F   MOVSTR
0x16B6   ENFMEM
0x169C   MOVUP
0x1693   INDFND
0x167D   LOKFOR
0x1679   BAKSTK
0x1673   BRKMSG
0x166E   OKMSG
0x166D   ZERBYT
0x1669   INMSG
0x1662   ERRMSG
0x15E0 X DEFFNKS
0x15DE   AUTORP
0x1952   TTYLIN
0x1CDE   FCERR
0x21F2   POR
0x21F7   PXOR
0x21EF   PAND
0x2C63   BNORM
0x314B   POWER
0x2DA0   DINT
0x2DA8   MOD
0x2DFD   DIV
0x2D4B   MULT
0x2C0D   PSUB
0x302A   PADD
0x156B   PRITAB
0x00E9   ZLEFT
0x00E1   ZINSTR
0x00E0   ZPOINT
0x00CA   ZSGN
0x00C9   ZLTH
0x00C8   ZEQUAL
0x00C7   ZGTR
0x00C6   ZOR
0x00C2 X ZDINT
0x00C1 X ZMOD
0x00C0 X ZDIV
0x00BF X ZTIMES
0x00BE   ZMINUS
0x00BD   ZPLUS
0x00BC   ZSTEP
0x00BB   ZNOT
0x00BA   ZTHEN
0x00B9   ZSPC
0x00B8   ZFN
0x00B7   ZTO
0x00B6   ZTAB
0x00B5   ZNEW
0x00AF   ZPRINT
0x00AE   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x1816   NEW
0x3EC2   SAVE
0x3EC1   LOAD
0x1D08   CLEAR
0x1A31   LIST
0x1C8F   CONT
0x1E7D   PRINT
0x3FBB   RESET
0x298D   SYS
0x3375   WIDTH
0x34F5   GPRINT
0x2933   NMI
0x3D54   KEY
0x3361   CLS
0x3D39   HELP
0x3AF7   SERIAL
0x35E6   PAINT
0x38F2   CIRCLE
0x37BC   DRAW
0x3729   PLOT
0x3439   COLOR
0x339F   PAUSE
0x2A48   VOLUME
0x2A81   SOUND
0x29F5   LOCATE
0x2B75   VREG
0x2A27   SREG
0x29EA   VPOKE
0x3388   DOKE
0x29E5   POKE
0x249A   DEF
0x28F1   WAIT
0x3EC4   ERASE
0x3EC3   FILES
0x1E2D   ON
0x28EB   POUT
0x1C5B   STOP
0x1DBE   REM
0x1D97   RETURN
0x1D68   GOSUB
0x1C23   RESTOR
0x1E4B   IF
0x1D54   RUN
0x1D79   GOTO
0x1DD3   LET
0x1F88   READ
0x22A6   DIM
0x1F56   INPUT
0x1DBC   DATA
0x2051   NEXT
0x1B5A   FOR
0x1C5D   PEND
0x14FF   WORDTB
0x1372   WORDS
0x2876   MID
0x286C   RIGHT
0x2746   LEFT
0x3F56   BIN
0x3EC5   HEX
0x2736   CHR
0x2725   ASC
0x28A6   VAL
0x252E   STR
0x3B9B   RXEND
0x2716   LEN
0x2776   INSTR
0x36D6   POINT
0x2BB0   INKEY
0x2B9C   SSTAT
0x2B91   VSTAT
0x29C2   VPEEK
0x337D   DEEK
0x29BB   PEEK
0x3312   ATN
0x32FD   TAN
0x33BE   SCREEN
0x329C   SIN
0x3296   COS
0x3190   EXP
0x2D0C   LOG
0x3221   RND
0x3142   SQR
0x2492   POS
0x28DF   INP
0x2464   FRE
0x81E8   PT1
0x8064   USR
0x2ECE   ABS_
0x2F7C   INT
0x244E   TMR
0x2EB8   SGN
0x132E   FNCTAB
0x174A   PRNTOK
0x3D61   RESFN
0x12BF   BRKRET
0x813D   STACK
0x12D4   BFREE
0x3043   PRNTHL
0x12CB   BLNSPC
0x1817   CLRPTR
0x80AD   STRSPC
0x8196   LSTRAM
0x1288   NODOS
0x19CC   CPDEHL
0x16F0   SNERR
0x1CE3   ATOH
0x1271   SETTOP
0x124D   MLOOP
0x82AB   STLOOK
0x125F   TSTMEM
0x1C13   GETCHR
0x1859   PROMPT
0x25A4   PRS
0x1323   MEMMSG
0x1237   MSIZE
0x124A   MNOASK
0x2A8F   CTSNDC
0x8247   PROGST
0x8138   BUFFER
0x1EE0   PRNTCRLF
0x183C   CLREG
0x1B07   FNDTOK
0x1662   INITBE
0x1589   INITAB
0x121C   INIT
0x805E   WRKSPC
0x2486   ABPASS
0x1EC3   PRNTNB
0x1CC9   DEINT
0x1215   CSTART
0x12BC   WARMST
0x120E   STARTB
0x1058 X ERRORS
0x11FE   HPMSG
0x1056 X HPPTR
0x11E8   SOMSG
0x11CF   SAMSG
0x1052 X SAPTR
0x11BA   SCMSG
0x1050 X SCPTR
0x104E X GMPRT
0x119E   BNMSG
0x104C X BNPTR
0x1193   HXMSG
0x104A X HXPTR
0x1183   MOMSG
0x1048 X MOPTR
0x3EFB   BYT2ASC
0x116D   UFMSG
0x1046 X UFPTR
0x115E   CNMSG
0x1044 X CNPTR
0x1143   STMSG
0x1042 X STPTR
0x1054 X SOPTR
0x1133   LSMSG
0x1040 X LSPTR
0x111F   OSMSG
0x103E X OSPTR
0x1110   TMMSG
0x103C X TMPTR
0x1101   IDMSG
0x103A X IDPTR
0x10F0   DZMSG
0x1038 X DZPTR
0x10DB   DDMSG
0x1036 X DDPTR
0x10CD   BSMSG
0x1034 X BSPTR
0x10BE   ULMSG
0x3EB5   CHKEY3
0x1032 X ULPTR
0x10B0   OMMSG
0x1030 X OMPTR
0x10A7   OVMSG
0x102E X OVPTR
0x1091   FCMSG
0x102C X FCPTR
0x1085   ODMSG
0x102A X ODPTR
0x1070   RGMSG
0x1028 X RGPTR
0x1069   SNMSG
0x1026 X SNPTR
0x1058   NFMSG
0x1024 X NFPTR
0x1024   ERRTBL
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x1F22   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x0EFC   CNTFNK
0x0F0F   PRNTFNK
0x0F02   PUTCHRBUF1
0x0EE8   LDFNKEYCHR
0x80B5   FNKEYS
0x80AF   LINEAT
0x12E2   SIGNON
0x0ECF X LVKBRDCHK
0x0EC8   PNT2VD
0x0EBB   PUTCHRBUF
0x0EA9   SNDKEYTOBFR
0x0ED0   PRNTFNKEY
0x0EA1   CHKFNK
0x0F1C   FNKEYSORD
0x0E9B   CNTKBCK
0x0003   CTRLC
0x80B4   AUTOKE
0x2C66   BNRMLP
0x0E88   SENDKEY
0x0E59   SETNEWAUTO
0x0ECB   LVKBRDCHK2
0x80B3   KEYDEL
0x0E69   CHKAUTO
0x821D   KEYTMR
0x0E7B   NEWKEY
0x0FA4   KBMAP_ALT
0x0FE4   KBMAP_CTRL
0x0E20   CHKALT
0x0E27   LOADMAP
0x0F64   KBMAP_SFT
0x0E17   CHKCTRL
0x0F24   KBMAP
0x0E03   CHKLN
0x821C   STATUSKEY
0x821B   LASTKEYPRSD
0x0DEB   ENDCTRLCK
0x0DE5   TESTCTRL
0x0E01   FINDKEY
0x0DD8   TESTALT
0x8219   KBTMP
0x0DEF   NOKEYPRSD
0x0DA9   RPTKBDRD
0x0DA5   CHECKKBD
0x0D97   CHECKCTRL
0x821F   CONTROLKEYS
0x0D89   CHECKALT
0x0D49   CNTCHKSND
0x0D0E   CHKSNDCH
0x0CDC   RPTWLCMBP
0x0CF2   NOBPDAT
0x0CD9   SENDSND
0x0CEA   WLCBPDAT
0x0CFF   WRTSNDREG
0x0CFA   SETSNDREG
0x0CC0   SNDREGCFG
0x0CAC   CLRPSGREGS
0x0CA8   EMPTSNDBFR
0x0B5A X VDPMODESETEX2
0x0B52 X VDPMODESETMC
0x0B4A X VDPMODESET2
0x2563   QTSTR
0x0B42 X VDPMODESET1
0x0B30   SENDCHRPTRNS
0x4842   CHRST88
0x0B2E   NXTCHAR
0x4042   CHRST68
0x0B0F   LDREGVLS
0x0B3A   VDPMODESET
0x0AF8   RSTVDPRAMREG
0x8212   CHASNDDTN
0x0AE9   EMPTVRM
0x0A7D X CNTNULL2
0x0A70   RPTNLLSRC2
0x3FEA   MUL16
0x0A4B   ADDNEWLINE
0x0A18   SNDCHRTOBFR
0x09FF   CNTNULL
0x09EF   RPTNLLSRC
0x0A37   PRNTRETURN
0x81E4   TMPBFR4
0x81E2   TMPBFR3
0x81E0   SRTTXT
0x81E0   TMPBFR2
0x09C5   RPTEMPTYROW
0x09AA   WRITEBUF
0x0981   LOADNEXTCOL
0x81E6   VIDEOBUFF
0x096F   SCROLLNXTRW
0x8210   VIDTMP2
0x820E   VIDTMP1
0x094D   EXITCURSOR_ON
0x0937   EXITCURSORDOWN
0x0917   EXITCURSORRGHT
0x0911   CONTCRSRGT
0x08FE   CHCKYPOS2
0x08E3   EXITCURSORUP
0x08BA   CHKYPOS
0x08A7   EXITCURSORLEFT
0x08A4   CONTCRSLFT
0x0893   CHCKYPOS
0x08A9   MVCRS2LFT
0x0864   MVBKSP
0x0877   LVBKSP
0x0020   SPC
0x082F X ENDINSRT
0x082A   NXTINST
0x3FDF   CMP16
0x0819   CHKHL
0x81E2   ENDTXT
0x0A58   ENDOFLN
0x81DE   CUR_POS
0x07F7   PUTCRSCHR
0x0956   SCROLLUP
0x07B7   SETCRSRY
0x07B8   SETCSRCOORDS
0x07CA   EXITCHAR2VID
0x078E   NXTCPCK
0x0781   RPTCPCK
0x07D7   PLACEHOLDER
0x000A   LF
0x07FB   INSERTKEY
0x001A   INSRT
0x091A   CURSORDOWN
0x001F   CRSDN
0x08E5   CURSORRIGHT
0x001D   CRSRGT
0x08CC   CURSORUP
0x001E   CRSUP
0x0880   CURSORLEFT
0x001C   CRSLFT
0x083D   BACKSPACE
0x3456   CNTCKCL
0x0008   BKSP
0x09D1   CRGRETURN
0x000C   CS
0x0019   HOME
0x0750   CHRTBL
0x401E   DIV_16_8
0x073F   HL2XY
0x0A7E   POS_TB_CRS_32
0x0731   CONT_POS_CURS
0x0AAE   POS_TB_CRS_40
0x81D9   LSTCSRSTA
0x06E9   MOVSHOWCRS
0x06FE   NEWCRSRCOORD
0x0713   RSTCHRCRS
0x071C   LOAD_CRSR_POS
0x06D2   READ_VSTAT
0x06C7   WRITE_VREG
0x06B2   WRITE_VIDEO_LOC
0x069D   READ_VIDEO_LOC
0x06E3   MOVCRS
0x81D5   SCR_CUR_NX
0x0000   NLLCR
0x81D6   SCR_CUR_NY
0x0693   ATHOME
0x06D9   POS_CURSOR
0x0686   CLEARVIDBUF
0x0673   RPTFLL1
0x0660   SNDCLRSET
0x065C   STARTEMPTY
0x0626   CLRG2PTNTBL
0x060B   RPTEMPTYBUF
0x0605   LDCOLSTOEMPTY
0x0645   EMPTYMC
0x0614   EMPTYG2
0x05E9   LVCKSPLK
0x0D54   READKBLN
0x05DB X CHKSPCK
0x05CC   SNDLOGPT
0x2CC3   COMPL
0x5042   LOGOFONT
0x0CD6   NOBEEP
0x0CD0   WLCMBEEP
0x0597   RPT100
0x05AD   BEEPOFF
0x05A1   SETBEEP
0x056D   DEC_D
0x8223   DOS_EN
0x81DE   TMPBFR1
0x055C   RPT104
0x05B5   LOADLOGOCHRS
0x0554   RPT103
0x0B62   LM80CLOGO
0x053E   RPT102
0x0CB3   RSTPSG
0x053B   RPT101
0x05D6   CLRTABLE
0x0589   ERASECLRTBL
0x066A   SETNAMETABLE
0x0B05   SET_GFX_MODE2
0x81D7   SCR_ORG_CHR
0x05EB   EMPTYVIDBUF
0x0476   LDCLRTBMD1
0x81DC   FRGNDCLR
0x067D   SETVDPADRS
0x0507   ENDVDPSET
0x81D1   SCR_NAM_TB
0x80A3   COMMAN
0x81CE   SCR_SIZE_H
0x81CD   SCR_SIZE_W
0x81DD   BKGNDCLR
0x81D4   SCR_CURS_Y
0x04FE   LDCLRTBEX2
0x81D3   SCR_CURS_X
0x0B19   LOADCHARSET
0x0414 X TXTMD
0x04C4   EXG2MD
0x04A1   MCMD
0x047F   G2MD
0x043E   G1MD
0x81CF   SCR_MODE
0x0AF2   CLR_RAM_REG
0x0AFD   SET_GFX_MODE
0x0ADE   EMPTY_VRAM
0x0385   RESTMR
0x038A   CTCCONF
0x035C X SIO_B_SETS
0x0356   SIO_A_SETS
0x034B   COUNTER
0x0349   DEC_E
0x0345   LEDLIGHT
0x120B   WARM
0x1208   COLD
0x094F   CURSOR_OFF
0x0321   ECHO_CHAR
0x0314   CHECKWARM
0x02FD   CORW
0x093A   CURSOR_ON
0x03D2   MSGTXT2
0x0309   COLDSTART
0x805D   basicStarted
0x0396   MSGTXT1
0x81DA   PRNTVIDEO
0x3FCA   INITST
0x03EF   initVDP
0x0512   SHOW_LOGO
0x0CA2   initPSG
0x0360   initCTC
0x033B   HELLOWRLD
0x02B3 X INIT_HW2
0x818F   TEMPSTACK
0x0D69   KEYBOARD
0x0D04   MNGSNDS
0x07D8   FLASHCURSOR
0x029C   CHKCRSR
0x0296   INCTMR3
0x81BD   TMRCNT
0x028D   CH3_TIMER
0x027F   RAWPRINT
0x026B   EXTXA
0x026E   TX_EMP
0x0266   TXA_EXIT
0x0257   CNTTXA
0x0249   RXA_EXIT
0x0238   NOTRDWRAP
0x805A   serRdPtr
0x8000   SERBUF_START
0x020B   NOTWRAP
0x0058   bufWrap
0x8058   serInPtr
0x01FF   NOTFULL
0x805C   serBufUsed
0x01E2   SIO_B_EI
0x01E8   SIO_RXEN
0x01DA   SIO_A_EI
0x01D0   SIO_RXDI
0x01B0 X B_RTS_ON
0x01B6   SIO_RTS_ON
0x01A8   A_RTS_ON
0x8222   SERBBITS
0x019C   SIO_RTS_OFF
0x8221   SERABITS
0x0180   EMPTYCHBBFR
0x01CA   SIO_B_DI
0x0196   B_RTS_OFF
0x3D25   SOERR
0x015C   CHABFREMPTY
0x014E   EMPTYCHABFR
0x8220   SERIALS_EN
0x01C2   SIO_A_DI
0x11A9   GMMSG
0x076E   CHAR2VID
0x81D8   CRSR_STATE
0x8218   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x81DB   CHR4VID
0x0130   LVRXCHA
0x01F4   CHARINTOBFR
0x821A   TMPKEYBFR
0x018E   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x8061   NMIUSR
0x81CA   CTC3IV
0x81C7   CTC2IV
0x81C4   CTC1IV
0x81C1   CTC0IV
0x027A   CKINCHAR
0x0018 X RST18
0x0223   RXA
0x0010 X RST10
0x0135   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x024D   TXA
0x0008 X RST08
0x0167   SPEC_RXB_CNDT
0x0164   RX_CHB_AVAIL
0x02B0   INIT_HW
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0032   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
