# file opened: LM80C_64K-firmware-r1.10.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C 64K - FIRMWARE - R1.10
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; set name for binary output file
  55  0000                  OUTPUT "LM80C-64K-firmware-r1.10.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C64K
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "1.10"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.00"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT dec     C
  68  0000                  DEFINE LM64K_NOP nop
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000              VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000 ~            VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 C3 03 5F                     jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0004                  ELSE
  80+ 0004 ~                            jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 1B 61                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 1E 61                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 21 61                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 24 61                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 93 5F                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 ~                            defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 141+ 0090 ~                            defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 142+ 0090                  ELSE
 143+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 143+ 0094 43 20 36 34
 144+ 0098 4B 20 43 4F                  defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 144+ 009C 4C 4F 52 00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$30,$29,$00
 147+ 00AC 32 30 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 31  FWVER:          defm    "FW ","1.10",$20,"2021-03-08",$20,"17:30:21",$00
 152+ 00D4 2E 31 30 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 30 38 20 31
 152+ 00E4 37 3A 33 30
 152+ 00E8 3A 32 31 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 73 61                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 73 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 34 61                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 71 61                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 33 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 57 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A 79 61                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 79 61                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 D5 46                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A 79 61                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 79 61                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A 7A 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A 7B 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A 7A 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A 7B 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A 7A 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A 7B 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A 7A 61                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A 7B 61                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A 8E 5F                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A 8A 5F     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE 8A                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 32 5F                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 8A 5F     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 8E 5F                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A 79 61                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A 8E 5F     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A 8C 5F                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE 8A                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 32 5F                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 8C 5F     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A 8E 5F                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 8E 5F                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A 79 61                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A 79 61                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A 8E 5F     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 34 61                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 57 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 17 61                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD C1 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD E9 0C                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A 17 61                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 4E 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 C1 60     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 32 5F                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 8A 5F                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 8C 5F                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 8E 5F                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 79 61                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 ~                            call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C2                  ENDIF
 474+ 02C2 CD 40 03                     call    initCTC         ; configure CTC, then...
 475+ 02C5 CD 87 0C                     call    initPSG         ; ...configure PSG
 476+ 02C8 CD F2 04                     call    SHOW_LOGO       ; show computer logo
 477+ 02CB 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02CD CD D1 03                     call    initVDP         ; set video display
 479+ 02D0 AF                           xor     A
 480+ 02D1 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D3 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D5 FB                           ei                      ; enable interrupts
 483+ 02D6                              ; print system messages
 484+ 02D6 AF                           xor     A               ; A=0 so...
 485+ 02D7 32 71 61                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DA 3C                           inc     A               ; A=1...
 487+ 02DB 32 33 61                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02DE 21 76 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E1 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E4 3A 8F 5F                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02E7 FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02E9 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EB 21 B4 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02EE CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F1 CD 23 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F4 AF                           xor     A
 497+ 02F5 32 33 61                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02F8 CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FB E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 02FD FE 43                        cp      'C'             ; cold start?
 501+ 02FF 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0301 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0304 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0306 32 8F 5F                     ld      (basicStarted),A
 505+ 0309 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030C C3 46 1B                     jp      COLD            ; start BASIC COLD
 507+ 030F FE 57        CHECKWARM:      cp      'W'
 508+ 0311 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0313 CD 1C 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0316 CD 38 09                     call    CURSOR_OFF      ; disable cursor
 511+ 0319 C3 49 1B                     jp      WARM            ; start BASIC WARM
 512+ 031C
 513+ 031C              ;-------------------------------------------------------------------------------
 514+ 031C              ; send back char received through ch. A
 515+ 031C 32 34 61     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 031F AF                           xor     A
 517+ 0320 32 71 61                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0323 F3                           di                      ; disable INTs
 519+ 0324 CD 57 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 0327 3E 0D                        ld      A,CR            ; then set a CR
 521+ 0329 32 34 61                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032C CD 57 07                     call    CHAR2VID        ; and send it to screen
 523+ 032F FB                           ei                      ; re-enable INTs
 524+ 0330 3E 01                        ld      A,$01
 525+ 0332 32 33 61                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0335 C9                           ret                     ; return to caller
 527+ 0336
 528+ 0336                  IFDEF LM80C
 529+ 0336 ~            ;-------------------------------------------------------------------------------
 530+ 0336 ~            ; little serial blink with LEDs
 531+ 0336 ~            HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 0336 ~                            ld      A,%11001111     ; set mode 3 (mode control)
 533+ 0336 ~                            out     (PIO_CB),A      ; for PIO port B
 534+ 0336 ~                            xor     A               ; set pins to OUTPUT
 535+ 0336 ~                            out     (PIO_CB),A      ; for port B
 536+ 0336 ~                            inc     A               ; LSB on
 537+ 0336 ~            LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0336 ~                            ld      E,$20           ; little delay
 539+ 0336 ~            DEC_E:          ld      B,$00           ; count to 256
 540+ 0336 ~            COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 0336 ~                            dec     E               ; decrement outer counter
 542+ 0336 ~                            jr      NZ,DEC_E        ; finish delay
 543+ 0336 ~                            sla     A               ; shift reg.A to left 1 bit
 544+ 0336 ~                            dec     C               ; next LED
 545+ 0336 ~                            jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0336 ~                            ret                     ; return to caller
 547+ 0336                  ENDIF
 548+ 0336              ;-------------------------------------------------------------------------------
 549+ 0336              ; Z80 SIO default settings for serial channels
 550+ 0336 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0337 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0338 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0339 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 033A 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 033B E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 033C 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 033D 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 033E 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 033F 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 0340                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 0340                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 0340                                                      ; for special conditions
 563+ 0340              ;------------------------------------------------------------------------------
 564+ 0340              ;               Z80 CTC SETTING UP
 565+ 0340              ;------------------------------------------------------------------------------
 566+ 0340              initCTC:
 567+ 0340 21 6A 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0343 11 1B 61                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0346 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0349 ED B0                        ldir                    ; copy data
 571+ 034B              ;CH0, CH1, & CH2 disabled
 572+ 034B 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 034D                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 034D D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 034F D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 0351 D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0353              ;init CH3
 578+ 0353              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0353              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0353 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0355                                                      ; time constant follows; cont. operation; command word
 582+ 0355 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0357 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0359 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 035B 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 035D                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 035D                                                      ; so int vector is 01000xx00
 588+ 035D D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 035F                              ; reset cells of 100ths of a second counter
 590+ 035F AF                           xor     A               ; reset A
 591+ 0360 21 17 61                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0363 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0365 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0366 23                           inc     HL              ; next cell
 595+ 0367 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0369 C9                           ret
 597+ 036A
 598+ 036A
 599+ 036A              ;------------------------------------------------------------------------------
 600+ 036A              ; jump table for CHx interrupts
 601+ 036A FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 036D FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 0370 FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0373 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0376
 606+ 0376
 607+ 0376              ;------------------------------------------------------------------------------
 608+ 0376              ; welcome messages
 609+ 0376              MSGTXT1:
 610+ 0376                  IFDEF LM80C64K
 611+ 0376 20 20 20 20                  defm    "    LM80C 64K Color Computer",CR
 611+ 037A 4C 4D 38 30
 611+ 037E 43 20 36 34
 611+ 0382 4B 20 43 6F
 611+ 0386 6C 6F 72 20
 611+ 038A 43 6F 6D 70
 611+ 038E 75 74 65 72
 611+ 0392 0D
 612+ 0393                  ELSE
 613+ 0393 ~                            defm    "      LM80C Color Computer",CR
 614+ 0393                  ENDIF
 615+ 0393 20 62 79 20                  defm    " by Leonardo Miliani * FW R","1.10",CR,0
 615+ 0397 4C 65 6F 6E
 615+ 039B 61 72 64 6F
 615+ 039F 20 4D 69 6C
 615+ 03A3 69 61 6E 69
 615+ 03A7 20 2A 20 46
 615+ 03AB 57 20 52 31
 615+ 03AF 2E 31 30 0D
 615+ 03B3 00
 616+ 03B4 0D           MSGTXT2:        defb    CR
 617+ 03B5 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03B9 43 3E 6F 6C
 617+ 03BD 64 20 6F 72
 617+ 03C1 20 3C 57 3E
 617+ 03C5 61 72 6D 20
 617+ 03C9 73 74 61 72
 617+ 03CD 74 3F 20 00
 618+ 03D1
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03D1
  75  03D1              ; incude the latest version of the VDP module
  76  03D1                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03D1              ; ------------------------------------------------------------------------------
   2+ 03D1              ; LM80C - VDP ROUTINES - 1.4
   3+ 03D1              ; ------------------------------------------------------------------------------
   4+ 03D1              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03D1              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03D1              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03D1              ; kind of warranty: you can use them at your own risk.
   8+ 03D1              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03D1              ; maintain the copyright notices, include this advice and the note to the
  10+ 03D1              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03D1              ; redistribuite them.
  12+ 03D1              ; https://www.leonardomiliani.com
  13+ 03D1              ;
  14+ 03D1              ; Please support me by visiting the following links:
  15+ 03D1              ; Main project page: https://www.leonardomiliani.com
  16+ 03D1              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03D1              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03D1              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03D1              ; ------------------------------------------------------------------------------
  20+ 03D1              ;
  21+ 03D1              ;------------------------------------------------------------------------------
  22+ 03D1              ; VDP INITIALISATION
  23+ 03D1              ; initialize VDP for a specific graphics mode
  24+ 03D1              ; INPUT: E -> contains the graphics mode:
  25+ 03D1              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03D1 D5           initVDP:        push    DE              ; store E
  27+ 03D2 CD C5 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03D5 CD E3 0A                     call    SET_GFX_MODE    ; load register settings
  29+ 03D8 CD D8 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03DB D1                           pop     DE              ; restore reg. E
  31+ 03DC AF                           xor     A               ; reset A
  32+ 03DD 47                           ld      B,A             ; reset B (will be used later)
  33+ 03DE 7B                           ld      A,E             ; move E into A
  34+ 03DF 32 29 61                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03E2 FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 03E4 CA 20 04                     jp      Z,G1MD          ; yes, jump over
  37+ 03E7 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 03E9 CA 60 04                     jp      Z,G2MD          ; yes, jump over
  39+ 03EC FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 03EE CA 82 04                     jp      Z,MCMD          ; yes, jump over
  41+ 03F1 FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 03F3 CA A5 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 03F6                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 03F6
  45+ 03F6              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 03F6
  47+ 03F6                              ; TEXT MODE (G0)
  48+ 03F6                              ; load charset
  49+ 03F6 60           TXTMD:          ld      H,B
  50+ 03F7 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 03F8 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 03FB                              ; set cursor & video overlay
  53+ 03FB AF                           xor     A               ; reset A
  54+ 03FC 32 2C 61                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 03FF 32 2D 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 0402 3E 05                        ld      A,$05           ; light blue
  57+ 0404 32 36 61                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0407 3E 28                        ld      A,$28
  59+ 0409 32 27 61                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 040C 3E 18                        ld      A,$18
  61+ 040E 32 28 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 0411 3E 1E                        ld      A,$1E
  63+ 0413 32 D5 5F                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0416 11 00 08                     ld      DE,$0800
  65+ 0419 ED 53 2A 61                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 041D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 0420
  68+ 0420                              ; GRAPHICS 1 MODE (G1)
  69+ 0420                              ; load pattern table
  70+ 0420 68           G1MD:           ld      L,B
  71+ 0421 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 0422 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0425                              ; set cursor & video overlay
  74+ 0425 AF                           xor     A               ; position cursor
  75+ 0426 32 2C 61                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0429 32 2D 61                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 042C 3E 20                        ld      A,$20
  78+ 042E 32 27 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 0431 3E 18                        ld      A,$18
  80+ 0433 32 28 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0436 3E 14                        ld      A,$14
  82+ 0438 32 D5 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 043B 11 00 18                     ld      DE,$1800
  84+ 043E ED 53 2A 61                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 0442                              ; load color table
  86+ 0442 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0445 CD 66 06                     call    SETVDPADRS
  88+ 0448 3E 01                        ld      A,$01           ; foreground color...
  89+ 044A 32 35 61                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 044D 3E 0F                        ld      A,$0F           ; background color...
  91+ 044F 32 36 61                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 0452 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0454 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0456 0D                           dec     C              ; VDP data mode
  95+ 0457 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0459 00                           nop
  97+ 045A 00                           nop
  98+ 045B 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 045D C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 0460
 101+ 0460                              ; GRAPHICS 2 MODE (G2)
 102+ 0460 AF           G2MD:           xor     A               ; position cursor
 103+ 0461 32 2C 61                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0464 32 2D 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0467 32 27 61                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 046A 3C                           inc     A               ; black on...
 107+ 046B 32 35 61                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 046E 3E 0F                        ld      A,$0F           ; white on...
 109+ 0470 32 36 61                     ld      (BKGNDCLR),A    ; ...background
 110+ 0473 3E C0                        ld      A,$C0
 111+ 0475 32 28 61                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0478 11 00 18                     ld      DE,$1800
 113+ 047B ED 53 2A 61                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 047F C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 0482
 116+ 0482                              ; MULTICOLOR MODE (G3)
 117+ 0482 AF           MCMD:           xor     A               ; position cursor
 118+ 0483 32 2C 61                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 0486 32 2D 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 0489 3E 0F                        ld      A,$0F           ; white color for...
 121+ 048B 32 36 61                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 048E 32 35 61                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 0491 3E 40                        ld      A,$40
 124+ 0493 32 27 61                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 0496 3E 30                        ld      A,$30
 126+ 0498 32 28 61                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 049B 11 00 08                     ld      DE,$0800
 128+ 049E ED 53 2A 61                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04A2 C3 E7 04                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04A5
 131+ 04A5                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04A5              EXG2MD:         ; load pattern table
 133+ 04A5 60                           ld      H,B
 134+ 04A6 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04A7 CD FF 0A                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04AA                              ; set cursor & video overlay
 137+ 04AA AF                           xor     A               ; position cursor
 138+ 04AB 32 2C 61                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04AE 32 2D 61                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04B1 3E 20                        ld      A,$20
 141+ 04B3 32 27 61                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04B6 3E 18                        ld      A,$18
 143+ 04B8 32 28 61                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04BB 3E 14                        ld      A,$14
 145+ 04BD 32 D5 5F                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04C0 11 00 38                     ld      DE,$3800
 147+ 04C3 ED 53 2A 61                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04C7                               ; load color table
 149+ 04C7 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04CA CD 66 06                     call    SETVDPADRS
 151+ 04CD 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04CF 32 35 61                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04D2 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04D4 32 36 61                     ld      (BKGNDCLR),A    ; ...background
 155+ 04D7 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04D9 16 08                        ld      D,$08           ; 8 pages of
 157+ 04DB 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04DD 0D                           dec     C              ; VDP data mode
 159+ 04DE ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04E0 00                           nop
 161+ 04E1 00                           nop
 162+ 04E2 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 04E4 15                           dec     D               ; did we fill up all the cells?
 164+ 04E5 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 04E7                              ; LAST VDP SETTINGS
 166+ 04E7 CD 38 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 04EA CD D8 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 04ED AF                           xor     A
 169+ 04EE 32 30 61                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 04F1 C9                           ret                     ; return to caller
 171+ 04F2
 172+ 04F2
 173+ 04F2              ; show initial logo
 174+ 04F2 CD C5 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 04F5                              ; set VDP for G2 mode
 176+ 04F5 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 04F7 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 04FA CD EB 0A                     call    SET_GFX_MODE2   ; load register settings
 179+ 04FD 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 04FF ED 51                        out     (C),D           ; send data to VDP
 181+ 0501 ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0503                              ; set name table
 183+ 0503 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0506 CD 54 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0509 CD 6C 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 050C                              ; set colors for logo
 187+ 050C 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 050F CD 66 06                     call    SETVDPADRS
 189+ 0512 06 05                        ld      B,$05           ; 5 bands
 190+ 0514 21 B7 05                     ld      HL,CLRTABLE
 191+ 0517 0D                           dec     C              ; set VDP_DAT
 192+ 0518 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 051A 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 051C 7E                           ld      A,(HL)          ; load data
 195+ 051D ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 051F 00                           nop                     ; little delay
 197+ 0520 1D                           dec     E               ; decrement counter
 198+ 0521 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0523 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0525 15                           dec     D               ; decrement char band counter
 201+ 0526 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0528 23                           inc     HL              ; next pattern
 203+ 0529 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 052B                              ; set pattern table
 205+ 052B 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 052E 11 47 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0531 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0533 CD 97 05     RPT103:         call    LOADLOGOCHRS
 209+ 0536 13                           inc     DE              ; next logo pattern
 210+ 0537 10 FA                        djnz    RPT103
 211+ 0539 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 053B CD 97 05     RPT104:         call    LOADLOGOCHRS
 213+ 053E 13                           inc     DE              ; next logo pattern
 214+ 053F 10 FA                        djnz    RPT104
 215+ 0541                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0541 06 02                        ld      B,$02           ; two times
 217+ 0543 AF                           xor     A               ; reset A
 218+ 0544 57                           ld      D,A             ; 256 times
 219+ 0545 5F                           ld      E,A             ; x 256 times
 220+ 0546 32 37 61                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0549                  IFDEF LM80C64K
 222+ 0549 3C                           inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 054A                  ENDIF
 224+ 054A 32 7C 61                     ld      (DOS_EN),A      ; DOS enabled
 225+ 054D 00           DEC_D:          nop                     ; does nothing...
 226+ 054E 00                           nop
 227+ 054F 00                           nop
 228+ 0550 00                           nop
 229+ 0551 00                           nop
 230+ 0552 00                           nop                     ; ...until here
 231+ 0553 1D                           dec     E               ; decrement E
 232+ 0554 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0556 7A                           ld      A,D
 234+ 0557 FE 40                        cp      $40             ; ...equal to 64
 235+ 0559 CC 83 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 055C 15                           dec     D
 237+ 055D 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 055F 3A 37 61                     ld      A,(TMPBFR1)     ; sound state
 239+ 0562 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0564 C4 8F 05                     call    NZ,BEEPOFF      ; yes
 241+ 0567                  IFDEF LM80C64K
 242+ 0567 CD BC 05                     call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 056A                                                      ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 056A                  ENDIF
 245+ 056A 10 E1                        djnz    DEC_D           ; repeat
 246+ 056C              ERASECLRTBL:    ; erase color table
 247+ 056C 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 056E 16 0A                        ld      D,$0A           ; 10 pages
 249+ 0570 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 0572 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0575 CD 66 06                     call    SETVDPADRS      ; send address
 252+ 0578 0D                           dec     C              ; VDP address for passing data
 253+ 0579 ED 79        RPT100:         out     (C),A           ; send data
 254+ 057B 00                           nop
 255+ 057C 00                           nop                     ; little delay
 256+ 057D 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 057F 15                           dec     D
 258+ 0580 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 0582 C9                           ret                     ; return to caller
 260+ 0583
 261+ 0583              ; play a beep
 262+ 0583 3A 37 61     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 0586 B7                           or      A               ; is it 0?
 264+ 0587 C0                           ret     NZ              ; no, exit
 265+ 0588 3C                           inc     A               ; flag to 1
 266+ 0589 32 37 61                     ld      (TMPBFR1),A     ; set sound
 267+ 058C C3 B5 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 058F
 269+ 058F              ; beep off
 270+ 058F 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 0591 32 37 61                     ld      (TMPBFR1),A     ; set flag
 272+ 0594 C3 BB 0C                     jp      NOBEEP          ; stop beep and return
 273+ 0597
 274+ 0597
 275+ 0597              ; used to load the chars that will compose the logo of the splash screen
 276+ 0597 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 0598 87                           add     A,A
 278+ 0599 87                           add     A,A
 279+ 059A 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 059B C5                           push    BC
 281+ 059C D5                           push    DE              ; store BC and DE
 282+ 059D E5                           push    HL              ; store VRAM address to write to
 283+ 059E 21 2E 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05A1 5F                           ld      E,A
 285+ 05A2 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05A4 19                           add     HL,DE           ; get address of pattern data
 287+ 05A5 EB                           ex      DE,HL           ; move address into DE
 288+ 05A6 E1                           pop     HL              ; retrieve VRAM address
 289+ 05A7 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05A9 CD 66 06                     call    SETVDPADRS      ; set VDP address
 291+ 05AC 0D                           dec     C              ; VDP_DAT
 292+ 05AD 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05AE ED 79                        out     (C),A           ; and send to VRAM
 294+ 05B0 13                           inc     DE              ; next byte into RAM
 295+ 05B1 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05B2 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05B4 D1                           pop     DE
 298+ 05B5 C1                           pop     BC              ; retrieve BC & DE
 299+ 05B6 C9                           ret                     ; return to caller
 300+ 05B7              CLRTABLE:       equ $
 301+ 05B7 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05BB 1D
 302+ 05BC
 303+ 05BC
 304+ 05BC              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05BC              ; if yes, then disable DOS functions recovering RAM
 306+ 05BC F5           CHKSPCK:        push    AF
 307+ 05BD 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05BF CD 39 0D                     call    READKBLN        ; read row
 309+ 05C2 CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05C4 CA D1 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05C7 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05C9 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05CB AF                           xor     A               ; yes, so...
 314+ 05CC 32 7C 61                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05CF F1           LVCKSPLK:       pop     AF
 316+ 05D0 C9                           ret
 317+ 05D1 AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05D2 32 8F 5F                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05D5 C3 00 00                     jp      $0000           ; restart
 320+ 05D8
 321+ 05D8
 322+ 05D8              ; empty video buffer
 323+ 05D8 3A 29 61     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05DB FE 02                        cp      $02             ; is it G2 mode?
 325+ 05DD CA 00 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05E0 FE 03                        cp      $03             ; is it MC mode?
 327+ 05E2 CA 30 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 05E5 3A 28 61                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 05E8 47                           ld      B,A             ; move rows into B
 330+ 05E9 AF                           xor     A               ; filling char is $00
 331+ 05EA 2A 2A 61                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 05ED CD 66 06                     call    SETVDPADRS      ; send address to VDP
 333+ 05F0 0D                           dec     C              ; VDP address for passing data
 334+ 05F1 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 05F2 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 05F5 57                           ld      D,A             ; move A into D
 337+ 05F6 7B                           ld      A,E             ; recover filling char
 338+ 05F7 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 05F9 00                           nop
 340+ 05FA 15                           dec     D               ; decr. D
 341+ 05FB 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 05FD 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 05FF C9                           ret                     ; return to caller
 344+ 0600 2A 2A 61     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0603 CD 54 06                     call    SETNAMETABLE    ; set name table
 346+ 0606 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0609 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 348+ 060C AF                           xor     A               ; empty pattern
 349+ 060D 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 060F 47                           ld      B,A             ; 256 bytes for page
 351+ 0610 0D                           dec     C              ; VDP data mode
 352+ 0611 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0613 00                           nop                     ; little delay
 354+ 0614 00                           nop
 355+ 0615 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0617 15                           dec     D               ; next page
 357+ 0618 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 061A 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 061D CD 66 06                     call    SETVDPADRS      ; send address to VDP
 360+ 0620 3A 35 61                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0623 87                           add     A,A
 362+ 0624 87                           add     A,A
 363+ 0625 87                           add     A,A
 364+ 0626 87                           add     A,A             ; move to high nibble
 365+ 0627 57                           ld      D,A             ; store into D
 366+ 0628 3A 36 61                     ld      A,(BKGNDCLR)    ; load background color
 367+ 062B B2                           or      D               ; combine with background color
 368+ 062C 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 062E 18 17                        jr      STARTEMPTY
 370+ 0630 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0633 CD 54 06                     call    SETNAMETABLE    ; set name table
 372+ 0636 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0639 CD 66 06                     call    SETVDPADRS      ; send address to VDP
 374+ 063C 3A 36 61                     ld      A,(BKGNDCLR)    ; load background
 375+ 063F 57                           ld      D,A             ; store into D
 376+ 0640 87                           add     A,A
 377+ 0641 87                           add     A,A
 378+ 0642 87                           add     A,A
 379+ 0643 87                           add     A,A             ; move to high nibble
 380+ 0644 B2                           or      D               ; set background color for high and low nibble
 381+ 0645 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0647 0D           STARTEMPTY:     dec     C              ; VDP address for passing data
 383+ 0648 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 064A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 064C 00                           nop                     ; wait a while
 386+ 064D 00                           nop
 387+ 064E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0650 15                           dec     D               ; have we filled all the pages?
 389+ 0651 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0653 C9                           ret                     ; return to caller
 391+ 0654
 392+ 0654              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0654 CD 66 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0657 0D                           dec     C              ; VDP address for passing data
 395+ 0658 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 065A AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 065B 47                           ld      B,A             ; reset B
 398+ 065C ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 065E 00                           nop
 400+ 065F 3C                           inc     A               ; increment # of name
 401+ 0660 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0662 15                           dec     D               ; did we fill all the pages?
 403+ 0663 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0665 C9                           ret                     ; return to caller
 405+ 0666
 406+ 0666              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0666 0E 31        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0668 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 066A ED 69                        out     (C),L           ; send low and...
 410+ 066C ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 066E C9                           ret                     ; return to caller
 412+ 066F
 413+ 066F              ; clear the video buffer and position the cursor at 0,0
 414+ 066F CD D8 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0672 AF                           xor     A               ; reset A
 416+ 0673 32 2C 61                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0676 32 2D 61                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 0679 C3 C2 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 067C
 420+ 067C              ; HOME: position the cursor at coords. 0,0
 421+ 067C AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 067D 32 2F 61                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 0680 32 2E 61                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 0683 C3 CC 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 0686
 426+ 0686              ; load the char or byte at the VRAM position set by HL
 427+ 0686              ; value is returned into A
 428+ 0686 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 0687 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 430+ 0689 44                           ld      B,H
 431+ 068A CB B8                        res     7,B
 432+ 068C CB B0                        res     6,B
 433+ 068E ED 69                        out     (C),L           ; low byte then...
 434+ 0690 ED 41                        out     (C),B           ; high byte
 435+ 0692 0D                           dec     C              ; VDP data mode
 436+ 0693 00                           nop               ; added to compensate shorter instruction
 437+ 0694 00                           nop                     ; wait...
 438+ 0695 00                           nop                     ; ...a while
 439+ 0696 00                           nop
 440+ 0697 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 0699 C1                           pop     BC              ; restore BC
 442+ 069A C9                           ret                     ; return to caller
 443+ 069B
 444+ 069B              ; write a byte at the VRAM position pointed by HL
 445+ 069B              ; value is in A
 446+ 069B C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 069C 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 448+ 069E 44                           ld      B,H             ; copy H into B
 449+ 069F CB B8                        res     7,B
 450+ 06A1 CB F0                        set     6,B             ; write to VRAM
 451+ 06A3 ED 69                        out     (C),L           ; low byte then...
 452+ 06A5 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06A7 0D                           dec     C              ; VDP data mode
 454+ 06A8 00                           nop               ; added to compensate shorter instruction
 455+ 06A9 00                           nop                     ; wait...
 456+ 06AA 00                           nop                     ; ...a while
 457+ 06AB 00                           nop
 458+ 06AC ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06AE C1                           pop     BC              ; restore BC
 460+ 06AF C9                           ret                     ; return to caller
 461+ 06B0
 462+ 06B0              ; write a value into a specific VDP register
 463+ 06B0              ; value is in E, register is in A
 464+ 06B0 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06B1 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06B3 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06B5 ED 59                        out     (C),E           ; send data to VDP
 468+ 06B7 ED 79                        out     (C),A           ; select the destination register
 469+ 06B9 C1                           pop     BC              ; restore BC
 470+ 06BA C9                           ret                     ; return to caller
 471+ 06BB
 472+ 06BB              ; read VDP status register and return value into A
 473+ 06BB C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06BC 0E 31                        ld      C,VDP_SET       ; VDP register access
 475+ 06BE ED 78                        in      A,(C)           ; read status register
 476+ 06C0 C1                           pop     BC              ; restore BC
 477+ 06C1 C9                           ret                     ; return to caller
 478+ 06C2
 479+ 06C2              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06C2 CD 05 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06C5 CD 86 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06C8 32 30 61                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06CB C9                           ret
 484+ 06CC
 485+ 06CC              ; move cursor to new X,Y coordinates
 486+ 06CC CD FC 06     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06CF CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06D2 CD C2 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06D5 3A 31 61                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06D8 A7                           and     A               ; is cursor off?
 491+ 06D9 C8                           ret     Z               ; yes, return
 492+ 06DA 3A 32 61                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06DD F6 20                        or      $20             ; ...set cursor on
 494+ 06DF 32 32 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 06E2 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 06E4 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 06E7
 498+ 06E7
 499+ 06E7              ; set new cursor's coordinates
 500+ 06E7 3A 2E 61     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 06EA 32 2C 61                     ld      (SCR_CURS_X),A  ; write new X
 502+ 06ED 3A 2F 61                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 06F0 32 2D 61                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 06F3 3E FF                        ld      A,$FF           ; delete new values
 505+ 06F5 32 2E 61                     ld      (SCR_CUR_NX),A  ; of X
 506+ 06F8 32 2F 61                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 06FB C9                           ret
 508+ 06FC
 509+ 06FC              ; recover char under the cursor and prints it onto the screen
 510+ 06FC CD 05 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 06FF 3A 30 61                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0702 C3 9B 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0705
 514+ 0705              ; retrieve cursor position from either current coordinates or next place
 515+ 0705              ; return address position into HL
 516+ 0705 3A 2D 61     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0708 6F                           ld      L,A             ; move it into reg.L
 518+ 0709 AF                           xor     A               ; reset A
 519+ 070A 67                           ld      H,A             ; reset H
 520+ 070B 47                           ld      B,A             ; reset B
 521+ 070C 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 070D 11 95 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0710 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0713 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0715 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0717 11 65 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 071A 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 071B 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 071C 23                           inc     HL
 530+ 071D 56                           ld      D,(HL)
 531+ 071E 2A 2A 61                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0721 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0722 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0725 4F                           ld      C,A             ; transfer A into C
 535+ 0726 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0727 C9                           ret
 537+ 0728
 538+ 0728              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0728              ; return them into L,A for X,Y
 540+ 0728 D5           HL2XY:          push    DE              ; store DE
 541+ 0729 ED 5B 2A 61                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 072D AF                           xor     A               ; clear Carry
 543+ 072E ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0730 D1                           pop     DE
 545+ 0731 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0734 4F                           ld      C,A             ; move it into C
 547+ 0735 CD 53 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0738 C9                           ret                     ; return to caller
 549+ 0739
 550+ 0739              ;-------------------------------------------------------------------------------
 551+ 0739              ; char table for jumps
 552+ 0739 19           CHRTBL:         defb    HOME
 553+ 073A 7C 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 073C
 555+ 073C 0C                           defb    CS
 556+ 073D 6F 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 073F
 558+ 073F 0D                           defb    CR
 559+ 0740 B8 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0742
 561+ 0742 08                           defb    BKSP
 562+ 0743 26 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0745
 564+ 0745 1C                           defb    CRSLFT
 565+ 0746 69 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0748
 567+ 0748 1E                           defb    CRSUP
 568+ 0749 B5 08                        defw    CURSORUP        ; move cursor up
 569+ 074B
 570+ 074B 1D                           defb    CRSRGT
 571+ 074C CE 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 074E
 573+ 074E 1F                           defb    CRSDN
 574+ 074F 03 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0751
 576+ 0751 1A                           defb    INSRT
 577+ 0752 E4 07                        defw    INSERTKEY       ; insert a space
 578+ 0754
 579+ 0754 0A                           defb    LF
 580+ 0755 C0 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0757
 582+ 0757              ; send current char to video buffer
 583+ 0757 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0758 C5                           push    BC              ; store BC
 585+ 0759 D5                           push    DE              ; store DE
 586+ 075A E5                           push    HL              ; store HL
 587+ 075B 3A 31 61                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 075E F5                           push    AF              ; into stack
 589+ 075F CD 38 09                     call    CURSOR_OFF      ; cursor off
 590+ 0762 3A 34 61                     ld      A,(CHR4VID)     ; recover char
 591+ 0765 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0767 21 39 07                     ld      HL,CHRTBL       ; address of key table
 593+ 076A BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 076B 23                           inc     HL              ; beginning of sub-routine address
 595+ 076C 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 076E 5E                           ld      E,(HL)          ; load addres into DE
 597+ 076F 23                           inc     HL
 598+ 0770 56                           ld      D,(HL)
 599+ 0771 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0772 11 B3 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0775 D5                           push    DE              ; store into stack
 602+ 0776 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0777 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0778 23                           inc     HL              ; ...to the next char code
 605+ 0779 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 077B                              ; it'a not a special char, just print it
 607+ 077B CD 05 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 077E 3A 34 61                     ld      A,(CHR4VID)     ; recover char to print
 609+ 0781 CD 9B 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 0784 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 0787 5F                           ld      E,A             ; store cursor Y into E
 612+ 0788 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 078B 3C                           inc     A               ; move 1 step to right
 614+ 078C 21 27 61                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 078F BE                           cp      (HL)            ; have we reached the most right position?
 616+ 0790 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 0792 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 0793 7B                           ld      A,E             ; move cursor Y into A
 619+ 0794 21 28 61                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 0797 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 0798 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 079A D5                           push    DE
 623+ 079B CD 3F 09                     call    SCROLLUP        ; scroll screen up
 624+ 079E D1                           pop     DE
 625+ 079F 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07A0 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07A1 32 2C 61     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07A4 7B                           ld      A,E             ; recover Y
 629+ 07A5 32 2D 61                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07A8 CD C2 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07AB 3A 17 61                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07AE E6 20                        and     $20             ; check cursor state
 633+ 07B0 32 32 61                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07B3 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07B4 32 34 61                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07B7 F1                           pop     AF              ; recover cursor state
 637+ 07B8 A7                           and     A               ; was it off (A=0)?
 638+ 07B9 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07BC E1                           pop     HL              ; restore HL
 640+ 07BD D1                           pop     DE              ; restore DE
 641+ 07BE C1                           pop     BC              ; restore BC
 642+ 07BF F1                           pop     AF              ; restore AF
 643+ 07C0 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07C1
 645+ 07C1              ; flash the cursor at the current position
 646+ 07C1              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07C1 3A 31 61     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07C4 A7                           and     A               ; cursor off (A=0)?
 649+ 07C5 C8                           ret     Z               ; yes, return
 650+ 07C6 3A 17 61                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07C9 E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07CB 21 32 61                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07CE BE                           cp      (HL)            ; compare current state with last state
 654+ 07CF C8                           ret     Z               ; same state, no change required - exit
 655+ 07D0 77                           ld      (HL),A          ; save new state
 656+ 07D1 F5                           push    AF              ; store A (keep state for later use)
 657+ 07D2 CD 05 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07D5 F1                           pop     AF              ; recover current state
 659+ 07D6 06 FF                        ld      B,$FF           ; cursor char
 660+ 07D8 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07DA 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07DC 3A 30 61                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 07DF 47                           ld      B,A             ; move char into B
 664+ 07E0 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 07E1 C3 9B 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 07E4
 667+ 07E4
 668+ 07E4              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 07E4              ; 1 cell straight
 670+ 07E4 CD FC 06     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 07E7 CD 05 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 07EA 22 37 61                     ld      (CUR_POS),HL    ; store it
 673+ 07ED CD 3F 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 07F0                                                      ; DE is the address of the bottom right cell of the screen
 675+ 07F0 22 3B 61                     ld      (ENDTXT),HL     ; store it
 676+ 07F3 ED 4B 37 61                  ld      BC,(CUR_POS)    ; load starting address
 677+ 07F7 AF                           xor     A
 678+ 07F8 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 07FA CA D2 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 07FD 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 07FF 2A 3B 61                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0802 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0803 E5                           push    HL
 684+ 0804 CD F8 4C                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0807 E1                           pop     HL
 686+ 0808 D2 13 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 080B CD 86 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 080E 23                           inc     HL              ; next cell
 689+ 080F CD 9B 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0812 2B                           dec     HL              ; decrement to old position
 691+ 0813 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0814 79                           ld      A,C
 693+ 0815 B0                           or      B               ; finished?
 694+ 0816 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0818 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 081A 2A 37 61                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 081D 32 30 61                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0820 CD 9B 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0823 C3 D2 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0826
 701+ 0826              ; delete the char at the left of the cursor
 702+ 0826 CD FC 06     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 0829 2A 2A 61                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 082C 44 4D                        ld      BC,HL           ; store into BC
 705+ 082E CD 05 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0831 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0833 AF                           xor     A               ; reset Carry
 708+ 0834 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0836 CA 60 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 0839 ED 53 37 61                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 083D CD 3F 0A                     call    ENDOFLN         ; check end of text
 712+ 0840 ED 5B 37 61                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0844 AF                           xor     A               ; reset Carry
 714+ 0845 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0847 CA 60 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 084A 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 084C EB                           ex      DE,HL           ; copy starting position into HL
 718+ 084D CD 86 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0850 2B                           dec     HL              ; 1 position to left
 720+ 0851 CD 9B 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0854 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0855 23                           inc     HL
 723+ 0856 0B                           dec     BC              ; decrement # of chars
 724+ 0857 79                           ld      A,C
 725+ 0858 B0                           or      B               ; 0 chars?
 726+ 0859 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 085B 2B                           dec     HL
 728+ 085C AF                           xor     A
 729+ 085D CD 9B 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0860 CD 92 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0863 CD E7 06                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0866 C3 D2 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 0869
 734+ 0869
 735+ 0869              ; move cursor to left
 736+ 0869 F5           CURSORLEFT:     push    AF              ; store A
 737+ 086A 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 086D A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 086E 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0870 3D                           dec     A               ; no, decrement X
 741+ 0871 32 2E 61                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0874 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0877 32 2F 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 087A 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 087C 3A 2D 61     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 087F A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 0880 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 0882 3D                           dec     A               ; no, decrement Y
 749+ 0883 32 2F 61                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 0886 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 0889 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 088A 32 2E 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 088D CD CC 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 0890 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 0891 C9                           ret                     ; return to caller
 756+ 0892
 757+ 0892              ; move cursor 1 position to the left
 758+ 0892 3A 2C 61     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 0895 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 0896 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 0898 3D                           dec     A               ; no, decrement X
 762+ 0899 32 2E 61                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 089C 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 089F 32 2F 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08A2 C9                           ret                     ; go on moving cursor
 766+ 08A3 3A 2D 61     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08A6 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08A7 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08A9 3D                           dec     A               ; no, decrement Y
 770+ 08AA 32 2F 61                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08AD 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08B0 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08B1 32 2E 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08B4 C9                           ret                     ; return to caller
 775+ 08B5
 776+ 08B5              ; move cursor up
 777+ 08B5 F5           CURSORUP:       push    AF              ; store A
 778+ 08B6 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08B9 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08BA 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08BC 3D                           dec     A               ; no, decrement Y
 782+ 08BD 32 2F 61                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08C0 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08C3 32 2E 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08C6 CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08C9 CD CC 06                     call    MOVCRS          ; move cursor into new position
 787+ 08CC F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08CD C9                           ret                     ; return to caller
 789+ 08CE
 790+ 08CE
 791+ 08CE              ; move cursor to right
 792+ 08CE F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08CF C5                           push    BC              ; store B
 794+ 08D0 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08D3 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08D4 47                           ld      B,A             ; move A into B
 797+ 08D5 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08D8 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08D9 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08DB 3C                           inc     A               ; no, so increment X
 801+ 08DC 32 2E 61                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 08DF 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 08E2 32 2F 61                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 08E5 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 08E7 3A 28 61     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 08EA 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 08EB 47                           ld      B,A             ; move bottom into B
 808+ 08EC 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 08EF B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 08F0 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 08F2 3C                           inc     A               ; no, increment Y
 812+ 08F3 32 2F 61                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 08F6 AF                           xor     A               ; move cursor to top left
 814+ 08F7 32 2E 61                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 08FA CD FC 06     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 08FD CD CC 06                     call    MOVCRS          ; move cursor into new position
 817+ 0900 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0901 F1                           pop     AF              ; restore A
 819+ 0902 C9                           ret                     ; return to caller
 820+ 0903
 821+ 0903
 822+ 0903              ; move cursor down
 823+ 0903 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0904 C5                           push    BC              ; store B
 825+ 0905 3A 28 61                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0908 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 0909 47                           ld      B,A             ; move X into B
 828+ 090A 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 090D B8                           cp      B               ; is current cursor position < 23?
 830+ 090E 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0910 3C                           inc     A               ; yes, increment Y
 832+ 0911 32 2F 61                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0914 3A 2C 61                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0917 32 2E 61                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 091A CD FC 06                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 091D CD CC 06                     call    MOVCRS          ; move cursor into new position
 837+ 0920 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0921 F1                           pop     AF              ; retrieve A
 839+ 0922 C9                           ret                     ; return to caller
 840+ 0923
 841+ 0923
 842+ 0923              ; set cursor on (visible on screen)
 843+ 0923 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0924 3A 31 61                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0927 B7                           or      A               ; is it on?
 846+ 0928 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 092A 3A 28 61                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 092D FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 092F 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0931 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0933 32 31 61                     ld      (CRSR_STATE),A  ; set state
 852+ 0936 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0937 C9                           ret                     ; return to caller
 854+ 0938
 855+ 0938              ; set cursor off (invisible on screen)
 856+ 0938 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 0939 AF                           xor     A               ; cursor state OFF
 858+ 093A 32 31 61                     ld      (CRSR_STATE),A  ; set state
 859+ 093D F1                           pop     AF              ; restore AF
 860+ 093E C9                           ret
 861+ 093F
 862+ 093F              ; scroll the screen 1 row up
 863+ 093F AF           SCROLLUP:       xor     A               ; reset A
 864+ 0940 57                           ld      D,A             ; reset D
 865+ 0941 32 33 61                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0944 2A 2A 61                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0947 22 67 61                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 094A 3A 27 61                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 094D 5F                           ld      E,A             ; move width into E
 870+ 094E 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 094F 22 69 61                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0952 3A 28 61                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0955 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0956 47                           ld      B,A             ; move # of rows into B
 875+ 0957 3A 27 61     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 095A 5F                           ld      E,A             ; move width into E
 877+ 095B 2A 69 61                     ld      HL,(VIDTMP2)    ; load source address
 878+ 095E 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0960 ED 69                        out     (C),L           ; low byte of source
 880+ 0962 ED 61                        out     (C),H           ; high byte of source
 881+ 0964 21 3F 61                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0967 0D                           dec     C              ; VDP data mode
 883+ 0968 00                           nop               ; added to compensate shorter instruction
 884+ 0969 ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 096B 77                           ld      (HL),A          ; store char
 886+ 096C 23                           inc     HL              ; next cell of the buffer
 887+ 096D 1D                           dec     E               ; count the chars to be read
 888+ 096E 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0970 3A 27 61                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0973 5F                           ld      E,A             ; move # of rows into E
 891+ 0974 16 00                        ld      D,$00           ; reset D
 892+ 0976 2A 67 61                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 0979 E5                           push    HL              ; store HL
 894+ 097A 2A 69 61                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 097D 22 67 61                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 0980 19                           add     HL,DE           ; address of new
 897+ 0981 22 69 61                     ld      (VIDTMP2),HL    ; source row
 898+ 0984 E1                           pop     HL              ; restore address of current destination row
 899+ 0985 CB F4                        set     6,H             ; writing mode
 900+ 0987 0E 31                        ld      C,VDP_SET       ; VDP setting mode
 901+ 0989 ED 69                        out     (C),L           ; low byte
 902+ 098B ED 61                        out     (C),H           ; high byte of address
 903+ 098D 21 3F 61                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 0990 0D                           dec     C              ; VDP data mode
 905+ 0991 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 0992 ED 79                        out     (C),A           ; send char
 907+ 0994 23                           inc     HL              ; increment buffer index
 908+ 0995 1D                           dec     E               ; next row
 909+ 0996 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 0998 10 BD                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 099A 3A 27 61                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 099D 47                           ld      B,A             ; cells to empty into B
 913+ 099E AF                           xor     A               ; null char
 914+ 099F 0E 31                        ld      C,VDP_SET       ; VDP set mode
 915+ 09A1 2A 67 61                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09A4 CB F4                        set     6,H             ; writing mode
 917+ 09A6 ED 69                        out     (C),L           ; low byte then..
 918+ 09A8 ED 61                        out     (C),H           ; high byte of address
 919+ 09AA 0D                           dec     C              ; VDP data mode
 920+ 09AB 00                           nop               ; delay
 921+ 09AC ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09AE 00                           nop                     ; delay
 923+ 09AF 00                           nop
 924+ 09B0 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09B2 3E 01                        ld      A,$01
 926+ 09B4 32 33 61                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09B7 C9                           ret                     ; return to caller
 928+ 09B8
 929+ 09B8              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09B8              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09B8              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09B8              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09B8              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09B8              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09B8              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09B8              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09B8 3A 31 61                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09BB 32 3D 61                     ld      (TMPBFR4),A     ; store status
 939+ 09BE A7                           and     A               ; is cursor on?
 940+ 09BF C4 38 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09C2 CD FC 06                     call    RSTCHRCRS       ; restore char under it
 942+ 09C5                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09C5 3A 71 61                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09C8 A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09C9 CA 1E 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09CC                              ; first part: look for the beginning of the text line on screen
 947+ 09CC CD 05 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09CF 22 37 61                     ld      (CUR_POS),HL    ; store it
 949+ 09D2 ED 5B 2A 61                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09D6 E5           RPTNLLSRC:      push    HL
 951+ 09D7 CD F8 4C                     call    CMP16           ; check if at "home"
 952+ 09DA E1                           pop     HL
 953+ 09DB CA E6 09                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 09DE 2B                           dec     HL              ; go 1 step back
 955+ 09DF CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 09E2 A7                           and     A               ; is it $00 (null char)?
 957+ 09E3 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 09E5 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 09E6                              ; second part: look for the ending of the text on screen
 960+ 09E6 22 39 61     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 09E9 CD 3F 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 09EC 22 3B 61                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 09EF ED 5B 39 61                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 09F3 A7                           and     A               ; clear Carry
 965+ 09F4 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 09F6 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 09F8                              ;---    central part: send the text on the screen to the interpreter
 968+ 09F8 2A 39 61                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 09FB ED 5B 3B 61                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 09FF CD 86 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A02 E5                           push    HL
 972+ 0A03 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A06 E1                           pop     HL
 974+ 0A07 23                           inc     HL              ; go to next char
 975+ 0A08 E5                           push    HL              ; store HL
 976+ 0A09 CD F8 4C                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A0C E1                           pop     HL
 978+ 0A0D 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A0F 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A11 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A14 2A 3B 61                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A17 CD 28 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A1A 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A1B 32 2D 61                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A1E                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A1E AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A1F 32 2C 61                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A22 3A 2D 61                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A25 3C                           inc     A               ; new row
 990+ 0A26 21 28 61                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A29 BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A2A 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A2C 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A2D F5                           push    AF              ; (store A)
 995+ 0A2E CD 3F 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A31 F1                           pop     AF              ; (retrieve A)
 997+ 0A32 32 2D 61     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A35 3A 3D 61                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A38 A7                           and     A               ; was it off (A=0)?
1000+ 0A39 C4 23 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A3C C3 C2 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A3F
1003+ 0A3F              ; find end of text line
1004+ 0A3F              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A3F              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A3F 3A 28 61     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A42 5F                           ld      E,A             ; load screen height into DE
1008+ 0A43 3A 27 61                     ld      A,(SCR_SIZE_W)
1009+ 0A46 6F                           ld      L,A             ; load screen width into HL
1010+ 0A47 AF                           xor     A
1011+ 0A48 67                           ld      H,A
1012+ 0A49 57                           ld      D,A
1013+ 0A4A CD 03 4D                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A4D ED 5B 2A 61                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A51 19                           add     HL,DE           ; get the address...
1016+ 0A52 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A53 EB                           ex      DE,HL           ; store address into DE
1018+ 0A54 2A 37 61                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A57 E5           RPTNLLSRC2:     push    HL
1020+ 0A58 CD F8 4C                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A5B E1                           pop     HL
1022+ 0A5C C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A5D 23                           inc     HL              ; 1 more step forward
1024+ 0A5E CD 86 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A61 A7                           and     A               ; is it $00 (null char)?
1026+ 0A62 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A64 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A65
1029+ 0A65
1030+ 0A65              ; ------------------------------------------------------------------------------
1031+ 0A65                              ; this table contains the values of the offsets to be added to
1032+ 0A65                              ; the starting address of the name table to find the correct
1033+ 0A65                              ; value of the first cell of the corresponding row
1034+ 0A65                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A65                              ; table for graphics 1 text mode: 32 cols
1036+ 0A65 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A69 40 00 60 00
1036+ 0A6D 80 00 A0 00
1036+ 0A71 C0 00 E0 00
1037+ 0A75 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A79 40 01 60 01
1037+ 0A7D 80 01 A0 01
1037+ 0A81 C0 01 E0 01
1038+ 0A85 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0A89 40 02 60 02
1038+ 0A8D 80 02 A0 02
1038+ 0A91 C0 02 E0 02
1039+ 0A95                              ; table for pure text mode: 40 cols
1040+ 0A95 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0A99 50 00 78 00
1040+ 0A9D A0 00 C8 00
1040+ 0AA1 F0 00 18 01
1041+ 0AA5 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0AA9 90 01 B8 01
1041+ 0AAD E0 01 08 02
1041+ 0AB1 30 02 58 02
1042+ 0AB5 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0AB9 D0 02 F8 02
1042+ 0ABD 20 03 48 03
1042+ 0AC1 70 03 98 03
1043+ 0AC5
1044+ 0AC5              ; ------------------------------------------------------------------------------
1045+ 0AC5              ; reset VRAM
1046+ 0AC5 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AC6 67                           ld      H,A
1048+ 0AC7 6F                           ld      L,A             ; reset HL
1049+ 0AC8 CD 66 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0ACB 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0ACD 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0ACE 0D                           dec     C              ; VDP data mode
1053+ 0ACF ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AD1 14                           inc     D               ; next cell
1055+ 0AD2 00                           nop
1056+ 0AD3 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AD5 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AD7 C9                           ret                     ; return to caller
1059+ 0AD8
1060+ 0AD8              ; clear video registers in SRAM
1061+ 0AD8 21 27 61     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0ADB AF                           xor     A               ; $00 to clean the registers
1063+ 0ADC 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0ADE 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0ADF 23                           inc     HL              ; next register
1066+ 0AE0 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0AE2 C9                           ret                     ; return to caller
1068+ 0AE3
1069+ 0AE3              ; ------------------------------------------------------------------------------
1070+ 0AE3              ; set a specific graphics mode, passed into reg. E
1071+ 0AE3 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0AE5 CB 23                        sla     E               ; multiply E by 8..
1073+ 0AE7 CB 23                        sla     E               ; so that reg. E can point..
1074+ 0AE9 CB 23                        sla     E               ; to the correct settings
1075+ 0AEB 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0AED 21 1F 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0AF0 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0AF1 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0AF3 0E 31                        ld      C,VDP_SET       ; VDP set
1080+ 0AF5 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0AF6 ED 51                        out     (C),D           ; send data to VDP
1082+ 0AF8 ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0AFA 3C                           inc     A               ; next register
1084+ 0AFB 23                           inc     HL              ; next value
1085+ 0AFC 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0AFE C9                           ret
1087+ 0AFF
1088+ 0AFF              ; ------------------------------------------------------------------------------
1089+ 0AFF              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0AFF                              ; reg. HL contains address of pattern table into VRAM
1091+ 0AFF 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B01 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B03 0E 31                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B05 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B07 ED 61                        out     (C),H           ; send high byte
1096+ 0B09 0D                           dec     C              ; VDP data mode
1097+ 0B0A 21 2E 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B0D A7                           and     A               ; is it text mode (A=0)?
1099+ 0B0E 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B10 21 2E 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B13 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B15 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B16 ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B18 23                           inc     HL              ; inc byte pointer
1105+ 0B19 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B1A 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B1C 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B1E C9                           ret                     ; return to caller
1109+ 0B1F
1110+ 0B1F              ;------------------------------------------------------------------------------
1111+ 0B1F              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B1F              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B1F              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B1F
1115+ 0B1F                              ; VDP register settings for a text display
1116+ 0B1F 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B20 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B21 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B22 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B23 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B24 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B25 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B26 F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B27
1125+ 0B27              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B27 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B28 C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B29 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B2A 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B2B 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B2C 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B2D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B2E 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B2F
1135+ 0B2F              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B2F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B30 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B31 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B32 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B33 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B34 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B35 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B36 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B37
1145+ 0B37              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B37 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B38 CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B39 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B3A 00                           defb    $00             ; reg.3: don't care
1150+ 0B3B 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B3C 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B3D 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B3E 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B3F
1155+ 0B3F              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B3F 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B40 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B41 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B42 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B43 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B44 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B45 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B46 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B47
1165+ 0B47              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B47                              ; 1st band
1167+ 0B47 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B4B 00 00 00 00
1167+ 0B4F 00 00 00 00
1167+ 0B53 00 00 00 00
1167+ 0B57 00 00 00 00
1167+ 0B5B 00 00 00 00
1167+ 0B5F 00 00 00 00
1167+ 0B63 00 00 00 00
1168+ 0B67 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B6B 0B 10 00 00
1168+ 0B6F 00 00 00 00
1168+ 0B73 00 00 00 00
1168+ 0B77 00 00 00 00
1168+ 0B7B 00 00 00 00
1168+ 0B7F 00 00 00 00
1168+ 0B83 00 00 00 00
1169+ 0B87                              ; 2nd band
1170+ 0B87 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0B8B 00 0C 00 00
1170+ 0B8F 00 01 00 00
1170+ 0B93 00 14 00 00
1170+ 0B97 06 05 06 15
1170+ 0B9B 16 07 06 15
1170+ 0B9F 16 07 06 01
1170+ 0BA3 01 07 00 00
1171+ 0BA7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BAB 00 0C 00 00
1171+ 0BAF 00 01 00 00
1171+ 0BB3 00 01 14 06
1171+ 0BB7 01 05 03 05
1171+ 0BBB 03 05 03 05
1171+ 0BBF 03 05 03 05
1171+ 0BC3 03 05 00 00
1172+ 0BC7                              ; 3rd band
1173+ 0BC7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BCB 00 0C 00 00
1173+ 0BCF 00 01 00 00
1173+ 0BD3 00 01 01 01
1173+ 0BD7 01 05 09 14
1173+ 0BDB 13 08 03 05
1173+ 0BDF 13 05 03 05
1173+ 0BE3 00 00 00 00
1174+ 0BE7 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0BEB 00 0C 00 00
1174+ 0BEF 00 01 00 00
1174+ 0BF3 00 01 00 08
1174+ 0BF7 03 05 06 15
1174+ 0BFB 16 07 03 01
1174+ 0BFF 16 05 03 05
1174+ 0C03 00 00 00 00
1175+ 0C07                              ; 4th band
1176+ 0C07 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C0B 00 0C 00 00
1176+ 0C0F 00 01 00 00
1176+ 0C13 00 01 00 00
1176+ 0C17 03 05 03 05
1176+ 0C1B 03 05 03 05
1176+ 0C1F 03 05 03 05
1176+ 0C23 03 05 00 00
1177+ 0C27 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C2B 00 0C 00 00
1177+ 0C2F 00 01 04 04
1177+ 0C33 00 01 00 00
1177+ 0C37 03 05 09 14
1177+ 0C3B 13 08 09 14
1177+ 0C3F 13 08 09 01
1177+ 0C43 01 08 00 00
1178+ 0C47                              ; 5th band
1179+ 0C47 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C4B 12 11 00 00
1179+ 0C4F 00 00 00 00
1179+ 0C53 00 00 00 00
1179+ 0C57 00 00 00 00
1179+ 0C5B 00 00 00 00
1179+ 0C5F 00 00 00 00
1179+ 0C63 00 00 00 00
1180+ 0C67 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C6B 00 00 00 00
1180+ 0C6F 00 00 00 00
1180+ 0C73 00 00 00 00
1180+ 0C77 00 00 00 00
1180+ 0C7B 00 00 00 00
1180+ 0C7F 00 00 00 00
1180+ 0C83 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0C87
  78  0C87              ; incude the latest version of the PSG module
  79  0C87                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0C87              ; ------------------------------------------------------------------------------
   2+ 0C87              ; LM80C - PSG ROUTINES - 1.1
   3+ 0C87              ; ------------------------------------------------------------------------------
   4+ 0C87              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0C87              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0C87              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0C87              ; kind of warranty: you can use them at your own risk.
   8+ 0C87              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0C87              ; maintain the copyright notices, include this advice and the note to the
  10+ 0C87              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0C87              ; redistribuite them.
  12+ 0C87              ; https://www.leonardomiliani.com
  13+ 0C87              ;
  14+ 0C87              ; Please support me by visiting the following links:
  15+ 0C87              ; Main project page: https://www.leonardomiliani.com
  16+ 0C87              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0C87              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0C87              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0C87              ; ------------------------------------------------------------------------------
  20+ 0C87              ;
  21+ 0C87              ; ------------------------------------------------------------------------------
  22+ 0C87
  23+ 0C87              ;------------------------------------------------------------------------------
  24+ 0C87
  25+ 0C87              ; configure the PSG
  26+ 0C87 21 6B 61     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0C8A 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0C8C AF                           xor     A               ; reset A
  29+ 0C8D 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0C8E 23                           inc     HL              ; next register
  31+ 0C8F 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0C91 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0C93 21 A5 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0C96 16 00                        ld      D,$00           ; first register
  35+ 0C98 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0C99 CD DF 0C                     call    SETSNDREG       ; select register
  37+ 0C9C 7E                           ld      A,(HL)          ; load value
  38+ 0C9D CD E4 0C                     call    WRTSNDREG       ; write to register
  39+ 0CA0 14                           inc     D               ; next register
  40+ 0CA1 23                           inc     HL              ; next value
  41+ 0CA2 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CA4 C9                           ret                     ; return to caller
  43+ 0CA5
  44+ 0CA5 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CA9 00 00 00 BF
  45+ 0CAD 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CB1 00 00 FF FF
  46+ 0CB5                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CB5
  48+ 0CB5
  49+ 0CB5              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CB5 21 CF 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CB8 C3 BE 0C                     jp      SENDSND
  52+ 0CBB 21 D7 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CBE C5           SENDSND:        push    BC
  54+ 0CBF 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CC1 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CC2 CD DF 0C                     call    SETSNDREG
  57+ 0CC5 23                           inc     HL              ; next cell
  58+ 0CC6 7E                           ld      A,(HL)          ; read value
  59+ 0CC7 CD E4 0C                     call    WRTSNDREG
  60+ 0CCA 23                           inc     HL
  61+ 0CCB 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CCD C1                           pop     BC
  63+ 0CCE C9                           ret                     ; return to caller
  64+ 0CCF
  65+ 0CCF 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CD3 05 00 0A 0F
  66+ 0CD7 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CDB 0A 00 07 BF
  67+ 0CDF
  68+ 0CDF
  69+ 0CDF              ; select register on PSG
  70+ 0CDF 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0CE1 ED 79                        out     (C),A           ; set register
  72+ 0CE3 C9                           ret                     ; return to caller
  73+ 0CE4
  74+ 0CE4              ; send data to PSG
  75+ 0CE4 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0CE6 ED 79                        out     (C),A           ; send data
  77+ 0CE8 C9                           ret                     ; return to caller
  78+ 0CE9
  79+ 0CE9              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0CE9              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0CE9              ; shut off the audio channel whose counter has reached 0.
  82+ 0CE9              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0CE9 DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0CEB DD 21 6B 61                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0CEF 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0CF1 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0CF3 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0CF6 DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0CF9 7B                           ld      A,E             ; load E into A
  90+ 0CFA B2                           or      D               ; check that DE=0
  91+ 0CFB 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0CFD 1B                           dec     DE              ; no, so decrement DE
  93+ 0CFE 7B                           ld      A,E             ; reload E into A...
  94+ 0CFF DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D02 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D05 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D06 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D08                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D08                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D08                                                      ; then set 0 into its tone registers
 101+ 0D08 16 07                        ld      D,$07           ; mixer register
 102+ 0D0A 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D0C ED 51                        out     (C),D           ; set mixer register
 104+ 0D0E ED 78                        in      A,(C)           ; load current value
 105+ 0D10 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D11 ED 51                        out     (C),D           ; select mixer register
 107+ 0D13 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D15 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D17 3E 03                        ld      A,$03           ; three channels
 110+ 0D19 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D1A 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D1B 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D1D ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D1F 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D21 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D23 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D25 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D27 3C                           inc     A               ; next tone register
 119+ 0D28 ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D2A 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D2C ED 69                        out     (C),L           ; write 0 into register
 122+ 0D2E DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D30 DD 23                        inc     IX              ; ...next channel...
 124+ 0D32 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D34 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D36 DD E1                        pop     IX              ; restore IX
 127+ 0D38 C9                           ret                     ; return to caller
 128+ 0D39
 129+ 0D39              ; read a specific row of the keyboard matrix, set by A
 130+ 0D39              ; return read into A
 131+ 0D39 C5           READKBLN:       push    BC              ; store BC
 132+ 0D3A 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D3C 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D3E ED 41                        out     (C),B           ; select reg #15
 135+ 0D40 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D42 ED 79                        out     (C),A           ; activate the row
 137+ 0D44 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D46 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D48 ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D4A ED 78                        in      A,(C)           ; read register #14
 141+ 0D4C C1                           pop     BC              ; retrieve BC
 142+ 0D4D C9                           ret
 143+ 0D4E
 144+ 0D4E              ; read the keyboard matrix to look for a key pressure
 145+ 0D4E 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D50 06 07                        ld      B,$07           ; set register #7...
 147+ 0D52 ED 41                        out     (C),B           ; ...to work with
 148+ 0D54 ED 78                        in      A,(C)           ; read register #7
 149+ 0D56 CB FF                        set     7,A             ; port A set to output
 150+ 0D58 CB B7                        res     6,A             ; port B set to input
 151+ 0D5A ED 41                        out     (C),B           ; set register #7
 152+ 0D5C 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D5E ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D60                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D60 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D62 CD 39 0D                     call    READKBLN        ; read row
 157+ 0D65 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D67 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D69 21 78 61                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D6C 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D6E 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D70 CD 39 0D                     call    READKBLN        ; read ALT row
 163+ 0D73 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D75 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D77 21 78 61                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D7A 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0D7C 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0D7E CD 39 0D                     call    READKBLN        ; read CTRL row
 169+ 0D81 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0D83 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0D85 21 78 61                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0D88 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0D8A 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0D8C 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0D8E 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0D90 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0D92 ED 51                        out     (C),D           ; select reg. #15
 178+ 0D94 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0D96 ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0D98 5F                           ld      E,A             ; save current line into E
 181+ 0D99 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0D9B 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0D9D ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0D9F 00                           nop
 185+ 0DA0 ED 78                        in      A,(C)           ; read register #14
 186+ 0DA2 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DA4 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DA6                              ; check control keys
 189+ 0DA6 32 72 61                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DA9 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DAA FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DAC 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DAE 3A 72 61                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DB1 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DB3 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DB5 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DB7 FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DB9 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DBB 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DBD FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DBF 3A 72 61                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DC2 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DC4 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DC6 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DC8 CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DCA CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DCC 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DCE CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DD0 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DD2 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DD4 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DD5 0F                           rrca                    ; rotate right by 1
 213+ 0DD6 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DD8 AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DD9 32 74 61                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0DDC 32 78 61                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0DDF 32 71 61                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0DE2 32 75 61                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0DE5 C9                           ret                     ; ...and leave
 220+ 0DE6 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0DE8 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0DE9 CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0DEB 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0DED 3A 78 61                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0DF0 21 09 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0DF3 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0DF5 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0DF7 21 49 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0DFA 18 10                        jr      LOADMAP         ; and load it
 230+ 0DFC FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0DFE 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E00 21 C9 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E03 18 07                        jr      LOADMAP         ; and load it
 234+ 0E05 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E07 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E09 21 89 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E0C 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E0D 48                           ld      C,B             ; move B into C and...
 239+ 0E0E CB 21                        sla     C               ; ...multiply it...
 240+ 0E10 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E12 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E14 06 00                        ld      B,$00           ; reset B
 243+ 0E16 09                           add     HL,BC           ; find the address of the current row
 244+ 0E17 50                           ld      D,B             ; reset D
 245+ 0E18 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E19 3A 74 61                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E1C BE                           cp      (HL)            ; is it the same key?
 248+ 0E1D 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E1F 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E21 2A 17 61                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E24 ED 5B 76 61                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E28 3A 75 61                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E2B FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E2D 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E2F AF                           xor     A               ; clear Carry
 256+ 0E30 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E32 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E34 3A E5 5F                     ld      A,(KEYDEL)
 259+ 0E37 5F                           ld      E,A
 260+ 0E38 CD F8 4C                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E3B DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E3E 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E40 32 75 61                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E43 2A 17 61                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E46 22 76 61                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E49 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E4B C3 6D 0E                     jp      SENDKEY         ; send key
 268+ 0E4E AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E4F ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E51 16 00                        ld      D,$00
 271+ 0E53 3A E6 5F                     ld      A,(AUTOKE)
 272+ 0E56 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E57 CD F8 4C                     call    CMP16           ; check if interval is greater than delay
 274+ 0E5A DA B0 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E5D C3 3E 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E60 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E61 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E62 32 75 61                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E65 ED 4B 17 61                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E69 ED 43 76 61                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E6D 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E6E 32 74 61                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E71 32 73 61                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E74 32 34 61                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E77 FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E79 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E7B CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0E7E 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0E80 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0E83 21 01 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0E86 BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0E87 CA B5 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0E8A 0C                           inc     C               ; next FN key
 294+ 0E8B 23                           inc     HL              ; next FN key code
 295+ 0E8C 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0E8E 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0E90 32 71 61                     ld      (KBDNPT),A      ; to keyboard
 298+ 0E93 3A 33 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0E96 B7                           or      A               ; is the print-on-video disabled?
 300+ 0E97 CA A0 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0E9A 3A 31 61                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0E9D B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0E9E 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EA0 AF           PUTCHRBUF:      xor     A
 305+ 0EA1 32 71 61                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EA4 3A 73 61                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0EA7 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0EAA C3 B0 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0EAD CD 57 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0EB0 AF           LVKBRDCHK2:     xor     A
 311+ 0EB1 32 78 61                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0EB4 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0EB5                              ; manage FN keys
 314+ 0EB5 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EB6 2A E1 5F                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EB9 23                           inc     HL              ; -1 means direct statement
 317+ 0EBA 7C                           ld      A,H
 318+ 0EBB B5                           or      L
 319+ 0EBC 7A                           ld      A,D             ; retrieve char
 320+ 0EBD 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EBF 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EC0 87                           add     A,A
 323+ 0EC1 87                           add     A,A
 324+ 0EC2 87                           add     A,A
 325+ 0EC3 87                           add     A,A             ; FN key number * 16
 326+ 0EC4 4F                           ld      C,A             ; move it into C
 327+ 0EC5 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EC7 21 E7 5F                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0ECA 09                           add     HL,BC           ; get correct text address
 330+ 0ECB 06 10                        ld      B,$10           ; 16 chars
 331+ 0ECD 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0ECE A7                           and     A               ; null char?
 333+ 0ECF CA B0 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0ED2 57                           ld      D,A             ; pass char into D
 335+ 0ED3 3A 33 61                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0ED6 B7                           or      A               ; is the print-on-video disabled?
 337+ 0ED7 CA E7 0E                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EDA 3A 31 61                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0EDD B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0EDE C4 F4 0E                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0EE1 23           CNTFNK:         inc     HL              ; next char
 342+ 0EE2 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0EE4 C3 B0 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0EE7 AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0EE8 32 71 61                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0EEB 7A                           ld      A,D             ; retrieve char
 347+ 0EEC E5                           push    HL              ; store HL
 348+ 0EED CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0EF0 E1                           pop     HL              ; retrieve HL
 350+ 0EF1 C3 E1 0E                     jp      CNTFNK          ; repeat
 351+ 0EF4 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0EF5 32 34 61                     ld      (CHR4VID),A     ; store char for printing
 353+ 0EF8 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0EFA 32 71 61                     ld      (KBDNPT),A      ; to keyboard
 355+ 0EFD CD 57 07                     call    CHAR2VID        ; print on screen
 356+ 0F00 C9                           ret                     ; return to caller
 357+ 0F01
 358+ 0F01
 359+ 0F01              ;-----------------------------------------------------------------------
 360+ 0F01 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F05 06 16 17 18
 361+ 0F09              ;-----------------------------------------------------------------------
 362+ 0F09              ; key codes
 363+ 0F09 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F0D 20 10 71 32
 364+ 0F11 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F15 7A 73 65 34
 365+ 0F19 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F1D 63 66 74 36
 366+ 0F21 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F25 62 68 75 38
 367+ 0F29 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F2D 6D 6B 6F 30
 368+ 0F31 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F35 2E 3A 2D 1E
 369+ 0F39 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F3D 1B 3D 2B 1D
 370+ 0F41 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F45 01 02 04 18
 371+ 0F49
 372+ 0F49              ; shifted codes - not all the keys have the shifted version
 373+ 0F49 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F4D 20 10 51 22
 374+ 0F51 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F55 5A 53 45 24
 375+ 0F59 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F5D 43 46 54 26
 376+ 0F61 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F65 42 48 55 28
 377+ 0F69 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F6D 4D 4B 4F 5E
 378+ 0F71 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F75 3E 5B 5F 1E
 379+ 0F79 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0F7D 1B C6 2B 1D
 380+ 0F81 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0F85 05 06 16 17
 381+ 0F89
 382+ 0F89              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0F89 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0F8D 20 10 DE C4
 384+ 0F91 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0F95 83 82 A5 34
 385+ 0F99 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0F9D 9D A3 A8 36
 386+ 0FA1 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FA5 9E AC D5 38
 387+ 0FA9 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FAD A0 D7 87 C3
 388+ 0FB1 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FB5 C0 7B 90 1E
 389+ 0FB9 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FBD 1B D1 94 1D
 390+ 0FC1 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FC5 05 06 16 17
 391+ 0FC9
 392+ 0FC9              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FC9 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FCD 20 10 9A 32
 394+ 0FD1 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FD5 98 96 99 34
 395+ 0FD9 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 0FDD B1 AF A5 36
 396+ 0FE1 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 0FE5 B3 A9 A7 38
 397+ 0FE9 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 0FED AB B5 A4 30
 398+ 0FF1 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 0FF5 2E 3A BA 1E
 399+ 0FF9 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 0FFD 1B D4 B9 1D
 400+ 1001 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1005 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  1009
  81  1009              ; include the latest versions of the CF & DOS modules
  82  1009                  INCLUDE "../include/dos/bios-1.0.asm"
# file opened: ../include/dos/bios-1.0.asm
   1+ 1009              ; ------------------------------------------------------------------------------
   2+ 1009              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 1009              ; ------------------------------------------------------------------------------
   4+ 1009              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1009              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1009              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1009              ; kind of warranty: you can use them at your own risk.
   8+ 1009              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1009              ; maintain the copyright notices, include this advice and the note to the
  10+ 1009              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1009              ; redistribuite them.
  12+ 1009              ; https://www.leonardomiliani.com
  13+ 1009              ;
  14+ 1009              ; Please support me by visiting the following links:
  15+ 1009              ; Main project page: https://www.leonardomiliani.com
  16+ 1009              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1009              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1009              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1009              ; ------------------------------------------------------------------------------
  20+ 1009              ;
  21+ 1009              ; ------------------------------------------------------------------------------
  22+ 1009              ; Code Revision:
  23+ 1009              ; R1.0 - 20210307 - first release
  24+ 1009              ;
  25+ 1009              ;------------------------------------------------------------------------------
  26+ 1009
  27+ 1009              ; equates for CF at port $50
  28+ 1009              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  29+ 1009              CF_ERR:         equ %01010001   ; ($51) Error (R)
  30+ 1009              CF_FTR:         equ %01010001   ; ($51) Features (W)
  31+ 1009              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  32+ 1009              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  33+ 1009              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  34+ 1009              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  35+ 1009              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  36+ 1009              CF_STAT:        equ %01010111   ; ($57) Status (R)
  37+ 1009              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  38+ 1009
  39+ 1009
  40+ 1009              ;------------------------------------------------------------------------------
  41+ 1009              ; R O U T I N E S
  42+ 1009              ;------------------------------------------------------------------------------
  43+ 1009
  44+ 1009              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  45+ 1009 CD 1F 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  46+ 100C CD 6D 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  47+ 100F D8                       ret     C               ; no card or I/O error, leave
  48+ 1010 3E 01                    ld      A,$01           ; 8-bit mode
  49+ 1012 D3 51                    out     (CF_FTR),A      ; set mode
  50+ 1014 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  51+ 1017 3E EF                    ld      A,$EF           ; command to set mode
  52+ 1019 D3 57                    out     (CF_CMD),A      ; execute command
  53+ 101B CD 28 10                 call    CF_BUSY         ; wait for CF being ready
  54+ 101E C9                       ret                     ; return to caller
  55+ 101F
  56+ 101F
  57+ 101F              ; a NOP command, just used to wake up the CF card
  58+ 101F 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  59+ 1021 D3 51                    out     (CF_FTR),A      ; send it
  60+ 1023 3E EF                    ld      A,$EF           ; set mode command
  61+ 1025 D3 57                    out     (CF_CMD),A      ; execute NOP
  62+ 1027 C9                       ret                     ; return to caller
  63+ 1028
  64+ 1028
  65+ 1028              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  66+ 1028 DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  67+ 102A 07                       rlca                    ; copy bit #7 into the Carry
  68+ 102B DA 28 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  69+ 102E C9                       ret                     ; bit #7 cleared - return to caller
  70+ 102F
  71+ 102F
  72+ 102F              ; check that CF is ready to get commands
  73+ 102F DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  74+ 1031 E6 C0                    and     %11000000       ; check only bits #6 & #7
  75+ 1033 EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  76+ 1035 20 F8                    jr      NZ,CF_CMDRDY    ; wait
  77+ 1037 C9                       ret                     ; return to caller
  78+ 1038
  79+ 1038
  80+ 1038              ; wait until data is ready to be read
  81+ 1038 DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  82+ 103A E6 88                    and     %10001000       ; check only bits #7 & #3
  83+ 103C EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  84+ 103E 20 F8                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  85+ 1040 C9                       ret                     ; return to caller
  86+ 1041
  87+ 1041
  88+ 1041              ; check for errors
  89+ 1041 DB 57        CF_CHKERR:  in      A,(CF_STAT)     ; read status register
  90+ 1043 1F                       rra                     ; move error bit #0 into Carry
  91+ 1044 C9                       ret                     ; return to caller
  92+ 1045
  93+ 1045
  94+ 1045              ; raw read 1 byte from CF
  95+ 1045 CD 38 10     CF_RAWRDBT: call    CF_DAT_RDY      ; check if data is ready
  96+ 1048 DB 50                    in      A,(CF_DATA)     ; read byte
  97+ 104A C9                       ret                     ; return to caller
  98+ 104B
  99+ 104B
 100+ 104B              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
 101+ 104B CD 2F 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
 102+ 104E 3E 01                    ld      A,$01           ; 1 sector at a time
 103+ 1050 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
 104+ 1052 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 105+ 1055 79                       ld      A,C             ; load LBA0 byte
 106+ 1056 D3 53                    out     (CF_LBA0),A     ; send it
 107+ 1058 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 108+ 105B 78                       ld      A,B             ; load LBA1 byte
 109+ 105C D3 54                    out     (CF_LBA1),A     ; send it
 110+ 105E CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 111+ 1061 7B                       ld      A,E             ; load LBA2 byte
 112+ 1062 D3 55                    out     (CF_LBA2),A     ; send it
 113+ 1064 CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 114+ 1067 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 115+ 1069 B2                       or      D               ; add LBA sector
 116+ 106A D3 56                    out     (CF_LBA3),A     ; send it
 117+ 106C C9                       ret                     ; return to caller
 118+ 106D
 119+ 106D
 120+ 106D              ; check if device is available & ready - try a bit of times, then exit with
 121+ 106D              ; error if no response, otherwise wait until device is ready
 122+ 106D              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 123+ 106D C5           CR_DEV_RDY: push    BC              ; store HL
 124+ 106E 06 00                    ld      B,$00           ; 256 tries
 125+ 1070 0E 57                    ld      C,CF_STAT       ; address of status register
 126+ 1072 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 127+ 1074 FE 40                    cp      %01000000       ; busy=0, rdy=1
 128+ 1076 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 129+ 1078 FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 130+ 107A 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 131+ 107C 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 132+ 107E 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 133+ 107F C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 134+ 1080 C9                       ret                     ; return to caller
 135+ 1081
 136+ 1081
 137+ 1081              ; put the CF into stand-by mode
 138+ 1081 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 139+ 1083 D3 56                    out 	(CF_LBA3),A     ; send configuration
 140+ 1085 3E 92                    ld      A,$92           ; standby mode
 141+ 1087 D3 57                    out     (CF_CMD),A      ; send command
 142+ 1089 CD 28 10                 call    CF_BUSY         ; wait for CF being ready
 143+ 108C C9                       ret                     ; return to caller
 144+ 108D
 145+ 108D
 146+ 108D              ;***************************************************************************
 147+ 108D              ; CF_RD_SEC
 148+ 108D              ; Function: load a sector (512 bytes) into RAM buffer.
 149+ 108D              ;***************************************************************************
 150+ 108D CD 2F 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 151+ 1090 3E 20                    ld      A,$20           ; Prepare read command
 152+ 1092 D3 57                    out     (CF_CMD),A      ; Send read command
 153+ 1094 CD 38 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 154+ 1097 DB 57                    in      A,(CF_STAT)     ; Read status
 155+ 1099 E6 01                    and     %00000001       ; mask off error bit
 156+ 109B C2 8D 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 157+ 109E              ; read CF buffer after it's been filled up by a previous command
 158+ 109E              ; and store data into the I/O buffer
 159+ 109E C5           CF_RD_CMD:  push    BC              ; store BC
 160+ 109F E5                       push    HL              ; store HL
 161+ 10A0 2A CC 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 162+ 10A3 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 163+ 10A5 CD 38 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 164+ 10A8 DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 165+ 10AA 77                       ld      (HL),A          ; store into buffer
 166+ 10AB 23                       inc     HL              ; next location
 167+ 10AC DB 50                    in      A,(CF_DATA)     ; get another byte
 168+ 10AE 77                       ld      (HL),A          ; store it
 169+ 10AF 23                       inc     HL              ; next location
 170+ 10B0 10 F6                    djnz    CF_RD_SECT      ; repeat
 171+ 10B2 E1                       pop     HL              ; retrieve HL
 172+ 10B3 C1                       pop     BC              ; retrieve BC
 173+ 10B4 C9                       ret                     ; return to caller
 174+ 10B5
 175+ 10B5
 176+ 10B5              ;***************************************************************************
 177+ 10B5              ; CF_WR_SEC
 178+ 10B5              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 179+ 10B5              ;***************************************************************************
 180+ 10B5 C5           CF_WR_SEC:  push    BC              ; store BC
 181+ 10B6 D5                       push    DE              ; store DE
 182+ 10B7 E5                       push    HL              ; store HL
 183+ 10B8 CD 4B 10                 call    CF_SETSTR       ; set sector
 184+ 10BB CD 2F 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 185+ 10BE 3E 30                    ld      A,$30           ; set write command
 186+ 10C0 D3 57                    out     (CF_CMD),A      ; send command
 187+ 10C2 CD 38 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 188+ 10C5 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10C8 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10CA 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10CC 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10CD D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10CF 23                       inc     HL              ; next location
 194+ 10D0 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10D2 1D                       dec     E               ; 2 cycles
 196+ 10D3 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 10D5 CD 28 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 10D8 E1                       pop     HL              ; retrieve HL
 199+ 10D9 D1                       pop     DE              ; retrieve DE
 200+ 10DA C1                       pop     BC              ; retrieve BC
 201+ 10DB C9                       ret                     ; return to caller
 202+ 10DC
# file closed: ../include/dos/bios-1.0.asm
  83  10DC                  INCLUDE "../include/dos/dos-1.0.asm"
# file opened: ../include/dos/dos-1.0.asm
   1+ 10DC              ; ------------------------------------------------------------------------------
   2+ 10DC              ; LM80C 64K - DOS ROUTINES - R1.0
   3+ 10DC              ; ------------------------------------------------------------------------------
   4+ 10DC              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 10DC              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 10DC              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 10DC              ; kind of warranty: you can use them at your own risk.
   8+ 10DC              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 10DC              ; maintain the copyright notices, include this advice and the note to the
  10+ 10DC              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 10DC              ; redistribuite them.
  12+ 10DC              ; https://www.leonardomiliani.com
  13+ 10DC              ;
  14+ 10DC              ; Please support me by visiting the following links:
  15+ 10DC              ; Main project page: https://www.leonardomiliani.com
  16+ 10DC              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 10DC              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 10DC              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 10DC              ; ------------------------------------------------------------------------------
  20+ 10DC              ;
  21+ 10DC              ; ------------------------------------------------------------------------------
  22+ 10DC              ; Code Revision:
  23+ 10DC              ; R1.0 - 20210306 - first release
  24+ 10DC              ;
  25+ 10DC              ;------------------------------------------------------------------------------
  26+ 10DC
  27+ 10DC
  28+ 10DC 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.00",$00     ; disk header
  28+ 10E0 43 20 44 4F
  28+ 10E4 53 00 31 2E
  28+ 10E8 30 30 00
  29+ 10EB 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  30+ 10ED
  31+ 10ED              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  32+ 10ED              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  33+ 10ED              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  34+ 10ED              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  35+ 10ED              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  36+ 10ED              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  37+ 10ED              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  38+ 10ED              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  39+ 10ED              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  40+ 10ED              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  41+ 10ED              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  42+ 10ED              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  43+ 10ED              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  44+ 10ED              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  45+ 10ED              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  46+ 10ED
  47+ 10ED              ; *****************************************************************************
  48+ 10ED              ; D I S K    I N I T
  49+ 10ED              ; Functions: format a disk creating a fresh new file system on disk or
  50+ 10ED              ;            rewrite only the Master Sector
  51+ 10ED              ; *****************************************************************************
  52+ 10ED 3A E6 60     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  53+ 10F0 32 37 61                 ld      (TMPBFR1),A     ; save onto another location for later use
  54+ 10F3 CD 92 18                 call    CLRIOBF         ; clear I/O buffer
  55+ 10F6 CD A7 18                 call    CLRDOSBF        ; clear DOS buffer
  56+ 10F9 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  57+ 10FB D3 56                    out 	(CF_LBA3),A     ; send configuration
  58+ 10FD 3E EC                    ld      A,$EC           ; select "drive ID" command
  59+ 10FF D3 57                    out     (CF_CMD),A      ; send command
  60+ 1101 CD 38 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  61+ 1104 CD 9E 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  62+ 1107 ED 5B CA 60              ld      DE,(DOSBFR)     ; address of default conf. buffer
  63+ 110B 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  64+ 110E 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  65+ 1111 09                       add     HL,BC           ; set into HL
  66+ 1112 0E 04                    ld      C,$04           ; 4 bytes to copy
  67+ 1114 ED B0                    ldir                    ; copy (DE is auto-incremented)
  68+ 1116 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  69+ 1119 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  70+ 111C 09                       add     HL,BC           ; get position of data
  71+ 111D ED B0                    ldir                    ; copy (DE is auto-incremented)
  72+ 111F 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  73+ 1122 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  74+ 1125 09                       add     HL,BC           ; get position of data
  75+ 1126 0E 02                    ld      C,$02           ; 2 bytes to copy
  76+ 1128 ED B0                    ldir                    ; copy (DE is auto-incremented)
  77+ 112A 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  78+ 112D 01 06 00                 ld      BC,$0006        ; address of number of heads
  79+ 1130 09                       add     HL,BC           ; get position of data
  80+ 1131 0E 02                    ld      C,$02           ; 2 bytes to copy
  81+ 1133 ED B0                    ldir                    ; copy (DE is auto-incremented)
  82+ 1135                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  83+ 1135 ED 53 E6 60              ld      (TPBF4),DE      ; store current pointer to temp. def. conf. buffer
  84+ 1139 2A CA 60                 ld      HL,(DOSBFR)     ; load first 2 BYTES
  85+ 113C 4E                       ld      C,(HL)          ; load into AC
  86+ 113D 23                       inc     HL
  87+ 113E 7E                       ld      A,(HL)
  88+ 113F 23                       inc     HL
  89+ 1140 5E                       ld      E,(HL)          ; load into DE
  90+ 1141 23                       inc     HL
  91+ 1142 56                       ld      D,(HL)
  92+ 1143 D5                       push    DE              ; move DE into IX
  93+ 1144 DD E1                    pop     IX
  94+ 1146 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  95+ 1149 CD 77 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  96+ 114C 47                       ld      B,A             ; now result is into BCIX
  97+ 114D B1                       or      C               ; BC=$0000?
  98+ 114E 28 05                    jr      Z,DOS_FTC       ; yes, but.....
  99+ 1150 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 100+ 1153 18 0E                    jr      DOS_FT1         ; jump over
 101+ 1155 DD E5        DOS_FTC:    push    IX              ; move IX into DE
 102+ 1157 D1                       pop     DE              ; now result is into BCDE
 103+ 1158 7C                       ld      A,H             ; remainder = zero?
 104+ 1159 B5                       or      L
 105+ 115A CA 63 11                 jp      Z,DOS_FT1       ; yes, jump over
 106+ 115D 13                       inc     DE              ; no, increment DE
 107+ 115E 7A                       ld      A,D             ; check if DE is zero
 108+ 115F B3                       or      E
 109+ 1160 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 110+ 1162 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 111+ 1163 2A E6 60     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 112+ 1166 73                       ld      (HL),E          ; store # of entries
 113+ 1167 23                       inc     HL
 114+ 1168 72                       ld      (HL),D
 115+ 1169 23                       inc     HL
 116+ 116A D5                       push    DE              ; store entries
 117+ 116B EB                       ex      DE,HL           ; copy current pointer into DE
 118+ 116C 21 EB 10                 ld      HL,DSKDIRADR    ; address of directory start
 119+ 116F 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 120+ 1172 ED B0                    ldir                    ; copy into buffer
 121+ 1174                          ; now we calculate the starting sector of data area
 122+ 1174 E1                       pop     HL              ; entries into HL
 123+ 1175 0E 10                    ld      C,$10           ; 16 entries per sector
 124+ 1177 CD 53 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 125+ 117A B7                       or      A               ; remainder = 0?
 126+ 117B 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 127+ 117D 23                       inc     HL              ; increment sectors
 128+ 117E E5           DOS_FT2:    push    HL              ; store size of directory
 129+ 117F FD E1                    pop     IY              ; into IY
 130+ 1181 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 131+ 1182 EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 132+ 1183 73                       ld      (HL),E          ; store starting of
 133+ 1184 23                       inc     HL              ; data area
 134+ 1185 72                       ld      (HL),D          ; into buffer
 135+ 1186                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 136+ 1186 CD 92 18                 call    CLRIOBF         ; clear I/O buffer
 137+ 1189 21 DC 10                 ld      HL,DFSCT0       ; address of disk header string
 138+ 118C ED 5B CC 60              ld      DE,(IOBUFF)     ; address of I/O buffer
 139+ 1190 01 0F 00                 ld      BC,$000F        ; 15 chars
 140+ 1193 ED B0                    ldir                    ; copy header into buffer
 141+ 1195 2A CA 60                 ld      HL,(DOSBFR)     ; first part of configuration
 142+ 1198 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 143+ 119B ED B0                    ldir                    ; copy (DE is auto-incremented)
 144+ 119D AF                       xor     A               ; A=$0
 145+ 119E 12                       ld      (DE),A          ; marker at $1F
 146+ 119F 13                       inc     DE
 147+ 11A0 CD 62 17                 call    DOS_LDNAM       ; copy disk name into buffer
 148+ 11A3 DA 67 12                 jp      C,D1ERR         ; disk name error
 149+ 11A6 CD 8D 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 150+ 11A9 2A CC 60                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 151+ 11AC 54                       ld      D,H             ; copy into DE...
 152+ 11AD 5D                       ld      E,L             ; ...for later use
 153+ 11AE 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 154+ 11B1 09                       add     HL,BC           ; ...of the I/O buffer
 155+ 11B2 3E 38                    ld      A,'8'           ; write marker "80"
 156+ 11B4 77                       ld      (HL),A          ; ...
 157+ 11B5 23                       inc     HL              ; ...
 158+ 11B6 3E 30                    ld      A,'0'           ; ...
 159+ 11B8 77                       ld      (HL),A          ; ...into last 2 locations
 160+ 11B9 EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 161+ 11BA AF                       xor     A               ; reset A - set sector # to $00000000
 162+ 11BB 47                       ld      B,A             ; LBA0=0
 163+ 11BC 4F                       ld      C,A             ; LBA1=0
 164+ 11BD 57                       ld      D,A             ; LBA2=0
 165+ 11BE 5F                       ld      E,A             ; LBA3=0
 166+ 11BF CD 4B 10                 call    CF_SETSTR       ; set sector
 167+ 11C2 CD B5 10                 call    CF_WR_SEC       ; write sector to CF
 168+ 11C5                          ; check if only re-writing of Master Sector was need
 169+ 11C5 3A 37 61                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 170+ 11C8 3D                       dec     A               ; A=1?
 171+ 11C9 C8                       ret     Z               ; yes, finished job
 172+ 11CA                          ; erase directory -----------------------------
 173+ 11CA                          ; create a progress bar
 174+ 11CA 3E 0D                    ld      A,CR
 175+ 11CC CD 76 23                 call    OUTC
 176+ 11CF FD E5                    push    IY              ; copy directory's size
 177+ 11D1 E1                       pop     HL              ; into HL
 178+ 11D2 01 18 00                 ld      BC,$0018        ; 24 steps
 179+ 11D5 CD 53 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 180+ 11D8 E5                       push    HL              ; store result
 181+ 11D9 DD E1                    pop     IX              ; into IX
 182+ 11DB EB                       ex      DE,HL           ; and into DE
 183+ 11DC 3E 2D                    ld      A,'-'           ; print a progress bar
 184+ 11DE CD 16 12                 call    DOS_FT7         ; print it
 185+ 11E1 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 186+ 11E3 CD 16 12                 call    DOS_FT7         ; come back to beginning of line
 187+ 11E6 FD E5                    push    IY              ; copy directory's size
 188+ 11E8 E1                       pop     HL              ; into HL
 189+ 11E9 01 01 00                 ld      BC,$0001        ; first sector of directory
 190+ 11EC CD 92 18                 call    CLRIOBF         ; clear I/O buffer
 191+ 11EF D5           DOS_FTA:    push    DE              ; store counter
 192+ 11F0 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 193+ 11F3 CD 4B 10                 call    CF_SETSTR       ; set sector to write
 194+ 11F6 CD B5 10                 call    CF_WR_SEC       ; write sector to CF
 195+ 11F9 03                       inc     BC              ; next sector
 196+ 11FA 2B                       dec     HL              ; decrement HL
 197+ 11FB D1                       pop     DE              ; retrieve counter
 198+ 11FC 1B                       dec     DE              ; decrement counter
 199+ 11FD 7B                       ld      A,E
 200+ 11FE B2                       or      D               ; check if counter is zero
 201+ 11FF 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 202+ 1201 3E 2A                    ld      A,'*'           ; yes, print char
 203+ 1203 CD 76 23                 call    OUTC
 204+ 1206 DD E5                    push    IX              ; re-set counter
 205+ 1208 D1                       pop     DE
 206+ 1209 7C           DOS_FT9:    ld      A,H             ; check if...
 207+ 120A B5                       or      L               ; ...HL = 0
 208+ 120B 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 209+ 120D 3E 0D                    ld      A,CR            ; return
 210+ 120F CD 76 23                 call    OUTC            ; next line
 211+ 1212 CD 81 10                 call    CF_STANDBY      ; set CF into stand-by mode
 212+ 1215 C9                       ret
 213+ 1216
 214+ 1216              ; print 24 chars
 215+ 1216 06 18        DOS_FT7:    ld      B,$18           ; 24 chars
 216+ 1218 CD 76 23     DOS_FT8:    call    OUTC            ; move cursor
 217+ 121B 10 FB                    djnz    DOS_FT8         ; repeat
 218+ 121D C9                       ret                     ; return to caller
 219+ 121E
 220+ 121E
 221+ 121E
 222+ 121E              ; *****************************************************************************
 223+ 121E              ; D I S K    R E N A M E
 224+ 121E              ;******************************************************************************
 225+ 121E CD 92 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 226+ 1221 CD A7 18                 call    CLRDOSBF        ; clear DOS buf
 227+ 1224 11 00 00                 ld      DE,$0000        ; MSB sector
 228+ 1227 42                       ld      B,D             ; LSB sector
 229+ 1228 4A                       ld      C,D
 230+ 1229 CD 4B 10                 call    CF_SETSTR       ; set sector
 231+ 122C CD 8D 10                 call    CF_RD_SEC       ; read sector
 232+ 122F 2A CC 60                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 233+ 1232 01 20 00                 ld      BC,$0020        ; offset for disk name
 234+ 1235 09                       add     HL,BC           ; get pointer
 235+ 1236 EB                       ex      DE,HL           ; copy pointer into DE
 236+ 1237 CD 62 17                 call    DOS_LDNAM       ; copy disk name into buffer
 237+ 123A DA 67 12                 jp      C,D1ERR         ; disk name error
 238+ 123D 11 00 00                 ld      DE,$0000        ; MSB sector
 239+ 1240 42                       ld      B,D             ; LSB sector
 240+ 1241 4A                       ld      C,D
 241+ 1242 CD 4B 10                 call    CF_SETSTR       ; set sector
 242+ 1245 CD B5 10                 call    CF_WR_SEC       ; write sector
 243+ 1248 AF                       xor     A               ; clear Carry
 244+ 1249 C9                       ret                     ; return to caller
 245+ 124A
 246+ 124A
 247+ 124A              ; *****************************************************************************
 248+ 124A              ; DOS ERRORS
 249+ 124A              ; *****************************************************************************
 250+ 124A              ; disk geometry error
 251+ 124A 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 252+ 124C 18 1B                    jr      RET_ERR         ; return with error
 253+ 124E              ; disk full error
 254+ 124E 3E 42        DSKFULL:    ld      A,D5            ; set error
 255+ 1250 18 17                    jr      RET_ERR         ; return with error
 256+ 1252              ; duplicate file name
 257+ 1252 3E 44        DUPLERR:    ld      A,D6
 258+ 1254 18 13                    jr      RET_ERR         ; return with error
 259+ 1256              ; file name error
 260+ 1256 3E 3A        NAMERR:     ld      A,D1
 261+ 1258 18 0F                    jr      RET_ERR         ; return with error
 262+ 125A              ; file not found
 263+ 125A 3E 48        FLNTFND:    ld      A,D8
 264+ 125C 18 0B                    jr      RET_ERR         ; return with error
 265+ 125E              ; generic load error
 266+ 125E 3E 40        LODERR:     ld      A,D4
 267+ 1260 18 07                    jr      RET_ERR         ; return with error
 268+ 1262              ; DOS version error
 269+ 1262 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 270+ 1264 C3 69 12                 jp      RET_ERR         ; return with error
 271+ 1267              ; name string error
 272+ 1267 3E 3A        D1ERR:      ld      A,D1            ; name string error
 273+ 1269              ; store error and return
 274+ 1269 32 CE 60     RET_ERR:    ld      (DOSER),A       ; store DOS error
 275+ 126C CD 81 10                 call    CF_STANDBY      ; set CF into stand-by
 276+ 126F 37                       scf                     ; set Carry for error
 277+ 1270 C9                       ret                     ; return to caller
 278+ 1271
 279+ 1271              ; *****************************************************************************
 280+ 1271              ; L I S T    F I L E S
 281+ 1271              ; Function: print details of disk and list files
 282+ 1271              ; Input: D: $00=only disk details; $01=file list, too
 283+ 1271              ; *****************************************************************************
 284+ 1271 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 284+ 1275 20 6E 61 6D
 284+ 1279 65 3A 20 00
 285+ 127D 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 285+ 1281 74 6F 72 73
 285+ 1285 3A 20 00
 286+ 1288 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 286+ 128C 6F 77 65 64
 286+ 1290 20 66 69 6C
 286+ 1294 65 73 3A 20
 286+ 1298 00
 287+ 1299 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 287+ 129D 65 28 73 29
 287+ 12A1 0D 00
 288+ 12A3 CD C4 17     LST_FILES:  call    CHKDSKVAL       ; check DOS version
 289+ 12A6 DA 62 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 290+ 12A9 D5                       push    DE              ; store D
 291+ 12AA 01 00 00                 ld      BC,$0000        ; point to sector #0
 292+ 12AD 11 00 00                 ld      DE,$0000
 293+ 12B0 CD 4B 10                 call    CF_SETSTR       ; set sector
 294+ 12B3 CD 8D 10                 call    CF_RD_SEC       ; read sector
 295+ 12B6 21 71 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 296+ 12B9 CD 4D 2F                 call    PRS             ; print it
 297+ 12BC 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 298+ 12BF 11 20 00                 ld      DE,$0020        ; position of disk name
 299+ 12C2 19                       add     HL,DE           ; get address
 300+ 12C3 06 10                    ld      B,$10           ; 16 chars
 301+ 12C5 7E           INPR1:      ld      A,(HL)          ; load char
 302+ 12C6 CD 76 23                 call    OUTC            ; print it
 303+ 12C9 23                       inc     HL
 304+ 12CA 10 F9                    djnz    INPR1           ; repeat
 305+ 12CC 3E 0D                    ld      A,CR
 306+ 12CE CD 76 23                 call    OUTC            ; carriage return
 307+ 12D1 D1                       pop     DE              ; retrieve D
 308+ 12D2 DD 21 00 00              ld      IX,$0000        ; reset file counter
 309+ 12D6 7A                       ld      A,D
 310+ 12D7 B7                       or      A               ; is D=0?
 311+ 12D8 CA 97 13                 jp      Z,PNTSTATS      ; yes, jump over
 312+ 12DB                          ; print list of files
 313+ 12DB 2A CC 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 314+ 12DE 11 0F 00                 ld      DE,$000F        ; point to details of disk
 315+ 12E1 19                       add     HL,DE           ; find address
 316+ 12E2 ED 5B CA 60              ld      DE,(DOSBFR)     ; store into DOS buffer
 317+ 12E6 01 20 00                 ld      BC,$0020        ; 32 bytes
 318+ 12E9 ED B0                    ldir                    ; copy
 319+ 12EB 11 00 00                 ld      DE,$0000        ; beginning...
 320+ 12EE 01 01 00                 ld      BC,$0001        ; ...of directory
 321+ 12F1 CD 4B 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 322+ 12F4 CD 8D 10                 call    CF_RD_SEC       ; read sector
 323+ 12F7 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 324+ 12F9 FD 2A CC 60              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 325+ 12FD FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 326+ 1300 B7                       or      A               ; is it an empty entry ($00)?
 327+ 1301 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 328+ 1303 FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 329+ 1305 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 330+ 1307 C5                       push    BC              ; this is a valid entry - so, store BC
 331+ 1308 FD E5                    push    IY              ; store IY
 332+ 130A E5                       push    HL              ; store HL
 333+ 130B D5                       push    DE              ; store DE
 334+ 130C DD E5                    push    IX              ; store IX
 335+ 130E 06 10                    ld      B,$10           ; 16 chars to read and print
 336+ 1310 FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 337+ 1313 CD 76 23                 call    OUTC            ; print char
 338+ 1316 FD 23                    inc     IY              ; next char
 339+ 1318 10 F6                    djnz    LSTFILES3       ; repeat
 340+ 131A 3E 20                    ld      A,SPC
 341+ 131C CD 76 23                 call    OUTC            ; print space
 342+ 131F FD 7E 00                 ld      A,(IY)          ; file type
 343+ 1322 D6 80                    sub     $80             ; types start from $80
 344+ 1324 B7                       or      A               ; BAS type ($00)?
 345+ 1325 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 346+ 1327 21 DB 13                 ld      HL,FILETP       ; print "BAS"
 347+ 132A 18 0B                    jr      LSTFILESPR
 348+ 132C 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 349+ 132D 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 350+ 132F 21 E0 13                 ld      HL,FILETP+5     ; print "BIN "
 351+ 1332 18 03                    jr      LSTFILESPR
 352+ 1334 21 E5 13     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 353+ 1337 CD 4D 2F     LSTFILESPR: call    PRS
 354+ 133A 11 00 00                 ld      DE,$0000        ; MSB = $0000
 355+ 133D 01 08 00                 ld      BC,$0008
 356+ 1340 FD 09                    add     IY,BC           ; point to file size in bytes
 357+ 1342 FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 358+ 1345 FD 23                    inc     IY
 359+ 1347 FD 46 00                 ld      B,(IY)          ; then MSB
 360+ 134A C5                       push    BC              ; copy...
 361+ 134B DD E1                    pop     IX              ; ...into IX
 362+ 134D CD 38 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 363+ 1350 3E 0D                    ld      A,CR
 364+ 1352 CD 76 23                 call    OUTC            ; print carriage return
 365+ 1355 DD E1        LSTFILES8:  pop     IX
 366+ 1357 D1                       pop     DE
 367+ 1358 E1                       pop     HL
 368+ 1359 FD E1                    pop     IY              ; retrieve IY
 369+ 135B C1                       pop     BC              ; retrieve BC
 370+ 135C DD 23                    inc     IX              ; increment file counter
 371+ 135E CD DF 25     LSTFILES6:  call    TSTBRK          ; Test for break key
 372+ 1361 CD E2 24                 call    TSTSPC          ; test for space
 373+ 1364 C5                       push    BC              ; store sector counter
 374+ 1365 01 20 00                 ld      BC,$0020        ; dir entry size
 375+ 1368 FD 09                    add     IY,BC           ; next entry in current sector
 376+ 136A C1                       pop     BC              ; retrieve sector counter
 377+ 136B 2D                       dec     L               ; decrement entry counter
 378+ 136C 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 379+ 136E 03           LSTFILES5:  inc     BC              ; increment sector counter
 380+ 136F 78                       ld      A,B             ; check if BC=$0000
 381+ 1370 B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 382+ 1371 28 14                    jr      Z,LSTFILES7     ; yes, exit
 383+ 1373 D5                       push    DE              ; store MSB of sector pointer
 384+ 1374 2A CA 60                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 385+ 1377 11 0E 00                 ld      DE,$000E        ; point to data area
 386+ 137A 19                       add     HL,DE           ; find address in memory
 387+ 137B 5E                       ld      E,(HL)          ; load data area sector...
 388+ 137C 23                       inc     HL
 389+ 137D 56                       ld      D,(HL)          ; ...into DE
 390+ 137E 60                       ld      H,B             ; copy current sector
 391+ 137F 69                       ld      L,C             ; into HL
 392+ 1380 CD F8 4C                 call    CMP16           ; is current sector < data area sector?
 393+ 1383 D1                       pop     DE              ; retrieve MSB of sector pointer
 394+ 1384 DA F1 12                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 395+ 1387 11 00 00     LSTFILES7:  ld      DE,$0000
 396+ 138A DD E5                    push    IX
 397+ 138C CD 38 18                 call    PRN16ASCIX      ; print number of files from DEIX
 398+ 138F 21 99 12                 ld      HL,TLFLSTX
 399+ 1392 CD 4D 2F                 call    PRS             ; print "file(s)"
 400+ 1395 DD E1                    pop     IX
 401+ 1397 21 7D 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 402+ 139A CD 4D 2F                 call    PRS             ; print message
 403+ 139D 2A CA 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 404+ 13A0 DD E5                    push    IX              ; store number of entries
 405+ 13A2 CD 2E 18                 call    PRN32ASCII      ; print size
 406+ 13A5 3E 2F                    ld      A,'/'
 407+ 13A7 CD 76 23                 call    OUTC            ; print a /
 408+ 13AA D1                       pop     DE              ; copy number of entries into DE
 409+ 13AB 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 410+ 13AE CD 1D 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 411+ 13B1 ED 53 E0 60              ld      (TPBF1),DE
 412+ 13B5 22 E2 60                 ld      (TPBF2),HL
 413+ 13B8 21 E0 60                 ld      HL,TPBF1
 414+ 13BB CD 2E 18                 call    PRN32ASCII
 415+ 13BE 21 88 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 416+ 13C1 CD 4D 2F                 call    PRS             ; print message
 417+ 13C4 2A CA 60                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 418+ 13C7 01 0A 00                 ld      BC,$000A        ; address of allowed files
 419+ 13CA 09                       add     HL,BC           ; find pointer
 420+ 13CB 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 421+ 13CE CD 32 18                 call    PRN16ASCII      ; print max files
 422+ 13D1 3E 0D                    ld      A,CR
 423+ 13D3 CD 76 23                 call    OUTC            ; print a carriage return
 424+ 13D6 CD 81 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 425+ 13D9 AF                       xor     A               ; clear Carry flag
 426+ 13DA C9                       ret                     ; return to caller
 427+ 13DB 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 427+ 13DF 00
 428+ 13E0 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 428+ 13E4 00
 429+ 13E5 3F 3F 3F 20              defb    "??? ",0        ; unkown
 429+ 13E9 00
 430+ 13EA
 431+ 13EA
 432+ 13EA
 433+ 13EA              ; *****************************************************************************
 434+ 13EA              ; S A V E    F I L E
 435+ 13EA              ; save current BASIC program onto a file
 436+ 13EA              ; *****************************************************************************
 437+ 13EA CD 92 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 438+ 13ED CD C4 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 439+ 13F0 DA 62 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 440+ 13F3 2A CC 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 441+ 13F6 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 442+ 13F9 09                       add     HL,BC           ; get address
 443+ 13FA CD 29 18                 call    HL2DE           ; get entries into DE
 444+ 13FD ED 53 D5 60              ld      (NTR_NBR),DE    ; store
 445+ 1401 CD 29 18                 call    HL2DE           ; get start of directory into DE
 446+ 1404 ED 53 CF 60              ld      (DIR_STRT),DE   ; store
 447+ 1408 CD 29 18                 call    HL2DE           ; get start of data area into DE
 448+ 140B ED 53 D1 60              ld      (DAT_STRT),DE   ; store
 449+ 140F CD 92 18                 call    CLRIOBF         ; clear IO buffer
 450+ 1412 CD A7 18                 call    CLRDOSBF        ; clear DOS buffer
 451+ 1415 ED 5B CA 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 452+ 1419 CD FC 17                 call    CHKNMVAL        ; check and copy file name
 453+ 141C DA 56 12                 jp      C,NAMERR        ; if Carry, file name error
 454+ 141F CD 98 16                 call    FILE_EXIST      ; check for name already present in dir
 455+ 1422 DA 52 12                 jp      C,DUPLERR       ; name is present - error
 456+ 1425 CD 04 17                 call    FNDFREDIR       ; find a free entry in the directory
 457+ 1428 DA 4E 12                 jp      C,DSKFULL       ; no entry, disk full error
 458+ 142B 3A E6 60                 ld      A,(TPBF4)       ; check what to save
 459+ 142E FE 80                    cp      $80             ; BASIC program?
 460+ 1430 C2 3F 14                 jp      NZ,SAVFL3       ; no, jump over
 461+ 1433                          ; BASIC area to save starts at PROGST and ends at (PROGND)
 462+ 1433 2A 7D 61                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 463+ 1436 11 7D 61                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 464+ 1439 ED 53 E8 60              ld      (SRTMEM),DE     ; copy DE
 465+ 143D 18 08                    jr      SAVFL1
 466+ 143F 2A EA 60     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 467+ 1442 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 468+ 1443 ED 5B E8 60              ld      DE,(SRTMEM)     ; DE <= start of portion
 469+ 1447                          ; compute how many sectors/blocks are needed to save file
 470+ 1447 AF           SAVFL1:     xor     A               ; reset Carry
 471+ 1448 ED 52                    sbc     HL,DE           ; get how many bytes to save
 472+ 144A 22 D7 60                 ld      (BYT_SIZ),HL    ; store into memory
 473+ 144D 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 474+ 1450 7C                       ld      A,H             ; move lenght...
 475+ 1451 4D                       ld      C,L             ; ...into AC
 476+ 1452 CD 62 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 477+ 1455 7C                       ld      A,H             ; check if...
 478+ 1456 B5                       or      L               ; ...remainder (HL) is 0
 479+ 1457 28 01                    jr      Z,SAVFL6        ; yes, jump over
 480+ 1459 03                       inc     BC              ; no, so we need another sector
 481+ 145A 79           SAVFL6:     ld      A,C
 482+ 145B 32 D9 60                 ld      (SCT_SIZ),A     ; store into memory
 483+ 145E              SAVFL7:     ; start saving on disk
 484+ 145E 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 485+ 1461 ED 4B D3 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 486+ 1465 CD 4B 10                 call    CF_SETSTR       ; set sector to read
 487+ 1468 CD 8D 10                 call    CF_RD_SEC       ; read sector
 488+ 146B ED 5B D5 60              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 489+ 146F 7B                       ld      A,E             ; load entry LSB into A
 490+ 1470 E6 0F                    and     %00001111       ; be sure to get only low nibble
 491+ 1472 87                       add     A,A             ; multiply times 32
 492+ 1473 87                       add     A,A
 493+ 1474 87                       add     A,A
 494+ 1475 87                       add     A,A
 495+ 1476 87                       add     A,A
 496+ 1477 4F                       ld      C,A             ; copy into C
 497+ 1478 06 00                    ld      B,$00           ; reset B
 498+ 147A                          ; set name
 499+ 147A 2A CC 60                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 500+ 147D 09                       add     HL,BC           ; add offset to get address of entry
 501+ 147E ED 5B CA 60              ld      DE,(DOSBFR)     ; pointer to file name
 502+ 1482 01 10 00                 ld      BC,$0010        ; 16 chars
 503+ 1485 EB                       ex      DE,HL           ; move source into HL and destination into DE
 504+ 1486 ED B0                    ldir                    ; copy file name
 505+ 1488 EB                       ex      DE,HL           ; move current buffer pointer into HL
 506+ 1489 3A E6 60                 ld      A,(TPBF4)       ; load the type of file
 507+ 148C 77                       ld      (HL),A          ; store it
 508+ 148D 23                       inc     HL
 509+ 148E AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 510+ 148F 77                       ld      (HL),A
 511+ 1490 23                       inc     HL
 512+ 1491 ED 5B D5 60              ld      DE,(NTR_NBR)    ; reload entry number
 513+ 1495 CD 24 18                 call    DE2HL           ; store entry into buffer
 514+ 1498 E5                       push    HL              ; store pointer
 515+ 1499 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 516+ 149C CD 1D 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 517+ 149F ED 4B D1 60              ld      BC,(DAT_STRT)   ; load start of data
 518+ 14A3 09                       add     HL,BC           ; add sector of data area
 519+ 14A4 30 01                    jr      NC,SAVFL9       ; overflow?
 520+ 14A6 13                       inc     DE              ; yes, increment DE
 521+ 14A7 ED 53 DA 60  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 522+ 14AB 22 DC 60                 ld      (LSB_SCT),HL    ; store LSB of sector
 523+ 14AE E1                       pop     HL              ; retrieve pointer
 524+ 14AF CD 24 18                 call    DE2HL           ; also copy MSB of sector into entry
 525+ 14B2 ED 5B DC 60              ld      DE,(LSB_SCT)    ; retrieve LSB
 526+ 14B6 CD 24 18                 call    DE2HL           ; also copy LSB of sector into entry
 527+ 14B9 ED 5B D7 60              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 528+ 14BD CD 24 18                 call    DE2HL           ; copy file size into buffer
 529+ 14C0 3A D9 60                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 530+ 14C3 77                       ld      (HL),A          ; copy into buffer
 531+ 14C4 23                       inc     HL              ; next location
 532+ 14C5 ED 5B E8 60              ld      DE,(SRTMEM)     ; start of address of file in RAM
 533+ 14C9 CD 24 18                 call    DE2HL           ; copy into buffer
 534+ 14CC 06 03                    ld      B,$03           ; remaining chars...
 535+ 14CE AF                       xor     A               ; ...set to $00
 536+ 14CF 77           SAVFL2:     ld      (HL),A          ; reset byte
 537+ 14D0 23                       inc     HL              ; next cell
 538+ 14D1 10 FC                    djnz    SAVFL2          ; repeat
 539+ 14D3                          ; save entry into directory
 540+ 14D3 11 00 00                 ld      DE,$0000        ; block 0
 541+ 14D6 ED 4B D3 60              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 542+ 14DA CD 4B 10                 call    CF_SETSTR       ; set sector to write
 543+ 14DD CD B5 10                 call    CF_WR_SEC       ; write new entry into directory
 544+ 14E0 CD 92 18                 call    CLRIOBF         ; clear I/O buffer
 545+ 14E3                          ; start saving RAM
 546+ 14E3 ED 5B E8 60              ld      DE,(SRTMEM)     ; load start of RAM
 547+ 14E7 ED 53 DE 60              ld      (RAM_PTR),DE    ; store
 548+ 14EB CD 92 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 549+ 14EE 2A D7 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 550+ 14F1 11 00 02                 ld      DE,$0200        ; are they < 512?
 551+ 14F4 CD F8 4C                 call    CMP16
 552+ 14F7 30 04                    jr      NC,SAVFL4       ; no, jump over
 553+ 14F9 ED 5B D7 60              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 554+ 14FD 4B           SAVFL4:     ld      C,E             ; bytes to copy
 555+ 14FE 42                       ld      B,D             ; into BC
 556+ 14FF 2A DE 60                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 557+ 1502 ED 5B CC 60              ld      DE,(IOBUFF)     ; load start of I/O buffer
 558+ 1506 ED B0                    ldir                    ; copy data
 559+ 1508 ED 5B DA 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 560+ 150C ED 4B DC 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 561+ 1510 CD 4B 10                 call    CF_SETSTR       ; set sector
 562+ 1513 CD B5 10                 call    CF_WR_SEC       ; write sector
 563+ 1516 21 D9 60                 ld      HL,SCT_SIZ      ; sector counter
 564+ 1519 35                       dec     (HL)            ; copied all the sectors?
 565+ 151A CA 49 15                 jp      Z,SAVFLEXT      ; yes, exit
 566+ 151D 2A DE 60     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 567+ 1520 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 568+ 1523 19                       add     HL,DE           ; calculate next starting address
 569+ 1524 22 DE 60                 ld      (RAM_PTR),HL    ; store next block
 570+ 1527 AF                       xor     A               ; reset Carry
 571+ 1528 2A D7 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 572+ 152B ED 52                    sbc     HL,DE           ; subtract copied bytes
 573+ 152D 22 D7 60                 ld      (BYT_SIZ),HL    ; store left bytes
 574+ 1530 ED 4B DC 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 575+ 1534 03                       inc     BC              ; next sector
 576+ 1535 78                       ld      A,B             ; BC=$0000?
 577+ 1536 B1                       or      C
 578+ 1537 20 09                    jr      NZ,SAVFL12      ; no, jump over
 579+ 1539 ED 5B DA 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 580+ 153D 13                       inc     DE              ; increment DE
 581+ 153E ED 53 DA 60              ld      (MSB_SCT),DE    ; store new MSB of sector
 582+ 1542 ED 43 DC 60  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 583+ 1546 C3 EB 14                 jp      SAVFL10         ; repeat
 584+ 1549 CD 81 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 585+ 154C AF                       xor     A               ; clear Carry flag
 586+ 154D C9                       ret                     ; return to caller
 587+ 154E
 588+ 154E
 589+ 154E              ; *****************************************************************************
 590+ 154E              ; F I L E    L O A D
 591+ 154E              ; load a file from the disk into the memory
 592+ 154E              ; *****************************************************************************
 593+ 154E CD 92 18     LODFILE:    call    CLRIOBF         ; clear I/O
 594+ 1551 CD C4 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 595+ 1554 DA 62 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 596+ 1557 2A CC 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 597+ 155A 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 598+ 155D 09                       add     HL,BC           ; get address
 599+ 155E CD 29 18                 call    HL2DE           ; get entries into DE
 600+ 1561 ED 53 D5 60              ld      (NTR_NBR),DE    ; store
 601+ 1565 CD 92 18                 call    CLRIOBF         ; clear IO buffer
 602+ 1568 CD A7 18                 call    CLRDOSBF        ; clear DOS buffer
 603+ 156B ED 5B CA 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 604+ 156F CD FC 17                 call    CHKNMVAL        ; check and copy file name
 605+ 1572 DA 56 12                 jp      C,NAMERR        ; if Carry, file name error
 606+ 1575 CD 98 16                 call    FILE_EXIST      ; check if file exists
 607+ 1578 D2 5A 12                 jp      NC,FLNTFND      ; file not found - error
 608+ 157B DD E5                    push    IX              ; copy pointer to file...
 609+ 157D E1                       pop     HL              ; ...into HL
 610+ 157E 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 611+ 1581 09                       add     HL,BC           ; ...by getting pointer to file details
 612+ 1582 7E                       ld      A,(HL)          ; load file type
 613+ 1583 FE 80                    cp      $80             ; 'BAS' type?
 614+ 1585 28 0C                    jr      Z,LDFL4         ; yes, jump over
 615+ 1587 FE 81                    cp      $81             ; 'BIN' type?
 616+ 1589 C2 5E 12                 jp      NZ,LODERR       ; no, raise error
 617+ 158C 3A E6 60                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 618+ 158F B7                       or      A               ; did the user set this?
 619+ 1590 CA 5E 12                 jp      Z,LODERR        ; no, raise an error
 620+ 1593 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 621+ 1595 09                       add     HL,BC           ; point to starting sector
 622+ 1596 11 DA 60                 ld      DE,MSB_SCT      ; point to store sector address of file
 623+ 1599 ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 624+ 159B 11 D7 60                 ld      DE,BYT_SIZ      ; point to store size of file
 625+ 159E 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 626+ 15A1 ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 627+ 15A3 11 7D 61                 ld      DE,PROGND       ; load start of BASIC RAM
 628+ 15A6 3A E6 60                 ld      A,(TPBF4)       ; check where to save the data from
 629+ 15A9 B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 630+ 15AA 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 631+ 15AC 5E                       ld      E,(HL)          ; no, load RAM address from disk - LSB...
 632+ 15AD 23                       inc     HL
 633+ 15AE 56                       ld      D,(HL)          ; ...then MSB
 634+ 15AF ED 53 DE 60  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 635+ 15B3                          ;----------------------------------------------
 636+ 15B3                          ; start loading from disk
 637+ 15B3 CD 92 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 638+ 15B6 ED 5B DA 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 639+ 15BA ED 4B DC 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 640+ 15BE CD 4B 10                 call    CF_SETSTR       ; set sector
 641+ 15C1 CD 8D 10                 call    CF_RD_SEC       ; read sector
 642+ 15C4 2A D7 60                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 643+ 15C7 11 00 02                 ld      DE,$0200        ; are they < 512?
 644+ 15CA CD F8 4C                 call    CMP16
 645+ 15CD 30 04                    jr      NC,LDFL3        ; no, jump over
 646+ 15CF ED 5B D7 60              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 647+ 15D3 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 648+ 15D4 42                       ld      B,D             ; ...into BC
 649+ 15D5 2A CC 60                 ld      HL,(IOBUFF)     ; point to I/O buffer
 650+ 15D8 ED 5B DE 60              ld      DE,(RAM_PTR)    ; point to RAM where to save
 651+ 15DC ED B0                    ldir                    ; copy data
 652+ 15DE 21 D9 60                 ld      HL,SCT_SIZ      ; sector counter
 653+ 15E1 35                       dec     (HL)            ; copied all the sectors?
 654+ 15E2 CA 11 16                 jp      Z,LDFLEX        ; yes, exit
 655+ 15E5 2A DE 60                 ld      HL,(RAM_PTR)    ; pointer to RAM
 656+ 15E8 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 657+ 15EB 19                       add     HL,DE           ; calculate next starting address
 658+ 15EC 22 DE 60                 ld      (RAM_PTR),HL    ; store next block
 659+ 15EF AF                       xor     A               ; reset Carry
 660+ 15F0 2A D7 60                 ld      HL,(BYT_SIZ)    ; load left bytes
 661+ 15F3 ED 52                    sbc     HL,DE           ; subtract copied bytes
 662+ 15F5 22 D7 60                 ld      (BYT_SIZ),HL    ; store left bytes
 663+ 15F8 ED 4B DC 60              ld      BC,(LSB_SCT)    ; load LSB of sector
 664+ 15FC 03                       inc     BC              ; next sector
 665+ 15FD 78                       ld      A,B             ; BC=$0000?
 666+ 15FE B1                       or      C
 667+ 15FF 20 09                    jr      NZ,LDFL5        ; no, jump over
 668+ 1601 ED 5B DA 60              ld      DE,(MSB_SCT)    ; load MSB of sector
 669+ 1605 13                       inc     DE              ; increment DE
 670+ 1606 ED 53 DA 60              ld      (MSB_SCT),DE    ; store new MSB of sector
 671+ 160A ED 43 DC 60  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 672+ 160E C3 B3 15                 jp      LDFL2           ; repeat
 673+ 1611 CD 81 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 674+ 1614 AF                       xor     A               ; clear Carry flag
 675+ 1615 C9                       ret                     ; return to caller
 676+ 1616
 677+ 1616
 678+ 1616              ; *****************************************************************************
 679+ 1616              ; F I L E    E R A S E
 680+ 1616              ; erase a file from disk, freeing its block
 681+ 1616              ; *****************************************************************************
 682+ 1616 CD 92 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 683+ 1619 CD C4 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 684+ 161C DA 62 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 685+ 161F 2A CC 60                 ld      HL,(IOBUFF)     ; start of I/O buffer
 686+ 1622 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 687+ 1625 09                       add     HL,BC           ; get address
 688+ 1626 CD 29 18                 call    HL2DE           ; get entries into DE
 689+ 1629 ED 53 D5 60              ld      (NTR_NBR),DE    ; store
 690+ 162D CD 92 18                 call    CLRIOBF         ; clear IO buffer
 691+ 1630 CD A7 18                 call    CLRDOSBF        ; clear DOS buffer
 692+ 1633 ED 5B CA 60              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 693+ 1637 CD FC 17                 call    CHKNMVAL        ; check and copy file name
 694+ 163A DA 56 12                 jp      C,NAMERR        ; if Carry, file name error
 695+ 163D CD 98 16                 call    FILE_EXIST      ; check if file exists
 696+ 1640 D2 5A 12                 jp      NC,FLNTFND      ; file not found - error
 697+ 1643 3E 7F                    ld      A,$7F           ; marker for file deleted
 698+ 1645 DD 77 00                 ld      (IX),A          ; set file as deleted
 699+ 1648 DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 700+ 164B DD 56 15                 ld      D,(IX+$15)
 701+ 164E DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 702+ 1651 DD 46 17                 ld      B,(IX+$17)
 703+ 1654 ED 53 DA 60              ld      (MSB_SCT),DE    ; store DE
 704+ 1658 ED 43 DC 60              ld      (LSB_SCT),BC    ; store BC
 705+ 165C DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 706+ 165F 32 D9 60                 ld      (SCT_SIZ),A     ; store it
 707+ 1662 ED 5B E2 60              ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 708+ 1666 ED 4B E4 60              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 709+ 166A CD 4B 10                 call    CF_SETSTR       ; set sector
 710+ 166D CD B5 10                 call    CF_WR_SEC       ; write sector
 711+ 1670 CD 92 18                 call    CLRIOBF         ; clear I/O buffer
 712+ 1673 3A E6 60                 ld      A,(TPBF4)       ; check for quick or full delete
 713+ 1676 B7                       or      A               ; if A=0 then quick erase
 714+ 1677 28 1A                    jr      Z,FIL_ERA3      ; yes, leave
 715+ 1679 ED 5B DA 60              ld      DE,(MSB_SCT)    ; no, full delete - load MSB of 1st sector of file block
 716+ 167D ED 4B DC 60              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 717+ 1681 21 D9 60                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 718+ 1684 CD 4B 10     FIL_ERA1:   call    CF_SETSTR       ; set sector
 719+ 1687 CD B5 10                 call    CF_WR_SEC       ; erase sector
 720+ 168A 03                       inc     BC              ; next sector
 721+ 168B 78                       ld      A,B             ; is LSB rolled back to 0?
 722+ 168C B1                       or      C
 723+ 168D 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 724+ 168F 13                       inc     DE              ; yes, increment MSB
 725+ 1690 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 726+ 1691 20 F1                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 727+ 1693 CD 81 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 728+ 1696 AF                       xor     A               ; clear Carry
 729+ 1697 C9                       ret
 730+ 1698
 731+ 1698
 732+ 1698              ; *****************************************************************************
 733+ 1698              ; F I L E    C H E C K
 734+ 1698              ; check if file name already exists in directory
 735+ 1698              ; file name must be stored from (DOSBFR) for 16 chars
 736+ 1698              ; *****************************************************************************
 737+ 1698 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 738+ 169B 01 01 00                 ld      BC,$0001        ; ...of directory
 739+ 169E FD 2A D5 60              ld      IY,(NTR_NBR)    ; load max entries
 740+ 16A2 CD 4B 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 741+ 16A5 CD 8D 10                 call    CF_RD_SEC       ; read sector
 742+ 16A8 DD 2A CC 60  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 743+ 16AC 2E 10                    ld      L,$10           ; reset entry counter
 744+ 16AE DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 745+ 16B1 B7                       or      A               ; is it $00 (empty entry)?
 746+ 16B2 CA E2 16                 jp      Z,CHKSTNM10     ; yes, jump over
 747+ 16B5 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 748+ 16B7 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 749+ 16B9 22 E0 60                 ld      (TPBF1),HL      ; store HL
 750+ 16BC ED 53 E2 60              ld      (TPBF2),DE      ; store DE
 751+ 16C0 ED 43 E4 60              ld      (TPBF3),BC      ; store BC
 752+ 16C4 DD E5                    push    IX              ; copy IX...
 753+ 16C6 E1                       pop     HL              ; ...into HL
 754+ 16C7 ED 5B CA 60              ld      DE,(DOSBFR)     ; beginning of name file
 755+ 16CB 06 10                    ld      B,$10           ; 16 chars to check
 756+ 16CD 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 757+ 16CE ED A1                    cpi                     ; compare with name from user
 758+ 16D0 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 759+ 16D2 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 760+ 16D3 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 761+ 16D5 18 2B                    jr      FLEXST          ; file exists in dir
 762+ 16D7 2A E0 60     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 763+ 16DA ED 5B E2 60              ld      DE,(TPBF2)      ; retrieve DE
 764+ 16DE ED 4B E4 60              ld      BC,(TPBF3)      ; retrieve sector counter
 765+ 16E2 FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 766+ 16E4 E5                       push    HL              ; preserve current entry
 767+ 16E5 FD E5                    push    IY              ; copy max allowed files...
 768+ 16E7 E1                       pop     HL              ; ...into HL
 769+ 16E8 7C                       ld      A,H             ; chech if entries...
 770+ 16E9 B5                       or      L               ; ...are finished
 771+ 16EA E1                       pop     HL              ; (retrieve current entry)
 772+ 16EB 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 773+ 16ED C5                       push    BC              ; store bc
 774+ 16EE 01 20 00                 ld      BC,$0020        ; dir entry size
 775+ 16F1 DD 09                    add     IX,BC           ; next entry in current sector
 776+ 16F3 C1                       pop     BC              ; retrieve BC
 777+ 16F4 2D                       dec     L               ; decrement entry counter
 778+ 16F5 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 779+ 16F7 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 780+ 16F8 79                       ld      A,C             ; check if...
 781+ 16F9 B0                       or      B               ; BC=$0000?
 782+ 16FA 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 783+ 16FC 13                       inc     DE              ; yes, increment DE (MSB)
 784+ 16FD C3 A2 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 785+ 1700 AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 786+ 1701 C9                       ret                     ; return
 787+ 1702                          ; set Carry flag and return with error
 788+ 1702 37           FLEXST:     scf                     ; file is present
 789+ 1703 C9                       ret
 790+ 1704
 791+ 1704
 792+ 1704              ; *****************************************************************************
 793+ 1704              ; FIND A FREE ENTRY
 794+ 1704              ; find a free entry in the directory to store a new file
 795+ 1704              ; *****************************************************************************
 796+ 1704 01 00 00     FNDFREDIR:  ld      BC,$0000        ; point to sector #0
 797+ 1707 11 00 00                 ld      DE,$0000
 798+ 170A CD 4B 10                 call    CF_SETSTR       ; set sector
 799+ 170D CD 8D 10                 call    CF_RD_SEC       ; read sector
 800+ 1710 2A CC 60                 ld      HL,(IOBUFF)     ; address of I/O buffer
 801+ 1713 11 19 00                 ld      DE,$0019        ; pointer to number of allowed files (same of allowed blocks)
 802+ 1716 19                       add     HL,DE           ; find address
 803+ 1717 5E                       ld      E,(HL)          ; load max entries into DE
 804+ 1718 23                       inc     HL
 805+ 1719 56                       ld      D,(HL)
 806+ 171A D5                       push    DE              ; copy number of entries...
 807+ 171B FD E1                    pop     IY              ; ...into IY
 808+ 171D 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 809+ 1720 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 810+ 1721 58                       ld      E,B
 811+ 1722 60                       ld      H,B             ; HL=$0000 (entry counter)
 812+ 1723 68                       ld      L,B
 813+ 1724 CD 4B 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 814+ 1727 CD 8D 10                 call    CF_RD_SEC       ; read sector
 815+ 172A DD 2A CC 60              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 816+ 172E DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 817+ 1731 FD 2B                    dec     IY              ; decrement number of entries
 818+ 1733 B7                       or      A               ; is it $00 (empty entry)?
 819+ 1734 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 820+ 1736 FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 821+ 1738 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 822+ 173A C5                       push    BC              ; no, store BC
 823+ 173B 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 824+ 173E DD 09                    add     IX,BC           ; next entry in current sector
 825+ 1740 C1                       pop     BC              ; retrieve sector pointer
 826+ 1741 23                       inc     HL              ; increment entry counter
 827+ 1742 7D                       ld      A,L
 828+ 1743 E6 0F                    and     %00001111       ; just done 16 entries?
 829+ 1745 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 830+ 1747 03                       inc     BC              ; entries in this sector finished .. goto next sector
 831+ 1748 78                       ld      A,B             ; check if...
 832+ 1749 B1                       or      C               ; ...BC=$000
 833+ 174A 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 834+ 174C 13                       inc     DE              ; yes, increment DE (MSB)
 835+ 174D E5           FNDFREDIR5: push    HL              ; preserve current entry
 836+ 174E FD E5                    push    IY              ; copy max allowed files...
 837+ 1750 D1                       pop     DE              ; ...into HL
 838+ 1751 CD F8 4C                 call    CMP16           ; check if reached max allowed entries
 839+ 1754 E1                       pop     HL              ; (retrieve current entry)
 840+ 1755 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 841+ 1757 37                       scf                     ; entries are finished, raise an error
 842+ 1758 C9                       ret                     ; return
 843+ 1759 ED 43 D3 60  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 844+ 175D 22 D5 60                 ld      (NTR_NBR),HL    ; store entry number
 845+ 1760 AF                       xor     A               ; reset Carry
 846+ 1761 C9                       ret
 847+ 1762
 848+ 1762
 849+ 1762              ; *****************************************************************************
 850+ 1762              ;   U T I L I T I E S
 851+ 1762              ; *****************************************************************************
 852+ 1762
 853+ 1762              ; load string name into buffer
 854+ 1762              ; inputs: DE: pointer to dest. buffer
 855+ 1762              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 856+ 1762              ; destroys: A, BC, DE, HL
 857+ 1762              ; outputs: DE->(TPBF4) for later use
 858+ 1762 ED 4B 3B 61  DOS_LDNAM:  ld      BC,(DKLNPT)     ; load lenght of disk name
 859+ 1766 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 860+ 1767 FE 11                    cp      $11             ; is it <=16?
 861+ 1769 38 02                    jr      C,DOS_LDNAM1    ; yes, so jump over
 862+ 176B 0E 10                    ld      C,$10           ; no, get only 16 chars
 863+ 176D 41           DOS_LDNAM1: ld      B,C             ; copy lenght into B
 864+ 176E 2A 39 61                 ld      HL,(DKNMPT)     ; pointer to disk name
 865+ 1771 ED 53 E6 60              ld      (TPBF4),DE      ; store current position for later use
 866+ 1775 7E           DOS_LDNAM2: ld      A,(HL)          ; get a char fron string name
 867+ 1776 CD 7C 18                 call    CHK_NAM         ; check if char is valid
 868+ 1779 D8                       ret     C               ; no, name error
 869+ 177A 12                       ld      (DE),A          ; yes, store char
 870+ 177B 13                       inc     DE              ; next I/O location
 871+ 177C 23                       inc     HL              ; next disk name char
 872+ 177D 10 F6                    djnz    DOS_LDNAM2      ; repeat until name ends
 873+ 177F 3E 10                    ld      A,$10           ; check how much padding must be...
 874+ 1781 91                       sub     C               ; ...added to name field
 875+ 1782 28 07                    jr      Z,DOS_LDNAM4    ; if zero, then jump over
 876+ 1784 47                       ld      B,A             ; copy into B
 877+ 1785 3E 20                    ld      A,SPC           ; space char
 878+ 1787 12           DOS_LDNAM3: ld      (DE),A          ; fill current cell
 879+ 1788 13                       inc     DE              ; next one
 880+ 1789 10 FC                    djnz    DOS_LDNAM3      ; repeat
 881+ 178B AF           DOS_LDNAM4: xor     A               ; be sure Carry is reset
 882+ 178C C9                       ret                     ; return to caller
 883+ 178D
 884+ 178D
 885+ 178D              ; generate random disk ID
 886+ 178D 2A E6 60     RND_ID:     ld      HL,(TPBF4)    ; retrieve pointer to beginning of name
 887+ 1790 7E                       ld      A,(HL)          ; get first char
 888+ 1791 12                       ld      (DE),A          ; copy it to disk ID
 889+ 1792 13                       inc     DE              ; inc pointer
 890+ 1793 CD A8 17                 call    RND8            ; get a random char
 891+ 1796 CD B9 17                 call    CH0TO9          ; get a number from 0 to 9
 892+ 1799 12                       ld      (DE),A          ; store it
 893+ 179A 13                       inc     DE              ; inc pointer
 894+ 179B 23                       inc     HL              ; next disk name char
 895+ 179C 7E                       ld      A,(HL)          ; get second char from disk name
 896+ 179D 12                       ld      (DE),A          ; store it
 897+ 179E 13                       inc     DE              ; inc pointer
 898+ 179F CD A8 17                 call    RND8            ; get a random char
 899+ 17A2 CD B9 17                 call    CH0TO9          ; get a number from 0 to 9
 900+ 17A5 12                       ld      (DE),A          ; store it
 901+ 17A6 13                       inc     DE              ; inc pointer
 902+ 17A7 C9                       ret                     ; return to caller
 903+ 17A8
 904+ 17A8
 905+ 17A8              ; generate a pseudo-random number from TMR and R register
 906+ 17A8 3A 17 61     RND8:       ld      A,(TMRCNT)      ; load LSB of sys-timer
 907+ 17AB 47                       ld      B,A             ; copy into B
 908+ 17AC ED 5F                    ld      A,R             ; load refresh register
 909+ 17AE A8                       xor     B               ; A xor B
 910+ 17AF 47                       ld      B,A             ; copy into B
 911+ 17B0 0F                       rrca                    ; multiply by 32
 912+ 17B1 0F                       rrca
 913+ 17B2 0F                       rrca
 914+ 17B3 EE 1F                    xor     $1F
 915+ 17B5 80                       add     A,B
 916+ 17B6 DE FF                    sbc     A,255           ; carry
 917+ 17B8 C9                       ret                     ; return to caller
 918+ 17B9
 919+ 17B9
 920+ 17B9              ; char ported into 0-9 interval
 921+ 17B9 E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 922+ 17BB FE 0A                    cp      $0A             ; is it < 10?
 923+ 17BD 38 02                    jr      C,CH0TO9E       ; yes, jump over
 924+ 17BF D6 0A                    sub     $0A             ; subract 10
 925+ 17C1 C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 926+ 17C3 C9                       ret
 927+ 17C4
 928+ 17C4
 929+ 17C4              ; first check DOS validity then load disk details
 930+ 17C4 CD 09 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 931+ 17C7 C5                       push    BC              ; store BC
 932+ 17C8 D5                       push    DE              ; store DE
 933+ 17C9 E5                       push    HL              ; store HL
 934+ 17CA 01 00 00                 ld      BC,$0000
 935+ 17CD 11 00 00                 ld      DE,$0000
 936+ 17D0 CD 4B 10                 call    CF_SETSTR       ; set sector #0
 937+ 17D3 CD 8D 10                 call    CF_RD_SEC       ; read sector
 938+ 17D6 2A CC 60                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 939+ 17D9 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 940+ 17DC 19                       add     HL,DE
 941+ 17DD 11 E6 10                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 942+ 17E0 06 04                    ld      B,$04           ; 4 chars
 943+ 17E2 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 944+ 17E3 BE                       cp      (HL)            ; compare with disk DOS version
 945+ 17E4 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 946+ 17E6 13                       inc     DE              ; next source
 947+ 17E7 23                       inc     HL              ; next comparison
 948+ 17E8 10 F8                    djnz    CHKDSKVAL1      ; repeat
 949+ 17EA 2A CA 60                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 950+ 17ED 11 1D 00                 ld      DE,$001D        ; point to address of data area
 951+ 17F0 19                       add     HL,DE           ; set pointer to beginning of identifies
 952+ 17F1 5E                       ld      E,(HL)          ; load LSB
 953+ 17F2 23                       inc     HL              ; increment pointer
 954+ 17F3 56                       ld      D,(HL)          ; load MSB: DE now has the first sector of data area
 955+ 17F4 AF                       xor     A               ; no error - clear Carry flag
 956+ 17F5 18 01                    jr      CHKDSKVAL2      ; jump over
 957+ 17F7 37           CHKDSKVALE: scf                     ; error - set carry flag
 958+ 17F8 E1           CHKDSKVAL2: pop     HL
 959+ 17F9 D1                       pop     DE
 960+ 17FA C1                       pop     BC
 961+ 17FB C9                       ret                     ; return to caller
 962+ 17FC
 963+ 17FC
 964+ 17FC              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 965+ 17FC              ; Ipnputs: DE: pointer to dest.
 966+ 17FC ED 4B 3B 61  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 967+ 1800 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 968+ 1801 FE 11                    cp      $11             ; is it <=16?
 969+ 1803 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 970+ 1805 0E 10                    ld      C,$10           ; no, get only 16 chars
 971+ 1807 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 972+ 1808 0E 10                    ld      C,$10           ; char counter
 973+ 180A 2A 39 61                 ld      HL,(DKNMPT)     ; pointer to disk name
 974+ 180D 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 975+ 180E CD 7C 18                 call    CHK_NAM         ; check if valid
 976+ 1811 D8                       ret     C               ; no, file name error
 977+ 1812 12                       ld      (DE),A          ; yes, store char
 978+ 1813 13                       inc     DE              ; next I/O location
 979+ 1814 23                       inc     HL              ; next disk name char
 980+ 1815 0D                       dec     C               ; decrement number of chars copied
 981+ 1816 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 982+ 1818 79                       ld      A,C             ; check if there are no empty chars in file
 983+ 1819 B7                       or      A
 984+ 181A C8                       ret     Z               ; yes, job finished - return
 985+ 181B 3E 20                    ld      A,SPC           ; no, padding required
 986+ 181D 12           CHKNMVAL3:  ld      (DE),A          ; store char
 987+ 181E 13                       inc     DE              ; next location
 988+ 181F 0D                       dec     C               ; check if padding is over
 989+ 1820 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 990+ 1822 AF                       xor     A               ; clear Carry flag
 991+ 1823 C9                       ret                     ; return to caller
 992+ 1824
 993+ 1824
 994+ 1824              ; store DE into (HL) and (HL+1)
 995+ 1824 73           DE2HL:      ld      (HL),E          ; LSB of size
 996+ 1825 23                       inc     HL
 997+ 1826 72                       ld      (HL),D          ; MSB of size
 998+ 1827 23                       inc     HL
 999+ 1828 C9                       ret                     ; return to caller
1000+ 1829
1001+ 1829
1002+ 1829              ; get DE from (HL) and (HL+1)
1003+ 1829 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
1004+ 182A 23                       inc     HL              ; next location
1005+ 182B 56                       ld      D,(HL)          ; get MSB into D
1006+ 182C 23                       inc     HL              ; next location
1007+ 182D C9                       ret                     ; return to caller
1008+ 182E
1009+ 182E
1010+ 182E              ; convert a 16/32-bit number into an ASCII string and print it
1011+ 182E              ; inputs: HL pointer to 32-bit number
1012+ 182E 5E           PRN32ASCII: ld      E,(HL)          ; load MSB into DE  <-- entry for 32-bit
1013+ 182F 23                       inc     HL
1014+ 1830 56                       ld      D,(HL)
1015+ 1831 23                       inc     HL
1016+ 1832 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
1017+ 1833 23                       inc     HL
1018+ 1834 46                       ld      B,(HL)
1019+ 1835 C5                       push    BC              ; copy BC...
1020+ 1836 DD E1                    pop     IX              ; ...into IX
1021+ 1838 FD 21 E0 60  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
1022+ 183C CD C1 4D                 call    CLCN32          ; convert number in DEIX into ASCII number
1023+ 183F 21 E0 60                 ld      HL,TPBF1        ; address of ASCII number
1024+ 1842 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
1025+ 1843 B7                       or      A               ; is it $00 (end of string)?
1026+ 1844 C8                       ret     Z               ; yes, leave
1027+ 1845 CD 76 23                 call    OUTC            ; no, print char
1028+ 1848 23                       inc     HL              ; next char
1029+ 1849 18 F7                    jr      PRNTSIZ         ; repeat
1030+ 184B
1031+ 184B
1032+ 184B              ; convert one or more bytes into memory in hex format
1033+ 184B              ; HL: pointer to number in memory - B: number of bytes to convert
1034+ 184B              ; destroys: A, D, HL
1035+ 184B 50           PRN_HEX:    ld      D,B             ; move bytes into D
1036+ 184C 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1037+ 184D CD 6C 18                 call    BYTEHEX         ; print hex number
1038+ 1850 23                       inc     HL              ; next location
1039+ 1851 15                       dec     D               ; decrement bytes to convert
1040+ 1852 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1041+ 1854 C9                       ret
1042+ 1855
1043+ 1855
1044+ 1855              ; convert one or more words into memory in hex format
1045+ 1855              ; IX: pointer to number in memory - B: number of words to convert
1046+ 1855              ; destroys: AF, IX
1047+ 1855 D5           PRN_WHEX:   push    DE
1048+ 1856 50                       ld      D,B
1049+ 1857 DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1050+ 185A CD 6C 18                 call    BYTEHEX         ; print hex number
1051+ 185D DD 7E 00                 ld      A,(IX)          ; load LSB into A
1052+ 1860 CD 6C 18                 call    BYTEHEX         ; print hex number
1053+ 1863 DD 23                    inc     IX
1054+ 1865 DD 23                    inc     IX              ; next word
1055+ 1867 15                       dec     D               ; decrement words to convert
1056+ 1868 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1057+ 186A D1                       pop     DE
1058+ 186B C9                       ret
1059+ 186C
1060+ 186C
1061+ 186C              ; print A in hex format
1062+ 186C C5           BYTEHEX:    push    BC
1063+ 186D D5                       push    DE
1064+ 186E CD 0D 4C                 call    BYT2ASC         ; convert to HEX and get back into BC
1065+ 1871 78                       ld      A,B
1066+ 1872 CD 76 23                 call    OUTC            ; print left nibble
1067+ 1875 79                       ld      A,C
1068+ 1876 CD 76 23                 call    OUTC            ; print right nibble
1069+ 1879 D1                       pop     DE
1070+ 187A C1                       pop     BC
1071+ 187B C9                       ret                     ; return to caller
1072+ 187C
1073+ 187C
1074+ 187C              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9' and 'A'-'Z'
1075+ 187C              ; input: A -> char to check
1076+ 187C              ; return: C is set if ERROR, reset otherwise
1077+ 187C FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1078+ 187E C8                       ret     Z               ; return if equal (C is reset)
1079+ 187F FE 2D                    cp      '-'             ; is it a minus?
1080+ 1881 C8                       ret     Z               ; return if equal
1081+ 1882 FE 30                    cp      '0'             ; char < '0' ?
1082+ 1884 D8                       ret     C               ; yes, disk name error
1083+ 1885 FE 3A                    cp      ':'             ; is char <= '9' ?
1084+ 1887 38 07                    jr      C,CHK_C_CF      ; yes, leave
1085+ 1889 E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1086+ 188B FE 41                    cp      'A'             ; is char >= 'A' ?
1087+ 188D D8                       ret     C               ; no, error
1088+ 188E FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1089+ 1890 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1090+ 1891 C9           CHK_NAM_LV: ret                     ; return to caller
1091+ 1892
1092+ 1892
1093+ 1892
1094+ 1892              ; clear I/O buffer
1095+ 1892 F5           CLRIOBF:    push    AF              ; store AF
1096+ 1893 C5                       push    BC              ; store BC
1097+ 1894 E5                       push    HL              ; store HL
1098+ 1895 2A CC 60                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1099+ 1898 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1100+ 189B AF           CLRBUFF:    xor     A               ; reset A
1101+ 189C 77           RSTIOBF:    ld      (HL),A          ; reset cell
1102+ 189D 23                       inc     HL              ; next cell
1103+ 189E 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1104+ 18A0 0D                       dec     C               ; decrement C
1105+ 18A1 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1106+ 18A3 E1                       pop     HL              ; retrieve HL
1107+ 18A4 C1                       pop     BC              ; retrieve BC
1108+ 18A5 F1                       pop     AF              ; retrieve AF
1109+ 18A6 C9                       ret                     ; return to caller
1110+ 18A7
1111+ 18A7
1112+ 18A7              ; clear DOS buffer
1113+ 18A7 F5           CLRDOSBF:   push    AF
1114+ 18A8 C5                       push    BC
1115+ 18A9 E5                       push    HL
1116+ 18AA 2A CA 60                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1117+ 18AD 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1118+ 18B0 C3 9B 18                 jp      CLRBUFF         ; continue
# file closed: ../include/dos/dos-1.0.asm
  84  18B3
  85  18B3              ; include the latest version of the LM80C 64K BASIC interpreter
  86  18B3                  INCLUDE "../include/basic/basic-1.05.asm"
# file opened: ../include/basic/basic-1.05.asm
   1+ 18B3              ; ------------------------------------------------------------------------------
   2+ 18B3              ; LM80C BASIC (32K/64K) - R3.19
   3+ 18B3              ; ------------------------------------------------------------------------------
   4+ 18B3              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18B3              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18B3              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18B3              ; kind of warranty: you can use them at your own risk.
   8+ 18B3              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18B3              ; maintain the copyright notices, include this advice and the note to the
  10+ 18B3              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18B3              ; redistribuite them.
  12+ 18B3              ; https://www.leonardomiliani.com
  13+ 18B3              ;
  14+ 18B3              ; Please support me by visiting the following links:
  15+ 18B3              ; Main project page: https://www.leonardomiliani.com
  16+ 18B3              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18B3              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18B3              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18B3              ; ------------------------------------------------------------------------------
  20+ 18B3              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18B3              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18B3              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18B3
  24+ 18B3
  25+ 18B3              ;------------------------------------------------------------------------------
  26+ 18B3              ;  L M 8 0 C   B A S I C
  27+ 18B3              ;------------------------------------------------------------------------------
  28+ 18B3
  29+ 18B3              ; GENERAL EQUATES
  30+ 18B3
  31+ 18B3              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18B3              CTRLC           equ     $03             ; Control "C"
  33+ 18B3              CTRLG           equ     $07             ; Control "G"
  34+ 18B3              BKSP            equ     $08             ; Back space
  35+ 18B3              LF              equ     $0A             ; Line feed
  36+ 18B3              CS              equ     $0C             ; Clear screen
  37+ 18B3              CR              equ     $0D             ; Carriage return
  38+ 18B3              CTRLO           equ     $0F             ; Control "O"
  39+ 18B3              CTRLQ           equ     $11             ; Control "Q"
  40+ 18B3              CTRLR           equ     $12             ; Control "R"
  41+ 18B3              CTRLS           equ     $13             ; Control "S"
  42+ 18B3              CTRLU           equ     $15             ; Control "U"
  43+ 18B3              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18B3              ESC             equ     $1B             ; Escape
  45+ 18B3              SPC             equ     $20             ; Space
  46+ 18B3              DEL             equ     $7F             ; Delete
  47+ 18B3              INSRT           equ     $1A             ; Insert Key
  48+ 18B3              ; cursor ASCII codes
  49+ 18B3              CRSLFT          equ     $1C             ; cursor left
  50+ 18B3              CRSRGT          equ     $1D             ; cursor right
  51+ 18B3              CRSUP           equ     $1E             ; cursor up
  52+ 18B3              CRSDN           equ     $1F             ; cursor down
  53+ 18B3
  54+ 18B3
  55+ 18B3              ;-------------------------------------------------------------------------
  56+ 18B3              ; BASIC ERROR MESSAGES
  57+ 18B3              ; the interpreter looks for a single-byte code in the following list,
  58+ 18B3              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18B3              ; find where to retrieve the message text in "ERRORS"
  60+ 18B3
  61+ 18B3              ; BASIC ERROR CODE VALUES
  62+ 18B3              ; These values act as an offset to point to the error message into the error table
  63+ 18B3              ; must be incremented by 2 because they point to a word address jump
  64+ 18B3              NF      equ     $00     ; NEXT without FOR
  65+ 18B3              SN      equ     $02     ; Syntax error
  66+ 18B3              RG      equ     $04     ; RETURN without GOSUB
  67+ 18B3              OD      equ     $06     ; Out of DATA
  68+ 18B3              FC      equ     $08     ; Function call error
  69+ 18B3              OV      equ     $0A     ; Overflow
  70+ 18B3              OM      equ     $0C     ; Out of memory
  71+ 18B3              UL      equ     $0E     ; Undefined line number
  72+ 18B3              BS      equ     $10     ; Bad subscript
  73+ 18B3              DD      equ     $12     ; Re-Dimensioned array
  74+ 18B3              DZ      equ     $14     ; Division by zero (/0)
  75+ 18B3              ID      equ     $16     ; Illegal direct
  76+ 18B3              TM      equ     $18     ; Type mis-match
  77+ 18B3              OS      equ     $1A     ; Out of string space
  78+ 18B3              LS      equ     $1C     ; String too long
  79+ 18B3              ST      equ     $1E     ; String formula too complex
  80+ 18B3              CN      equ     $20     ; Can't continue
  81+ 18B3              UF      equ     $22     ; Undefined FN function
  82+ 18B3              MO      equ     $24     ; Missing operand
  83+ 18B3              HX      equ     $26     ; HEX error
  84+ 18B3              BN      equ     $28     ; BIN error
  85+ 18B3              GM      equ     $2A     ; No Graphics Mode
  86+ 18B3              SC      equ     $2C     ; Serial configuration
  87+ 18B3              SA      equ     $2E     ; Serial port already open
  88+ 18B3              SO      equ     $30     ; Serial buffer overrun
  89+ 18B3              HP      equ     $32     ; HELP call
  90+ 18B3              IM      equ     $34     ; Illegal indirect
  91+ 18B3              NR      equ     $36     ; Device not ready
  92+ 18B3              D0      equ     $38     ; DOS not enabled
  93+ 18B3              D1      equ     $3A     ; Disk/File name error
  94+ 18B3              D2      equ     $3C     ; Disk geometry error
  95+ 18B3              D3      equ     $3E     ; Save error
  96+ 18B3              D4      equ     $40     ; Load error
  97+ 18B3              D5      equ     $42     ; Disk full error
  98+ 18B3              D6      equ     $44     ; Duplicate file name error
  99+ 18B3              D7      equ     $46     ; DOS version error
 100+ 18B3              D8      equ     $48     ; File not found error
 101+ 18B3
 102+ 18B3
 103+ 18B3              ; BASIC ERROR POINTER TABLE
 104+ 18B3              ERRTBL: equ $
 105+ 18B3 FD 18        NFPTR:  defw    NFMSG
 106+ 18B5 0E 19        SNPTR:  defw    SNMSG
 107+ 18B7 15 19        RGPTR:  defw    RGMSG
 108+ 18B9 2A 19        ODPTR:  defw    ODMSG
 109+ 18BB 36 19        FCPTR:  defw    FCMSG
 110+ 18BD 4C 19        OVPTR:  defw    OVMSG
 111+ 18BF 55 19        OMPTR:  defw    OMMSG
 112+ 18C1 63 19        ULPTR:  defw    ULMSG
 113+ 18C3 72 19        BSPTR:  defw    BSMSG
 114+ 18C5 80 19        DDPTR:  defw    DDMSG
 115+ 18C7 95 19        DZPTR:  defw    DZMSG
 116+ 18C9 A6 19        IDPTR:  defw    IDMSG
 117+ 18CB BA 19        TMPTR:  defw    TMMSG
 118+ 18CD C9 19        OSPTR:  defw    OSMSG
 119+ 18CF DD 19        LSPTR:  defw    LSMSG
 120+ 18D1 ED 19        STPTR:  defw    STMSG
 121+ 18D3 08 1A        CNPTR:  defw    CNMSG
 122+ 18D5 17 1A        UFPTR:  defw    UFMSG
 123+ 18D7 2D 1A        MOPTR:  defw    MOMSG
 124+ 18D9 3D 1A        HXPTR:  defw    HXMSG
 125+ 18DB 48 1A        BNPTR:  defw    BNMSG
 126+ 18DD 53 1A        GMPRT:  defw    GMMSG
 127+ 18DF 64 1A        SCPTR:  defw    SCMSG
 128+ 18E1 79 1A        SAPTR:  defw    SAMSG
 129+ 18E3 92 1A        SOPTR:  defw    SOMSG
 130+ 18E5 A8 1A        HPPTR:  defw    HPMSG
 131+ 18E7 B2 1A        IMPRT:  defw    IMMSG
 132+ 18E9 C8 1A        NRPRT:  defw    NRMSG
 133+ 18EB D9 1A        D0PTR:  defw    D0MSG
 134+ 18ED E9 1A        D1PRT:  defw    D1MSG
 135+ 18EF F5 1A        D2PRT:  defw    D2MSG
 136+ 18F1 03 1B        D3PRT:  defw    D3MSG
 137+ 18F3 08 1B        D4PTR:  defw    D4MSG
 138+ 18F5 0D 1B        D5PTR:  defw    D5MSG
 139+ 18F7 17 1B        D6PTR:  defw    D6MSG
 140+ 18F9 2B 1B        D7PRT:  defw    D7MSG
 141+ 18FB 37 1B        D8PTR:  defw    D8MSG
 142+ 18FD
 143+ 18FD
 144+ 18FD              ; BASIC ERROR MESSAGE LIST
 145+ 18FD              ERRORS  equ $
 146+ 18FD 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 1901 20 57 69 74
 146+ 1905 68 6F 75 74
 146+ 1909 20 46 4F 52
 146+ 190D 00
 147+ 190E 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 1912 61 78 00
 148+ 1915 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 1919 52 4E 20 77
 148+ 191D 69 74 68 6F
 148+ 1921 75 74 20 47
 148+ 1925 4F 53 55 42
 148+ 1929 00
 149+ 192A 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 192E 6F 66 20 44
 149+ 1932 41 54 41 00
 150+ 1936 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 193A 67 61 6C 20
 150+ 193E 46 75 6E 63
 150+ 1942 74 69 6F 6E
 150+ 1946 20 43 61 6C
 150+ 194A 6C 00
 151+ 194C 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1950 66 6C 6F 77
 151+ 1954 00
 152+ 1955 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 1959 6F 66 20 4D
 152+ 195D 65 6D 6F 72
 152+ 1961 79 00
 153+ 1963 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 1967 66 69 6E 65
 153+ 196B 64 20 4C 69
 153+ 196F 6E 65 00
 154+ 1972 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 1976 53 75 62 73
 154+ 197A 63 72 69 70
 154+ 197E 74 00
 155+ 1980 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 1984 69 6D 65 6E
 155+ 1988 73 69 6F 6E
 155+ 198C 65 64 20 41
 155+ 1990 72 72 61 79
 155+ 1994 00
 156+ 1995 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 1999 73 69 6F 6E
 156+ 199D 20 62 79 20
 156+ 19A1 5A 65 72 6F
 156+ 19A5 00
 157+ 19A6 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 19AA 67 61 6C 20
 157+ 19AE 44 69 72 65
 157+ 19B2 63 74 20 4D
 157+ 19B6 6F 64 65 00
 158+ 19BA 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 19BE 20 4D 69 73
 158+ 19C2 2D 6D 61 74
 158+ 19C6 63 68 00
 159+ 19C9 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 19CD 6F 66 20 53
 159+ 19D1 74 72 69 6E
 159+ 19D5 67 20 53 70
 159+ 19D9 61 63 65 00
 160+ 19DD 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 19E1 6E 67 20 54
 160+ 19E5 6F 6F 20 4C
 160+ 19E9 6F 6E 67 00
 161+ 19ED 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 19F1 6E 67 20 46
 161+ 19F5 6F 72 6D 75
 161+ 19F9 6C 61 20 54
 161+ 19FD 6F 6F 20 43
 161+ 1A01 6F 6D 70 6C
 161+ 1A05 65 78 00
 162+ 1A08 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A0C 74 20 43 6F
 162+ 1A10 6E 74 69 6E
 162+ 1A14 75 65 00
 163+ 1A17 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A1B 66 69 6E 65
 163+ 1A1F 64 20 46 4E
 163+ 1A23 20 46 75 6E
 163+ 1A27 63 74 69 6F
 163+ 1A2B 6E 00
 164+ 1A2D 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A31 69 6E 67 20
 164+ 1A35 4F 70 65 72
 164+ 1A39 61 6E 64 00
 165+ 1A3D 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A41 46 6F 72 6D
 165+ 1A45 61 74 00
 166+ 1A48 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A4C 46 6F 72 6D
 166+ 1A50 61 74 00
 167+ 1A53 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A57 72 61 70 68
 167+ 1A5B 69 63 73 20
 167+ 1A5F 4D 6F 64 65
 167+ 1A63 00
 168+ 1A64 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1A68 61 6C 20 43
 168+ 1A6C 6F 6E 66 69
 168+ 1A70 67 75 72 61
 168+ 1A74 74 69 6F 6E
 168+ 1A78 00
 169+ 1A79 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1A7D 61 6C 20 50
 169+ 1A81 6F 72 74 20
 169+ 1A85 41 6C 72 65
 169+ 1A89 61 64 79 20
 169+ 1A8D 4F 70 65 6E
 169+ 1A91 00
 170+ 1A92 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1A96 61 6C 20 42
 170+ 1A9A 75 66 66 65
 170+ 1A9E 72 20 4F 76
 170+ 1AA2 65 72 72 75
 170+ 1AA6 6E 00
 171+ 1AA8 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1AAC 20 43 61 6C
 171+ 1AB0 6C 00
 172+ 1AB2 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1AB6 67 61 6C 20
 172+ 1ABA 49 6E 64 69
 172+ 1ABE 72 65 63 74
 172+ 1AC2 20 4D 6F 64
 172+ 1AC6 65 00
 173+ 1AC8 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1ACC 63 65 20 4E
 173+ 1AD0 6F 74 20 52
 173+ 1AD4 65 61 64 79
 173+ 1AD8 00
 174+ 1AD9 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1ADD 4E 6F 74 20
 174+ 1AE1 45 6E 61 62
 174+ 1AE5 6C 65 64 00
 175+ 1AE9 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1AED 20 53 74 72
 175+ 1AF1 69 6E 67 00
 176+ 1AF5 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1AF9 20 47 65 6F
 176+ 1AFD 6D 65 74 72
 176+ 1B01 79 00
 177+ 1B03 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1B07 00
 178+ 1B08 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B0C 00
 179+ 1B0D 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B11 20 46 75 6C
 179+ 1B15 6C 00
 180+ 1B17 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B1B 69 63 61 74
 180+ 1B1F 65 20 46 69
 180+ 1B23 6C 65 20 4E
 180+ 1B27 61 6D 65 00
 181+ 1B2B 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B2F 56 65 72 73
 181+ 1B33 69 6F 6E 00
 182+ 1B37 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B3B 20 4E 6F 74
 182+ 1B3F 20 46 6F 75
 182+ 1B43 6E 64 00
 183+ 1B46
 184+ 1B46
 185+ 1B46              ;-----------------------------------------------------------------------------
 186+ 1B46              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B46              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B46              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B46
 190+ 1B46 C3 4C 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B49 C3 14 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B4C
 193+ 1B4C C3 53 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B4F 6A 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B51 2F 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B53 21 90 5F     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B56 F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B57 C3 E3 4C             jp      INITST          ; Go to initialise
 199+ 1B5A
 200+ 1B5A 21 04 1F     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1B5D 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1B60 11 90 5F             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1B63 ED B0                ldir                    ; Copy data
 204+ 1B65 EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1B66 F9                   ld      SP,HL           ; Temporary stack
 206+ 1B67 CD CD 21             call    CLREG           ; Clear registers and stack
 207+ 1B6A CD 81 28             call    PRNTCRLF        ; Output CRLF
 208+ 1B6D 32 C3 60             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1B70 32 A0 61             ld      (PROGST),A      ; Initialise program area
 210+ 1B73 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1B75 21 98 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1B78 CD 4D 2F             call    PRS             ; Output "Memory size"
 213+ 1B7B CD EA 21             call    PROMPT          ; Get input with '?'
 214+ 1B7E CD 23 09             call    CURSOR_ON       ; enable cursor
 215+ 1B81 CD B4 25             call    GETCHR          ; Get next character
 216+ 1B84 B7                   or      A               ; Set flags
 217+ 1B85 C2 9D 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1B88 21 04 62     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1B8B 23           MLOOP:  inc     HL              ; Next byte
 220+ 1B8C 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1B8D B5                   or      L
 222+ 1B8E CA AF 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1B91 7E                   ld      A,(HL)          ; Get contents
 224+ 1B92 47                   ld      B,A             ; Save it
 225+ 1B93 2F                   cpl                     ; Flip all bits
 226+ 1B94 77                   ld      (HL),A          ; Put it back
 227+ 1B95 BE                   cp      (HL)            ; RAM there if same
 228+ 1B96 70                   ld      (HL),B          ; Restore old contents
 229+ 1B97 CA 8B 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1B9A C3 AF 1B             jp      SETTOP          ; Top of RAM found
 231+ 1B9D
 232+ 1B9D CD 84 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1BA0 B7                   or      A               ; Set flags on last byte
 234+ 1BA1 C2 6B 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1BA4 EB                   ex      DE,HL           ; Address into HL
 236+ 1BA5 2B                   dec     HL              ; Back one byte
 237+ 1BA6 3E D9                ld      A,%11011001     ; Test byte
 238+ 1BA8 46                   ld      B,(HL)          ; Get old contents
 239+ 1BA9 77                   ld      (HL),A          ; Load test byte
 240+ 1BAA BE                   cp      (HL)            ; RAM there if same
 241+ 1BAB 70                   ld      (HL),B          ; Restore old contents
 242+ 1BAC C2 75 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BAF
 244+ 1BAF CD 38 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BB2 2B                   dec     HL              ; Back one byte
 246+ 1BB3 11 03 62             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BB6 CD 65 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BB9 DA 75 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1BBC 3A 7C 61             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1BBF 1F                   rra                     ; is DOS disabled?
 251+ 1BC0 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1BC2 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1BC5 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1BC6 22 CC 60             ld      (IOBUFF),HL     ; ...and store address
 255+ 1BC9 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1BCC 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1BCD 22 CA 60             ld      (DOSBFR),HL     ; ...and store address
 258+ 1BD0 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1BD3 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1BD4 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1BD7 22 C8 60             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1BDA 19                   add     HL,DE           ; Allocate string space
 263+ 1BDB 22 DF 5F             ld      (STRSPC),HL     ; Save string space
 264+ 1BDE CD A8 21             call    CLRPTR          ; Clear program area
 265+ 1BE1 2A DF 5F             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1BE4 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1BE7 19                   add     HL,DE           ; Adjust HL
 268+ 1BE8 11 A0 61             ld      DE,PROGST       ; Start of program text
 269+ 1BEB 7D                   ld      A,L             ; Get LSB
 270+ 1BEC 93                   sub     E               ; Adjust it
 271+ 1BED 6F                   ld      L,A             ; Re-save
 272+ 1BEE 7C                   ld      A,H             ; Get MSB
 273+ 1BEF 9A                   sbc     A,D             ; Adjust it
 274+ 1BF0 67                   ld      H,A             ; Re-save
 275+ 1BF1 E5                   push    HL              ; Save bytes free
 276+ 1BF2 21 3A 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1BF5 CD 4D 2F             call    PRS             ; Output string
 278+ 1BF8 3A 7C 61             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1BFB B7                   or      A
 280+ 1BFC 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1BFE 21 7B 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1C01 CD 4D 2F             call    PRS
 283+ 1C04 21 23 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1C07 CD 4D 2F             call    PRS             ; Output string
 285+ 1C0A E1                   pop     HL              ; Get bytes free back
 286+ 1C0B CD EC 39             call    PRNTHL          ; Output amount of free memory
 287+ 1C0E 21 2C 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C11 CD 4D 2F             call    PRS             ; Output string
 289+ 1C14
 290+ 1C14 31 6F 60     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C17 CD CD 21     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C1A CD 11 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C1D CD 23 09             call    CURSOR_ON       ; enable cursor
 294+ 1C20 C3 CB 20             jp      PRNTOK          ; Go to get command line
 295+ 1C23
 296+ 1C23 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C27 20 20 20 20
 296+ 1C2B 00
 297+ 1C2C 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C30 65 73 20 66
 297+ 1C34 72 65 65 0D
 297+ 1C38 0D 00
 298+ 1C3A
 299+ 1C3A 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.19 ",251,"2021 L.Miliani"
 299+ 1C3E 43 20 42 41
 299+ 1C42 53 49 43 20
 299+ 1C46 33 2E 31 39
 299+ 1C4A 20 FB 32 30
 299+ 1C4E 32 31 20 4C
 299+ 1C52 2E 4D 69 6C
 299+ 1C56 69 61 6E 69
 300+ 1C5A 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1C5E 20 42 41 53
 300+ 1C62 49 43 20 34
 300+ 1C66 2E 37 20 20
 300+ 1C6A FB 31 39 37
 300+ 1C6E 38 20 4D 69
 300+ 1C72 63 72 6F 73
 300+ 1C76 6F 66 74 0D
 300+ 1C7A 00
 301+ 1C7B 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.00","  Loaded",CR,0
 301+ 1C7F 20 4C 4D 38
 301+ 1C83 30 43 20 44
 301+ 1C87 4F 53 20 31
 301+ 1C8B 2E 30 30 20
 301+ 1C8F 20 4C 6F 61
 301+ 1C93 64 65 64 0D
 301+ 1C97 00
 302+ 1C98
 303+ 1C98 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1C9C 72 79 20 74
 303+ 1CA0 6F 70 00
 304+ 1CA3
 305+ 1CA3              ; The following list reports all the functions supported by the interpreter.
 306+ 1CA3              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1CA3              ; then into the list of the reserved words below, and finally must increment the
 308+ 1CA3              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1CA3              ; function.
 310+ 1CA3
 311+ 1CA3              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1CA3              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1CA3              ; entry here must have the corresponding entry in the tokens list.
 314+ 1CA3 61 38        FNCTAB: defw    SGN
 315+ 1CA5 F7 2D                defw    TMR         ; added by Leonardo Miliani
 316+ 1CA7 25 39                defw    INT
 317+ 1CA9 77 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1CAB 96 5F                defw    USR
 319+ 1CAD 0D 2E                defw    FRE
 320+ 1CAF 88 32                defw    INP
 321+ 1CB1 3B 2E                defw    POS
 322+ 1CB3 EB 3A                defw    SQR
 323+ 1CB5 CA 3B                defw    RND
 324+ 1CB7 B5 36                defw    LOG
 325+ 1CB9 39 3B                defw    EXP
 326+ 1CBB 3F 3C                defw    COS
 327+ 1CBD 45 3C                defw    SIN
 328+ 1CBF A6 3C                defw    TAN
 329+ 1CC1 BB 3C                defw    ATN
 330+ 1CC3 64 33                defw    PEEK
 331+ 1CC5 26 3D                defw    DEEK
 332+ 1CC7 6B 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1CC9 3A 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1CCB 45 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1CCD 59 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1CCF 7D 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1CD1 1F 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1CD3 BF 30                defw    LEN
 339+ 1CD5 D7 2E                defw    STR
 340+ 1CD7 4F 32                defw    VAL
 341+ 1CD9 CE 30                defw    ASC
 342+ 1CDB DF 30                defw    CHR
 343+ 1CDD D7 4B                defw    HEX         ; added by Grant Searle
 344+ 1CDF 68 4C                defw    BIN         ; added by Grant Searle
 345+ 1CE1 EF 30                defw    LEFT
 346+ 1CE3 15 32                defw    RIGHT
 347+ 1CE5 1F 32                defw    MID
 348+ 1CE7
 349+ 1CE7              ; RESERVED WORD LIST
 350+ 1CE7              ; Here are all the reserved words used by the interpreter
 351+ 1CE7              ; To add custom functions/commands, the user must insert the keyword
 352+ 1CE7              ; in this list, following the schematic
 353+ 1CE7 C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1CEA C6 4F 52             defb    'F'+$80,"OR"
 355+ 1CED CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1CF1 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1CF5 C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1CF9 54
 358+ 1CFA C4 49 4D             defb    'D'+$80,"IM"
 359+ 1CFD D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1D01 CC 45 54             defb    'L'+$80,"ET"
 361+ 1D04 C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1D08 D2 55 4E             defb    'R'+$80,"UN"
 363+ 1D0B C9 46                defb    'I'+$80,"F"
 364+ 1D0D D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D11 4F 52 45
 365+ 1D14 C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D18 42
 366+ 1D19 D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D1D 52 4E
 367+ 1D1F D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D22 D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D26 CF 55 54             defb    'O'+$80,"UT"
 370+ 1D29 CF 4E                defb    'O'+$80,"N"
 371+ 1D2B C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D2F 53
 372+ 1D30 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D34 45
 373+ 1D35 C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D39 D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D3D C4 45 46             defb    'D'+$80,"EF"
 376+ 1D40 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D44 C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D48 D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D4C 45
 379+ 1D4D D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D51 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D55 D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D59 45 4E
 382+ 1D5B CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1D5F 54 45
 383+ 1D61 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1D65 44
 384+ 1D66 D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1D6A 4D 45
 385+ 1D6C D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1D70 45
 386+ 1D71 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1D75 52
 387+ 1D76 D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1D7A C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1D7E C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1D82 4C 45
 390+ 1D84 D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1D88 54
 391+ 1D89 D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1D8D 41 4C
 392+ 1D8F C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1D93 C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1D96 CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1D99 CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1D9C C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1DA0 4E 54
 397+ 1DA2 D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1DA6 48
 398+ 1DA7 D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1DAA D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DAE 54
 400+ 1DAF C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DB3 D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DB7 54
 402+ 1DB8 C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1DBC CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1DC0 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1DC4 52
 405+ 1DC5 CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1DC9 D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1DCD CE 45 57             defb    'N'+$80,"EW"
 408+ 1DD0 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1DD4 D4 4F                defb    'T'+$80,"O"
 410+ 1DD6 C6 4E                defb    'F'+$80,"N"
 411+ 1DD8 D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1DDC D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1DE0 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1DE3 D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1DE7                      ; from here: operators
 416+ 1DE7 AB                   defb    '+'+$80
 417+ 1DE8 AD                   defb    '-'+$80
 418+ 1DE9 AA                   defb    '*'+$80
 419+ 1DEA AF                   defb    '/'+$80
 420+ 1DEB A5                   defb    '%'+$80
 421+ 1DEC A3                   defb    '#'+$80
 422+ 1DED DE                   defb    '^'+$80
 423+ 1DEE C1 4E 44             defb    'A'+$80,"ND"
 424+ 1DF1 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1DF4 CF 52                defb    'O'+$80,"R"
 426+ 1DF6 BE                   defb    '>'+$80
 427+ 1DF7 BD                   defb    '='+$80
 428+ 1DF8 BC                   defb    '<'+$80
 429+ 1DF9
 430+ 1DF9                      ; from here there are the tokens' FUNCTIONS list
 431+ 1DF9                      ; this list must be coherent with the functions list above
 432+ 1DF9 D3 47 4E             defb    'S'+$80,"GN"
 433+ 1DFC D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1DFF C9 4E 54             defb    'I'+$80,"NT"
 435+ 1E02 C1 42 53             defb    'A'+$80,"BS"
 436+ 1E05 D5 53 52             defb    'U'+$80,"SR"
 437+ 1E08 C6 52 45             defb    'F'+$80,"RE"
 438+ 1E0B C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E0E D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E11 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E14 D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E17 CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E1A C5 58 50             defb    'E'+$80,"XP"
 444+ 1E1D C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E20 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E23 D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E26 C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E29 D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E2D C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E31 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E35 4B
 451+ 1E36 D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E3A 54
 452+ 1E3B D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E3F 54
 453+ 1E40 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E44 59
 454+ 1E45 D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E49 54
 455+ 1E4A C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E4E 52
 456+ 1E4F CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E52 D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E56 D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E59 C1 53 43             defb    'A'+$80,"SC"
 460+ 1E5C C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1E60 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1E64 C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1E68 CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1E6C 24
 464+ 1E6D D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1E71 54 24
 465+ 1E73 CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1E77 80                   defb    $80                     ; End-of-list marker
 467+ 1E78
 468+ 1E78              ; KEYWORD ADDRESS TABLE
 469+ 1E78              ; this list must be coherent with the commands'
 470+ 1E78              ; tokens list above
 471+ 1E78 FE 25        WORDTB: defw    PEND
 472+ 1E7A FB 24                defw    FOR
 473+ 1E7C FA 29                defw    NEXT
 474+ 1E7E 5D 27                defw    DATA
 475+ 1E80 F7 28                defw    INPUT
 476+ 1E82 4F 2C                defw    DIM
 477+ 1E84 31 29                defw    READ
 478+ 1E86 74 27                defw    LET
 479+ 1E88 1A 27                defw    GOTO
 480+ 1E8A F5 26                defw    RUN
 481+ 1E8C EC 27                defw    IF
 482+ 1E8E C4 25                defw    RESTOR
 483+ 1E90 09 27                defw    GOSUB
 484+ 1E92 38 27                defw    RETURN
 485+ 1E94 5F 27                defw    REM         ; original REM
 486+ 1E96 FC 25                defw    STOP
 487+ 1E98 94 32                defw    POUT
 488+ 1E9A CE 27                defw    ON
 489+ 1E9C A8 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1E9E E3 49                defw    ERASE       ; added by Leonardo Miliani
 491+ 1EA0 47 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1EA2 9A 32                defw    WAIT
 493+ 1EA4 43 2E                defw    DEF
 494+ 1EA6 8E 33                defw    POKE
 495+ 1EA8 31 3D                defw    DOKE
 496+ 1EAA 93 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1EAC D0 33                defw    SREG        ; added by Leonardo Miliani
 498+ 1EAE 1E 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1EB0 67 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1EB2 9E 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1EB4 2A 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1EB6 F1 33                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1EB8 48 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1EBA E2 3D                defw    COLOR       ; added by Leonardo Miliani
 505+ 1EBC D0 40                defw    PLOT        ; added by Leonardo Miliani
 506+ 1EBE 63 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1EC0 9C 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1EC2 8D 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1EC4 A7 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1EC6 E6 46                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1EC8 0A 3D                defw    CLS
 512+ 1ECA 04 47                defw    KEY         ; added by Leonardo Miliani
 513+ 1ECC DC 32                defw    NMI         ; added by Leonardo Miliani
 514+ 1ECE 9D 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1ED0 1E 3D                defw    WIDTH
 516+ 1ED2 36 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1ED4 CD 4C                defw    RESET       ; new behaviour: now it resets the system
 518+ 1ED6 61 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1ED8 1E 28                defw    PRINT
 520+ 1EDA 30 26                defw    CONT
 521+ 1EDC D2 23                defw    LIST
 522+ 1EDE A9 26                defw    CLEAR
 523+ 1EE0 7B 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1EE2 11 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1EE4 A7 21                defw    NEW
 526+ 1EE6
 527+ 1EE6              ; RESERVED WORD TOKEN VALUES
 528+ 1EE6              ; if you add a function or command you must increment by 1
 529+ 1EE6              ; the values below. Pay attention that you must increment only the
 530+ 1EE6              ; values AFTER the position where you entered the function/command word
 531+ 1EE6              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1EE6              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1EE6              ; that is before the point where VPOKE has been entered, every entry
 534+ 1EE6              ; after REM has been incremented.
 535+ 1EE6              ; Another example: when TMR has been added, since it's a function, every
 536+ 1EE6              ; entry after & included ZSGN must be checked (read below)
 537+ 1EE6
 538+ 1EE6              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1EE6              ZFOR    equ     $81             ; FOR
 540+ 1EE6              ZDATA   equ     $83             ; DATA
 541+ 1EE6              ZGOTO   equ     $88             ; GOTO
 542+ 1EE6              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1EE6              ZREM    equ     $8E             ; REM
 544+ 1EE6              ZELSE   equ     $AF             ; ELSE
 545+ 1EE6              ZPRINT  equ     $B0             ; PRINT
 546+ 1EE6              ZNEW    equ     $B6             ; NEW
 547+ 1EE6
 548+ 1EE6              ZTAB    equ     $B7             ; TAB
 549+ 1EE6              ZTO     equ     $B8             ; TO
 550+ 1EE6              ZFN     equ     $B9             ; FN
 551+ 1EE6              ZSPC    equ     $BA             ; SPC
 552+ 1EE6              ZTHEN   equ     $BB             ; THEN
 553+ 1EE6              ZNOT    equ     $BC             ; NOT
 554+ 1EE6              ZSTEP   equ     $BD             ; STEP
 555+ 1EE6
 556+ 1EE6              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1EE6              ZMINUS  equ     $BF             ; -
 558+ 1EE6              ZTIMES  equ     $C0             ; *
 559+ 1EE6              ZDIV    equ     $C1             ; /
 560+ 1EE6              ZMOD    equ     $C2             ; %
 561+ 1EE6              ZDINT   equ     $C3             ; #
 562+ 1EE6              ZOR     equ     $C7             ; OR
 563+ 1EE6              ZGTR    equ     $C8             ; >
 564+ 1EE6              ZEQUAL  equ     $C9             ; M
 565+ 1EE6              ZLTH    equ     $CA             ; <
 566+ 1EE6
 567+ 1EE6              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1EE6              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1EE6                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1EE6              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1EE6              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1EE6                                              ;               he/she must increment this pointer by 1
 573+ 1EE6
 574+ 1EE6              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1EE6              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1EE6              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1EE6 79           PRITAB: defb    $79             ; Precedence value
 578+ 1EE7 D3 39                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1EE9
 580+ 1EE9 79                   defb    $79             ; Precedence value
 581+ 1EEA B6 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1EEC
 583+ 1EEC 7C                   defb    $7C             ; Precedence value
 584+ 1EED F4 36                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1EEF
 586+ 1EEF 7C                   defb    $7C             ; Precedence value
 587+ 1EF0 A6 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1EF2
 589+ 1EF2 7C                   defb    $7C             ; Precedence value
 590+ 1EF3 51 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1EF5
 592+ 1EF5 7C                   defb    $7C             ; precedence value
 593+ 1EF6 49 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1EF8
 595+ 1EF8 7F                   defb    $7F             ; Precedence value
 596+ 1EF9 F4 3A                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1EFB
 598+ 1EFB 50                   defb    $50             ; Precedence value
 599+ 1EFC 98 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1EFE
 601+ 1EFE 4A                   defb    $4A             ; Precedence value
 602+ 1EFF A0 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1F01
 604+ 1F01 46                   defb    $46             ; Precedence value
 605+ 1F02 9B 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1F04
 607+ 1F04
 608+ 1F04              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1F04              ; these values are copied into RAM at startup
 610+ 1F04 C3 14 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1F07 ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1F0A C3 7F 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F0D D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F0F C9                   ret
 615+ 1F10 D6 00                sub     $00             ; Division support routine
 616+ 1F12 6F                   ld      L,A
 617+ 1F13 7C                   ld      A,H
 618+ 1F14 DE 00                sbc     A,$00
 619+ 1F16 67                   ld      H,A
 620+ 1F17 78                   ld      A,B
 621+ 1F18 DE 00                sbc     A,$00
 622+ 1F1A 47                   ld      B,A
 623+ 1F1B 3E 00                ld      A,$00
 624+ 1F1D C9                   ret
 625+ 1F1E 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F21 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F25 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F29 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F2D 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F31 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F35 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F39 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F3D D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F41 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F45 DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F47 C9                   ret
 637+ 1F48 FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F49 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F4A 00                   defb    $00             ; No nulls after input bytes
 640+ 1F4B 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F4C 00 00                defw    $00             ; Array load/save check sum
 642+ 1F4E 00                   defb    $00             ; Break not by NMI
 643+ 1F4F 00                   defb    $00             ; Break flag
 644+ 1F50 C3 EB 22             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F53 04 62                defw    STLOOK          ; Temp string space
 646+ 1F55 FE FF                defw    -2              ; Current line number (cold)
 647+ 1F57 FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F59 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1F5A 08                   defb    $08             ; auto-repeat delay
 650+ 1F5B 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1F5F 0D 00 00 00
 650+ 1F63 00 00 00 00
 650+ 1F67 00 00 00 00
 651+ 1F6B 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1F6F 00 00 00 00
 651+ 1F73 00 00 00 00
 651+ 1F77 00 00 00 00
 652+ 1F7B 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1F7F 45 4E 31 0D
 652+ 1F83 00 00 00 00
 652+ 1F87 00 00 00 00
 653+ 1F8B 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1F8F 52 31 2C 31
 653+ 1F93 35 2C 35 0D
 653+ 1F97 00 00 00 00
 654+ 1F9B 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1F9F 41 4C 31 2C
 654+ 1FA3 33 38 34 30
 654+ 1FA7 30 0D 00 00
 655+ 1FAB 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FAF 45 4E 32 0D
 655+ 1FB3 00 00 00 00
 655+ 1FB7 00 00 00 00
 656+ 1FBB 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 1FBF 0D 00 00 00
 656+ 1FC3 00 00 00 00
 656+ 1FC7 00 00 00 00
 657+ 1FCB 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 1FCF 0D 00 00 00
 657+ 1FD3 00 00 00 00
 657+ 1FD7 00 00 00 00
 658+ 1FDB A1 61                defw    PROGST+1        ; Start of program text
 659+ 1FDD              INITBE:
 660+ 1FDD
 661+ 1FDD              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 1FDD
 663+ 1FDD 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 1FE1 6F 72 00
 664+ 1FE4 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 1FE8 00
 665+ 1FE9              ZERBYT  equ     $-1             ; A zero byte
 666+ 1FE9 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 1FED 00
 667+ 1FEE 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 1FF2 6B 00
 668+ 1FF4
 669+ 1FF4 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 1FF7 39                   add     HL,SP           ; same index as specified
 671+ 1FF8 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 1FF9 23                   inc     HL              ; Point to index address
 673+ 1FFA FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 1FFC C0                   ret     NZ              ; No - exit
 675+ 1FFD 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 1FFE 23                   inc     HL
 677+ 1FFF 46                   ld      B,(HL)
 678+ 2000 23                   inc     HL              ; Point to sign of STEP
 679+ 2001 E5                   push    HL              ; Save pointer to sign
 680+ 2002 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 2003 60                   ld      H,B
 682+ 2004 7A                   ld      A,D             ; See if an index was specified
 683+ 2005 B3                   or      E               ; DE = 0 if no index specified
 684+ 2006 EB                   ex      DE,HL           ; Specified index into HL
 685+ 2007 CA 0E 20             jp      Z,INDFND        ; Skip if no index given
 686+ 200A EB                   ex      DE,HL           ; Index back into DE
 687+ 200B CD 65 23             call    CPDEHL          ; Compare index with one given
 688+ 200E 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2011 E1                   pop     HL              ; Restore pointer to sign
 690+ 2012 C8                   ret     Z               ; Return if block found
 691+ 2013 09                   add     HL,BC           ; Point to next block
 692+ 2014 C3 F8 1F             jp      LOKFOR          ; Keep on looking
 693+ 2017
 694+ 2017 CD 31 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 201A C5           MOVSTR: push    BC              ; Save end of source
 696+ 201B E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 201C C1                   pop     BC              ; Get end of destination
 698+ 201D CD 65 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2020 7E                   ld      A,(HL)          ; Get byte
 700+ 2021 02                   ld      (BC),A          ; Move it
 701+ 2022 C8                   ret     Z               ; Exit if all done
 702+ 2023 0B                   dec     BC              ; Next byte to move to
 703+ 2024 2B                   dec     HL              ; Next byte to move
 704+ 2025 C3 1D 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 2028
 706+ 2028 E5           CHKSTK: push    HL              ; Save code string address
 707+ 2029 2A 81 61             ld      HL,(ARREND)     ; Lowest free memory
 708+ 202C 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 202E 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 202F 09                   add     HL,BC
 711+ 2030 3E                   defb    $3E             ; Skip "push HL"
 712+ 2031 E5           ENFMEM: push    HL              ; Save code string address
 713+ 2032 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 2034 95                   sub     L
 715+ 2035 6F                   ld      L,A
 716+ 2036 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 2038 9C                   sbc     A,H
 718+ 2039 DA 40 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 203C 67                   ld      H,A
 720+ 203D 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 203E E1                   pop     HL              ; Restore code string address
 722+ 203F D8                   ret     C               ; Return if enough memory
 723+ 2040 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 2042 C3 85 20             jp      ERROR
 725+ 2045
 726+ 2045
 727+ 2045              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 2045 F5           EXITGM: push    AF              ; store AF
 729+ 2046 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
 730+ 2049 FE 02                cp      $02             ; G2?
 731+ 204B CA 52 20             jp      Z,LDG1          ; yes, back to G1
 732+ 204E FE 03                cp      $03             ; G3?
 733+ 2050 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 2052 E5           LDG1:   push    HL              ; store HL
 735+ 2053 D5                   push    DE              ; store DE
 736+ 2054 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 2057 F3                   di                      ; disable INTs
 738+ 2058 CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 205B FB                   ei                      ; re-enable INTs
 740+ 205C 3E 01                ld      A,$01           ; activate the...
 741+ 205E 32 33 61             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 2061 D1                   pop     DE              ; retrieve DE
 743+ 2062 E1                   pop     HL              ; retrieve HL
 744+ 2063 F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 2064 C9                   ret                     ; return to caller
 746+ 2065
 747+ 2065
 748+ 2065 2A 0A 61     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 2068 22 E1 5F             ld      (LINEAT),HL     ; Save as current line
 750+ 206B 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 206D 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 206E 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 2070 01                   defb    $01             ; Skip "ld E,NF"
 754+ 2071 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 2073 01                   defb    $01             ; Skip "ld E,DD"
 756+ 2074 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 2076 01                   defb    $01             ; Skip "ld E,UF"
 758+ 2077 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 2079 01                   defb    $01             ; Skip "ld E,OV
 760+ 207A 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 207C 01                   defb    $01             ; Skip "ld E,TM"
 762+ 207D 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 207F 01                   defb    $01             ; Skip next statement
 764+ 2080 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 2082 01                   defb    $01             ; Skip next statement
 766+ 2083 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 2085
 768+ 2085 CD CD 21     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 2088 CD 45 20             call    EXITGM          ; exit from graphic modes
 770+ 208B 32 D7 5F             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 208E CD 23 09             call    CURSOR_ON       ; enable cursor
 772+ 2091 CD 6F 28             call    STTLIN          ; Start new line
 773+ 2094 21 B3 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 2097 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 2098 3E 3F                ld      A,'?'
 776+ 209A CD 76 23             call    OUTC            ; Output '?'
 777+ 209D 19                   add     HL,DE           ; Offset to correct error code
 778+ 209E 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 209F 23                   inc     HL              ; by loading LSB,
 780+ 20A0 56                   ld      D,(HL)          ; then MSB
 781+ 20A1 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 20A3 CD 4D 2F             call    PRS             ; Output error message
 783+ 20A6 21 DD 1F             ld      HL,ERRMSG       ; "Error" message
 784+ 20A9 CD 4D 2F     ERRIN:  call    PRS             ; Output message
 785+ 20AC 2A E1 5F             ld      HL,(LINEAT)     ; Get line of error
 786+ 20AF 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20B2 CD 65 23             call    CPDEHL          ; See if cold start error
 788+ 20B5 CA 53 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20B8 7C                   ld      A,H             ; Was it a direct error?
 790+ 20B9 A5                   and     L               ; Line = -1 if direct error
 791+ 20BA 3C                   inc     A
 792+ 20BB CA C6 20             jp      Z,PTLN          ; Yes, jump over
 793+ 20BE E5                   push    HL              ; indirect mode - store HL
 794+ 20BF 2A E1 5F             ld      HL,(LINEAT)     ; copy current line number
 795+ 20C2 22 E3 5F             ld      (HLPLN),HL      ; save in HELP line register
 796+ 20C5 E1                   pop     HL              ; retrieve HL
 797+ 20C6 C4 E4 39     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 20C9
 799+ 20C9 3E                   defb    $3E             ; Skip "pop BC"
 800+ 20CA C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 20CB
 802+ 20CB              ; run into direct mode: print OK and get command
 803+ 20CB AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 20CC 32 D7 5F             ld      (CTLOFG),A      ; Enable output
 805+ 20CF CD 6F 28             call    STTLIN          ; Start new line
 806+ 20D2 21 E9 1F             ld      HL,OKMSG        ; "Ok" message
 807+ 20D5 CD 4D 2F             call    PRS             ; Output "Ok"
 808+ 20D8 CD 23 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 20DB 3A 79 61             ld      A,(SERIALS_EN)  ; load serial state
 810+ 20DE EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 20E0 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 20E3 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 20E6 22 E1 5F             ld      (LINEAT),HL     ; Save as current line
 814+ 20E9 CD EB 22             call    GETLIN          ; Get an input line
 815+ 20EC DA D8 20             jp      C,GETCMD        ; Get line again if break
 816+ 20EF CD B4 25             call    GETCHR          ; Get first character
 817+ 20F2 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 20F3 DA 6B 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 20F6 1F                   rra                     ; recover original char and Carry
 820+ 20F7 3C                   inc     A               ; Test if end of line
 821+ 20F8 3D                   dec     A               ; Without affecting Carry
 822+ 20F9 CA D8 20             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 20FC F5                   push    AF              ; Save Carry status
 824+ 20FD 3A 79 61             ld      A,(SERIALS_EN)  ; load serial state
 825+ 2100 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 2102 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 2105 CD 38 09             call    CURSOR_OFF      ; cursor disabled
 828+ 2108 CD 84 26             call    ATOH            ; Get line number into DE
 829+ 210B D5                   push    DE              ; Save line number
 830+ 210C CD 02 22             call    CRUNCH          ; Tokenise rest of line
 831+ 210F 47                   ld      B,A             ; Length of tokenised line
 832+ 2110 D1                   pop     DE              ; Restore line number
 833+ 2111 F1                   pop     AF              ; Restore Carry
 834+ 2112 D2 94 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 2115 D5                   push    DE              ; Save line number
 836+ 2116 C5                   push    BC              ; Save length of tokenised line
 837+ 2117 AF                   xor     A
 838+ 2118 32 0D 61             ld      (LSTBIN),A      ; Clear last byte input
 839+ 211B CD B4 25             call    GETCHR          ; Get next character
 840+ 211E B7                   or      A               ; Set flags
 841+ 211F F5                   push    AF              ; And save them
 842+ 2120 CD 87 21             call    SRCHLN          ; Search for line number in DE
 843+ 2123 DA 2C 21             jp      C,LINFND        ; Jump if line found
 844+ 2126 F1                   pop     AF              ; Get status
 845+ 2127 F5                   push    AF              ; And re-save
 846+ 2128 CA 33 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 212B B7                   or      A               ; Clear Carry
 848+ 212C C5           LINFND: push    BC              ; Save address of line in prog
 849+ 212D D2 43 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2130 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2131 2A 7D 61             ld      HL,(PROGND)     ; End of program
 852+ 2134 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 2135 02                   ld      (BC),A
 854+ 2136 03                   inc     BC              ; Next destination
 855+ 2137 13                   inc     DE              ; Next source
 856+ 2138 CD 65 23             call    CPDEHL          ; All done?
 857+ 213B C2 34 21             jp      NZ,SFTPRG       ; More to do
 858+ 213E 60                   ld      H,B             ; HL - New end of program
 859+ 213F 69                   ld      L,C
 860+ 2140 22 7D 61             ld      (PROGND),HL     ; Update end of program
 861+ 2143
 862+ 2143 D1           INEWLN: pop     DE              ; Get address of line,
 863+ 2144 F1                   pop     AF              ; Get status
 864+ 2145 CA 6A 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 2148 2A 7D 61             ld      HL,(PROGND)     ; Get end of program
 866+ 214B E3                   ex      (SP),HL         ; Get length of input line
 867+ 214C C1                   pop     BC              ; End of program to BC
 868+ 214D 09                   add     HL,BC           ; Find new end
 869+ 214E E5                   push    HL              ; Save new end
 870+ 214F CD 17 20             call    MOVUP           ; Make space for line
 871+ 2152 E1                   pop     HL              ; Restore new end
 872+ 2153 22 7D 61             ld      (PROGND),HL     ; Update end of program pointer
 873+ 2156 EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 2157 74                   ld      (HL),H          ; Save MSB
 875+ 2158 D1                   pop     DE              ; Get new line number
 876+ 2159 23                   inc     HL              ; Skip pointer
 877+ 215A 23                   inc     HL
 878+ 215B 73                   ld      (HL),E          ; Save LSB of line number
 879+ 215C 23                   inc     HL
 880+ 215D 72                   ld      (HL),D          ; Save MSB of line number
 881+ 215E 23                   inc     HL              ; To first byte in line
 882+ 215F 11 6A 60             ld      DE,BUFFER       ; Copy buffer to program
 883+ 2162 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 2163 77                   ld      (HL),A          ; Save destinations
 885+ 2164 23                   inc     HL              ; Next source
 886+ 2165 13                   inc     DE              ; Next destination
 887+ 2166 B7                   or      A               ; Done?
 888+ 2167 C2 62 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 216A CD B3 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 216D 23                   inc     HL              ; To LSB of pointer
 891+ 216E EB                   ex      DE,HL           ; Address to DE
 892+ 216F 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 2170 6B                   ld      L,E
 894+ 2171 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 2172 23                   inc     HL              ; To MSB of pointer
 896+ 2173 B6                   or      (HL)            ; Compare with MSB pointer
 897+ 2174 CA D8 20             jp      Z,GETCMD        ; Get command line if end
 898+ 2177 23                   inc     HL              ; To LSB of line number
 899+ 2178 23                   inc     HL              ; Skip line number
 900+ 2179 23                   inc     HL              ; Point to first byte in line
 901+ 217A AF                   xor     A               ; Looking for 00 byte
 902+ 217B BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 217C 23                   inc     HL              ; Move to next byte
 904+ 217D C2 7B 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 2180 EB                   ex      DE,HL           ; Next line address to HL
 906+ 2181 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 2182 23                   inc     HL
 908+ 2183 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 2184 C3 6F 21             jp      PTRLP           ; Do next line
 910+ 2187
 911+ 2187 2A 67 60     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 218A 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 218B 4D                   ld      C,L
 914+ 218C 7E                   ld      A,(HL)          ; Get address of next line
 915+ 218D 23                   inc     HL
 916+ 218E B6                   or      (HL)            ; End of program found?
 917+ 218F 2B                   dec     HL
 918+ 2190 C8                   ret     Z               ; Yes - Line not found
 919+ 2191 23                   inc     HL
 920+ 2192 23                   inc     HL
 921+ 2193 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 2194 23                   inc     HL
 923+ 2195 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 2196 6F                   ld      L,A
 925+ 2197 CD 65 23             call    CPDEHL          ; Compare with line in DE
 926+ 219A 60                   ld      H,B             ; HL = Start of this line
 927+ 219B 69                   ld      L,C
 928+ 219C 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 219D 23                   inc     HL
 930+ 219E 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 219F 6F                   ld      L,A             ; Next line to HL
 932+ 21A0 3F                   ccf
 933+ 21A1 C8                   ret     Z               ; Lines found - Exit
 934+ 21A2 3F                   ccf
 935+ 21A3 D0                   ret     NC              ; Line not found,at line after
 936+ 21A4 C3 8A 21             jp      SRCHLP          ; Keep looking
 937+ 21A7
 938+ 21A7 C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 21A8 2A 67 60     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 21AB AF                   xor     A               ; Set program area to empty
 941+ 21AC 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21AD 23                   inc     HL
 943+ 21AE 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21AF 23                   inc     HL
 945+ 21B0 22 7D 61             ld      (PROGND),HL     ; Set program end
 946+ 21B3
 947+ 21B3 2A 67 60     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21B6 2B                   dec     HL
 949+ 21B7
 950+ 21B7 22 0F 61     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 21BA 2A C8 60             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 21BD 22 04 61             ld      (STRBOT),HL     ; Clear string space
 953+ 21C0 AF                   xor     A
 954+ 21C1 CD C4 25             call    RESTOR          ; Reset DATA pointers
 955+ 21C4 2A 7D 61             ld      HL,(PROGND)     ; Get end of program
 956+ 21C7 22 7F 61             ld      (VAREND),HL     ; Clear variables
 957+ 21CA 22 81 61             ld      (ARREND),HL     ; Clear arrays
 958+ 21CD
 959+ 21CD C1           CLREG:  pop     BC              ; Save return address
 960+ 21CE 2A DF 5F             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 21D1 F9                   ld      SP,HL           ; Set stack
 962+ 21D2 21 F4 60             ld      HL,TMSTPL       ; Temporary string pool
 963+ 21D5 22 F2 60             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 21D8 AF                   xor     A               ; A = 00
 965+ 21D9 6F                   ld      L,A             ; HL = 0000
 966+ 21DA 67                   ld      H,A
 967+ 21DB 22 15 61             ld      (CONTAD),HL     ; No CONTinue
 968+ 21DE 32 0C 61             ld      (FORFLG),A      ; Clear FOR flag
 969+ 21E1 22 85 61             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 21E4 E5                   push    HL              ; HL = 0000
 971+ 21E5 C5                   push    BC              ; Put back return
 972+ 21E6 2A 0F 61     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 21E9 C9                   ret                     ; Return to execution driver
 974+ 21EA
 975+ 21EA 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 21EC CD 76 23             call    OUTC            ; Output character
 977+ 21EF 3E 00                ld      A,NLLCR         ; null char
 978+ 21F1 CD 76 23             call    OUTC            ; Output character
 979+ 21F4 CD 23 09             call    CURSOR_ON       ; enable cursor
 980+ 21F7 3A 79 61             ld      A,(SERIALS_EN)  ; load serial state
 981+ 21FA EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 21FC CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 21FF C3 DC 5F             jp      RINPUT          ; Get input line
 984+ 2202
 985+ 2202 AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 2203 32 C7 60             ld      (DATFLG),A      ; Reset literal flag
 987+ 2206 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 2208 11 6A 60             ld      DE,BUFFER       ; Start of input buffer
 989+ 220B 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 220C FE 20                cp      SPC             ; Is it a space?
 991+ 220E CA 8A 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2211 47                   ld      B,A             ; Save character
 993+ 2212 FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 2214 CA AA 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 2217 B7                   or      A               ; Is it end of buffer?
 996+ 2218 CA B1 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 221B 3A C7 60             ld      A,(DATFLG)      ; Get data type
 998+ 221E B7                   or      A               ; Literal?
 999+ 221F 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2220 C2 8A 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 2223 FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 2225 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 2227 CA 8A 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 222A 7E                   ld      A,(HL)          ; Get byte again
1005+ 222B FE 30                cp      '0'             ; Is it less than '0'
1006+ 222D DA 35 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2230 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 2232 DA 8A 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 2235 D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 2236 11 E6 1C             ld      DE,WORDS-1      ; Point to table
1011+ 2239 C5                   push    BC              ; Save count
1012+ 223A 01 86 22             ld      BC,RETNAD       ; Where to return to
1013+ 223D C5                   push    BC              ; Save return address
1014+ 223E 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2240 7E                   ld      A,(HL)          ; Get byte
1016+ 2241 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 2243 DA 4E 22             jp      C,SEARCH        ; Yes - search for words
1018+ 2246 FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 2248 D2 4E 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 224B E6 5F                and     %01011111       ; Force upper case
1021+ 224D 77                   ld      (HL),A          ; Replace byte
1022+ 224E 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 224F EB                   ex      DE,HL
1024+ 2250 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2251 B6                   or      (HL)            ; Start of word?
1026+ 2252 F2 50 22             jp      P,GETNXT        ; No - move on
1027+ 2255 04                   inc     B               ; Increment token value
1028+ 2256 7E                   ld      A,(HL)          ; Get byte from table
1029+ 2257 E6 7F                and     %01111111       ; Strip bit 7
1030+ 2259 C8                   ret     Z               ; Return if end of list
1031+ 225A B9                   cp      C               ; Same character as in buffer?
1032+ 225B C2 50 22             jp      NZ,GETNXT       ; No - get next word
1033+ 225E EB                   ex      DE,HL
1034+ 225F E5                   push    HL              ; Save start of word
1035+ 2260
1036+ 2260 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 2261 1A                   ld      A,(DE)          ; Get byte from table
1038+ 2262 B7                   or      A               ; End of word ?
1039+ 2263 FA 82 22             jp      M,MATCH         ; Yes - Match found
1040+ 2266 4F                   ld      C,A             ; Save it
1041+ 2267 78                   ld      A,B             ; Get token value
1042+ 2268 FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 226A C2 71 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 226D CD B4 25             call    GETCHR          ; Get next character
1045+ 2270 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 2271 23           NOSPC:  inc     HL              ; Next byte
1047+ 2272 7E                   ld      A,(HL)          ; Get byte
1048+ 2273 FE 61                cp      'a'             ; Less than 'a' ?
1049+ 2275 DA 7A 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 2278 E6 5F                and     %01011111       ; Make upper case
1051+ 227A B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 227B CA 60 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 227E E1                   pop     HL              ; Get back start of word
1054+ 227F C3 4E 22             jp      SEARCH          ; Look at next word
1055+ 2282
1056+ 2282 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 2283 F1                   pop     AF              ; Throw away return
1058+ 2284 EB                   ex      DE,HL
1059+ 2285 C9                   ret                     ; Return to "RETNAD"
1060+ 2286 EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 2287 79                   ld      A,C             ; Get token value
1062+ 2288 C1                   pop     BC              ; Restore buffer length
1063+ 2289 D1                   pop     DE              ; Get destination address
1064+ 228A 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 228B 12                   ld      (DE),A          ; Put byte in buffer
1066+ 228C 13                   inc     DE              ; Move up buffer
1067+ 228D 0C                   inc     C               ; Increment length of buffer
1068+ 228E D6 3A                sub     ':'             ; End of statement?
1069+ 2290 CA 98 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 2293 FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 2295 C2 9B 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 2298 32 C7 60     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 229B D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 229D C2 0B 22             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 22A0 47                   ld      B,A             ; Copy rest of buffer
1076+ 22A1 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 22A2 B7                   or      A               ; End of line ?
1078+ 22A3 CA B1 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 22A6 B8                   cp      B               ; End of statement ?
1080+ 22A7 CA 8A 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 22AA 23           CPYLIT: inc     HL              ; Move up source string
1082+ 22AB 12                   ld      (DE),A          ; Save in destination
1083+ 22AC 0C                   inc     C               ; Increment length
1084+ 22AD 13                   inc     DE              ; Move up destination
1085+ 22AE C3 A1 22             jp      NXTCHR          ; Repeat
1086+ 22B1
1087+ 22B1 21 69 60     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22B4 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22B5 13                   inc     DE
1090+ 22B6 12                   ld      (DE),A          ; A = 00
1091+ 22B7 13                   inc     DE
1092+ 22B8 12                   ld      (DE),A          ; A = 00
1093+ 22B9 C9                   ret
1094+ 22BA
1095+ 22BA 3A D6 5F     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 22BD B7                   or      A               ; Is it zero?
1097+ 22BE 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 22C0 32 D6 5F             ld      (NULFLG),A      ; Zero null flag
1099+ 22C3 C2 CE 22             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 22C6 05                   dec     B               ; Decrement length
1101+ 22C7 CA EB 22             jp      Z,GETLIN        ; Get line again if empty
1102+ 22CA CD 76 23             call    OUTC            ; Output null character
1103+ 22CD 3E                   defb    $3E             ; Skip "dec B"
1104+ 22CE 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 22CF 2B                   dec     HL              ; Back space buffer
1106+ 22D0 CA E2 22             jp      Z,OTKLN         ; No buffer - Try again
1107+ 22D3 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 22D4 CD 76 23             call    OUTC            ; Echo it
1109+ 22D7 C3 F4 22             jp      MORINP          ; Get more input
1110+ 22DA
1111+ 22DA 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 22DB 2B                   dec     HL              ; Back space buffer
1113+ 22DC CD 76 23             call    OUTC            ; Output character in A
1114+ 22DF C2 F4 22             jp      NZ,MORINP       ; Not end - Get more
1115+ 22E2 CD 76 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 22E5 CD 81 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 22E8 C3 EB 22             jp      TTYLIN          ; Get line again
1118+ 22EB
1119+ 22EB              GETLIN:
1120+ 22EB 21 6A 60     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 22EE 06 01                ld      B,$01           ; Set buffer as empty
1122+ 22F0 AF                   xor     A
1123+ 22F1 32 D6 5F             ld      (NULFLG),A      ; Clear null flag
1124+ 22F4 CD B7 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 22F7 4F                   ld      C,A             ; Save character in C
1126+ 22F8 FE 7F                cp      DEL             ; Delete character?
1127+ 22FA CA BA 22             jp      Z,DODEL         ; Yes - Process it
1128+ 22FD 3A D6 5F             ld      A,(NULFLG)      ; Get null flag
1129+ 2300 B7                   or      A               ; Test null flag status
1130+ 2301 CA 0D 23             jp      Z,PROCES        ; Reset - Process character
1131+ 2304 3E 00                ld      A,$00           ; Set a null
1132+ 2306 CD 76 23             call    OUTC            ; Output null
1133+ 2309 AF                   xor     A               ; Clear A
1134+ 230A 32 D6 5F             ld      (NULFLG),A      ; Reset null flag
1135+ 230D 79           PROCES: ld      A,C             ; Get character
1136+ 230E FE 07                cp      CTRLG           ; Bell?
1137+ 2310 CA 4D 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 2313 FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 2315 CC 42 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 2318 37                   scf                     ; Flag break
1141+ 2319 C8                   ret     Z               ; Return if control "C"
1142+ 231A FE 0D                cp      CR              ; Is it enter?
1143+ 231C CA 77 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 231F FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2321 CA E5 22             jp      Z,KILIN         ; Yes - Get another line
1146+ 2324 FE 08                cp      BKSP            ; Is it backspace?
1147+ 2326 CA DA 22             jp      Z,DELCHR        ; Yes - Delete character
1148+ 2329 FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 232B C2 48 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 232E C5                   push    BC              ; Save buffer length
1151+ 232F D5                   push    DE              ; Save DE
1152+ 2330 E5                   push    HL              ; Save buffer address
1153+ 2331 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 2333 CD F2 4C             call    OUTNCR          ; Output and do CRLF
1155+ 2336 21 6A 60             ld      HL,BUFFER       ; Point to buffer start
1156+ 2339 CD 4D 2F             call    PRS             ; Output buffer
1157+ 233C E1                   pop     HL              ; Restore buffer address
1158+ 233D D1                   pop     DE              ; Restore DE
1159+ 233E C1                   pop     BC              ; Restore buffer length
1160+ 233F C3 F4 22             jp      MORINP          ; Get another character
1161+ 2342 CD 45 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 2345 C3 81 28             jp      PRNTCRLF        ; output CRLF
1163+ 2348
1164+ 2348 FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 234A DA F4 22             jp      C,MORINP        ; Yes - Ignore
1166+ 234D 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 234E FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2350 3E 08                ld      A,BKSP          ; Set a bell
1169+ 2352 D2 5F 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 2355 79                   ld      A,C             ; Get character
1171+ 2356 71                   ld      (HL),C          ; Save in buffer
1172+ 2357 32 0D 61             ld      (LSTBIN),A      ; Save last input byte
1173+ 235A 23                   inc     HL              ; Move up buffer
1174+ 235B 04                   inc     B               ; Increment length
1175+ 235C C3 F4 22     OUTIT:  jp      MORINP          ; Get another character
1176+ 235F
1177+ 235F CD 76 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 2362 C3 5C 23             jp      OUTIT           ; get more chars
1179+ 2365
1180+ 2365 7C           CPDEHL: ld      A,H             ; Get H
1181+ 2366 92                   sub     D               ; Compare with D
1182+ 2367 C0                   ret     NZ              ; Different - Exit
1183+ 2368 7D                   ld      A,L             ; Get L
1184+ 2369 93                   sub     E               ; Compare with E
1185+ 236A C9                   ret                     ; Return status
1186+ 236B
1187+ 236B 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 236C E3                   ex      (SP),HL         ; Address of test byte
1189+ 236D BE                   cp      (HL)            ; Same as in code string?
1190+ 236E 23                   inc     HL              ; Return address
1191+ 236F E3                   ex      (SP),HL         ; Put it back
1192+ 2370 CA B4 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 2373 C3 6B 20             jp      SNERR           ; Different - ?SN Error
1194+ 2376
1195+ 2376 F5           OUTC:   push    AF              ; Save character
1196+ 2377 3A D7 5F             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 237A B7                   or      A               ; Is it set?
1198+ 237B C2 82 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 237E F1                   pop     AF              ; Restore character
1200+ 237F C5                   push    BC              ; Save buffer length
1201+ 2380 F5                   push    AF              ; Save character
1202+ 2381 FE 20                cp      SPC             ; Is it a control code?
1203+ 2383 DA 9A 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 2386 3A D4 5F             ld      A,(LWIDTH)      ; Get line width
1205+ 2389 47                   ld      B,A             ; To B
1206+ 238A 3A C4 60             ld      A,(CURPOS)      ; Get cursor position
1207+ 238D 04                   inc     B               ; Width 255?
1208+ 238E CA 96 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 2391 05                   dec     B               ; Restore width
1210+ 2392 B8                   cp      B               ; At end of line?
1211+ 2393 CC 81 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 2396 3C           INCLEN: inc     A               ; Move on one character
1213+ 2397 32 C4 60             ld      (CURPOS),A      ; Save new position
1214+ 239A AF           DINPOS: xor     A
1215+ 239B 32 71 61             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 239E F1                   pop     AF              ; Restore character
1217+ 239F C1                   pop     BC              ; Restore buffer length
1218+ 23A0 F5                   push    AF
1219+ 23A1 CD A9 23             call    SND2VID         ; send char to video
1220+ 23A4 F1                   pop     AF
1221+ 23A5 CD CA 4C             call    MONOUT          ; send char to serial if enabled
1222+ 23A8 C9                   ret
1223+ 23A9
1224+ 23A9              ; print char to video if cursor is on
1225+ 23A9 32 34 61     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23AC 3A 33 61             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23AF B7                   or      A               ; is it off?
1228+ 23B0 C8                   ret     Z               ; yes, so return
1229+ 23B1 F3                   di                      ; disable INTs
1230+ 23B2 CD 57 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23B5 FB                   ei                      ; re-enable INTs
1232+ 23B6 C9                   ret                     ; return to caller
1233+ 23B7
1234+ 23B7 CD 08 3D     CLOTST: call    GETINP          ; Get input character
1235+ 23BA FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 23BC C0                   ret     NZ              ; No don't flip flag
1237+ 23BD 3A D7 5F             ld      A,(CTLOFG)      ; Get flag
1238+ 23C0 2F                   cpl                     ; Flip it
1239+ 23C1 32 D7 5F             ld      (CTLOFG),A      ; Put it back
1240+ 23C4 A7                   and     A               ; is output enabled?
1241+ 23C5 CC 23 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 23C8 3A 79 61             ld      A,(SERIALS_EN)  ; load serial state
1243+ 23CB EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 23CD CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 23D0 AF                   xor     A               ; Null character
1246+ 23D1 C9                   ret
1247+ 23D2
1248+ 23D2              ; LIST: list the program stored into memory
1249+ 23D2 C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 23D3 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 23D4 CD B4 25             call    GETCHR          ; Get next character
1252+ 23D7 CA 2D 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 23DA FE BF                cp      ZMINUS          ; is it '-'?
1254+ 23DC 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 23DE 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 23E1 CD CE 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 23E4 ED 43 37 61          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 23E8 CD 6B 23             call    CHKSYN          ; skip '-'
1259+ 23EB BF                   defb    ZMINUS
1260+ 23EC CD 84 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 23EF CD D4 24             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 23F2 ED 43 39 61          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 23F6 ED 4B 37 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 23FA C5                   push    BC              ; store address of line for later use
1265+ 23FB C3 65 24             jp      LISTLP          ; go listing
1266+ 23FE CD 84 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 2401 ED 53 3D 61  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 2405 CD CE 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 2408 ED 43 37 61          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 240C ED 43 39 61          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2410 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2411 CD B4 25             call    GETCHR          ; Get next character
1273+ 2414 CA 20 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 2417 FE BF                cp      ZMINUS          ; is it '-'?
1275+ 2419 CA 45 24             jp      Z,LST03         ; yes, read ending line
1276+ 241C C5           LST06:  push    BC              ; store address for later use
1277+ 241D C3 65 24             jp      LISTLP          ; jump to list
1278+ 2420 ED 5B 3D 61  LSTNOT: ld      DE,(TMPBFR4)
1279+ 2424 CD CE 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 2427 DA 1C 24             jp      C,LST06
1281+ 242A C3 CB 20             jp      PRNTOK
1282+ 242D 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2430 CD CE 24             call    SRCHLIN         ; get address of last line
1284+ 2433 ED 43 39 61          ld      (TMPBFR2),BC    ; store it
1285+ 2437 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 243A CD CE 24             call    SRCHLIN         ; get address of first line
1287+ 243D ED 43 37 61          ld      (TMPBFR1),BC    ; store it
1288+ 2441 C5                   push    BC              ; store address of starting line for later use
1289+ 2442 C3 65 24             jp      LISTLP          ; start printing
1290+ 2445 CD 6B 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 2448 BF                   defb    ZMINUS
1292+ 2449 CD 84 26             call    ATOH            ; look for another number (return into DE)
1293+ 244C 7A                   ld      A,D
1294+ 244D B3                   or      E               ; is line=0?
1295+ 244E 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2450 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 2453 CD CE 24             call    SRCHLIN         ; get address of last line
1298+ 2456 C3 5C 24             jp      LST02
1299+ 2459 CD D4 24     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 245C ED 43 39 61  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 2460 ED 4B 37 61          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 2464 C5                   push    BC              ; store it for later use
1303+ 2465 E1           LISTLP: pop     HL              ; Restore address of line
1304+ 2466 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 2467 23                   inc     HL
1306+ 2468 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 2469 23                   inc     HL
1308+ 246A 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 246B B1                   or      C
1310+ 246C CA CB 20             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 246F CD DF 25             call    TSTBRK          ; Test for break key
1312+ 2472 CD E2 24             call    TSTSPC          ; test for space
1313+ 2475 C5                   push    BC              ; Save address of next line
1314+ 2476 3A 2C 61             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 2479 A7                   and     A               ; is it at the beginning of a new line?
1316+ 247A 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 247C 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 247E CD CA 4C             call    MONOUT          ; to serial if it's open
1319+ 2481 AF                   xor     A               ; then, set cursor
1320+ 2482 32 C4 60             ld      (CURPOS),A      ; to position 0
1321+ 2485 18 03                jr      LST07           ; and continue
1322+ 2487 CD 81 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 248A 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 248B 23                   inc     HL
1325+ 248C 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 248D 23                   inc     HL
1327+ 248E E5                   push    HL              ; Save address of line start
1328+ 248F EB                   ex      DE,HL           ; Line number to HL
1329+ 2490 CD EC 39             call    PRNTHL          ; Output line number in decimal
1330+ 2493 3E 20                ld      A,SPC           ; Space after line number
1331+ 2495 E1                   pop     HL              ; Restore start of line address
1332+ 2496 CD 76 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 2499 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 249A B7                   or      A               ; End of line?
1335+ 249B 23                   inc     HL              ; To next byte in line
1336+ 249C CA C0 24             jp      Z,NXTLN         ; Yes - check next line
1337+ 249F F2 96 24             jp      P,LSTLP2        ; No token - output it
1338+ 24A2 D6 7F                sub     ZEND-1          ; Find and output word
1339+ 24A4 4F                   ld      C,A             ; Token offset+1 to C
1340+ 24A5 11 E7 1C             ld      DE,WORDS        ; Reserved word list
1341+ 24A8 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 24A9 13                   inc     DE              ; Move on to next
1343+ 24AA B7                   or      A               ; Is it start of word?
1344+ 24AB F2 A8 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24AE 0D                   dec     C               ; Count words
1346+ 24AF C2 A8 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24B2 E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24B4 CD 76 23             call    OUTC            ; Output character
1349+ 24B7 1A                   ld      A,(DE)          ; Get next character
1350+ 24B8 13                   inc     DE              ; Move on to next
1351+ 24B9 B7                   or      A               ; Is it end of word?
1352+ 24BA F2 B2 24             jp      P,OUTWRD        ; No - output the rest
1353+ 24BD C3 99 24             jp      LSTLP3          ; Next byte in line
1354+ 24C0 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 24C1 2A 39 61             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 24C4 CD F8 4C             call    CMP16           ; check if current line is over last printable line
1357+ 24C7 DA CB 20             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 24CA D5                   push    DE              ; store address of current line
1359+ 24CB C3 65 24             jp      LISTLP          ; continue listing
1360+ 24CE              ; look for the address of a program line
1361+ 24CE E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 24CF CD 87 21             call    SRCHLN          ; search for line number in DE
1363+ 24D2 E1                   pop     HL              ; retrieve HL
1364+ 24D3 C9                   ret                     ; return to caller
1365+ 24D4              ; look for the address of a program line - if the line isn't found,
1366+ 24D4              ; it look backward for the previous line
1367+ 24D4 E5           SRCLN:  push    HL              ; store HL
1368+ 24D5 CD 87 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 24D8 DA E0 24             jp      C,LVSRLN        ; found it, leave loop
1370+ 24DB 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 24DC 7B                   ld      A,E
1372+ 24DD B2                   or      D               ; is line number zero?
1373+ 24DE 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 24E0 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 24E1 C9                   ret                     ; return to caller
1376+ 24E2
1377+ 24E2              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 24E2              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 24E2 3A 73 61     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 24E5 FE 20                cp      SPC             ; Is it SPACE?
1381+ 24E7 C0                   ret     NZ              ; No, return
1382+ 24E8 CD 08 3D     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 24EB FE 20                cp      SPC             ; is it SPACE?
1384+ 24ED 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 24EF AF                   xor     A
1386+ 24F0 32 73 61             ld      (TMPKEYBFR),A   ; reset key
1387+ 24F3 C9                   ret                     ; return to caller
1388+ 24F4 FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 24F6 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 24F8 C3 17 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 24FB
1392+ 24FB
1393+ 24FB 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 24FD 32 0C 61             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 2500 CD 74 27             call    LET             ; Set up initial index
1396+ 2503 C1                   pop     BC              ; Drop RETurn address
1397+ 2504 E5                   push    HL              ; Save code string address
1398+ 2505 CD 5D 27             call    DATA            ; Get next statement address
1399+ 2508 22 08 61             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 250B 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 250E 39                   add     HL,SP           ; Point to it
1402+ 250F CD F8 1F     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 2512 D1                   pop     DE              ; Get code string address
1404+ 2513 C2 2B 25             jp      NZ,FORFND       ; No nesting found
1405+ 2516 09                   add     HL,BC           ; Move into "FOR" block
1406+ 2517 D5                   push    DE              ; Save code string address
1407+ 2518 2B                   dec     HL
1408+ 2519 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 251A 2B                   dec     HL
1410+ 251B 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 251C 23                   inc     HL
1412+ 251D 23                   inc     HL
1413+ 251E E5                   push    HL              ; Save block address
1414+ 251F 2A 08 61             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 2522 CD 65 23             call    CPDEHL          ; Compare the FOR loops
1416+ 2525 E1                   pop     HL              ; Restore block address
1417+ 2526 C2 0F 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 2529 D1                   pop     DE              ; Restore code string address
1419+ 252A F9                   ld      SP,HL           ; Remove all nested loops
1420+ 252B
1421+ 252B EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 252C 0E 08                ld      C,$08
1423+ 252E CD 28 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2531 E5                   push    HL              ; Save code string address
1425+ 2532 2A 08 61             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 2535 E3                   ex      (SP),HL         ; Save and restore code string
1427+ 2536 E5                   push    HL              ; Re-save code string address
1428+ 2537 2A E1 5F             ld      HL,(LINEAT)     ; Get current line number
1429+ 253A E3                   ex      (SP),HL         ; Save and restore code string
1430+ 253B CD 48 2A             call    TSTNUM          ; Make sure it's a number
1431+ 253E CD 6B 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2541 B8                   defb    ZTO             ; "TO" token
1433+ 2542 CD 45 2A             call    GETNUM          ; Get "TO" expression value
1434+ 2545 E5                   push    HL              ; Save code string address
1435+ 2546 CD 9E 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 2549 E1                   pop     HL              ; Restore code string address
1437+ 254A C5                   push    BC              ; Save "TO" value in block
1438+ 254B D5                   push    DE
1439+ 254C 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 254F 51                   ld      D,C             ; C=0
1441+ 2550 5A                   ld      E,D             ; D=0
1442+ 2551 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 2552 FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 2554 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 2556 C2 67 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 2559 CD B4 25             call    GETCHR          ; Jump over "STEP" token
1447+ 255C CD 45 2A             call    GETNUM          ; Get step value
1448+ 255F E5                   push    HL              ; Save code string address
1449+ 2560 CD 9E 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 2563 CD 52 38             call    TSTSGN          ; Test sign of FPREG
1451+ 2566 E1                   pop     HL              ; Restore code string address
1452+ 2567 C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 2568 D5                   push    DE
1454+ 2569 F5                   push    AF              ; Save sign of STEP
1455+ 256A 33                   inc     SP              ; Don't save flags
1456+ 256B E5                   push    HL              ; Save code string address
1457+ 256C 2A 0F 61             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 256F E3                   ex      (SP),HL         ; Save and restore code string
1459+ 2570 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 2572 C5                   push    BC              ; Save it
1461+ 2573 33                   inc     SP              ; Don't save C
1462+ 2574
1463+ 2574 CD DF 25     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 2577 22 0F 61             ld      (BRKLIN),HL     ; Save code address for break
1465+ 257A 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 257B FE 3A                cp      ':'             ; Multi statement line?
1467+ 257D CA 94 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 2580 B7                   or      A               ; End of line?
1469+ 2581 C2 6B 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 2584 23                   inc     HL              ; Point to address of next line
1471+ 2585 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 2586 23                   inc     HL
1473+ 2587 B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 2588 CA 06 26             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 258B 23                   inc     HL              ; Point to line number
1476+ 258C 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 258D 23                   inc     HL
1478+ 258E 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 258F EB                   ex      DE,HL           ; Line number to HL
1480+ 2590 22 E1 5F             ld      (LINEAT),HL     ; Save as current line number
1481+ 2593 EB                   ex      DE,HL           ; Line number back to DE
1482+ 2594 CD B4 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 2597 11 74 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 259A D5                   push    DE              ; Save for RETurn
1485+ 259B C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 259C
1487+ 259C D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 259E DA 74 27             jp      C,LET           ; No - try to assign it
1489+ 25A1 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 25A3 D2 6B 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 25A6 07                   rlca                    ; Double it
1492+ 25A7 4F                   ld      C,A             ; BC = Offset into table
1493+ 25A8 06 00                ld      B,0
1494+ 25AA EB                   ex      DE,HL           ; Save code string address
1495+ 25AB 21 78 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25AE 09                   add     HL,BC           ; Point to routine address
1497+ 25AF 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25B0 23                   inc     HL
1499+ 25B1 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25B2 C5                   push    BC              ; Save routine address
1501+ 25B3 EB                   ex      DE,HL           ; Restore code string address
1502+ 25B4
1503+ 25B4              ; get a char from input buffer: exit with NC if character found is
1504+ 25B4              ; not a number; exit with Z if nothing found; char is into A
1505+ 25B4 23           GETCHR: inc     HL              ; Point to next character
1506+ 25B5 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25B6 FE 3A                cp      ':'             ; Z if ':'
1508+ 25B8 D0                   ret     NC              ; NC if > "9"
1509+ 25B9 FE 20                cp      SPC
1510+ 25BB CA B4 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 25BE FE 30                cp      '0'
1512+ 25C0 3F                   ccf                     ; NC if < '0'
1513+ 25C1 3C                   inc     A               ; Test for zero - Leave carry
1514+ 25C2 3D                   dec     A               ; Z if Null
1515+ 25C3 C9                   ret
1516+ 25C4
1517+ 25C4 EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 25C5 2A 67 60             ld      HL,(BASTXT)     ; Point to start of program
1519+ 25C8 CA D9 25             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 25CB EB                   ex      DE,HL           ; Restore code string address
1521+ 25CC CD 84 26             call    ATOH            ; Get line number to DE
1522+ 25CF E5                   push    HL              ; Save code string address
1523+ 25D0 CD 87 21             call    SRCHLN          ; Search for line number in DE
1524+ 25D3 60                   ld      H,B             ; HL = Address of line
1525+ 25D4 69                   ld      L,C
1526+ 25D5 D1                   pop     DE              ; Restore code string address
1527+ 25D6 D2 33 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 25D9 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 25DA 22 83 61     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 25DD EB                   ex      DE,HL           ; Restore code string address
1531+ 25DE C9                   ret
1532+ 25DF
1533+ 25DF
1534+ 25DF              ; check if CTRL-C is into input buffer
1535+ 25DF DF           TSTBRK: rst     $18             ; Check input status
1536+ 25E0 C8                   ret     Z               ; No key, go back
1537+ 25E1 D7                   rst     $10             ; Get the key into A
1538+ 25E2 FE 1B                cp      ESC             ; Escape key?
1539+ 25E4 28 11                jr      Z,BRK           ; Yes, break
1540+ 25E6 FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 25E8 28 0D                jr      Z,BRK           ; Yes, break
1542+ 25EA FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 25EC C0                   ret     NZ              ; Other key, ignore
1544+ 25ED
1545+ 25ED
1546+ 25ED              ; wait for a key while listing
1547+ 25ED D7           STALL:  rst     $10             ; Wait for key
1548+ 25EE FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 25F0 C8                   ret     Z               ; Release the chokehold
1550+ 25F1 FE 03                cp      CTRLC           ; Second break?
1551+ 25F3 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 25F5 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 25F7
1554+ 25F7 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 25F9 32 DB 5F             ld      (BRKFLG),A      ; Store it
1556+ 25FC
1557+ 25FC C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 25FD F6                   defb    $F6             ; Flag "STOP"
1559+ 25FE C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 25FF 22 0F 61             ld      (BRKLIN),HL     ; Save point of break
1561+ 2602 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 2603 F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 2605 C1                   pop     BC              ; Return not needed and more
1564+ 2606 2A E1 5F     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 2609 F5                   push    AF              ; Save STOP / END status
1566+ 260A 7D                   ld      A,L             ; Is it direct break?
1567+ 260B A4                   and     H
1568+ 260C 3C                   inc     A               ; Line is -1 if direct break
1569+ 260D CA 19 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2610 22 13 61             ld      (ERRLIN),HL     ; Save line of break
1571+ 2613 2A 0F 61             ld      HL,(BRKLIN)     ; Get point of break
1572+ 2616 22 15 61             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 2619 AF           NOLIN:  xor     A
1574+ 261A 32 D7 5F             ld      (CTLOFG),A      ; Enable output
1575+ 261D CD 6F 28             call    STTLIN          ; Start a new line
1576+ 2620 F1                   pop     AF              ; Restore STOP / END status
1577+ 2621 21 EE 1F             ld      HL,BRKMSG       ; "Break" message
1578+ 2624 C2 2A 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 2627 C3 CB 20             jp      PRNTOK          ; Go to command mode
1580+ 262A CD 45 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 262D C3 A9 20             jp      ERRIN           ; print message
1582+ 2630
1583+ 2630
1584+ 2630              ; CONTinue after a break/error
1585+ 2630 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 2633 22 E3 5F             ld      (HLPLN),HL      ; ...HELP line register
1587+ 2636 2A 15 61             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 2639 7C                   ld      A,H             ; Is it zero?
1589+ 263A B5                   or      L
1590+ 263B 1E 20                ld      E,CN            ; ?CN Error
1591+ 263D CA 85 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2640 EB                   ex      DE,HL           ; Save code string address
1593+ 2641 2A 13 61             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 2644 22 E1 5F             ld      (LINEAT),HL     ; Set up current line number
1595+ 2647 EB                   ex      DE,HL           ; Restore code string address
1596+ 2648 C9                   ret                     ; CONTinue where left off
1597+ 2649
1598+ 2649 E5           ACCSUM: push    HL              ; Save address in array
1599+ 264A 2A D8 5F             ld      HL,(CHKSUM)     ; Get check sum
1600+ 264D 06 00                ld      B,$00           ; BC - Value of byte
1601+ 264F 4F                   ld      C,A
1602+ 2650 09                   add     HL,BC           ; Add byte to check sum
1603+ 2651 22 D8 5F             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 2654 E1                   pop     HL              ; Restore address in array
1605+ 2655 C9                   ret
1606+ 2656
1607+ 2656 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 2657 FE 41                cp      'A'             ; < 'a' ?
1609+ 2659 D8                   ret     C               ; Carry set if not letter
1610+ 265A FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 265C 3F                   ccf
1612+ 265D C9                   ret                     ; Carry set if not letter
1613+ 265E
1614+ 265E CD B4 25     FPSINT: call    GETCHR          ; Get next character
1615+ 2661 CD 45 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 2664 CD 52 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 2667 FA 7F 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 266A 3A 8E 61     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 266D FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 266F DA FA 38             jp      C,FPINT         ; Yes - convert it
1621+ 2672 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 2675 11 00 00             ld      DE,$0000
1623+ 2678 E5                   push    HL              ; Save code string address
1624+ 2679 CD CD 38             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 267C E1                   pop     HL              ; Restore code string address
1626+ 267D 51                   ld      D,C             ; MSB to D
1627+ 267E C8                   ret     Z               ; Return if in range
1628+ 267F 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 2681 C3 85 20             jp      ERROR           ; Output error-
1630+ 2684
1631+ 2684
1632+ 2684              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 2684 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 2685 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 2688 CD B4 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 268B D0                   ret     NC              ; Exit if not a digit
1637+ 268C E5                   push    HL              ; Save code string address
1638+ 268D F5                   push    AF              ; Save digit
1639+ 268E 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 2691 CD 65 23             call    CPDEHL          ; Number in range?
1641+ 2694 DA 6B 20             jp      C,SNERR         ; No - ?SN Error
1642+ 2697 62                   ld      H,D             ; HL = Number
1643+ 2698 6B                   ld      L,E
1644+ 2699 19                   add     HL,DE           ; Times 2
1645+ 269A 29                   add     HL,HL           ; Times 4
1646+ 269B 19                   add     HL,DE           ; Times 5
1647+ 269C 29                   add     HL,HL           ; Times 10
1648+ 269D F1                   pop     AF              ; Restore digit
1649+ 269E D6 30                sub     '0'             ; Make it 0 to 9
1650+ 26A0 5F                   ld      E,A             ; DE = Value of digit
1651+ 26A1 16 00                ld      D,0
1652+ 26A3 19                   add     HL,DE           ; Add to number
1653+ 26A4 EB                   ex      DE,HL           ; Number to DE
1654+ 26A5 E1                   pop     HL              ; Restore code string address
1655+ 26A6 C3 88 26             jp      GTLNLP          ; Go to next character
1656+ 26A9
1657+ 26A9 CA B7 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26AC CD 45 2A             call    GETNUM          ; Evaluate a number
1659+ 26AF CD 6A 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26B2 2B                   dec     HL              ; Cancel increment
1661+ 26B3 CD B4 25             call    GETCHR          ; Get next character
1662+ 26B6 E5                   push    HL              ; Save code string address
1663+ 26B7 2A C8 60             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 26BA CA D2 26             jp      Z,STORED        ; No value given - Use stored
1665+ 26BD E1                   pop     HL              ; Restore code string address
1666+ 26BE CD 6B 23             call    CHKSYN          ; Check for comma
1667+ 26C1 2C                   defb    ','
1668+ 26C2 D5                   push    DE              ; Save number
1669+ 26C3 CD 45 2A             call    GETNUM          ; Evaluate a number
1670+ 26C6 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 26C9 2B                   dec     HL              ; Cancel increment
1672+ 26CA CD B4 25             call    GETCHR          ; Get next character
1673+ 26CD C2 6B 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 26D0 E3                   ex      (SP),HL         ; Save code string address
1675+ 26D1 EB                   ex      DE,HL           ; Number to DE
1676+ 26D2 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 26D3 93                   sub     E               ; Subtract LSB of string space
1678+ 26D4 5F                   ld      E,A             ; Save LSB
1679+ 26D5 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 26D6 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 26D7 57                   ld      D,A             ; Save MSB
1682+ 26D8 DA 40 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 26DB E5                   push    HL              ; Save RAM top
1684+ 26DC 2A 7D 61             ld      HL,(PROGND)     ; Get program end
1685+ 26DF 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 26E2 09                   add     HL,BC           ; Get lowest address
1687+ 26E3 CD 65 23             call    CPDEHL          ; Enough memory?
1688+ 26E6 D2 40 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 26E9 EB                   ex      DE,HL           ; RAM top to HL
1690+ 26EA 22 DF 5F             ld      (STRSPC),HL     ; Set new string space
1691+ 26ED E1                   pop     HL              ; End of memory to use
1692+ 26EE 22 C8 60             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 26F1 E1                   pop     HL              ; Restore code string address
1694+ 26F2 C3 B7 21             jp      INTVAR          ; Initialise variables
1695+ 26F5
1696+ 26F5 E5           RUN:    push    HL              ; store HL
1697+ 26F6 21 FF FF             ld      HL,-1           ; reset...
1698+ 26F9 22 E3 5F             ld      (HLPLN),HL      ; ...HELP line register
1699+ 26FC E1                   pop     HL              ; retrieve HL
1700+ 26FD CA B3 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 2700 CD B7 21             call    INTVAR          ; Initialise variables
1702+ 2703 01 74 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 2706 C3 19 27             jp      RUNLIN          ; RUN from line number
1704+ 2709
1705+ 2709 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 270B CD 28 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 270E C1                   pop     BC              ; Get return address
1708+ 270F E5                   push    HL              ; Save code string for RETURN
1709+ 2710 E5                   push    HL              ; And for GOSUB routine
1710+ 2711 2A E1 5F             ld      HL,(LINEAT)     ; Get current line
1711+ 2714 E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 2715 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 2717 F5                   push    AF              ; Save token
1714+ 2718 33                   inc     SP              ; Don't save flags
1715+ 2719
1716+ 2719 C5           RUNLIN: push    BC              ; Save return address
1717+ 271A CD 84 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 271D CD 5F 27             call    REM             ; Get end of line
1719+ 2720 E5                   push    HL              ; Save end of line
1720+ 2721 2A E1 5F             ld      HL,(LINEAT)     ; Get current line
1721+ 2724 CD 65 23             call    CPDEHL          ; Line after current?
1722+ 2727 E1                   pop     HL              ; Restore end of line
1723+ 2728 23                   inc     HL              ; Start of next line
1724+ 2729 DC 8A 21             call    C,SRCHLP        ; Line is after current line
1725+ 272C D4 87 21             call    NC,SRCHLN       ; Line is before current line
1726+ 272F 60                   ld      H,B             ; Set up code string address
1727+ 2730 69                   ld      L,C
1728+ 2731 2B                   dec     HL              ; Incremented after
1729+ 2732 D8                   ret     C               ; Line found
1730+ 2733 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 2735 C3 85 20             jp      ERROR           ; Output error message
1732+ 2738
1733+ 2738 C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 2739 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 273B CD F4 1F             call    BAKSTK          ; Look "GOSUB" block
1736+ 273E F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 273F FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2741 1E 04                ld      E,RG            ; ?RG Error
1739+ 2743 C2 85 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 2746 E1                   pop     HL              ; Get RETURN line number
1741+ 2747 22 E1 5F             ld      (LINEAT),HL     ; Save as current
1742+ 274A 23                   inc     HL              ; Was it from direct statement?
1743+ 274B 7C                   ld      A,H
1744+ 274C B5                   or      L               ; Return to line
1745+ 274D C2 57 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2750 3A 0D 61             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 2753 B7                   or      A               ; If so buffer is corrupted
1748+ 2754 C2 CA 20             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 2757 21 74 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 275A E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 275B 3E                   defb    $3E             ; Skip "pop HL"
1752+ 275C E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 275D
1754+ 275D 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 275F 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 2761 06 00                ld      B,$00
1757+ 2763 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 2764 48                   ld      C,B
1759+ 2765 47                   ld      B,A             ; Statement end byte
1760+ 2766 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 2767 B7                   or      A               ; End of line?
1762+ 2768 C8                   ret     Z               ; Yes - Exit
1763+ 2769 B8                   cp      B               ; End of statement?
1764+ 276A C8                   ret     Z               ; Yes - Exit
1765+ 276B 23                   inc     HL              ; Next byte
1766+ 276C FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 276E CA 63 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 2771 C3 66 27             jp      NXTSTT          ; Keep looking
1769+ 2774
1770+ 2774 CD 54 2C     LET:    call    GETVAR          ; Get variable name
1771+ 2777 CD 6B 23             call    CHKSYN          ; Make sure "=" follows
1772+ 277A C9                   defb    ZEQUAL          ; "=" token
1773+ 277B D5                   push    DE              ; Save address of variable
1774+ 277C 3A C6 60             ld      A,(TYPE)        ; Get data type
1775+ 277F F5                   push    AF              ; Save type
1776+ 2780 CD 57 2A             call    EVAL            ; Evaluate expression
1777+ 2783 F1                   pop     AF              ; Restore type
1778+ 2784 E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 2785 22 0F 61             ld      (BRKLIN),HL     ; Save address of variable
1780+ 2788 1F                   rra                     ; Adjust type
1781+ 2789 CD 4A 2A             call    CHKTYP          ; Check types are the same
1782+ 278C CA C7 27             jp      Z,LETNUM        ; Numeric - Move value
1783+ 278F E5           LETSTR: push    HL              ; Save address of string var
1784+ 2790 2A 8B 61             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 2793 E5                   push    HL              ; Save it on stack
1786+ 2794 23                   inc     HL              ; Skip over length
1787+ 2795 23                   inc     HL
1788+ 2796 5E                   ld      E,(HL)          ; LSB of string address
1789+ 2797 23                   inc     HL
1790+ 2798 56                   ld      D,(HL)          ; MSB of string address
1791+ 2799 2A 67 60             ld      HL,(BASTXT)     ; Point to start of program
1792+ 279C CD 65 23             call    CPDEHL          ; Is string before program?
1793+ 279F D2 B6 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 27A2 2A DF 5F             ld      HL,(STRSPC)     ; Point to string space
1795+ 27A5 CD 65 23             call    CPDEHL          ; Is string literal in program?
1796+ 27A8 D1                   pop     DE              ; Restore address of string
1797+ 27A9 D2 BE 27             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27AC 21 00 61             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27AF CD 65 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27B2 D2 BE 27             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27B5 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27B6 D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27B7 CD AE 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 27BA EB                   ex      DE,HL           ; Address of string entry
1805+ 27BB CD E7 2E             call    SAVSTR          ; Save string in string area
1806+ 27BE CD AE 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 27C1 E1                   pop     HL              ; Get string pointer
1808+ 27C2 CD AD 38             call    DETHL4          ; Move string pointer to var
1809+ 27C5 E1                   pop     HL              ; Restore code string address
1810+ 27C6 C9                   ret
1811+ 27C7
1812+ 27C7 E5           LETNUM: push    HL              ; Save address of variable
1813+ 27C8 CD AA 38             call    FPTHL           ; Move value to variable
1814+ 27CB D1                   pop     DE              ; Restore address of variable
1815+ 27CC E1                   pop     HL              ; Restore code string address
1816+ 27CD C9                   ret
1817+ 27CE
1818+ 27CE CD CB 32     ON:     call    GETINT          ; Get integer 0-255
1819+ 27D1 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 27D2 47                   ld      B,A             ; Save in B
1821+ 27D3 FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 27D5 CA DD 27             jp      Z,ONGO          ; Yes - Find line number
1823+ 27D8 CD 6B 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 27DB 88                   defb    ZGOTO           ; "GOTO" token
1825+ 27DC 2B                   dec     HL              ; Cancel increment
1826+ 27DD 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 27DE 0D           ONGOLP: dec     C               ; Count branches
1828+ 27DF 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 27E0 CA 9C 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 27E3 CD 85 26             call    GETLN           ; Get line number to DE
1831+ 27E6 FE 2C                cp      ','             ; Another line number?
1832+ 27E8 C0                   ret     NZ              ; No - Drop through
1833+ 27E9 C3 DE 27             jp      ONGOLP          ; Yes - loop
1834+ 27EC
1835+ 27EC CD 57 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 27EF 7E                   ld      A,(HL)          ; Get token
1837+ 27F0 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 27F2 CA FA 27             jp      Z,IFGO          ; Yes - Get line
1839+ 27F5 CD 6B 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 27F8 BB                   defb    ZTHEN           ; "THEN" token
1841+ 27F9 2B                   dec     HL              ; Cancel increment
1842+ 27FA CD 48 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 27FD CD 52 38             call    TSTSGN          ; Test state of expression
1844+ 2800 CA 0C 28             jp      Z,IF1           ; False - Jump over
1845+ 2803 CD B4 25     IF0:    call    GETCHR          ; Get next character
1846+ 2806 DA 1A 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 2809 C3 9B 25             jp      IFJMP           ; Otherwise do statement
1848+ 280C 0E AF        IF1:    ld      C,ZELSE
1849+ 280E CD 61 27             call    REM+2           ; check statement
1850+ 2811 B7                   or      A               ; end of line?
1851+ 2812 C8                   ret     Z               ; yes, leave
1852+ 2813 FE AF                cp      ZELSE
1853+ 2815 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 2817 C3 03 28             jp      IF0             ; return to IF
1855+ 281A
1856+ 281A
1857+ 281A 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 281B CD B4 25             call    GETCHR          ; Get next character
1859+ 281E CA 81 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2821 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 2822 FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 2824 CA A9 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 2827 FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 2829 CA A9 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 282C E5                   push    HL              ; Save code string address
1866+ 282D FE 2C                cp      ','             ; Comma?
1867+ 282F CA 90 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 2832 FE 3B                cp      ';'             ; Semi-colon?
1869+ 2834 CA CD 28             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 2837 C1                   pop     BC              ; Code string address to BC
1871+ 2838 CD 57 2A             call    EVAL            ; Evaluate expression
1872+ 283B E5                   push    HL              ; Save code string address
1873+ 283C 3A C6 60             ld      A,(TYPE)        ; Get variable type
1874+ 283F B7                   or      A               ; Is it a string variable?
1875+ 2840 C2 68 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 2843 CD F7 39             call    NUMASC          ; Convert number to text
1877+ 2846 CD 0B 2F             call    CRTST           ; Create temporary string
1878+ 2849 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 284B 2A 8B 61             ld      HL,(FPREG)      ; Get length of output
1880+ 284E 34                   inc     (HL)            ; Plus 1 for the space
1881+ 284F 2A 8B 61             ld      HL,(FPREG)      ; < Not needed >
1882+ 2852 3A D4 5F             ld      A,(LWIDTH)      ; Get width of line
1883+ 2855 47                   ld      B,A             ; To B
1884+ 2856 04                   inc     B               ; Width 255 (No limit)?
1885+ 2857 CA 64 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 285A 04                   inc     B               ; Adjust it
1887+ 285B 3A C4 60             ld      A,(CURPOS)      ; Get cursor position
1888+ 285E 86                   add     A,(HL)          ; Add length of string
1889+ 285F 3D                   dec     A               ; Adjust it
1890+ 2860 B8                   cp      B               ; Will output fit on this line?
1891+ 2861 D4 81 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 2864 CD 50 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 2867 AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 2868 C4 50 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 286B E1                   pop     HL              ; Restore code string address
1896+ 286C C3 1A 28             jp      MRPRNT          ; See if more to PRINT
1897+ 286F
1898+ 286F 3A C4 60     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 2872 B7                   or      A               ; Already at start?
1900+ 2873 C8                   ret     Z               ; Yes - Do nothing
1901+ 2874 C3 81 28             jp      PRNTCRLF        ; Start a new line
1902+ 2877
1903+ 2877 AF           ENDINP: xor     A
1904+ 2878 32 71 61             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 287B 77                   ld      (HL),A          ; Mark end of buffer
1906+ 287C 21 69 60             ld      HL,BUFFER-1     ; Point to buffer
1907+ 287F 18 0A                jr      CNTEND
1908+ 2881 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 2883 CD 76 23             call    OUTC            ; Output character
1910+ 2886 3E 0A                ld      A,LF            ; Load a LF
1911+ 2888 CD 76 23             call    OUTC            ; Output character
1912+ 288B AF           CNTEND: xor     A               ; Set to position 0
1913+ 288C 32 C4 60             ld      (CURPOS),A      ; Store it
1914+ 288F C9                   ret                     ; return to caller
1915+ 2890
1916+ 2890 3A D5 5F     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 2893 47                   ld      B,A             ; Save in B
1918+ 2894 3A 2C 61             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 2897 B8                   cp      B               ; Within the limit?
1920+ 2898 D4 81 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 289B D2 CD 28             jp      NC,NEXITM       ; Get next item
1922+ 289E D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 28A0 D2 9E 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 28A3 2F                   cpl                     ; Number of null chars to output
1925+ 28A4 0E 00                ld      C,NLLCR         ; null char
1926+ 28A6 C3 C3 28             jp      ASPCS           ; Output them
1927+ 28A9
1928+ 28A9 F5           DOTAB:  push    AF              ; Save token
1929+ 28AA CD C8 32             call    FNDNUM          ; Evaluate expression
1930+ 28AD CD 6B 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28B0 29                   defb    ')'
1932+ 28B1 2B                   dec     HL              ; Back space on to ")"
1933+ 28B2 F1                   pop     AF              ; Restore token
1934+ 28B3 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28B5 D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28B7 E5                   push    HL              ; Save code string address
1937+ 28B8 CA BE 28             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 28BB 3A 2C 61             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 28BE 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 28BF 83                   add     A,E             ; Total number to print
1941+ 28C0 D2 CD 28             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 28C3 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 28C4 47                   ld      B,A             ; Save number to print
1944+ 28C5 79           SPCLP:  ld      A,C             ; char to print
1945+ 28C6 CD 76 23             call    OUTC            ; Output character in A
1946+ 28C9 05                   dec     B               ; Count them
1947+ 28CA C2 C5 28             jp      NZ,SPCLP        ; Repeat if more
1948+ 28CD E1           NEXITM: pop     HL              ; Restore code string address
1949+ 28CE CD B4 25             call    GETCHR          ; Get next character
1950+ 28D1 C3 21 28             jp      PRNTLP          ; More to print
1951+ 28D4
1952+ 28D4 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 28D8 6F 20 66 72
1952+ 28DC 6F 6D 20 73
1952+ 28E0 74 61 72 74
1952+ 28E4 0D 00
1953+ 28E6
1954+ 28E6 3A 0E 61     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 28E9 B7                   or      A
1956+ 28EA C2 65 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 28ED C1                   pop     BC              ; Throw away code string addr
1958+ 28EE 21 D4 28             ld      HL,REDO         ; "Redo from start" message
1959+ 28F1 CD 4D 2F             call    PRS             ; Output string
1960+ 28F4 C3 E6 21             jp      DOAGN           ; Do last INPUT again
1961+ 28F7
1962+ 28F7 CD B8 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 28FA 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 28FB FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 28FD 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 28FF 32 D7 5F             ld      (CTLOFG),A      ; Enable output
1967+ 2902 C2 11 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 2905 CD 0C 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 2908 CD 6B 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 290B 3B                   defb    ";"
1971+ 290C E5                   push    HL              ; Save code string address
1972+ 290D CD 50 2F             call    PRS1            ; Output prompt string
1973+ 2910 3E                   defb    $3E             ; Skip "push HL"
1974+ 2911 E5           NOPMPT: push    HL              ; Save code string address
1975+ 2912 CD EA 21             call    PROMPT          ; Get input with "? " prompt
1976+ 2915 C1                   pop     BC              ; Restore code string address
1977+ 2916 DA 03 26             jp      C,INPBRK        ; Break pressed - Exit
1978+ 2919 23                   inc     HL              ; Next byte
1979+ 291A 7E                   ld      A,(HL)          ; Get it
1980+ 291B B7                   or      A               ; End of line?
1981+ 291C 2B                   dec     HL              ; Back again
1982+ 291D C5                   push    BC              ; Re-save code string address
1983+ 291E 3A 79 61             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2921 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 2923 CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 2926 CD 38 09             call    CURSOR_OFF      ; disable cursor
1987+ 2929 CA 5C 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 292C 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 292E C3 36 29             jp      NXTITM          ; Get next item
1990+ 2931
1991+ 2931 E5           READ:   push    HL              ; Save code string address
1992+ 2932 2A 83 61             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 2935 F6                   defb    $F6             ; Flag "READ"
1994+ 2936 AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 2937 32 0E 61             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 293A E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 293B C3 42 29             jp      GTVLUS          ; Get values
1998+ 293E
1999+ 293E CD 6B 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2941 2C                   defb    ','
2001+ 2942 CD 54 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 2945 E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 2946 D5                   push    DE              ; Save variable address
2004+ 2947 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 2948 FE 2C                cp      ','             ; Comma?
2006+ 294A CA 6A 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 294D 3A 0E 61             ld      A,(READFG)      ; Is it READ?
2008+ 2950 B7                   or      A
2009+ 2951 C2 D6 29             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 2954 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 2956 CD 76 23             call    OUTC            ; Output character
2012+ 2959 CD EA 21             call    PROMPT          ; Get INPUT with prompt
2013+ 295C D1                   pop     DE              ; Variable address
2014+ 295D C1                   pop     BC              ; Code string address
2015+ 295E DA 03 26             jp      C,INPBRK        ; Break pressed
2016+ 2961 23                   inc     HL              ; Point to next DATA byte
2017+ 2962 7E                   ld      A,(HL)          ; Get byte
2018+ 2963 B7                   or      A               ; Is it zero (No input) ?
2019+ 2964 2B                   dec     HL              ; Back space INPUT pointer
2020+ 2965 C5                   push    BC              ; Save code string address
2021+ 2966 CA 5C 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 2969 D5                   push    DE              ; Save variable address
2023+ 296A 3A C6 60     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 296D B7                   or      A               ; Is it numeric?
2025+ 296E CA 94 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 2971 CD B4 25             call    GETCHR          ; Get next character
2027+ 2974 57                   ld      D,A             ; Save input character
2028+ 2975 47                   ld      B,A             ; Again
2029+ 2976 FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 2978 CA 88 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 297B 3A 0E 61             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 297E B7                   or      A
2033+ 297F 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 2980 CA 85 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 2983 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 2985 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 2987 2B                   dec     HL              ; Back space for DTSTR
2038+ 2988 CD 0F 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 298B EB                   ex      DE,HL           ; String address to DE
2040+ 298C 21 9F 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 298F E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 2990 D5                   push    DE              ; Save address of string
2043+ 2991 C3 8F 27             jp      LETSTR          ; Assign string to variable
2044+ 2994
2045+ 2994 CD B4 25     INPBIN: call    GETCHR          ; Get next character
2046+ 2997 CD 59 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 299A E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 299B CD AA 38             call    FPTHL           ; Move FPREG to variable
2049+ 299E E1                   pop     HL              ; Restore input pointer
2050+ 299F 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 29A0 CD B4 25             call    GETCHR          ; Get next character
2052+ 29A3 CA AB 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 29A6 FE 2C                cp      ','             ; Another value?
2054+ 29A8 C2 E6 28             jp      NZ,BADINP       ; No - Bad input
2055+ 29AB E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29AC 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29AD CD B4 25             call    GETCHR          ; Get next character
2058+ 29B0 C2 3E 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29B3 D1                   pop     DE              ; Restore DATA pointer
2060+ 29B4 3A 0E 61             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29B7 B7                   or      A
2062+ 29B8 EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29B9 C2 DA 25             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 29BC D5                   push    DE              ; Save code string address
2065+ 29BD B6                   or      (HL)            ; More input given?
2066+ 29BE 21 C6 29             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 29C1 C4 4D 2F             call    NZ,PRS          ; Output string if extra given
2068+ 29C4 E1                   pop     HL              ; Restore code string address
2069+ 29C5 C9                   ret
2070+ 29C6
2071+ 29C6 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 29CA 72 61 20 69
2071+ 29CE 67 6E 6F 72
2071+ 29D2 65 64 0D 00
2072+ 29D6
2073+ 29D6 CD 5D 27     FDTLP:  call    DATA            ; Get next statement
2074+ 29D9 B7                   or      A               ; End of line?
2075+ 29DA C2 EF 29             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 29DD 23                   inc     HL
2077+ 29DE 7E                   ld      A,(HL)          ; End of program?
2078+ 29DF 23                   inc     HL
2079+ 29E0 B6                   or      (HL)            ; 00 00 Ends program
2080+ 29E1 1E 06                ld      E,OD            ; ?OD Error
2081+ 29E3 CA 85 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 29E6 23                   inc     HL
2083+ 29E7 5E                   ld      E,(HL)          ; LSB of line number
2084+ 29E8 23                   inc     HL
2085+ 29E9 56                   ld      D,(HL)          ; MSB of line number
2086+ 29EA EB                   ex      DE,HL
2087+ 29EB 22 0A 61             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 29EE EB                   ex      DE,HL
2089+ 29EF CD B4 25     FANDT:  call    GETCHR          ; Get next character
2090+ 29F2 FE 83                cp      ZDATA           ; "DATA" token
2091+ 29F4 C2 D6 29             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 29F7 C3 6A 29             jp      ANTVLU          ; Found - Convert input
2093+ 29FA
2094+ 29FA 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 29FD C4 54 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 2A00 22 0F 61             ld      (BRKLIN),HL     ; Save code string address
2097+ 2A03 CD F4 1F             call    BAKSTK          ; Look for "FOR" block
2098+ 2A06 C2 71 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 2A09 F9                   ld      SP,HL           ; Clear nested loops
2100+ 2A0A D5                   push    DE              ; Save index address
2101+ 2A0B 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A0C 23                   inc     HL
2103+ 2A0D F5                   push    AF              ; Save sign of STEP
2104+ 2A0E D5                   push    DE              ; Save index address
2105+ 2A0F CD 90 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A12 E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A13 E5                   push    HL              ; Save address of index
2108+ 2A14 CD AC 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A17 E1                   pop     HL              ; Restore address of index
2110+ 2A18 CD AA 38             call    FPTHL           ; Move value to index variable
2111+ 2A1B E1                   pop     HL              ; Restore address of TO value
2112+ 2A1C CD A1 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A1F E5                   push    HL              ; Save address of line of FOR
2114+ 2A20 CD CD 38             call    CMPNUM          ; Compare index with TO value
2115+ 2A23 E1                   pop     HL              ; Restore address of line num
2116+ 2A24 C1                   pop     BC              ; Address of sign of STEP
2117+ 2A25 90                   sub     B               ; Compare with expected sign
2118+ 2A26 CD A1 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A29 CA 35 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A2C EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A2D 22 E1 5F             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A30 69                   ld      L,C             ; Set code string to loop
2123+ 2A31 60                   ld      H,B
2124+ 2A32 C3 70 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A35
2126+ 2A35 F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A36 2A 0F 61             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A39 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A3A FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A3C C2 74 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A3F CD B4 25             call    GETCHR          ; Position to index name
2132+ 2A42 CD FD 29             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A45              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A45
2135+ 2A45 CD 57 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A48 F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A49 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A4A 3A C6 60     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A4D 8F                   adc     A,A             ; Expected + actual
2140+ 2A4E B7                   or      A               ; Clear carry , set parity
2141+ 2A4F E8                   ret     PE              ; Even parity - Types match
2142+ 2A50 C3 7D 20             jp      TMERR           ; Different types - Error
2143+ 2A53
2144+ 2A53 CD 6B 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A56 28                   defb    '('
2146+ 2A57 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A58 16 00                ld      D,$00           ; Precedence value
2148+ 2A5A D5           EVAL1:  push    DE              ; Save precedence
2149+ 2A5B 0E 01                ld      C,$01
2150+ 2A5D CD 28 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2A60 CD CE 2A             call    OPRND           ; Get next expression value
2152+ 2A63 22 11 61     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2A66 2A 11 61     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2A69 C1                   pop     BC              ; Precedence value and operator
2155+ 2A6A 78                   ld      A,B             ; Get precedence value
2156+ 2A6B FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2A6D D4 48 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2A70 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2A71 16 00                ld      D,$00           ; Clear Last relation
2160+ 2A73 D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2A75 DA 8F 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2A78 FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2A7A D2 8F 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2A7D FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2A7F 17                   rla                     ; <- Test for legal
2166+ 2A80 AA                   xor     D               ; <- combinations of < = >
2167+ 2A81 BA                   cp      D               ; <- by combining last token
2168+ 2A82 57                   ld      D,A             ; <- with current one
2169+ 2A83 DA 6B 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2A86 22 06 61             ld      (CUROPR),HL     ; Save address of current token
2171+ 2A89 CD B4 25             call    GETCHR          ; Get next character
2172+ 2A8C C3 73 2A             jp      RLTLP           ; Treat the two as one
2173+ 2A8F
2174+ 2A8F 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2A90 B7                   or      A
2176+ 2A91 C2 CF 2B             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2A94 7E                   ld      A,(HL)          ; Get operator token
2178+ 2A95 22 06 61             ld      (CUROPR),HL     ; Save operator address
2179+ 2A98 D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2A9A D8                   ret     C               ; Neither - Exit
2181+ 2A9B FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2A9D D0                   ret     NC              ; No - Exit
2183+ 2A9E 5F                   ld      E,A             ; Coded operator
2184+ 2A9F 3A C6 60             ld      A,(TYPE)        ; Get data type
2185+ 2AA2 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2AA3 B3                   or      E               ; Combine with coded operator
2187+ 2AA4 7B                   ld      A,E             ; Get coded operator
2188+ 2AA5 CA 43 30             jp      Z,CONCAT        ; String concatenation
2189+ 2AA8 07                   rlca                    ; Times 2
2190+ 2AA9 83                   add     A,E             ; Times 3
2191+ 2AAA 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2AAB 21 E6 1E             ld      HL,PRITAB       ; Precedence table
2193+ 2AAE 19                   add     HL,DE           ; To the operator concerned
2194+ 2AAF 78                   ld      A,B             ; Last operator precedence
2195+ 2AB0 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AB1 BA                   cp      D               ; Compare with eval precedence
2197+ 2AB2 D0                   ret     NC              ; Exit if higher precedence
2198+ 2AB3 23                   inc     HL              ; Point to routine address
2199+ 2AB4 CD 48 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2AB7
2201+ 2AB7 C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2AB8 01 66 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2ABB C5                   push    BC              ; Save on stack for return
2204+ 2ABC 43                   ld      B,E             ; Save operator
2205+ 2ABD 4A                   ld      C,D             ; Save precedence
2206+ 2ABE CD 83 38             call    STAKFP          ; Move value to stack
2207+ 2AC1 58                   ld      E,B             ; Restore operator
2208+ 2AC2 51                   ld      D,C             ; Restore precedence
2209+ 2AC3 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2AC4 23                   inc     HL
2211+ 2AC5 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2AC6 23                   inc     HL
2213+ 2AC7 C5                   push    BC              ; Save routine address
2214+ 2AC8 2A 06 61             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2ACB C3 5A 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2ACE
2217+ 2ACE AF           OPRND:  xor     A               ; Get operand routine
2218+ 2ACF 32 C6 60             ld      (TYPE),A        ; Set numeric expected
2219+ 2AD2 CD B4 25             call    GETCHR          ; Get next character
2220+ 2AD5 1E 24                ld      E,MO            ; ?MO Error
2221+ 2AD7 CA 85 20             jp      Z,ERROR         ; No operand - Error
2222+ 2ADA DA 59 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2ADD CD 56 26             call    CHKLTR          ; See if a letter
2224+ 2AE0 D2 35 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2AE3 FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2AE5 20 12                jr      NZ,NOTAMP
2227+ 2AE7 CD B4 25             call    GETCHR          ; Get next character
2228+ 2AEA FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2AEC CA 2A 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2AEF FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2AF1 CA 9A 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2AF4 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2AF6 CA 85 20             jp      Z,ERROR         ;
2234+ 2AF9 FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2AFB CA CE 2A             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2AFE FE 2E                cp      '.'             ; '.' ?
2237+ 2B00 CA 59 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2B03 FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2B05 CA 24 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2B08 FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2B0A CA 0C 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B0D FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B0F CA 2F 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B12 FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B14 CA 70 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B17 D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B19 D2 46 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B1C CD 53 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B1F CD 6B 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B22 29                   defb    ')'
2251+ 2B23 C9                   ret
2252+ 2B24
2253+ 2B24 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B26 CD 5A 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B29 2A 11 61             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B2C E5                   push    HL              ; Save next operator address
2257+ 2B2D CD 7B 38             call    INVSGN          ; Negate value
2258+ 2B30 CD 48 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B33 E1                   pop     HL              ; Restore next operator address
2260+ 2B34 C9                   ret
2261+ 2B35
2262+ 2B35 CD 54 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B38 E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B39 EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B3A 22 8B 61             ld      (FPREG),HL      ; Save address of variable
2266+ 2B3D 3A C6 60             ld      A,(TYPE)        ; Get type
2267+ 2B40 B7                   or      A               ; Numeric?
2268+ 2B41 CC 90 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B44 E1                   pop     HL              ; Restore code string address
2270+ 2B45 C9                   ret
2271+ 2B46
2272+ 2B46 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B48 07                   rlca                    ; Double function offset
2274+ 2B49 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B4A C5                   push    BC              ; Save adjusted token value
2276+ 2B4B CD B4 25             call    GETCHR          ; Get next character
2277+ 2B4E 79                   ld      A,C             ; Get adjusted token value
2278+ 2B4F FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B51 CA 7D 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B54 FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B56 CA 1F 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B59 FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2B5B DA 77 2B             jp      C,FNVAL         ; No - Do function
2284+ 2B5E CD 53 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2B61 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2B64 2C                   defb    ','
2287+ 2B65 CD 49 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2B68 EB                   ex      DE,HL           ; Save code string address
2289+ 2B69 2A 8B 61             ld      HL,(FPREG)      ; Get address of string
2290+ 2B6C E3                   ex      (SP),HL         ; Save address of string
2291+ 2B6D E5                   push    HL              ; Save adjusted token value
2292+ 2B6E EB                   ex      DE,HL           ; Restore code string address
2293+ 2B6F CD CB 32             call    GETINT          ; Get integer 0-255
2294+ 2B72 EB                   ex      DE,HL           ; Save code string address
2295+ 2B73 E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2B74 C3 7F 2B             jp      GOFUNC          ; Jump to string function
2297+ 2B77
2298+ 2B77 CD 1C 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2B7A E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2B7B 11 30 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2B7E D5                   push    DE              ; Save on stack
2302+ 2B7F 01 A3 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2B82 09                   add     HL,BC           ; Point to right address
2304+ 2B83 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2B84 23                   inc     HL              ;
2306+ 2B85 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2B86 69                   ld      L,C             ; Address to HL
2308+ 2B87 E9                   jp      (HL)            ; Jump to function
2309+ 2B88
2310+ 2B88 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2B89 FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2B8B C8                   ret     Z               ; Yes - Return
2313+ 2B8C FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2B8E C8                   ret     Z               ; Yes - Return
2315+ 2B8F 14                   inc     D               ; Inc to flag positive exponent
2316+ 2B90 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2B92 C8                   ret     Z               ; Yes - Return
2318+ 2B93 FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2B95 C8                   ret     Z               ; Yes - Return
2320+ 2B96 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2B97 C9                   ret                     ; Return "NZ"
2322+ 2B98
2323+ 2B98              ; execute OR, AND, and XOR operations
2324+ 2B98 AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2B99 18 07                jr      CNTLGC
2326+ 2B9B AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2B9C D6 01                sub     $01
2328+ 2B9E 18 02                jr      CNTLGC
2329+ 2BA0 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2BA1 3C                   inc     A
2331+ 2BA2 F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2BA3 CD 48 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2BA6 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2BA9 F1                   pop     AF              ; retrieve operand's flags
2335+ 2BAA EB                   ex      DE,HL           ; <- Get last
2336+ 2BAB C1                   pop     BC              ; <-  value
2337+ 2BAC E3                   ex      (SP),HL         ; <-  from
2338+ 2BAD EB                   ex      DE,HL           ; <-  stack
2339+ 2BAE CD 93 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BB1 F5                   push    AF              ; store operand's flags
2341+ 2BB2 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BB5 F1                   pop     AF              ; retrieve operand's flags
2343+ 2BB6 C1                   pop     BC              ; Get value
2344+ 2BB7 79                   ld      A,C             ; Get LSB
2345+ 2BB8 21 2E 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2BBB 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2BBD A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2BBE 4F                   ld      C,A             ; Save LSB
2349+ 2BBF 78                   ld      A,B             ; Get MSB
2350+ 2BC0 A2                   and     D               ; "AND" MSBs
2351+ 2BC1 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2BC2 F2 CA 2B     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2BC5 B3                   or      E               ; "OR" LSBs
2354+ 2BC6 4F                   ld      C,A             ; Save LSB
2355+ 2BC7 78                   ld      A,B             ; Get MSB
2356+ 2BC8 B2                   or      D               ; "OR" MSBs
2357+ 2BC9 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2BCA AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2BCB 4F                   ld      C,A             ; Save LSB
2360+ 2BCC 78                   ld      A,B             ; Get MSB
2361+ 2BCD AA                   xor     D               ; "XOR" MSBs
2362+ 2BCE E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2BCF
2364+ 2BCF 21 E1 2B     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2BD2 3A C6 60             ld      A,(TYPE)        ; Get data type
2366+ 2BD5 1F                   rra                     ; Carry set = string
2367+ 2BD6 7A                   ld      A,D             ; Get last precedence value
2368+ 2BD7 17                   rla                     ; Times 2 plus carry
2369+ 2BD8 5F                   ld      E,A             ; To E
2370+ 2BD9 16 64                ld      D,$64           ; Relational precedence
2371+ 2BDB 78                   ld      A,B             ; Get current precedence
2372+ 2BDC BA                   cp      D               ; Compare with last
2373+ 2BDD D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2BDE C3 B7 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2BE1
2376+ 2BE1 E3 2B        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2BE3 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2BE4 B7                   or      A
2379+ 2BE5 1F                   rra
2380+ 2BE6 C1                   pop     BC              ; Get last expression to BCDE
2381+ 2BE7 D1                   pop     DE
2382+ 2BE8 F5                   push    AF              ; Save status
2383+ 2BE9 CD 4A 2A             call    CHKTYP          ; Check that types match
2384+ 2BEC 21 25 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2BEF E5                   push    HL              ; Save for RETurn
2386+ 2BF0 CA CD 38             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2BF3 AF                   xor     A               ; Compare two strings
2388+ 2BF4 32 C6 60             ld      (TYPE),A        ; Set type to numeric
2389+ 2BF7 D5                   push    DE              ; Save string name
2390+ 2BF8 CD 90 30             call    GSTRCU          ; Get current string
2391+ 2BFB 7E                   ld      A,(HL)          ; Get length of string
2392+ 2BFC 23                   inc     HL
2393+ 2BFD 23                   inc     HL
2394+ 2BFE 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2BFF 23                   inc     HL
2396+ 2C00 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2C01 D1                   pop     DE              ; Restore string name
2398+ 2C02 C5                   push    BC              ; Save address of string
2399+ 2C03 F5                   push    AF              ; Save length of string
2400+ 2C04 CD 94 30             call    GSTRDE          ; Get second string
2401+ 2C07 CD A1 38             call    LOADFP          ; Get address of second string
2402+ 2C0A F1                   pop     AF              ; Restore length of string 1
2403+ 2C0B 57                   ld      D,A             ; Length to D
2404+ 2C0C E1                   pop     HL              ; Restore address of string 1
2405+ 2C0D 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C0E B2                   or      D               ; Bytes of string 1 to do
2407+ 2C0F C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C10 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C11 D6 01                sub     $01
2410+ 2C13 D8                   ret     C               ; Exit if end of string 1
2411+ 2C14 AF                   xor     A
2412+ 2C15 BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C16 3C                   inc     A
2414+ 2C17 D0                   ret     NC              ; Exit if end of string 2
2415+ 2C18 15                   dec     D               ; Count bytes in string 1
2416+ 2C19 1D                   dec     E               ; Count bytes in string 2
2417+ 2C1A 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C1B BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C1C 23                   inc     HL              ; Move up string 1
2420+ 2C1D 03                   inc     BC              ; Move up string 2
2421+ 2C1E CA 0D 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C21 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C22 C3 5D 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C25
2425+ 2C25 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C26 8F                   adc     A,A             ; Double plus carry
2427+ 2C27 C1                   pop     BC              ; Get other value
2428+ 2C28 A0                   and     B               ; Combine them
2429+ 2C29 C6 FF                add     A,-1            ; Carry set if different
2430+ 2C2B 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C2C C3 64 38             jp      FLGREL          ; Set current value & continue
2432+ 2C2F
2433+ 2C2F 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C31 CD 5A 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C34 CD 48 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C37 CD 6A 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C3A 7B                   ld      A,E             ; Get LSB
2438+ 2C3B 2F                   cpl                     ; Invert LSB
2439+ 2C3C 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C3D 7A                   ld      A,D             ; Get MSB
2441+ 2C3E 2F                   cpl                     ; Invert MSB
2442+ 2C3F CD 2E 2E             call    ACPASS          ; Save AC as current
2443+ 2C42 C1                   pop     BC              ; Clean up stack
2444+ 2C43 C3 66 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C46
2446+ 2C46 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C47 CD B4 25             call    GETCHR          ; Get next character
2448+ 2C4A C8                   ret     Z               ; End of DIM statement
2449+ 2C4B CD 6B 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C4E 2C                   defb    ','
2451+ 2C4F 01 46 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C52 C5                   push    BC              ; Save on stack
2453+ 2C53 F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C54 AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C55 32 C5 60             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C58 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C59 CD 56 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2C5C DA 6B 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2C5F AF                   xor     A
2460+ 2C60 4F                   ld      C,A             ; Clear second byte of name
2461+ 2C61 32 C6 60             ld      (TYPE),A        ; Set type to numeric
2462+ 2C64 CD B4 25             call    GETCHR          ; Get next character
2463+ 2C67 DA 70 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2C6A CD 56 26             call    CHKLTR          ; See if a letter
2465+ 2C6D DA 7D 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2C70 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2C71 CD B4 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2C74 DA 71 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2C77 CD 56 26             call    CHKLTR          ; See if a letter
2470+ 2C7A D2 71 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2C7D D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2C7F C2 8C 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2C82 3C                   inc     A               ; A = 1 (string type)
2474+ 2C83 32 C6 60             ld      (TYPE),A        ; Set type to string
2475+ 2C86 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2C87 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2C88 4F                   ld      C,A             ; Resave second byte on name
2478+ 2C89 CD B4 25             call    GETCHR          ; Get next character
2479+ 2C8C 3A 0C 61     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2C8F 3D                   dec     A
2481+ 2C90 CA 39 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2C93 F2 9C 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2C96 7E                   ld      A,(HL)          ; Get byte again
2484+ 2C97 D6 28                sub     '('             ; Subscripted variable?
2485+ 2C99 CA 11 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2C9C
2487+ 2C9C AF           NSCFOR: xor     A               ; Simple variable
2488+ 2C9D 32 0C 61             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2CA0 E5                   push    HL              ; Save code string address
2490+ 2CA1 50                   ld      D,B             ; DE = Variable name to find
2491+ 2CA2 59                   ld      E,C
2492+ 2CA3 2A 85 61             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2CA6 CD 65 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2CA9 11 87 61             ld      DE,FNARG        ; Point to argument value
2495+ 2CAC CA 42 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CAF 2A 7F 61             ld      HL,(VAREND)     ; End of variables
2497+ 2CB2 EB                   ex      DE,HL           ; Address of end of search
2498+ 2CB3 2A 7D 61             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CB6 CD 65 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CB9 CA CF 2C             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2CBC 79                   ld      A,C             ; Get second byte of name
2502+ 2CBD 96                   sub     (HL)            ; Compare with name in list
2503+ 2CBE 23                   inc     HL              ; Move on to first byte
2504+ 2CBF C2 C4 2C             jp      NZ,FNTHR        ; Different - Find another
2505+ 2CC2 78                   ld      A,B             ; Get first byte of name
2506+ 2CC3 96                   sub     (HL)            ; Compare with name in list
2507+ 2CC4 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2CC5 CA 03 2D             jp      Z,RETADR        ; Found - Return address
2509+ 2CC8 23                   inc     HL              ; <- Skip
2510+ 2CC9 23                   inc     HL              ; <- over
2511+ 2CCA 23                   inc     HL              ; <- F.P.
2512+ 2CCB 23                   inc     HL              ; <- value
2513+ 2CCC C3 B6 2C             jp      FNDVAR          ; Keep looking
2514+ 2CCF
2515+ 2CCF E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2CD0 E3                   ex      (SP),HL         ; Get return address
2517+ 2CD1 D5                   push    DE              ; Save address of variable
2518+ 2CD2 11 38 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2CD5 CD 65 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2CD8 D1                   pop     DE              ; Restore address of variable
2521+ 2CD9 CA 06 2D             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2CDC E3                   ex      (SP),HL         ; Put back return
2523+ 2CDD E5                   push    HL              ; Save code string address
2524+ 2CDE C5                   push    BC              ; Save variable name
2525+ 2CDF 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2CE2 2A 81 61             ld      HL,(ARREND)     ; End of arrays
2527+ 2CE5 E5                   push    HL              ; Save end of arrays
2528+ 2CE6 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2CE7 C1                   pop     BC              ; Source address in BC
2530+ 2CE8 E5                   push    HL              ; Save new end address
2531+ 2CE9 CD 17 20             call    MOVUP           ; Move arrays up
2532+ 2CEC E1                   pop     HL              ; Restore new end address
2533+ 2CED 22 81 61             ld      (ARREND),HL     ; Set new end address
2534+ 2CF0 60                   ld      H,B             ; End of variables to HL
2535+ 2CF1 69                   ld      L,C
2536+ 2CF2 22 7F 61             ld      (VAREND),HL     ; Set new end address
2537+ 2CF5
2538+ 2CF5 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2CF6 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2CF8 CD 65 23             call    CPDEHL          ; Done them all?
2541+ 2CFB C2 F5 2C             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2CFE D1                   pop     DE              ; Get variable name
2543+ 2CFF 73                   ld      (HL),E          ; Store second character
2544+ 2D00 23                   inc     HL
2545+ 2D01 72                   ld      (HL),D          ; Store first character
2546+ 2D02 23                   inc     HL
2547+ 2D03 EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2D04 E1                   pop     HL              ; Restore code string address
2549+ 2D05 C9                   ret
2550+ 2D06
2551+ 2D06 32 8E 61     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2D09 21 E8 1F             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D0C 22 8B 61             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D0F E1                   pop     HL              ; Restore code string address
2555+ 2D10 C9                   ret
2556+ 2D11
2557+ 2D11 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D12 2A C5 60             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D15 E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D16 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D17 D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D18 C5                   push    BC              ; Save array name
2563+ 2D19 CD 5E 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D1C C1                   pop     BC              ; Restore array name
2565+ 2D1D F1                   pop     AF              ; Get number of dimensions
2566+ 2D1E EB                   ex      DE,HL
2567+ 2D1F E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D20 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D21 EB                   ex      DE,HL
2570+ 2D22 3C                   inc     A               ; Count dimensions
2571+ 2D23 57                   ld      D,A             ; Save in D
2572+ 2D24 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D25 FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D27 CA 17 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D2A CD 6B 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D2D 29                   defb    ')'
2577+ 2D2E 22 11 61             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D31 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D32 22 C5 60             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D35 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D37 D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D38 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D39
2584+ 2D39 E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D3A F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D3B 2A 7F 61             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D3E 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D3F 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D40 EB                   ex      DE,HL
2590+ 2D41 2A 81 61             ld      HL,(ARREND)     ; End of arrays
2591+ 2D44 EB                   ex      DE,HL           ; Current array pointer
2592+ 2D45 CD 65 23             call    CPDEHL          ; End of arrays found?
2593+ 2D48 CA 71 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D4B 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D4C B9                   cp      C               ; Compare with name given
2596+ 2D4D 23                   inc     HL              ; Move on
2597+ 2D4E C2 53 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D51 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D52 B8                   cp      B               ; Compare with name given
2600+ 2D53 23           NXTARY: inc     HL              ; Move on
2601+ 2D54 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D55 23                   inc     HL
2603+ 2D56 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D57 23                   inc     HL
2605+ 2D58 C2 3F 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2D5B 3A C5 60             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2D5E B7                   or      A
2608+ 2D5F C2 74 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2D62 F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2D63 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2D64 4D                   ld      C,L
2612+ 2D65 CA 42 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2D68 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2D69 CA CF 2D             jp      Z,FINDEL        ; Yes - Find element
2615+ 2D6C 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2D6E C3 85 20             jp      ERROR           ; Output error
2617+ 2D71
2618+ 2D71 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2D74 F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2D75 CA 7F 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2D78 71                   ld      (HL),C          ; Save second byte of name
2622+ 2D79 23                   inc     HL
2623+ 2D7A 70                   ld      (HL),B          ; Save first byte of name
2624+ 2D7B 23                   inc     HL
2625+ 2D7C 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2D7D CD 28 20             call    CHKSTK          ; Check if enough memory
2627+ 2D80 23                   inc     HL              ; Point to number of dimensions
2628+ 2D81 23                   inc     HL
2629+ 2D82 22 06 61             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2D85 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2D86 23                   inc     HL
2632+ 2D87 3A C5 60             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2D8A 17                   rla                     ; Carry set = Create
2634+ 2D8B 79                   ld      A,C             ; Get number of dimensions
2635+ 2D8C 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2D8F D2 94 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2D92 C1                   pop     BC              ; Get specified dimension size
2638+ 2D93 03                   inc     BC              ; Include zero element
2639+ 2D94 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2D95 23                   inc     HL
2641+ 2D96 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2D97 23                   inc     HL
2643+ 2D98 F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2D99 E5                   push    HL              ; Save address of dim'n size
2645+ 2D9A CD 3E 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2D9D EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2D9E E1                   pop     HL              ; Restore address of dimension
2648+ 2D9F F1                   pop     AF              ; Restore number of dimensions
2649+ 2DA0 3D                   dec     A               ; Count them
2650+ 2DA1 C2 8C 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2DA4 F5                   push    AF              ; Save locate/create flag
2652+ 2DA5 42                   ld      B,D             ; MSB of memory needed
2653+ 2DA6 4B                   ld      C,E             ; LSB of memory needed
2654+ 2DA7 EB                   ex      DE,HL
2655+ 2DA8 19                   add     HL,DE           ; Add bytes to array start
2656+ 2DA9 DA 40 20             jp      C,OMERR         ; Too big - Error
2657+ 2DAC CD 31 20             call    ENFMEM          ; See if enough memory
2658+ 2DAF 22 81 61             ld      (ARREND),HL     ; Save new end of array
2659+ 2DB2
2660+ 2DB2 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DB3 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DB5 CD 65 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DB8 C2 B2 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2DBB 03                   inc     BC              ; Number of bytes + 1
2665+ 2DBC 57                   ld      D,A             ; A=0
2666+ 2DBD 2A 06 61             ld      HL,(CUROPR)     ; Get address of array
2667+ 2DC0 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2DC1 EB                   ex      DE,HL           ; To HL
2669+ 2DC2 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2DC3 09                   add     HL,BC           ; Add number of bytes
2671+ 2DC4 EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2DC5 2B                   dec     HL
2673+ 2DC6 2B                   dec     HL
2674+ 2DC7 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2DC8 23                   inc     HL
2676+ 2DC9 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2DCA 23                   inc     HL
2678+ 2DCB F1                   pop     AF              ; Locate / Create?
2679+ 2DCC DA F3 2D             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2DCF 47           FINDEL: ld      B,A             ; Find array element
2681+ 2DD0 4F                   ld      C,A
2682+ 2DD1 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2DD2 23                   inc     HL
2684+ 2DD3 16                   defb    $16             ; Skip "pop HL"
2685+ 2DD4 E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2DD5 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2DD6 23                   inc     HL
2688+ 2DD7 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2DD8 23                   inc     HL
2690+ 2DD9 E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2DDA F5                   push    AF              ; Save number of dim'ns
2692+ 2DDB CD 65 23             call    CPDEHL          ; Dimension too large?
2693+ 2DDE D2 6C 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2DE1 E5                   push    HL              ; Save index
2695+ 2DE2 CD 3E 39             call    MLDEBC          ; Multiply previous by size
2696+ 2DE5 D1                   pop     DE              ; Index supplied to DE
2697+ 2DE6 19                   add     HL,DE           ; Add index to pointer
2698+ 2DE7 F1                   pop     AF              ; Number of dimensions
2699+ 2DE8 3D                   dec     A               ; Count them
2700+ 2DE9 44                   ld      B,H             ; MSB of pointer
2701+ 2DEA 4D                   ld      C,L             ; LSB of pointer
2702+ 2DEB C2 D4 2D             jp      NZ,FNDELP       ; More - Keep going
2703+ 2DEE 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2DEF 29                   add     HL,HL
2705+ 2DF0 C1                   pop     BC              ; Start of array
2706+ 2DF1 09                   add     HL,BC           ; Point to element
2707+ 2DF2 EB                   ex      DE,HL           ; Address of element to DE
2708+ 2DF3 2A 11 61     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2DF6 C9                   ret
2710+ 2DF7
2711+ 2DF7
2712+ 2DF7              ; returns the value of the 32-bit system tick counter as
2713+ 2DF7              ; two 16-bit words
2714+ 2DF7 CD 48 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2DFA CD 6A 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2DFD 2A 17 61             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2E00 7B                   ld      A,E
2718+ 2E01 B2                   or      D               ; is it 0?
2719+ 2E02 CA 08 2E             jp      Z,ENDTMR        ; yes, jump over
2720+ 2E05 2A 19 61             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2E08 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2E09 7C                   ld      A,H             ; ...into AB
2723+ 2E0A C3 2F 2E             jp      ABPASS          ; return word into AB
2724+ 2E0D
2725+ 2E0D
2726+ 2E0D              ; returns the free space for BASIC or into the string pool
2727+ 2E0D 2A 81 61     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E10 EB                   ex      DE,HL           ; To DE
2729+ 2E11 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E14 39                   add     HL,SP           ; Current stack value
2731+ 2E15 3A C6 60             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E18 B7                   or      A
2733+ 2E19 CA 29 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E1C CD 90 30             call    GSTRCU          ; Current string to pool
2735+ 2E1F CD 90 2F             call    GARBGE          ; Garbage collection
2736+ 2E22 2A DF 5F             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E25 EB                   ex      DE,HL           ; To DE
2738+ 2E26 2A 04 61             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E29 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E2A 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E2B 4F                   ld      C,A             ; Save difference if C
2742+ 2E2C 7C                   ld      A,H             ; Get MSB of end
2743+ 2E2D 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E2E 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E2F 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E30 1E 00                ld      E,$00
2747+ 2E32 21 C6 60             ld      HL,TYPE         ; Point to type
2748+ 2E35 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E36 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E38 C3 69 38             jp      RETINT          ; Return the integer
2751+ 2E3B
2752+ 2E3B              ; returns the X position of the cursor during a print
2753+ 2E3B 3A C4 60     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E3E              ; return the value in A as a number
2755+ 2E3E 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E3F AF                   xor     A               ; Zero A
2757+ 2E40 C3 2F 2E             jp      ABPASS          ; Return integer AB
2758+ 2E43
2759+ 2E43 CD C6 2E     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E46 CD B8 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E49 01 5D 27             ld      BC,DATA         ; To get next statement
2762+ 2E4C C5                   push    BC              ; Save address for RETurn
2763+ 2E4D D5                   push    DE              ; Save address of function ptr
2764+ 2E4E CD 6B 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E51 28                   defb    '('
2766+ 2E52 CD 54 2C             call    GETVAR          ; Get argument variable name
2767+ 2E55 E5                   push    HL              ; Save code string address
2768+ 2E56 EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E57 2B                   dec     HL
2770+ 2E58 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E59 2B                   dec     HL
2772+ 2E5A 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2E5B E1                   pop     HL              ; Restore code string address
2774+ 2E5C CD 48 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2E5F CD 6B 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2E62 29                   defb    ')'
2777+ 2E63 CD 6B 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2E66 C9                   defb    ZEQUAL          ; "=" token
2779+ 2E67 44                   ld      B,H             ; Code string address to BC
2780+ 2E68 4D                   ld      C,L
2781+ 2E69 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2E6A 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2E6B 23                   inc     HL
2784+ 2E6C 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2E6D C3 05 2F             jp      SVSTAD          ; Save address and do function
2786+ 2E70
2787+ 2E70 CD C6 2E     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2E73 D5                   push    DE              ; Save function pointer address
2789+ 2E74 CD 1C 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2E77 CD 48 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2E7A E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2E7B 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2E7C 23                   inc     HL
2794+ 2E7D 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2E7E 23                   inc     HL
2796+ 2E7F 7A                   ld      A,D             ; And function DEFined?
2797+ 2E80 B3                   or      E
2798+ 2E81 CA 77 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2E84 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2E85 23                   inc     HL
2801+ 2E86 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2E87 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2E88 E5                   push    HL              ; Save it
2804+ 2E89 2A 85 61             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2E8C E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2E8D 22 85 61             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2E90 2A 89 61             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2E93 E5                   push    HL              ; Save it
2809+ 2E94 2A 87 61             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2E97 E5                   push    HL              ; Save it
2811+ 2E98 21 87 61             ld      HL,FNARG        ; HL = Value of argument
2812+ 2E9B D5                   push    DE              ; Save FN code string address
2813+ 2E9C CD AA 38             call    FPTHL           ; Move FPREG to argument
2814+ 2E9F E1                   pop     HL              ; Get FN code string address
2815+ 2EA0 CD 45 2A             call    GETNUM          ; Get value from function
2816+ 2EA3 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2EA4 CD B4 25             call    GETCHR          ; Get next character
2818+ 2EA7 C2 6B 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2EAA E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2EAB 22 87 61             ld      (FNARG),HL      ; Restore it
2821+ 2EAE E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2EAF 22 89 61             ld      (FNARG+2),HL    ; Restore it
2823+ 2EB2 E1                   pop     HL              ; Get name of old arg
2824+ 2EB3 22 85 61             ld      (FNRGNM),HL     ; Restore it
2825+ 2EB6 E1                   pop     HL              ; Restore code string address
2826+ 2EB7 C9                   ret
2827+ 2EB8
2828+ 2EB8 E5           IDTEST: push    HL              ; Save code string address
2829+ 2EB9 2A E1 5F             ld      HL,(LINEAT)     ; Get current line number
2830+ 2EBC 23                   inc     HL              ; -1 means direct statement
2831+ 2EBD 7C                   ld      A,H
2832+ 2EBE B5                   or      L
2833+ 2EBF E1                   pop     HL              ; Restore code string address
2834+ 2EC0 C0                   ret     NZ              ; Return if in program
2835+ 2EC1 1E 16                ld      E,ID            ; ?ID Error
2836+ 2EC3 C3 85 20             jp      ERROR
2837+ 2EC6
2838+ 2EC6 CD 6B 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2EC9 B9                   defb    ZFN             ; "FN" token
2840+ 2ECA 3E 80                ld      A,$80
2841+ 2ECC 32 0C 61             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2ECF B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2ED0 47                   ld      B,A             ; in first byte of name
2844+ 2ED1 CD 59 2C             call    GTFNAM          ; Get FN name
2845+ 2ED4 C3 48 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2ED7
2847+ 2ED7 CD 48 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2EDA CD F7 39             call    NUMASC          ; Turn number into text
2849+ 2EDD CD 0B 2F     STR1:   call    CRTST           ; Create string entry for it
2850+ 2EE0 CD 90 30             call    GSTRCU          ; Current string to pool
2851+ 2EE3 01 EB 30             ld      BC,TOPOOL       ; Save in string pool
2852+ 2EE6 C5                   push    BC              ; Save address on stack
2853+ 2EE7
2854+ 2EE7 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2EE8 23                   inc     HL
2856+ 2EE9 23                   inc     HL
2857+ 2EEA E5                   push    HL              ; Save pointer to string
2858+ 2EEB CD 66 2F             call    TESTR           ; See if enough string space
2859+ 2EEE E1                   pop     HL              ; Restore pointer to string
2860+ 2EEF 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2EF0 23                   inc     HL
2862+ 2EF1 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2EF2 CD FF 2E             call    CRTMST          ; Create string entry
2864+ 2EF5 E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2EF6 6F                   ld      L,A             ; Length of string
2866+ 2EF7 CD 83 30             call    TOSTRA          ; Move to string area
2867+ 2EFA D1                   pop     DE              ; Restore pointer to MSB
2868+ 2EFB C9                   ret
2869+ 2EFC
2870+ 2EFC CD 66 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2EFF 21 00 61     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2F02 E5                   push    HL              ; Save it
2873+ 2F03 77                   ld      (HL),A          ; Save length of string
2874+ 2F04 23                   inc     HL
2875+ 2F05 23           SVSTAD: inc     HL
2876+ 2F06 73                   ld      (HL),E          ; Save LSB of address
2877+ 2F07 23                   inc     HL
2878+ 2F08 72                   ld      (HL),D          ; Save MSB of address
2879+ 2F09 E1                   pop     HL              ; Restore pointer
2880+ 2F0A C9                   ret
2881+ 2F0B
2882+ 2F0B 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F0C 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F0E 50                   ld      D,B             ; Quote to D
2885+ 2F0F E5           DTSTR:  push    HL              ; Save start
2886+ 2F10 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F12 23           QTSTLP: inc     HL              ; Move on
2888+ 2F13 7E                   ld      A,(HL)          ; Get byte
2889+ 2F14 0C                   inc     C               ; Count bytes
2890+ 2F15 B7                   or      A               ; End of line?
2891+ 2F16 CA 21 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F19 BA                   cp      D               ; Terminator D found?
2893+ 2F1A CA 21 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F1D B8                   cp      B               ; Terminator B found?
2895+ 2F1E C2 12 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F21 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F23 CC B4 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F26 E3                   ex      (SP),HL         ; Starting quote
2899+ 2F27 23                   inc     HL              ; First byte of string
2900+ 2F28 EB                   ex      DE,HL           ; To DE
2901+ 2F29 79                   ld      A,C             ; Get length
2902+ 2F2A CD FF 2E             call    CRTMST          ; Create string entry
2903+ 2F2D 11 00 61     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F30 2A F2 60             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F33 22 8B 61             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F36 3E 01                ld      A,$01
2907+ 2F38 32 C6 60             ld      (TYPE),A        ; Set type to string
2908+ 2F3B CD AD 38             call    DETHL4          ; Move string to pool
2909+ 2F3E CD 65 23             call    CPDEHL          ; Out of string pool?
2910+ 2F41 22 F2 60             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F44 E1                   pop     HL              ; Restore code string address
2912+ 2F45 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F46 C0                   ret     NZ              ; Return if pool OK
2914+ 2F47 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F49 C3 85 20             jp      ERROR           ; String pool overflow
2916+ 2F4C
2917+ 2F4C 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F4D CD 0B 2F     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F50 CD 90 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F53 CD A1 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F56 1C                   inc     E               ; Length + 1
2922+ 2F57 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F58 C8                   ret     Z               ; End of string
2924+ 2F59 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2F5A CD 76 23             call    OUTC            ; Output character in A
2926+ 2F5D FE 0D                cp      CR              ; Return?
2927+ 2F5F CC 8B 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2F62 03                   inc     BC              ; Next byte in string
2929+ 2F63 C3 57 2F             jp      PRSLP           ; More characters to output
2930+ 2F66
2931+ 2F66 B7           TESTR:  or      A               ; Test if enough room
2932+ 2F67 0E                   defb    $0E             ; No garbage collection done
2933+ 2F68 F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2F69 F5                   push    AF              ; Save status
2935+ 2F6A 2A DF 5F             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2F6D EB                   ex      DE,HL           ; To DE
2937+ 2F6E 2A 04 61             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2F71 2F                   cpl                     ; Negate length (Top down)
2939+ 2F72 4F                   ld      C,A             ; -Length to BC
2940+ 2F73 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2F75 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2F76 23                   inc     HL              ; Plus one for 2's complement
2943+ 2F77 CD 65 23             call    CPDEHL          ; Below string RAM area?
2944+ 2F7A DA 84 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2F7D 22 04 61             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2F80 23                   inc     HL              ; Point to first byte of string
2947+ 2F81 EB                   ex      DE,HL           ; Address to DE
2948+ 2F82 F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2F83 C9                   ret
2950+ 2F84
2951+ 2F84 F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2F85 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2F87 CA 85 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2F8A BF                   cp      A               ; Flag garbage collect done
2955+ 2F8B F5                   push    AF              ; Save status
2956+ 2F8C 01 68 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2F8F C5                   push    BC              ; Save for RETurn
2958+ 2F90 2A C8 60     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2F93 22 04 61     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2F96 21 00 00             ld      HL,$0000
2961+ 2F99 E5                   push    HL              ; Flag no string found
2962+ 2F9A 2A DF 5F             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2F9D E5                   push    HL              ; Save bottom of string space
2964+ 2F9E 21 F4 60             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2FA1 EB           GRBLP:  ex      DE,HL
2966+ 2FA2 2A F2 60             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2FA5 EB                   ex      DE,HL
2968+ 2FA6 CD 65 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2FA9 01 A1 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FAC C2 F5 2F             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FAF 2A 7D 61             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FB2 EB           SMPVAR: ex      DE,HL
2973+ 2FB3 2A 7F 61             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FB6 EB                   ex      DE,HL
2975+ 2FB7 CD 65 23             call    CPDEHL          ; All simple strings done?
2976+ 2FBA CA C8 2F             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 2FBD 7E                   ld      A,(HL)          ; Get type of variable
2978+ 2FBE 23                   inc     HL
2979+ 2FBF 23                   inc     HL
2980+ 2FC0 B7                   or      A               ; "S" flag set if string
2981+ 2FC1 CD F8 2F             call    STRADD          ; See if string in string area
2982+ 2FC4 C3 B2 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 2FC7
2984+ 2FC7 C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 2FC8 EB           ARRLP:  ex      DE,HL
2986+ 2FC9 2A 81 61             ld      HL,(ARREND)     ; End of string arrays
2987+ 2FCC EB                   ex      DE,HL
2988+ 2FCD CD 65 23             call    CPDEHL          ; All string arrays done?
2989+ 2FD0 CA 1E 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 2FD3 CD A1 38             call    LOADFP          ; Get array name to BCDE
2991+ 2FD6 7B                   ld      A,E             ; Get type of array
2992+ 2FD7 E5                   push    HL              ; Save address of num of dim'ns
2993+ 2FD8 09                   add     HL,BC           ; Start of next array
2994+ 2FD9 B7                   or      A               ; Test type of array
2995+ 2FDA F2 C7 2F             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 2FDD 22 06 61             ld      (CUROPR),HL     ; Save address of next array
2997+ 2FE0 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 2FE1 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 2FE2 06 00                ld      B,$00
3000+ 2FE4 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 2FE5 09                   add     HL,BC
3002+ 2FE6 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 2FE7 EB           GRBARY: ex      DE,HL
3004+ 2FE8 2A 06 61             ld      HL,(CUROPR)     ; Get address of next array
3005+ 2FEB EB                   ex      DE,HL
3006+ 2FEC CD 65 23             call    CPDEHL          ; Is this array finished?
3007+ 2FEF CA C8 2F             jp      Z,ARRLP         ; Yes - Get next one
3008+ 2FF2 01 E7 2F             ld      BC,GRBARY       ; Loop until array all done
3009+ 2FF5 C5           STPOOL: push    BC              ; Save return address
3010+ 2FF6 F6 80                or      $80             ; Flag string type
3011+ 2FF8 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 2FF9 23                   inc     HL
3013+ 2FFA 23                   inc     HL
3014+ 2FFB 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 2FFC 23                   inc     HL
3016+ 2FFD 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 2FFE 23                   inc     HL
3018+ 2FFF F0                   ret     P               ; Not a string - Return
3019+ 3000 B7                   or      A               ; Set flags on string length
3020+ 3001 C8                   ret     Z               ; Null string - Return
3021+ 3002 44                   ld      B,H             ; Save variable pointer
3022+ 3003 4D                   ld      C,L
3023+ 3004 2A 04 61             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 3007 CD 65 23             call    CPDEHL          ; String been done?
3025+ 300A 60                   ld      H,B             ; Restore variable pointer
3026+ 300B 69                   ld      L,C
3027+ 300C D8                   ret     C               ; String done - Ignore
3028+ 300D E1                   pop     HL              ; Return address
3029+ 300E E3                   ex      (SP),HL         ; Lowest available string area
3030+ 300F CD 65 23             call    CPDEHL          ; String within string area?
3031+ 3012 E3                   ex      (SP),HL         ; Lowest available string area
3032+ 3013 E5                   push    HL              ; Re-save return address
3033+ 3014 60                   ld      H,B             ; Restore variable pointer
3034+ 3015 69                   ld      L,C
3035+ 3016 D0                   ret     NC              ; Outside string area - Ignore
3036+ 3017 C1                   pop     BC              ; Get return , Throw 2 away
3037+ 3018 F1                   pop     AF              ;
3038+ 3019 F1                   pop     AF              ;
3039+ 301A E5                   push    HL              ; Save variable pointer
3040+ 301B D5                   push    DE              ; Save address of current
3041+ 301C C5                   push    BC              ; Put back return address
3042+ 301D C9                   ret                     ; Go to it
3043+ 301E
3044+ 301E D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 301F E1                   pop     HL              ;
3046+ 3020 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3021 B4                   or      H
3048+ 3022 C8                   ret     Z               ; No more to do - Return
3049+ 3023 2B                   dec     HL
3050+ 3024 46                   ld      B,(HL)          ; MSB of address of string
3051+ 3025 2B                   dec     HL
3052+ 3026 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 3027 E5                   push    HL              ; Save variable address
3054+ 3028 2B                   dec     HL
3055+ 3029 2B                   dec     HL
3056+ 302A 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 302B 26 00                ld      H,$00
3058+ 302D 09                   add     HL,BC           ; Address of end of string+1
3059+ 302E 50                   ld      D,B             ; String address to DE
3060+ 302F 59                   ld      E,C
3061+ 3030 2B                   dec     HL              ; Last byte in string
3062+ 3031 44                   ld      B,H             ; Address to BC
3063+ 3032 4D                   ld      C,L
3064+ 3033 2A 04 61             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 3036 CD 1A 20             call    MOVSTR          ; Move string to new address
3066+ 3039 E1                   pop     HL              ; Restore variable address
3067+ 303A 71                   ld      (HL),C          ; Save new LSB of address
3068+ 303B 23                   inc     HL
3069+ 303C 70                   ld      (HL),B          ; Save new MSB of address
3070+ 303D 69                   ld      L,C             ; Next string area+1 to HL
3071+ 303E 60                   ld      H,B
3072+ 303F 2B                   dec     HL              ; Next string area address
3073+ 3040 C3 93 2F             jp      GARBLP          ; Look for more strings
3074+ 3043
3075+ 3043 C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 3044 E5                   push    HL              ;
3077+ 3045 2A 8B 61             ld      HL,(FPREG)      ; Get first string
3078+ 3048 E3                   ex      (SP),HL         ; Save first string
3079+ 3049 CD CE 2A             call    OPRND           ; Get second string
3080+ 304C E3                   ex      (SP),HL         ; Restore first string
3081+ 304D CD 49 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3050 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3051 E5                   push    HL              ; Save first string
3084+ 3052 2A 8B 61             ld      HL,(FPREG)      ; Get second string
3085+ 3055 E5                   push    HL              ; Save second string
3086+ 3056 86                   add     A,(HL)          ; Add length of second string
3087+ 3057 1E 1C                ld      E,LS            ; ?LS Error
3088+ 3059 DA 85 20             jp      C,ERROR         ; String too long - Error
3089+ 305C CD FC 2E             call    MKTMST          ; Make temporary string
3090+ 305F D1                   pop     DE              ; Get second string to DE
3091+ 3060 CD 94 30             call    GSTRDE          ; Move to string pool if needed
3092+ 3063 E3                   ex      (SP),HL         ; Get first string
3093+ 3064 CD 93 30             call    GSTRHL          ; Move to string pool if needed
3094+ 3067 E5                   push    HL              ; Save first string
3095+ 3068 2A 02 61             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 306B EB                   ex      DE,HL           ; To DE
3097+ 306C CD 7A 30             call    SSTSA           ; First string to string area
3098+ 306F CD 7A 30             call    SSTSA           ; Second string to string area
3099+ 3072 21 63 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 3075 E3                   ex      (SP),HL         ; Save return,get code string
3101+ 3076 E5                   push    HL              ; Save code string address
3102+ 3077 C3 2D 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 307A
3104+ 307A E1           SSTSA:  pop     HL              ; Return address
3105+ 307B E3                   ex      (SP),HL         ; Get string block,save return
3106+ 307C 7E                   ld      A,(HL)          ; Get length of string
3107+ 307D 23                   inc     HL
3108+ 307E 23                   inc     HL
3109+ 307F 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 3080 23                   inc     HL
3111+ 3081 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 3082 6F                   ld      L,A             ; Length to L
3113+ 3083 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 3084 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 3085 C8                   ret     Z               ; End of string - Return
3116+ 3086 0A                   ld      A,(BC)          ; Get source
3117+ 3087 12                   ld      (DE),A          ; Save destination
3118+ 3088 03                   inc     BC              ; Next source
3119+ 3089 13                   inc     DE              ; Next destination
3120+ 308A C3 84 30             jp      TSALP           ; Loop until string moved
3121+ 308D
3122+ 308D CD 49 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 3090 2A 8B 61     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 3093 EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 3094 CD AE 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 3097 EB                   ex      DE,HL           ; Restore DE
3127+ 3098 C0                   ret     NZ              ; No - Return
3128+ 3099 D5                   push    DE              ; Save string
3129+ 309A 50                   ld      D,B             ; String block address to DE
3130+ 309B 59                   ld      E,C
3131+ 309C 1B                   dec     DE              ; Point to length
3132+ 309D 4E                   ld      C,(HL)          ; Get string length
3133+ 309E 2A 04 61             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 30A1 CD 65 23             call    CPDEHL          ; Last one in string area?
3135+ 30A4 C2 AC 30             jp      NZ,POPHL        ; No - Return
3136+ 30A7 47                   ld      B,A             ; Clear B (A=0)
3137+ 30A8 09                   add     HL,BC           ; Remove string from str' area
3138+ 30A9 22 04 61             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30AC E1           POPHL:  pop     HL              ; Restore string
3140+ 30AD C9                   ret
3141+ 30AE
3142+ 30AE 2A F2 60     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30B1 2B                   dec     HL              ; Back
3144+ 30B2 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30B3 2B                   dec     HL              ; Back
3146+ 30B4 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30B5 2B                   dec     HL              ; Back
3148+ 30B6 2B                   dec     HL              ; Back
3149+ 30B7 CD 65 23             call    CPDEHL          ; String last in string pool?
3150+ 30BA C0                   ret     NZ              ; Yes - Leave it
3151+ 30BB 22 F2 60             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 30BE C9                   ret
3153+ 30BF
3154+ 30BF 01 3E 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 30C2 C5                   push    BC              ; Save address
3156+ 30C3 CD 8D 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 30C6 AF                   xor     A
3158+ 30C7 57                   ld      D,A             ; Clear D
3159+ 30C8 32 C6 60             ld      (TYPE),A        ; Set type to numeric
3160+ 30CB 7E                   ld      A,(HL)          ; Get length of string
3161+ 30CC B7                   or      A               ; Set status flags
3162+ 30CD C9                   ret
3163+ 30CE
3164+ 30CE 01 3E 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 30D1 C5                   push    BC              ; Save address
3166+ 30D2 CD C3 30     GTFLNM: call    GETLEN          ; Get length of string
3167+ 30D5 CA 7F 26             jp      Z,FCERR         ; Null string - Error
3168+ 30D8 23                   inc     HL
3169+ 30D9 23                   inc     HL
3170+ 30DA 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 30DB 23                   inc     HL
3172+ 30DC 56                   ld      D,(HL)          ; Get MSB of address
3173+ 30DD 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 30DE C9                   ret
3175+ 30DF
3176+ 30DF 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 30E1 CD FC 2E             call    MKTMST          ; Make a temporary string
3178+ 30E4 CD CE 32             call    MAKINT          ; Make it integer A
3179+ 30E7 2A 02 61             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 30EA 73                   ld      (HL),E          ; Save character
3181+ 30EB C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 30EC C3 2D 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 30EF
3184+ 30EF CD 7E 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 30F2 AF                   xor     A               ; Start at first byte in string
3186+ 30F3 E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 30F4 4F                   ld      C,A             ; Starting position in string
3188+ 30F5 E5           MID1:   push    HL              ; Save string block address
3189+ 30F6 7E                   ld      A,(HL)          ; Get length of string
3190+ 30F7 B8                   cp      B               ; Compare with number given
3191+ 30F8 DA FD 30             jp      C,ALLFOL        ; All following bytes required
3192+ 30FB 78                   ld      A,B             ; Get new length
3193+ 30FC 11                   defb    $11             ; Skip "ld C,0"
3194+ 30FD 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 30FF C5                   push    BC              ; Save position in string
3196+ 3100 CD 66 2F             call    TESTR           ; See if enough string space
3197+ 3103 C1                   pop     BC              ; Get position in string
3198+ 3104 E1                   pop     HL              ; Restore string block address
3199+ 3105 E5                   push    HL              ; And re-save it
3200+ 3106 23                   inc     HL
3201+ 3107 23                   inc     HL
3202+ 3108 46                   ld      B,(HL)          ; Get LSB of address
3203+ 3109 23                   inc     HL
3204+ 310A 66                   ld      H,(HL)          ; Get MSB of address
3205+ 310B 68                   ld      L,B             ; HL = address of string
3206+ 310C 06 00                ld      B,$00           ; BC = starting address
3207+ 310E 09                   add     HL,BC           ; Point to that byte
3208+ 310F 44                   ld      B,H             ; BC = source string
3209+ 3110 4D                   ld      C,L
3210+ 3111 CD FF 2E             call    CRTMST          ; Create a string entry
3211+ 3114 6F                   ld      L,A             ; Length of new string
3212+ 3115 CD 83 30             call    TOSTRA          ; Move string to string area
3213+ 3118 D1                   pop     DE              ; Clear stack
3214+ 3119 CD 94 30             call    GSTRDE          ; Move to string pool if needed
3215+ 311C C3 2D 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 311F
3217+ 311F
3218+ 311F              ; INSTR statement - look for a string inside another string
3219+ 311F              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 311F              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 311F              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 311F              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 311F              LNS1    equ     TMPBFR1
3224+ 311F              ADRS1   equ     TMPBFR2
3225+ 311F              LNS2    equ     TMPBFR3
3226+ 311F              ADRS2   equ     TMPBFR4
3227+ 311F              PT      equ     VIDEOBUFF
3228+ 311F              PT1     equ     VIDEOBUFF+2
3229+ 311F              PT2     equ     VIDEOBUFF+4
3230+ 311F              TP      equ     VIDEOBUFF+6
3231+ 311F              TF      equ     VIDEOBUFF+8
3232+ 311F CD 6B 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 3122 28                   defb    '('
3234+ 3123 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 3124 CD B4 25             call    GETCHR          ; check if something follows
3236+ 3127 CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 312A CD 57 2A             call    EVAL            ; Evaluate expression
3238+ 312D CD 49 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3130 22 3F 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 3133 CD 90 30             call    GSTRCU          ; check that a string follows
3241+ 3136 CD A1 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 3139 ED 53 37 61          ld      (LNS1),DE       ; store values into
3243+ 313D ED 43 39 61          ld      (ADRS1),BC      ; temp buffers
3244+ 3141 2A 3F 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 3144 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3246+ 3147 2C                   defb    ','
3247+ 3148 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 3149 CD B4 25             call    GETCHR          ; check if something follows
3249+ 314C CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 314F CD 57 2A             call    EVAL            ; Evaluate expression
3251+ 3152 CD 49 2A             call    TSTSTR          ; Make sure it's a string
3252+ 3155 22 3F 61             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 3158 CD 90 30             call    GSTRCU          ; check that a string follows
3254+ 315B CD A1 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 315E ED 53 3B 61          ld      (LNS2),DE       ; store values into
3256+ 3162 ED 43 3D 61          ld      (ADRS2),BC      ; temp buffers
3257+ 3166 2A 3F 61             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 3169 CD 6B 23             call    CHKSYN          ; make sure ")" follows
3259+ 316C 29                   defb    ')'
3260+ 316D E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 316E FD E1                pop     IY              ; ...into IY
3262+ 3170 AF                   xor     A               ; reset 10 RAM cells
3263+ 3171 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 3173 21 3F 61             ld      HL,PT           ; first cell
3265+ 3176 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 3177 23                   inc     HL              ; next cell
3267+ 3178 10 FC                djnz    EMPTINS         ; repeat
3268+ 317A ED 5B 3B 61          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 317E 2A 37 61             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 3181 CD F8 4C             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 3184 DA F9 31             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 3187 AF           RPTINST:xor     A               ; reset...
3273+ 3188 32 45 61             ld      (TP),A          ; ...TP...
3274+ 318B 32 47 61             ld      (TF),A          ; ...and TF
3275+ 318E ED 4B 3F 61          ld      BC,(PT)         ; pointer to S1
3276+ 3192 2A 39 61             ld      HL,(ADRS1)      ; first cell of S1
3277+ 3195 09                   add     HL,BC           ; get current position into RAM
3278+ 3196 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 3197 2A 3D 61             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 319A BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 319B 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 319D 3A 3F 61             ld      A,(PT)          ; load current PT
3283+ 31A0 32 45 61             ld      (TP),A          ; TP=PT
3284+ 31A3 32 41 61             ld      (PT1),A         ; P1=PT
3285+ 31A6 AF                   xor     A               ; set...
3286+ 31A7 32 43 61             ld      (PT2),A         ; ...PT2=0
3287+ 31AA 3C                   inc     A               ;
3288+ 31AB 32 47 61             ld      (TF),A          ; set TF=1
3289+ 31AE ED 4B 41 61  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31B2 2A 39 61             ld      HL,(ADRS1)      ; load address of S1
3291+ 31B5 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31B6 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31B7 ED 4B 43 61          ld      BC,(PT2)        ; load pointer PT2
3294+ 31BB 2A 3D 61             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 31BE 09                   add     HL,BC           ; find S2(PT2)
3296+ 31BF BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 31C0 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 31C2 21 41 61             ld      HL,PT1
3299+ 31C5 34                   inc     (HL)            ; increment PT1
3300+ 31C6 3A 43 61             ld      A,(PT2)
3301+ 31C9 3C                   inc     A               ; increment PT2
3302+ 31CA 32 43 61             ld      (PT2),A
3303+ 31CD CA D7 31             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 31D0 21 3B 61             ld      HL,LNS2         ; len(S2)
3305+ 31D3 BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 31D4 DA AE 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 31D7 3A 47 61     CNT1INS:ld      A,(TF)          ; check TF
3308+ 31DA A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 31DB 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 31DD 2A 37 61             ld      HL,(LNS1)       ; load len(S1)
3311+ 31E0 ED 4B 3B 61          ld      BC,(LNS2)       ; load len(S2)
3312+ 31E4 ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 31E6 ED 5B 3F 61          ld      DE,(PT)         ; load pointer
3314+ 31EA 1C                   inc     E               ; PT=PT+1
3315+ 31EB ED 53 3F 61          ld      (PT),DE         ; store new value
3316+ 31EF EB                   ex      DE,HL           ; invert registers
3317+ 31F0 CD F8 4C             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 31F3 DA 87 31             jp      C,RPTINST       ; repeat if <
3319+ 31F6 CA 87 31             jp      Z,RPTINST       ; repeat if =
3320+ 31F9 3A 47 61     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 31FC A7                   and     A               ; is it 0?
3322+ 31FD CA 04 32             jp      Z,LVINSTR       ; yes, return 0
3323+ 3200 3A 45 61             ld      A,(TP)          ; return TP...
3324+ 3203 3C                   inc     A               ; ...incremented by 1
3325+ 3204 E1           LVINSTR:pop     HL              ; drop original return point
3326+ 3205 FD E5                push    IY              ; load current string address from IY into stack
3327+ 3207 11 30 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 320A D5                   push    DE              ; ...saved on stack
3329+ 320B C3 3E 2E             jp      PASSA           ; return TP
3330+ 320E AF           CNTZIN: xor     A               ; set...
3331+ 320F 32 47 61             ld      (TF),A          ; TF=0
3332+ 3212 C3 D7 31             jp      CNT1INS         ; continue
3333+ 3215
3334+ 3215
3335+ 3215              ; returns the right portion of a string
3336+ 3215 CD 7E 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 3218 D1                   pop     DE              ; Get string length
3338+ 3219 D5                   push    DE              ; And re-save
3339+ 321A 1A                   ld      A,(DE)          ; Get length
3340+ 321B 90                   sub     B               ; Move back N bytes
3341+ 321C C3 F3 30             jp      RIGHT1          ; Go and get sub-string
3342+ 321F
3343+ 321F              ; returns a piece of a string
3344+ 321F EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3220 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3221 CD 83 32             call    MIDNUM          ; Get number supplied
3347+ 3224 04                   inc     B               ; Is it character zero?
3348+ 3225 05                   dec     B
3349+ 3226 CA 7F 26             jp      Z,FCERR         ; Yes - Error
3350+ 3229 C5                   push    BC              ; Save starting position
3351+ 322A 1E FF                ld      E,$FF           ; All of string
3352+ 322C FE 29                cp      ')'             ; Any length given?
3353+ 322E CA 38 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3231 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3355+ 3234 2C                   defb    ','
3356+ 3235 CD CB 32             call    GETINT          ; Get integer 0-255
3357+ 3238 CD 6B 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 323B 29                   defb    ')'
3359+ 323C F1                   pop     AF              ; Restore starting position
3360+ 323D E3                   ex      (SP),HL         ; Get string,save code string
3361+ 323E 01 F5 30             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3241 C5                   push    BC              ; Save for return
3363+ 3242 3D                   dec     A               ; Starting position-1
3364+ 3243 BE                   cp      (HL)            ; Compare with length
3365+ 3244 06 00                ld      B,$00           ; Zero bytes length
3366+ 3246 D0                   ret     NC              ; Null string if start past end
3367+ 3247 4F                   ld      C,A             ; Save starting position-1
3368+ 3248 7E                   ld      A,(HL)          ; Get length of string
3369+ 3249 91                   sub     C               ; Subtract start
3370+ 324A BB                   cp      E               ; Enough string for it?
3371+ 324B 47                   ld      B,A             ; Save maximum length available
3372+ 324C D8                   ret     C               ; Truncate string if needed
3373+ 324D 43                   ld      B,E             ; Set specified length
3374+ 324E C9                   ret                     ; Go and create string
3375+ 324F
3376+ 324F
3377+ 324F              ; return the value of a numeric string
3378+ 324F CD C3 30     VAL:    call    GETLEN          ; Get length of string
3379+ 3252 CA 21 36             jp      Z,RESZER        ; Result zero
3380+ 3255 5F                   ld      E,A             ; Save length
3381+ 3256 23                   inc     HL
3382+ 3257 23                   inc     HL
3383+ 3258 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 3259 23                   inc     HL
3385+ 325A 66                   ld      H,(HL)          ; Get MSB of address
3386+ 325B 6F                   ld      L,A             ; HL = String address
3387+ 325C E5                   push    HL              ; Save string address
3388+ 325D 19                   add     HL,DE
3389+ 325E 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 325F 72                   ld      (HL),D          ; Zero it to terminate
3391+ 3260 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 3261 C5                   push    BC              ; Save end+1 byte
3393+ 3262 7E                   ld      A,(HL)          ; Get starting byte
3394+ 3263 FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 3265 C2 6D 32             jp      NZ,VAL1
3396+ 3268 CD 2A 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 326B 18 0D                jr      VAL3
3398+ 326D FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 326F C2 77 32             jp      NZ,VAL2
3400+ 3272 CD 9A 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 3275 18 03                jr      VAL3
3402+ 3277 CD 59 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 327A C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 327B E1                   pop     HL              ; Restore end+1 address
3405+ 327C 70                   ld      (HL),B          ; Put back original byte
3406+ 327D C9                   ret
3407+ 327E
3408+ 327E EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 327F CD 6B 23             call    CHKSYN          ; Make sure ")" follows
3410+ 3282 29                   defb    ')'
3411+ 3283 C1           MIDNUM: pop     BC              ; Get return address
3412+ 3284 D1                   pop     DE              ; Get number supplied
3413+ 3285 C5                   push    BC              ; Re-save return address
3414+ 3286 43                   ld      B,E             ; Number to B
3415+ 3287 C9                   ret
3416+ 3288
3417+ 3288 CD CE 32     INP:    call    MAKINT          ; Make it integer A
3418+ 328B 32 D2 5F             ld      (INPORT),A      ; Set input port
3419+ 328E CD D1 5F             call    INPSUB          ; Get input from port
3420+ 3291 C3 3E 2E             jp      PASSA           ; Return integer A
3421+ 3294
3422+ 3294 CD B8 32     POUT:   call    SETIO           ; Set up port number
3423+ 3297 C3 99 5F             jp      OUTSUB          ; Output data and return
3424+ 329A
3425+ 329A CD B8 32     WAIT:   call    SETIO           ; Set up port number
3426+ 329D F5                   push    AF              ; Save AND mask
3427+ 329E 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 32A0 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 32A1 CD B4 25             call    GETCHR          ; Get next character
3430+ 32A4 CA AE 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 32A7 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3432+ 32AA 2C                   defb    ','
3433+ 32AB CD CB 32             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32AE C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32AF CD D1 5F     WAITLP: call    INPSUB          ; Get input
3436+ 32B2 AB                   xor     E               ; Flip selected bits
3437+ 32B3 A0                   and     B               ; Result non-zero?
3438+ 32B4 CA AF 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32B7 C9                   ret
3440+ 32B8
3441+ 32B8 CD CB 32     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 32BB 32 D2 5F             ld      (INPORT),A      ; Set input port
3443+ 32BE 32 9A 5F             ld      (OTPORT),A      ; Set output port
3444+ 32C1 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3445+ 32C4 2C                   defb    ','
3446+ 32C5 C3 CB 32             jp      GETINT          ; Get integer 0-255 and return
3447+ 32C8
3448+ 32C8 CD B4 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 32CB CD 45 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 32CE CD 64 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 32D1 7A                   ld      A,D             ; Get MSB of number
3452+ 32D2 B7                   or      A               ; Zero?
3453+ 32D3 C2 7F 26             jp      NZ,FCERR        ; No - Error
3454+ 32D6 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 32D7 CD B4 25             call    GETCHR          ; Get next character
3456+ 32DA 7B                   ld      A,E             ; Get number to A
3457+ 32DB C9                   ret
3458+ 32DC
3459+ 32DC
3460+ 32DC              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 32DC              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 32DC CD 45 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 32DF CD 6A 26             call    DEINT           ; get integer -32768 to 32767
3464+ 32E2 7B                   ld      A,E             ; check if address is 0
3465+ 32E3 B2                   or      D
3466+ 32E4 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 32E6 F3           DISNMI: di                      ; disable INTs
3468+ 32E7 CD 13 33             call    NMIDINT         ; disable VDP INT
3469+ 32EA E5                   push    HL              ; store HL
3470+ 32EB 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 32EE 22 93 5F             ld      (NMIUSR),HL     ; store RETN
3472+ 32F1 AF                   xor     A
3473+ 32F2 32 95 5F             ld      (NMIUSR+2),A    ; "NOP"
3474+ 32F5 18 11                jr      NMI2            ; execute the last part of code
3475+ 32F7 E5           NM1:    push    HL              ; store current HL
3476+ 32F8 EB                   ex      DE,HL           ; move address argument into HL
3477+ 32F9 F3                   di                      ; disable INTs
3478+ 32FA CD 13 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 32FD 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 32FF 32 93 5F             ld      (NMIUSR),A      ; store it
3481+ 3302 22 94 5F             ld      (NMIUSR+1),HL   ; store address
3482+ 3305 CD 0C 33             call    NMIEINT         ; re-enable VDP INT
3483+ 3308 FB           NMI2:   ei                      ; re-enable INTS
3484+ 3309 00                   nop                     ; wait for INTs
3485+ 330A E1                   pop    HL               ; retrieve HL
3486+ 330B C9                   ret                     ; return to caller
3487+ 330C              ; enable VDP INT
3488+ 330C CD 22 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 330F F6 20                or      %00100000       ; enable VDP INT
3490+ 3311 18 03                jr      NMIINT          ; rest of code is shared
3491+ 3313              ; disable VDP INT
3492+ 3313 CD 22 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 3316 D5           NMIINT: push    DE              ; store DE
3494+ 3317 5F                   ld      E,A             ; move value into E
3495+ 3318 3E 01                ld      A,$01           ; VREG #1
3496+ 331A F3                   di                      ; disable INTs
3497+ 331B CD B0 06             call    WRITE_VREG      ; disable VDP INT
3498+ 331E FB                   ei                      ; re-enable INTs
3499+ 331F 00                   nop                     ; wait for INTs being enabled
3500+ 3320 D1                   pop     DE              ; retrieve DE
3501+ 3321 C9                   ret                     ; return to caller
3502+ 3322
3503+ 3322              ; load VREG #1 setting for current screen mode and return it into A
3504+ 3322 E5           NMIVR1: push    HL              ; store HL
3505+ 3323 D5                   push    DE              ; store DE
3506+ 3324 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
3507+ 3327 87                   add     A,A             ; multiply A by 8...
3508+ 3328 87                   add     A,A             ; ...so that reg. A can points..
3509+ 3329 87                   add     A,A             ; to the correct settings
3510+ 332A 3C                   inc     A               ; need to change VREG 1
3511+ 332B 5F                   ld      E,A             ; copy A into E
3512+ 332C 16 00                ld      D,$00           ; reset D
3513+ 332E 21 1F 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3331 19                   add     HL,DE           ; ...for current screen mode
3515+ 3332 7E                   ld      A,(HL)          ; load current setting
3516+ 3333 D1                   pop     DE              ; retrieve DE
3517+ 3334 E1                   pop     HL              ; retrieve HL
3518+ 3335 C9                   ret                     ; return to caller
3519+ 3336
3520+ 3336              ; execute a machine language routine, eventually passing a param into A
3521+ 3336 CD 45 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 3339 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 333C ED 53 39 61          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3340 AF                   xor     A               ; reset A
3525+ 3341 32 37 61             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 3344 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 3345 CD B4 25             call    GETCHR          ; check next character
3528+ 3348 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 334A CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3530+ 334D 2C                   defb    ','
3531+ 334E CD CB 32             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3351 32 37 61             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 3354 3A 37 61     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 3357 ED 5B 39 61          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 335B E5                   push    HL              ; save code string address
3536+ 335C EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 335D 11 62 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 3360 D5                   push    DE              ; store into stack
3539+ 3361 E9                   jp      (HL)            ; call user routine
3540+ 3362 E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 3363 C9                   ret                     ; return to caller
3542+ 3364
3543+ 3364
3544+ 3364              ; read the contents of a RAM location
3545+ 3364 CD 6A 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 3367 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 3368 C3 3E 2E             jp      PASSA           ; Return into A
3548+ 336B
3549+ 336B              ; read the contents of a VRAM location
3550+ 336B CD 6A 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 336E EB                   ex      DE,HL           ; Copy param into HL
3552+ 336F F3                   di                      ; Disable interrupts
3553+ 3370 CD 86 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 3373 FB                   ei                      ; Re-enable interrupts
3555+ 3374 EB                   ex      DE,HL           ; Restore HL
3556+ 3375 C3 3E 2E             jp      PASSA           ; Return value into A
3557+ 3378
3558+ 3378              ; recover params for POKE/VPOKE commands
3559+ 3378              ; returns address into DE and byte to be written into A
3560+ 3378 CD 45 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 337B CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 337E ED 53 37 61          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 3382 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3564+ 3385 2C                   defb    ','
3565+ 3386 CD CB 32             call    GETINT          ; Get integer 0-255
3566+ 3389 ED 5B 37 61          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 338D C9                   ret                     ; Return to caller
3568+ 338E
3569+ 338E              ; write a byte into a RAM location
3570+ 338E CD 78 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 3391 12                   ld      (DE),A          ; Load it into memory
3572+ 3392 C9                   ret
3573+ 3393
3574+ 3393              ; write a byte into a VRAM location
3575+ 3393 CD 78 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 3396 EB                   ex      DE,HL           ; Copy address into HL
3577+ 3397 F3                   di                      ; Disable interrupts
3578+ 3398 CD 9B 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 339B FB                   ei                      ; Re-enable interrupts
3580+ 339C EB                   ex      DE,HL           ; Restore HL
3581+ 339D C9                   ret                     ; Return to caller
3582+ 339E
3583+ 339E              ; position the cursor at a specific X,Y location onto screen
3584+ 339E CD CB 32     LOCATE: call    GETINT          ; get the first param into A
3585+ 33A1 E5                   push    HL              ; store HL
3586+ 33A2 21 27 61             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 33A5 5E                   ld      E,(HL)          ; load screen width into E
3588+ 33A6 E1                   pop     HL              ; restore HL
3589+ 33A7 BB                   cp      E               ; compare witdh with param
3590+ 33A8 D2 7F 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 33AB 32 37 61             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33AE CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33B1 2C                   defb    ','
3594+ 33B2 CD CB 32             call    GETINT          ; Get the second param into A
3595+ 33B5 E5                   push    HL              ; store HL
3596+ 33B6 21 28 61             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33B9 5E                   ld      E,(HL)          ; load screen width into A
3598+ 33BA E1                   pop     HL              ; restore HL
3599+ 33BB BB                   cp      E               ; compare witdh with param
3600+ 33BC D2 7F 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 33BF 32 2F 61             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 33C2 3A 37 61             ld      A,(TMPBFR1)     ; recover the new X
3603+ 33C5 32 2E 61             ld      (SCR_CUR_NX),A  ; store new X
3604+ 33C8 E5                   push    HL              ; store HL
3605+ 33C9 F3                   di                      ; disable INTs
3606+ 33CA CD CC 06             call    MOVCRS          ; move cursor to new location
3607+ 33CD FB                   ei                      ; re-enable INTs
3608+ 33CE E1                   pop     HL              ; restore HL
3609+ 33CF C9                   ret                     ; return to caller
3610+ 33D0
3611+ 33D0              ; write a byte into one of the PSG registers
3612+ 33D0 CD CB 32     SREG:   call    GETINT          ; Get register number back into A
3613+ 33D3 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 33D5 D2 7F 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 33D8 32 37 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 33DB CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3617+ 33DE 2C                   defb    ','
3618+ 33DF CD CB 32             call    GETINT          ; get second value (0-255), returned into A
3619+ 33E2 5F                   ld      E,A             ; store value into E
3620+ 33E3 3A 37 61             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 33E6 F3                   di                      ; disable INTs
3622+ 33E7 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 33E9 ED 79                out     (C),A           ; send register # to PSG
3624+ 33EB 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 33ED ED 59                out     (C),E           ; send byte to write into selected register
3626+ 33EF FB                   ei                      ; re-enable INTs
3627+ 33F0 C9                   ret                     ; return to caller
3628+ 33F1
3629+ 33F1              ; VOLUME ch,vol
3630+ 33F1              ; set the volume for the audio channels
3631+ 33F1              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 33F1 CD CB 32     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 33F4 FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 33F6 D2 7F 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 33F9 32 37 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 33FC CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3637+ 33FF 2C                   defb    ','
3638+ 3400 CD CB 32             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 3403 FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 3405 D2 7F 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 3408 57                   ld      D,A             ; store volume into D
3642+ 3409 3A 37 61             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 340C A7                   and     A               ; is it 0? (0=every channel)
3644+ 340D 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 340F 06 03                ld      B,$03           ; yes, set every channel
3646+ 3411 1E 08                ld      E,$08           ; register volume of first channel
3647+ 3413 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 3415 ED 59                out     (C),E           ; set register #
3649+ 3417 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 3419 ED 51                out     (C),D           ; send volume
3651+ 341B 1C                   inc     E               ; next register
3652+ 341C 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 341E C9                   ret                     ; return to caller
3654+ 341F 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3421 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 3423 ED 79                out     (C),A           ; set register
3657+ 3425 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 3427 ED 51                out     (C),D           ; send volume level
3659+ 3429 C9                   ret                     ; return to caller
3660+ 342A
3661+ 342A              ; SOUND ch,tone,dur
3662+ 342A              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 342A              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 342A              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 342A CD CB 32     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 342D A7                   and     A               ; is it zero?
3667+ 342E 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3430 E5                   push    HL              ; store HL
3669+ 3431 F3                   di                      ; disable INTs
3670+ 3432 CD 91 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 3435 FB                   ei                      ; re-enable INTs
3672+ 3436 E1                   pop     HL              ; retrieve HL
3673+ 3437 C9                   ret                     ; return to caller
3674+ 3438 32 37 61     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 343B FE 04                cp      $04             ; is channel >3?
3676+ 343D D2 BC 34             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3440 CD 6B 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 3443 2C                   defb    ','
3679+ 3444 CD 45 2A             call    GETNUM          ; Get tone frequency
3680+ 3447 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 344A ED 53 39 61          ld      (TMPBFR2),DE    ; Store frequency
3682+ 344E CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3451 2C                   defb    ','
3684+ 3452 CD 45 2A             call    GETNUM          ; Get duration
3685+ 3455 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 3458 ED 53 3B 61          ld      (TMPBFR3),DE    ; Store duration
3687+ 345C                                              ; CHECK CHANNEL
3688+ 345C 3A 37 61             ld      A,(TMPBFR1)     ; recover channel
3689+ 345F FE 01                cp      $01             ; is channel <1?
3690+ 3461 DA 7F 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 3464                                              ; CHECK FREQUENCY
3692+ 3464 ED 5B 39 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 3468 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 3469 FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 346B D2 7F 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 346E                                              ; CHECK DURATION
3697+ 346E ED 5B 3B 61          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 3472 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 3473 E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 3475 C2 7F 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 3478                                              ;
3702+ 3478                                              ; SET TONE:
3703+ 3478                                              ; let's start by setting up the channel
3704+ 3478 3A 37 61             ld      A,(TMPBFR1)     ; restore channel value
3705+ 347B FE 03                cp      $03             ; is it 3?
3706+ 347D 20 02                jr      NZ,SND1         ; no, jump over
3707+ 347F 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 3481 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 3482 CD 09 35             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 3485                                              ; SET FREQUENCY
3711+ 3485                                              ; we simply get frequency and subtract from 4096. The result
3712+ 3485                                              ; is put into register pair of the corresponding freq tone channel
3713+ 3485 ED 5B 39 61          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 3489 E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 348A 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 348D A7                   and     A               ; reset C flag
3717+ 348E ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 3490 3A 37 61             ld      A,(TMPBFR1)     ; restore channel value
3719+ 3493 3D                   dec     A               ; set A into the range 0~2
3720+ 3494 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 3495 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 3497 ED 79                out     (C),A           ; select first register of the pair
3723+ 3499 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 349B ED 69                out     (C),L           ; send high byte
3725+ 349D 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 349F 3C                   inc     A               ; second register of the pair
3727+ 34A0 ED 79                out     (C),A           ; select register
3728+ 34A2 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 34A4 ED 61                out     (C),H           ; send low byte
3730+ 34A6 ED 5B 3B 61          ld      DE,(TMPBFR3)    ; recover duration
3731+ 34AA 3A 37 61             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34AD 3D                   dec     A               ; set channel into the range 0~2
3733+ 34AE 87                   add     A,A             ; double A to find the correct offset
3734+ 34AF 21 6B 61             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34B2 85                   add     A,L             ; ...the proper...
3736+ 34B3 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34B5 24                   inc     H               ; yes, increment H)
3738+ 34B6 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34B7 73                   ld      (HL),E          ; ...and store the value
3740+ 34B8 23                   inc     HL
3741+ 34B9 72                   ld      (HL),D
3742+ 34BA E1                   pop     HL              ; retrieve HL
3743+ 34BB C9                   ret                     ; Return to caller
3744+ 34BC FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 34BE D2 7F 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 34C1 CD 6B 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 34C4 2C                   defb    ','
3748+ 34C5 CD CB 32             call    GETINT          ; get integer 0-255 (frequency)
3749+ 34C8 FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 34CA D2 7F 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 34CD 32 39 61             ld      (TMPBFR2),A     ; store freq.
3752+ 34D0 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 34D1 CD B4 25             call    GETCHR          ; check that nothing follows
3754+ 34D4 C2 6B 20             jp      NZ,SNERR        ; error if no empty line
3755+ 34D7 3A 39 61             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 34DA 5F                   ld      E,A             ; store freq into E
3757+ 34DB 3A 37 61             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 34DE D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 34E0 FE 03                cp      $03             ; is it 3?
3760+ 34E2 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 34E4 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 34E6 87           NOS1:   add     A,A
3763+ 34E7 87                   add     A,A
3764+ 34E8 87                   add     A,A             ; let's move A 3 bits to left
3765+ 34E9 47                   ld      B,A             ; store channel into B
3766+ 34EA 7B                   ld      A,E             ; check if
3767+ 34EB A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 34EC F3                   di                      ; disable INts
3769+ 34ED 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 34EF 3E 07                ld      A,$07           ; mixer register
3771+ 34F1 CD DF 0C             call    SETSNDREG       ; set mixer register
3772+ 34F4 ED 78                in      A,(C)           ; load current mixer value
3773+ 34F6 B0                   or      B               ; disable noise
3774+ 34F7 18 19                jr      NOS3            ; continue over
3775+ 34F9 78           NOS2:   ld      A,B             ; recover channel
3776+ 34FA 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 34FB CD 09 35             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 34FE 3E 06                ld      A,$06           ; write into noise register
3779+ 3500 CD DF 0C             call    SETSNDREG       ; set register into PSG
3780+ 3503 7B                   ld      A,E             ; load value for noise frequency
3781+ 3504 CD E4 0C             call    WRTSNDREG       ; write data into register $06
3782+ 3507 FB                   ei                      ; re-enable INTs
3783+ 3508 C9                   ret
3784+ 3509                      ; enable line into mixer of channel stored in A
3785+ 3509 47           WRTSND: ld      B,A             ; move channel into B
3786+ 350A 3E 07                ld      A,$07           ; mixer register
3787+ 350C CD DF 0C             call    SETSNDREG       ; set mixer register
3788+ 350F ED 78                in      A,(C)           ; load current value
3789+ 3511 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 3512                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 3512                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 3512                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 3512                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 3512 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 3513 3E 07                ld      A,$07           ; mixer address
3796+ 3515 CD DF 0C             call    SETSNDREG       ; set register
3797+ 3518 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 3519 CD E4 0C             call    WRTSNDREG       ; send new value for the mixer
3799+ 351C FB                   ei                      ; re-enable INTs
3800+ 351D C9                   ret                     ; return to caller
3801+ 351E
3802+ 351E              ; write a byte into one of the VDP registers
3803+ 351E CD CB 32     VREG:   call    GETINT          ; Get register number back into A
3804+ 3521 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 3523 D2 7F 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 3526 32 37 61             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 3529 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
3808+ 352C 2C                   defb    ','
3809+ 352D CD CB 32             call    GETINT          ; get value (0-255)
3810+ 3530 5F                   ld      E,A             ; store value into E
3811+ 3531 3A 37 61             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 3534 F3                   di                      ; disable INTs
3813+ 3535 CD B0 06             call    WRITE_VREG      ; write value into VDP register
3814+ 3538 FB                   ei                      ; re-enable INTs
3815+ 3539 C9                   ret                     ; return to caller
3816+ 353A
3817+ 353A              ; read the VDP status register and return it into A
3818+ 353A CD 6A 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 353D F3                   di                      ; disable INTs
3820+ 353E CD BB 06             call    READ_VSTAT      ; read VDP register status
3821+ 3541 FB                   ei                      ; re-enable INTs
3822+ 3542 C3 3E 2E             jp      PASSA           ; Return integer A
3823+ 3545
3824+ 3545              ; read from PSG register and return it into A
3825+ 3545 CD 6A 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 3548 7B                   ld      A,E             ; consider LSB
3827+ 3549 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 354B D2 7F 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 354E F3                   di                      ; disable INts
3830+ 354F 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3551 ED 79                out     (C),A           ; send register to read from
3832+ 3553 ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 3555 FB                   ei                      ; re-enable INTs
3834+ 3556 C3 3E 2E             jp      PASSA           ; return A
3835+ 3559
3836+ 3559              ; read the temp key buffer and return the value of the current key being pressed
3837+ 3559              ; can wait for the number of 100thds of second before to return
3838+ 3559 CD B8 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 355C CD 6A 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 355F C5                   push    BC              ; store BC
3841+ 3560 3A 17 61             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 3563 47                   ld      B,A             ; move it into B
3843+ 3564 3A 17 61     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 3567 B8                   cp      B               ; ...to let the sniffer collect...
3845+ 3568 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 356A 7A                   ld      A,D             ; check the param
3847+ 356B B3                   or      E               ; if DE<>0 then...
3848+ 356C 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 356E 3A 73 61             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 3571 18 2A                jr      ENDINK          ; ...return it
3851+ 3573 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 3574 FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 3576 D2 7F 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 3579 E5                   push    HL              ; store HL
3855+ 357A 21 09 00             ld      HL,$0009        ; check if value
3856+ 357D CD F8 4C             call    CMP16           ; is < 10
3857+ 3580 E1                   pop     HL              ; retrieve HL
3858+ 3581 DA 87 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 3584 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 3587 3A 17 61     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 358A 47                   ld      B,A             ; move it into B
3862+ 358B 3A 73 61     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 358E A7                   and     A               ; is it 0?
3864+ 358F 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 3591 3A 17 61             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 3594 B8                   cp      B               ; is it the same value?
3867+ 3595 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 3597 47                   ld      B,A             ; store new value
3869+ 3598 1B                   dec     DE              ; no, decrement timer
3870+ 3599 7A                   ld      A,D             ; check if zero reached
3871+ 359A B3                   or      E               ; by ORing D and E
3872+ 359B 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 359D C1           ENDINK: pop     BC              ; restore BC
3874+ 359E F5                   push    AF              ; store A
3875+ 359F F3                   di                      ; disable INTs
3876+ 35A0 AF                   xor     A               ; clear the...
3877+ 35A1 32 73 61             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 35A4 FB                   ei                      ; re-enable INTs
3879+ 35A5 F1                   pop     AF              ; retrieve A
3880+ 35A6 C3 3E 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 35A9
3882+ 35A9
3883+ 35A9 21 D0 3A     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35AC CD A1 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35AF C3 BB 35             jp      FPADD           ; Add BCDE to FPREG
3886+ 35B2
3887+ 35B2
3888+ 35B2 CD A1 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35B5 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35B6 C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35B7 D1                   pop     DE
3892+ 35B8 CD 7B 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 35BB 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 35BC B7                   or      A               ; Is number zero?
3895+ 35BD C8                   ret     Z               ; Yes - Nothing to add
3896+ 35BE 3A 8E 61             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 35C1 B7                   or      A               ; Is this number zero?
3898+ 35C2 CA 93 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 35C5 90                   sub     B               ; BCDE number larger?
3900+ 35C6 D2 D5 35             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 35C9 2F                   cpl                     ; Two's complement
3902+ 35CA 3C                   inc     A               ;  FP exponent
3903+ 35CB EB                   ex      DE,HL
3904+ 35CC CD 83 38             call    STAKFP          ; Put FPREG on stack
3905+ 35CF EB                   ex      DE,HL
3906+ 35D0 CD 93 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 35D3 C1                   pop     BC              ; Restore number from stack
3908+ 35D4 D1                   pop     DE
3909+ 35D5 FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 35D7 D0                   ret     NC              ; Yes - First number is result
3911+ 35D8 F5                   push    AF              ; Save number of bits to scale
3912+ 35D9 CD B8 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 35DC 67                   ld      H,A             ; Save sign of result
3914+ 35DD F1                   pop     AF              ; Restore scaling factor
3915+ 35DE CD 80 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 35E1 B4                   or      H               ; Result to be positive?
3917+ 35E2 21 8B 61             ld      HL,FPREG        ; Point to FPREG
3918+ 35E5 F2 FB 35             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 35E8 CD 60 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 35EB D2 41 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 35EE 23                   inc     HL              ; Point to exponent
3922+ 35EF 34                   inc     (HL)            ; Increment it
3923+ 35F0 CA 7A 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 35F3 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 35F5 CD 96 36             call    SHRT1           ; Shift result right
3926+ 35F8 C3 41 36             jp      RONDUP          ; Round it up
3927+ 35FB
3928+ 35FB AF           MINCDE: xor     A               ; Clear A and carry
3929+ 35FC 90                   sub     B               ; Negate exponent
3930+ 35FD 47                   ld      B,A             ; Re-save exponent
3931+ 35FE 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 35FF 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 3600 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 3601 23                   inc     HL
3935+ 3602 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 3603 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 3604 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 3605 23                   inc     HL
3939+ 3606 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 3607 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 3608 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 3609 DC 6C 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 360C
3944+ 360C 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 360D 63                   ld      H,E             ; H = LSB
3946+ 360E AF                   xor     A
3947+ 360F 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3610 79                   ld      A,C             ; Get MSB
3949+ 3611 B7                   or      A               ; Is it zero?
3950+ 3612 C2 2E 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 3615 4A                   ld      C,D             ; MSB = NMSB
3952+ 3616 54                   ld      D,H             ; NMSB= LSB
3953+ 3617 65                   ld      H,L             ; LSB = VLSB
3954+ 3618 6F                   ld      L,A             ; VLSB= 0
3955+ 3619 78                   ld      A,B             ; Get exponent
3956+ 361A D6 08                sub     $08             ; Count 8 bits
3957+ 361C FE E0                cp      -24-8           ; Was number zero?
3958+ 361E C2 0F 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3621 AF           RESZER: xor     A               ; Result is zero
3960+ 3622 32 8E 61     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 3625 C9                   ret
3962+ 3626
3963+ 3626 05           NORMAL: dec     B               ; Count bits
3964+ 3627 29                   add     HL,HL           ; Shift HL left
3965+ 3628 7A                   ld      A,D             ; Get NMSB
3966+ 3629 17                   rla                     ; Shift left with last bit
3967+ 362A 57                   ld      D,A             ; Save NMSB
3968+ 362B 79                   ld      A,C             ; Get MSB
3969+ 362C 8F                   adc     A,A             ; Shift left with last bit
3970+ 362D 4F                   ld      C,A             ; Save MSB
3971+ 362E F2 26 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3631 78                   ld      A,B             ; Number of bits shifted
3973+ 3632 5C                   ld      E,H             ; Save HL in EB
3974+ 3633 45                   ld      B,L
3975+ 3634 B7                   or      A               ; Any shifting done?
3976+ 3635 CA 41 36             jp      Z,RONDUP        ; No - Round it up
3977+ 3638 21 8E 61             ld      HL,FPEXP        ; Point to exponent
3978+ 363B 86                   add     A,(HL)          ; Add shifted bits
3979+ 363C 77                   ld      (HL),A          ; Re-save exponent
3980+ 363D D2 21 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3640 C8                   ret     Z               ; Result is zero
3982+ 3641 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 3642 21 8E 61     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 3645 B7                   or      A               ; Any rounding?
3985+ 3646 FC 53 36             call    M,FPROND        ; Yes - Round number up
3986+ 3649 46                   ld      B,(HL)          ; B = Exponent
3987+ 364A 23                   inc     HL
3988+ 364B 7E                   ld      A,(HL)          ; Get sign of result
3989+ 364C E6 80                and     %10000000       ; Only bit 7 needed
3990+ 364E A9                   xor     C               ; Set correct sign
3991+ 364F 4F                   ld      C,A             ; Save correct sign in number
3992+ 3650 C3 93 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 3653
3994+ 3653 1C           FPROND: inc     E               ; Round LSB
3995+ 3654 C0                   ret     NZ              ; Return if ok
3996+ 3655 14                   inc     D               ; Round NMSB
3997+ 3656 C0                   ret     NZ              ; Return if ok
3998+ 3657 0C                   inc     C               ; Round MSB
3999+ 3658 C0                   ret     NZ              ; Return if ok
4000+ 3659 0E 80                ld      C,$80           ; Set normal value
4001+ 365B 34                   inc     (HL)            ; Increment exponent
4002+ 365C C0                   ret     NZ              ; Return if ok
4003+ 365D C3 7A 20             jp      OVERR           ; Overflow error
4004+ 3660
4005+ 3660 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 3661 83                   add     A,E             ; Add LSB of BCDE
4007+ 3662 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 3663 23                   inc     HL
4009+ 3664 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 3665 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 3666 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 3667 23                   inc     HL
4013+ 3668 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 3669 89                   adc     A,C             ; Add MSB of BCDE
4015+ 366A 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 366B C9                   ret
4017+ 366C
4018+ 366C 21 8F 61     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 366F 7E                   ld      A,(HL)          ; Get sign of result
4020+ 3670 2F                   cpl                     ; Negate it
4021+ 3671 77                   ld      (HL),A          ; Put it back
4022+ 3672 AF                   xor     A
4023+ 3673 6F                   ld      L,A             ; Set L to zero
4024+ 3674 90                   sub     B               ; Negate exponent,set carry
4025+ 3675 47                   ld      B,A             ; Re-save exponent
4026+ 3676 7D                   ld      A,L             ; Load zero
4027+ 3677 9B                   sbc     A,E             ; Negate LSB
4028+ 3678 5F                   ld      E,A             ; Re-save LSB
4029+ 3679 7D                   ld      A,L             ; Load zero
4030+ 367A 9A                   sbc     A,D             ; Negate NMSB
4031+ 367B 57                   ld      D,A             ; Re-save NMSB
4032+ 367C 7D                   ld      A,L             ; Load zero
4033+ 367D 99                   sbc     A,C             ; Negate MSB
4034+ 367E 4F                   ld      C,A             ; Re-save MSB
4035+ 367F C9                   ret
4036+ 3680
4037+ 3680 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 3682 D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 3684 DA 8F 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 3687 43                   ld      B,E             ; <- Shift
4041+ 3688 5A                   ld      E,D             ; <- right
4042+ 3689 51                   ld      D,C             ; <- eight
4043+ 368A 0E 00                ld      C,$00           ; <- bits
4044+ 368C C3 82 36             jp      SCALLP          ; More bits to shift
4045+ 368F
4046+ 368F C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 3691 6F                   ld      L,A             ; Save bits to shift
4048+ 3692 AF           SHRLP:  xor     A               ; Flag for all done
4049+ 3693 2D                   dec     L               ; All shifting done?
4050+ 3694 C8                   ret     Z               ; Yes - Return
4051+ 3695 79                   ld      A,C             ; Get MSB
4052+ 3696 1F           SHRT1:  rra                     ; Shift it right
4053+ 3697 4F                   ld      C,A             ; Re-save
4054+ 3698 7A                   ld      A,D             ; Get NMSB
4055+ 3699 1F                   rra                     ; Shift right with last bit
4056+ 369A 57                   ld      D,A             ; Re-save it
4057+ 369B 7B                   ld      A,E             ; Get LSB
4058+ 369C 1F                   rra                     ; Shift right with last bit
4059+ 369D 5F                   ld      E,A             ; Re-save it
4060+ 369E 78                   ld      A,B             ; Get underflow
4061+ 369F 1F                   rra                     ; Shift right with last bit
4062+ 36A0 47                   ld      B,A             ; Re-save underflow
4063+ 36A1 C3 92 36             jp      SHRLP           ; More bits to do
4064+ 36A4
4065+ 36A4 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 36A8
4067+ 36A8 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 36A9 AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36AD F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36B1 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36B5
4072+ 36B5 CD 52 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36B8 B7                   or      A
4074+ 36B9 EA 7F 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 36BC 21 8E 61             ld      HL,FPEXP        ; Point to exponent
4076+ 36BF 7E                   ld      A,(HL)          ; Get exponent
4077+ 36C0 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 36C3 11 F3 04             ld      DE,$04F3
4079+ 36C6 90                   sub     B               ; Scale value to be < 1
4080+ 36C7 F5                   push    AF              ; Save scale factor
4081+ 36C8 70                   ld      (HL),B          ; Save new exponent
4082+ 36C9 D5                   push    DE              ; Save SQR(1/2)
4083+ 36CA C5                   push    BC
4084+ 36CB CD BB 35             call    FPADD           ; Add SQR(1/2) to value
4085+ 36CE C1                   pop     BC              ; Restore SQR(1/2)
4086+ 36CF D1                   pop     DE
4087+ 36D0 04                   inc     B               ; Make it SQR(2)
4088+ 36D1 CD A8 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 36D4 21 A4 36             ld      HL,UNITY        ; Point to 1.
4090+ 36D7 CD B2 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 36DA 21 A8 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 36DD CD 9A 3B             call    SUMSER          ; Evaluate sum of series
4093+ 36E0 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 36E3 11 00 00             ld      DE,$0000
4095+ 36E6 CD BB 35             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 36E9 F1                   pop     AF              ; Restore scale factor
4097+ 36EA CD CD 39             call    RSCALE          ; Re-scale number
4098+ 36ED 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 36F0 11 18 72             ld      DE,$7218
4100+ 36F3 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 36F4
4102+ 36F4 C1           MULT:   pop     BC              ; Get number from stack
4103+ 36F5 D1                   pop     DE
4104+ 36F6 CD 52 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 36F9 C8                   ret     Z               ; Return zero if zero
4106+ 36FA 2E 00                ld      L,$00           ; Flag add exponents
4107+ 36FC CD 10 38             call    ADDEXP          ; Add exponents
4108+ 36FF 79                   ld      A,C             ; Get MSB of multiplier
4109+ 3700 32 9D 61             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 3703 EB                   ex      DE,HL
4111+ 3704 22 9E 61             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 3707 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 370A 50                   ld      D,B
4114+ 370B 58                   ld      E,B
4115+ 370C 21 0C 36             ld      HL,BNORM        ; Address of normalise
4116+ 370F E5                   push    HL              ; Save for return
4117+ 3710 21 18 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 3713 E5                   push    HL              ; Save for NMSB,MSB
4119+ 3714 E5                   push    HL              ;
4120+ 3715 21 8B 61             ld      HL,FPREG        ; Point to number
4121+ 3718 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 3719 23                   inc     HL              ; Point to NMSB
4123+ 371A B7                   or      A               ; Test LSB
4124+ 371B CA 44 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 371E E5                   push    HL              ; Save address of number
4126+ 371F 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3721 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 3722 67                   ld      H,A             ; Save LSB
4129+ 3723 79                   ld      A,C             ; Get MSB
4130+ 3724 D2 32 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 3727 E5                   push    HL              ; Save LSB and count
4132+ 3728 2A 9E 61             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 372B 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 372C EB                   ex      DE,HL           ; Leave sum in DE
4135+ 372D E1                   pop     HL              ; Restore MSB and count
4136+ 372E 3A 9D 61             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3731 89                   adc     A,C             ; Add MSB
4138+ 3732 1F           NOMADD: rra                     ; Shift MSB right
4139+ 3733 4F                   ld      C,A             ; Re-save MSB
4140+ 3734 7A                   ld      A,D             ; Get NMSB
4141+ 3735 1F                   rra                     ; Shift NMSB right
4142+ 3736 57                   ld      D,A             ; Re-save NMSB
4143+ 3737 7B                   ld      A,E             ; Get LSB
4144+ 3738 1F                   rra                     ; Shift LSB right
4145+ 3739 5F                   ld      E,A             ; Re-save LSB
4146+ 373A 78                   ld      A,B             ; Get VLSB
4147+ 373B 1F                   rra                     ; Shift VLSB right
4148+ 373C 47                   ld      B,A             ; Re-save VLSB
4149+ 373D 2D                   dec     L               ; Count bits multiplied
4150+ 373E 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 373F C2 21 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 3742 E1           POPHRT: pop     HL              ; Restore address of number
4153+ 3743 C9                   ret
4154+ 3744
4155+ 3744 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 3745 5A                   ld      E,D
4157+ 3746 51                   ld      D,C
4158+ 3747 4F                   ld      C,A
4159+ 3748 C9                   ret
4160+ 3749
4161+ 3749
4162+ 3749              ; WORKING ââ
4163+ 3749 C1           DINT:   pop     BC              ; Get number from stack
4164+ 374A D1                   pop     DE
4165+ 374B CD A8 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 374E C3 25 39             jp      INT             ; return INT(FPREG)
4167+ 3751
4168+ 3751
4169+ 3751              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3751              ; A is in stack; B is in FPREG
4171+ 3751              ; math is:
4172+ 3751              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3751 CD 25 39     MOD:    call    INT             ; B=INT(B)
4174+ 3754 CD 9E 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 3757 ED 53 3B 61          ld      (TMPBFR3),DE    ; store B into...
4176+ 375B ED 43 3D 61          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 375F C1                   pop     BC              ; recover A...
4178+ 3760 D1                   pop     DE              ; ...from stack
4179+ 3761 CD 93 38             call    FPBCDE          ; store A into FPREG
4180+ 3764 CD 25 39             call    INT             ; get integer part: A=INT(A)
4181+ 3767 CD 9E 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 376A ED 53 37 61          ld      (TMPBFR1),DE    ; store A into...
4183+ 376E ED 43 39 61          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 3772                                              ; begin calculation
4185+ 3772 2A 3B 61             ld      HL,(TMPBFR3)    ; move B...
4186+ 3775 22 8B 61             ld      (FPREG),HL      ; ...from...
4187+ 3778 2A 3D 61             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 377B 22 8D 61             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 377E CD A8 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 3781 CD 25 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 3784 ED 5B 3B 61          ld      DE,(TMPBFR3)    ; load B...
4192+ 3788 ED 4B 3D 61          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 378C CD F6 36             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 378F ED 5B 37 61          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 3793 ED 4B 39 61          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 3797 C3 B8 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 379A
4198+ 379A
4199+ 379A CD 83 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 379D 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 37A0 11 00 00             ld      DE,$0000
4202+ 37A3 CD 93 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 37A6
4204+ 37A6 C1           DIV:    pop     BC              ; Get number from stack
4205+ 37A7 D1                   pop     DE
4206+ 37A8 CD 52 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 37AB CA 6E 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37AE 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37B0 CD 10 38             call    ADDEXP          ; Subtract exponents
4210+ 37B3 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37B4 34                   inc     (HL)
4212+ 37B5 2B                   dec     HL              ; Point to MSB
4213+ 37B6 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37B7 32 A5 5F             ld      (DIV3),A        ; Save for subtraction
4215+ 37BA 2B                   dec     HL
4216+ 37BB 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 37BC 32 A1 5F             ld      (DIV2),A        ; Save for subtraction
4218+ 37BF 2B                   dec     HL
4219+ 37C0 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 37C1 32 9D 5F             ld      (DIV1),A        ; Save for subtraction
4221+ 37C4 41                   ld      B,C             ; Get MSB
4222+ 37C5 EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 37C6 AF                   xor     A
4224+ 37C7 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 37C8 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 37C9 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 37CA 32 A8 5F             ld      (DIV4),A        ; Clear overflow count
4228+ 37CD E5           DIVLP:  push    HL              ; Save divisor
4229+ 37CE C5                   push    BC
4230+ 37CF 7D                   ld      A,L             ; Get LSB of number
4231+ 37D0 CD 9C 5F             call    DIVSUP          ; Subt' divisor from dividend
4232+ 37D3 DE 00                sbc     A,$00           ; Count for overflows
4233+ 37D5 3F                   ccf
4234+ 37D6 D2 E0 37             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 37D9 32 A8 5F             ld      (DIV4),A        ; Re-save overflow count
4236+ 37DC F1                   pop     AF              ; Scrap divisor
4237+ 37DD F1                   pop     AF
4238+ 37DE 37                   scf                     ; Set carry to
4239+ 37DF D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 37E0
4241+ 37E0 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 37E1 E1                   pop     HL
4243+ 37E2 79                   ld      A,C             ; Get MSB of quotient
4244+ 37E3 3C                   inc     A
4245+ 37E4 3D                   dec     A
4246+ 37E5 1F                   rra                     ; Bit 0 to bit 7
4247+ 37E6 FA 42 36             jp      M,RONDB         ; Done - Normalise result
4248+ 37E9 17                   rla                     ; Restore carry
4249+ 37EA 7B                   ld      A,E             ; Get LSB of quotient
4250+ 37EB 17                   rla                     ; Double it
4251+ 37EC 5F                   ld      E,A             ; Put it back
4252+ 37ED 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 37EE 17                   rla                     ; Double it
4254+ 37EF 57                   ld      D,A             ; Put it back
4255+ 37F0 79                   ld      A,C             ; Get MSB of quotient
4256+ 37F1 17                   rla                     ; Double it
4257+ 37F2 4F                   ld      C,A             ; Put it back
4258+ 37F3 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 37F4 78                   ld      A,B             ; Get MSB of divisor
4260+ 37F5 17                   rla                     ; Double it
4261+ 37F6 47                   ld      B,A             ; Put it back
4262+ 37F7 3A A8 5F             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 37FA 17                   rla                     ; Double it
4264+ 37FB 32 A8 5F             ld      (DIV4),A        ; Put it back
4265+ 37FE 79                   ld      A,C             ; Get MSB of quotient
4266+ 37FF B2                   or      D               ; Merge NMSB
4267+ 3800 B3                   or      E               ; Merge LSB
4268+ 3801 C2 CD 37             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 3804 E5                   push    HL              ; Save divisor
4270+ 3805 21 8E 61             ld      HL,FPEXP        ; Point to exponent
4271+ 3808 35                   dec     (HL)            ; Divide by 2
4272+ 3809 E1                   pop     HL              ; Restore divisor
4273+ 380A C2 CD 37             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 380D C3 7A 20             jp      OVERR           ; Overflow error
4275+ 3810
4276+ 3810
4277+ 3810 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3811 B7                   or      A               ; Test it
4279+ 3812 CA 34 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 3815 7D                   ld      A,L             ; Get add/subtract flag
4281+ 3816 21 8E 61             ld      HL,FPEXP        ; Point to exponent
4282+ 3819 AE                   xor     (HL)            ; Add or subtract it
4283+ 381A 80                   add     A,B             ; Add the other exponent
4284+ 381B 47                   ld      B,A             ; Save new exponent
4285+ 381C 1F                   rra                     ; Test exponent for overflow
4286+ 381D A8                   xor     B
4287+ 381E 78                   ld      A,B             ; Get exponent
4288+ 381F F2 33 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 3822 C6 80                add     A,$80           ; Add excess 128
4290+ 3824 77                   ld      (HL),A          ; Save new exponent
4291+ 3825 CA 42 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 3828 CD B8 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 382B 77                   ld      (HL),A          ; Save new exponent
4294+ 382C 2B                   dec     HL              ; Point to MSB
4295+ 382D C9                   ret
4296+ 382E
4297+ 382E CD 52 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3831 2F                   cpl                     ; Invert sign
4299+ 3832 E1                   pop     HL              ; Clean up stack
4300+ 3833 B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 3834 E1           OVTST3: pop     HL              ; Clear off return address
4302+ 3835 F2 21 36             jp      P,RESZER        ; Result zero
4303+ 3838 C3 7A 20             jp      OVERR           ; Overflow error
4304+ 383B
4305+ 383B CD 9E 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 383E 78                   ld      A,B             ; Get exponent
4307+ 383F B7                   or      A               ; Is it zero?
4308+ 3840 C8                   ret     Z               ; Yes - Result is zero
4309+ 3841 C6 02                add     A,$02           ; Multiply by 4
4310+ 3843 DA 7A 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 3846 47                   ld      B,A             ; Re-save exponent
4312+ 3847 CD BB 35             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 384A 21 8E 61             ld      HL,FPEXP        ; Point to exponent
4314+ 384D 34                   inc     (HL)            ; Double number (Times 10)
4315+ 384E C0                   ret     NZ              ; Ok - Return
4316+ 384F C3 7A 20             jp      OVERR           ; Overflow error
4317+ 3852
4318+ 3852 3A 8E 61     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 3855 B7                   or      A
4320+ 3856 C8                   ret     Z               ; RETurn if number is zero
4321+ 3857 3A 8D 61             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 385A FE                   defb    0FEH            ; Test sign
4323+ 385B 2F           RETREL: cpl                     ; Invert sign
4324+ 385C 17                   rla                     ; Sign bit to carry
4325+ 385D 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 385E C0                   ret     NZ              ; Return -1 if negative
4327+ 385F 3C                   inc     A               ; Bump to +1
4328+ 3860 C9                   ret                     ; Positive - Return +1
4329+ 3861
4330+ 3861 CD 52 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 3864 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 3866 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 3869 21 8E 61     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 386C 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 386D 70                   ld      (HL),B          ; Save exponent
4336+ 386E 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 3870 23                   inc     HL              ; Point to sign of result
4338+ 3871 36 80                ld      (HL),$80        ; Set sign of result
4339+ 3873 17                   rla                     ; Carry = sign of integer
4340+ 3874 C3 09 36             jp      CONPOS          ; Set sign of result
4341+ 3877
4342+ 3877 CD 52 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 387A F0                   ret     P               ; Return if positive
4344+ 387B 21 8D 61     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 387E 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 387F EE 80                xor     $80             ; Invert sign of mantissa
4347+ 3881 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 3882 C9                   ret
4349+ 3883
4350+ 3883 EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 3884 2A 8B 61             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 3887 E3                   ex      (SP),HL         ; Stack them,get return
4353+ 3888 E5                   push    HL              ; Re-save return
4354+ 3889 2A 8D 61             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 388C E3                   ex      (SP),HL         ; Stack them,get return
4356+ 388D E5                   push    HL              ; Re-save return
4357+ 388E EB                   ex      DE,HL           ; Restore code string address
4358+ 388F C9                   ret
4359+ 3890
4360+ 3890              ; store F.P. number from BCDE into (FPREG)
4361+ 3890 CD A1 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 3893 EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 3894 22 8B 61             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 3897 60                   ld      H,B             ; Exponent of number
4365+ 3898 69                   ld      L,C             ; MSB of number
4366+ 3899 22 8D 61             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 389C EB                   ex      DE,HL           ; Restore code string address
4368+ 389D C9                   ret
4369+ 389E
4370+ 389E              ; load F.P. number from (FPREG) into BCDE
4371+ 389E 21 8B 61     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 38A1 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 38A2 23                   inc     HL
4374+ 38A3 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 38A4 23                   inc     HL
4376+ 38A5 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 38A6 23                   inc     HL
4378+ 38A7 46                   ld      B,(HL)          ; Get exponent of number
4379+ 38A8 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 38A9 C9                   ret
4381+ 38AA
4382+ 38AA              ; move floating point from (FPREG) into (HL)
4383+ 38AA 11 8B 61     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38AD 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38AF 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38B0 77                   ld      (HL),A          ; Save destination
4387+ 38B1 13                   inc     DE              ; Next source
4388+ 38B2 23                   inc     HL              ; Next destination
4389+ 38B3 05                   dec     B               ; Count bytes
4390+ 38B4 C2 AF 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38B7 C9                   ret
4392+ 38B8
4393+ 38B8 21 8D 61     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 38BB 7E                   ld      A,(HL)          ; Get MSB
4395+ 38BC 07                   rlca                    ; Old sign to carry
4396+ 38BD 37                   scf                     ; Set MSBit
4397+ 38BE 1F                   rra                     ; Set MSBit of MSB
4398+ 38BF 77                   ld      (HL),A          ; Save new MSB
4399+ 38C0 3F                   ccf                     ; Complement sign
4400+ 38C1 1F                   rra                     ; Old sign to carry
4401+ 38C2 23                   inc     HL
4402+ 38C3 23                   inc     HL
4403+ 38C4 77                   ld      (HL),A          ; Set sign of result
4404+ 38C5 79                   ld      A,C             ; Get MSB
4405+ 38C6 07                   rlca                    ; Old sign to carry
4406+ 38C7 37                   scf                     ; Set MSBit
4407+ 38C8 1F                   rra                     ; Set MSBit of MSB
4408+ 38C9 4F                   ld      C,A             ; Save MSB
4409+ 38CA 1F                   rra
4410+ 38CB AE                   xor     (HL)            ; New sign of result
4411+ 38CC C9                   ret
4412+ 38CD
4413+ 38CD 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 38CE B7                   or      A
4415+ 38CF CA 52 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 38D2 21 5B 38             ld      HL,RETREL       ; Return relation routine
4417+ 38D5 E5                   push    HL              ; Save for return
4418+ 38D6 CD 52 38             call    TSTSGN          ; Test sign of FPREG
4419+ 38D9 79                   ld      A,C             ; Get MSB of number
4420+ 38DA C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 38DB 21 8D 61             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 38DE AE                   xor     (HL)            ; Combine signs
4423+ 38DF 79                   ld      A,C             ; Get MSB of number
4424+ 38E0 F8                   ret     M               ; Exit if signs different
4425+ 38E1 CD E7 38             call    CMPFP           ; Compare FP numbers
4426+ 38E4 1F                   rra                     ; Get carry to sign
4427+ 38E5 A9                   xor     C               ; Combine with MSB of number
4428+ 38E6 C9                   ret
4429+ 38E7
4430+ 38E7 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 38E8 78                   ld      A,B             ; Get exponent
4432+ 38E9 BE                   cp      (HL)            ; Compare exponents
4433+ 38EA C0                   ret     NZ              ; Different
4434+ 38EB 2B                   dec     HL              ; Point to MBS
4435+ 38EC 79                   ld      A,C             ; Get MSB
4436+ 38ED BE                   cp      (HL)            ; Compare MSBs
4437+ 38EE C0                   ret     NZ              ; Different
4438+ 38EF 2B                   dec     HL              ; Point to NMSB
4439+ 38F0 7A                   ld      A,D             ; Get NMSB
4440+ 38F1 BE                   cp      (HL)            ; Compare NMSBs
4441+ 38F2 C0                   ret     NZ              ; Different
4442+ 38F3 2B                   dec     HL              ; Point to LSB
4443+ 38F4 7B                   ld      A,E             ; Get LSB
4444+ 38F5 96                   sub     (HL)            ; Compare LSBs
4445+ 38F6 C0                   ret     NZ              ; Different
4446+ 38F7 E1                   pop     HL              ; Drop RETurn
4447+ 38F8 E1                   pop     HL              ; Drop another RETurn
4448+ 38F9 C9                   ret
4449+ 38FA
4450+ 38FA 47           FPINT:  ld      B,A             ; <- Move
4451+ 38FB 4F                   ld      C,A             ; <- exponent
4452+ 38FC 57                   ld      D,A             ; <- to all
4453+ 38FD 5F                   ld      E,A             ; <- bits
4454+ 38FE B7                   or      A               ; Test exponent
4455+ 38FF C8                   ret     Z               ; Zero - Return zero
4456+ 3900 E5                   push    HL              ; Save pointer to number
4457+ 3901 CD 9E 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 3904 CD B8 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 3907 AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 3908 67                   ld      H,A             ; Save combined signs
4461+ 3909 FC 1E 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 390C 3E 98                ld      A,$80+24        ; 24 bits
4463+ 390E 90                   sub     B               ; Bits to shift
4464+ 390F CD 80 36             call    SCALE           ; Shift BCDE
4465+ 3912 7C                   ld      A,H             ; Get combined sign
4466+ 3913 17                   rla                     ; Sign to carry
4467+ 3914 DC 53 36             call    C,FPROND        ; Negative - Round number up
4468+ 3917 06 00                ld      B,$00           ; Zero exponent
4469+ 3919 DC 6C 36             call    C,COMPL         ; If negative make positive
4470+ 391C E1                   pop     HL              ; Restore pointer to number
4471+ 391D C9                   ret
4472+ 391E
4473+ 391E 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 391F 7A                   ld      A,D             ; Test LSBs
4475+ 3920 A3                   and     E
4476+ 3921 3C                   inc     A
4477+ 3922 C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 3923 0B                   dec     BC              ; Decrement MSBs
4479+ 3924 C9                   ret
4480+ 3925
4481+ 3925 21 8E 61     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 3928 7E                   ld      A,(HL)          ; Get exponent
4483+ 3929 FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 392B 3A 8B 61             ld      A,(FPREG)       ; Get LSB
4485+ 392E D0                   ret     NC              ; Yes - Already integer
4486+ 392F 7E                   ld      A,(HL)          ; Get exponent
4487+ 3930 CD FA 38             call    FPINT           ; F.P to integer
4488+ 3933 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 3935 7B                   ld      A,E             ; Get LSB of number
4490+ 3936 F5                   push    AF              ; Save LSB
4491+ 3937 79                   ld      A,C             ; Get MSB of number
4492+ 3938 17                   rla                     ; Sign to carry
4493+ 3939 CD 09 36             call    CONPOS          ; Set sign of result
4494+ 393C F1                   pop     AF              ; Restore LSB of number
4495+ 393D C9                   ret
4496+ 393E
4497+ 393E 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3941 78                   ld      A,B             ; Test multiplier
4499+ 3942 B1                   or      C
4500+ 3943 C8                   ret     Z               ; Return zero if zero
4501+ 3944 3E 10                ld      A,$10           ; 16 bits
4502+ 3946 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 3947 DA 6C 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 394A EB                   ex      DE,HL
4505+ 394B 29                   add     HL,HL           ; Shift multiplier left
4506+ 394C EB                   ex      DE,HL
4507+ 394D D2 54 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3950 09                   add     HL,BC           ; Add multiplicand
4509+ 3951 DA 6C 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 3954 3D           NOMLAD: dec     A               ; Count bits
4511+ 3955 C2 46 39             jp      NZ,MLDBLP       ; More
4512+ 3958 C9                   ret
4513+ 3959
4514+ 3959 FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 395B F5                   push    AF              ; Save it and flags
4516+ 395C CA 65 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 395F FE 2B                cp      '+'             ; Positive?
4518+ 3961 CA 65 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 3964 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 3965 CD 21 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 3968 47                   ld      B,A             ; Digits after point counter
4522+ 3969 57                   ld      D,A             ; Sign of exponent
4523+ 396A 5F                   ld      E,A             ; Exponent of ten
4524+ 396B 2F                   cpl
4525+ 396C 4F                   ld      C,A             ; Before or after point flag
4526+ 396D CD B4 25     MANLP:  call    GETCHR          ; Get next character
4527+ 3970 DA B6 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 3973 FE 2E                cp      '.'
4529+ 3975 CA 91 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 3978 FE 45                cp      'E'
4531+ 397A C2 95 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 397D CD B4 25             call    GETCHR          ; Get next character
4533+ 3980 CD 88 2B             call    SGNEXP          ; Get sign of exponent
4534+ 3983 CD B4 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 3986 DA D8 39             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 3989 14                   inc     D               ; Is sign negative?
4537+ 398A C2 95 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 398D AF                   xor     A
4539+ 398E 93                   sub     E               ; Negate exponent
4540+ 398F 5F                   ld      E,A             ; And re-save it
4541+ 3990 0C                   inc     C               ; Flag end of number
4542+ 3991 0C           DPOINT: inc     C               ; Flag point passed
4543+ 3992 CA 6D 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 3995 E5           CONEXP: push    HL              ; Save code string address
4545+ 3996 7B                   ld      A,E             ; Get exponent
4546+ 3997 90                   sub     B               ; Subtract digits after point
4547+ 3998 F4 AE 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 399B F2 A4 39             jp      P,ENDCON        ; Positive - All done
4549+ 399E F5                   push    AF              ; Save number of times to /10
4550+ 399F CD 9A 37             call    DIV10           ; Divide by 10
4551+ 39A2 F1                   pop     AF              ; Restore count
4552+ 39A3 3C                   inc     A               ; Count divides
4553+ 39A4
4554+ 39A4 C2 98 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 39A7 D1                   pop     DE              ; Restore code string address
4556+ 39A8 F1                   pop     AF              ; Restore sign of number
4557+ 39A9 CC 7B 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39AC EB                   ex      DE,HL           ; Code string address to HL
4559+ 39AD C9                   ret
4560+ 39AE
4561+ 39AE C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39AF F5           MULTEN: push    AF              ; Save count
4563+ 39B0 CD 3B 38             call    MLSP10          ; Multiply number by 10
4564+ 39B3 F1                   pop     AF              ; Restore count
4565+ 39B4 3D                   dec     A               ; Count multiplies
4566+ 39B5 C9                   ret
4567+ 39B6
4568+ 39B6 D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39B7 57                   ld      D,A             ; Save digit
4570+ 39B8 78                   ld      A,B             ; Get digits after point
4571+ 39B9 89                   adc     A,C             ; Add one if after point
4572+ 39BA 47                   ld      B,A             ; Re-save counter
4573+ 39BB C5                   push    BC              ; Save point flags
4574+ 39BC E5                   push    HL              ; Save code string address
4575+ 39BD D5                   push    DE              ; Save digit
4576+ 39BE CD 3B 38             call    MLSP10          ; Multiply number by 10
4577+ 39C1 F1                   pop     AF              ; Restore digit
4578+ 39C2 D6 30                sub     '0'             ; Make it absolute
4579+ 39C4 CD CD 39             call    RSCALE          ; Re-scale number
4580+ 39C7 E1                   pop     HL              ; Restore code string address
4581+ 39C8 C1                   pop     BC              ; Restore point flags
4582+ 39C9 D1                   pop     DE              ; Restore sign of exponent
4583+ 39CA C3 6D 39             jp      MANLP           ; Get another digit
4584+ 39CD
4585+ 39CD CD 83 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 39D0 CD 64 38             call    FLGREL          ; Digit to add to FPREG
4587+ 39D3 C1           PADD:   pop     BC              ; Restore number
4588+ 39D4 D1                   pop     DE
4589+ 39D5 C3 BB 35             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 39D8
4591+ 39D8 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 39D9 07                   rlca                    ; Times 2
4593+ 39DA 07                   rlca                    ; Times 4
4594+ 39DB 83                   add     A,E             ; Times 5
4595+ 39DC 07                   rlca                    ; Times 10
4596+ 39DD 86                   add     A,(HL)          ; Add next digit
4597+ 39DE D6 30                sub     '0'             ; Make it absolute
4598+ 39E0 5F                   ld      E,A             ; Save new digit
4599+ 39E1 C3 83 39             jp      EXPLP           ; Look for another digit
4600+ 39E4
4601+ 39E4 E5           LINEIN: push    HL              ; Save code string address
4602+ 39E5 21 E4 1F             ld      HL,INMSG        ; Output " in "
4603+ 39E8 CD 4D 2F             call    PRS             ; Output string at HL
4604+ 39EB E1                   pop     HL              ; Restore code string address
4605+ 39EC EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 39ED AF                   xor     A
4607+ 39EE 06 98                ld      B,$80+24        ; 24 bits
4608+ 39F0 CD 69 38             call    RETINT          ; Return the integer
4609+ 39F3 21 4C 2F             ld      HL,PRNUMS       ; Print number string
4610+ 39F6 E5                   push    HL              ; Save for return
4611+ 39F7              ; conmvert FP number into ASCII chars
4612+ 39F7 21 90 61     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 39FA E5                   push    HL              ; Save for return
4614+ 39FB CD 52 38             call    TSTSGN          ; Test sign of FPREG
4615+ 39FE 36 20                ld      (HL),SPC        ; Space at start
4616+ 3A00 F2 05 3A             jp      P,SPCFST        ; Positive - Space to start
4617+ 3A03 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 3A05 23           SPCFST: inc     HL              ; First byte of number
4619+ 3A06 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 3A08 CA BB 3A             jp      Z,JSTZER        ; Return '0' if zero
4621+ 3A0B E5                   push    HL              ; Save buffer address
4622+ 3A0C FC 7B 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A0F AF                   xor     A               ; Zero A
4624+ 3A10 F5                   push    AF              ; Save it
4625+ 3A11 CD C1 3A             call    RNGTST          ; Test number is in range
4626+ 3A14 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A17 11 F8 4F             ld      DE,$4FF8
4628+ 3A1A CD CD 38             call    CMPNUM          ; Compare numbers
4629+ 3A1D B7                   or      A
4630+ 3A1E E2 32 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A21 F1                   pop     AF              ; Restore count
4632+ 3A22 CD AF 39             call    MULTEN          ; Multiply by ten
4633+ 3A25 F5                   push    AF              ; Re-save count
4634+ 3A26 C3 14 3A             jp      SIXDIG          ; Test it again
4635+ 3A29
4636+ 3A29 CD 9A 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A2C F1                   pop     AF              ; Get count
4638+ 3A2D 3C                   inc     A               ; Count divides
4639+ 3A2E F5                   push    AF              ; Re-save count
4640+ 3A2F CD C1 3A             call    RNGTST          ; Test number is in range
4641+ 3A32 CD A9 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A35 3C                   inc     A
4643+ 3A36 CD FA 38             call    FPINT           ; F.P to integer
4644+ 3A39 CD 93 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A3C 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A3F F1                   pop     AF              ; Restore count
4647+ 3A40 81                   add     A,C             ; 6 digits before point
4648+ 3A41 3C                   inc     A               ; Add one
4649+ 3A42 FA 4E 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A45 FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A47 D2 4E 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A4A 3C                   inc     A               ; Adjust for exponent
4653+ 3A4B 47                   ld      B,A             ; Exponent of number
4654+ 3A4C 3E 02                ld      A,2             ; Make it zero after
4655+ 3A4E
4656+ 3A4E 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A4F 3D                   dec     A
4658+ 3A50 E1                   pop     HL              ; Restore buffer address
4659+ 3A51 F5                   push    AF              ; Save count
4660+ 3A52 11 D4 3A             ld      DE,POWERS       ; Powers of ten
4661+ 3A55 05                   dec     B               ; Count digits before point
4662+ 3A56 C2 5F 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A59 36 2E                ld      (HL),'.'        ; Save point
4664+ 3A5B 23                   inc     HL              ; Move on
4665+ 3A5C 36 30                ld      (HL),'0'        ; Save zero
4666+ 3A5E 23                   inc     HL              ; Move on
4667+ 3A5F 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3A60 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3A62 CC A8 38             call    Z,INCHL         ; Last digit - move on
4670+ 3A65 C5                   push    BC              ; Save digits before point
4671+ 3A66 E5                   push    HL              ; Save buffer address
4672+ 3A67 D5                   push    DE              ; Save powers of ten
4673+ 3A68 CD 9E 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3A6B E1                   pop     HL              ; Powers of ten table
4675+ 3A6C 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3A6E 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3A6F 7B                   ld      A,E             ; Get LSB
4678+ 3A70 96                   sub     (HL)            ; Subtract LSB
4679+ 3A71 5F                   ld      E,A             ; Save LSB
4680+ 3A72 23                   inc     HL
4681+ 3A73 7A                   ld      A,D             ; Get NMSB
4682+ 3A74 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3A75 57                   ld      D,A             ; Save NMSB
4684+ 3A76 23                   inc     HL
4685+ 3A77 79                   ld      A,C             ; Get MSB
4686+ 3A78 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3A79 4F                   ld      C,A             ; Save MSB
4688+ 3A7A 2B                   dec     HL              ; Point back to start
4689+ 3A7B 2B                   dec     HL
4690+ 3A7C D2 6E 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3A7F CD 60 36             call    PLUCDE          ; Restore number
4692+ 3A82 23                   inc     HL              ; Start of next number
4693+ 3A83 CD 93 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3A86 EB                   ex      DE,HL           ; Save point in table
4695+ 3A87 E1                   pop     HL              ; Restore buffer address
4696+ 3A88 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3A89 23                   inc     HL              ; And move on
4698+ 3A8A C1                   pop     BC              ; Restore digit count
4699+ 3A8B 0D                   dec     C               ; Count digits
4700+ 3A8C C2 5F 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3A8F 05                   dec     B               ; Any decimal part?
4702+ 3A90 CA 9F 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3A93 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3A94 7E                   ld      A,(HL)          ; Get character
4705+ 3A95 FE 30                cp      '0'             ; '0' character?
4706+ 3A97 CA 93 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3A9A FE 2E                cp      '.'             ; A decimal point?
4708+ 3A9C C4 A8 38             call    NZ,INCHL        ; Move back over digit
4709+ 3A9F
4710+ 3A9F F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3AA0 CA BE 3A             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3AA3 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3AA5 23                   inc     HL              ; And move on
4714+ 3AA6 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3AA8 F2 AF 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3AAB 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3AAD 2F                   cpl                     ; Negate exponent
4718+ 3AAE 3C                   inc     A
4719+ 3AAF 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AB1 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3AB2 D6 0A                sub     $0A             ; Tens digit
4722+ 3AB4 D2 B1 3A             jp      NC,EXPTEN       ; More to do
4723+ 3AB7 C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3AB9 23                   inc     HL              ; Move on
4725+ 3ABA 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3ABB 23           JSTZER: inc     HL              ;
4727+ 3ABC 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3ABD 23                   inc     HL
4729+ 3ABE 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3ABF E1                   pop     HL              ; Restore code string address
4731+ 3AC0 C9                   ret
4732+ 3AC1
4733+ 3AC1 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3AC4 11 F7 23             ld      DE,$23F7
4735+ 3AC7 CD CD 38             call    CMPNUM          ; Compare numbers
4736+ 3ACA B7                   or      A
4737+ 3ACB E1                   pop     HL              ; Return address to HL
4738+ 3ACC E2 29 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3ACF E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3AD0
4741+ 3AD0 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3AD4
4743+ 3AD4 A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3AD7 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3ADA E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3ADD 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3AE0 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3AE3 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3AE6
4750+ 3AE6 21 7B 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3AE9 E3                   ex      (SP),HL         ; To be done after caller
4752+ 3AEA E9                   jp      (HL)            ; Return to caller
4753+ 3AEB
4754+ 3AEB CD 83 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3AEE 21 D0 3A             ld      HL,HALF         ; Set power to 1/2
4756+ 3AF1 CD 90 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3AF4
4758+ 3AF4 C1           POWER:  pop     BC              ; Get base
4759+ 3AF5 D1                   pop     DE
4760+ 3AF6 CD 52 38             call    TSTSGN          ; Test sign of power
4761+ 3AF9 78                   ld      A,B             ; Get exponent of base
4762+ 3AFA CA 39 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3AFD F2 04 3B             jp      P,POWER1        ; Positive base - Ok
4764+ 3B00 B7                   or      A               ; Zero to negative power?
4765+ 3B01 CA 6E 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3B04 B7           POWER1: or      A               ; Base zero?
4767+ 3B05 CA 22 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3B08 D5                   push    DE              ; Save base
4769+ 3B09 C5                   push    BC
4770+ 3B0A 79                   ld      A,C             ; Get MSB of base
4771+ 3B0B F6 7F                or      %01111111       ; Get sign status
4772+ 3B0D CD 9E 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B10 F2 21 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B13 D5                   push    DE              ; Save power
4775+ 3B14 C5                   push    BC
4776+ 3B15 CD 25 39             call    INT             ; Get integer of power
4777+ 3B18 C1                   pop     BC              ; Restore power
4778+ 3B19 D1                   pop     DE
4779+ 3B1A F5                   push    AF              ; MSB of base
4780+ 3B1B CD CD 38             call    CMPNUM          ; Power an integer?
4781+ 3B1E E1                   pop     HL              ; Restore MSB of base
4782+ 3B1F 7C                   ld      A,H             ; but don't affect flags
4783+ 3B20 1F                   rra                     ; Exponent odd or even?
4784+ 3B21 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B22 22 8D 61             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B25 E1                   pop     HL              ; LSBs of base
4787+ 3B26 22 8B 61             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B29 DC E6 3A             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B2C CC 7B 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B2F D5                   push    DE              ; Save power
4791+ 3B30 C5                   push    BC
4792+ 3B31 CD B5 36             call    LOG             ; Get LOG of base
4793+ 3B34 C1                   pop     BC              ; Restore power
4794+ 3B35 D1                   pop     DE
4795+ 3B36 CD F6 36             call    FPMULT          ; Multiply LOG by power
4796+ 3B39
4797+ 3B39 CD 83 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B3C 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B3F 11 3B AA             ld      DE,$AA3B
4800+ 3B42 CD F6 36             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B45 3A 8E 61             ld      A,(FPEXP)       ; Get exponent
4802+ 3B48 FE 88                cp      $80+8           ; Is it in range?
4803+ 3B4A D2 2E 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B4D CD 25 39             call    INT             ; Get INT of FPREG
4805+ 3B50 C6 80                add     A,$80           ; For excess 128
4806+ 3B52 C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B54 DA 2E 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B57 F5                   push    AF              ; Save scaling factor
4809+ 3B58 21 A4 36             ld      HL,UNITY        ; Point to 1.
4810+ 3B5B CD AC 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3B5E CD ED 36             call    MULLN2          ; Multiply by LN(2)
4812+ 3B61 F1                   pop     AF              ; Restore scaling factor
4813+ 3B62 C1                   pop     BC              ; Restore exponent
4814+ 3B63 D1                   pop     DE
4815+ 3B64 F5                   push    AF              ; Save scaling factor
4816+ 3B65 CD B8 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3B68 CD 7B 38             call    INVSGN          ; Negate result
4818+ 3B6B 21 79 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3B6E CD A9 3B             call    SMSER1          ; Sum the series
4820+ 3B71 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3B74 C1                   pop     BC              ; Scaling factor
4822+ 3B75 4A                   ld      C,D             ; Zero MSB
4823+ 3B76 C3 F6 36             jp      FPMULT          ; Scale result to correct value
4824+ 3B79
4825+ 3B79 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3B7A 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3B7E 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3B82 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3B86 E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3B8A 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3B8E FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3B92 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3B96 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3B9A
4835+ 3B9A CD 83 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3B9D 11 F4 36             ld      DE,MULT         ; Multiply by "X"
4837+ 3BA0 D5                   push    DE              ; To be done after
4838+ 3BA1 E5                   push    HL              ; Save address of table
4839+ 3BA2 CD 9E 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3BA5 CD F6 36             call    FPMULT          ; Square the value
4841+ 3BA8 E1                   pop     HL              ; Restore address of table
4842+ 3BA9 CD 83 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BAC 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BAD 23                   inc     HL              ; Point to start of table
4845+ 3BAE CD 90 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BB1 06                   defb    06H             ; Skip "pop AF"
4847+ 3BB2 F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BB3 C1                   pop     BC              ; Restore number
4849+ 3BB4 D1                   pop     DE
4850+ 3BB5 3D                   dec     A               ; Cont coefficients
4851+ 3BB6 C8                   ret     Z               ; All done
4852+ 3BB7 D5                   push    DE              ; Save number
4853+ 3BB8 C5                   push    BC
4854+ 3BB9 F5                   push    AF              ; Save count
4855+ 3BBA E5                   push    HL              ; Save address in table
4856+ 3BBB CD F6 36             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3BBE E1                   pop     HL              ; Restore address in table
4858+ 3BBF CD A1 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3BC2 E5                   push    HL              ; Save address in table
4860+ 3BC3 CD BB 35             call    FPADD           ; Add coefficient to FPREG
4861+ 3BC6 E1                   pop     HL              ; Restore address in table
4862+ 3BC7 C3 B2 3B             jp      SUMLP           ; More coefficients
4863+ 3BCA
4864+ 3BCA
4865+ 3BCA              ; random number generator
4866+ 3BCA              ; a negative argument is used as a seed for the RNG
4867+ 3BCA              ; 0 is used to repeat the last random number
4868+ 3BCA              ; a positive argument generates a new random number
4869+ 3BCA CD 52 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3BCD 21 AC 5F             ld      HL,SEED+2       ; Random number seed
4871+ 3BD0 FA 2B 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3BD3 21 CD 5F             ld      HL,LSTRND       ; Last random number
4873+ 3BD6 CD 90 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3BD9 21 AC 5F             ld      HL,SEED+2       ; Random number seed
4875+ 3BDC C8                   ret     Z               ; Return if RND(0)
4876+ 3BDD 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3BDE E6 07                and     %00000111       ; 0 to 7
4878+ 3BE0 06 00                ld      B,$00
4879+ 3BE2 77                   ld      (HL),A          ; Re-save seed
4880+ 3BE3 23                   inc     HL              ; Move to coefficient table
4881+ 3BE4 87                   add     A,A             ; 4 bytes
4882+ 3BE5 87                   add     A,A             ; per entry
4883+ 3BE6 4F                   ld      C,A             ; BC = Offset into table
4884+ 3BE7 09                   add     HL,BC           ; Point to coefficient
4885+ 3BE8 CD A1 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3BEB CD F6 36             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3BEE 3A AB 5F             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3BF1 3C                   inc     A               ; Add 1
4889+ 3BF2 E6 03                and     %00000011       ; 0 to 3
4890+ 3BF4 06 00                ld      B,$00
4891+ 3BF6 FE 01                cp      $01             ; Is it zero?
4892+ 3BF8 88                   adc     A,B             ; Yes - Make it 1
4893+ 3BF9 32 AB 5F             ld      (SEED+1),A      ; Re-save seed
4894+ 3BFC 21 2F 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3BFF 87                   add     A,A             ; 4 bytes
4896+ 3C00 87                   add     A,A             ; per entry
4897+ 3C01 4F                   ld      C,A             ; BC = Offset into table
4898+ 3C02 09                   add     HL,BC           ; Point to value
4899+ 3C03 CD AC 35             call    ADDPHL          ; Add value to FPREG
4900+ 3C06 CD 9E 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3C09 7B                   ld      A,E             ; Get LSB
4902+ 3C0A 59                   ld      E,C             ; LSB = MSB
4903+ 3C0B EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C0D 4F                   ld      C,A             ; New MSB
4905+ 3C0E 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C10 2B                   dec     HL              ; Point to MSB
4907+ 3C11 46                   ld      B,(HL)          ; Get MSB
4908+ 3C12 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C14 21 AA 5F             ld      HL,SEED         ; Random number seed
4910+ 3C17 34                   inc     (HL)            ; Count seed
4911+ 3C18 7E                   ld      A,(HL)          ; Get seed
4912+ 3C19 D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C1B C2 22 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C1E 77                   ld      (HL),A          ; Zero seed
4915+ 3C1F 0C                   inc     C               ; Fillde about
4916+ 3C20 15                   dec     D               ; with the
4917+ 3C21 1C                   inc     E               ; number
4918+ 3C22 CD 0C 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C25 21 CD 5F             ld      HL,LSTRND       ; Save random number
4920+ 3C28 C3 AA 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C2B
4922+ 3C2B 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C2C 2B                   dec     HL
4924+ 3C2D 77                   ld      (HL),A
4925+ 3C2E 2B                   dec     HL
4926+ 3C2F 77                   ld      (HL),A
4927+ 3C30 C3 06 3C             jp      RND1            ; Return RND seed
4928+ 3C33
4929+ 3C33 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C37 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C3B 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C3F
4933+ 3C3F              ; COS and SIN functions
4934+ 3C3F 21 89 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C42 CD AC 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C45 CD 83 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C48 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C4B 11 DB 0F             ld      DE,$0FDB
4939+ 3C4E CD 93 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C51 C1                   pop     BC              ; Restore angle
4941+ 3C52 D1                   pop     DE
4942+ 3C53 CD A8 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C56 CD 83 38             call    STAKFP          ; Put it on stack
4944+ 3C59 CD 25 39             call    INT             ; Get INT of result
4945+ 3C5C C1                   pop     BC              ; Restore number
4946+ 3C5D D1                   pop     DE
4947+ 3C5E CD B8 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3C61 21 8D 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3C64 CD B2 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3C67 CD 52 38             call    TSTSGN          ; Test sign of value
4951+ 3C6A 37                   scf                     ; Flag positive
4952+ 3C6B F2 75 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3C6E CD A9 35             call    ROUND           ; Add 0.5 to value
4954+ 3C71 CD 52 38             call    TSTSGN          ; Test sign of value
4955+ 3C74 B7                   or      A               ; Flag negative
4956+ 3C75 F5           SIN1:   push    AF              ; Save sign
4957+ 3C76 F4 7B 38             call    P,INVSGN        ; Negate value if positive
4958+ 3C79 21 8D 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3C7C CD AC 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3C7F F1                   pop     AF              ; Restore sign
4961+ 3C80 D4 7B 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3C83 21 91 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3C86 C3 9A 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3C89
4965+ 3C89 DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3C8D
4967+ 3C8D 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3C91
4969+ 3C91 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3C92 BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3C96 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3C9A 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3C9E E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3CA2 DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3CA6
4976+ 3CA6 CD 83 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3CA9 CD 45 3C             call    SIN             ; Get SIN of angle
4978+ 3CAC C1                   pop     BC              ; Restore angle
4979+ 3CAD E1                   pop     HL
4980+ 3CAE CD 83 38             call    STAKFP          ; Save SIN of angle
4981+ 3CB1 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CB2 CD 93 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CB5 CD 3F 3C             call    COS             ; Get COS of angle
4984+ 3CB8 C3 A6 37             jp      DIV             ; TAN = SIN / COS
4985+ 3CBB
4986+ 3CBB CD 52 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3CBE FC E6 3A             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3CC1 FC 7B 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3CC4 3A 8E 61             ld      A,(FPEXP)       ; Get exponent
4990+ 3CC7 FE 81                cp      81H             ; Number less than 1?
4991+ 3CC9 DA D8 3C             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3CCC 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3CCF 51                   ld      D,C
4994+ 3CD0 59                   ld      E,C
4995+ 3CD1 CD A8 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3CD4 21 B2 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3CD7 E5                   push    HL              ; Save for angle > 1
4998+ 3CD8 21 E2 3C     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3CDB CD 9A 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3CDE 21 89 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3CE1 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3CE2
5003+ 3CE2 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3CE3 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3CE7 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3CEB FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3CEF 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3CF3 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3CF7 C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3CFB E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3CFF 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3D03 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3D07
5014+ 3D07
5015+ 3D07 C9           ARET:   ret                     ; A RETurn instruction
5016+ 3D08
5017+ 3D08 D7           GETINP: rst     $10             ; input a character
5018+ 3D09 C9                   ret
5019+ 3D0A
5020+ 3D0A E5           CLS:    push    HL
5021+ 3D0B D5                   push    DE
5022+ 3D0C 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D0F FE 02                cp      $02             ; G2 mode?
5024+ 3D11 CC D8 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D14 D1                   pop     DE
5026+ 3D15 E1                   pop     HL
5027+ 3D16 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D18 CD A9 23             call    SND2VID         ; send to screen
5029+ 3D1B C3 CA 4C             jp      MONOUT          ; Output character
5030+ 3D1E
5031+ 3D1E CD CB 32     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D21 7B                   ld      A,E             ; Width to A
5033+ 3D22 32 D4 5F             ld      (LWIDTH),A      ; Set width
5034+ 3D25 C9                   ret
5035+ 3D26
5036+ 3D26
5037+ 3D26              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D26              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D26 CD 6A 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D29 D5                   push    DE              ; Save number
5041+ 3D2A E1                   pop     HL              ; Number to HL
5042+ 3D2B 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D2C 23                   inc     HL
5044+ 3D2D 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D2E C3 2F 2E             jp      ABPASS          ; Return integer AB
5046+ 3D31
5047+ 3D31              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D31              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D31 CD 45 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D34 CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D37 D5                   push    DE              ; Save address
5052+ 3D38 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D3B 2C                   defb    ','
5054+ 3D3C CD 45 2A             call    GETNUM          ; Get a number
5055+ 3D3F CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D42 E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D43 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D44 23                   inc     HL
5059+ 3D45 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D46 E1                   pop     HL              ; Restore code string address
5061+ 3D47 C9                   ret
5062+ 3D48
5063+ 3D48              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D48              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D48 CD 45 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D4B CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D4E 7A                   ld      A,D             ; load D into A
5068+ 3D4F B3                   or      E               ; are D & E equal to $00?
5069+ 3D50 C8                   ret     Z               ; if yes, then return
5070+ 3D51 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D52 3A 17 61             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D55 47                   ld      B,A             ; move it into B
5073+ 3D56 CD DF 25     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D59 3A 17 61             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3D5C B8                   cp      B               ; is it the same value?
5076+ 3D5D 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3D5F 47                   ld      B,A             ; no, so store the new value
5078+ 3D60 1B                   dec     DE              ; decrement interval
5079+ 3D61 7A                   ld      A,D             ; load D into A
5080+ 3D62 B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3D63 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3D65 C1                   pop     BC              ; yes, recover BC and continue
5083+ 3D66 C9                   ret
5084+ 3D67
5085+ 3D67              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3D67              ; where X is graphic mode:
5087+ 3D67              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3D67              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3D67              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3D67              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3D67              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3D67 AF           SCREEN: xor     A
5093+ 3D68 32 39 61             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3D6B CD CB 32             call    GETINT          ; Get integer 0-255
5095+ 3D6E FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3D70 D2 7F 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3D73 32 37 61             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3D76 A7                   and     A               ; is it 0 (text mode)?
5099+ 3D77 CA 93 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3D7A CD D2 3D     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3D7D DA 85 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3D80 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3D82 32 39 61             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3D85 CD D2 3D     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3D88 DA 93 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3D8B 3A 39 61             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3D8E F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3D90 32 39 61             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3D93 F3           SCVDP:  di                      ; disable INTs
5110+ 3D94 D5                   push    DE              ; store DE
5111+ 3D95 E5                   push    HL              ; store HL
5112+ 3D96 3A 37 61             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3D99 5F                   ld      E,A             ; and store it into E
5114+ 3D9A 3A 39 61             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3D9D 57                   ld      D,A             ; and store them into D
5116+ 3D9E D5                   push    DE              ; store D & E
5117+ 3D9F CD D1 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3DA2 D1                   pop     DE              ; retrieve D & E
5119+ 3DA3 7B                   ld      A,E             ; move graphic mode into A
5120+ 3DA4 87                   add     A,A
5121+ 3DA5 87                   add     A,A
5122+ 3DA6 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3DA7 5F                   ld      E,A             ; and pass it into E
5124+ 3DA8 D5                   push    DE              ; store sprite flags in E
5125+ 3DA9 16 00                ld      D,$00           ; reset D
5126+ 3DAB 21 20 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DAE 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DAF D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DB0 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DB1 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DB3 B2                   or      D               ; set size & magn. bits
5132+ 3DB4 5F                   ld      E,A             ; value into E
5133+ 3DB5 3E 01                ld      A,$01           ; reg #1
5134+ 3DB7 CD B0 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3DBA 2A E1 5F             ld      HL,(LINEAT)     ; Get current line number
5136+ 3DBD 23                   inc     HL              ; -1 means direct statement
5137+ 3DBE 7C                   ld      A,H
5138+ 3DBF B5                   or      L
5139+ 3DC0 CC 23 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3DC3 FB                   ei                      ; re-enable interrupts
5141+ 3DC4 E1                   pop     HL              ; restore HL
5142+ 3DC5 D1                   pop     DE              ; restore DE
5143+ 3DC6 3A 28 61             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3DC9 FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3DCB D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3DCC 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3DCE 32 33 61             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3DD1 C9                   ret                     ; ...and return to caller
5149+ 3DD2
5150+ 3DD2              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3DD2              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3DD2              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3DD2 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3DD3 CD B4 25             call    GETCHR          ; Get next character
5155+ 3DD6 37                   scf                     ; set carry flag
5156+ 3DD7 C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3DD8 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3DDB 2C                   defb    ','
5159+ 3DDC CD CB 32             call    GETINT          ; get value
5160+ 3DDF 1F                   rra                     ; Carry=bit #0
5161+ 3DE0 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3DE1 C9                   ret                     ; return
5163+ 3DE2
5164+ 3DE2
5165+ 3DE2              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3DE2              ; a=foreground color / b=background color / c=border color
5167+ 3DE2              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3DE2              ; the number of arguments is based on the current screen mode
5169+ 3DE2 CD CB 32     COLOR:  call    GETINT          ; get first value
5170+ 3DE5 CD 8A 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3DE8 32 37 61             ld      (TMPBFR1),A     ; store it
5172+ 3DEB 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3DEE FE 03                cp      $03             ; is it multicolor mode?
5174+ 3DF0 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3DF2 3E 0F                ld      A,$0F           ; white for...
5176+ 3DF4 32 35 61             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3DF7 3A 37 61             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3DFA 32 3B 61             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3DFD 18 31                jr      CLRMC           ; jump to set color
5180+ 3DFF CD 6B 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3E02 2C                   defb    ','
5182+ 3E03 CD CB 32             call    GETINT          ; get second value
5183+ 3E06 CD 8A 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3E09 32 39 61             ld      (TMPBFR2),A     ; store it
5185+ 3E0C 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E0F A7                   and     A               ; is it text mode?
5187+ 3E10 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E12 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E15 2C                   defb    ','
5190+ 3E16 CD CB 32             call    GETINT          ; get third value
5191+ 3E19 CD 8A 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E1C 32 3B 61             ld      (TMPBFR3),A     ; store it
5193+ 3E1F D5                   push    DE              ; store DE
5194+ 3E20 3A 29 61             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E23 FE 01                cp      $01             ; is it G1 mode?
5196+ 3E25 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E27 FE 02                cp      $02             ; is it G2 mode?
5198+ 3E29 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E2B 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E2D CD 7D 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E30 32 3B 61     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E33 D5                   push    DE              ; store DE
5203+ 3E34 F3                   di                      ; disable INTs
5204+ 3E35 18 2D                jr      SETBRCL         ; set colors and exit
5205+ 3E37 CD 7D 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E3A 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E3C 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E3E 18 10                jr      LOADCLR         ; load colors
5209+ 3E40 CD 7D 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E43 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E45 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E47 18 07                jr      LOADCLR         ; load colors
5213+ 3E49 CD 7D 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E4C 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E4E 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E50 E5           LOADCLR:push    HL              ; store HL
5217+ 3E51 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E54 F3                   di                      ; disable INTs
5219+ 3E55 CD 66 06             call    SETVDPADRS
5220+ 3E58 0D                   dec     C              ; VDP data mode
5221+ 3E59 ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3E5B 00                   nop
5223+ 3E5C 00                   nop
5224+ 3E5D 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3E5F 15                   dec     D               ; did we fill up all the pages?
5226+ 3E60 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3E62 FB                   ei
5228+ 3E63 E1                   pop     HL              ; retrieve HL
5229+ 3E64 3A 37 61     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3E67 32 35 61             ld      (FRGNDCLR),A    ; store it
5231+ 3E6A 3A 39 61             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3E6D 32 36 61             ld      (BKGNDCLR),A    ; store it
5233+ 3E70 3A 3B 61             ld      A,(TMPBFR3)     ; recover border color
5234+ 3E73 5F                   ld      E,A             ; move it into E
5235+ 3E74 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3E76 F3                   di
5237+ 3E77 CD B0 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3E7A FB                   ei                      ; re-enable INTs
5239+ 3E7B D1                   pop     DE              ; retrieve DE
5240+ 3E7C C9                   ret                     ; return to caller
5241+ 3E7D
5242+ 3E7D
5243+ 3E7D              ; mix 2 color nibbles in 1 byte
5244+ 3E7D 3A 39 61     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3E80 47                   ld      B,A             ; move it into B
5246+ 3E81 3A 37 61             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3E84 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3E85 87                   add     A,A
5249+ 3E86 87                   add     A,A
5250+ 3E87 87                   add     A,A
5251+ 3E88 B0                   or      B               ; put background color into the low nibble of A
5252+ 3E89 C9                   ret                     ; return to caller
5253+ 3E8A
5254+ 3E8A
5255+ 3E8A              ; check if the color is not 0 and into the range 1~15
5256+ 3E8A A7           CHKCLR1:and     A               ; is it 0?
5257+ 3E8B CA 6B 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3E8E FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3E90 D2 6B 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3E93 C9                   ret                     ; param is OK, can return
5261+ 3E94
5262+ 3E94
5263+ 3E94              ; check if in graphics 2 mode
5264+ 3E94 3A 29 61     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3E97 FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3E99 C2 A2 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3E9C C9                   ret                     ; return to caller
5268+ 3E9D
5269+ 3E9D
5270+ 3E9D              ; print a text in screen 2
5271+ 3E9D              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3E9D              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3E9D              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3E9D              ; colors (1~15), resp.
5275+ 3E9D              ; (portions of code are from nippur72)
5276+ 3E9D              GX      equ     TMPBFR3
5277+ 3E9D              GY      equ     TMPBFR4
5278+ 3E9D              TMPCLR  equ     TMPBFR2
5279+ 3E9D              MIXCOL  equ     TMPBFR1
5280+ 3E9D              TMPADR  equ     VIDEOBUFF
5281+ 3E9D              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3E9D              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3E9D              TMPHL   equ     VIDEOBUFF+$06
5284+ 3E9D CD 94 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3EA0 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3EA1 CD B4 25             call    GETCHR          ; check if something follows
5287+ 3EA4 CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3EA7 22 3F 61             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3EAA CD 57 2A             call    EVAL            ; Evaluate expression
5290+ 3EAD CD 49 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3EB0 22 45 61             ld      (TMPHL),HL      ; store code string pointer
5292+ 3EB3 CD 90 30             call    GSTRCU          ; Current string to pool
5293+ 3EB6 CD A1 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3EB9 ED 43 41 61          ld      (CHRPNT),BC     ; store string pointer
5295+ 3EBD ED 53 43 61          ld      (NUMCHR),DE     ; store string lenght
5296+ 3EC1 2A 45 61             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3EC4 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3EC7 2C                   defb    ','
5299+ 3EC8 CD CB 32             call    GETINT          ; get X coord.
5300+ 3ECB FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3ECD D2 7F 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3ED0 32 3B 61             ld      (GX),A          ; store into temp. buffer
5303+ 3ED3 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3ED6 2C                   defb    ','
5305+ 3ED7 CD CB 32             call    GETINT          ; get Y coord.
5306+ 3EDA FE 18                cp      $18             ; is it in range 0~23?
5307+ 3EDC D2 7F 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3EDF 32 3D 61             ld      (GY),A          ; store into temp. buffer
5309+ 3EE2 11 39 61             ld      DE,TMPCLR
5310+ 3EE5 3A 36 61             ld      A,(BKGNDCLR)    ; load background color
5311+ 3EE8 12                   ld      (DE),A          ; store into temp buff
5312+ 3EE9 3A 35 61             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3EEC 1B                   dec     DE
5314+ 3EED 1B                   dec     DE
5315+ 3EEE 12                   ld      (DE),A          ; store into temp buff
5316+ 3EEF CD 7A 3F             call    CKCOL           ; check color
5317+ 3EF2 CA FA 3E             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3EF5 13                   inc     DE
5319+ 3EF6 13                   inc     DE
5320+ 3EF7 CD 7A 3F             call    CKCOL           ; check background color
5321+ 3EFA CD 7D 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3EFD 32 37 61             ld      (MIXCOL),A      ; store mixed colors
5323+ 3F00 E5                   push    HL              ; store code string address
5324+ 3F01 ED 4B 41 61          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3F05 ED 5B 43 61          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3F09 1C                   inc     E               ; Length + 1
5327+ 3F0A CD 0F 3F             call    GPNT            ; print on G2
5328+ 3F0D E1                   pop     HL              ; recover HL
5329+ 3F0E C9                   ret                     ; return to caller
5330+ 3F0F D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F10                      ; calculate VRAM address of first char
5332+ 3F10 3A 3B 61             LD      A,(GX)          ; load X
5333+ 3F13 6F                   ld      L,A             ;
5334+ 3F14 26 00                ld      H,0             ; HL = X
5335+ 3F16 29                   add     HL,HL           ;
5336+ 3F17 29                   add     HL,HL           ;
5337+ 3F18 29                   add     HL,HL           ; X=X*8
5338+ 3F19 3A 3D 61             ld      A,(GY)          ; load Y
5339+ 3F1C 57                   ld      D,A             ; move it into D
5340+ 3F1D 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F1F 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F20 22 3F 61             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F23 D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F24 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F25 C8                   ret     Z               ; End of string - return
5346+ 3F26 D5                   push    DE              ; store chars counter
5347+ 3F27                      ; calculate dest address in color vram
5348+ 3F27 2A 3F 61             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F2A 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F2D 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F2E F3                   di                      ; disable INTs
5352+ 3F2F                      ; send color settings
5353+ 3F2F CD 66 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F32 3A 37 61             ld      A,(MIXCOL)      ; load color settings
5355+ 3F35 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F37 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F39 ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F3B 00                   nop                     ; wait...
5359+ 3F3C 00                   nop                     ; ...a...
5360+ 3F3D 00                   nop                     ; ...while
5361+ 3F3E 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F40                      ; calculate source address
5363+ 3F40 2A 41 61             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F43 7E                   ld      A,(HL)          ; get char
5365+ 3F44 23                   inc     HL              ; increment char pointer
5366+ 3F45 22 41 61             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F48 6F                   ld      L,A             ;
5368+ 3F49 26 00                ld      H,$00           ; char into HL
5369+ 3F4B 29                   add     HL,HL           ;
5370+ 3F4C 29                   add     HL,HL           ;
5371+ 3F4D 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F4E 11 2E 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F51 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F52 EB                   ex      DE,HL           ; store address into DE
5375+ 3F53 2A 3F 61     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F56 CD 66 06             call    SETVDPADRS      ; send it to VDP
5377+ 3F59 EB                   ex      DE,HL           ; restore address into HL
5378+ 3F5A 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3F5C 0D                   dec     C              ; VDP data mode
5380+ 3F5D ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3F5F 00                   nop                     ; wait...
5382+ 3F60 00                   nop                     ; ...a...
5383+ 3F61 00                   nop                     ; ...while
5384+ 3F62 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3F64 FB                   ei                      ; re-enable INTs
5386+ 3F65 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3F68 2A 3F 61             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3F6B 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3F6C 22 3F 61             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3F6F 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3F72 CD F8 4C             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3F75 D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3F76 D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3F77 C3 24 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3F7A
5396+ 3F7A              ; used by GPRINT to get a color argument (if present)
5397+ 3F7A 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3F7B CD B4 25             call    GETCHR          ; Get next character
5399+ 3F7E C8                   ret     Z               ; return if nothing follows
5400+ 3F7F CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3F82 2C                   defb    ','
5402+ 3F83 D5                   push    DE              ; store DE
5403+ 3F84 CD CB 32             call    GETINT          ; get value
5404+ 3F87 CD 8A 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3F8A D1                   pop     DE              ; retrieve DE
5406+ 3F8B 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3F8C C9                   ret                     ; return to caller
5408+ 3F8D
5409+ 3F8D
5410+ 3F8D              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3F8D              ; at point X,Y, using default color or, if used, with
5412+ 3F8D              ; color set by C
5413+ 3F8D              ; TMPBFR1       X
5414+ 3F8D              ; TMPBFR2       Y
5415+ 3F8D              ; TMPBFR3       COLOR
5416+ 3F8D              PNT     equ     VIDEOBUFF
5417+ 3F8D              SPA     equ     VIDEOBUFF+$02
5418+ 3F8D              SPB     equ     VIDEOBUFF+$03
5419+ 3F8D              ORGSP   equ     VIDEOBUFF+$04
5420+ 3F8D CD 94 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3F90 CD CB 32             call    GETINT          ; get X
5422+ 3F93 32 37 61             ld      (TMPBFR1),A     ; store X
5423+ 3F96 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3F99 2C                   defb    ','
5425+ 3F9A CD CB 32             call    GETINT          ; get Y coords,
5426+ 3F9D FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3F9F D2 7F 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3FA2 32 39 61             ld      (TMPBFR2),A     ; store Y
5429+ 3FA5 CD 89 44             call    CLRPRM          ; check if color has been passed
5430+ 3FA8 3A 3B 61             ld      A,(TMPBFR3)     ; load color
5431+ 3FAB A7                   and     A               ; check if 0
5432+ 3FAC CA 7F 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FAF E5                   push    HL              ; store HL
5434+ 3FB0 C5                   push    BC              ; store BC
5435+ 3FB1 D5                   push    DE              ; store DE
5436+ 3FB2                      ; start algorithm
5437+ 3FB2 CD C5 40             call    PNTRTN          ; check if pixel is already set
5438+ 3FB5 C2 69 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 3FB8 ED 73 43 61          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 3FBC 21 01 00             ld      HL,$0001        ; HL=1
5441+ 3FBF 22 3F 61             ld      (PNT),HL        ; set PNT
5442+ 3FC2 3A 37 61             ld      A,(TMPBFR1)     ; load starting X...
5443+ 3FC5 47                   ld      B,A             ; ...into B
5444+ 3FC6 3A 39 61             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 3FC9 4F                   ld      C,A             ; ...into C
5446+ 3FCA C5                   push    BC              ; store starting X,Y into stack
5447+ 3FCB                      ; main loop
5448+ 3FCB 2A 3F 61     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 3FCE 7C                   ld      A,H             ; check if PNT=0
5450+ 3FCF B5                   or      L
5451+ 3FD0 CA 65 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 3FD3 2B                   dec     HL              ; no, so decrement PNT...
5453+ 3FD4 22 3F 61             ld      (PNT),HL        ; ...and store it
5454+ 3FD7 C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 3FD8 CD 6D 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 3FDB 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 3FDD 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 3FDE A7                   and     A               ; (reached the limit of the screen)
5459+ 3FDF CA E7 3F             jp      Z,PAINT1        ; yes, jump over
5460+ 3FE2 05                   dec     B               ; no, decrement X1...
5461+ 3FE3 C3 D8 3F             jp      PAINT0          ; ...and repeat
5462+ 3FE6 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 3FE7 AF           PAINT1: xor     A               ; reset A
5464+ 3FE8 57                   ld      D,A             ; set SA=0
5465+ 3FE9 5F                   ld      E,A             ; set SB=0
5466+ 3FEA CD 6D 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 3FED 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 3FEF 78                   ld      A,B             ; copy X1
5469+ 3FF0 32 37 61             ld      (TMPBFR1),A     ; into buffer
5470+ 3FF3 79                   ld      A,C             ; copy Y
5471+ 3FF4 32 39 61             ld      (TMPBFR2),A     ; into buffer
5472+ 3FF7 CD EB 40             call    CNTPLOT         ; plot pixel X1,Y
5473+ 3FFA 7A                   ld      A,D             ; load SA into A
5474+ 3FFB A7                   and     A               ; SA=0?
5475+ 3FFC 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 3FFE 79                   ld      A,C             ; load Y
5477+ 3FFF FE 01                cp      $01             ; Y>0?
5478+ 4001 DA 1A 40             jp      C,PAINT2        ; no, jump over
5479+ 4004 3D                   dec     A               ; yes, Y=Y-1
5480+ 4005 CD 6E 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 4008 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 400A 0D                   dec     C               ; Y=Y-1
5483+ 400B C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 400C 0C                   inc     C               ; retrieve original Y
5485+ 400D 2A 3F 61             ld      HL,(PNT)        ; load PNT
5486+ 4010 23                   inc     HL              ; increment PNT
5487+ 4011 22 3F 61             ld      (PNT),HL        ; store new PNT
5488+ 4014 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 4016 57                   ld      D,A             ; ...store SA into memory
5490+ 4017 C3 2D 40             jp      PAINT3          ; jump over
5491+ 401A 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 401B 1F                   rra                     ; check if SA=1
5493+ 401C 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 401E 79                   ld      A,C             ; load Y
5495+ 401F FE 01                cp      $01             ; Y>0?
5496+ 4021 DA 2D 40             jp      C,PAINT3        ; no, jump over
5497+ 4024 3D                   dec     A               ; Y=Y-1
5498+ 4025 CD 6E 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 4028 CA 2D 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 402B AF                   xor     A               ; pixel is on, so...
5501+ 402C 57                   ld      D,A             ; ...set SA=0
5502+ 402D 7B           PAINT3: ld      A,E             ; check if...
5503+ 402E A7                   and     A               ; SB=0
5504+ 402F 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 4031 79                   ld      A,C             ; load Y
5506+ 4032 FE BF                cp      $BF             ; Y<191?
5507+ 4034 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 4036 3C                   inc     A               ; Y=Y+1
5509+ 4037 CD 6E 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 403A 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 403C 0C                   inc     C               ; Y=Y+1
5512+ 403D C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 403E 0D                   dec     C               ; retrieve original Y
5514+ 403F 2A 3F 61             ld      HL,(PNT)        ; PNT
5515+ 4042 23                   inc     HL              ; PNT=PNT+1
5516+ 4043 22 3F 61             ld      (PNT),HL        ; store PNT
5517+ 4046 3E 01                ld      A,$01           ; SB=1
5518+ 4048 5F                   ld      E,A             ; set SB
5519+ 4049 C3 5E 40             jp      PAINT5          ; jump over
5520+ 404C 7B           PAINT4: ld      A,E             ; load SB
5521+ 404D 1F                   rra                     ; check if SB=1
5522+ 404E 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 4050 79                   ld      A,C             ; load Y
5524+ 4051 FE BF                cp      $BF             ; Y<191?
5525+ 4053 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 4055 3C                   inc     A               ; Y=Y+1
5527+ 4056 CD 6E 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 4059 CA 5E 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 405C AF                   xor     A               ; pixel is on, so...
5530+ 405D 5F                   ld      E,A             ; ...set SB=0
5531+ 405E 04           PAINT5: inc     B               ; X1=X1+1
5532+ 405F CA CB 3F             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 4062 C3 EA 3F             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 4065 ED 7B 43 61  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 4069 D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 406A C1                   pop     BC              ; retrieve BC
5537+ 406B E1                   pop     HL              ; retrieve HL
5538+ 406C C9                   ret                     ; return to caller
5539+ 406D 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 406E 32 39 61     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 4071 78                   ld      A,B             ; copy X1 into A
5542+ 4072 32 37 61             ld      (TMPBFR1),A     ; store X1
5543+ 4075 C5                   push    BC              ; save X1,Y
5544+ 4076 D5                   push    DE
5545+ 4077 CD C5 40             call    PNTRTN          ; check if pixel is set/reset
5546+ 407A D1                   pop     DE
5547+ 407B C1                   pop     BC              ; retrieve X1,Y
5548+ 407C C9                   ret                     ; return to caller
5549+ 407D
5550+ 407D
5551+ 407D              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 407D CD 94 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 4080 CD 6B 23             call    CHKSYN          ; make sure "(" follows
5554+ 4083 28                   defb    '('
5555+ 4084 CD CB 32             call    GETINT          ; get X coords.
5556+ 4087 32 37 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 408A CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5558+ 408D 2C                   defb    ','
5559+ 408E CD CB 32             call    GETINT          ; get Y coords,
5560+ 4091 FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 4093 D2 7F 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 4096 32 39 61             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 4099 CD 6B 23             call    CHKSYN          ; make sure ")" follows
5564+ 409C 29                   defb    ')'
5565+ 409D E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 409E FD E1                pop     IY              ; ...into IY
5567+ 40A0 CD C5 40             call    PNTRTN          ; check if pixel is set or reset
5568+ 40A3 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 40A5 AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 40A6 47                   ld      B,A             ; ...and B
5571+ 40A7 E1           PNTEND: pop     HL              ; drop original return point
5572+ 40A8 FD E5                push    IY              ; load current string address from IY into stack
5573+ 40AA 11 30 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40AD D5                   push    DE              ; ...saved on stack
5575+ 40AE C3 2F 2E             jp      ABPASS          ; return AB
5576+ 40B1 CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40B3 F3                   di
5578+ 40B4 CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40B7 FB                   ei
5580+ 40B8 CB 3F                srl     A               ; shift A...
5581+ 40BA CB 3F                srl     A               ; ...4 times...
5582+ 40BC CB 3F                srl     A               ; ...to move foreground color...
5583+ 40BE CB 3F                srl     A               ; ...into lowest nibble
5584+ 40C0 47                   ld      B,A             ; color into B
5585+ 40C1 AF                   xor     A               ; reset MSB
5586+ 40C2 C3 A7 40             jp      PNTEND          ; return AB
5587+ 40C5 CD 38 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 40C8 57                   ld      D,A             ; store pixel index
5589+ 40C9 F3                   di                      ; disable INTs
5590+ 40CA CD 86 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 40CD FB                   ei                      ; re-enable INTs
5592+ 40CE A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 40CF C9                   ret                     ; return to caller
5594+ 40D0
5595+ 40D0
5596+ 40D0              ; PLOT X,Y[,color]
5597+ 40D0              ; plot a pixel in graphic mode 2
5598+ 40D0 CD 94 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 40D3 CD CB 32             call    GETINT          ; get X coords.
5600+ 40D6 32 37 61             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 40D9 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5602+ 40DC 2C                   defb    ','
5603+ 40DD CD CB 32             call    GETINT          ; get Y coords,
5604+ 40E0 FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 40E2 D2 7F 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 40E5 32 39 61             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 40E8 CD 89 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 40EB E5           CNTPLOT:push    HL              ; store HL
5609+ 40EC C5                   push    BC              ; store BC
5610+ 40ED D5                   push    DE              ; store DE
5611+ 40EE CD 38 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 40F1 D2 2C 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 40F4 57                   ld      D,A             ; move pixel value into D
5614+ 40F5 3A 3B 61             ld      A,(TMPBFR3)     ; retrieve color
5615+ 40F8 A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 40F9 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 40FB F3                   di                      ; yes - so, disable INTs
5618+ 40FC CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 40FF FB                   ei                      ; re-enable INTs
5620+ 4100 5F                   ld      E,A             ; store value of cell
5621+ 4101 7A                   ld      A,D             ; retrieve pixel
5622+ 4102 2F                   cpl                     ; revert bits
5623+ 4103 A3                   and     E               ; set video pixel to off
5624+ 4104 F3                   di                      ; disable INTs
5625+ 4105 CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 4108 FB                   ei                      ; re-enable INTs
5627+ 4109 C3 2C 41             jp      NOGD            ; leave
5628+ 410C 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 410D 87                   add     A,A             ; in the high nibble
5630+ 410E 87                   add     A,A             ; by adding A to itself
5631+ 410F 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 4110 5F                   ld      E,A             ; move it into E
5633+ 4111 F3                   di                      ; disable INTs
5634+ 4112 CD 86 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 4115 FB                   ei
5636+ 4116 B2                   or      D               ; merge new pixel preserving original pattern
5637+ 4117 F3                   di
5638+ 4118 CD 9B 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 411B FB                   ei
5640+ 411C CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 411E F3                   di
5642+ 411F CD 86 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 4122 FB                   ei
5644+ 4123 E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 4125 B3                   or      E               ; set new foreground color
5646+ 4126 F3                   di
5647+ 4127 CD 9B 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 412A FB                   ei                      ; re-enable INTs
5649+ 412B 00                   nop                     ; wait for INTs to be enabled again
5650+ 412C D1           NOGD:   pop     DE              ; retrieve DE
5651+ 412D C1                   pop     BC              ; retrieve BC
5652+ 412E E1                   pop     HL              ; retrieve HL
5653+ 412F C9                   ret                     ; return to caller
5654+ 4130 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 4134 08 04 02 01
5655+ 4138                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 4138
5657+ 4138
5658+ 4138              ; compute the VRAM address of the byte containing the pixel
5659+ 4138              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 4138              ; byte address is returned into HL
5661+ 4138              ; pixel is returned into A
5662+ 4138              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 4138                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 4138                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 4138 3A 39 61             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 413B FE C0                cp      $C0             ; Y>=192?
5667+ 413D D0                   ret     NC              ; yes, so leave
5668+ 413E 1E 08                ld      E,$08           ; load E with divisor
5669+ 4140 57                   ld      D,A             ; and store into D (dividend)
5670+ 4141 CD 43 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 4144 4F                   ld      C,A             ; store remainder into C
5672+ 4145 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 4146 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 4148 3A 37 61             ld      A,(TMPBFR1)     ; retrieve X
5675+ 414B 57                   ld      D,A             ; and move it into D (dividend)
5676+ 414C CD 43 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 414F 4F                   ld      C,A             ; store remainder into C
5678+ 4150 7A                   ld      A,D             ; move quotient into A
5679+ 4151 87                   add     A,A             ; multiply quotient by 8
5680+ 4152 87                   add     A,A
5681+ 4153 87                   add     A,A
5682+ 4154 5F                   ld      E,A             ; store result into E
5683+ 4155 16 00                ld      D,$00           ; reset D
5684+ 4157 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 4158 EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 4159 21 30 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 415C 06 00                ld      B,$00           ; reset B
5688+ 415E 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 415F 7E                   ld      A,(HL)          ; load pixel data
5690+ 4160 EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 4161 37                   scf                     ; set Carry for normal exit
5692+ 4162 C9                   ret                     ; return to caller
5693+ 4163
5694+ 4163
5695+ 4163              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 4163              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 4163              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 4163              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 4163              ; the values. If color is not specified, the foreground color set
5700+ 4163              ; with COLOR will be used
5701+ 4163              X1      equ     TMPBFR1
5702+ 4163              Y1      equ     TMPBFR2
5703+ 4163              X2      equ     VIDEOBUFF
5704+ 4163              Y2      equ     VIDEOBUFF+$02
5705+ 4163              ER      equ     VIDEOBUFF+$04
5706+ 4163              E2      equ     VIDEOBUFF+$06
5707+ 4163              SX      equ     VIDEOBUFF+$08
5708+ 4163              SY      equ     VIDEOBUFF+$0A
5709+ 4163              DX      equ     VIDEOBUFF+$0C
5710+ 4163              DY      equ     VIDEOBUFF+$0E
5711+ 4163 CD 94 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 4166 CD 6B 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 4169 CD 7A 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 416C CD CB 32             call    GETINT          ; get X1 coords.
5715+ 416F 32 37 61             ld      (X1),A          ; store it into a temp buffer
5716+ 4172 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5717+ 4175 2C                   defb    ','
5718+ 4176 CD CB 32             call    GETINT          ; get Y1 coords.
5719+ 4179 FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 417B D2 7F 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 417E 32 39 61             ld      (Y1),A          ; store into a temp buffer
5722+ 4181 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5723+ 4184 2C                   defb    ','
5724+ 4185 CD CB 32             call    GETINT          ; get X2 coords.
5725+ 4188 32 3F 61             ld      (X2),A          ; store it into a temp buffer
5726+ 418B CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5727+ 418E 2C                   defb    ','
5728+ 418F CD CB 32             call    GETINT          ; get Y2 coords
5729+ 4192 FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 4194 D2 7F 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 4197 32 41 61             ld      (Y2),A          ; store it into a temp buffer
5732+ 419A CD 89 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 419D E5                   push    HL              ; store register we'll use
5734+ 419E D5                   push    DE
5735+ 419F C5                   push    BC
5736+ 41A0 ED 5B 37 61          ld      DE,(X1)         ; load X1 and
5737+ 41A4 2A 3F 61             ld      HL,(X2)         ; X2
5738+ 41A7 B7                   or      A               ; clear CARRY
5739+ 41A8 ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 41AA CD 39 4D             call    absHL           ; DX=ABS(DX)
5741+ 41AD 22 4B 61             ld      (DX),HL         ; store DX
5742+ 41B0 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41B3 2A 37 61             ld      HL,(X1)
5744+ 41B6 ED 5B 3F 61          ld      DE,(X2)
5745+ 41BA CD F8 4C             call    CMP16           ; X1<X2?
5746+ 41BD CA C6 41             jp      Z,X1GR          ; no, X1=X2
5747+ 41C0 F2 C6 41             jp      P,X1GR          ; no, X1>X2
5748+ 41C3 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 41C6 ED 43 47 61  X1GR:   ld      (SX),BC         ; store SX
5750+ 41CA ED 5B 39 61          ld      DE,(Y1)
5751+ 41CE 2A 41 61             ld      HL,(Y2)
5752+ 41D1 B7                   or      A               ; clear Carry
5753+ 41D2 ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 41D4 CD 39 4D             call    absHL           ; DY=ABS(DY)
5755+ 41D7 22 4D 61             ld      (DY),HL         ; store DY
5756+ 41DA 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 41DD 2A 39 61             ld      HL,(Y1)
5758+ 41E0 ED 5B 41 61          ld      DE,(Y2)
5759+ 41E4 CD F8 4C             call    CMP16           ; is Y1<Y2?
5760+ 41E7 CA F0 41             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 41EA F2 F0 41             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 41ED 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 41F0 ED 43 49 61  Y1GR:   ld      (SY),BC         ; store SY
5764+ 41F4 2A 4D 61             ld      HL,(DY)         ; ER=DY
5765+ 41F7 CD 3C 4D             call    negHL           ; ER=-DY
5766+ 41FA 22 43 61             ld      (ER),HL         ; store ER
5767+ 41FD 2A 4B 61             ld      HL,(DX)
5768+ 4200 ED 5B 4D 61          ld      DE,(DY)
5769+ 4204 CD F8 4C             call    CMP16           ; DX>DY?
5770+ 4207 CA 13 42             jp      Z,ER2           ; no, DX=DY
5771+ 420A FA 13 42             jp      M,ER2           ; no, DX<DY
5772+ 420D 2A 4B 61             ld      HL,(DX)         ; reload DX
5773+ 4210 22 43 61             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 4213 2A 43 61     ER2:    ld      HL,(ER)         ; load ER
5775+ 4216 CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 4218 CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 421A CB 7C                bit     7,H             ; is the number negative?
5778+ 421C CA 20 42             jp      Z,STRE2         ; no, jump over
5779+ 421F 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 4220 22 43 61     STRE2:  ld      (ER),HL         ; store ER
5781+ 4223 CD EB 40     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 4226 2A 37 61             ld      HL,(X1)
5783+ 4229 ED 5B 3F 61          ld      DE,(X2)
5784+ 422D CD F8 4C             call    CMP16           ; X1=X2?
5785+ 4230 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 4232 2A 39 61             ld      HL,(Y1)         ; yes, so check
5787+ 4235 ED 5B 41 61          ld      DE,(Y2)         ; also Y
5788+ 4239 CD F8 4C             call    CMP16           ; Y1=Y2?
5789+ 423C CA 98 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 423F ED 5B 43 61  CNTDRW: ld      DE,(ER)
5791+ 4243 ED 53 45 61          ld      (E2),DE         ; E2=ER
5792+ 4247 2A 4B 61             ld      HL,(DX)
5793+ 424A CD 3C 4D             call    negHL           ; DX=-DX
5794+ 424D EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 424E CD F8 4C             call    CMP16           ; E2>-DX?
5796+ 4251 CA 6F 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 4254 FA 6F 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 4257 2A 43 61             ld      HL,(ER)         ; yes
5799+ 425A ED 5B 4D 61          ld      DE,(DY)
5800+ 425E B7                   or      A               ; clear CARRY
5801+ 425F ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 4261 22 43 61             ld      (ER),HL
5803+ 4264 2A 37 61             ld      HL,(X1)
5804+ 4267 ED 5B 47 61          ld      DE,(SX)
5805+ 426B 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 426C 22 37 61             ld      (X1),HL
5807+ 426F 2A 45 61     DXGR:   ld      HL,(E2)
5808+ 4272 ED 5B 4D 61          ld      DE,(DY)
5809+ 4276 CD F8 4C             call    CMP16           ; E2<DY?
5810+ 4279 CA 23 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 427C F2 23 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 427F 2A 43 61             ld      HL,(ER)         ; yes
5813+ 4282 ED 5B 4B 61          ld      DE,(DX)
5814+ 4286 19                   add     HL,DE           ; ER=ER+DX
5815+ 4287 22 43 61             ld      (ER),HL
5816+ 428A 2A 39 61             ld      HL,(Y1)
5817+ 428D ED 5B 49 61          ld      DE,(SY)
5818+ 4291 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 4292 22 39 61             ld      (Y1),HL
5820+ 4295 C3 23 42             jp      RPTDRW          ; repeat
5821+ 4298 C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 4299 D1                   pop     DE              ; retrieve DE
5823+ 429A E1                   pop     HL              ; retrieve HL
5824+ 429B C9                   ret                     ; return to caller
5825+ 429C
5826+ 429C
5827+ 429C              ; CIRCLE X,Y,R[,C]
5828+ 429C              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 429C              ; and radius R, with optional color C. If color is not specified, the
5830+ 429C              ; foreground color set with COLOR will be used
5831+ 429C              XC      equ     VIDEOBUFF
5832+ 429C              YC      equ     VIDEOBUFF+$02
5833+ 429C              RADIUS  equ     VIDEOBUFF+$04
5834+ 429C              XI      equ     VIDEOBUFF+$06
5835+ 429C              YI      equ     VIDEOBUFF+$08
5836+ 429C              DC      equ     VIDEOBUFF+$0A
5837+ 429C CD 94 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 429F CD 7A 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 42A2 CD CB 32             call    GETINT          ; get X coords.
5840+ 42A5 32 3F 61             ld      (XC),A          ; store it into a temp buffer
5841+ 42A8 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5842+ 42AB 2C                   defb    ','
5843+ 42AC CD CB 32             call    GETINT          ; get Y coords,
5844+ 42AF 32 41 61             ld      (YC),A          ; store it into a temp buffer
5845+ 42B2 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42B5 2C                   defb    ','
5847+ 42B6 CD CB 32             call    GETINT          ; get radius
5848+ 42B9 32 43 61             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 42BC CD 89 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 42BF C5                   push    BC              ; store BC
5851+ 42C0 D5                   push    DE              ; store DE
5852+ 42C1 E5                   push    HL              ; store HL
5853+ 42C2 AF                   xor     A               ; clear A,
5854+ 42C3 47                   ld      B,A             ; B,
5855+ 42C4 4F                   ld      C,A             ; C,
5856+ 42C5 57                   ld      D,A             ; D,
5857+ 42C6 67                   ld      H,A             ; and H
5858+ 42C7 ED 43 45 61          ld      (XI),BC         ; clear XI
5859+ 42CB 3A 43 61             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 42CE 6F                   ld      L,A             ; HL now contains R
5861+ 42CF 22 47 61             ld      (YI),HL         ; YI=RADIUS
5862+ 42D2 29                   add     HL,HL           ; R*2
5863+ 42D3 EB                   ex      DE,HL           ; put HL into DE
5864+ 42D4 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 42D7 AF                   xor     A               ; clear Carry
5866+ 42D8 ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 42DA 22 49 61             ld      (DC),HL         ; store D
5868+ 42DD CD 3C 43             call    DRWCRL          ; draw initial point
5869+ 42E0 ED 5B 45 61  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 42E4 2A 47 61             ld      HL,(YI)         ; load YI
5871+ 42E7 CD F8 4C             call    CMP16           ; is YI<DI?
5872+ 42EA CA F3 42             jp      Z,RPTCL1        ; no, YI=XI
5873+ 42ED F2 F3 42             jp      P,RPTCL1        ; no, YI>XI
5874+ 42F0 C3 38 43             jp      ENDCRL          ; yes, so we've finished
5875+ 42F3 21 45 61     RPTCL1: ld      HL,XI
5876+ 42F6 34                   inc     (HL)            ; XI=XI+1
5877+ 42F7 2A 49 61             ld      HL,(DC)         ; load D
5878+ 42FA 7C                   ld      A,H
5879+ 42FB B5                   or      L               ; is D=0? Yes, jump over
5880+ 42FC CA 20 43             jp      Z,DLSZ
5881+ 42FF CB 7C                bit     7,H             ; is D<0?
5882+ 4301 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 4303 ED 5B 47 61          ld      DE,(YI)         ; D>0
5884+ 4307 1B                   dec     DE              ; so, YI=YI-1
5885+ 4308 ED 53 47 61          ld      (YI),DE         ; store YI
5886+ 430C AF                   xor     A               ; clear Carry
5887+ 430D 2A 45 61             ld      HL,(XI)
5888+ 4310 ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 4312 29                   add     HL,HL
5890+ 4313 29                   add     HL,HL           ; HL=HL*4
5891+ 4314 11 0A 00             ld      DE,10
5892+ 4317 19                   add     HL,DE           ; HL=HL+10
5893+ 4318 ED 5B 49 61          ld      DE,(DC)         ; load D
5894+ 431C EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 431D 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 431E 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 4320 2A 45 61     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 4323 29                   add     HL,HL
5899+ 4324 29                   add     HL,HL           ; XI=XI*4
5900+ 4325 11 06 00             ld      DE,$0006
5901+ 4328 19                   add     HL,DE
5902+ 4329 ED 5B 49 61          ld      DE,(DC)
5903+ 432D EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 432E 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 432F 22 49 61     PLTCRL: ld      (DC),HL         ; store new D
5906+ 4332 CD 3C 43             call    DRWCRL          ; plot pixel
5907+ 4335 C3 E0 42             jp      RPTCRL          ; repeat
5908+ 4338 E1           ENDCRL: pop     HL
5909+ 4339 D1                   pop     DE
5910+ 433A C1                   pop     BC
5911+ 433B C9                   ret                     ; return to caller
5912+ 433C 2A 3F 61     DRWCRL: ld      HL,(XC)
5913+ 433F ED 5B 45 61          ld      DE,(XI)
5914+ 4343 19                   add     HL,DE           ; X=XC+XI
5915+ 4344 22 37 61             ld      (X1),HL         ; store X
5916+ 4347 CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 434A DA 5E 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 434D 2A 41 61             ld      HL,(YC)
5919+ 4350 ED 5B 47 61          ld      DE,(YI)
5920+ 4354 19                   add     HL,DE           ; Y=YC+YI
5921+ 4355 22 39 61             ld      (Y1),HL         ; store Y
5922+ 4358 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 435B D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 435E AF           CNTCL1: xor     A               ; clear Carry
5925+ 435F 2A 3F 61             ld      HL,(XC)
5926+ 4362 ED 5B 45 61          ld      DE,(XI)
5927+ 4366 ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 4368 22 37 61             ld      (X1),HL         ; store X
5929+ 436B CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 436E DA 82 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 4371 2A 41 61             ld      HL,(YC)
5932+ 4374 ED 5B 47 61          ld      DE,(YI)
5933+ 4378 19                   add     HL,DE           ; Y=YC+YI
5934+ 4379 22 39 61             ld      (Y1),HL         ; store Y
5935+ 437C CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 437F D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 4382 2A 3F 61     CNTCL2: ld      HL,(XC)
5938+ 4385 ED 5B 45 61          ld      DE,(XI)
5939+ 4389 19                   add     HL,DE           ; X=XC+XI
5940+ 438A 22 37 61             ld      (X1),HL         ; store X
5941+ 438D CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 4390 DA A6 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 4393 AF                   xor     A               ; clear Carry
5944+ 4394 2A 41 61             ld      HL,(YC)
5945+ 4397 ED 5B 47 61          ld      DE,(YI)
5946+ 439B ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 439D 22 39 61             ld      (Y1),HL         ; store Y
5948+ 43A0 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 43A3 D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 43A6 AF           CNTCL3: xor     A               ; clear Carry
5951+ 43A7 2A 3F 61             ld      HL,(XC)
5952+ 43AA ED 5B 45 61          ld      DE,(XI)
5953+ 43AE ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43B0 22 37 61             ld      (X1),HL         ; store X
5955+ 43B3 CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43B6 DA CC 43             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 43B9 AF                   xor     A               ; clear Carry
5958+ 43BA 2A 41 61             ld      HL,(YC)
5959+ 43BD ED 5B 47 61          ld      DE,(YI)
5960+ 43C1 ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 43C3 22 39 61             ld      (Y1),HL         ; store Y
5962+ 43C6 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 43C9 D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 43CC 2A 3F 61     CNTCL4: ld      HL,(XC)
5965+ 43CF ED 5B 47 61          ld      DE,(YI)
5966+ 43D3 19                   add     HL,DE           ; X=XC+YI
5967+ 43D4 22 37 61             ld      (X1),HL         ; store X
5968+ 43D7 CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 43DA DA EE 43             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 43DD 2A 41 61             ld      HL,(YC)
5971+ 43E0 ED 5B 45 61          ld      DE,(XI)
5972+ 43E4 19                   add     HL,DE           ; Y=YC+XI
5973+ 43E5 22 39 61             ld      (Y1),HL         ; store Y
5974+ 43E8 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 43EB D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 43EE AF           CNTCL5: xor     A               ; clear Carry
5977+ 43EF 2A 3F 61             ld      HL,(XC)
5978+ 43F2 ED 5B 47 61          ld      DE,(YI)
5979+ 43F6 ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 43F8 22 37 61             ld      (X1),HL         ; store X
5981+ 43FB CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 43FE DA 12 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 4401 2A 41 61             ld      HL,(YC)
5984+ 4404 ED 5B 45 61          ld      DE,(XI)
5985+ 4408 19                   add     HL,DE           ; Y=YC+XI
5986+ 4409 22 39 61             ld      (Y1),HL         ; store Y
5987+ 440C CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 440F D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 4412 2A 3F 61     CNTCL6: ld      HL,(XC)
5990+ 4415 ED 5B 47 61          ld      DE,(YI)
5991+ 4419 19                   add     HL,DE           ; X=XC+YI
5992+ 441A 22 37 61             ld      (X1),HL         ; store X
5993+ 441D CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 4420 DA 36 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 4423 AF                   xor     A               ; clear Carry
5996+ 4424 2A 41 61             ld      HL,(YC)
5997+ 4427 ED 5B 45 61          ld      DE,(XI)
5998+ 442B ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 442D 22 39 61             ld      (Y1),HL         ; store Y
6000+ 4430 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 4433 D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 4436 AF           CNTCL7: xor     A               ; clear Carry
6003+ 4437 2A 3F 61             ld      HL,(XC)
6004+ 443A ED 5B 47 61          ld      DE,(YI)
6005+ 443E ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 4440 22 37 61             ld      (X1),HL         ; store X
6007+ 4443 CD 5B 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 4446 D8                   ret     C               ; if Carry is set, X is not valid
6009+ 4447 AF                   xor     A               ; clear Carry
6010+ 4448 2A 41 61             ld      HL,(YC)
6011+ 444B ED 5B 45 61          ld      DE,(XI)
6012+ 444F ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 4451 22 39 61             ld      (Y1),HL         ; store Y
6014+ 4454 CD 60 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 4457 D4 EB 40             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 445A C9                   ret                     ; return to caller
6017+ 445B
6018+ 445B              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 445B              ; input: HL (value to check), can be negative
6020+ 445B              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 445B              ; destroys: A
6022+ 445B AF           VALIDX: xor     A               ; reset A
6023+ 445C B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 445D C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 445E 37                   scf                     ; set Carry flag to raise error
6026+ 445F C9                   ret                     ; return to caller
6027+ 4460
6028+ 4460 AF           VALIDY: xor     A               ; reset A
6029+ 4461 B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 4462 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 4464 37                   scf                     ; no, raise error by setting Carry flag
6032+ 4465 C9                   ret                     ; return to caller
6033+ 4466 7D           CNTVALY:ld      A,L
6034+ 4467 FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 4469 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 446A C9                   ret                     ; return to caller
6037+ 446B
6038+ 446B
6039+ 446B
6040+ 446B              ; cleat TMPBFR1-4 buffers before using them
6041+ 446B AF           CLRTMBF:xor     A               ; reset A
6042+ 446C E5                   push    HL              ; store HL
6043+ 446D C5                   push    BC              ; store BC
6044+ 446E 21 37 61             ld      HL,TMPBFR1      ; address of 1st location
6045+ 4471 06 08                ld      B,$08           ; 8 locations
6046+ 4473 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 4474 23                   inc     HL              ; next location
6048+ 4475 10 FC                djnz    RPCLTMB         ; repeat
6049+ 4477 C1                   pop     BC              ; retrieve BC
6050+ 4478 E1                   pop     HL              ; retrieve HL
6051+ 4479 C9                   ret                     ; return to caller
6052+ 447A
6053+ 447A
6054+ 447A              ; clear VIDEOBUFF before using it as temp buffer
6055+ 447A AF           CLRVDBF:xor     A               ; clear A
6056+ 447B C5                   push    BC              ; store BC
6057+ 447C E5                   push    HL              ; store HL
6058+ 447D 06 28                ld      B,$28           ; 40 cells
6059+ 447F 21 3F 61             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 4482 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 4483 23                   inc     HL              ; next cell
6062+ 4484 10 FC                djnz    RPTCVBF         ; repeat
6063+ 4486 E1                   pop     HL              ; retrieve HL
6064+ 4487 C1                   pop     BC              ; retrieve BC
6065+ 4488 C9                   ret                     ; return to caller
6066+ 4489
6067+ 4489
6068+ 4489              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 4489              ; commands. If not present, the default foreground color will be used
6070+ 4489 3A 35 61     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 448C 32 3B 61             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 448F 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 4490 CD B4 25             call    GETCHR          ; Get next character
6074+ 4493 C8                   ret     Z               ; return foreground color if nothing follows
6075+ 4494 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6076+ 4497 2C                   defb    ','
6077+ 4498 CD CB 32             call    GETINT          ; get value
6078+ 449B CD 8E 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 449E 32 3B 61             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 44A1 C9                   ret                     ; return to caller
6081+ 44A2
6082+ 44A2
6083+ 44A2              ; no graphics mode error: raised when a graphics command is invoked
6084+ 44A2              ; out of graphic 2 mode.
6085+ 44A2 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 44A4 C3 85 20             jp      ERROR           ; print error
6087+ 44A7
6088+ 44A7
6089+ 44A7              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 44A7              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 44A7              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 44A7              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 44A7              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 44A7              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 44A7              ; they are assumed to be 8,0,1 resp.
6096+ 44A7              PRTNUM  equ     VIDEOBUFF
6097+ 44A7              BPS     equ     PRTNUM+$01
6098+ 44A7              DATABT  equ     BPS+$02
6099+ 44A7              PARBT   equ     DATABT+$01
6100+ 44A7              STPBT   equ     PARBT+$01
6101+ 44A7              SIOBFR  equ     STPBT+$01
6102+ 44A7 CD CB 32     SERIAL: call    GETINT          ; get port #
6103+ 44AA A7                   and     A               ; is it zero?
6104+ 44AB CA 7F 26             jp      Z,FCERR         ; yes, error
6105+ 44AE FE 03                cp      $03             ; is it 1 or 2?
6106+ 44B0 D2 D0 46             jp      NC,SCERR        ; no, error
6107+ 44B3 32 3F 61             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44B6 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6109+ 44B9 2C                   defb    ','
6110+ 44BA 2B                   dec     HL
6111+ 44BB CD B4 25             call    GETCHR          ; check what's following
6112+ 44BE CA 6B 20             jp      Z,SNERR         ; error if nothing follows
6113+ 44C1 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 44C3 CD 84 26             call    ATOH            ; get bps (returned into DE)
6115+ 44C6 18 0F                jr      CHKZSER         ; jump over
6116+ 44C8 CD 45 2A     SERVAR: call    GETNUM          ; get number
6117+ 44CB CD 52 38             call    TSTSGN          ; check value
6118+ 44CE FA 7F 26             jp      M,FCERR         ; negative - illegal function call
6119+ 44D1 3A 8E 61             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 44D4 CD FA 38             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 44D7 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 44D8 B3                   or      E               ; check if bps=0
6123+ 44D9 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 44DB                      ; if baud rate is 0, then close the serial comm.
6125+ 44DB 3A 3F 61     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 44DE 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 44DF C6 22                add     SIO_CA          ; find correct channel
6128+ 44E1 4F                   ld      C,A             ; store serial channel
6129+ 44E2 F3                   di                      ; disable INTs
6130+ 44E3 AF                   xor     A               ; reset A
6131+ 44E4 16 01                ld      D,$01           ; start from WR1
6132+ 44E6 06 05                ld      B,$05           ; 5 registers
6133+ 44E8 ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 44EA ED 79                out     (C),A           ; reset register
6135+ 44EC 14                   inc     D               ; next register
6136+ 44ED 10 F9                djnz    RPTRSSR         ; repeat
6137+ 44EF 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 44F1 ED 79                out     (C),A           ; send command to serial channel
6139+ 44F3 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 44F5 ED 79                out     (C),A           ; send command to serial channel
6141+ 44F7 FB                   ei                      ; re-enable INTs
6142+ 44F8 E5                   push    HL              ; store HL
6143+ 44F9 21 79 61             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 44FC DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 44FE CB 41                bit     0,C             ; check serial port
6146+ 4500 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 4502 CB B7                res     6,A             ; it's port 1
6148+ 4504 CB A7                res     4,A             ; remove possible error LED
6149+ 4506 CB 86                res     0,(HL)          ; disable port 1
6150+ 4508 C3 11 45             jp      SERLED          ; jump over
6151+ 450B CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 450D CB AF                res     5,A             ; remove possible error LED
6153+ 450F CB 8E                res     1,(HL)          ; disable port 2
6154+ 4511 D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 4513 E1                   pop     HL              ; retrieve HL
6156+ 4514 C9                   ret                     ; return to caller
6157+ 4515                      ; check if bps=1, meaning reactivate RX on serial
6158+ 4515 7A           CNTSER: ld      A,D
6159+ 4516 B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 4517 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 4519 7B                   ld      A,E             ; then by checking that
6162+ 451A FE 01                cp      $01             ; E=1
6163+ 451C 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 451E 3A 3F 61             ld      A,(PRTNUM)      ; load port number
6165+ 4521 57                   ld      D,A             ; store port on D
6166+ 4522 3A 79 61             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 4525 A2                   and     D               ; check status
6168+ 4526 CA D0 46             jp      Z,SCERR         ; port not open, raise error
6169+ 4529 F3                   di                      ; disable INTs
6170+ 452A 7A                   ld      A,D             ; move port # into A
6171+ 452B 5F                   ld      E,A             ; and also into E
6172+ 452C 87                   add     A
6173+ 452D 87                   add     A               ; move A to left times 2
6174+ 452E 57                   ld      D,A             ; move value into D
6175+ 452F 3A 79 61             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 4532 B2                   or      D               ; re-enable RX
6177+ 4533 32 79 61             ld      (SERIALS_EN),A  ; store new serial status
6178+ 4536 7B                   ld      A,E             ; recover port #
6179+ 4537 3D                   dec     A               ; check port
6180+ 4538 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 453A CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 453D DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 453F CB A7                res     4,A             ; remove error LED
6184+ 4541 C3 4B 45             jp      RXEND           ; terminate setting
6185+ 4544 CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 4547 DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 4549 CB AF                res     5,A             ; remove error LED
6188+ 454B D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 454D FB                   ei                      ; re-enable INTs
6190+ 454E C9                   ret                     ; return to caller
6191+ 454F                      ; set serial port comm.
6192+ 454F D5           CNTSER2:push    DE              ; store BPS
6193+ 4550 3A 3F 61             ld      A,(PRTNUM)      ; load port number
6194+ 4553 57                   ld      D,A             ; move port # into D
6195+ 4554 3A 79 61             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 4557 A2                   and     D               ; by ANDing A with D
6197+ 4558 D1                   pop     DE              ; retrieve BPS
6198+ 4559 CA 61 45             jp      Z,CNTSER3       ; not open, continue
6199+ 455C 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 455E C3 85 20             jp      ERROR           ; and leave
6201+ 4561 E5           CNTSER3:push    HL              ; store HL
6202+ 4562 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 4565 CD F8 4C             call    CMP16           ; is bps<=57,600?
6204+ 4568 E1                   pop     HL              ; but first, recover HL
6205+ 4569 DA D0 46             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 456C ED 53 40 61          ld      (BPS),DE        ; store bps
6207+ 4570 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 4571 CD B4 25             call    GETCHR          ; Get next character
6209+ 4574 CA AC 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 4577 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6211+ 457A 2C                   defb    ','
6212+ 457B CD CB 32             call    GETINT          ; get data bits
6213+ 457E FE 05                cp      $05             ; is it <5?
6214+ 4580 DA D0 46             jp      C,SCERR         ; yes, error
6215+ 4583 FE 09                cp      $09             ; is it >=9?
6216+ 4585 D2 7F 26             jp      NC,FCERR        ; yes, error
6217+ 4588 32 42 61             ld      (DATABT),A      ; store data bits
6218+ 458B CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6219+ 458E 2C                   defb    ','
6220+ 458F CD CB 32             call    GETINT          ; get parity bits
6221+ 4592 BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 4595 D2 D0 46             jp      NC,SCERR        ; no, error
6223+ 4598 32 43 61             ld      (PARBT),A       ; store parity
6224+ 459B CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6225+ 459E 2C                   defb    ','
6226+ 459F CD CB 32             call    GETINT          ; get stop bits
6227+ 45A2 FE 03                cp      $03             ; is it >=3?
6228+ 45A4 D2 D0 46             jp      NC,SCERR        ; yes, error
6229+ 45A7 32 44 61             ld      (STPBT),A       ; store stop bits
6230+ 45AA 18 0D                jr      SETSER          ; jump to set serial
6231+ 45AC 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45AE 32 42 61             ld      (DATABT),A
6233+ 45B1 AF                   xor     A               ; no parity bit
6234+ 45B2 32 43 61             ld      (PARBT),A
6235+ 45B5 3C                   inc     A               ; 1 bit for stop
6236+ 45B6 32 44 61             ld      (STPBT),A
6237+ 45B9                      ; check if bps are legal
6238+ 45B9 E5           SETSER: push    HL              ; store HL
6239+ 45BA D5                   push    DE              ; store DE
6240+ 45BB DD E5                push    IX              ; store IX
6241+ 45BD DD 21 AB 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 45C1 06 0B                ld      B,$0B           ; 11 items
6243+ 45C3 0E 00                ld      C,$00           ; reset pointer
6244+ 45C5 2A 40 61     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 45C8 DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 45CB DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 45CE CD F8 4C             call    CMP16           ; is it equal?
6248+ 45D1 CA DE 45             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 45D4 DD 23                inc     IX
6250+ 45D6 DD 23                inc     IX              ; no, go to next entry
6251+ 45D8 0C                   inc     C               ; increment pointer
6252+ 45D9 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 45DB C3 CC 46             jp      SCERR1          ; if nothing found, raise an error
6254+ 45DE              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 45DE                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 45DE                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 45DE                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 45DE F3                   di                      ; disable INTs
6259+ 45DF 06 00                ld      B,$00           ; reset B
6260+ 45E1 21 C1 46             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 45E4 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 45E5 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 45E7 3A 3F 61             ld      A,(PRTNUM)      ; load port number
6264+ 45EA 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 45EB DA EF 45             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 45EE 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 45EF 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 45F1                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 45F1 ED 79                out     (C),A           ; configure CTC channel
6270+ 45F3 7E                   ld      A,(HL)          ; load CTC divider
6271+ 45F4 ED 79                out     (C),A           ; send divider
6272+ 45F6                      ; configure SIO
6273+ 45F6 21 36 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 45F9 11 45 61             ld      DE,SIOBFR       ; into a temp buffer
6275+ 45FC 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 45FF ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 4601 3A 4A 61             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 4604 47                   ld      B,A             ; move it into B
6279+ 4605 3A 42 61             ld      A,(DATABT)      ; load DATA bits
6280+ 4608 FE 05                cp      $05             ; is it 5 bits?
6281+ 460A 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 460C CB B0                res     6,B
6283+ 460E CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 4610 18 19                jr      SETPAR          ; jump to set parity
6285+ 4612 FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 4614 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 4616 CB F0                set     6,B
6288+ 4618 CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 461A 18 0F                jr      SETPAR          ; jump to set parity
6290+ 461C FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 461E 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 4620 CB B0                res     6,B
6293+ 4622 CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 4624 C3 2B 46             jp      SETPAR          ; jump to set parity
6295+ 4627 CB F0        BITS8:  set     6,B
6296+ 4629 CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 462B 21 7A 61     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 462E 3A 3F 61             ld      A,(PRTNUM)      ; check serial port number
6299+ 4631 3D                   dec     A               ; is it port #1?
6300+ 4632 CA 36 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 4635 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 4636 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 4637 32 4A 61             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 463A E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 463C 87                   add     A,A             ; shift left times 1
6306+ 463D 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 463E 3A 44 61             ld      A,(STPBT)       ; load STOP bits
6308+ 4641 87                   add     A,A
6309+ 4642 87                   add     A,A             ; 2 left shifts
6310+ 4643 47                   ld      B,A             ; move forming byte into B
6311+ 4644 3A 43 61             ld      A,(PARBT)       ; load PARITY setting
6312+ 4647 A7                   and     A               ; is it 0?
6313+ 4648 CA 53 46             jp      Z,STRPAR        ; yes, jump over
6314+ 464B CB C0                set     0,B             ; set PARITY on
6315+ 464D 3D                   dec     A               ; is parity ODD?
6316+ 464E CA 53 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 4651 CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 4653 3A 48 61     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 4656 E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 4658 B0                   or      B               ; set new STOP & PARITY bits
6321+ 4659 32 48 61             ld      (SIOBFR+3),A    ; store new value
6322+ 465C                      ;set up TX and RX:
6323+ 465C                      ; the followings are settings for channel A
6324+ 465C 21 45 61             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 465F 06 06                ld      B,$06           ; 6 bytes to send
6326+ 4661 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 4663 3A 3F 61             ld      A,(PRTNUM)      ; load port number
6328+ 4666 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 4667 DA 6B 46             jp      C,SRLCNT        ; port 1, continue
6330+ 466A 0C                   inc     C               ; port 2, increment address port into C
6331+ 466B ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 466D                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 466D 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 466F 51                   ld      D,C             ; store port address into D
6335+ 4670 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 4672 ED B3                otir                    ; send bytes to SIO
6337+ 4674                      ; the following are settings for selected channel
6338+ 4674 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 4676 4A                   ld      C,D             ; retrieve port address
6340+ 4677 ED 79                out     (C),A
6341+ 4679 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 467B                                              ; buffer overrun is special condition
6343+ 467B ED 79                out     (C),A
6344+ 467D 21 79 61             ld      HL,SERIALS_EN
6345+ 4680 3A 3F 61             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 4683 3D                   dec     A               ; channel A?
6347+ 4684 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 4686 CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 4689 CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 468B CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 468D                      ; back to normal running
6352+ 468D FB                   ei                      ; re-enable INTs
6353+ 468E DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 4690 CB F7                set     6,A             ; set status LED on
6355+ 4692 CB A7                res     4,A             ; set error LED off
6356+ 4694 18 0E                jr      EXNRM           ; leave
6357+ 4696 CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 4699 CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 469B CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 469D                      ; back to normal running
6361+ 469D FB                   ei                      ; re-enable INTs
6362+ 469E DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 46A0 CB FF                set     7,A             ; set status LED on
6364+ 46A2 CB AF                res     5,A             ; set error LED off
6365+ 46A4 D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 46A6 DD E1                pop     IX              ; retrieve IX
6367+ 46A8 D1                   pop     DE              ; retrieve DE
6368+ 46A9 E1                   pop     HL              ; retrieve HL
6369+ 46AA C9                   ret                     ; return to caller
6370+ 46AB
6371+ 46AB              ; allowed bps (Bauds per second)
6372+ 46AB 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46AF 80 70 00 4B
6372+ 46B3 40 38 80 25
6372+ 46B7 C0 12 10 0E
6372+ 46BB 60 09 B0 04
6372+ 46BF 58 02
6373+ 46C1              ; corresponding CTC divider
6374+ 46C1 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 46C5 08 0C 18 20
6374+ 46C9 30 60 C0
6375+ 46CC
6376+ 46CC
6377+ 46CC              ; serial configuration error
6378+ 46CC DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 46CE D1                   pop     DE              ; retrieve DE
6380+ 46CF E1                   pop     HL              ; retrieve HL
6381+ 46D0 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 46D2 C3 85 20             jp      ERROR           ; print error
6383+ 46D5
6384+ 46D5
6385+ 46D5              ; serial buffer overrun
6386+ 46D5 CD 81 28     SOERR:  call    PRNTCRLF
6387+ 46D8 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 46DA C3 85 20             jp      ERROR
6389+ 46DD
6390+ 46DD
6391+ 46DD              ; check for direct mode:
6392+ 46DD              ; Z is set if in direct mode, reset otherwise
6393+ 46DD E5           DIRMOD: push    HL              ; Save code string address
6394+ 46DE 2A E1 5F             ld      HL,(LINEAT)     ; Get current line number
6395+ 46E1 23                   inc     HL              ; -1 means direct statement
6396+ 46E2 7C                   ld      A,H
6397+ 46E3 B5                   or      L
6398+ 46E4 E1                   pop     HL              ; Restore code string address
6399+ 46E5 C9                   ret
6400+ 46E6
6401+ 46E6
6402+ 46E6              ; HELP lists the line program where an error occured
6403+ 46E6 CD DD 46     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 46E9 C2 FF 46             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 46EC E5                   push    HL              ; store HL
6406+ 46ED 2A E3 5F             ld      HL,(HLPLN)      ; load HELP line
6407+ 46F0 23                   inc     HL              ; increment HL
6408+ 46F1 7C                   ld      A,H
6409+ 46F2 B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 46F3 E1                   pop     HL
6411+ 46F4 CA FF 46             jp      Z,HLPERR        ; no line found, raise error
6412+ 46F7 ED 5B E3 5F          ld      DE,(HLPLN)      ; recover line
6413+ 46FB C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 46FC C3 01 24             jp      LST01H          ; jump to list line
6415+ 46FF 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 4701 C3 85 20             jp      ERROR           ; raise error
6417+ 4704
6418+ 4704
6419+ 4704              ; KEY command to list/modify function keys and auto-repeat
6420+ 4704 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 4705 CD B4 25             call    GETCHR          ; Get next character
6422+ 4708 CA 88 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 470B                      ; change FN keys
6424+ 470B CD CB 32             call    GETINT          ; get a number
6425+ 470E A7                   and     A               ; is it 0?
6426+ 470F 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 4711 E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 4712 D5                   push    DE              ; store HL & DE
6429+ 4713 21 59 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 4716 11 E5 5F             ld      DE,KEYDEL       ; pointer to destination
6431+ 4719 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 471C ED B0                ldir                    ; restore default texts
6433+ 471E D1                   pop     DE              ; retrieve DE
6434+ 471F E1                   pop     HL              ; retrieve HL
6435+ 4720 C9                   ret                     ; return to caller
6436+ 4721 FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 4723 D2 3B 48             jp      NC,SETREP       ; yes - jump over
6438+ 4726 3D                   dec     A               ; FN key in range 0~7
6439+ 4727 87                   add     A,A             ; multiply A...
6440+ 4728 87                   add     A,A             ; ... times 4...
6441+ 4729 87                   add     A,A             ; ... to get the correct...
6442+ 472A 87                   add     A,A             ; ... offset fo FN key text
6443+ 472B 32 37 61             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 472E AF                   xor     A               ; ...in a...
6445+ 472F 32 38 61             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 4732 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6447+ 4735 2C                   defb    ','
6448+ 4736 44 4D                ld      BC,HL           ; copy address into BC
6449+ 4738 CD 57 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 473B E5                   push    HL              ; store string pointer
6451+ 473C 3A C6 60             ld      A,(TYPE)        ; Get variable type
6452+ 473F B7                   or      A               ; Is it a string variable?
6453+ 4740 CA 6B 20             jp      Z,SNERR         ; no - syntax error
6454+ 4743 CD 90 30             call    GSTRCU          ; Current string to pool
6455+ 4746 CD A1 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 4749 7B                   ld      A,E             ; copy length into A
6457+ 474A FE 11                cp      $11             ; is length > 16?
6458+ 474C DA 51 47             jp      C,DECLN1        ; no, jump over
6459+ 474F 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 4751 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 4753 93                   sub     E               ; ...null chars needed to fill up...
6462+ 4754 57                   ld      D,A             ; ...the FN key text
6463+ 4755 C5                   push    BC              ; store address of string
6464+ 4756 ED 4B 37 61          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 475A 21 E7 5F             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 475D 09                   add     HL,BC           ; get corrected address
6467+ 475E C1                   pop     BC              ; retrieve address of string chars
6468+ 475F 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 4760 FE 0D                cp      CR              ; return?
6470+ 4762 CA 6F 47             jp      Z,CPKEY2        ; yes, store char
6471+ 4765 FE 7B                cp      $7B             ; if char > "z" ?
6472+ 4767 D2 6B 20             jp      NC,SNERR        ; yes - syntax error
6473+ 476A FE 20                cp      $20             ; is char < space?
6474+ 476C DA 6B 20             jp      C,SNERR         ; yes - syntax error
6475+ 476F FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 4771 DA 76 47             jp      C,CPKEY3        ; no, continue
6477+ 4774 E6 5F                and     %01011111       ; set letters to uppercase
6478+ 4776 77           CPKEY3: ld      (HL),A          ; store char
6479+ 4777 23                   inc     HL              ; next string char
6480+ 4778 03                   inc     BC              ; next free cell
6481+ 4779 1D                   dec     E               ; decrement E
6482+ 477A 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 477C AF                   xor     A               ; null char
6484+ 477D 14                   inc     D               ; +1 to decrement below
6485+ 477E 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 477F CA 86 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 4782 77                   ld      (HL),A          ; store it
6488+ 4783 23                   inc     HL              ; next cell
6489+ 4784 18 F8                jr      CPKEY1          ; repeat
6490+ 4786 E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 4787 C9                   ret                     ; return to caller
6492+ 4788                                              ; list FN keys
6493+ 4788 E5           LSTKEYS:push    HL              ; Save code string address
6494+ 4789 2A E1 5F             ld      HL,(LINEAT)     ; Get current line number
6495+ 478C 23                   inc     HL              ; -1 means direct statement
6496+ 478D 7C                   ld      A,H
6497+ 478E B5                   or      L
6498+ 478F E1                   pop     HL              ; Restore code string address
6499+ 4790 C2 6B 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 4793 E5                   push    HL              ; store HL
6501+ 4794 D5                   push    DE              ; store DE
6502+ 4795 21 E7 5F             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 4798 0E 01                ld      C,$01           ; 8 function keys
6504+ 479A 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 479C 11 5D 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 479F CD 2C 48             call    PRTCKEY         ; print it
6507+ 47A2 79                   ld      A,C             ; load FN key
6508+ 47A3 C6 30                add     $30             ; get number in ASCI code
6509+ 47A5 CD 76 23             call    OUTC            ; print it
6510+ 47A8 11 62 48             ld      DE,CHKEY2       ; message ": ""
6511+ 47AB CD 2C 48             call    PRTCKEY         ; print it
6512+ 47AE 3E 01                ld      A,$01           ; " opened
6513+ 47B0 32 37 61             ld      (TMPBFR1),A
6514+ 47B3 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47B4 A7                   and     A               ; is it zero?
6516+ 47B5 CA C8 47             jp      Z,CNTLTK        ; yes, go next char
6517+ 47B8 CD 14 48             call    OPNQT           ; check if quotes are opened
6518+ 47BB FE 22                cp      $22             ; check if char is "?
6519+ 47BD CA DD 47             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 47C0 FE 0D                cp      CR              ; is it a CR?
6521+ 47C2 CA DD 47             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 47C5 CD 76 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 47C8 23           CNTLTK: inc     HL              ; next char
6524+ 47C9 10 E8                djnz    LDKEY           ; continue until finished
6525+ 47CB CD 02 48             call    CLSQT           ; check if quotes are still open
6526+ 47CE 3E 0D                ld      A,CR            ; go next line
6527+ 47D0 CD 76 23             call    OUTC            ; print it
6528+ 47D3 0C                   inc     C               ; next FN key
6529+ 47D4 79                   ld      A,C             ; check if...
6530+ 47D5 FE 09                cp      $09             ; finished keys?
6531+ 47D7 DA 9A 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 47DA D1                   pop     DE              ; retrieve DE
6533+ 47DB E1                   pop     HL              ; retrieve HL
6534+ 47DC C9                   ret                     ; return to caller
6535+ 47DD E5           PRTCHR: push    HL              ; store HL
6536+ 47DE CD 02 48             call    CLSQT           ; check if quotes are closed
6537+ 47E1 3E 2B                ld      A,'+'           ; '+' char
6538+ 47E3 CD 76 23             call    OUTC            ; print it
6539+ 47E6 11 65 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 47E9 CD 2C 48             call    PRTCKEY         ; print it
6541+ 47EC E1                   pop     HL              ; recover HL
6542+ 47ED 23                   inc     HL              ; next char
6543+ 47EE 05                   dec     B               ; increment char counter
6544+ 47EF 11 6B 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 47F2 7E                   ld      A,(HL)          ; load char
6546+ 47F3 FE 0D                cp      CR              ; is it a RETURN?
6547+ 47F5 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 47F7 11 6E 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 47FA CD 2C 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 47FD 3E 29                ld      A,')'           ; char )
6551+ 47FF C3 C5 47             jp      PRTK3           ; continue
6552+ 4802 F5           CLSQT:  push    AF              ; store A
6553+ 4803 3A 37 61             ld      A,(TMPBFR1)     ; quote status
6554+ 4806 A7                   and     A               ; are they closed?
6555+ 4807 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 4809 3E 22                ld      A,$22           ; no, so close them
6557+ 480B CD 76 23             call    OUTC            ; print "
6558+ 480E AF                   xor     A               ; set quotes
6559+ 480F 32 37 61             ld      (TMPBFR1),A     ; as closed
6560+ 4812 F1           CLSQT1: pop     AF              ; retrieve A
6561+ 4813 C9                   ret                     ; return to caller
6562+ 4814 F5           OPNQT:  push    AF              ; store A
6563+ 4815 3A 37 61             ld      A,(TMPBFR1)     ; quote status
6564+ 4818 A7                   and     A               ; are they open?
6565+ 4819 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 481B 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 481D CD 76 23             call    OUTC            ; print it
6568+ 4820 3E 22                ld      A,$22           ; and then open quotes
6569+ 4822 CD 76 23             call    OUTC            ; print them
6570+ 4825 3E 01                ld      A,$01           ; set quotes
6571+ 4827 32 37 61             ld      (TMPBFR1),A     ; as opened
6572+ 482A F1           OPNQT1: pop     AF              ; retrieve A
6573+ 482B C9                   ret                     ; return to caller
6574+ 482C F5           PRTCKEY:push    AF              ; store original char
6575+ 482D 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 482E A7                   and     A               ; is it 0?
6577+ 482F CA 39 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 4832 CD 76 23             call    OUTC            ; no, print char
6579+ 4835 13                   inc     DE              ; next char
6580+ 4836 C3 2D 48             jp      PRTK1           ; repeat
6581+ 4839 F1           PRTEND: pop     AF              ; retrieve AF
6582+ 483A C9                   ret                     ; return to caller
6583+ 483B FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 483D C2 6B 20             jp      NZ,SNERR        ; no, raise an error
6585+ 4840 CD 6B 23             call    CHKSYN          ; Check for comma
6586+ 4843 2C                   defb    ','
6587+ 4844 CD CB 32             call    GETINT          ; get a number
6588+ 4847 32 37 61             ld      (TMPBFR1),A     ; store it
6589+ 484A CD 6B 23             call    CHKSYN          ; Check for comma
6590+ 484D 2C                   defb    ','
6591+ 484E CD CB 32             call    GETINT          ; get another number
6592+ 4851 E5                   push    HL              ; store HL
6593+ 4852 21 E6 5F             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 4855 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 4856 2B                   dec     HL              ; previous cell
6596+ 4857 3A 37 61             ld      A,(TMPBFR1)     ; retrieve value
6597+ 485A 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 485B E1                   pop     HL              ; retrieve HL
6599+ 485C C9                   ret
6600+ 485D 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 4861 00
6601+ 4862 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 4865 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 4869 28 00
6603+ 486B 31 33 00     CHKEY4: defb    "13",0
6604+ 486E 33 34 00     CHKEY5: defb    "34",0
6605+ 4871
6606+ 4871
6607+ 4871              ; check if DOS is enabled
6608+ 4871 3A 7C 61     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 4874 A7                   and     A               ; check if 0 (NOT enabled)
6610+ 4875 C0                   ret     NZ              ; return if enabled
6611+ 4876 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 4878 C3 85 20             jp      ERROR           ; raise error
6613+ 487B
6614+ 487B
6615+ 487B              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 487B              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 487B CD C4 48     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 487E CA 9C 48             jp      Z,LOADST        ; number - load a single sector
6619+ 4881 CD DD 46             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 4884 C2 80 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 4887 CD AA 4B             call    CHKFN1          ; string - evaluate file name
6622+ 488A CD CA 49             call    CHK1AR          ; check for ",1" argument
6623+ 488D 22 37 61             ld      (TMPBFR1),HL    ; store HL
6624+ 4890 21 B3 48             ld      HL,TXTLDG       ; loading message
6625+ 4893 CD 4D 2F             call    PRS             ; print
6626+ 4896 CD 4E 15             call    LODFILE         ; load file into memory
6627+ 4899 C3 AC 48             jp      LDEND           ; retrieve registers and leave
6628+ 489C 2A 37 61     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 489F CD D9 48             call    GET3AR          ; get 3 arguments & set corresponding sector
6630+ 48A2 22 37 61             ld      (TMPBFR1),HL    ; store HL
6631+ 48A5 CD 8D 10             call    CF_RD_SEC       ; read sector
6632+ 48A8 CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6633+ 48AB AF                   xor     A               ; clear Carry
6634+ 48AC 2A 37 61     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6635+ 48AF DA C3 49             jp      C,DOS_ERR       ; jump if DOS error
6636+ 48B2 C9                   ret                     ; return to caller
6637+ 48B3 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6637+ 48B7 69 6E 67 20
6637+ 48BB 66 69 6C 65
6637+ 48BF 2E 2E 2E 0D
6637+ 48C3 00
6638+ 48C4
6639+ 48C4
6640+ 48C4              ; common code for LOAD/SAVE to check the type of operation required
6641+ 48C4              ; (load/save a file or a single sector)
6642+ 48C4              ; returns Z if argument is a number, NZ if it's a string
6643+ 48C4 CD 71 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6644+ 48C7 2B                   dec     HL              ; dec 'cos GETCHR INCs
6645+ 48C8 CD B4 25             call    GETCHR          ; check if something follows
6646+ 48CB CA 6B 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6647+ 48CE 22 37 61             ld      (TMPBFR1),HL    ; save current code string pointer
6648+ 48D1 CD 57 2A             call    EVAL            ; Evaluate expression
6649+ 48D4 3A C6 60             ld      A,(TYPE)        ; Get variable type
6650+ 48D7 B7                   or      A               ; Is it a string variable?
6651+ 48D8 C9                   ret                     ; return to caller
6652+ 48D9
6653+ 48D9
6654+ 48D9              ; shared code between LOAD and SAVE
6655+ 48D9              ; get 3 arguments after the command LOAD or SAVE
6656+ 48D9              ; and set CF to point to the selected sector
6657+ 48D9 2A 37 61     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6658+ 48DC CD CB 32             call    GETINT          ; get 1st pointer
6659+ 48DF 32 CF 60             ld      (TMPDBF),A      ; store it into a temp buffer
6660+ 48E2 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6661+ 48E5 2C                   defb    ','
6662+ 48E6 CD CB 32             call    GETINT          ; get 2nd pointer
6663+ 48E9 32 D0 60             ld      (TMPDBF+1),A    ; store it into a temp buffer
6664+ 48EC CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6665+ 48EF 2C                   defb    ','
6666+ 48F0 CD CB 32             call    GETINT          ; get 3rd pointer
6667+ 48F3 32 D1 60             ld      (TMPDBF+2),A    ; store it into a temp buffer
6668+ 48F6 CD 92 18             call    CLRIOBF         ; clear I/O buffer
6669+ 48F9 CD 09 10             call    CF_INIT         ; init CF card
6670+ 48FC DA 83 20             jp      C,NRERR         ; error if device not available/ready
6671+ 48FF 3A CF 60             ld      A,(TMPDBF)      ; retrieve 1st pointer
6672+ 4902 4F                   ld      C,A
6673+ 4903 3A D0 60             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6674+ 4906 47                   ld      B,A
6675+ 4907 3A D1 60             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6676+ 490A 5F                   ld      E,A
6677+ 490B 16 00                ld      D,$00           ; set disk
6678+ 490D CD 4B 10             call    CF_SETSTR       ; set sector
6679+ 4910 C9                   ret                     ; return to caller
6680+ 4911
6681+ 4911
6682+ 4911              ; save a file onto the disk
6683+ 4911 CD 71 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6684+ 4914 2B                   dec     HL              ; dec 'cos GETCHR INCs
6685+ 4915 CD B4 25             call    GETCHR          ; check if something follows
6686+ 4918 CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6687+ 491B 22 37 61             ld      (TMPBFR1),HL    ; save current code string pointer
6688+ 491E CD 57 2A             call    EVAL            ; Evaluate expression
6689+ 4921 3A C6 60             ld      A,(TYPE)        ; Get variable type
6690+ 4924 B7                   or      A               ; Is it a string variable?
6691+ 4925 CA 6A 49             jp      Z,SAVEST        ; no - load a single sector
6692+ 4928 CD AA 4B             call    CHKFN1          ; yes, evaluate string
6693+ 492B 3E 80                ld      A,$80           ; set BAS for file type
6694+ 492D 32 E6 60             ld      (TPBF4),A
6695+ 4930 2B                   dec     HL              ; dec 'cos GETCHR INCs
6696+ 4931 CD B4 25             call    GETCHR          ; check if something follows
6697+ 4934 28 21                jr      Z,SAVE1         ; no, jump over
6698+ 4936 CD 6B 23             call    CHKSYN          ; yes - Make sure ',' follows
6699+ 4939 2C                   defb    ','
6700+ 493A CD 45 2A             call    GETNUM          ; Get memory address
6701+ 493D CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
6702+ 4940 ED 53 E8 60          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6703+ 4944 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6704+ 4947 2C                   defb    ','
6705+ 4948 CD 45 2A             call    GETNUM          ; Get memory address
6706+ 494B CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
6707+ 494E ED 53 EA 60          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6708+ 4952 3E 81                ld      A,$81           ; set BIN for file type
6709+ 4954 32 E6 60             ld      (TPBF4),A
6710+ 4957 CD DD 46     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6711+ 495A C2 80 20             jp      NZ,IMERR        ; raise error if in indirect mode
6712+ 495D E5                   push    HL              ; store code string pointer
6713+ 495E 21 97 49             ld      HL,TXTSVG       ; loading message
6714+ 4961 CD 4D 2F             call    PRS             ; print
6715+ 4964 CD EA 13             call    SAVFILE         ; load file into memory
6716+ 4967 C3 92 49             jp      SVEND           ; retrieve registers and leave
6717+ 496A 2A CF 60     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6718+ 496D CD D9 48             call    GET3AR          ; get 3 arguments
6719+ 4970 CD 92 18             call    CLRIOBF         ; clear I/O buffer
6720+ 4973 CD 09 10             call    CF_INIT         ; init CF card
6721+ 4976 DA 83 20             jp      C,NRERR         ; error if device not available/ready
6722+ 4979 E5                   push    HL              ; store code string pointer
6723+ 497A 3A CF 60             ld      A,(TMPDBF)      ; retrieve 1st pointer
6724+ 497D 4F                   ld      C,A
6725+ 497E 3A D0 60             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6726+ 4981 47                   ld      B,A
6727+ 4982 3A D1 60             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6728+ 4985 5F                   ld      E,A
6729+ 4986 16 00                ld      D,$00           ; set disk
6730+ 4988 CD 4B 10             call    CF_SETSTR       ; set sector
6731+ 498B CD B5 10             call    CF_WR_SEC       ; read sector
6732+ 498E CD 81 10             call    CF_STANDBY      ; put CF in standby mode
6733+ 4991 AF                   xor     A               ; clear Carry
6734+ 4992 E1           SVEND:  pop     HL              ; retrieve code string pointer
6735+ 4993 DA C3 49             jp      C,DOS_ERR       ; jump if DOS error
6736+ 4996 C9                   ret                     ; return to caller
6737+ 4997 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6737+ 499B 6E 67 20 66
6737+ 499F 69 6C 65 2E
6737+ 49A3 2E 2E 20 0D
6737+ 49A7 00
6738+ 49A8
6739+ 49A8
6740+ 49A8              ; FILES
6741+ 49A8              ; list files on disk
6742+ 49A8 CD 71 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6743+ 49AB CD 92 18             call    CLRIOBF         ; clear I/O buffer
6744+ 49AE CD 09 10             call    CF_INIT         ; init CF card
6745+ 49B1 DA C3 49             jp      C,DOS_ERR       ; error if device not available/ready
6746+ 49B4 C5                   push    BC              ; store BC
6747+ 49B5 D5                   push    DE              ; store DE
6748+ 49B6 E5                   push    HL              ; store HL
6749+ 49B7 16 01                ld      D,$01           ; print disk details and file list
6750+ 49B9 CD A3 12             call    LST_FILES       ; list files
6751+ 49BC E1                   pop     HL
6752+ 49BD D1                   pop     DE
6753+ 49BE C1                   pop     BC
6754+ 49BF DA C3 49             jp      C,DOS_ERR       ; any error?
6755+ 49C2 C9                   ret                     ; return to caller
6756+ 49C3
6757+ 49C3
6758+ 49C3              ; raise a DOS error
6759+ 49C3 3A CE 60     DOS_ERR:ld      A,(DOSER)       ; load error code
6760+ 49C6 5F                   ld      E,A             ; copy into E
6761+ 49C7 C3 85 20             jp      ERROR           ; goto error routine
6762+ 49CA
6763+ 49CA
6764+ 49CA              ; check for ",1" argument
6765+ 49CA              ; check if 1 is passed as argument after LOAD and ERASE
6766+ 49CA AF           CHK1AR: xor     A               ; reset A
6767+ 49CB 32 E6 60             ld      (TPBF4),A       ; default setting
6768+ 49CE                                              ; (load=store file in RAM using current BASIC pointers
6769+ 49CE                                              ; (erase=quick delete)
6770+ 49CE 2B                   dec     HL              ; dec 'cause GETCHR increments
6771+ 49CF CD B4 25             call    GETCHR          ; check if something follows
6772+ 49D2 C8                   ret     Z               ; if nothing follows, return
6773+ 49D3 CD 6B 23             call    CHKSYN          ; Make sure ',' follows
6774+ 49D6 2C                   defb    ','
6775+ 49D7 CD CB 32             call    GETINT          ; get a value
6776+ 49DA 3D                   dec     A               ; decrement it
6777+ 49DB C2 6B 20             jp      NZ,SNERR        ; not '1' - raise an error
6778+ 49DE 3C                   inc     A               ; A=1
6779+ 49DF 32 E6 60             ld      (TPBF4),A       ; load=store file in RAM using address in file
6780+ 49E2                                              ; erase=full delete
6781+ 49E2 C9                   ret                     ; return to caller
6782+ 49E3
6783+ 49E3
6784+ 49E3              ; ERASE "filename"
6785+ 49E3              ; erase a file from disk
6786+ 49E3 CD 71 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6787+ 49E6 CD A0 4B             call    CHKFLNM         ; check for a disk name
6788+ 49E9 CD CA 49             call    CHK1AR          ; check for ",1" argument
6789+ 49EC E5                   push    HL              ; store code string pointer
6790+ 49ED 21 14 4A             ld      HL,ERSTX        ; Point to message
6791+ 49F0 CD 4D 2F             call    PRS             ; print message for init confirmation
6792+ 49F3 E1                   pop     HL              ; retrieve HL
6793+ 49F4 CD 7D 4B             call    CNFREQ          ; ask for confirmation
6794+ 49F7 38 37                jr      C,ABRTDS        ; if Carry set then abort
6795+ 49F9 CD 09 10             call    CF_INIT         ; init CF card
6796+ 49FC DA C3 49             jp      C,DOS_ERR       ; error if device not available/ready
6797+ 49FF C5                   push    BC
6798+ 4A00 D5                   push    DE
6799+ 4A01 E5                   push    HL              ; store code string pointer
6800+ 4A02 CD 16 16             call    FIL_ERASE       ; deleted file
6801+ 4A05 E1                   pop     HL
6802+ 4A06 D1                   pop     DE
6803+ 4A07 C1                   pop     BC
6804+ 4A08 DA C3 49             jp      C,DOS_ERR       ; leave if error
6805+ 4A0B E5                   push    HL              ; store HL
6806+ 4A0C 21 22 4A             ld      HL,ERASED       ; point to message of file deleted
6807+ 4A0F CD 4D 2F             call    PRS             ; print it
6808+ 4A12 E1                   pop     HL              ; retrieve HL
6809+ 4A13 C9                   ret                     ; return to caller
6810+ 4A14 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6810+ 4A18 74 65 20 66
6810+ 4A1C 69 6C 65 3F
6810+ 4A20 20 00
6811+ 4A22 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6811+ 4A26 20 64 65 6C
6811+ 4A2A 65 74 65 64
6811+ 4A2E 0D 00
6812+ 4A30
6813+ 4A30
6814+ 4A30              ; disk operation aborted
6815+ 4A30 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6816+ 4A32 32 33 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6817+ 4A35 E5                   push    HL              ; store HL
6818+ 4A36 21 3E 4A             ld      HL,ABRTXT       ; Point to message
6819+ 4A39 CD 4D 2F             call    PRS             ; print message for leaving init procedure
6820+ 4A3C E1                   pop     HL              ; retrieve HL
6821+ 4A3D C9                   ret                     ; return to caller
6822+ 4A3E 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6822+ 4A42 72 74 65 64
6822+ 4A46 00
6823+ 4A47
6824+ 4A47              ; execute several operations on a disk:
6825+ 4A47              ; "F": format/rewrite Master Sector
6826+ 4A47              ; "R": rename disk
6827+ 4A47              ; syntax: DISK "arg1"[,arg2][,1]
6828+ 4A47
6829+ 4A47              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6830+ 4A47 CD DD 46     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6831+ 4A4A C2 80 20             jp      NZ,IMERR        ; raise error if in indirect mode
6832+ 4A4D CD 71 48             call    CHKDOS          ; check if DOS is enabled
6833+ 4A50                      ; check first argument
6834+ 4A50 2B                   dec     HL              ; dec 'cause GETCHR increments
6835+ 4A51 CD B4 25             call    GETCHR          ; check if something follows
6836+ 4A54 CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6837+ 4A57 CD 57 2A             call    EVAL            ; Evaluate expression
6838+ 4A5A CD 49 2A             call    TSTSTR          ; Make sure it's a string
6839+ 4A5D 22 CF 60             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6840+ 4A60 CD 90 30             call    GSTRCU          ; check that a string follows
6841+ 4A63 CD A1 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6842+ 4A66 7B                   ld      A,E
6843+ 4A67 3D                   dec     A               ; lenght must be = 1
6844+ 4A68 2A CF 60             ld      HL,(TPHL)       ; retrieve code string pointer
6845+ 4A6B C2 6B 20             jp      NZ,SNERR
6846+ 4A6E 0A                   ld      A,(BC)          ; load command
6847+ 4A6F E6 5F                and     %01011111       ; Force upper case
6848+ 4A71 FE 46                cp      'F'             ; format command?
6849+ 4A73 CA 7E 4A             jp      Z,DSKFRM        ; yes, format disk
6850+ 4A76 FE 52                cp      'R'             ; rename command?
6851+ 4A78 CA 4B 4B             jp      Z,DSKRNM        ; yes, rename disk
6852+ 4A7B C3 6B 20             jp      SNERR           ; raise a syntax error
6853+ 4A7E
6854+ 4A7E
6855+ 4A7E              ; Format disk or rewrite Master sector
6856+ 4A7E              ; syntax: DISK "F","disk name"[,1]
6857+ 4A7E              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6858+ 4A7E              ; ",1": just rewrite Master sector without overwriting current directory
6859+ 4A7E              ; Format: set up a fresh new file system, re-writing the Master sector and
6860+ 4A7E              ; initializing the directory
6861+ 4A7E              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6862+ 4A7E              ; re-calculating disk geometry
6863+ 4A7E              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6864+ 4A7E              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6865+ 4A7E CD 6B 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6866+ 4A81 2C                   defb    ','
6867+ 4A82 CD A0 4B             call    CHKFLNM         ; check for file name
6868+ 4A85 CD CA 49             call    CHK1AR          ; check if ",1" follows - saved into A
6869+ 4A88 11 D0 4A             ld      DE,MSTTXT       ; format message
6870+ 4A8B B7                   or      A               ; A=0?
6871+ 4A8C 20 03                jr      NZ,CFINIT       ; no, jump over
6872+ 4A8E 11 E8 4A             ld      DE,FRMTXT       ; only Master Sector
6873+ 4A91 E5           CFINIT: push    HL              ; store code string pointer
6874+ 4A92 62                   ld      H,D             ; Point to message
6875+ 4A93 6B                   ld      L,E
6876+ 4A94 CD 4D 2F             call    PRS             ; print message for confirmation
6877+ 4A97 E1                   pop     HL              ; retrieve HL
6878+ 4A98 CD 7D 4B             call    CNFREQ          ; ask for confirmation
6879+ 4A9B DA 30 4A             jp      C,ABRTDS        ; if Carry set then abort
6880+ 4A9E CD 09 10     INITDSK:call    CF_INIT         ; init CF card
6881+ 4AA1 DA C3 49             jp      C,DOS_ERR       ; error if device not available/ready
6882+ 4AA4 C5                   push    BC
6883+ 4AA5 D5                   push    DE
6884+ 4AA6 E5                   push    HL              ; store code string pointer
6885+ 4AA7 CD ED 10             call    DSK_INIT        ; init disk
6886+ 4AAA E1                   pop     HL
6887+ 4AAB D1                   pop     DE
6888+ 4AAC C1                   pop     BC
6889+ 4AAD 30 03                jr      NC,INITFN       ; leave if no errors
6890+ 4AAF C3 C3 49             jp      DOS_ERR         ; raise error
6891+ 4AB2 E5           INITFN: push    HL              ; store code string pointer
6892+ 4AB3 3A 37 61             ld      A,(TMPBFR1)
6893+ 4AB6 B7                   or      A               ; full formatting?
6894+ 4AB7 20 0F                jr      NZ,MSPTOK       ; no
6895+ 4AB9 21 1A 4B             ld      HL,FRMTOK       ; yes, Point to message
6896+ 4ABC CD 4D 2F             call    PRS             ; print message for init confirmation
6897+ 4ABF D5                   push    DE
6898+ 4AC0 16 00                ld      D,$00           ; print only disk details, no file list
6899+ 4AC2 CD A3 12             call    LST_FILES       ; print details of disk and list files
6900+ 4AC5 D1                   pop     DE
6901+ 4AC6 E1                   pop     HL
6902+ 4AC7 C9                   ret                     ; return to caller
6903+ 4AC8 21 31 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6904+ 4ACB CD 4D 2F             call    PRS             ; print message for init confirmation
6905+ 4ACE E1                   pop     HL              ; retrieve code string pointer
6906+ 4ACF C9                   ret                     ; return to caller
6907+ 4AD0 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6907+ 4AD4 69 74 65 20
6907+ 4AD8 4D 61 73 74
6907+ 4ADC 65 72 20 53
6907+ 4AE0 65 63 74 6F
6907+ 4AE4 72 3F 20 00
6908+ 4AE8 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6908+ 4AEC 49 4E 47 21
6908+ 4AF0 21 20 44 69
6908+ 4AF4 73 6B 20 63
6908+ 4AF8 6F 6E 74 65
6908+ 4AFC 6E 74 73 20
6908+ 4B00 77 69 6C 6C
6908+ 4B04 20 62 65 20
6908+ 4B08 65 72 61 73
6908+ 4B0C 65 64 2E 20
6909+ 4B10 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6909+ 4B14 65 65 64 3F
6909+ 4B18 20 00
6910+ 4B1A 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6910+ 4B1E 6D 61 74 74
6910+ 4B22 69 6E 67 20
6910+ 4B26 63 6F 6D 70
6910+ 4B2A 6C 65 74 65
6910+ 4B2E 64 0D 00
6911+ 4B31 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6911+ 4B35 74 65 72 20
6911+ 4B39 53 65 63 74
6911+ 4B3D 6F 72 20 72
6911+ 4B41 65 77 72 69
6911+ 4B45 74 74 65 6E
6911+ 4B49 0D 00
6912+ 4B4B
6913+ 4B4B
6914+ 4B4B              ; disk rename
6915+ 4B4B CD 6B 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6916+ 4B4E 2C                   defb    ','
6917+ 4B4F CD A0 4B             call    CHKFLNM         ; check for file name
6918+ 4B52 E5                   push    HL              ; store code string pointer
6919+ 4B53 21 6F 4B             ld      HL,RNDKTX       ; Point to message
6920+ 4B56 CD 4D 2F             call    PRS             ; print message for confirmation
6921+ 4B59 E1                   pop     HL              ; retrieve HL
6922+ 4B5A CD 7D 4B             call    CNFREQ          ; ask for confirmation
6923+ 4B5D DA 30 4A             jp      C,ABRTDS        ; if Carry set then abort
6924+ 4B60 CD 09 10             call    CF_INIT         ; init CF card
6925+ 4B63 DA C3 49             jp      C,DOS_ERR       ; error if device not available/ready
6926+ 4B66 E5                   push    HL              ; store code string pointer
6927+ 4B67 CD 1E 12             call    DSK_RNM         ; init disk
6928+ 4B6A E1                   pop     HL
6929+ 4B6B DA C3 49             jp      C,DOS_ERR       ; DOS error
6930+ 4B6E C9                   ret
6931+ 4B6F 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6931+ 4B73 6D 65 20 64
6931+ 4B77 69 73 6B 3F
6931+ 4B7B 20 00
6932+ 4B7D
6933+ 4B7D              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6934+ 4B7D CD 23 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6935+ 4B80 AF                   xor     A
6936+ 4B81 32 33 61             ld      (PRNTVIDEO),A   ; disable print-on-video
6937+ 4B84 CD 2A 02             call    RXA             ; look for a pressed key
6938+ 4B87 FE 03                cp      CTRLC           ; is it RUN STOP?
6939+ 4B89 28 13                jr      Z,CNFRQN        ; yes, abort operation
6940+ 4B8B E6 DF                and     %11011111       ; only UPPERCASE char
6941+ 4B8D FE 59                cp      'Y'             ; 'Y'?
6942+ 4B8F 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6943+ 4B91 3E 01                ld      A,$01           ; re-enable...
6944+ 4B93 32 33 61             ld      (PRNTVIDEO),A   ; ...print-on-video
6945+ 4B96 CD 1C 03             call    ECHO_CHAR       ; yes, echoes the char
6946+ 4B99 CD 38 09             call    CURSOR_OFF      ; disable cursor
6947+ 4B9C AF                   xor     A               ; reset Carry flag
6948+ 4B9D C9                   ret                     ; return to caller
6949+ 4B9E 37           CNFRQN: scf                     ; set Carry flag
6950+ 4B9F C9                   ret                     ; return to caller
6951+ 4BA0
6952+ 4BA0              ; check that a disk/file name follows
6953+ 4BA0 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6954+ 4BA1 CD B4 25             call    GETCHR          ; check if something follows
6955+ 4BA4 CA 6B 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6956+ 4BA7 CD 57 2A             call    EVAL            ; Evaluate expression
6957+ 4BAA CD 49 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6958+ 4BAD 22 D1 60             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6959+ 4BB0 ED 53 D3 60          ld      (TMPDBF+4),DE   ; store DE
6960+ 4BB4 ED 43 D5 60          ld      (TMPDBF+6),BC
6961+ 4BB8 CD 90 30             call    GSTRCU          ; get current string into pool
6962+ 4BBB CD A1 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6963+ 4BBE 7B                   ld      A,E             ; check if lenght = 0
6964+ 4BBF A7                   and     A               ; null string?
6965+ 4BC0 CA 6B 20             jp      Z,SNERR         ; yes, syntax error
6966+ 4BC3 ED 53 3B 61          ld      (DKLNPT),DE     ; no, store lenght
6967+ 4BC7 ED 43 39 61          ld      (DKNMPT),BC     ; store address of temp string
6968+ 4BCB 2A D1 60             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6969+ 4BCE ED 5B D3 60          ld      DE,(TMPDBF+4)   ; retrieve DE
6970+ 4BD2 ED 4B D5 60          ld      BC,(TMPDBF+6)   ; retrieve BC
6971+ 4BD6 C9                   ret                     ; return to caller
6972+ 4BD7
6973+ 4BD7
6974+ 4BD7              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6975+ 4BD7 CD 48 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6976+ 4BDA CD 6A 26             call	DEINT           ; Get integer -32768 to 32767
6977+ 4BDD C5                   push	BC              ; Save contents of BC
6978+ 4BDE 21 90 61             ld      HL,PBUFF        ; load address of PBUFF into HL
6979+ 4BE1 7A                   ld      A,D             ; Get MSB into A
6980+ 4BE2 B7                   or      A               ; OR with LSB to see if param=0
6981+ 4BE3 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6982+ 4BE5 CD 0D 4C             call    BYT2ASC         ; Convert D to ASCII
6983+ 4BE8 78                   ld      A,B             ; cechk if B
6984+ 4BE9 FE 30                cp      '0'             ; is 0
6985+ 4BEB 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6986+ 4BED 70                   ld      (HL),B          ; Store it to PBUFF
6987+ 4BEE 23                   inc     HL              ; Next location
6988+ 4BEF 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6989+ 4BF0 23                   inc     HL              ; Next location
6990+ 4BF1 7B           HEX2:   ld      A,E             ; Get lower byte
6991+ 4BF2 CD 0D 4C             call    BYT2ASC         ; Convert E to ASCII
6992+ 4BF5 7A                   ld      A,D
6993+ 4BF6 B7                   or      A
6994+ 4BF7 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
6995+ 4BF9 78                   ld      A,B
6996+ 4BFA FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
6997+ 4BFC 28 02                jr      Z,HEX4
6998+ 4BFE 70           HEX3:   ld      (HL),B          ; to PBUFF+2
6999+ 4BFF 23                   inc     HL              ; Next location
7000+ 4C00 71           HEX4:   ld      (HL),C          ; to PBUFF+3
7001+ 4C01 23                   inc     HL              ; PBUFF+4 to zero
7002+ 4C02 AF                   xor     A               ; Terminating character
7003+ 4C03 77                   ld      (HL),A          ; Store zero to terminate
7004+ 4C04 23                   inc     HL              ; Make sure PBUFF is terminated
7005+ 4C05 77                   ld      (HL),A          ; Store the double zero there
7006+ 4C06 C1                   pop     BC              ; Get BC back
7007+ 4C07 21 90 61             ld      HL,PBUFF        ; Reset to start of PBUFF
7008+ 4C0A C3 DD 2E             jp      STR1            ; Convert the PBUFF to a string and return it
7009+ 4C0D 47           BYT2ASC:ld      B,A             ; Save original value
7010+ 4C0E E6 0F                and     $0F             ; Strip off upper nybble
7011+ 4C10 FE 0A                cp      $0A             ; 0-9?
7012+ 4C12 38 02                jr      C,ADD30         ; If A-F, add 7 more
7013+ 4C14 C6 07                add     A,$07           ; Bring value up to ASCII A-F
7014+ 4C16 C6 30        ADD30:  add     A,$30           ; And make ASCII
7015+ 4C18 4F                   ld      C,A             ; Save converted char to C
7016+ 4C19 78                   ld      A,B             ; Retrieve original value
7017+ 4C1A 0F                   rrca                    ; and Rotate it right
7018+ 4C1B 0F                   rrca
7019+ 4C1C 0F                   rrca
7020+ 4C1D 0F                   rrca
7021+ 4C1E E6 0F                and     $0F             ; Mask off upper nybble
7022+ 4C20 FE 0A                cp      $0A             ; 0-9? < A hex?
7023+ 4C22 38 02                jr      C,ADD301        ; Skip Add 7
7024+ 4C24 C6 07                add     A,$07           ; Bring it up to ASCII A-F
7025+ 4C26 C6 30        ADD301: add     A,$30           ; And make it full ASCII
7026+ 4C28 47                   ld      B,A             ; Store high order byte
7027+ 4C29 C9                   ret
7028+ 4C2A
7029+ 4C2A              ; Convert "&Hnnnn" to FPREG
7030+ 4C2A              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7031+ 4C2A              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7032+ 4C2A EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7033+ 4C2B 21 00 00             ld      HL,$0000        ; Zero out the value
7034+ 4C2E CD 43 4C             call    GETHEX          ; Check the number for valid hex
7035+ 4C31 DA 63 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7036+ 4C34 18 05                jr      HEXLP1          ; Convert first character
7037+ 4C36 CD 43 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7038+ 4C39 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7039+ 4C3B 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7040+ 4C3C 29                   add     HL,HL
7041+ 4C3D 29                   add     HL,HL
7042+ 4C3E 29                   add     HL,HL
7043+ 4C3F B5                   or      L               ; Add in D0-D3 into L
7044+ 4C40 6F                   ld      L,A             ; Save new value
7045+ 4C41 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7046+ 4C43
7047+ 4C43 13           GETHEX: inc     DE              ; Next location
7048+ 4C44 1A                   ld      A,(DE)          ; Load character at pointer
7049+ 4C45 FE 20                cp      SPC
7050+ 4C47 CA 43 4C             jp      Z,GETHEX        ; Skip spaces
7051+ 4C4A D6 30                sub     $30             ; Get absolute value
7052+ 4C4C D8                   ret     C               ; < "0", error
7053+ 4C4D FE 0A                cp      $0A
7054+ 4C4F 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7055+ 4C51 D6 07                sub     $07             ; Reduce to A-F
7056+ 4C53 FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7057+ 4C55 D8                   ret     C               ; CY set if was :            ; < = > ? @
7058+ 4C56 FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7059+ 4C58 3F                   ccf
7060+ 4C59 C9                   ret                     ; CY set if it wasn't valid hex
7061+ 4C5A
7062+ 4C5A EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7063+ 4C5B 7A                   ld      A,D             ; Load DE into AC
7064+ 4C5C 4B                   ld      C,E             ; For prep to
7065+ 4C5D E5                   push    HL
7066+ 4C5E CD 2E 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7067+ 4C61 E1                   pop     HL
7068+ 4C62 C9                   ret
7069+ 4C63
7070+ 4C63 DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7071+ 4C65 C3 85 20             jp      ERROR
7072+ 4C68
7073+ 4C68              ; BIN$(NN) Convert integer to a 1-16 char binary string
7074+ 4C68 CD 48 2A     BIN:    call    TSTNUM          ; Verify it's a number
7075+ 4C6B CD 6A 26             call    DEINT           ; Get integer -32768 to 32767
7076+ 4C6E C5           BIN2:   push    BC              ; Save contents of BC
7077+ 4C6F 21 90 61             ld      HL,PBUFF
7078+ 4C72 06 11                ld      B,$11           ; One higher than max char count (16+1)
7079+ 4C74              ZEROSUP:                        ; Suppress leading zeros
7080+ 4C74 05                   dec     B               ; Max 16 chars
7081+ 4C75 78                   ld      A,B
7082+ 4C76 FE 01                cp      $01
7083+ 4C78 28 08                jr      Z,BITOUT        ; Always output at least one character
7084+ 4C7A CB 13                rl      E
7085+ 4C7C CB 12                rl      D
7086+ 4C7E 30 F4                jr      NC,ZEROSUP
7087+ 4C80 18 04                jr      BITOUT2
7088+ 4C82 CB 13        BITOUT: rl      E
7089+ 4C84 CB 12                rl      D               ; Top bit now in carry
7090+ 4C86 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7091+ 4C88 CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7092+ 4C8A 77                   ld      (HL),A
7093+ 4C8B 23                   inc     HL
7094+ 4C8C 05                   dec     B
7095+ 4C8D 20 F3                jr      NZ,BITOUT
7096+ 4C8F AF                   xor     A               ; Terminating character
7097+ 4C90 77                   ld      (HL),A          ; Store zero to terminate
7098+ 4C91 23                   inc     HL              ; Make sure PBUFF is terminated
7099+ 4C92 77                   ld      (HL),A          ; Store the double zero there
7100+ 4C93 C1                   pop     BC
7101+ 4C94 21 90 61             ld      HL,PBUFF
7102+ 4C97 C3 DD 2E             jp      STR1
7103+ 4C9A
7104+ 4C9A              ; Convert "&Bnnnn" to FPREG
7105+ 4C9A              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7106+ 4C9A EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7107+ 4C9B 21 00 00             ld      HL,$0000        ; Zero out the value
7108+ 4C9E CD B7 4C             call    CHKBIN          ; Check the number for valid bin
7109+ 4CA1 DA C5 4C             jp      C,BINERR        ; First value wasn't bin, HX error
7110+ 4CA4 D6 30        BINIT:  sub     '0'
7111+ 4CA6 29                   add     HL,HL           ; Rotate HL left
7112+ 4CA7 B5                   or      L
7113+ 4CA8 6F                   ld      L,A
7114+ 4CA9 CD B7 4C             call    CHKBIN          ; Get second and addtional characters
7115+ 4CAC 30 F6                jr      NC,BINIT        ; Process if a bin character
7116+ 4CAE EB                   ex      DE,HL           ; Value into DE, Code string into HL
7117+ 4CAF 7A                   ld      A,D             ; Load DE into AC
7118+ 4CB0 4B                   ld      C,E             ; For prep to
7119+ 4CB1 E5                   push    HL
7120+ 4CB2 CD 2E 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7121+ 4CB5 E1                   pop     HL
7122+ 4CB6 C9                   ret
7123+ 4CB7
7124+ 4CB7              ; Char is in A, NC if char is 0 or 1
7125+ 4CB7 13           CHKBIN: inc     DE
7126+ 4CB8 1A                   ld      A,(DE)
7127+ 4CB9 FE 20                cp      SPC
7128+ 4CBB CA B7 4C             jp      Z,CHKBIN        ; Skip spaces
7129+ 4CBE FE 30                cp      '0'             ; Set C if < '0'
7130+ 4CC0 D8                   ret     C
7131+ 4CC1 FE 32                cp      '2'
7132+ 4CC3 3F                   ccf                     ; Set C if > '1'
7133+ 4CC4 C9                   ret
7134+ 4CC5
7135+ 4CC5 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7136+ 4CC7 C3 85 20             jp      ERROR
7137+ 4CCA
7138+ 4CCA
7139+ 4CCA C3 08 00     MONOUT: jp      $0008           ; output a char
7140+ 4CCD
7141+ 4CCD
7142+ 4CCD CD E6 32     RESET:  call    DISNMI          ; disable NMI vector
7143+ 4CD0 3A 79 61             ld      A,(SERIALS_EN)  ; load status of serial lines
7144+ 4CD3 E6 11                and     $11             ; are serial ports open?
7145+ 4CD5 C4 DB 44             call    NZ,RSTSERS      ; yes, reset serials
7146+ 4CD8 3A 7C 61             ld      A,(DOS_EN)      ; is DOS enabled
7147+ 4CDB A7                   and     A               ; if enabled, A<>0
7148+ 4CDC C4 81 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7149+ 4CDF F3                   di                      ; disable INTs
7150+ 4CE0                  IFDEF LM80C64K
7151+ 4CE0 C3 03 5F             jp      ROM2RAM         ; Restart
7152+ 4CE3                  ELSE
7153+ 4CE3 ~                    jp      $0000           ; Restart
7154+ 4CE3                  ENDIF
7155+ 4CE3
7156+ 4CE3
7157+ 4CE3 3E 00        INITST: ld      A,$00           ; Clear break flag
7158+ 4CE5 32 DB 5F             ld      (BRKFLG),A
7159+ 4CE8 C3 5A 1B             jp      SYSINIT
7160+ 4CEB
7161+ 4CEB
7162+ 4CEB F5           TSTBIT: push    AF              ; Save bit mask
7163+ 4CEC A0                   and     B               ; Get common bits
7164+ 4CED C1                   pop     BC              ; Restore bit mask
7165+ 4CEE B8                   cp      B               ; Same bit set?
7166+ 4CEF 3E 00                ld      A,$00           ; Return 0 in A
7167+ 4CF1 C9                   ret
7168+ 4CF2
7169+ 4CF2 CD 76 23     OUTNCR: call    OUTC            ; Output character in A
7170+ 4CF5 C3 81 28             jp      PRNTCRLF        ; Output CRLF
7171+ 4CF8
# file closed: ../include/basic/basic-1.05.asm
  87  4CF8
  88  4CF8              ; include utils
  89  4CF8                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4CF8              ; ------------------------------------------------------------------------------
   2+ 4CF8              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4CF8              ; ------------------------------------------------------------------------------
   4+ 4CF8              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4CF8              ; designed by Leonardo Miliani. More info at
   6+ 4CF8              ; www DOT leonardomiliani DOT com
   7+ 4CF8              ;
   8+ 4CF8              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4CF8              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4CF8              ;
  11+ 4CF8              ; * WKT are routines from WikiTI:
  12+ 4CF8              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4CF8              ;
  14+ 4CF8              ; * LAC are routines from Learn@Cemetch
  15+ 4CF8              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4CF8              ;
  17+ 4CF8              ; ------------------------------------------------------------------------------
  18+ 4CF8              ; Code Revision:
  19+ 4CF8              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4CF8              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4CF8              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4CF8              ;                   transform a 32-bit value into ASCII representation
  23+ 4CF8              ;
  24+ 4CF8              ; ------------------------------------------------------------------------------
  25+ 4CF8
  26+ 4CF8              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4CF8              ; values can be both signed or unsigned words
  28+ 4CF8              ; inputs: HL, DE
  29+ 4CF8              ; destroys: A,F,HL
  30+ 4CF8              ;
  31+ 4CF8              ; returns: Z=1 if HL = DE
  32+ 4CF8              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4CF8              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4CF8              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4CF8              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4CF8              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4CF8              ; Source: ALS
  38+ 4CF8
  39+ 4CF8 B7           CMP16:  or      A           ; clear CARRY
  40+ 4CF9 ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4CFB E0                   ret     PO          ; return if no overflow
  42+ 4CFC 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4CFD 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4CFE EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4D00 37                   scf                 ; ensure a Non-Zero result
  46+ 4D01 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4D02                                          ; ZERO flag = 0 for sure
  48+ 4D02 C9                   ret                 ; return
  49+ 4D03
  50+ 4D03              ; ----------------------------------------------------------------------
  51+ 4D03
  52+ 4D03              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4D03              ; signed/unsigned product
  54+ 4D03              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4D03              ; destroys: A,F
  56+ 4D03              ; returns: HL (product)
  57+ 4D03              ; Source: ALS
  58+ 4D03
  59+ 4D03              ; initialize partial product, bit count
  60+ 4D03 C5           MUL16:  push    BC
  61+ 4D04 4D                   ld      C,L         ; BC = multiplier
  62+ 4D05 44                   ld      B,H
  63+ 4D06 21 00 00             ld      HL,0        ; product = 0
  64+ 4D09 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4D0B                      ; shift-and-add algorithm
  66+ 4D0B                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4D0B                      ; shift partial product, multiplier left 1 bit
  68+ 4D0B CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4D0D CB 12                rl      D
  70+ 4D0F 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4D11 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4D12 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4D13 3D                   dec     A
  74+ 4D14 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4D16                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4D16 B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4D17 F2 1B 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D1A 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D1B C1           EXMUL16:pop     BC
  80+ 4D1C C9                   ret
  81+ 4D1D
  82+ 4D1D
  83+ 4D1D              ; ----------------------------------------------------------------------
  84+ 4D1D
  85+ 4D1D              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D1D              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D1D              ; destroys: A,F
  88+ 4D1D              ; operation: BC * DE
  89+ 4D1D              ; returns: DEHL (product)
  90+ 4D1D              ; Source: WKT
  91+ 4D1D
  92+ 4D1D 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D20 CB 23                sla     E		; optimised 1st iteration
  94+ 4D22 CB 12                rl      D
  95+ 4D24 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D26 60                   ld      H,B
  97+ 4D27 69                   ld      L,C
  98+ 4D28 3E 0F        MU32_1: ld      A,$0F
  99+ 4D2A 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D2B CB 13                rl      E
 101+ 4D2D CB 12                rl      D
 102+ 4D2F 30 04                jr      NC,MU32_2
 103+ 4D31 09                   add     HL,BC
 104+ 4D32 30 01                jr      NC,MU32_2
 105+ 4D34 13                   inc     DE
 106+ 4D35 3D           MU32_2: dec     A
 107+ 4D36 20 F2                jr      NZ,MUL_32L
 108+ 4D38 C9                   ret
 109+ 4D39
 110+ 4D39              ; ----------------------------------------------------------------------
 111+ 4D39              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D39              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D39              ;
 114+ 4D39              ; inputs: HL
 115+ 4D39              ; destroys: A
 116+ 4D39              ; operation: ABS(HL)
 117+ 4D39              ; returns: HL with no sign or negated
 118+ 4D39              ; Source: WKT
 119+ 4D39
 120+ 4D39 CB 7C        absHL:  bit     7,H
 121+ 4D3B C8                   ret     Z
 122+ 4D3C AF           negHL:  xor     A
 123+ 4D3D 95                   sub     L
 124+ 4D3E 6F                   ld      L,A
 125+ 4D3F 9F                   sbc     A,A
 126+ 4D40 94                   sub     H
 127+ 4D41 67                   ld      H,A
 128+ 4D42 C9                   ret
 129+ 4D43
 130+ 4D43              ; ------------------------------------------------------------------------------
 131+ 4D43
 132+ 4D43              ; 8/8 division
 133+ 4D43              ; INPUT: D (dividend), E (divisor)
 134+ 4D43              ; OPERATION: D/E
 135+ 4D43              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D43 AF           DIV_8_8:    xor     A
 137+ 4D44 C5                       push    BC
 138+ 4D45 06 08                    ld      B,08h
 139+ 4D47 CB 22        DIV_8_8LOOP:sla     D
 140+ 4D49 17                       rla
 141+ 4D4A BB                       cp      E
 142+ 4D4B 38 02                    jr      C,$+4
 143+ 4D4D 93                       sub     E
 144+ 4D4E 14                       inc     D
 145+ 4D4F 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D51 C1                       pop     BC
 147+ 4D52 C9                       ret
 148+ 4D53
 149+ 4D53              ; ----------------------------------------------------------------------
 150+ 4D53              ; divide a 16-bit number by an 8-bit number
 151+ 4D53              ; (16/8 division)
 152+ 4D53              ;
 153+ 4D53              ; inputs: HL (Dividend), C (divisor)
 154+ 4D53              ; destroys: A, B
 155+ 4D53              ; OPERATION: HL/C
 156+ 4D53              ; returns: HL (quotient), A (remainder)
 157+ 4D53              ; source: WKT
 158+ 4D53
 159+ 4D53 AF           DIV_16_8:   xor     A
 160+ 4D54 06 10                    ld      B,16
 161+ 4D56 29           DIV_16_8LP: add     HL,HL
 162+ 4D57 17                       rla
 163+ 4D58 38 03                    jr      C,$+5
 164+ 4D5A B9                       cp      C
 165+ 4D5B 38 02                    jr      C,$+4
 166+ 4D5D 91                       sub     C
 167+ 4D5E 2C                       inc     L
 168+ 4D5F 10 F5                    djnz    DIV_16_8LP
 169+ 4D61 C9                       ret
 170+ 4D62
 171+ 4D62              ; ----------------------------------------------------------------------
 172+ 4D62              ; divide a 16-bit number by a 16-bit number
 173+ 4D62              ; (16/16 division)
 174+ 4D62              ;
 175+ 4D62              ; inputs: AC (Dividend), DE (divisor)
 176+ 4D62              ; destroys: HL,A,C
 177+ 4D62              ; OPERATION: AC/DE
 178+ 4D62              ; returns: AC (quotient), HL (remainder)
 179+ 4D62              ; source: WKT
 180+ 4D62 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4D65 06 10                    ld      B, 16
 182+ 4D67 CB 21        DV16_16_LP: sla     C
 183+ 4D69 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4D6B 17                       rla
 185+ 4D6C ED 6A                    adc     HL,HL
 186+ 4D6E ED 52                    sbc     HL,DE
 187+ 4D70 30 02                    jr      NC, $+4
 188+ 4D72 19                       add     HL,DE
 189+ 4D73 0D                       dec     C
 190+ 4D74 10 F1                    djnz    DV16_16_LP
 191+ 4D76 C9                       ret
 192+ 4D77
 193+ 4D77
 194+ 4D77              ; ----------------------------------------------------------------------
 195+ 4D77              ; divide a 32-bit number by a 16 bit-number
 196+ 4D77              ; (32/16 division)
 197+ 4D77              ;
 198+ 4D77              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4D77              ; destroys: HL,IX,BC
 200+ 4D77              ; OPERATION: ACIX/DE
 201+ 4D77              ; returns: ACIX (quotient), HL (remainder)
 202+ 4D77              ; source: WKT
 203+ 4D77
 204+ 4D77 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4D7A 06 20                    ld      B,32
 206+ 4D7C DD 29        DIV_32_16LP:add     IX,IX
 207+ 4D7E CB 11                    rl      C
 208+ 4D80 17                       rla
 209+ 4D81 ED 6A                    adc     HL,HL
 210+ 4D83 38 08                    jr      C,DIV_32_16OF
 211+ 4D85 ED 52                    sbc     HL,DE
 212+ 4D87 30 07                    jr      NC,DIV_32_16SB
 213+ 4D89 19                       add     HL,DE
 214+ 4D8A 10 F0                    djnz    DIV_32_16LP
 215+ 4D8C C9                       ret
 216+ 4D8D B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4D8E ED 52                    sbc     HL,DE
 218+ 4D90 DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4D92 10 E8                    djnz    DIV_32_16LP
 220+ 4D94 C9                       ret
 221+ 4D95
 222+ 4D95
 223+ 4D95              ; ----------------------------------------------------------------------
 224+ 4D95              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4D95              ;
 226+ 4D95              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4D95              ; destroys: AF, BC, DE, HL, IX
 228+ 4D95              ; outputs: IY (last char in dest. string)
 229+ 4D95              ; source: MSX Forum
 230+ 4D95
 231+ 4D95 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4D99 0A 00 00 00
 231+ 4D9D 64 00 00 00
 231+ 4DA1 E8 03 00 00
 231+ 4DA5 10 27 00 00
 232+ 4DA9 A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4DAD 40 42 0F 00
 232+ 4DB1 80 96 98 00
 232+ 4DB5 00 E1 F5 05
 232+ 4DB9 00 CA 9A 3B
 233+ 4DBD 00 00 00 00  CLCN32Z:    defs    4
 234+ 4DC1
 235+ 4DC1 DD 22 BD 4D  CLCN32:     ld      (CLCN32Z),IX
 236+ 4DC5 ED 53 BF 4D              ld      (CLCN32Z+$02),DE
 237+ 4DC9 DD 21 B9 4D              ld      IX,CLCN32T+$24
 238+ 4DCD 06 09                    ld      B,$09
 239+ 4DCF 0E 00                    ld      C,$00
 240+ 4DD1 3E 30        CLCN321:    ld      A,"0"
 241+ 4DD3 B7                       or      A
 242+ 4DD4 DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4DD7 DD 56 01                 ld      D,(IX+$01)
 244+ 4DDA 2A BD 4D                 ld      HL,(CLCN32Z)
 245+ 4DDD ED 52                    sbc     HL,DE
 246+ 4DDF 22 BD 4D                 ld      (CLCN32Z),HL
 247+ 4DE2 DD 5E 02                 ld      E,(IX+$02)
 248+ 4DE5 DD 56 03                 ld      D,(IX+$03)
 249+ 4DE8 2A BF 4D                 ld      HL,(CLCN32Z+$02)
 250+ 4DEB ED 52                    sbc     HL,DE
 251+ 4DED 22 BF 4D                 ld      (CLCN32Z+$02),HL
 252+ 4DF0 38 04                    jr      C,CLCN325
 253+ 4DF2 0C                       inc     C
 254+ 4DF3 3C                       inc     A
 255+ 4DF4 18 DE                    jr      CLCN322
 256+ 4DF6 DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4DF9 DD 56 01                 ld      D,(IX+$01)
 258+ 4DFC 2A BD 4D                 ld      HL,(CLCN32Z)
 259+ 4DFF 19                       add     HL,DE
 260+ 4E00 22 BD 4D                 ld      (CLCN32Z),HL
 261+ 4E03 DD 5E 02                 ld      E,(IX+$02)
 262+ 4E06 DD 56 03                 ld      D,(IX+$03)
 263+ 4E09 2A BF 4D                 ld      HL,(CLCN32Z+$02)
 264+ 4E0C ED 5A                    adc     HL,DE
 265+ 4E0E 22 BF 4D                 ld      (CLCN32Z+$02),HL
 266+ 4E11 11 FC FF                 ld      DE,-4
 267+ 4E14 DD 19                    add     IX,DE
 268+ 4E16 0C                       inc     C
 269+ 4E17 0D                       dec     C
 270+ 4E18 28 05                    jr      Z,CLCN323
 271+ 4E1A FD 77 00                 ld      (IY+$00),A
 272+ 4E1D FD 23                    inc     IY
 273+ 4E1F 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E21 3A BD 4D                 ld      A,(CLCN32Z)
 275+ 4E24 C6 30                    add     "0"
 276+ 4E26 FD 77 00                 ld      (IY+$00),A
 277+ 4E29 FD 36 01 00              ld      (IY+$01),0
 278+ 4E2D C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E2E
  91  4E2E              ; include the latest version of the font sets
  92  4E2E                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E2E              ; ------------------------------------------------------------------------------
   2+ 4E2E              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E2E              ; ------------------------------------------------------------------------------
   4+ 4E2E              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E2E              ; designed by Leonardo Miliani. More info at
   6+ 4E2E              ; www DOT leonardomiliani DOT com
   7+ 4E2E              ; ------------------------------------------------------------------------------
   8+ 4E2E              ; Code Revision:
   9+ 4E2E              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E2E              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E2E              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E2E              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E2E              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E2E              ; R1.5 - 20200524 - New style for char #252
  15+ 4E2E              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E2E              ; ------------------------------------------------------------------------------
  17+ 4E2E              ;
  18+ 4E2E              ;-------------------------------------------------------------------------------
  19+ 4E2E              ;
  20+ 4E2E              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E2E              ;
  22+ 4E2E              ;-------------------------------------------------------------------------------
  23+ 4E2E              ;
  24+ 4E2E              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E2E              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E2E
  27+ 4E2E              CHRST68 equ $
  28+ 4E2E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E32 00 00 00 00
  29+ 4E36 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E3A 00 00 00 00
  30+ 4E3E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E42 00 00 00 00
  31+ 4E46 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E4A 00 00 00 00
  32+ 4E4E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E52 00 00 00 00
  33+ 4E56 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4E5A 00 00 00 00
  34+ 4E5E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4E62 00 00 00 00
  35+ 4E66 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4E6A 00 00 00 00
  36+ 4E6E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4E72 00 00 00 00
  37+ 4E76 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4E7A 00 00 00 00
  38+ 4E7E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4E82 00 00 00 00
  39+ 4E86 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4E8A 00 00 00 00
  40+ 4E8E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4E92 00 00 00 00
  41+ 4E96 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4E9A 00 00 00 00
  42+ 4E9E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4EA2 00 00 00 00
  43+ 4EA6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4EAA 00 00 00 00
  44+ 4EAE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4EB2 00 00 00 00
  45+ 4EB6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4EBA 00 00 00 00
  46+ 4EBE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4EC2 00 00 00 00
  47+ 4EC6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4ECA 00 00 00 00
  48+ 4ECE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4ED2 00 00 00 00
  49+ 4ED6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4EDA 00 00 00 00
  50+ 4EDE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4EE2 00 00 00 00
  51+ 4EE6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4EEA 00 00 00 00
  52+ 4EEE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4EF2 00 00 00 00
  53+ 4EF6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4EFA 00 00 00 00
  54+ 4EFE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4F02 00 00 00 00
  55+ 4F06 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4F0A 00 00 00 00
  56+ 4F0E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4F12 00 00 00 00
  57+ 4F16 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F1A 00 00 00 00
  58+ 4F1E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F22 00 00 00 00
  59+ 4F26 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F2A 00 00 00 00
  60+ 4F2E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F32 00 00 00 00
  61+ 4F36 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F3A 20 00 20 00
  62+ 4F3E 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F42 00 00 00 00
  63+ 4F46 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F4A F8 50 50 00
  64+ 4F4E 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F52 28 F0 20 00
  65+ 4F56 C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4F5A 40 98 18 00
  66+ 4F5E 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4F62 A8 90 68 00
  67+ 4F66 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4F6A 00 00 00 00
  68+ 4F6E 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4F72 40 20 10 00
  69+ 4F76 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4F7A 10 20 40 00
  70+ 4F7E 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4F82 A8 20 00 00
  71+ 4F86 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4F8A 20 20 00 00
  72+ 4F8E 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4F92 60 20 40 00
  73+ 4F96 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4F9A 00 00 00 00
  74+ 4F9E 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4FA2 00 60 60 00
  75+ 4FA6 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4FAA 40 80 00 00
  76+ 4FAE 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4FB2 C8 88 70 00
  77+ 4FB6 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 4FBA 20 20 70 00
  78+ 4FBE 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 4FC2 20 40 F8 00
  79+ 4FC6 F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 4FCA 08 88 70 00
  80+ 4FCE 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 4FD2 F8 10 10 00
  81+ 4FD6 F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 4FDA 08 88 70 00
  82+ 4FDE 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 4FE2 88 88 70 00
  83+ 4FE6 F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 4FEA 40 40 40 00
  84+ 4FEE 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 4FF2 88 88 70 00
  85+ 4FF6 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 4FFA 08 10 60 00
  86+ 4FFE 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 5002 30 30 00 00
  87+ 5006 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 500A 30 10 20 00
  88+ 500E 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 5012 40 20 10 00
  89+ 5016 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 501A F8 00 00 00
  90+ 501E 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 5022 10 20 40 00
  91+ 5026 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 502A 20 00 20 00
  92+ 502E 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 5032 A8 A8 70 00
  93+ 5036 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 503A F8 88 88 00
  94+ 503E F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 5042 88 88 F0 00
  95+ 5046 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 504A 80 88 70 00
  96+ 504E E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 5052 88 90 E0 00
  97+ 5056 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 505A 80 80 F8 00
  98+ 505E F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 5062 80 80 80 00
  99+ 5066 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 506A 88 88 78 00
 100+ 506E 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 5072 88 88 88 00
 101+ 5076 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 507A 20 20 70 00
 102+ 507E 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 5082 10 90 60 00
 103+ 5086 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 508A A0 90 88 00
 104+ 508E 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 5092 80 80 F8 00
 105+ 5096 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 509A 88 88 88 00
 106+ 509E 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 50A2 88 88 88 00
 107+ 50A6 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 50AA 88 88 70 00
 108+ 50AE F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 50B2 80 80 80 00
 109+ 50B6 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 50BA A8 90 68 00
 110+ 50BE F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 50C2 A0 90 88 00
 111+ 50C6 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 50CA 08 08 F0 00
 112+ 50CE F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 50D2 20 20 20 00
 113+ 50D6 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 50DA 88 88 70 00
 114+ 50DE 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 50E2 88 50 20 00
 115+ 50E6 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 50EA A8 A8 50 00
 116+ 50EE 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 50F2 50 88 88 00
 117+ 50F6 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 50FA 20 20 20 00
 118+ 50FE F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 5102 40 80 F8 00
 119+ 5106 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 510A 40 40 70 00
 120+ 510E 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 5112 10 08 00 00
 121+ 5116 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 511A 10 10 70 00
 122+ 511E 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 5122 00 00 00 00
 123+ 5126 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 512A 00 00 00 FC
 124+ 512E 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 5132 00 00 00 00
 125+ 5136 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 513A 78 88 78 00
 126+ 513E 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 5142 C8 88 F0 00
 127+ 5146 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 514A 80 88 70 00
 128+ 514E 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 5152 98 88 78 00
 129+ 5156 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 515A F8 80 70 00
 130+ 515E 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 5162 40 40 40 00
 131+ 5166 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 516A 78 08 70 00
 132+ 516E 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 5172 88 88 88 00
 133+ 5176 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 517A 20 20 20 00
 134+ 517E 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 5182 08 88 70 00
 135+ 5186 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 518A C0 A0 90 00
 136+ 518E 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 5192 20 20 70 00
 137+ 5196 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 519A A8 88 88 00
 138+ 519E 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 51A2 88 88 88 00
 139+ 51A6 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 51AA 88 88 70 00
 140+ 51AE 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 51B2 F0 80 80 00
 141+ 51B6 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 51BA 78 08 08 00
 142+ 51BE 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 51C2 80 80 80 00
 143+ 51C6 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 51CA 70 08 F0 00
 144+ 51CE 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 51D2 40 48 30 00
 145+ 51D6 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 51DA 88 98 68 00
 146+ 51DE 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 51E2 88 50 20 00
 147+ 51E6 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 51EA A8 A8 50 00
 148+ 51EE 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 51F2 20 50 88 00
 149+ 51F6 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 51FA 68 08 70 00
 150+ 51FE 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 5202 20 40 F8 00
 151+ 5206 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 520A 20 20 10 00
 152+ 520E 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 5212 20 20 20 00
 153+ 5216 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 521A 10 10 20 00
 154+ 521E 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 5222 00 00 00 00
 155+ 5226 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 522A 00 00 00 00
 156+ 522E 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 5232 B4 84 78 00
 157+ 5236 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 523A B4 CC 78 00
 158+ 523E 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 5242 FC 78 30 00
 159+ 5246 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 524A F8 70 20 00
 160+ 524E 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 5252 A8 20 70 00
 161+ 5256 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 525A A8 20 70 00
 162+ 525E 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 5262 FC 30 30 30
 163+ 5266 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 526A 3C 30 30 30
 164+ 526E 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 5272 F0 30 30 30
 165+ 5276 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 527A F0 00 00 00
 166+ 527E 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 5282 3C 00 00 00
 167+ 5286 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 528A FC 00 00 00
 168+ 528E 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 5292 3C 30 30 30
 169+ 5296 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 529A FC 30 30 30
 170+ 529E 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 52A2 F0 30 30 30
 171+ 52A6 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 52AA FC 00 00 00
 172+ 52AE 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 52B2 30 30 30 30
 173+ 52B6 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 52BA 70 60 E0 C0
 174+ 52BE C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 52C2 38 18 1C 0C
 175+ 52C6 CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 52CA 30 78 CC CC
 176+ 52CE 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 52D2 20 20 20 20
 177+ 52D6 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 52DA 20 20 20 20
 178+ 52DE 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 52E2 20 20 20 20
 179+ 52E6 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 52EA 00 00 00 00
 180+ 52EE 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 52F2 00 00 00 00
 181+ 52F6 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 52FA 00 00 00 00
 182+ 52FE 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 5302 20 20 20 20
 183+ 5306 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 530A 20 20 20 20
 184+ 530E 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 5312 20 20 20 20
 185+ 5316 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 531A 00 00 00 00
 186+ 531E 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 5322 20 20 20 20
 187+ 5326 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 532A 20 40 40 80
 188+ 532E 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 5332 10 08 08 04
 189+ 5336 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 533A 30 48 48 84
 190+ 533E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 5342 00 00 FC FC
 191+ 5346 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 534A FC FC FC FC
 192+ 534E 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 5352 FC FC FC FC
 193+ 5356 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 535A 00 00 00 00
 194+ 535E FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 5362 00 00 00 00
 195+ 5366 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 536A FC FC 00 00
 196+ 536E 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 5372 80 80 80 80
 197+ 5376 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 537A E0 E0 E0 E0
 198+ 537E F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 5382 F8 F8 F8 F8
 199+ 5386 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 538A 04 04 04 04
 200+ 538E 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 5392 1C 1C 1C 1C
 201+ 5396 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 539A 7C 7C 7C 7C
 202+ 539E FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 53A2 84 84 84 FC
 203+ 53A6 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 53AA E0 E0 E0 E0
 204+ 53AE 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 53B2 1C 1C 1C 1C
 205+ 53B6 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 53BA 00 00 00 00
 206+ 53BE E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 53C2 00 00 00 00
 207+ 53C6 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 53CA 1C 1C 1C 1C
 208+ 53CE 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 53D2 E0 E0 E0 E0
 209+ 53D6 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 53DA 78 78 78 78
 210+ 53DE CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 53E2 CC CC CC CC
 211+ 53E6 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 53EA 00 00 FC FC
 212+ 53EE 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 53F2 FC FC 00 00
 213+ 53F6 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 53FA 30 30 CC CC
 214+ 53FE 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 5402 54 A8 54 A8
 215+ 5406 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 540A 64 30 98 CC
 216+ 540E CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 5412 CC 64 30 98
 217+ 5416 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 541A 30 98 CC 64
 218+ 541E 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 5422 64 CC 98 30
 219+ 5426 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 542A 20 00 F8 00
 220+ 542E C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 5432 C0 00 F8 00
 221+ 5436 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 543A 18 00 F8 00
 222+ 543E 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 5442 A0 60 20 00
 223+ 5446 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 544A 00 00 00 00
 224+ 544E 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 5452 70 00 00 00
 225+ 5456 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 545A 00 FC 00 00
 226+ 545E 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 5462 54 A8 00 00
 227+ 5466 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 546A E0 C0 80 00
 228+ 546E FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 5472 00 00 00 00
 229+ 5476 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 547A 1C 0C 04 00
 230+ 547E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 5482 00 30 78 FC
 231+ 5486 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 548A 20 20 20 00
 232+ 548E 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 5492 40 80 00 00
 233+ 5496 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 549A 18 10 00 00
 234+ 549E 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 54A2 24 1C 1C 3C
 235+ 54A6 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 54AA 20 F8 70 20
 236+ 54AE 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 54B2 90 E0 E0 F0
 237+ 54B6 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 54BA 60 20 00 00
 238+ 54BE F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 54C2 08 04 00 00
 239+ 54C6 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 54CA F0 44 38 00
 240+ 54CE 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 54D2 28 28 28 00
 241+ 54D6 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 54DA 1C 20 20 20
 242+ 54DE 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 54E2 E0 10 10 10
 243+ 54E6 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 54EA 00 00 00 00
 244+ 54EE 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 54F2 00 00 00 00
 245+ 54F6 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 54FA 3C 30 30 30
 246+ 54FE 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 5502 F0 30 30 30
 247+ 5506 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 550A E0 00 00 00
 248+ 550E 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 5512 1C 00 00 00
 249+ 5516 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 551A 48 30 00 00
 250+ 551E 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 5522 78 30 00 00
 251+ 5526 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 552A FC 78 30 00
 252+ 552E FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 5532 E0 C0 80 80
 253+ 5536 FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 553A 1C 0C 04 04
 254+ 553E 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 5542 1C 3C 7C FC
 255+ 5546 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 554A E0 F0 F8 FC
 256+ 554E 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 5552 F0 E0 C0 00
 257+ 5556 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 555A 78 CC 00 00
 258+ 555E 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 5562 70 20 70 20
 259+ 5566 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 556A 90 90 60 00
 260+ 556E F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 5572 84 84 84 FC
 261+ 5576 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 557A 84 84 84 FC
 262+ 557E 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 5582 48 48 48 78
 263+ 5586 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 558A FC B4 B4 FC
 264+ 558E 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 5592 D4 D4 00 00
 265+ 5596 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 559A 78 48 48 48
 266+ 559E 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 55A2 B4 84 78 00
 267+ 55A6 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 55AA A8 80 00 00
 268+ 55AE 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 55B2 A0 88 70 00
 269+ 55B6 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 55BA 84 84 FC 00
 270+ 55BE 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 55C2 F0 F0 F0 00
 271+ 55C6 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 55CA F0 F0 F0 00
 272+ 55CE FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 55D2 94 94 84 FC
 273+ 55D6 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 55DA 68 70 80 00
 274+ 55DE 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 55E2 6C 18 08 00
 275+ 55E6 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 55EA 20 60 E0 40
 276+ 55EE 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 55F2 E4 68 20 00
 277+ 55F6 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 55FA E0 60 20 00
 278+ 55FE 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 5602 F8 FC F0 90
 279+ 5606 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 560A B4 84 78 00
 280+ 560E 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 5612 40 48 B0 00
 281+ 5616 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 561A 48 3C 84 78
 282+ 561E 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 5622 F8 00 20 00
 283+ 5626 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 562A FC FC FC FC
 284+ 562E                      ; here ends the ASCII table
 285+ 562E
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  562E                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 562E              ; ------------------------------------------------------------------------------
   2+ 562E              ; LM80C - 8x8 CHARSET - R1.8
   3+ 562E              ; ------------------------------------------------------------------------------
   4+ 562E              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 562E              ; designed by Leonardo Miliani. More info at
   6+ 562E              ; www DOT leonardomiliani DOT com
   7+ 562E              ; ------------------------------------------------------------------------------
   8+ 562E              ; Code Revision:
   9+ 562E              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 562E              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 562E              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 562E              ; R1.3 - 20191015 - More graphic chars
  13+ 562E              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 562E              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 562E              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 562E              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 562E              ; R1.8 - 20200524 - New style for char #252
  18+ 562E              ; ------------------------------------------------------------------------------
  19+ 562E              ;
  20+ 562E              ;-------------------------------------------------------------------------------
  21+ 562E              ;
  22+ 562E              ;               8 x 8    C  H  A  R  S  E  T
  23+ 562E              ;
  24+ 562E              ;-------------------------------------------------------------------------------
  25+ 562E              ;
  26+ 562E              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 562E
  28+ 562E              CHRST88 equ $
  29+ 562E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 5632 00 00 00 00
  30+ 5636 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 563A 00 00 00 00
  31+ 563E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 5642 00 00 00 00
  32+ 5646 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 564A 00 00 00 00
  33+ 564E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 5652 00 00 00 00
  34+ 5656 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 565A 00 00 00 00
  35+ 565E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 5662 00 00 00 00
  36+ 5666 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 566A 00 00 00 00
  37+ 566E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 5672 00 00 00 00
  38+ 5676 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 567A 00 00 00 00
  39+ 567E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 5682 00 00 00 00
  40+ 5686 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 568A 00 00 00 00
  41+ 568E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 5692 00 00 00 00
  42+ 5696 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 569A 00 00 00 00
  43+ 569E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 56A2 00 00 00 00
  44+ 56A6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 56AA 00 00 00 00
  45+ 56AE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 56B2 00 00 00 00
  46+ 56B6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 56BA 00 00 00 00
  47+ 56BE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 56C2 00 00 00 00
  48+ 56C6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 56CA 00 00 00 00
  49+ 56CE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 56D2 00 00 00 00
  50+ 56D6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 56DA 00 00 00 00
  51+ 56DE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 56E2 00 00 00 00
  52+ 56E6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 56EA 00 00 00 00
  53+ 56EE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 56F2 00 00 00 00
  54+ 56F6 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 56FA 00 00 00 00
  55+ 56FE 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 5702 00 00 00 00
  56+ 5706 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 570A 00 00 00 00
  57+ 570E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 5712 00 00 00 00
  58+ 5716 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 571A 00 00 00 00
  59+ 571E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 5722 00 00 00 00
  60+ 5726 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 572A 00 00 00 00
  61+ 572E 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 5732 00 00 00 00
  62+ 5736 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 573A 10 00 10 00
  63+ 573E 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 5742 00 00 00 00
  64+ 5746 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 574A FE 28 28 00
  65+ 574E 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 5752 14 78 10 00
  66+ 5756 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 575A 10 26 46 00
  67+ 575E 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 5762 4A 44 3A 00
  68+ 5766 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 576A 00 00 00 00
  69+ 576E 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 5772 20 10 08 00
  70+ 5776 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 577A 08 10 20 00
  71+ 577E 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 5782 38 54 10 00
  72+ 5786 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 578A 10 10 00 00
  73+ 578E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 5792 00 18 08 10
  74+ 5796 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 579A 00 00 00 00
  75+ 579E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 57A2 00 18 18 00
  76+ 57A6 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 57AA 10 20 40 00
  77+ 57AE 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 57B2 64 44 38 00
  78+ 57B6 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 57BA 10 10 7C 00
  79+ 57BE 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 57C2 10 20 7C 00
  80+ 57C6 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 57CA 04 44 38 00
  81+ 57CE 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 57D2 7C 08 08 00
  82+ 57D6 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 57DA 04 44 38 00
  83+ 57DE 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 57E2 44 44 38 00
  84+ 57E6 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 57EA 20 20 20 00
  85+ 57EE 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 57F2 44 44 38 00
  86+ 57F6 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 57FA 04 44 38 00
  87+ 57FE 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 5802 18 18 00 00
  88+ 5806 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 580A 18 08 10 00
  89+ 580E 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 5812 10 08 04 00
  90+ 5816 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 581A 7E 00 00 00
  91+ 581E 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 5822 08 10 20 00
  92+ 5826 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 582A 10 00 10 00
  93+ 582E 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 5832 B8 80 84 78
  94+ 5836 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 583A 7C 44 44 00
  95+ 583E 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 5842 44 44 78 00
  96+ 5846 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 584A 40 44 38 00
  97+ 584E 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 5852 44 44 78 00
  98+ 5856 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 585A 40 40 7C 00
  99+ 585E 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 5862 40 40 40 00
 100+ 5866 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 586A 5C 44 38 00
 101+ 586E 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 5872 44 44 44 00
 102+ 5876 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 587A 10 10 38 00
 103+ 587E 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 5882 04 44 38 00
 104+ 5886 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 588A 48 44 44 00
 105+ 588E 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 5892 40 40 7C 00
 106+ 5896 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 589A 42 42 42 00
 107+ 589E 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 58A2 44 44 44 00
 108+ 58A6 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 58AA 44 44 38 00
 109+ 58AE 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 58B2 78 40 40 00
 110+ 58B6 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 58BA 54 48 34 00
 111+ 58BE 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 58C2 78 48 44 00
 112+ 58C6 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 58CA 04 04 78 00
 113+ 58CE 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 58D2 10 10 10 00
 114+ 58D6 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 58DA 44 44 38 00
 115+ 58DE 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 58E2 44 28 10 00
 116+ 58E6 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 58EA 5A 5A 24 00
 117+ 58EE 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 58F2 28 44 44 00
 118+ 58F6 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 58FA 10 10 10 00
 119+ 58FE 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 5902 20 40 7C 00
 120+ 5906 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 590A 20 20 38 00
 121+ 590E 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 5912 08 04 02 00
 122+ 5916 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 591A 08 08 38 00
 123+ 591E 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 5922 00 00 00 00
 124+ 5926 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 592A 00 00 7E 00
 125+ 592E 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 5932 00 00 00 00
 126+ 5936 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 593A 3C 44 3C 00
 127+ 593E 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 5942 44 44 78 00
 128+ 5946 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 594A 40 44 38 00
 129+ 594E 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 5952 44 44 3C 00
 130+ 5956 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 595A 7C 40 38 00
 131+ 595E 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 5962 20 20 20 00
 132+ 5966 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 596A 44 3C 04 38
 133+ 596E 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 5972 44 44 44 00
 134+ 5976 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 597A 10 10 10 00
 135+ 597E 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 5982 08 08 48 30
 136+ 5986 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 598A 60 50 48 00
 137+ 598E 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 5992 10 10 38 00
 138+ 5996 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 599A 4A 42 42 00
 139+ 599E 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 59A2 44 44 44 00
 140+ 59A6 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 59AA 44 44 38 00
 141+ 59AE 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 59B2 44 78 40 40
 142+ 59B6 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 59BA 44 3C 04 04
 143+ 59BE 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 59C2 40 40 40 00
 144+ 59C6 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 59CA 38 04 78 00
 145+ 59CE 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 59D2 20 24 18 00
 146+ 59D6 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 59DA 44 4C 34 00
 147+ 59DE 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 59E2 44 28 10 00
 148+ 59E6 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 59EA 54 54 28 00
 149+ 59EE 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 59F2 10 28 44 00
 150+ 59F6 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 59FA 4C 34 04 38
 151+ 59FE 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 5A02 10 20 7C 00
 152+ 5A06 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 5A0A 20 20 18 00
 153+ 5A0E 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 5A12 10 10 10 00
 154+ 5A16 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A1A 08 08 30 00
 155+ 5A1E 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A22 00 00 00 00
 156+ 5A26 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A2A 00 00 00 00
 157+ 5A2E 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A32 A5 99 42 3C
 158+ 5A36 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A3A DB E7 7E 3C
 159+ 5A3E 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A42 7C 38 10 00
 160+ 5A46 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A4A 7C 38 10 00
 161+ 5A4E 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A52 54 10 7C 00
 162+ 5A56 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5A5A D6 10 7C 00
 163+ 5A5E 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5A62 FF 18 18 18
 164+ 5A66 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5A6A 1F 18 18 18
 165+ 5A6E 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5A72 F8 18 18 18
 166+ 5A76 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5A7A F8 00 00 00
 167+ 5A7E 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5A82 1F 00 00 00
 168+ 5A86 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5A8A FF 00 00 00
 169+ 5A8E 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5A92 1F 18 18 18
 170+ 5A96 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5A9A FF 18 18 18
 171+ 5A9E 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5AA2 F8 18 18 18
 172+ 5AA6 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5AAA FF 00 00 00
 173+ 5AAE 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5AB2 18 18 18 18
 174+ 5AB6 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5ABA 38 70 E0 C0
 175+ 5ABE C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5AC2 1C 0E 07 03
 176+ 5AC6 C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5ACA 3C 7E E7 C3
 177+ 5ACE 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5AD2 10 10 10 10
 178+ 5AD6 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5ADA 10 10 10 10
 179+ 5ADE 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5AE2 10 10 10 10
 180+ 5AE6 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5AEA 00 00 00 00
 181+ 5AEE 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5AF2 00 00 00 00
 182+ 5AF6 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5AFA 00 00 00 00
 183+ 5AFE 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5B02 10 10 10 10
 184+ 5B06 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5B0A 10 10 10 10
 185+ 5B0E 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5B12 10 10 10 10
 186+ 5B16 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B1A 00 00 00 00
 187+ 5B1E 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B22 10 10 10 10
 188+ 5B26 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B2A 10 20 40 80
 189+ 5B2E 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B32 08 04 02 01
 190+ 5B36 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B3A 18 24 42 81
 191+ 5B3E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B42 00 00 FF FF
 192+ 5B46 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B4A FF FF FF FF
 193+ 5B4E 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B52 FF FF FF FF
 194+ 5B56 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5B5A 00 00 00 00
 195+ 5B5E FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5B62 00 00 00 00
 196+ 5B66 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5B6A FF FF 00 00
 197+ 5B6E C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5B72 C0 C0 C0 C0
 198+ 5B76 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5B7A F0 F0 F0 F0
 199+ 5B7E FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5B82 FC FC FC FC
 200+ 5B86 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5B8A 03 03 03 03
 201+ 5B8E 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5B92 0F 0F 0F 0F
 202+ 5B96 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5B9A 3F 3F 3F 3F
 203+ 5B9E FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5BA2 81 81 81 FF
 204+ 5BA6 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5BAA F0 F0 F0 F0
 205+ 5BAE 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5BB2 0F 0F 0F 0F
 206+ 5BB6 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5BBA 00 00 00 00
 207+ 5BBE F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5BC2 00 00 00 00
 208+ 5BC6 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5BCA 0F 0F 0F 0F
 209+ 5BCE 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5BD2 F0 F0 F0 F0
 210+ 5BD6 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5BDA 3C 3C 3C 3C
 211+ 5BDE C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5BE2 C3 C3 C3 C3
 212+ 5BE6 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5BEA 00 00 FF FF
 213+ 5BEE 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5BF2 FF FF 00 00
 214+ 5BF6 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5BFA 33 33 CC CC
 215+ 5BFE 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5C02 55 AA 55 AA
 216+ 5C06 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5C0A 66 33 99 CC
 217+ 5C0E CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5C12 CC 99 33 66
 218+ 5C16 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C1A 33 99 CC 66
 219+ 5C1E 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C22 66 CC 99 33
 220+ 5C26 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C2A 10 00 7C 00
 221+ 5C2E 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C32 60 00 7E 00
 222+ 5C36 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C3A 06 00 7E 00
 223+ 5C3E 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C42 A0 60 20 00
 224+ 5C46 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C4A 00 00 00 00
 225+ 5C4E 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C52 70 00 00 00
 226+ 5C56 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5C5A 00 7E 00 00
 227+ 5C5E 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5C62 54 A8 00 00
 228+ 5C66 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5C6A E0 C0 80 00
 229+ 5C6E FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5C72 00 00 00 00
 230+ 5C76 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5C7A 07 03 01 00
 231+ 5C7E 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5C82 10 38 7C FE
 232+ 5C86 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5C8A 10 10 10 00
 233+ 5C8E 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5C92 20 40 00 00
 234+ 5C96 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5C9A 0C 08 00 00
 235+ 5C9E 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5CA2 0E 0E 1E 00
 236+ 5CA6 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5CAA 7C 38 10 00
 237+ 5CAE 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5CB2 E0 E0 F0 00
 238+ 5CB6 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5CBA 60 20 00 00
 239+ 5CBE F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5CC2 08 04 00 00
 240+ 5CC6 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5CCA F0 44 38 00
 241+ 5CCE 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5CD2 28 28 28 00
 242+ 5CD6 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5CDA 08 10 10 10
 243+ 5CDE 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5CE2 20 10 10 10
 244+ 5CE6 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5CEA 00 00 00 00
 245+ 5CEE 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5CF2 00 00 00 00
 246+ 5CF6 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5CFA 0F 1C 18 18
 247+ 5CFE 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5D02 F0 38 18 18
 248+ 5D06 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5D0A E0 00 00 00
 249+ 5D0E 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5D12 07 00 00 00
 250+ 5D16 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D1A 42 42 3C 00
 251+ 5D1E 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D22 7E 7E 3C 00
 252+ 5D26 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D2A 7E 3C 18 00
 253+ 5D2E FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D32 F0 E0 C0 80
 254+ 5D36 FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D3A 0F 07 03 01
 255+ 5D3E 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D42 1F 3F 7F FF
 256+ 5D46 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D4A F8 FC FE FF
 257+ 5D4E 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D52 78 70 60 00
 258+ 5D56 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5D5A 3C 66 00 00
 259+ 5D5E 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5D62 38 10 38 10
 260+ 5D66 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5D6A 44 44 38 00
 261+ 5D6E 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5D72 42 42 42 7E
 262+ 5D76 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5D7A 81 81 81 FF
 263+ 5D7E 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5D82 54 54 54 7C
 264+ 5D86 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5D8A BD AD AD FF
 265+ 5D8E 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5D92 AC AA EA 00
 266+ 5D96 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5D9A 7E 66 66 66
 267+ 5D9E 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5DA2 9D 81 42 3C
 268+ 5DA6 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5DAA A5 A2 00 00
 269+ 5DAE 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5DB2 48 42 42 3C
 270+ 5DB6 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5DBA 99 81 FF 00
 271+ 5DBE 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5DC2 7C 7C 7C 00
 272+ 5DC6 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5DCA F8 F8 F8 00
 273+ 5DCE FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5DD2 A5 A5 81 FF
 274+ 5DD6 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5DDA 52 24 58 80
 275+ 5DDE 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5DE2 81 76 0C 04
 276+ 5DE6 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5DEA 08 18 38 10
 277+ 5DEE 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5DF2 F5 F5 31 12
 278+ 5DF6 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5DFA F0 F0 30 10
 279+ 5DFE 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5E02 7C 7E 78 48
 280+ 5E06 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5E0A A1 99 42 3C
 281+ 5E0E 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5E12 20 22 5C 00
 282+ 5E16 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E1A 24 1E 42 3C
 283+ 5E1E 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E22 7C 00 10 00
 284+ 5E26 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E2A FF FF FF FF
 285+ 5E2E
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E2E                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E2E              ; ------------------------------------------------------------------------------
   2+ 5E2E              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E2E              ; ------------------------------------------------------------------------------
   4+ 5E2E              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E2E              ; designed by Leonardo Miliani. More info at
   6+ 5E2E              ; www DOT leonardomiliani DOT com
   7+ 5E2E              ; ------------------------------------------------------------------------------
   8+ 5E2E              ; Code Revision:
   9+ 5E2E              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E2E              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E2E              ; ------------------------------------------------------------------------------
  12+ 5E2E
  13+ 5E2E              LOGOFONT:   equ $
  14+ 5E2E 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E32 00 00 00 00
  15+ 5E36 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E3A FF FF FF FF
  16+ 5E3E FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E42 00 00 00 00
  17+ 5E46 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E4A 0F 0F 0F 0F
  18+ 5E4E 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E52 FF FF FF FF
  19+ 5E56 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5E5A F0 F0 F0 F0
  20+ 5E5E 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5E62 0F 0F 0F 0F
  21+ 5E66 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5E6A F0 F0 F0 F0
  22+ 5E6E F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5E72 00 00 00 00
  23+ 5E76 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5E7A 00 00 00 00
  24+ 5E7E 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5E82 FF 07 03 00
  25+ 5E86 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5E8A FF E0 C0 00
  26+ 5E8E 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5E92 19 1F 18 18
  27+ 5E96 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5E9A 98 F8 18 18
  28+ 5E9E 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5EA2 0F 00 00 00
  29+ 5EA6 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5EAA 1F 1C 18 18
  30+ 5EAE 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5EB2 F8 38 18 18
  31+ 5EB6 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5EBA F0 00 00 00
  32+ 5EBE 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5EC2 FF 00 00 00
  33+ 5EC6 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5ECA FF FF FF FF
  34+ 5ECE F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5ED2 FF FF FF FF
  35+ 5ED6 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5EDA F0 F0 F0 F0
  36+ 5EDE FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5EE2 0F 0F 0F 0F
  37+ 5EE6 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5EEA 30 00 00 00
  38+ 5EEE
# file closed: ../include/vdp/logo-fonts.asm
  95  5EEE
  96  5EEE              ; include ROM/RAM switcher
  97  5EEE                  INCLUDE "../include/switcher/switcher-r11.asm"
# file opened: ../include/switcher/switcher-r11.asm
   1+ 5EEE              ; ------------------------------------------------------------------------------
   2+ 5EEE              ; LM80C - ROM/RAM SWITCHER - R1.1
   3+ 5EEE              ; ------------------------------------------------------------------------------
   4+ 5EEE              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5EEE              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5EEE              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5EEE              ; kind of warranty: you can use them at your own risk.
   8+ 5EEE              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5EEE              ; maintain the copyright notices, include this advice and the note to the
  10+ 5EEE              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5EEE              ; redistribuite them.
  12+ 5EEE              ; https://www.leonardomiliani.com
  13+ 5EEE              ;
  14+ 5EEE              ; Please support me by visiting the following links:
  15+ 5EEE              ; Main project page: https://www.leonardomiliani.com
  16+ 5EEE              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5EEE              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5EEE              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5EEE              ; ------------------------------------------------------------------------------
  20+ 5EEE              ; Code Revision:
  21+ 5EEE              ; R1.0   - 20200718 - First version
  22+ 5EEE              ; R1.1   - 20200827 - PIO settings now are part of the file
  23+ 5EEE              ;-------------------------------------------------------------------------------
  24+ 5EEE
  25+ 5EEE              TMP_FW_LOC:     equ     $8000           ; address from where to make a temporary copy of the FW
  26+ 5EEE              ;-------------------------------------------------------------------------------
  27+ 5EEE              ; THIS CODE WILL BE EXECUTED FROM RAM
  28+ 5EEE 3E FC        RAMRUN:         ld      A,%11111100     ; set ROM off and RAM on..
  29+ 5EF0 D3 01                        out     (PIO_DB),A      ; ...by setting bit #0 to 0 (and leave VRAM bank #0)
  30+ 5EF2 01 32 5F                     ld      BC,END_OF_FW    ; let's copy back FW into low RAM - bytes to copy
  31+ 5EF5 21 00 80                     ld      HL,TMP_FW_LOC   ; source address
  32+ 5EF8 11 00 00                     ld      DE,$0000        ; dest. address
  33+ 5EFB ED B0                        ldir                    ; copy!
  34+ 5EFD AF                           xor     A
  35+ 5EFE D3 01                        out     (PIO_DB),A      ; all LEDs off - finished copying
  36+ 5F00 C3 AE 02                     jp      INIT_HW         ; return control to old init (now into RAM)
  37+ 5F03
  38+ 5F03              ;-------------------------------------------------------------------------------
  39+ 5F03              ; copy the whole contents of ROM into RAM then disable the first memory
  40+ 5F03 3A 8F 5F     ROM2RAM:        ld      A,(basicStarted); check if BASIC is already started
  41+ 5F06 FE 59                        cp      'Y'             ; to see if this is a power-up
  42+ 5F08 20 0F                        jr      NZ,CNTCP2RAM    ; no, continue copy to RAM
  43+ 5F0A                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  44+ 5F0A 3E CF                        ld      A,%11001111     ; set mode 3 ("control mode")
  45+ 5F0C D3 03                        out     (PIO_CB),A      ; for PIO port B
  46+ 5F0E AF                           xor     A               ; set LEDs off, RAM on, VRAM on bank #0
  47+ 5F0F D3 01                        out     (PIO_DB),A      ; send settings to PIO register
  48+ 5F11 D3 03                        out     (PIO_CB),A      ; set pins following register's status
  49+ 5F13 21 C1 60                     ld      HL,TEMPSTACK    ; temporary stack
  50+ 5F16 C3 B1 02                     jp      INIT_HW2        ; jump to re-init HW
  51+ 5F19
  52+ 5F19                              ; WARNING: Do **NOT** change the following "out()" sequence, ABSOLUTELY!
  53+ 5F19 3E CF        CNTCP2RAM:      ld      A,%11001111     ; set mode 3 (mode control)
  54+ 5F1B D3 03                        out     (PIO_CB),A      ; for PIO port B
  55+ 5F1D 3E FD                        ld      A,%11111101     ; set pin #0 as HIGH to enable ROM
  56+ 5F1F D3 01                        out     (PIO_DB),A      ; store the value into the internal register
  57+ 5F21 AF                           xor     A               ; set pins to OUTPUT
  58+ 5F22 D3 03                        out     (PIO_CB),A      ; for port B, activating the RAM
  59+ 5F24 01 32 5F                     ld      BC,END_OF_FW    ; copy FW from ROM to high RAM
  60+ 5F27 21 00 00                     ld      HL,$0000        ; source address
  61+ 5F2A 11 00 80                     ld      DE,TMP_FW_LOC   ; dest. address
  62+ 5F2D ED B0                        ldir                    ; copy!
  63+ 5F2F C3 EE DE                     jp      RAMRUN+TMP_FW_LOC; jump to execute code into RAM
  64+ 5F32
  65+ 5F32              ;-------------------------------------------------------------------------------
  66+ 5F32              END_OF_FW:      equ     $   ; this is the last cell of the firmware
# file closed: ../include/switcher/switcher-r11.asm
  98  5F32
  99  5F32              ; include workspace equates
 100  5F32                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5F32              ; ------------------------------------------------------------------------------
   2+ 5F32              ; LM80C 64K - WORKSPACE EQUATES - R1.0
   3+ 5F32              ; ------------------------------------------------------------------------------
   4+ 5F32              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5F32              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5F32              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5F32              ; kind of warranty: you can use them at your own risk.
   8+ 5F32              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5F32              ; maintain the copyright notices, include this advice and the note to the
  10+ 5F32              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5F32              ; redistribuite them.
  12+ 5F32              ; https://www.leonardomiliani.com
  13+ 5F32              ;
  14+ 5F32              ; Please support me by visiting the following links:
  15+ 5F32              ; Main project page: https://www.leonardomiliani.com
  16+ 5F32              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5F32              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5F32              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5F32              ; ------------------------------------------------------------------------------
  20+ 5F32
  21+ 5F32              ; set starting of RAM based on computer model
  22+ 5F32                  IFDEF LM80C64K
  23+ 5F32              SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5F32                  ELSE
  25+ 5F32 ~            SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5F32                  ENDIF
  27+ 5F32
  28+ 5F32              ;-------------------------------------------------------------------------------
  29+ 5F32              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5F32              serRdPtr        equ     serInPtr+2
  31+ 5F32              serBufUsed      equ     serRdPtr+2
  32+ 5F32              basicStarted    equ     serBufUsed+1
  33+ 5F32              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5F32              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5F32
  36+ 5F32              ; BASIC WORK SPACE LOCATIONS
  37+ 5F32              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5F32              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5F32              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5F32              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5F32              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5F32              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5F32              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5F32              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5F32              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5F32              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5F32              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5F32              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5F32              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5F32              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5F32              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5F32              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5F32              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5F32              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5F32              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5F32              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5F32              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5F32              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5F32              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5F32              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5F32              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5F32              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5F32              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5F32              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5F32              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5F32              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5F32              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5F32              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5F32              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5F32              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5F32              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5F32              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5F32              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5F32              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5F32              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5F32              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5F32              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5F32              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5F32              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5F32              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5F32              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5F32              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5F32              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5F32              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5F32              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5F32              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5F32              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5F32              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5F32              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5F32              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5F32              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5F32              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5F32              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5F32              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5F32              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5F32              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5F32              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5F32              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5F32              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5F32              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5F32              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5F32              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5F32              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5F32              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5F32              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5F32              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5F32              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5F32              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5F32              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5F32              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5F32              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5F32              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5F32              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5F32              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5F32              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5F32              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5F32              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5F32              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5F32              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5F32              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5F32              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5F32              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5F32              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5F32              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5F32                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5F32              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5F32              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5F32              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5F32              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5F32              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5F32              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5F32              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5F32              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5F32              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5F32              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5F32              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5F32              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5F32                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5F32              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5F32              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5F32              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5F32              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5F32              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5F32                                                      ; from here there are the RAM locations that
 145+ 5F32                                                      ; are saved during SAVE
 146+ 5F32              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5F32              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5F32              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5F32              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5F32              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5F32              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5F32              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5F32              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5F32              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5F32              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5F32              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5F32              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5F32              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5F32
# file closed: ../include/workspace/workspace-r1.1.asm
 101  5F32
 102  5F32              ; END OF ASSEMBLY SOURCE
 103  5F32              ;-------------------------------------------------------------------------------
 104  5F32
# file closed: LM80C_64K-firmware-r1.10.asm

Value    Label
------ - -----------------------------------------------------------
0x616F   CHCSNDDTN
0x616D   CHBSNDDTN
0x5FDA   NMIFLG
0x5F19   CNTCP2RAM
0x5F32   END_OF_FW
0x5EEE   RAMRUN
0x8000   TMP_FW_LOC
0x4E1F   CLCN323
0x4DF6   CLCN325
0x4DD4   CLCN322
0x4DD1   CLCN321
0x4DBD   CLCN32Z
0x4D95   CLCN32T
0x4D90   DIV_32_16SB
0x4D8D   DIV_32_16OF
0x4D7C   DIV_32_16LP
0x4D67   DV16_16_LP
0x4D56   DIV_16_8LP
0x4D47   DIV_8_8LOOP
0x4D35   MU32_2
0x4D2A   MUL_32L
0x4D1B   EXMUL16
0x4D12   MLP1
0x4D0B   MLP
0x4CEB X TSTBIT
0x4CA4   BINIT
0x4CB7   CHKBIN
0x4C86   BITOUT2
0x4C82   BITOUT
0x4C74   ZEROSUP
0x4C6E X BIN2
0x4C56   NOSUB7
0x4C5A   HEXIT
0x4C36   HEXLP
0x4C3B   HEXLP1
0x4C63   HXERR
0x4C43   GETHEX
0x4C26   ADD301
0x4C16   ADD30
0x4C00   HEX4
0x4BFE   HEX3
0x4BEF   HEX1
0x4BF1   HEX2
0x4B9E   CNFRQN
0x4B6F   RNDKTX
0x4B31   MSWROK
0x4B1A   FRMTOK
0x4AC8   MSPTOK
0x4AB2   INITFN
0x4A9E X INITDSK
0x4AE8   FRMTXT
0x4A91   CFINIT
0x4AD0   MSTTXT
0x4B4B   DSKRNM
0x4A7E   DSKFRM
0x60CF   TPHL
0x4A3E   ABRTXT
0x4A22   ERASED
0x4A30   ABRTDS
0x4B7D   CNFREQ
0x4A14   ERSTX
0x4BA0   CHKFLNM
0x4992   SVEND
0x4997   TXTSVG
0x4957   SAVE1
0x496A   SAVEST
0x49C3   DOS_ERR
0x48D9   GET3AR
0x48AC   LDEND
0x48B3   TXTLDG
0x49CA   CHK1AR
0x4BAA   CHKFN1
0x489C   LOADST
0x48C4   LDSVPT
0x4871   CHKDOS
0x4839   PRTEND
0x482D   PRTK1
0x482A   OPNQT1
0x4812   CLSQT1
0x486E   CHKEY5
0x47FA   PTCHR1
0x486B   CHKEY4
0x4802   CLSQT
0x47C5   PRTK3
0x47DD   PRTCHR
0x4814   OPNQT
0x47C8   CNTLTK
0x47B3   LDKEY
0x4862   CHKEY2
0x482C   PRTCKEY
0x485D   CHKEY1
0x479C X PRTK2
0x479A   PRTK4
0x4786   CPKYEND
0x477E   CPKEY1
0x4776   CPKEY3
0x476F   CPKEY2
0x475F   CPKEY
0x4751   DECLN1
0x483B   SETREP
0x4721   KEYCH
0x4788   LSTKEYS
0x46FF   HLPERR
0x46DD   DIRMOD
0x46A4   EXNRM
0x4696   ENCHB
0x466B   SRLCNT
0x4653   STRPAR
0x4636   SETPAR2
0x4627   BITS8
0x461C   BITS7
0x462B   SETPAR
0x4612   BITS6
0x45EF   SET_CTC
0x46C1   CTC_CFG
0x46CC   SCERR1
0x45DE   SET_PT
0x45C5   CKBPS
0x46AB   SUP_BPS
0x45B9   SETSER
0x45AC   DEFSER
0x4561   CNTSER3
0x4544   CNTRX2
0x454F   CNTSER2
0x4511   SERLED
0x450B   SRPT2
0x44E8   RPTRSSR
0x44DB   RSTSERS
0x4515   CNTSER
0x44D7   CHKZSER
0x44C8   SERVAR
0x46D0   SCERR
0x6145   SIOBFR
0x6144   STPBT
0x6143   PARBT
0x6142   DATABT
0x6140   BPS
0x613F   PRTNUM
0x4482   RPTCVBF
0x4473   RPCLTMB
0x4466   CNTVALY
0x4436   CNTCL7
0x4412   CNTCL6
0x43EE   CNTCL5
0x43CC   CNTCL4
0x43A6   CNTCL3
0x4382   CNTCL2
0x4460   VALIDY
0x435E   CNTCL1
0x445B   VALIDX
0x432F   PLTCRL
0x4320   DLSZ
0x4338   ENDCRL
0x42F3   RPTCL1
0x42E0   RPTCRL
0x433C   DRWCRL
0x6149   DC
0x6147   YI
0x6145   XI
0x6141   YC
0x613F   XC
0x426F   DXGR
0x4298   ENDDRAW
0x423F   CNTDRW
0x4223   RPTDRW
0x4220   STRE2
0x4213   ER2
0x4D3C   negHL
0x41F0   Y1GR
0x41C6   X1GR
0x4D39   absHL
0x447A   CLRVDBF
0x446B   CLRTMBF
0x614B   DX
0x6149   SY
0x6147   SX
0x6145   E2
0x6143   ER
0x6141   Y2
0x613F   X2
0x6139   Y1
0x6137   X1
0x4D43   DIV_8_8
0x4130   PXLSET
0x410C   CNTPLT1
0x412C   NOGD
0x4138   XY2HL
0x40A7   PNTEND
0x40B1   CTPOINT
0x405E   PAINT5
0x402D   PAINT3
0x406E   CHECKPY
0x401A   PAINT2
0x40EB   CNTPLOT
0x3FEA   MNPAINT
0x3FE7   PAINT1
0x3FE6   PAINT11
0x406D   CHECKPA
0x3FD8   PAINT0
0x4065   EXITPAI
0x3FCB   NXTLOOP
0x4069   EXITPA2
0x40C5   PNTRTN
0x4489   CLRPRM
0x6143   ORGSP
0x6142 X SPB
0x6141 X SPA
0x613F   PNT
0x3F5D   GPCPCH1
0x3F53 X GPCPCHR
0x3F39   GPNTCO1
0x3F2F X GPNTCOL
0x3F24   RPGPNT
0x3F0F   GPNT
0x3EFA   CNTGPT2
0x3F7A   CKCOL
0x6145   TMPHL
0x6143   NUMCHR
0x6141   CHRPNT
0x613F   TMPADR
0x6137   MIXCOL
0x6139   TMPCLR
0x613D   GY
0x613B   GX
0x44A2   GMERR
0x3E94   CHKG2M
0x3E8E   CHKCLR0
0x3E59   RPTLDCL
0x3E50   LOADCLR
0x3E64   SETBRCL
0x3E7D   MIXCLRS
0x3E49   CLREX2
0x3E40   CLRG2
0x3E37   CLRG1
0x3E2D   CLRTXT
0x3E30   CLRMC
0x3E8A   CHKCLR1
0x3D85   CKMAGN
0x3DD2   CHKSCAR
0x3D7A X SETVDP
0x3D93   SCVDP
0x3D56   RPTPS
0x3D51 X DIR_PAU
0x3D2B X RECWRD
0x3D07 X ARET
0x3CE2   ATNTAB
0x3CD8   ATN1
0x3C91   SINTAB
0x3C75   SIN1
0x3C8D   QUARTR
0x3C89   HALFPI
0x3C22   RND2
0x3C06   RND1
0x3C33   RNDTAB
0x5FCD   LSTRND
0x3C2B   RESEED
0x5FAA   SEED
0x3BB2   SUMLP
0x3BA9   SMSER1
0x3B79   EXPTAB
0x3B21   POWER2
0x3B04   POWER1
0x3AE6   NEGAFT
0x3AB1   EXPTEN
0x3ABE   NOENED
0x3A93   SUPTLZ
0x3A9F   DOEBIT
0x3A6E   TRYAGN
0x3A5F   DIGTXT
0x3AD4   POWERS
0x3A4E   MAKNUM
0x3A29   GTSIXD
0x3A32   INRNG
0x3A14   SIXDIG
0x3AC1   RNGTST
0x3ABB   JSTZER
0x3A05   SPCFST
0x6190   PBUFF
0x39AF   MULTEN
0x39A4   ENDCON
0x39AE   SCALPL
0x3998   SCALMI
0x39D8   EDIGIT
0x3983   EXPLP
0x3995   CONEXP
0x3991   DPOINT
0x39B6   ADDIG
0x396D   MANLP
0x3965   CNVNUM
0x3946   MLDBLP
0x391E   DCBCDE
0x38E7   CMPFP
0x38AF   DETHLB
0x38A8   INCHL
0x385B   RETREL
0x383B   MLSP10
0x382E   OVTST1
0x3833   OVTST2
0x3834   OVTST3
0x37E0   RESDIV
0x5F9C   DIVSUP
0x37CD   DIVLP
0x5FA8   DIV4
0x5F9D   DIV1
0x5FA1   DIV2
0x5FA5   DIV3
0x379A   DIV10
0x3732   NOMADD
0x3721   MUL8LP
0x3744   BYTSFT
0x3718   MULT8
0x619D   MULVAL
0x3810   ADDEXP
0x36F6   FPMULT
0x36ED   MULLN2
0x39CD   RSCALE
0x3B9A   SUMSER
0x37A8   DVBCDE
0x36A8   LOGTAB
0x36A4   UNITY
0x3692   SHRLP
0x368F   SHRITE
0x3682   SCALLP
0x618F   SGNRES
0x3653   FPROND
0x3642   RONDB
0x3626   NORMAL
0x3622   SAVEXP
0x362E   PNORM
0x3609   CONPOS
0x3696   SHRT1
0x3641   RONDUP
0x3660   PLUCDE
0x35FB   MINCDE
0x3680   SCALE
0x38B8   SIGNS
0x35D5   NOSWAP
0x35B8   SUBCDE
0x35B2   SUBPHL
0x35BB   FPADD
0x3AD0   HALF
0x35A9   ROUND
0x35A6 X ENDINK2
0x358B   CHKINK
0x3587   SRTINK
0x359D   ENDINK
0x3573   INKEY2
0x3564   CMP_A
0x3512   NOS3
0x34F9   NOS2
0x34E6   NOS1
0x34B6   SNDOVR
0x3509   WRTSND
0x3481   SND1
0x3413   RPVOLCG
0x341F   VOLCH
0x3378   PKEPRMS
0x3362   SYSRET
0x3354   NOSYSPR
0x3316   NMIINT
0x3322   NMIVR1
0x330C   NMIEINT
0x3308   NMI2
0x3313   NMIDINT
0x32E6   DISNMI
0x32F7   NM1
0x5F9A   OTPORT
0x32AF   WAITLP
0x32AE   NOXOR
0x5F99   OUTSUB
0x32B8   SETIO
0x5FD1   INPSUB
0x5FD2   INPORT
0x3277   VAL2
0x327A   VAL3
0x326D   VAL1
0x3621   RESZER
0x3238   RSTSTR
0x3283   MIDNUM
0x3204   LVINSTR
0x320E   CNTZIN
0x31AE   RP2INST
0x31D7   CNT1INS
0x3187   RPTINST
0x31F9   RZINSTR
0x614D   DY
0x3176   EMPTINS
0x6147   TF
0x6145   TP
0x6143   PT2
0x613F   PT
0x613D   ADRS2
0x613B   LNS2
0x6139   ADRS1
0x6137   LNS1
0x30FD   ALLFOL
0x30F5   MID1
0x4CC5   BINERR
0x30F3   RIGHT1
0x327E   LFRGNM
0x32CE   MAKINT
0x30D2 X GTFLNM
0x30C3   GETLEN
0x30AC   POPHL
0x308D   GETSTR
0x3084   TSALP
0x307A   SSTSA
0x3093   GSTRHL
0x2FE7   GRBARY
0x301E   SCNEND
0x2FC7   GNXARY
0x2FF8   STRADD
0x2FC8   ARRLP
0x2FB2   SMPVAR
0x2FF5   STPOOL
0x2FA1   GRBLP
0x2F93   GARBLP
0x2F84   TESTOS
0x2F68   GRBDON
0x2F57   PRSLP
0x2F4C   PRNUMS
0x2F2D   TSTOPL
0x2F21   CRTSTE
0x2F12   QTSTLP
0x2EFC   MKTMST
0x3083   TOSTRA
0x2EFF   CRTMST
0x2F66   TESTR
0x30EB   TOPOOL
0x2EDD   STR1
0x2F05   SVSTAD
0x2EC6   CHEKFN
0x2E3E   PASSA
0x3869   RETINT
0x2F90   GARBGE
0x2E29   FRENUM
0x2E08   ENDTMR
0x2DD4   FNDELP
0x2DF3   ENDDIM
0x2DB2   ZERARY
0x393E   MLDEBC
0x2D94   DEFSIZ
0x2D8C   CRARLP
0x2D6C   BSERR
0x2DCF   FINDEL
0x2D53   NXTARY
0x2D71   CREARY
0x2D3F   FNDARY
0x2D17   SCPTLP
0x2CF5   ZEROLP
0x2D06   RETNUL
0x2D03   RETADR
0x2CC4   FNTHR
0x2CCF   CFEVAL
0x2CB6   FNDVAR
0x3742   POPHRT
0x6187   FNARG
0x2D11   SBSCPT
0x2C9C   NSCFOR
0x2D39   ARLDSV
0x2C8C   NOTSTR
0x2C71   ENDNAM
0x2C7D   CHARTY
0x2C70   SVNAM2
0x2C59   GTFNAM
0x60C5   LCRFLG
0x2C46   DIMRET
0x3864   FLGREL
0x385D   FLGDIF
0x2C0D   CMPSTR
0x3094   GSTRDE
0x3090   GSTRCU
0x2C25   CMPRES
0x2BE3   CMPLG1
0x2BE1   CMPLOG
0x2BCA   PXOR1
0x2BBD X PAND1
0x2BC2   POR1
0x2E2E   ACPASS
0x3893   FPBCDE
0x2BA2   CNTLGC
0x2B88   SGNEXP
0x2B7F   GOFUNC
0x2B77   FNVAL
0x2B38   FRMEVL
0x2B30   RETNUM
0x387B   INVSGN
0x2B1C   EVLPAR
0x2B46   FNOFST
0x2E70   DOFN
0x2C2F   EVNOT
0x2B24   MINUS
0x4C9A   BINTFP
0x4C2A   HEXTFP
0x2AF9   NOTAMP
0x2B35   CONVAR
0x3883   STAKFP
0x2AB7   STKTHS
0x3043   CONCAT
0x2BCF   TSTRED
0x6106   CUROPR
0x2A8F   FOPRND
0x2A73   RLTLP
0x2A66   EVAL3
0x6111   NXTOPR
0x2A63   EVAL2
0x2ACE   OPRND
0x2A5A   EVAL1
0x2A53   OPNPAR
0x2A49   TSTSTR
0x2A35   KILFOR
0x38A1   LOADFP
0x35AC   ADDPHL
0x3890   PHLTFP
0x29FD   NEXT1
0x29EF   FANDT
0x29C6   EXTIG
0x29AB   MORDT
0x3959   ASCTFP
0x299F   LTSTND
0x2F0F   DTSTR
0x2985   ITMSEP
0x2988   STRENT
0x2994   INPBIN
0x29D6   FDTLP
0x296A   ANTVLU
0x293E   NEDMOR
0x2942   GTVLUS
0x2936   NXTITM
0x2911   NOPMPT
0x2EB8   IDTEST
0x610E   READFG
0x28E6   BADINP
0x28D4   REDO
0x28C5   SPCLP
0x28BE   DOSPC
0x32C8   FNDNUM
0x289E   ZONELP
0x288B   CNTEND
0x2F50   PRS1
0x2F0B   CRTST
0x39F7   NUMASC
0x2868   PRNTST
0x28CD   NEXITM
0x2890   DOCOM
0x28A9   DOTAB
0x2821   PRNTLP
0x281A   MRPRNT
0x2803   IF0
0x280C   IF1
0x27FA   IFGO
0x27DE   ONGOLP
0x27DD   ONGO
0x32CB   GETINT
0x38AA   FPTHL
0x38AD   DETHL4
0x2EE7   SAVSTR
0x30AE   BAKTMP
0x6100   TMPSTR
0x27BE   MVSTPT
0x27B6   CRESTR
0x618B   FPREG
0x278F   LETSTR
0x27C7   LETNUM
0x2A4A   CHKTYP
0x2A57   EVAL
0x60C6   TYPE
0x2C54   GETVAR
0x2766   NXTSTT
0x2763   NXTSTL
0x275C   NXTDTA
0x2757   RETLIN
0x2719   RUNLIN
0x26D2   STORED
0x2688   GTLNLP
0x2685   GETLN
0x38CD   CMPNUM
0x38FA   FPINT
0x618E   FPEXP
0x2664   DEPINT
0x2661 X POSINT
0x34BC   NOISUP
0x265E   FPSINT
0x2656   CHKLTR
0x5FD8   CHKSUM
0x2649 X ACCSUM
0x262A   ERRINT
0x6113   ERRLIN
0x2619   NOLIN
0x2603   INPBRK
0x5FDB   BRKFLG
0x25ED   STALL
0x25F7   BRK
0x6183   NXTDAT
0x25DA   UPDATA
0x25D9   RESTNL
0x259C   ONJMP
0x259B   IFJMP
0x2606   ENDPRG
0x2574   RUNCNT
0x2570   PUTFID
0x3852   TSTSGN
0x2567   SAVSTP
0x389E   BCDEFP
0x2A45   GETNUM
0x2A48   TSTNUM
0x252B   FORFND
0x250F   FORSLP
0x6108   LOOPST
0x24F4   CNTWTSP
0x24E8   WTSPC
0x24E0   LVSRLN
0x24D5   SRCLN1
0x24B2   OUTWRD
0x24C0   NXTLN
0x2499   LSTLP3
0x2496   LSTLP2
0x248A   LST07
0x2487   LST08
0x404C   PAINT4
0x245C   LST02
0x2459   LST05
0x241C   LST06
0x2445   LST03
0x2420   LSTNOT
0x2401   LST01H
0x2465   LISTLP
0x24D4   SRCLN
0x24CE   SRCHLIN
0x23FE   LST01
0x242D   LSTALL
0x3D08   GETINP
0x4CCA   MONOUT
0x23A9   SND2VID
0x2396   INCLEN
0x60C4   CURPOS
0x5FD4   LWIDTH
0x239A   DINPOS
0x2F82   POPAF
0x236B   CHKSYN
0x235C   OUTIT
0x235F   OUTNBS
0x4CF2   OUTNCR
0x2348   PUTBUF
0x2877   ENDINP
0x2342   GMNCR
0x234D   PUTCTL
0x230D   PROCES
0x23B7   CLOTST
0x22E5   KILIN
0x22DA   DELCHR
0x22F4   MORINP
0x22E2   OTKLN
0x22CE   ECHDEL
0x5FD6   NULFLG
0x22BA   DODEL
0x22A1   NXTCHR
0x229B   TSTREM
0x2298   SETLIT
0x227A   NOCHNG
0x2271   NOSPC
0x2282   MATCH
0x2260   NXTBYT
0x2250   GETNXT
0x224E   SEARCH
0x2286   RETNAD
0x2235   FNDWRD
0x22B1   ENDBUF
0x22AA   CPYLIT
0x228A   MOVDIR
0x220B   CRNCLP
0x60C7   DATFLG
0x5FDC   RINPUT
0x21E6   DOAGN
0x6185   FNRGNM
0x610C   FORFLG
0x6115   CONTAD
0x60F2   TMSTPT
0x60F4   TMSTPL
0x617F   VAREND
0x6104   STRBOT
0x610F   BRKLIN
0x21B7   INTVAR
0x218A   SRCHLP
0x6067   BASTXT
0x217B   FNDEND
0x216F   PTRLP
0x21B3   RUNFST
0x2162   MOVBUF
0x216A   SETPTR
0x2134   SFTPRG
0x2143   INEWLN
0x2733   ULERR
0x212C   LINFND
0x2187   SRCHLN
0x610D   LSTBIN
0x2594   EXCUTE
0x2202   CRUNCH
0x22EB   GETLIN
0x20D8   GETCMD
0x20CA   POPNOK
0x39E4   LINEIN
0x5FE3   HLPLN
0x20C6   PTLN
0x20A9   ERRIN
0x286F   STTLIN
0x5FD7   CTLOFG
0x2083   NRERR
0x2080   IMERR
0x207D   TMERR
0x207A   OVERR
0x2077   UFERR
0x2074   DDERR
0x2071   NFERR
0x206E   DZERR
0x610A   DATLIN
0x2065   DATSNR
0x2063   LDG1ND
0x2052   LDG1
0x2045   EXITGM
0x2085   ERROR
0x2040   OMERR
0x6181   ARREND
0x2028   CHKSTK
0x201D   MOVLP
0x201A   MOVSTR
0x2031   ENFMEM
0x2017   MOVUP
0x200E   INDFND
0x1FF8   LOKFOR
0x1FF4   BAKSTK
0x1FEE   BRKMSG
0x1FE9   OKMSG
0x1FE8   ZERBYT
0x1FE4   INMSG
0x1FDD   ERRMSG
0x1F5B X DEFFNKS
0x1F59   AUTORP
0x22EB   TTYLIN
0x267F   FCERR
0x2B9B   POR
0x2BA0   PXOR
0x2B98   PAND
0x360C   BNORM
0x3AF4   POWER
0x3749   DINT
0x3751   MOD
0x37A6   DIV
0x36F4   MULT
0x35B6   PSUB
0x39D3   PADD
0x1EE6   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x21A7   NEW
0x4911   SAVE
0x487B   LOAD
0x26A9   CLEAR
0x23D2   LIST
0x2630   CONT
0x281E   PRINT
0x4CCD   RESET
0x3336   SYS
0x3D1E   WIDTH
0x3E9D   GPRINT
0x32DC   NMI
0x4704   KEY
0x3D0A   CLS
0x46E6   HELP
0x44A7   SERIAL
0x3F8D   PAINT
0x429C   CIRCLE
0x4163   DRAW
0x40D0   PLOT
0x3DE2   COLOR
0x3D48   PAUSE
0x33F1   VOLUME
0x342A   SOUND
0x339E   LOCATE
0x351E   VREG
0x33D0   SREG
0x3393   VPOKE
0x3D31   DOKE
0x338E   POKE
0x2E43   DEF
0x329A   WAIT
0x4A47   DISK
0x49E3   ERASE
0x49A8   FILES
0x27CE   ON
0x3294   POUT
0x25FC   STOP
0x275F   REM
0x2738   RETURN
0x2709   GOSUB
0x25C4   RESTOR
0x27EC   IF
0x26F5   RUN
0x271A   GOTO
0x2774   LET
0x2931   READ
0x2C4F   DIM
0x28F7   INPUT
0x275D   DATA
0x29FA   NEXT
0x24FB   FOR
0x25FE   PEND
0x1E78   WORDTB
0x1CE7   WORDS
0x321F   MID
0x3215   RIGHT
0x30EF   LEFT
0x4C68   BIN
0x4BD7   HEX
0x30DF   CHR
0x30CE   ASC
0x324F   VAL
0x2ED7   STR
0x454B   RXEND
0x30BF   LEN
0x311F   INSTR
0x407D   POINT
0x3559   INKEY
0x3545   SSTAT
0x353A   VSTAT
0x336B   VPEEK
0x3D26   DEEK
0x3364   PEEK
0x3CBB   ATN
0x3CA6   TAN
0x3D67   SCREEN
0x3C45   SIN
0x3C3F   COS
0x3B39   EXP
0x36B5   LOG
0x3BCA   RND
0x3AEB   SQR
0x2E3B   POS
0x3288   INP
0x2E0D   FRE
0x6141   PT1
0x5F96   USR
0x3877   ABS_
0x3925   INT
0x2DF7   TMR
0x3861   SGN
0x1CA3   FNCTAB
0x20CB   PRNTOK
0x4711   RESFN
0x1C17   BRKRET
0x606F   STACK
0x1C2C   BFREE
0x39EC   PRNTHL
0x1C23   BLNSPC
0x1C7B   DOSMSG
0x1C04   SETTP1
0x21A8   CLRPTR
0x5FDF   STRSPC
0x60C8   LSTRAM
0x1BD4   NODOS
0x2365   CPDEHL
0x206B   SNERR
0x2684   ATOH
0x1BAF   SETTOP
0x1B8B   MLOOP
0x6204   STLOOK
0x1B9D   TSTMEM
0x25B4   GETCHR
0x21EA   PROMPT
0x1C98   MEMMSG
0x1B75   MSIZE
0x1B88   MNOASK
0x3438   CTSNDC
0x61A0   PROGST
0x2881   PRNTCRLF
0x21CD   CLREG
0x24A8   FNDTOK
0x1FDD   INITBE
0x1F04   INITAB
0x1B5A   SYSINIT
0x5F90   WRKSPC
0x2E2F   ABPASS
0x2864   PRNTNB
0x266A   DEINT
0x1B53   CSTART
0x1C14   WARMST
0x1B4C   STARTB
0x18FD X ERRORS
0x1B37   D8MSG
0x18FB X D8PTR
0x1B2B   D7MSG
0x18F9 X D7PRT
0x1B17   D6MSG
0x18F7 X D6PTR
0x1B0D   D5MSG
0x18F5 X D5PTR
0x1B08   D4MSG
0x18F3 X D4PTR
0x1B03   D3MSG
0x3954   NOMLAD
0x18F1 X D3PRT
0x1AF5   D2MSG
0x18EF X D2PRT
0x1AE9   D1MSG
0x18ED X D1PRT
0x1AD9   D0MSG
0x18EB X D0PTR
0x1AC8   NRMSG
0x18E9 X NRPRT
0x1AB2   IMMSG
0x18E7 X IMPRT
0x1AA8   HPMSG
0x18E5 X HPPTR
0x1A92   SOMSG
0x1A79   SAMSG
0x18E1 X SAPTR
0x1A64   SCMSG
0x18DF X SCPTR
0x18DD X GMPRT
0x1A48   BNMSG
0x18DB X BNPTR
0x1A3D   HXMSG
0x18D9 X HXPTR
0x1A2D   MOMSG
0x18D7 X MOPTR
0x18D5 X UFPTR
0x1A08   CNMSG
0x18D3 X CNPTR
0x19ED   STMSG
0x18D1 X STPTR
0x18E3 X SOPTR
0x19DD   LSMSG
0x18CF X LSPTR
0x19C9   OSMSG
0x4D28   MU32_1
0x18CD X OSPTR
0x19BA   TMMSG
0x18CB X TMPTR
0x19A6   IDMSG
0x18C9 X IDPTR
0x1995   DZMSG
0x18C7 X DZPTR
0x1980   DDMSG
0x18C5 X DDPTR
0x1972   BSMSG
0x18C3 X BSPTR
0x1963   ULMSG
0x4865   CHKEY3
0x18C1 X ULPTR
0x1955   OMMSG
0x18BF X OMPTR
0x194C   OVMSG
0x18BD X OVPTR
0x1936   FCMSG
0x18BB X FCPTR
0x192A   ODMSG
0x18B9 X ODPTR
0x1915   RGMSG
0x18B7 X RGPTR
0x190E   SNMSG
0x18B5 X SNPTR
0x18FD   NFMSG
0x18B3 X NFPTR
0x18B3   ERRTBL
0x003E X D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x28C3   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x189C   RSTIOBF
0x189B   CLRBUFF
0x1891 X CHK_NAM_LV
0x1890   CHK_C_CF
0x1A17   UFMSG
0x4C0D   BYT2ASC
0x1857   PRN_WHEX1
0x1855 X PRN_WHEX
0x186C   BYTEHEX
0x184C   PRN_HEX1
0x184B X PRN_HEX
0x1842   PRNTSIZ
0x4DC1   CLCN32
0x181D   CHKNMVAL3
0x180D   CHKNMVAL2
0x606A   BUFFER
0x1807   CHKNMVAL1
0x17F8   CHKDSKVAL2
0x17F7   CHKDSKVALE
0x17E2   CHKDSKVAL1
0x17C1   CH0TO9E
0x17B9   CH0TO9
0x17A8   RND8
0x1787   DOS_LDNAM3
0x178B   DOS_LDNAM4
0x187C   CHK_NAM
0x1775   DOS_LDNAM2
0x6139   DKNMPT
0x176D   DOS_LDNAM1
0x613B   DKLNPT
0x174D   FNDFREDIR5
0x1759   FNDFREDIR3
0x172E   FNDFREDIR2
0x1724   FNDFREDIR1
0x16FD   CHKSTNM7
0x16F7 X CHKSTNM5
0x1700   FLNTEXS
0x1702   FLEXST
0x16D7   CHKSTNM6
0x16CD   CHKSTNM3
0x16E2   CHKSTNM10
0x16AE   CHKSTNM8
0x16A8 X CHKSTNM2
0x16A2   CHKSTNM1
0x1690   FIL_ERA2
0x1684   FIL_ERA1
0x1693   FIL_ERA3
0x1616   FIL_ERASE
0x160A   LDFL5
0x1611   LDFLEX
0x15D3   LDFL3
0x15B3   LDFL2
0x15AF   LDFL1
0x1593   LDFL4
0x154E   LODFILE
0x1542   SAVFL12
0x151D X SAVFL11
0x1549   SAVFLEXT
0x14FD   SAVFL4
0x14EB   SAVFL10
0x14CF   SAVFL2
0x14A7   SAVFL9
0x1824   DE2HL
0x145E X SAVFL7
0x145A   SAVFL6
0x4D62   DIV_16_16
0x1447   SAVFL1
0x617D   PROGND
0x143F   SAVFL3
0x1704   FNDFREDIR
0x1698   FILE_EXIST
0x17FC   CHKNMVAL
0x1829   HL2DE
0x13EA   SAVFILE
0x13D6 X EXITFLS
0x1832   PRN16ASCII
0x4D1D   MUL_U32
0x182E   PRN32ASCII
0x1387   LSTFILES7
0x136E X LSTFILES5
0x24E2   TSTSPC
0x25DF   TSTBRK
0x1355 X LSTFILES8
0x1838   PRN16ASCIX
0x1334   LSTFILES21
0x1337   LSTFILESPR
0x13DB   FILETP
0x132C   LSTFILES20
0x1310   LSTFILES3
0x12FD   LSTFILES4
0x12F7 X LSTFILES2
0x12F1   LSTFILES1
0x1397   PNTSTATS
0x12C5   INPR1
0x2F4D   PRS
0x17C4   CHKDSKVAL
0x12A3   LST_FILES
0x1299   TLFLSTX
0x1288   ALFLSTXT
0x127D   TLSCTTX
0x1271   DSKNMTX
0x60CE   DOSER
0x0046   D7
0x1262   DOSVERSERR
0x0040   D4
0x125E   LODERR
0x0048   D8
0x125A   FLNTFND
0x003A   D1
0x1256   NAMERR
0x0044   D6
0x1252   DUPLERR
0x0042   D5
0x124E   DSKFULL
0x1269   RET_ERR
0x003C   D2
0x124A X D2ERR
0x121E   DSK_RNM
0x1218   DOS_FT8
0x1209   DOS_FT9
0x11EF   DOS_FTA
0x1216   DOS_FT7
0x2376   OUTC
0x178D   RND_ID
0x11A6 X DOS_FT5
0x1267   D1ERR
0x1762   DOS_LDNAM
0x117E   DOS_FT2
0x1162 X DOS_FT0
0x1163   DOS_FT1
0x1155   DOS_FTC
0x4D77   DIV_32_16
0x60CA   DOSBFR
0x18A7   CLRDOSBF
0x1892   CLRIOBF
0x10ED   DSK_INIT
0x60EA   ENDMEM
0x60E8   SRTMEM
0x60E6   TPBF4
0x6143   RADIUS
0x60E4   TPBF3
0x60E2   TPBF2
0x60E0   TPBF1
0x60DE   RAM_PTR
0x60DC   LSB_SCT
0x60DA   MSB_SCT
0x60D9   SCT_SIZ
0x60D7   BYT_SIZ
0x60D5   NTR_NBR
0x60D3   DIR_SCT
0x60CF   DIR_STRT
0x60CF   TMPDBF
0x10EB   DSKDIRADR
0x10DC   DFSCT0
0x10CC   CF_WR_SEC2
0x10CA   CF_WR_SEC1
0x10B5   CF_WR_SEC
0x10A8   CF_RD_SECT
0x3AAF   OUTEXP
0x60CC   IOBUFF
0x109E   CF_RD_CMD
0x108D   CF_RD_SEC
0x1081   CF_STANDBY
0x107E X CR_DV_ERR
0x107F   CR_DV_RD_E
0x60D1   DAT_STRT
0x1072   CR_DV_RD_1
0x135E   LSTFILES6
0x104B   CF_SETSTR
0x1045 X CF_RAWRDBT
0x1041 X CF_CHKERR
0x1038   CF_DAT_RDY
0x102F   CF_CMDRDY
0x106D   CR_DEV_RDY
0x101F   CF_NOP
0x1009   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0EE1   CNTFNK
0x0EF4   PRNTFNK
0x0EE7   PUTCHRBUF1
0x0ECD   LDFNKEYCHR
0x5FE7   FNKEYS
0x5FE1   LINEAT
0x1C3A   SIGNON
0x0EB4 X LVKBRDCHK
0x0EAD   PNT2VD
0x0EA0   PUTCHRBUF
0x0E8E   SNDKEYTOBFR
0x0EB5   PRNTFNKEY
0x0E86   CHKFNK
0x0F01   FNKEYSORD
0x0E80   CNTKBCK
0x0003   CTRLC
0x5FE6   AUTOKE
0x360F   BNRMLP
0x0E6D   SENDKEY
0x0E3E   SETNEWAUTO
0x0EB0   LVKBRDCHK2
0x5FE5   KEYDEL
0x0E4E   CHKAUTO
0x6176   KEYTMR
0x0E60   NEWKEY
0x0F89   KBMAP_ALT
0x0FC9   KBMAP_CTRL
0x0E05   CHKALT
0x0E0C   LOADMAP
0x0F49   KBMAP_SFT
0x0DFC   CHKCTRL
0x0F09   KBMAP
0x0DE8   CHKLN
0x6175   STATUSKEY
0x6174   LASTKEYPRSD
0x0DD0   ENDCTRLCK
0x0DCA   TESTCTRL
0x0DE6   FINDKEY
0x0DBD   TESTALT
0x6172   KBTMP
0x0DD4   NOKEYPRSD
0x0D8E   RPTKBDRD
0x0D8A   CHECKKBD
0x0D7C   CHECKCTRL
0x6178   CONTROLKEYS
0x0D6E   CHECKALT
0x0D2E   CNTCHKSND
0x0CF3   CHKSNDCH
0x0CC1   RPTWLCMBP
0x0CD7   NOBPDAT
0x0CBE   SENDSND
0x0CCF   WLCBPDAT
0x0CE4   WRTSNDREG
0x0CDF   SETSNDREG
0x0CA5   SNDREGCFG
0x0C91   CLRPSGREGS
0x0C8D   EMPTSNDBFR
0x0B3F X VDPMODESETEX2
0x0B37 X VDPMODESETMC
0x0B2F X VDPMODESET2
0x2F0C   QTSTR
0x0B27 X VDPMODESET1
0x0B15   SENDCHRPTRNS
0x562E   CHRST88
0x0B13   NXTCHAR
0x4E2E   CHRST68
0x0AF5   LDREGVLS
0x0B1F   VDPMODESET
0x0ADE   RSTVDPRAMREG
0x616B   CHASNDDTN
0x0ACF   EMPTVRM
0x0A64 X CNTNULL2
0x0A57   RPTNLLSRC2
0x4D03   MUL16
0x0A32   ADDNEWLINE
0x09FF   SNDCHRTOBFR
0x09E6   CNTNULL
0x09D6   RPTNLLSRC
0x0A1E   PRNTRETURN
0x613D   TMPBFR4
0x613B   TMPBFR3
0x6139   SRTTXT
0x6139   TMPBFR2
0x09AC   RPTEMPTYROW
0x0991   WRITEBUF
0x0969   LOADNEXTCOL
0x613F   VIDEOBUFF
0x0957   SCROLLNXTRW
0x6169   VIDTMP2
0x6167   VIDTMP1
0x0936   EXITCURSOR_ON
0x0920   EXITCURSORDOWN
0x0900   EXITCURSORRGHT
0x08FA   CONTCRSRGT
0x08E7   CHCKYPOS2
0x08CC   EXITCURSORUP
0x08A3   CHKYPOS
0x0890   EXITCURSORLEFT
0x088D   CONTCRSLFT
0x087C   CHCKYPOS
0x0892   MVCRS2LFT
0x084D   MVBKSP
0x0860   LVBKSP
0x0020   SPC
0x0818 X ENDINSRT
0x0813   NXTINST
0x4CF8   CMP16
0x0802   CHKHL
0x613B   ENDTXT
0x0A3F   ENDOFLN
0x6137   CUR_POS
0x07E0   PUTCRSCHR
0x093F   SCROLLUP
0x07A0   SETCRSRY
0x1028   CF_BUSY
0x07A1   SETCSRCOORDS
0x07B3   EXITCHAR2VID
0x0777   NXTCPCK
0x076A   RPTCPCK
0x07C0   PLACEHOLDER
0x000A   LF
0x07E4   INSERTKEY
0x001A   INSRT
0x0903   CURSORDOWN
0x001F   CRSDN
0x08CE   CURSORRIGHT
0x001D   CRSRGT
0x08B5   CURSORUP
0x001E   CRSUP
0x0869   CURSORLEFT
0x001C   CRSLFT
0x0826   BACKSPACE
0x3DFF   CNTCKCL
0x0008   BKSP
0x09B8   CRGRETURN
0x000C   CS
0x0019   HOME
0x0739   CHRTBL
0x4D53   DIV_16_8
0x0728   HL2XY
0x0A65   POS_TB_CRS_32
0x071A   CONT_POS_CURS
0x0A95   POS_TB_CRS_40
0x6132   LSTCSRSTA
0x6131   CRSR_STATE
0x06D2   MOVSHOWCRS
0x06E7   NEWCRSRCOORD
0x06FC   RSTCHRCRS
0x0705   LOAD_CRSR_POS
0x06BB   READ_VSTAT
0x06B0   WRITE_VREG
0x069B   WRITE_VIDEO_LOC
0x0686   READ_VIDEO_LOC
0x06CC   MOVCRS
0x612E   SCR_CUR_NX
0x0000   NLLCR
0x612F   SCR_CUR_NY
0x067C   ATHOME
0x06C2   POS_CURSOR
0x066F   CLEARVIDBUF
0x065C   RPTFLL1
0x064A   SNDCLRSET
0x0647   STARTEMPTY
0x0611   CLRG2PTNTBL
0x05F7   RPTEMPTYBUF
0x05F1   LDCOLSTOEMPTY
0x0630   EMPTYMC
0x0600   EMPTYG2
0x05CF   LVCKSPLK
0x05D1   DOCOLDRESET
0x0D39   READKBLN
0x05AD   SNDLOGPT
0x366C   COMPL
0x5E2E   LOGOFONT
0x0CBB   NOBEEP
0x0CB5   WLCMBEEP
0x0579   RPT100
0x05BC   CHKSPCK
0x058F   BEEPOFF
0x0583   SETBEEP
0x054D   DEC_D
0x617C   DOS_EN
0x6137   TMPBFR1
0x053B   RPT104
0x0597   LOADLOGOCHRS
0x0533   RPT103
0x0B47   LM80CLOGO
0x051D   RPT102
0x0C98   RSTPSG
0x051A   RPT101
0x05B7   CLRTABLE
0x056C   ERASECLRTBL
0x0654   SETNAMETABLE
0x0AEB   SET_GFX_MODE2
0x6130   SCR_ORG_CHR
0x05D8   EMPTYVIDBUF
0x0457   LDCLRTBMD1
0x6135   FRGNDCLR
0x0666   SETVDPADRS
0x04E7   ENDVDPSET
0x612A   SCR_NAM_TB
0x5FD5   COMMAN
0x6128   SCR_SIZE_H
0x6127   SCR_SIZE_W
0x6136   BKGNDCLR
0x612D   SCR_CURS_Y
0x04DE   LDCLRTBEX2
0x612C   SCR_CURS_X
0x0AFF   LOADCHARSET
0x03F6 X TXTMD
0x04A5   EXG2MD
0x0482   MCMD
0x0460   G2MD
0x0420   G1MD
0x6129   SCR_MODE
0x0AD8   CLR_RAM_REG
0x0AE3   SET_GFX_MODE
0x0AC5   EMPTY_VRAM
0x0365   RESTMR
0x036A   CTCCONF
0x033C X SIO_B_SETS
0x0336   SIO_A_SETS
0x1B49   WARM
0x1B46   COLD
0x0938   CURSOR_OFF
0x031C   ECHO_CHAR
0x030F   CHECKWARM
0x02F8   CORW
0x0923   CURSOR_ON
0x03B4   MSGTXT2
0x0304   COLDSTART
0x5F8F   basicStarted
0x0376   MSGTXT1
0x4CE3   INITST
0x03D1   initVDP
0x04F2   SHOW_LOGO
0x0C87   initPSG
0x0340   initCTC
0x02B1   INIT_HW2
0x60C1   TEMPSTACK
0x02AE   INIT_HW
0x0D4E   KEYBOARD
0x0CE9   MNGSNDS
0x07C1   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x6117   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x5F8C   serRdPtr
0x5F32   SERBUF_START
0x0214   NOTWRAP
0x008A   bufWrap
0x5F8A   serInPtr
0x0208   NOTFULL
0x5F8E   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x617B   SERBBITS
0x019D   SIO_RTS_OFF
0x617A   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x46D5   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x6179   SERIALS_EN
0x01CB   SIO_A_DI
0x1A53   GMMSG
0x0757   CHAR2VID
0x6133   PRNTVIDEO
0x6171   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x6134   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x6173   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x5F93   NMIUSR
0x6124   CTC3IV
0x6121   CTC2IV
0x611E   CTC1IV
0x611B   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x5F03   ROM2RAM
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0031   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
