# file opened: LM80C-firmware-r3.21.asm
   1  0000              ; ------------------------------------------------------------------------------
   2  0000              ; LM80C - FIRMWARE - R3.21
   3  0000              ; ------------------------------------------------------------------------------
   4  0000              ; The following code is intended to be used with LM80C Z80-based computer
   5  0000              ; designed by Leonardo Miliani. More info at
   6  0000              ; www DOT leonardomiliani DOT com
   7  0000              ; ------------------------------------------------------------------------------
   8  0000              ; Coding/Editing/Compiling:
   9  0000              ; Original init code for MC68B05 by Grant Searle
  10  0000              ; Original SIO/CTC/PIO init code by Mario Blunk
  11  0000              ; NASCOM BASIC originally modified by Gran Searle
  12  0000              ; Code modified and adapted for LM80C by Leonardo Miliani
  13  0000              ;
  14  0000              ; Edited with Visual Studio Code
  15  0000              ;
  16  0000              ; Compiled with SjASMPlus assembler 1.18.0
  17  0000              ; https://github.com/z00m128/sjasmplus
  18  0000              ; ------------------------------------------------------------------------------
  19  0000              ; Copyright notes:
  20  0000              ; Parts of the code (c) Grant Searle - free for non commercial use
  21  0000              ; Please include this advice and the note to the attribution of the original
  22  0000              ; version to Grant Searle if you intend to redistribuite it
  23  0000              ; http://searle.hostei.com/grant/index.html
  24  0000              ; eMail: home.micros01@btinternet.com
  25  0000              ;
  26  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  27  0000              ; Parts of the code (c) Mario Blunk
  28  0000              ; http://www.trainÂ­z.de
  29  0000              ;
  30  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  31  0000              ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  32  0000              ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  33  0000              ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  34  0000              ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  35  0000              ; the original ROM code (checksum A934H). PA
  36  0000              ;
  37  0000              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  38  0000              ; The following code is intended to be used with LM80C Z80-based computer
  39  0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
  40  0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
  41  0000              ; kind of warranty: you can use them at your own risk.
  42  0000              ; You are free to use them for any non-commercial use: you are only asked to
  43  0000              ; maintain the copyright notices, include this advice and the note to the
  44  0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  45  0000              ; redistribuite them.
  46  0000              ; https://www.leonardomiliani.com
  47  0000              ;
  48  0000              ; Please support me by visiting the following links:
  49  0000              ; Main project page: https://www.leonardomiliani.com
  50  0000              ; Schematics and code: https://github.com/leomil72/LM80C
  51  0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  52  0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  53  0000              ; ------------------------------------------------------------------------------
  54  0000              ; output binary file
  55  0000                  OUTPUT "LM80C-firmware-r3.21.bin"
  56  0000
  57  0000              ; set computer model
  58  0000                  DEFINE LM80C
  59  0000
  60  0000              ; set firmware version
  61  0000                  DEFINE VERSION "3.21"
  62  0000
  63  0000              ; set DOS version
  64  0000                  DEFINE  DOS_VER "1.01"
  65  0000
  66  0000              ; define shorter VDP_DAT load instruction and additional delay for VDP access
  67  0000                  DEFINE LD_VDP_DAT ld      C,VDP_DAT
  68  0000                  DEFINE LM64K_NOP
  69  0000
  70  0000              ; ------------------------------------------------------------------------------
  71  0000              ; include the latest version of the bootloader: this sets up the address aliases,
  72  0000              ; configure the hardware, checks if warm or cold startup and loads the BASIC interpreter
  73  0000                  INCLUDE "../include/bootloader/bootloader-1.06.asm"
# file opened: ../include/bootloader/bootloader-1.06.asm
   1+ 0000              ; ------------------------------------------------------------------------------
   2+ 0000              ; LM80C - BOOTLOADER - 1.06
   3+ 0000              ; ------------------------------------------------------------------------------
   4+ 0000              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0000              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0000              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0000              ; kind of warranty: you can use them at your own risk.
   8+ 0000              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0000              ; maintain the copyright notices, include this advice and the note to the
  10+ 0000              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0000              ; redistribuite them.
  12+ 0000              ; https://www.leonardomiliani.com
  13+ 0000              ;
  14+ 0000              ; Please support me by visiting the following links:
  15+ 0000              ; Main project page: https://www.leonardomiliani.com
  16+ 0000              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0000              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0000              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0000              ; ------------------------------------------------------------------------------
  20+ 0000
  21+ 0000              ; ADDRESS DECODING (bits A6/A5/A4)
  22+ 0000              ; 0000xxxx : PIO
  23+ 0000              ; 0001xxxx : CTC
  24+ 0000              ; 0010xxxx : SIO
  25+ 0000              ; 0011xxxx : VDP
  26+ 0000              ; 0100xxxx : PSG
  27+ 0000              ; 0101xxxx : C.F.
  28+ 0000
  29+ 0000
  30+ 0000              ; ------------------------------------------------------------------------------
  31+ 0000              ;               EQUATES
  32+ 0000              ; ------------------------------------------------------------------------------
  33+ 0000              ; label defining for PIO (Parallel Input/Output)
  34+ 0000              PIO_DA          equ %00000000
  35+ 0000              PIO_DB          equ %00000001
  36+ 0000              PIO_CA          equ %00000010
  37+ 0000              PIO_CB          equ %00000011
  38+ 0000
  39+ 0000              ; label defining for CTC (Counter Timer Circuit)
  40+ 0000              CTC_CH0         equ %00010000
  41+ 0000              CTC_CH1         equ %00010001
  42+ 0000              CTC_CH2         equ %00010010
  43+ 0000              CTC_CH3         equ %00010011
  44+ 0000
  45+ 0000              ;label defining for SIO (Serial Input/Output)
  46+ 0000              SIO_CA          equ %00100010
  47+ 0000              SIO_CB          equ %00100011
  48+ 0000              SIO_DA          equ %00100000
  49+ 0000              SIO_DB          equ %00100001
  50+ 0000
  51+ 0000              ;label defining for VDP (Video Display Processor)
  52+ 0000              VDP_DAT         equ %00110000
  53+ 0000                  IFDEF LM80C64K
  54+ 0000 ~            VDP_SET         equ %00110001
  55+ 0000                  ELSE
  56+ 0000              VDP_SET         equ %00110010
  57+ 0000                  ENDIF
  58+ 0000
  59+ 0000              ; label defining for PSG (Programmable Sound Generator)
  60+ 0000              PSG_REG         equ %01000000
  61+ 0000              PSG_DAT         equ %01000001
  62+ 0000
  63+ 0000              ; Interrupt-driven serial I/O interface lead by the Z80 SIO to run modified
  64+ 0000              ; NASCOM Basic 4.7 - Full input buffering with incoming data hardware handshaking
  65+ 0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
  66+ 0000              SER_BUFSIZE     equ     $58
  67+ 0000              SER_FULLSIZE    equ     $50
  68+ 0000              SER_EMPTYSIZE   equ     $05
  69+ 0000
  70+ 0000
  71+ 0000              ;------------------------------------------------------------------------------
  72+ 0000              ;                                F I R M W A R E
  73+ 0000              ;------------------------------------------------------------------------------
  74+ 0000              ; BASE MEMORY - RESET LOCATION ($0000) -> the CPU jumps to $0000 after a reset
  75+ 0000                              org     $0000
  76+ 0000 F3           RST00:          di                      ; be sure that INTs are disabled
  77+ 0001                  IFDEF LM80C64K
  78+ 0001 ~                            jp      ROM2RAM         ; jump to ROM/RAM switcher
  79+ 0001                  ELSE
  80+ 0001 C3 AE 02                     jp      INIT_HW         ; jump to system initialization
  81+ 0004                  ENDIF
  82+ 0004
  83+ 0004              ;------------------------------------------------------------------------------
  84+ 0004              ; interrupt vector when SIO ch.B has a char available in its buffer
  85+ 0004                              ;$0004
  86+ 0004 65 01                        defw    RX_CHB_AVAIL
  87+ 0006
  88+ 0006              ;------------------------------------------------------------------------------
  89+ 0006              ; interrupt vector for SIO ch.B special conditions (i.e. buf overrun)
  90+ 0006                              ;$0006
  91+ 0006 68 01                        defw    SPEC_RXB_CNDT
  92+ 0008
  93+ 0008              ;------------------------------------------------------------------------------
  94+ 0008              ; send a character over serial ch. A
  95+ 0008                              ;$0008
  96+ 0008 C3 59 02     RST08:          jp      TXA
  97+ 000B FF                           BLOCK   1,$FF   ; filler
  98+ 000C
  99+ 000C              ;------------------------------------------------------------------------------
 100+ 000C              ; interrupt vector when SIO ch.A has a char available in its buffer
 101+ 000C                              ;$000C
 102+ 000C 00 01                        defw    RX_CHA_AVAIL
 103+ 000E
 104+ 000E              ;------------------------------------------------------------------------------
 105+ 000E              ; interrupt vector for SIO ch.A special conditions (i.e. buf overrun)
 106+ 000E                              ;$000E
 107+ 000E 36 01                        defw    SPEC_RXA_CNDT
 108+ 0010
 109+ 0010              ;------------------------------------------------------------------------------
 110+ 0010              ; receive a character over serial ch. A
 111+ 0010                              ;$0010
 112+ 0010 C3 2A 02     RST10:          jp      RXA
 113+ 0013 FF FF FF...                  BLOCK   5,$FF   ; filler
 114+ 0018              ;------------------------------------------------------------------------------
 115+ 0018              ; check buffer state
 116+ 0018
 117+ 0018                              ;$0018
 118+ 0018 C3 78 02     RST18:          jp      CKINCHAR
 119+ 001B FF FF FF...                  BLOCK   $25,$FF ; filler
 120+ 0040              ;------------------------------------------------------------------------------
 121+ 0040              ; interrupt vectors for CTC
 122+ 0040                              ;$0040               ; for CH0 Timer - used in BASIC by serial 1 for bps
 123+ 0040 E9 81                        defw    CTC0IV
 124+ 0042                              ;$0042               ; for CH1 Timer - used in BASIC by serial 2 for bps
 125+ 0042 EC 81                        defw    CTC1IV
 126+ 0044                              ;$0044               ; for CH2 timer - unused
 127+ 0044 EF 81                        defw    CTC2IV
 128+ 0046                              ;$0046               ; for CH3 Timer - used by FW for 100ths/s counter
 129+ 0046 F2 81                        defw    CTC3IV
 130+ 0048 FF FF FF...                  BLOCK   $1E,$FF ; filler
 131+ 0066              ;------------------------------------------------------------------------------
 132+ 0066              ; interrupt routine for NMI
 133+ 0066                              ;$0066
 134+ 0066 C3 61 80                     jp      NMIUSR              ; jump to execute NMI service routine
 135+ 0069 FF FF FF...                  BLOCK   $27,$FF ; filler
 136+ 0090              ;------------------------------------------------------------------------------
 137+ 0090
 138+ 0090                              ;$0090
 139+ 0090                  IFDEF LM80C
 140+ 0090 4C 4D 38 30                  defb    $4C,$4D,$38,$30,$43,$20,$43,$4F
 140+ 0094 43 20 43 4F
 141+ 0098 4C 4F 52 00                  defb    $4C,$4F,$52,$00,$00,$00,$00,$00
 141+ 009C 00 00 00 00
 142+ 00A0                  ELSE
 143+ 00A0 ~                            defb    $4C,$4D,$38,$30,$43,$20,$36,$34
 144+ 00A0 ~                            defb    $4B,$20,$43,$4F,$4C,$4F,$52,$00
 145+ 00A0                  ENDIF
 146+ 00A0 43 4F 4D 50                  defb    $43,$4F,$4D,$50,$55,$54,$45,$52
 146+ 00A4 55 54 45 52
 147+ 00A8 20 28 32 30                  defb    $20,$28,$32,$30,$32,$30,$29,$00
 147+ 00AC 32 30 29 00
 148+ 00B0 44 65 73 69                  defb    $44,$65,$73,$69,$67,$6E,$65,$64
 148+ 00B4 67 6E 65 64
 149+ 00B8 20 62 79 00                  defb    $20,$62,$79,$00,$00,$00,$00,$00
 149+ 00BC 00 00 00 00
 150+ 00C0 4C 65 6F 6E                  defb    $4C,$65,$6F,$6E,$61,$72,$64,$6F
 150+ 00C4 61 72 64 6F
 151+ 00C8 20 4D 69 6C                  defb    $20,$4D,$69,$6C,$69,$61,$6E,$69
 151+ 00CC 69 61 6E 69
 152+ 00D0 46 57 20 33  FWVER:          defm    "FW ","3.21",$20,"2021-03-09",$20,"18:16:50",$00
 152+ 00D4 2E 32 31 20
 152+ 00D8 32 30 32 31
 152+ 00DC 2D 30 33 2D
 152+ 00E0 30 39 20 31
 152+ 00E4 38 3A 31 36
 152+ 00E8 3A 35 30 00
 153+ 00EC              FMVEREND:       equ     $
 154+ 00EC FF FF FF...                  BLOCK   $100-FMVEREND,$FF   ; filler
 155+ 0100              ;------------------------------------------------------------------------------
 156+ 0100
 157+ 0100              ;-------------------------------------------------------------------------------
 158+ 0100              ;               Z80 SIO CH. A MANAGEMENT
 159+ 0100              ;-------------------------------------------------------------------------------
 160+ 0100
 161+ 0100              ;-------------------------------------------------------------------------------
 162+ 0100              ; interrupt driven routine to get chars from Z80 SIO ch.A
 163+ 0100              ; this is the only serial channel that can print received chars onto the screen
 164+ 0100                              ;$0100
 165+ 0100 F5           RX_CHA_AVAIL:   push    AF              ; store A
 166+ 0101 E5                           push    HL              ; and HL
 167+ 0102 CD 8F 01                     call    A_RTS_OFF       ; disable RTS line
 168+ 0105 DB 20                        in      A,(SIO_DA)      ; read char from RX buffer into A
 169+ 0107 32 41 82                     ld      (TMPKEYBFR),A   ; store it into the temp key buffer
 170+ 010A CD FD 01                     call    CHARINTOBFR     ; sub-routine to put the char into the input buffer
 171+ 010D D2 31 01                     jp      NC,LVRXCHA      ; if buffer is full, then leave without doing anything else
 172+ 0110 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 173+ 0113 32 02 82                     ld      (CHR4VID),A     ; write into buffer for video printing
 174+ 0116 FE 0D                        cp      CR              ; is it RETURN?
 175+ 0118 CA 20 01                     jp      Z,CNTRXCHA      ; yes, continue
 176+ 011B FE 20                        cp      $20             ; is it another control char (code < 32)?
 177+ 011D DA 31 01                     jp      C,LVRXCHA       ; yes, leave w/o printing it on video nor sending back to serial
 178+ 0120 F5           CNTRXCHA:       push    AF              ; store char
 179+ 0121 AF                           xor     A
 180+ 0122 32 3F 82                     ld      (KBDNPT),A      ; a char from serial is like a char printed by BASIC
 181+ 0125 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 182+ 0128 FE 01                        cp      $01             ; is the print on video on?
 183+ 012A CC 78 07                     call    Z,CHAR2VID      ; yes, print on screen
 184+ 012D F1                           pop     AF              ; retrieve char
 185+ 012E CD 59 02                     call    TXA             ; send back to serial
 186+ 0131 E1           LVRXCHA:        pop     HL              ; retrieve HL
 187+ 0132 F1                           pop     AF              ; and A
 188+ 0133 FB                           ei                      ; re-enable interrupts
 189+ 0134 ED 4D                        reti                    ; and exit
 190+ 0136
 191+ 0136              ;-------------------------------------------------------------------------------
 192+ 0136              ; special SIO ch.A condition (i.e., buffer overrun)
 193+ 0136              ; if buffer overruns then show an error, empty the RX buffer and send
 194+ 0136              ; a break char
 195+ 0136 F5           SPEC_RXA_CNDT:  push    AF              ; store AF
 196+ 0137 CD 8F 01                     call    A_RTS_OFF       ; disable RTS
 197+ 013A CD CB 01                     call    SIO_A_DI        ; disable RX on ch. A
 198+ 013D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 199+ 0140 CB 97                        res     2,A             ; disable RX on port 1
 200+ 0142 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 201+ 0145 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 202+ 0147 CB E7                        set     4,A             ; set 5th pin ON
 203+ 0149 D3 01                        out     (PIO_DB),A      ; send new setting
 204+ 014B 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 205+ 014D D3 22                        out     (SIO_CA),A      ; send command to SIO
 206+ 014F AF           EMPTYCHABFR:    xor     A
 207+ 0150 D3 22                        out     (SIO_CA),A      ; write to WR0, select RR0
 208+ 0152 DB 22                        in      A,(SIO_CA)      ; read RR0 register
 209+ 0154 E6 01                        and     $01             ; check if input buffer if empty
 210+ 0156 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then leave
 211+ 0159 DB 20                        in      A,(SIO_DA)      ; read chars
 212+ 015B 18 F2                        jr      EMPTYCHABFR     ; repeat
 213+ 015D F1           CHABFREMPTY:    pop     AF              ; retrieve AF
 214+ 015E 21 EF 46                     ld      HL,SOERR        ; return point set to Serial Buffer Overrun routine
 215+ 0161 E3                           ex      (SP),HL         ; store onto stack
 216+ 0162 FB                           ei                      ; re-enable interrupts
 217+ 0163 ED 4D                        reti                    ; return from interrupt and execute code at SOERR
 218+ 0165
 219+ 0165              ;-------------------------------------------------------------------------------
 220+ 0165              ;               Z80 SIO CH. A MANAGEMENT
 221+ 0165              ;-------------------------------------------------------------------------------
 222+ 0165
 223+ 0165              ;-------------------------------------------------------------------------------
 224+ 0165              ; interrupt driven routine to get chars from Z80 SIO ch.B
 225+ 0165 FB           RX_CHB_AVAIL:   ei
 226+ 0166 ED 4D                        reti
 227+ 0168
 228+ 0168              ;-------------------------------------------------------------------------------
 229+ 0168              ; special SIO ch.A condition (i.e., buffer overrun)
 230+ 0168              ; if buffer overruns then show an error, empty the RX buffer and send
 231+ 0168              ; a break char
 232+ 0168 F5           SPEC_RXB_CNDT:  push    AF              ; store A
 233+ 0169 CD 97 01                     call    B_RTS_OFF       ; disable RTS
 234+ 016C CD D3 01                     call    SIO_B_DI        ; disable RX on ch.B
 235+ 016F 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 236+ 0172 CB 9F                        res     3,A             ; disable RX on port 2
 237+ 0174 32 47 82                     ld      (SERIALS_EN),A  ; store new serial status
 238+ 0177 DB 01                        in      A,(PIO_DB)      ; read status LEDs
 239+ 0179 CB EF                        set     5,A             ; set 5th pin ON
 240+ 017B D3 01                        out     (PIO_DB),A      ; send new setting
 241+ 017D 3E 30                        ld      A,%00110000     ; write into WR0: error reset, select WR0
 242+ 017F D3 23                        out     (SIO_CB),A      ; send command to SIO
 243+ 0181 AF           EMPTYCHBBFR:    xor     A
 244+ 0182 D3 23                        out     (SIO_CB),A      ; write to WR0, select RR0
 245+ 0184 DB 23                        in      A,(SIO_CB)      ; read RR0 register
 246+ 0186 E6 01                        and     $01             ; check if input buffer if empty
 247+ 0188 CA 5D 01                     jp      Z,CHABFREMPTY   ; if yes (bit 0 = 0) then jump to run "exit" code
 248+ 018B DB 21                        in      A,(SIO_DB)      ; read chars
 249+ 018D 18 F2                        jr      EMPTYCHBBFR     ; repeat
 250+ 018F
 251+ 018F
 252+ 018F              ;-------------------------------------------------------------------------------
 253+ 018F              ;               Z80 SIO MANAGEMENT
 254+ 018F              ;-------------------------------------------------------------------------------
 255+ 018F              ; disable RTS:
 256+ 018F              ; by resetting RTS bit (set to 0), the RTS line is disabled (HIGH)
 257+ 018F C5           A_RTS_OFF:      push    BC              ; store BC
 258+ 0190 0E 22                        ld      C,SIO_CA        ; select channel A
 259+ 0192 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 260+ 0195 18 06                        jr      SIO_RTS_OFF
 261+ 0197 C5           B_RTS_OFF:      push    BC              ; store BC
 262+ 0198 0E 23                        ld      C,SIO_CB        ; select channel B
 263+ 019A 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 264+ 019D CB 3F        SIO_RTS_OFF:    srl     A               ; position data bits in bits #5&6
 265+ 019F E6 60                        and     %01100000       ; get only bits #5&6
 266+ 01A1 47                           ld      B,A             ; store data bits
 267+ 01A2 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 268+ 01A4 ED 79                        out     (C),A
 269+ 01A6 3E 88                        ld      A,%10001000     ; enable DTR (b7) and TX (b4), disable RTS (b1)
 270+ 01A8 B0                           or      B               ; set data bits
 271+ 01A9 ED 79                        out     (C),A           ; send setting
 272+ 01AB C1                           pop     BC              ; retrieve BC
 273+ 01AC C9                           ret                     ; exit
 274+ 01AD
 275+ 01AD              ;-------------------------------------------------------------------------------
 276+ 01AD              ; enable RTS
 277+ 01AD              ; by setting RTS bit (set to 1), the RTS line is enabled (LOW)
 278+ 01AD C5           A_RTS_ON:       push    BC              ; store BC
 279+ 01AE 0E 22                        ld      C,SIO_CA        ; select channel A
 280+ 01B0 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 281+ 01B3 18 06                        jr      SIO_RTS_ON
 282+ 01B5 C5           B_RTS_ON:       push    BC              ; store BC
 283+ 01B6 0E 23                        ld      C,SIO_CB        ; select channel B
 284+ 01B8 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 285+ 01BB CB 3F        SIO_RTS_ON:     srl     A               ; position data bits in bits #5&6
 286+ 01BD E6 60                        and     %01100000       ; get only bits #5&6
 287+ 01BF 47                           ld      B,A             ; store data bits
 288+ 01C0 3E 05                        ld      A,%00000101     ; write into WR0: select WR5
 289+ 01C2 ED 79                        out     (C),A
 290+ 01C4 3E 8A                        ld      A,%10001010     ; enable DTR (b7), TX (b4), and RTS (b1)
 291+ 01C6 B0                           or      B               ; set data bits
 292+ 01C7 ED 79                        out     (C),A           ; send setting
 293+ 01C9 C1                           pop     BC              ; retrieve BC
 294+ 01CA C9                           ret                     ; return
 295+ 01CB
 296+ 01CB              ;-------------------------------------------------------------------------------
 297+ 01CB              ; disable SIO RX channel
 298+ 01CB C5           SIO_A_DI:       push    BC              ; store BC
 299+ 01CC 0E 22                        ld      C,SIO_CA        ; SIO channel A
 300+ 01CE 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 301+ 01D1 18 06                        jr      SIO_RXDI        ; jump to disable RX
 302+ 01D3 C5           SIO_B_DI:       push    BC              ; store BC
 303+ 01D4 0E 23                        ld      C,SIO_CB        ; SIO channel B
 304+ 01D6 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 305+ 01D9 47           SIO_RXDI:       ld      B,A             ; store data bits
 306+ 01DA 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 307+ 01DC ED 79                        out     (C),A
 308+ 01DE 78                           ld      A,B             ; retrieve data bits; RX disabled; auto enable is OFF
 309+ 01DF ED 79                        out     (C),A
 310+ 01E1 C1                           pop     BC              ; retrieve BC
 311+ 01E2 C9                           ret                     ; return
 312+ 01E3
 313+ 01E3              ;-------------------------------------------------------------------------------
 314+ 01E3              ; enable SIO RX channel
 315+ 01E3 C5           SIO_A_EI:       push    BC              ; store BC
 316+ 01E4 0E 22                        ld      C,SIO_CA
 317+ 01E6 3A 48 82                     ld      A,(SERABITS)    ; load data serial bits for ch.A
 318+ 01E9 18 06                        jr      SIO_RXEN
 319+ 01EB C5           SIO_B_EI:       push    BC              ; store BC
 320+ 01EC 0E 23                        ld      C,SIO_CB
 321+ 01EE 3A 49 82                     ld      A,(SERBBITS)    ; load data serial bits for ch.B
 322+ 01F1 47           SIO_RXEN:       ld      B,A             ; store data bits
 323+ 01F2 3E 03                        ld      A,%00000011     ; write into WR0: select WR3
 324+ 01F4 ED 79                        out     (C),A           ; select register
 325+ 01F6 78                           ld      A,B             ; retrieve data bits
 326+ 01F7 CB C7                        set     0,A             ; set RX enabled; auto enable is OFF
 327+ 01F9 ED 79                        out     (C),A           ; send settings to SIO
 328+ 01FB C1                           pop     BC              ; retrieve BC
 329+ 01FC C9                           ret
 330+ 01FD
 331+ 01FD              ;------------------------------------------------------------------------------
 332+ 01FD              ; put a char into the input buffer, char is into A
 333+ 01FD              ; this sub is called both from the ISR "RX_CHA_AVAIL" and when
 334+ 01FD              ; the RETURN key is pressed on the keyboard
 335+ 01FD F5           CHARINTOBFR:    push    AF              ; store it
 336+ 01FE 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 337+ 0201 FE 58                        cp      SER_BUFSIZE     ; if buffer is not full
 338+ 0203 DA 08 02                     jp      C,NOTFULL       ; then store the char
 339+ 0206 F1                           pop     AF              ; else drop it
 340+ 0207 C9                           ret                     ; and exit
 341+ 0208 2A 58 80     NOTFULL:        ld      HL,(serInPtr)   ; buffer is not full, can store the char
 342+ 020B 23                           inc     HL              ; load pointer to find first free cell
 343+ 020C 7D                           ld      A,L             ; only check low byte because buffer<256
 344+ 020D FE 58                        cp      bufWrap         ; check if the pointer is at the last cell
 345+ 020F 20 03                        jr      NZ,NOTWRAP      ; if not then continue
 346+ 0211 21 00 80                     ld      HL,SERBUF_START ; else load the address of the first cell
 347+ 0214 22 58 80     NOTWRAP:        ld      (serInPtr),HL   ; store the new pointer
 348+ 0217 F1                           pop     AF              ; then retrieve the char...
 349+ 0218 77                           ld      (HL),A          ; ...and store it in the appropriate cell
 350+ 0219 21 5C 80                     ld      HL,serBufUsed   ; size of the input buffer
 351+ 021C 34                           inc     (HL)            ; increment it
 352+ 021D 3E 50                        ld      A,SER_FULLSIZE  ; input buffer capacity
 353+ 021F BE                           cp      (HL)            ; check if input buffer is full
 354+ 0220 D8                           ret     C               ; exit if buffer is not full
 355+ 0221 3A 47 82                     ld      A,(SERIALS_EN)  ; check if serial 1 is open
 356+ 0224 1F                           rra                     ; bit 0 into Carry: if Carry is 1 then serial 0 is open and...
 357+ 0225 DC 8F 01                     call    C,A_RTS_OFF     ; ...receiving further chars must be stopped
 358+ 0228 37                           scf                     ; set Carry flag, because  we must inform that the char has been added before to disable RTS
 359+ 0229 C9                           ret
 360+ 022A
 361+ 022A
 362+ 022A              ;-------------------------------------------------------------------------------
 363+ 022A              ; retrieve a char from the input buffer
 364+ 022A 3A 5C 80     RXA:            ld      A,(serBufUsed)  ; load the buffer size
 365+ 022D A7                           and     A               ; check if it's 0 (empty)
 366+ 022E CA 2A 02                     jp      Z,RXA           ; if it's empty, wait for a char
 367+ 0231 F3                           di                      ; disable interrupts
 368+ 0232 E5                           push    HL              ; store HL
 369+ 0233 2A 5A 80                     ld      HL,(serRdPtr)   ; load pointer to first available char
 370+ 0236 23                           inc     HL              ; increment it (go to the next char)
 371+ 0237 7D                           ld      A,L             ; check if the end of the buffer has been reached
 372+ 0238 FE 58                        cp      bufWrap         ; (only check low byte because buffer<256)
 373+ 023A 20 03                        jr      NZ,NOTRDWRAP    ; if not, jump straight
 374+ 023C 21 00 80                     ld      HL,SERBUF_START ; else reload the starting address of the buffer
 375+ 023F 22 5A 80     NOTRDWRAP:      ld      (serRdPtr),HL   ; store new pointer to the next char to read
 376+ 0242 3A 5C 80                     ld      A,(serBufUsed)  ; load buffer size
 377+ 0245 3D                           dec     A               ; decrement it
 378+ 0246 32 5C 80                     ld      (serBufUsed),A  ; and store the new size
 379+ 0249 FE 05                        cp      SER_EMPTYSIZE   ; check if input buffer can be considered empty
 380+ 024B 30 08                        jr      NC,RXA_EXIT     ; if not empty yet, then exit
 381+ 024D 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial state
 382+ 0250 EE 05                        xor     %00000101       ; check if serial 1 is open and RX enabled
 383+ 0252 CC AD 01                     call    Z,A_RTS_ON      ; yes, set RTS on
 384+ 0255 7E           RXA_EXIT:       ld      A,(HL)          ; recover the char and return it into A
 385+ 0256 E1                           pop     HL              ; retrieve HL
 386+ 0257 FB                           ei                      ; re-enable interrupts
 387+ 0258 C9                           ret                     ; return
 388+ 0259
 389+ 0259              ;------------------------------------------------------------------------------
 390+ 0259              ; sends a char over the serial - char is into A
 391+ 0259 F5           TXA:            push    AF              ; store AF
 392+ 025A C5                           push    BC              ; store BC
 393+ 025B 47                           ld      B,A             ; store char
 394+ 025C 3A 47 82                     ld      A,(SERIALS_EN)  ; load serial status
 395+ 025F EE 05                        xor     %00000101       ; check if serial 1 is open and RX is enabled
 396+ 0261 20 06                        jr      NZ,TXA_EXIT     ; no, jump over
 397+ 0263 78                           ld      A,B             ; retrieve char
 398+ 0264 D3 20                        out     (SIO_DA),A      ; send char to the SIO
 399+ 0266 CD 6C 02                     call    TX_EMP          ; wait for outgoing char to be sent
 400+ 0269 C1           TXA_EXIT:       pop     BC              ; retrieve BC
 401+ 026A F1                           pop     AF              ; retrieve AF
 402+ 026B C9                           ret                     ; return
 403+ 026C
 404+ 026C              ;------------------------------------------------------------------------------
 405+ 026C              ; wait until outgoing serial has been sent
 406+ 026C 97           TX_EMP:         sub     A               ; set A to 0
 407+ 026D 3C                           inc     A               ; set A to 1
 408+ 026E D3 22                        out     (SIO_CA),A      ; write to WR0, select RR1
 409+ 0270 DB 22                        in      A,(SIO_CA)      ; read RR1 register
 410+ 0272 CB 47                        bit     0,A             ; check if all chars have been sent
 411+ 0274 CA 6C 02                     jp      Z,TX_EMP        ; if not (bit 0 = 0) then retrieve
 412+ 0277 C9                           ret                     ; else exit
 413+ 0278
 414+ 0278
 415+ 0278              ;------------------------------------------------------------------------------
 416+ 0278              ; check if there is some chars into the buffer
 417+ 0278 3A 5C 80     CKINCHAR:       ld      A,(serBufUsed)  ; load buffer size
 418+ 027B A7                           and     A               ; compare to 0
 419+ 027C C9                           ret                     ; return
 420+ 027D
 421+ 027D              ;------------------------------------------------------------------------------
 422+ 027D              ; print a text from memory, and terminate when $00 is found
 423+ 027D 7E           RAWPRINT:       ld      A,(HL)          ; load character from memory cell pointed by HL
 424+ 027E B7                           or      A               ; is it $00 (end string)?
 425+ 027F C8                           ret     Z               ; Yes, then return
 426+ 0280 32 02 82                     ld      (CHR4VID),A     ; store char
 427+ 0283 F3                           di
 428+ 0284 CD 78 07                     call    CHAR2VID        ; and send it to screen
 429+ 0287 FB                           ei
 430+ 0288 23                           inc     HL              ; and select the next one
 431+ 0289 18 F2                        jr      RAWPRINT        ; repeat
 432+ 028B
 433+ 028B              ;-------------------------------------------------
 434+ 028B              ; Interrupt service routine (ISR) for CH3 timer
 435+ 028B              ; this is used to increment the 100ths of a second counter and for cursor flashing
 436+ 028B F5           CH3_TIMER:      push    AF              ; save regs. A,
 437+ 028C C5                           push    BC              ; BC,
 438+ 028D D5                           push    DE              ; DE,
 439+ 028E E5                           push    HL              ; HL
 440+ 028F 21 E5 81                     ld      HL,TMRCNT       ; load starting address of the timer
 441+ 0292 06 04                        ld      B,$04           ; 4 bytes to check
 442+ 0294 34           INCTMR3:        inc     (HL)            ; increment timer
 443+ 0295 20 03                        jr      NZ,CHKCRSR      ; if not zero then exit (finished increment)
 444+ 0297 23                           inc     HL              ; if yes, there was an overflow, so increment next byte
 445+ 0298 10 FA                        djnz    INCTMR3         ; repeat for 4 bytes
 446+ 029A CD E2 07     CHKCRSR:        call    FLASHCURSOR     ; call the flashing cursor routine
 447+ 029D CD 0D 0D                     call    MNGSNDS         ; call the tone managemenet
 448+ 02A0 3A E5 81                     ld      A,(TMRCNT)      ; check for keyboard management
 449+ 02A3 1F                           rra                     ; bit 0 = 1 ?
 450+ 02A4 D4 72 0D                     call    NC,KEYBOARD     ; no, so read the keyboard inputs
 451+ 02A7 E1                           pop     HL              ; retrieve HL,
 452+ 02A8 D1                           pop     DE              ; DE,
 453+ 02A9 C1                           pop     BC              ; BC,
 454+ 02AA F1                           pop     AF              ; and A
 455+ 02AB FB                           ei                      ; re-enable interrupts
 456+ 02AC ED 4D                        reti                    ; exit from ISR
 457+ 02AE
 458+ 02AE              ;------------------------------------------------------------------------------
 459+ 02AE              ;               HARDWARE INITIALISATION
 460+ 02AE              ;------------------------------------------------------------------------------
 461+ 02AE              ; first run - setup HW & SW
 462+ 02AE              ; (on LN80C 64K runs from RAM)
 463+ 02AE 21 8F 81     INIT_HW:        ld      HL,TEMPSTACK    ; load temp stack pointer
 464+ 02B1 F9           INIT_HW2:       ld      SP,HL           ; set stack to temp stack pointer
 465+ 02B2 21 00 80                     ld      HL,SERBUF_START ; set beginning of input buffer
 466+ 02B5 22 58 80                     ld      (serInPtr),HL   ; for incoming chars to store into buffer
 467+ 02B8 22 5A 80                     ld      (serRdPtr),HL   ; and for chars to be read from buffer
 468+ 02BB AF                           xor     A               ; reset A
 469+ 02BC 32 5C 80                     ld      (serBufUsed),A  ; actual buffer size is 0
 470+ 02BF 32 47 82                     ld      (SERIALS_EN),A  ; set serial ports status to OFF
 471+ 02C2                  IFDEF LM80C
 472+ 02C2 CD 39 03                     call    HELLOWRLD       ; little serial blink with LEDs
 473+ 02C5                  ENDIF
 474+ 02C5 CD 5E 03                     call    initCTC         ; configure CTC, then...
 475+ 02C8 CD AB 0C                     call    initPSG         ; ...configure PSG
 476+ 02CB CD 10 05                     call    SHOW_LOGO       ; show computer logo
 477+ 02CE 1E 01                        ld      E,$01           ; E chooses the video mode (graphics 1)
 478+ 02D0 CD ED 03                     call    initVDP         ; set video display
 479+ 02D3 AF                           xor     A
 480+ 02D4 ED 47                        ld      I,A             ; set high byte of interrupt vectors to point to page 0
 481+ 02D6 ED 5E                        im      2               ; interrupt mode 2
 482+ 02D8 FB                           ei                      ; enable interrupts
 483+ 02D9                              ; print system messages
 484+ 02D9 AF                           xor     A               ; A=0 so...
 485+ 02DA 32 3F 82                     ld      (KBDNPT),A      ; ...inputs don't come from keyboard
 486+ 02DD 3C                           inc     A               ; A=1...
 487+ 02DE 32 01 82                     ld      (PRNTVIDEO),A   ; ...to activate the print-on-video
 488+ 02E1 21 94 03                     ld      HL,MSGTXT1      ; sign-on message
 489+ 02E4 CD 7D 02                     call    RAWPRINT        ; print message
 490+ 02E7 3A 5D 80                     ld      A,(basicStarted); check if BASIC is already started
 491+ 02EA FE 59                        cp      'Y'             ; to see if this is a power-up
 492+ 02EC 20 19                        jr      NZ,COLDSTART    ; if not, then do a COLD start
 493+ 02EE 21 D0 03                     ld      HL,MSGTXT2      ; message to choose kind of start
 494+ 02F1 CD 7D 02                     call    RAWPRINT        ; print message
 495+ 02F4 CD 44 09                     call    CURSOR_ON       ; enable cursor
 496+ 02F7 AF                           xor     A
 497+ 02F8 32 01 82                     ld      (PRNTVIDEO),A   ; disable print-on-video
 498+ 02FB CD 2A 02     CORW:           call    RXA             ; look for a pressed key
 499+ 02FE E6 DF                        and     %11011111       ; only UPPERCASE char
 500+ 0300 FE 43                        cp      'C'             ; cold start?
 501+ 0302 20 0E                        jr      NZ,CHECKWARM    ; no, let's check for warm start
 502+ 0304 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 503+ 0307 3E 59        COLDSTART:      ld      A,'Y'           ; yes, set the "BASIC started" flag
 504+ 0309 32 5D 80                     ld      (basicStarted),A
 505+ 030C CD 59 09                     call    CURSOR_OFF      ; disable cursor
 506+ 030F C3 5E 1B                     jp      COLD            ; start BASIC COLD
 507+ 0312 FE 57        CHECKWARM:      cp      'W'
 508+ 0314 20 E5                        jr      NZ,CORW         ; char not recognized, wait again
 509+ 0316 CD 1F 03                     call    ECHO_CHAR       ; echoes the char
 510+ 0319 CD 59 09                     call    CURSOR_OFF      ; disable cursor
 511+ 031C C3 61 1B                     jp      WARM            ; start BASIC WARM
 512+ 031F
 513+ 031F              ;-------------------------------------------------------------------------------
 514+ 031F              ; send back char received through ch. A
 515+ 031F 32 02 82     ECHO_CHAR:      ld      (CHR4VID),A     ; set char for video printing
 516+ 0322 AF                           xor     A
 517+ 0323 32 3F 82                     ld      (KBDNPT),A      ; input is not from keyboard
 518+ 0326 F3                           di                      ; disable INTs
 519+ 0327 CD 78 07                     call    CHAR2VID        ; echoes back the pressed key,
 520+ 032A 3E 0D                        ld      A,CR            ; then set a CR
 521+ 032C 32 02 82                     ld      (CHR4VID),A     ; set char for video printing
 522+ 032F CD 78 07                     call    CHAR2VID        ; and send it to screen
 523+ 0332 FB                           ei                      ; re-enable INTs
 524+ 0333 3E 01                        ld      A,$01
 525+ 0335 32 01 82                     ld      (PRNTVIDEO),A   ; re-enable video printing
 526+ 0338 C9                           ret                     ; return to caller
 527+ 0339
 528+ 0339                  IFDEF LM80C
 529+ 0339              ;-------------------------------------------------------------------------------
 530+ 0339              ; little serial blink with LEDs
 531+ 0339 0E 09        HELLOWRLD:      ld      C,$09           ; 8 LEDs to be turned off + 1 more step to turn off the last LED
 532+ 033B 3E CF                        ld      A,%11001111     ; set mode 3 (mode control)
 533+ 033D D3 03                        out     (PIO_CB),A      ; for PIO port B
 534+ 033F AF                           xor     A               ; set pins to OUTPUT
 535+ 0340 D3 03                        out     (PIO_CB),A      ; for port B
 536+ 0342 3C                           inc     A               ; LSB on
 537+ 0343 D3 01        LEDLIGHT:       out     (PIO_DB),A      ; turn LEDs on/off for a "Supercar" sequence
 538+ 0345 1E 20                        ld      E,$20           ; little delay
 539+ 0347 06 00        DEC_E:          ld      B,$00           ; count to 256
 540+ 0349 10 FE        COUNTER:        djnz    COUNTER         ; decrement inner counter
 541+ 034B 1D                           dec     E               ; decrement outer counter
 542+ 034C 20 F9                        jr      NZ,DEC_E        ; finish delay
 543+ 034E CB 27                        sla     A               ; shift reg.A to left 1 bit
 544+ 0350 0D                           dec     C               ; next LED
 545+ 0351 20 F0                        jr      NZ,LEDLIGHT     ; all LEDs done? no, repeat
 546+ 0353 C9                           ret                     ; return to caller
 547+ 0354                  ENDIF
 548+ 0354              ;-------------------------------------------------------------------------------
 549+ 0354              ; Z80 SIO default settings for serial channels
 550+ 0354 30           SIO_A_SETS:     defb    %00110000       ; write into WR0: error reset, select WR0
 551+ 0355 18                           defb    %00011000       ; write into WR0: channel reset
 552+ 0356 04                           defb    %00000100       ; write into WR0: select WR4
 553+ 0357 44                           defb    %01000100       ; write into WR4: presc. 16x, 1 stop bit, no parity
 554+ 0358 05                           defb    %00000101       ; write into WR0: select WR5
 555+ 0359 E8                           defb    %11101000       ; write into WR5: DTR on, TX 8 bits, BREAK off, TX on, RTS off
 556+ 035A 01           SIO_B_SETS:     defb    %00000001       ; write into WR0: select WR1
 557+ 035B 04                           defb    %00000100       ; write into WR1: status affects interrupt vectors
 558+ 035C 02                           defb    %00000010       ; write into WR0: select WR2
 559+ 035D 00                           defb    %00000000       ; write into WR2: set interrupt vector, but bits D3/D2/D1 of this vector
 560+ 035E                                                      ; will be affected by the channel & condition that raised the interrupt
 561+ 035E                                                      ; (see datasheet): in our example, 0x0C for Ch.A receiving A char, 0x0E
 562+ 035E                                                      ; for special conditions
 563+ 035E              ;------------------------------------------------------------------------------
 564+ 035E              ;               Z80 CTC SETTING UP
 565+ 035E              ;------------------------------------------------------------------------------
 566+ 035E              initCTC:
 567+ 035E 21 88 03                     ld      HL,CTCCONF      ; CTC configuration
 568+ 0361 11 E9 81                     ld      DE,CTC0IV       ; CTC interrupt vector table
 569+ 0364 01 0C 00                     ld      BC,$000C        ; 12 bytes
 570+ 0367 ED B0                        ldir                    ; copy data
 571+ 0369              ;CH0, CH1, & CH2 disabled
 572+ 0369 3E 03                        ld      A,%00000011     ; interrupt off, timer mode, prescaler=16, don't care ext. TRG edge,
 573+ 036B                                                      ; start timer on loading constant, no time constant follows, software reset, command word
 574+ 036B D3 10                        out     (CTC_CH0),A     ; set CH0
 575+ 036D D3 11                        out     (CTC_CH1),A     ; set CH1
 576+ 036F D3 12                        out     (CTC_CH2),A     ; set CH2
 577+ 0371              ;init CH3
 578+ 0371              ;CH3 divides CPU CLK by 144*256 providing an interrupt signal at 100 Hz (1/100 sec).
 579+ 0371              ;f = CPU_CLK/(144*256) => 3,686,400 / ( 36,864 ) => 100Hz
 580+ 0371 3E A7                        ld      A,%10100111     ; interrupt on; timer mode; prescaler=256; don't care ext; automatic trigger;
 581+ 0373                                                      ; time constant follows; cont. operation; command word
 582+ 0373 D3 13                        out     (CTC_CH3),A     ; send to CH3
 583+ 0375 3E 90                        ld      A,$90           ; time constant - 90$ (144d)
 584+ 0377 D3 13                        out     (CTC_CH3),A     ; send to CH3
 585+ 0379 3E 40                        ld      A,%01000000     ; D7..D3 provide the first part of the int vector (in our case, $0100), followed by
 586+ 037B                                                      ; D2..D1, provided by the CTC (they point to the channel), D0=interrupt word
 587+ 037B                                                      ; so int vector is 01000xx00
 588+ 037B D3 10                        out     (CTC_CH0),A     ; send to CTC
 589+ 037D                              ; reset cells of 100ths of a second counter
 590+ 037D AF                           xor     A               ; reset A
 591+ 037E 21 E5 81                     ld      HL,TMRCNT       ; load TMR pointer
 592+ 0381 06 04                        ld      B,$04           ; 4 memory cells
 593+ 0383 77           RESTMR:         ld      (HL),A          ; reset n-cell of TMR
 594+ 0384 23                           inc     HL              ; next cell
 595+ 0385 10 FC                        djnz    RESTMR          ; repeat for 4 cells
 596+ 0387 C9                           ret
 597+ 0388
 598+ 0388
 599+ 0388              ;------------------------------------------------------------------------------
 600+ 0388              ; jump table for CHx interrupts
 601+ 0388 FB ED 4D     CTCCONF:        defb    $FB,$ED,$4D     ; CTC0 interrupt vector (ei; reti)
 602+ 038B FB ED 4D                     defb    $FB,$ED,$4D     ; CTC1 interrupt vector (ei; reti)
 603+ 038E FB ED 4D                     defb    $FB,$ED,$4D     ; CTC2 interrupt vector (ei; reti)
 604+ 0391 C3 8B 02                     jp      CH3_TIMER       ; CTC3 interrupt vector (jump to execute sys-tick timer)
 605+ 0394
 606+ 0394
 607+ 0394              ;------------------------------------------------------------------------------
 608+ 0394              ; welcome messages
 609+ 0394              MSGTXT1:
 610+ 0394                  IFDEF LM80C64K
 611+ 0394 ~                            defm    "    LM80C 64K Color Computer",CR
 612+ 0394                  ELSE
 613+ 0394 20 20 20 20                  defm    "      LM80C Color Computer",CR
 613+ 0398 20 20 4C 4D
 613+ 039C 38 30 43 20
 613+ 03A0 43 6F 6C 6F
 613+ 03A4 72 20 43 6F
 613+ 03A8 6D 70 75 74
 613+ 03AC 65 72 0D
 614+ 03AF                  ENDIF
 615+ 03AF 20 62 79 20                  defm    " by Leonardo Miliani * FW R","3.21",CR,0
 615+ 03B3 4C 65 6F 6E
 615+ 03B7 61 72 64 6F
 615+ 03BB 20 4D 69 6C
 615+ 03BF 69 61 6E 69
 615+ 03C3 20 2A 20 46
 615+ 03C7 57 20 52 33
 615+ 03CB 2E 32 31 0D
 615+ 03CF 00
 616+ 03D0 0D           MSGTXT2:        defb    CR
 617+ 03D1 20 20 20 3C                  defm    "   <C>old or <W>arm start? ",0
 617+ 03D5 43 3E 6F 6C
 617+ 03D9 64 20 6F 72
 617+ 03DD 20 3C 57 3E
 617+ 03E1 61 72 6D 20
 617+ 03E5 73 74 61 72
 617+ 03E9 74 3F 20 00
 618+ 03ED
# file closed: ../include/bootloader/bootloader-1.06.asm
  74  03ED
  75  03ED              ; incude the latest version of the VDP module
  76  03ED                  INCLUDE "../include/vdp/vdp-1.5.asm"
# file opened: ../include/vdp/vdp-1.5.asm
   1+ 03ED              ; ------------------------------------------------------------------------------
   2+ 03ED              ; LM80C - VDP ROUTINES - 1.5
   3+ 03ED              ; ------------------------------------------------------------------------------
   4+ 03ED              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 03ED              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 03ED              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 03ED              ; kind of warranty: you can use them at your own risk.
   8+ 03ED              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 03ED              ; maintain the copyright notices, include this advice and the note to the
  10+ 03ED              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 03ED              ; redistribuite them.
  12+ 03ED              ; https://www.leonardomiliani.com
  13+ 03ED              ;
  14+ 03ED              ; Please support me by visiting the following links:
  15+ 03ED              ; Main project page: https://www.leonardomiliani.com
  16+ 03ED              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 03ED              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 03ED              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 03ED              ; ------------------------------------------------------------------------------
  20+ 03ED              ;
  21+ 03ED              ;------------------------------------------------------------------------------
  22+ 03ED              ; VDP INITIALISATION
  23+ 03ED              ; initialize VDP for a specific graphics mode
  24+ 03ED              ; INPUT: E -> contains the graphics mode:
  25+ 03ED              ; 0=text; 1=graphics 1; 2=graphics 2; 3=multicolor; 4=extended graphics 2
  26+ 03ED D5           initVDP:        push    DE              ; store E
  27+ 03EE CD E7 0A                     call    EMPTY_VRAM      ; reset VRAM
  28+ 03F1 CD 06 0B                     call    SET_GFX_MODE    ; load register settings
  29+ 03F4 CD FB 0A                     call    CLR_RAM_REG     ; reset RAM registers
  30+ 03F7 D1                           pop     DE              ; restore reg. E
  31+ 03F8 AF                           xor     A               ; reset A
  32+ 03F9 47                           ld      B,A             ; reset B (will be used later)
  33+ 03FA 7B                           ld      A,E             ; move E into A
  34+ 03FB 32 F7 81                     ld      (SCR_MODE),A    ; store screen mode
  35+ 03FE FE 01                        cp      $01             ; is it graphics 1 (A=1)?
  36+ 0400 CA 3C 04                     jp      Z,G1MD          ; yes, jump over
  37+ 0403 FE 02                        cp      $02             ; is it graphics 2 (A=2)?
  38+ 0405 CA 7D 04                     jp      Z,G2MD          ; yes, jump over
  39+ 0408 FE 03                        cp      $03             ; is it multicolor (A=3)?
  40+ 040A CA 9F 04                     jp      Z,MCMD          ; yes, jump over
  41+ 040D FE 04                        cp      $04             ; is it extended graphics 2 (A=4)?
  42+ 040F CA C2 04                     jp      Z,EXG2MD        ; yes, jump over
  43+ 0412                              ; otherwise, it must be $00 so we assume that it's text mode
  44+ 0412
  45+ 0412              ; LOAD VDP SETTINGS FOR SELECTED VIDEO MODE:
  46+ 0412
  47+ 0412                              ; TEXT MODE (G0)
  48+ 0412                              ; load charset
  49+ 0412 60           TXTMD:          ld      H,B
  50+ 0413 68                           ld      L,B             ; HL=first pattern cell $0000
  51+ 0414 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  52+ 0417                              ; set cursor & video overlay
  53+ 0417 AF                           xor     A               ; reset A
  54+ 0418 32 FA 81                     ld      (SCR_CURS_X),A  ; set cursor position at X=0
  55+ 041B 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  56+ 041E 3E 05                        ld      A,$05           ; light blue
  57+ 0420 32 04 82                     ld      (BKGNDCLR),A    ; set background/border color
  58+ 0423 3E 28                        ld      A,$28
  59+ 0425 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 40 cols
  60+ 0428 3E 18                        ld      A,$18
  61+ 042A 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  62+ 042D 3E 1E                        ld      A,$1E
  63+ 042F 32 A3 80                     ld      (COMMAN),A      ; width for commas (4 columns)
  64+ 0432 11 00 08                     ld      DE,$0800
  65+ 0435 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  66+ 0439 C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
  67+ 043C
  68+ 043C                              ; GRAPHICS 1 MODE (G1)
  69+ 043C                              ; load pattern table
  70+ 043C 68           G1MD:           ld      L,B
  71+ 043D 60                           ld      H,B             ; HL=first pattern cell $0000
  72+ 043E CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
  73+ 0441                              ; set cursor & video overlay
  74+ 0441 AF                           xor     A               ; position cursor
  75+ 0442 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
  76+ 0445 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
  77+ 0448 3E 20                        ld      A,$20
  78+ 044A 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
  79+ 044D 3E 18                        ld      A,$18
  80+ 044F 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
  81+ 0452 3E 14                        ld      A,$14
  82+ 0454 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
  83+ 0457 11 00 18                     ld      DE,$1800
  84+ 045A ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
  85+ 045E                              ; load color table
  86+ 045E 21 00 20                     ld      HL,$2000        ; color table start: $2000
  87+ 0461 CD 87 06                     call    SETVDPADRS
  88+ 0464 3E 01                        ld      A,$01           ; foreground color...
  89+ 0466 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
  90+ 0469 3E 0F                        ld      A,$0F           ; background color...
  91+ 046B 32 04 82                     ld      (BKGNDCLR),A    ; ...set to white
  92+ 046E 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
  93+ 0470 06 20                        ld      B,$20           ; 32 bytes of colors
  94+ 0472 0E 30                        ld      C,VDP_DAT              ; VDP data mode
  95+ 0474 ED 79        LDCLRTBMD1:     out     (C),A           ; after the first byte, the VDP autoincrements VRAM pointer
  96+ 0476 00                           nop
  97+ 0477 00                           nop
  98+ 0478 10 FA                        djnz    LDCLRTBMD1      ; repeat for 32 bytes
  99+ 047A C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 100+ 047D
 101+ 047D                              ; GRAPHICS 2 MODE (G2)
 102+ 047D AF           G2MD:           xor     A               ; position cursor
 103+ 047E 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 104+ 0481 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 105+ 0484 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 256 pixels (0=256)
 106+ 0487 3C                           inc     A               ; black on...
 107+ 0488 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground
 108+ 048B 3E 0F                        ld      A,$0F           ; white on...
 109+ 048D 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 110+ 0490 3E C0                        ld      A,$C0
 111+ 0492 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 192 pixels
 112+ 0495 11 00 18                     ld      DE,$1800
 113+ 0498 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 114+ 049C C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 115+ 049F
 116+ 049F                              ; MULTICOLOR MODE (G3)
 117+ 049F AF           MCMD:           xor     A               ; position cursor
 118+ 04A0 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 119+ 04A3 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 120+ 04A6 3E 0F                        ld      A,$0F           ; white color for...
 121+ 04A8 32 04 82                     ld      (BKGNDCLR),A    ; ...background and...
 122+ 04AB 32 03 82                     ld      (FRGNDCLR),A    ; ...foreground (even this is not used in MC)
 123+ 04AE 3E 40                        ld      A,$40
 124+ 04B0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 64 blocks
 125+ 04B3 3E 30                        ld      A,$30
 126+ 04B5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 48 blocks
 127+ 04B8 11 00 08                     ld      DE,$0800
 128+ 04BB ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 129+ 04BF C3 05 05                     jp      ENDVDPSET       ; execute the rest of the video setting
 130+ 04C2
 131+ 04C2                              ; EXTENDED GRAPHICS 2 (G4)
 132+ 04C2              EXG2MD:         ; load pattern table
 133+ 04C2 60                           ld      H,B
 134+ 04C3 68                           ld      L,B             ; HL=first pattern cell $0000
 135+ 04C4 CD 22 0B                     call    LOADCHARSET     ; load patterns into VRAM
 136+ 04C7                              ; set cursor & video overlay
 137+ 04C7 AF                           xor     A               ; position cursor
 138+ 04C8 32 FA 81                     ld      (SCR_CURS_X),A  ; at X=0
 139+ 04CB 32 FB 81                     ld      (SCR_CURS_Y),A  ; and Y=0
 140+ 04CE 3E 20                        ld      A,$20
 141+ 04D0 32 F5 81                     ld      (SCR_SIZE_W),A  ; screen width = 32 cols
 142+ 04D3 3E 18                        ld      A,$18
 143+ 04D5 32 F6 81                     ld      (SCR_SIZE_H),A  ; screen height = 24 rows
 144+ 04D8 3E 14                        ld      A,$14
 145+ 04DA 32 A3 80                     ld      (COMMAN),A      ; width for commas (3 columns)
 146+ 04DD 11 00 38                     ld      DE,$3800
 147+ 04E0 ED 53 F8 81                  ld      (SCR_NAM_TB),DE ; set name table address
 148+ 04E4                               ; load color table
 149+ 04E4 21 00 20                     ld      HL,$2000        ; color table start: $2000
 150+ 04E7 CD 87 06                     call    SETVDPADRS
 151+ 04EA 3E 01                        ld      A,$01           ; foreground color is...
 152+ 04EC 32 03 82                     ld      (FRGNDCLR),A    ; ...set to black
 153+ 04EF 3E 0F                        ld      A,$0F           ; whitefor...
 154+ 04F1 32 04 82                     ld      (BKGNDCLR),A    ; ...background
 155+ 04F4 3E 1F                        ld      A,$1F           ; reg.A loaded with colors for chars: bloack pixels on white background
 156+ 04F6 16 08                        ld      D,$08           ; 8 pages of
 157+ 04F8 06 00                        ld      B,$00           ; 256 bytes of colors (total of 2,048 cells)
 158+ 04FA 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 159+ 04FC ED 79        LDCLRTBEX2:     out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
 160+ 04FE 00                           nop
 161+ 04FF 00                           nop
 162+ 0500 10 FA                        djnz    LDCLRTBEX2      ; repeat for 256 bytes
 163+ 0502 15                           dec     D               ; did we fill up all the cells?
 164+ 0503 20 F7                        jr      NZ,LDCLRTBEX2   ; no, repeat
 165+ 0505                              ; LAST VDP SETTINGS
 166+ 0505 CD 59 09     ENDVDPSET:      call    CURSOR_OFF      ; disable cursor
 167+ 0508 CD F5 05                     call    EMPTYVIDBUF     ; empty video buffer
 168+ 050B AF                           xor     A
 169+ 050C 32 FE 81                     ld      (SCR_ORG_CHR),A ; store byte used tochar used to empty the video buffer
 170+ 050F C9                           ret                     ; return to caller
 171+ 0510
 172+ 0510
 173+ 0510              ; show initial logo
 174+ 0510 CD E7 0A     SHOW_LOGO:      call    EMPTY_VRAM      ; reset VRAM
 175+ 0513                              ; set VDP for G2 mode
 176+ 0513 06 07                        ld      B,$07           ; set only the first 7 registers
 177+ 0515 11 10 00                     ld      DE,$0010        ; load settings for G2 mode
 178+ 0518 CD 0E 0B                     call    SET_GFX_MODE2   ; load register settings
 179+ 051B 16 01                        ld      D,$01           ; backdrop color set to black
 180+ 051D ED 51                        out     (C),D           ; send data to VDP
 181+ 051F ED 79                        out     (C),A           ; indicate the register to send data to
 182+ 0521                              ; set name table
 183+ 0521 21 00 18                     ld      HL,$1800        ; name table address
 184+ 0524 CD 74 06                     call    SETNAMETABLE    ; set name table (load names into table)
 185+ 0527 CD 87 05                     call    ERASECLRTBL     ; erase color table (set foreground & background to black)
 186+ 052A                              ; set colors for logo
 187+ 052A 21 00 28                     ld      HL,$2800        ; 2nd page of color table
 188+ 052D CD 87 06                     call    SETVDPADRS
 189+ 0530 06 05                        ld      B,$05           ; 5 bands
 190+ 0532 21 D4 05                     ld      HL,CLRTABLE
 191+ 0535 0E 30                        ld      C,VDP_DAT              ; set VDP_DAT
 192+ 0537 1E 08                        ld      E,$08           ; 8 pixels each pattern
 193+ 0539 16 40        RPT101:         ld      D,$40           ; 64 chars each band
 194+ 053B 7E                           ld      A,(HL)          ; load data
 195+ 053C ED 79        RPT102:         out     (C),A           ; send it to VRAM
 196+ 053E 00                           nop                     ; little delay
 197+ 053F 1D                           dec     E               ; decrement counter
 198+ 0540 20 FA                        jr      NZ,RPT102       ; repeat until zero
 199+ 0542 1E 08                        ld      E,$08           ; 8 pixels each pattern
 200+ 0544 15                           dec     D               ; decrement char band counter
 201+ 0545 20 F5                        jr      NZ,RPT102       ; repeat until zero
 202+ 0547 23                           inc     HL              ; next pattern
 203+ 0548 10 EF                        djnz    RPT101          ; repeat until covered every band
 204+ 054A                              ; set pattern table
 205+ 054A 21 00 08                     ld      HL,$0800        ; address of first cell of 2nd area of pattern table
 206+ 054D 11 6B 0B                     ld      DE,LM80CLOGO    ; pointer to logo pattern
 207+ 0550 06 00                        ld      B,$00           ; 256 bytes, 8 rows
 208+ 0552 CD B3 05     RPT103:         call    LOADLOGOCHRS
 209+ 0555 13                           inc     DE              ; next logo pattern
 210+ 0556 10 FA                        djnz    RPT103
 211+ 0558 06 20                        ld      B,$20           ; repeat for another 2 rows
 212+ 055A CD B3 05     RPT104:         call    LOADLOGOCHRS
 213+ 055D 13                           inc     DE              ; next logo pattern
 214+ 055E 10 FA                        djnz    RPT104
 215+ 0560                              ; show logo/message, play a beep, check for SHIFT pressure (to disable DOS), and wait a while
 216+ 0560 06 02                        ld      B,$02           ; two times
 217+ 0562 AF                           xor     A               ; reset A
 218+ 0563 57                           ld      D,A             ; 256 times
 219+ 0564 5F                           ld      E,A             ; x 256 times
 220+ 0565 32 05 82                     ld      (TMPBFR1),A     ; sound flag set to 0
 221+ 0568                  IFDEF LM80C64K
 222+ 0568 ~                            inc     A               ; by default, I/O DOS buffer is enabled on LM80C 64K, disabled on LM80C
 223+ 0568                  ENDIF
 224+ 0568 32 4A 82                     ld      (DOS_EN),A      ; DOS enabled
 225+ 056B 00           DEC_D:          nop                     ; does nothing...
 226+ 056C 00                           nop
 227+ 056D 00                           nop
 228+ 056E 00                           nop
 229+ 056F 00                           nop
 230+ 0570 00                           nop                     ; ...until here
 231+ 0571 1D                           dec     E               ; decrement E
 232+ 0572 20 F7                        jr      NZ,DEC_D        ; repeat until $00
 233+ 0574 7A                           ld      A,D
 234+ 0575 FE 40                        cp      $40             ; ...equal to 64
 235+ 0577 CC 9F 05                     call    Z,SETBEEP       ; if yes, start sound
 236+ 057A 15                           dec     D
 237+ 057B 20 EE                        jr      NZ,DEC_D        ; repeat
 238+ 057D 3A 05 82                     ld      A,(TMPBFR1)     ; sound state
 239+ 0580 FE 02                        cp      $02             ; check if sound is to be set off
 240+ 0582 C4 AB 05                     call    NZ,BEEPOFF      ; yes
 241+ 0585                  IFDEF LM80C64K
 242+ 0585 ~                            call    CHKSPCK         ; check if special key (CTRL) has been pressed on keyboard
 243+ 0585 ~                                                    ; on LM80C 64K, you can disabled the I/O DOS buffer, on LM80C you can't
 244+ 0585                  ENDIF
 245+ 0585 10 E4                        djnz    DEC_D           ; repeat
 246+ 0587              ERASECLRTBL:    ; erase color table
 247+ 0587 3E 11                        ld      A,$11           ; foreground and background set to black
 248+ 0589 16 0A                        ld      D,$0A           ; 10 pages
 249+ 058B 06 00                        ld      B,$00           ; 256 color cells per page
 250+ 058D 21 00 28                     ld      HL,$2800        ; first cell of 2nd color table
 251+ 0590 CD 87 06                     call    SETVDPADRS      ; send address
 252+ 0593 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 253+ 0595 ED 79        RPT100:         out     (C),A           ; send data
 254+ 0597 00                           nop
 255+ 0598 00                           nop                     ; little delay
 256+ 0599 10 FA                        djnz    RPT100          ; repeat for entire page
 257+ 059B 15                           dec     D
 258+ 059C 20 F7                        jr      NZ,RPT100       ; repeat for all the pages ($0A00 cells)
 259+ 059E C9                           ret                     ; return to caller
 260+ 059F
 261+ 059F              ; play a beep
 262+ 059F 3A 05 82     SETBEEP:        ld      A,(TMPBFR1)     ; check the already-beeped flag
 263+ 05A2 B7                           or      A               ; is it 0?
 264+ 05A3 C0                           ret     NZ              ; no, exit
 265+ 05A4 3C                           inc     A               ; flag to 1
 266+ 05A5 32 05 82                     ld      (TMPBFR1),A     ; set sound
 267+ 05A8 C3 D9 0C                     jp      WLCMBEEP        ; play a beep & return
 268+ 05AB
 269+ 05AB              ; beep off
 270+ 05AB 3E 02        BEEPOFF:        ld      A,$02           ; flag for sound off
 271+ 05AD 32 05 82                     ld      (TMPBFR1),A     ; set flag
 272+ 05B0 C3 DF 0C                     jp      NOBEEP          ; stop beep and return
 273+ 05B3
 274+ 05B3
 275+ 05B3              ; used to load the chars that will compose the logo of the splash screen
 276+ 05B3 1A           LOADLOGOCHRS:   ld      A,(DE)          ; load a pattern char of the logo
 277+ 05B4 87                           add     A,A
 278+ 05B5 87                           add     A,A
 279+ 05B6 87                           add     A,A             ; multiply times 8 to get the offset
 280+ 05B7 C5                           push    BC
 281+ 05B8 D5                           push    DE              ; store BC and DE
 282+ 05B9 E5                           push    HL              ; store VRAM address to write to
 283+ 05BA 21 3B 5E                     ld      HL,LOGOFONT     ; start of logo font data
 284+ 05BD 5F                           ld      E,A
 285+ 05BE 16 00                        ld      D,$00           ; put offset (A) into DE
 286+ 05C0 19                           add     HL,DE           ; get address of pattern data
 287+ 05C1 EB                           ex      DE,HL           ; move address into DE
 288+ 05C2 E1                           pop     HL              ; retrieve VRAM address
 289+ 05C3 06 08                        ld      B,$08           ; 8 bytes per pattern
 290+ 05C5 CD 87 06                     call    SETVDPADRS      ; set VDP address
 291+ 05C8 0E 30                        ld      C,VDP_DAT              ; VDP_DAT
 292+ 05CA 1A           SNDLOGPT:       ld      A,(DE)          ; load data from RAM
 293+ 05CB ED 79                        out     (C),A           ; and send to VRAM
 294+ 05CD 13                           inc     DE              ; next byte into RAM
 295+ 05CE 23                           inc     HL              ; next byte into VRAM (used in future iterations)
 296+ 05CF 10 F9                        djnz    SNDLOGPT        ; repeat 8 times
 297+ 05D1 D1                           pop     DE
 298+ 05D2 C1                           pop     BC              ; retrieve BC & DE
 299+ 05D3 C9                           ret                     ; return to caller
 300+ 05D4              CLRTABLE:       equ $
 301+ 05D4 18 1B 13 14                  defb    $18,$1B,$13,$14,$1D ; colors of background bands of the logo
 301+ 05D8 1D
 302+ 05D9
 303+ 05D9
 304+ 05D9              ; while showing the logo, check if special key (CTRL) is being pressed
 305+ 05D9              ; if yes, then disable DOS functions recovering RAM
 306+ 05D9 F5           CHKSPCK:        push    AF
 307+ 05DA 3E FE                        ld      A,%11111110     ; select CTRL row
 308+ 05DC CD 5D 0D                     call    READKBLN        ; read row
 309+ 05DF CB 5F                        bit     3,A             ; test for RUN/STOP
 310+ 05E1 CA EE 05                     jp      Z,DOCOLDRESET   ; yes, do a cold reset
 311+ 05E4 CB 57                        bit     2,A             ; test if CTRL key is pressed
 312+ 05E6 20 04                        jr      NZ,LVCKSPLK     ; no, leave
 313+ 05E8 AF                           xor     A               ; yes, so...
 314+ 05E9 32 4A 82                     ld      (DOS_EN),A      ; ...disable DOS
 315+ 05EC F1           LVCKSPLK:       pop     AF
 316+ 05ED C9                           ret
 317+ 05EE AF           DOCOLDRESET:    xor     A               ; reset A
 318+ 05EF 32 5D 80                     ld      (basicStarted),A; reset BASIC warm start
 319+ 05F2 C3 00 00                     jp      $0000           ; restart
 320+ 05F5
 321+ 05F5
 322+ 05F5              ; empty video buffer
 323+ 05F5 3A F7 81     EMPTYVIDBUF:    ld      A,(SCR_MODE)    ; check screen mode
 324+ 05F8 FE 02                        cp      $02             ; is it G2 mode?
 325+ 05FA CA 1E 06                     jp      Z,EMPTYG2       ; yes, jump over
 326+ 05FD FE 03                        cp      $03             ; is it MC mode?
 327+ 05FF CA 4F 06                     jp      Z,EMPTYMC       ; yes, jump over
 328+ 0602 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load height of screen
 329+ 0605 47                           ld      B,A             ; move rows into B
 330+ 0606 AF                           xor     A               ; filling char is $00
 331+ 0607 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load the name table address
 332+ 060A CD 87 06                     call    SETVDPADRS      ; send address to VDP
 333+ 060D 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 334+ 060F 5F           LDCOLSTOEMPTY:  ld      E,A             ; store filling char into E
 335+ 0610 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load # of cols to empty into A
 336+ 0613 57                           ld      D,A             ; move A into D
 337+ 0614 7B                           ld      A,E             ; recover filling char
 338+ 0615 ED 79        RPTEMPTYBUF:    out     (C),A           ; write empty byte into VRAM
 339+ 0617 00                           nop
 340+ 0618 15                           dec     D               ; decr. D
 341+ 0619 20 FA                        jr      NZ,RPTEMPTYBUF  ; repeat for the # of cols
 342+ 061B 10 F2                        djnz    LDCOLSTOEMPTY   ; repeat for the # of rows
 343+ 061D C9                           ret                     ; return to caller
 344+ 061E 2A F8 81     EMPTYG2:        ld      HL,(SCR_NAM_TB) ; yes, additional setup for G2 - load G2 name table address (usually $1800)
 345+ 0621 CD 74 06                     call    SETNAMETABLE    ; set name table
 346+ 0624 21 00 00                     ld      HL,$0000        ; set pattern table
 347+ 0627 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 348+ 062A AF                           xor     A               ; empty pattern
 349+ 062B 16 18                        ld      D,$18           ; 6144 ($1800) cell to clean, 24 pages ($18)
 350+ 062D 47                           ld      B,A             ; 256 bytes for page
 351+ 062E 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 352+ 0630 ED 79        CLRG2PTNTBL:    out     (C),A           ; clear pattern
 353+ 0632 00                           nop                     ; little delay
 354+ 0633 00                           nop
 355+ 0634 10 FA                        djnz    CLRG2PTNTBL     ; repeat for 1 page
 356+ 0636 15                           dec     D               ; next page
 357+ 0637 20 F7                        jr      NZ,CLRG2PTNTBL  ; repeat
 358+ 0639 21 00 20                     ld      HL,$2000        ; load the color table address
 359+ 063C CD 87 06                     call    SETVDPADRS      ; send address to VDP
 360+ 063F 3A 03 82                     ld      A,(FRGNDCLR)    ; load foreground
 361+ 0642 87                           add     A,A
 362+ 0643 87                           add     A,A
 363+ 0644 87                           add     A,A
 364+ 0645 87                           add     A,A             ; move to high nibble
 365+ 0646 57                           ld      D,A             ; store into D
 366+ 0647 3A 04 82                     ld      A,(BKGNDCLR)    ; load background color
 367+ 064A B2                           or      D               ; combine with background color
 368+ 064B 16 18                        ld      D,$18           ; 6144 ($1800) cells to fill, so 24 pages ($18)
 369+ 064D 18 17                        jr      STARTEMPTY
 370+ 064F 21 00 08     EMPTYMC:        ld      HL,$0800        ; MC name table
 371+ 0652 CD 74 06                     call    SETNAMETABLE    ; set name table
 372+ 0655 21 00 00                     ld      HL,$0000        ; color table address
 373+ 0658 CD 87 06                     call    SETVDPADRS      ; send address to VDP
 374+ 065B 3A 04 82                     ld      A,(BKGNDCLR)    ; load background
 375+ 065E 57                           ld      D,A             ; store into D
 376+ 065F 87                           add     A,A
 377+ 0660 87                           add     A,A
 378+ 0661 87                           add     A,A
 379+ 0662 87                           add     A,A             ; move to high nibble
 380+ 0663 B2                           or      D               ; set background color for high and low nibble
 381+ 0664 16 08                        ld      D,$08           ; 2048 ($0800) cells to fill, so 8 pages ($08)
 382+ 0666 0E 30        STARTEMPTY:     ld      C,VDP_DAT              ; VDP address for passing data
 383+ 0668 06 00                        ld      B,$00           ; 256 bytes each page ($00=256)
 384+ 066A ED 79        SNDCLRSET:      out     (C),A           ; send color setting
 385+ 066C 00                           nop                     ; wait a while
 386+ 066D 00                           nop
 387+ 066E 10 FA                        djnz    SNDCLRSET       ; repeat for 1 page
 388+ 0670 15                           dec     D               ; have we filled all the pages?
 389+ 0671 20 F7                        jr      NZ,SNDCLRSET    ; no, repeat
 390+ 0673 C9                           ret                     ; return to caller
 391+ 0674
 392+ 0674              ; set name table for G2 mode (patterns from $00 to $FF for each of the 3 areas of the screen)
 393+ 0674 CD 87 06     SETNAMETABLE:   call    SETVDPADRS      ; send address to VDP
 394+ 0677 0E 30                        ld      C,VDP_DAT              ; VDP address for passing data
 395+ 0679 16 03                        ld      D,$03           ; 3 pages to fill into VRAM (768 cells)
 396+ 067B AF                           xor     A               ; starting char name #0 (chars go from 0 to 255)
 397+ 067C 47                           ld      B,A             ; reset B
 398+ 067D ED 79        RPTFLL1:        out     (C),A           ; send name to VRAM
 399+ 067F 00                           nop
 400+ 0680 3C                           inc     A               ; increment # of name
 401+ 0681 10 FA                        djnz    RPTFLL1         ; repeat for 256 cells (1 page)
 402+ 0683 15                           dec     D               ; did we fill all the pages?
 403+ 0684 20 F7                        jr      NZ,RPTFLL1      ; no, continue
 404+ 0686 C9                           ret                     ; return to caller
 405+ 0687
 406+ 0687              ; set an address into VRAM: address is in HL - HL is changed after it
 407+ 0687 0E 32        SETVDPADRS:     ld      C,VDP_SET       ; VDP address mode
 408+ 0689 CB F4                        set     6,H             ; set bit #6 of address, to write to VRAM
 409+ 068B ED 69                        out     (C),L           ; send low and...
 410+ 068D ED 61                        out     (C),H           ; ...high byte of the first cell
 411+ 068F C9                           ret                     ; return to caller
 412+ 0690
 413+ 0690              ; clear the video buffer and position the cursor at 0,0
 414+ 0690 CD F5 05     CLEARVIDBUF:    call    EMPTYVIDBUF     ; clear video buffer
 415+ 0693 AF                           xor     A               ; reset A
 416+ 0694 32 FA 81                     ld      (SCR_CURS_X),A  ; cursor X to 0
 417+ 0697 32 FB 81                     ld      (SCR_CURS_Y),A  ; cursor Y to 0
 418+ 069A C3 E3 06                     jp      POS_CURSOR      ; position cursor & return to caller
 419+ 069D
 420+ 069D              ; HOME: position the cursor at coords. 0,0
 421+ 069D AF           ATHOME:         xor     A               ; position cursor at 0,0 by storing...
 422+ 069E 32 FD 81                     ld      (SCR_CUR_NY),A  ; ...new Y...
 423+ 06A1 32 FC 81                     ld      (SCR_CUR_NX),A  ; ...and new X
 424+ 06A4 C3 ED 06                     jp      MOVCRS          ; move cursor to new location & return to caller
 425+ 06A7
 426+ 06A7              ; load the char or byte at the VRAM position set by HL
 427+ 06A7              ; value is returned into A
 428+ 06A7 C5           READ_VIDEO_LOC: push    BC              ; store BC
 429+ 06A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 430+ 06AA 44                           ld      B,H
 431+ 06AB CB B8                        res     7,B
 432+ 06AD CB B0                        res     6,B
 433+ 06AF ED 69                        out     (C),L           ; low byte then...
 434+ 06B1 ED 41                        out     (C),B           ; high byte
 435+ 06B3 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 436+ 06B5 ~                            LM64K_NOP               ; added to compensate shorter instruction
 437+ 06B5 00                           nop                     ; wait...
 438+ 06B6 00                           nop                     ; ...a while
 439+ 06B7 00                           nop
 440+ 06B8 ED 78                        in      A,(C)           ; read byte at current VRAM location
 441+ 06BA C1                           pop     BC              ; restore BC
 442+ 06BB C9                           ret                     ; return to caller
 443+ 06BC
 444+ 06BC              ; write a byte at the VRAM position pointed by HL
 445+ 06BC              ; value is in A
 446+ 06BC C5           WRITE_VIDEO_LOC:push    BC              ; store BC
 447+ 06BD 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 448+ 06BF 44                           ld      B,H             ; copy H into B
 449+ 06C0 CB B8                        res     7,B
 450+ 06C2 CB F0                        set     6,B             ; write to VRAM
 451+ 06C4 ED 69                        out     (C),L           ; low byte then...
 452+ 06C6 ED 41                        out     (C),B           ; high byte of VRAM address
 453+ 06C8 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 454+ 06CA ~                            LM64K_NOP               ; added to compensate shorter instruction
 455+ 06CA 00                           nop                     ; wait...
 456+ 06CB 00                           nop                     ; ...a while
 457+ 06CC 00                           nop
 458+ 06CD ED 79                        out     (C),A           ; write byte into VRAM
 459+ 06CF C1                           pop     BC              ; restore BC
 460+ 06D0 C9                           ret                     ; return to caller
 461+ 06D1
 462+ 06D1              ; write a value into a specific VDP register
 463+ 06D1              ; value is in E, register is in A
 464+ 06D1 C5           WRITE_VREG:     push    BC              ; store BC
 465+ 06D2 C6 80                        add     A,$80           ; set VDP to write to registers
 466+ 06D4 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 467+ 06D6 ED 59                        out     (C),E           ; send data to VDP
 468+ 06D8 ED 79                        out     (C),A           ; select the destination register
 469+ 06DA C1                           pop     BC              ; restore BC
 470+ 06DB C9                           ret                     ; return to caller
 471+ 06DC
 472+ 06DC              ; read VDP status register and return value into A
 473+ 06DC C5           READ_VSTAT:     push    BC              ; store BC
 474+ 06DD 0E 32                        ld      C,VDP_SET       ; VDP register access
 475+ 06DF ED 78                        in      A,(C)           ; read status register
 476+ 06E1 C1                           pop     BC              ; restore BC
 477+ 06E2 C9                           ret                     ; return to caller
 478+ 06E3
 479+ 06E3              ; position the cursor at the current coordinates, preserving underlying char
 480+ 06E3 CD 26 07     POS_CURSOR:     call    LOAD_CRSR_POS   ; load the VRAM address of cursor into HL
 481+ 06E6 CD A7 06                     call    READ_VIDEO_LOC  ; load the current char at the cursor position (return in A)
 482+ 06E9 32 FE 81                     ld      (SCR_ORG_CHR),A ; store the current char
 483+ 06EC C9                           ret
 484+ 06ED
 485+ 06ED              ; move cursor to new X,Y coordinates
 486+ 06ED CD 1D 07     MOVCRS:         call    RSTCHRCRS       ; restore the char in the current cursor position
 487+ 06F0 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 488+ 06F3 CD E3 06     MOVSHOWCRS:     call    POS_CURSOR      ; position cursor into new location
 489+ 06F6 3A FF 81                     ld      A,(CRSR_STATE)  ; load status of cursor
 490+ 06F9 A7                           and     A               ; is cursor off?
 491+ 06FA C8                           ret     Z               ; yes, return
 492+ 06FB 3A 00 82                     ld      A,(LSTCSRSTA)   ; it's visible, so...
 493+ 06FE F6 20                        or      $20             ; ...set cursor on
 494+ 0700 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 495+ 0703 3E FF                        ld      A,$FF           ; BTW, set cursor visible after moved it
 496+ 0705 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write into video cell
 497+ 0708
 498+ 0708
 499+ 0708              ; set new cursor's coordinates
 500+ 0708 3A FC 81     NEWCRSRCOORD:   ld      A,(SCR_CUR_NX)  ; load new X
 501+ 070B 32 FA 81                     ld      (SCR_CURS_X),A  ; write new X
 502+ 070E 3A FD 81                     ld      A,(SCR_CUR_NY)  ; load new Y
 503+ 0711 32 FB 81                     ld      (SCR_CURS_Y),A  ; write new Y
 504+ 0714 3E FF                        ld      A,$FF           ; delete new values
 505+ 0716 32 FC 81                     ld      (SCR_CUR_NX),A  ; of X
 506+ 0719 32 FD 81                     ld      (SCR_CUR_NY),A  ; and Y
 507+ 071C C9                           ret
 508+ 071D
 509+ 071D              ; recover char under the cursor and prints it onto the screen
 510+ 071D CD 26 07     RSTCHRCRS:      call    LOAD_CRSR_POS   ; recover old cursor position
 511+ 0720 3A FE 81                     ld      A,(SCR_ORG_CHR) ; recover old char
 512+ 0723 C3 BC 06                     jp      WRITE_VIDEO_LOC ; write char into VRAM & return
 513+ 0726
 514+ 0726              ; retrieve cursor position from either current coordinates or next place
 515+ 0726              ; return address position into HL
 516+ 0726 3A FB 81     LOAD_CRSR_POS:  ld      A,(SCR_CURS_Y)  ; load cursor Y
 517+ 0729 6F                           ld      L,A             ; move it into reg.L
 518+ 072A AF                           xor     A               ; reset A
 519+ 072B 67                           ld      H,A             ; reset H
 520+ 072C 47                           ld      B,A             ; reset B
 521+ 072D 29                           add     HL,HL           ; create offset (each address is 2-bytes long so we need to double HL)
 522+ 072E 11 B7 0A                     ld      DE,POS_TB_CRS_40; load position table address of cursor for 40 cols
 523+ 0731 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 524+ 0734 FE 28                        cp      $28             ; is it 40 cols?
 525+ 0736 28 03                        jr      Z,CONT_POS_CURS ; yes, jump over
 526+ 0738 11 87 0A                     ld      DE,POS_TB_CRS_32; no, load position table address of cursor for 32 cols
 527+ 073B 19           CONT_POS_CURS:  add     HL,DE           ; the correct starting address of the required row is now into HL
 528+ 073C 5E                           ld      E,(HL)          ; load starting address of the required row into DE
 529+ 073D 23                           inc     HL
 530+ 073E 56                           ld      D,(HL)
 531+ 073F 2A F8 81                     ld      HL,(SCR_NAM_TB) ; load starting address of name table
 532+ 0742 19                           add     HL,DE           ; starting address of the current row into name table
 533+ 0743 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 534+ 0746 4F                           ld      C,A             ; transfer A into C
 535+ 0747 09                           add     HL,BC           ; add X offset: now HL contains the address of the current cursor position
 536+ 0748 C9                           ret
 537+ 0749
 538+ 0749              ; find X,Y coordinates of a screen address pointed in VRAM by HL
 539+ 0749              ; return them into L,A for X,Y
 540+ 0749 D5           HL2XY:          push    DE              ; store DE
 541+ 074A ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load starting address of name table into DE
 542+ 074E AF                           xor     A               ; clear Carry
 543+ 074F ED 52                        sbc     HL,DE           ; find position relative to screen (from 0,0)
 544+ 0751 D1                           pop     DE
 545+ 0752 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load screen width
 546+ 0755 4F                           ld      C,A             ; move it into C
 547+ 0756 CD 60 4D                     call    DIV_16_8        ; divide position by C: return Y into L and X into A
 548+ 0759 C9                           ret                     ; return to caller
 549+ 075A
 550+ 075A              ;-------------------------------------------------------------------------------
 551+ 075A              ; char table for jumps
 552+ 075A 19           CHRTBL:         defb    HOME
 553+ 075B 9D 06                        defw    ATHOME          ; move the cursor to 0,0
 554+ 075D
 555+ 075D 0C                           defb    CS
 556+ 075E 90 06                        defw    CLEARVIDBUF     ; clear video buffer and position cursor at 0,0
 557+ 0760
 558+ 0760 0D                           defb    CR
 559+ 0761 DA 09                        defw    CRGRETURN       ; go to the beginning of the next line
 560+ 0763
 561+ 0763 08                           defb    BKSP
 562+ 0764 47 08                        defw    BACKSPACE       ; move cursor left 1 position
 563+ 0766
 564+ 0766 1C                           defb    CRSLFT
 565+ 0767 8A 08                        defw    CURSORLEFT      ; move cursor left
 566+ 0769
 567+ 0769 1E                           defb    CRSUP
 568+ 076A D6 08                        defw    CURSORUP        ; move cursor up
 569+ 076C
 570+ 076C 1D                           defb    CRSRGT
 571+ 076D EF 08                        defw    CURSORRIGHT     ; move cursor right
 572+ 076F
 573+ 076F 1F                           defb    CRSDN
 574+ 0770 24 09                        defw    CURSORDOWN      ; move cursor up
 575+ 0772
 576+ 0772 1A                           defb    INSRT
 577+ 0773 05 08                        defw    INSERTKEY       ; insert a space
 578+ 0775
 579+ 0775 0A                           defb    LF
 580+ 0776 E1 07                        defw    PLACEHOLDER     ; CURRENTLY WE DON'T PRINT LINE FEED
 581+ 0778
 582+ 0778              ; send current char to video buffer
 583+ 0778 F5           CHAR2VID:       push    AF              ; store AF
 584+ 0779 C5                           push    BC              ; store BC
 585+ 077A D5                           push    DE              ; store DE
 586+ 077B E5                           push    HL              ; store HL
 587+ 077C 3A FF 81                     ld      A,(CRSR_STATE)  ; store cursor state...
 588+ 077F F5                           push    AF              ; into stack
 589+ 0780 CD 59 09                     call    CURSOR_OFF      ; cursor off
 590+ 0783 3A 02 82                     ld      A,(CHR4VID)     ; recover char
 591+ 0786 06 0A                        ld      B,$0A           ; 10 chars to check
 592+ 0788 21 5A 07                     ld      HL,CHRTBL       ; address of key table
 593+ 078B BE           RPTCPCK:        cp      (HL)            ; compare with char
 594+ 078C 23                           inc     HL              ; beginning of sub-routine address
 595+ 078D 20 09                        jr      NZ,NXTCPCK      ; different, go to next char
 596+ 078F 5E                           ld      E,(HL)          ; load addres into DE
 597+ 0790 23                           inc     HL
 598+ 0791 56                           ld      D,(HL)
 599+ 0792 EB                           ex      DE,HL           ; move user routine's address into HL
 600+ 0793 11 D4 07                     ld      DE,EXITCHAR2VID ; set point of return after the user routine
 601+ 0796 D5                           push    DE              ; store into stack
 602+ 0797 E9                           jp      (HL)            ; call user routine - then, the CPU will return (jump) to EXITCHAR2VID
 603+ 0798 23           NXTCPCK:        inc     HL              ; jump over 2 cells...
 604+ 0799 23                           inc     HL              ; ...to the next char code
 605+ 079A 10 EF                        djnz    RPTCPCK         ; repeat
 606+ 079C                              ; it'a not a special char, just print it
 607+ 079C CD 26 07                     call    LOAD_CRSR_POS   ; recover position of cursor
 608+ 079F 3A 02 82                     ld      A,(CHR4VID)     ; recover char to print
 609+ 07A2 CD BC 06                     call    WRITE_VIDEO_LOC ; write A into VRAM at (HL)
 610+ 07A5 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 611+ 07A8 5F                           ld      E,A             ; store cursor Y into E
 612+ 07A9 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X
 613+ 07AC 3C                           inc     A               ; move 1 step to right
 614+ 07AD 21 F5 81                     ld      HL,SCR_SIZE_W   ; cell that keeps the width of screen
 615+ 07B0 BE                           cp      (HL)            ; have we reached the most right position?
 616+ 07B1 20 0F                        jr      NZ,SETCSRCOORDS ; no, go over
 617+ 07B3 1C                           inc     E               ; yes, increment cursor Y (go to next line)
 618+ 07B4 7B                           ld      A,E             ; move cursor Y into A
 619+ 07B5 21 F6 81                     ld      HL,SCR_SIZE_H   ; cell that keeps the height of screen
 620+ 07B8 BE                           cp      (HL)            ; have we reached the bottom of the screen?
 621+ 07B9 20 06                        jr      NZ,SETCRSRY     ; no, jump over
 622+ 07BB D5                           push    DE
 623+ 07BC CD 60 09                     call    SCROLLUP        ; scroll screen up
 624+ 07BF D1                           pop     DE
 625+ 07C0 1D                           dec     E               ; decrement 1 row, to set cursor Y on the last line
 626+ 07C1 AF           SETCRSRY:       xor     A               ; then set cursor X to 0 (go to beginning of line)
 627+ 07C2 32 FA 81     SETCSRCOORDS:   ld      (SCR_CURS_X),A  ; store current cursor X
 628+ 07C5 7B                           ld      A,E             ; recover Y
 629+ 07C6 32 FB 81                     ld      (SCR_CURS_Y),A  ; store current cursor Y
 630+ 07C9 CD E3 06                     call    POS_CURSOR      ; position cursor into new location
 631+ 07CC 3A E5 81                     ld      A,(TMRCNT)      ; load status of cursor flashing
 632+ 07CF E6 20                        and     $20             ; check cursor state
 633+ 07D1 32 00 82                     ld      (LSTCSRSTA),A   ; store the last cursor state
 634+ 07D4 AF           EXITCHAR2VID:   xor     A               ; reset char
 635+ 07D5 32 02 82                     ld      (CHR4VID),A     ; to be sent to screen
 636+ 07D8 F1                           pop     AF              ; recover cursor state
 637+ 07D9 A7                           and     A               ; was it off (A=0)?
 638+ 07DA C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
 639+ 07DD E1                           pop     HL              ; restore HL
 640+ 07DE D1                           pop     DE              ; restore DE
 641+ 07DF C1                           pop     BC              ; restore BC
 642+ 07E0 F1                           pop     AF              ; restore AF
 643+ 07E1 C9           PLACEHOLDER:    ret                     ; return to caller
 644+ 07E2
 645+ 07E2              ; flash the cursor at the current position
 646+ 07E2              ; (this sub-routine is called by CH3 timer ISR)
 647+ 07E2 3A FF 81     FLASHCURSOR:    ld      A,(CRSR_STATE)  ; now, check the cursor
 648+ 07E5 A7                           and     A               ; cursor off (A=0)?
 649+ 07E6 C8                           ret     Z               ; yes, return
 650+ 07E7 3A E5 81                     ld      A,(TMRCNT)      ; no, load the first byte of the 100ths of A second's counter
 651+ 07EA E6 20                        and     $20             ; check if it's time to flash the cursor (check bit #6)
 652+ 07EC 21 00 82                     ld      HL,LSTCSRSTA    ; load address of cell that stores the last cursor state
 653+ 07EF BE                           cp      (HL)            ; compare current state with last state
 654+ 07F0 C8                           ret     Z               ; same state, no change required - exit
 655+ 07F1 77                           ld      (HL),A          ; save new state
 656+ 07F2 F5                           push    AF              ; store A (keep state for later use)
 657+ 07F3 CD 26 07                     call    LOAD_CRSR_POS   ; load current cursor position into HL
 658+ 07F6 F1                           pop     AF              ; recover current state
 659+ 07F7 06 FF                        ld      B,$FF           ; cursor char
 660+ 07F9 FE 20                        cp      $20             ; is the cursor on video (A == $20)?
 661+ 07FB 28 04                        jr      Z,PUTCRSCHR     ; yes, jump over
 662+ 07FD 3A FE 81                     ld      A,(SCR_ORG_CHR) ; no, load the original char
 663+ 0800 47                           ld      B,A             ; move char into B
 664+ 0801 78           PUTCRSCHR:      ld      A,B             ; recover char from B
 665+ 0802 C3 BC 06                     jp      WRITE_VIDEO_LOC ; print cursor/char at the current position & return
 666+ 0805
 667+ 0805
 668+ 0805              ; insert an empty space at the current position of the cursor, moving the following text
 669+ 0805              ; 1 cell straight
 670+ 0805 CD 1D 07     INSERTKEY:      call    RSTCHRCRS       ; restore char under the cursor
 671+ 0808 CD 26 07                     call    LOAD_CRSR_POS   ; retrieve address of cursor cell
 672+ 080B 22 05 82                     ld      (CUR_POS),HL    ; store it
 673+ 080E CD 61 0A                     call    ENDOFLN         ; find address of first free cell after the end of the text from the current cursor position - address into HL -
 674+ 0811                                                      ; DE is the address of the bottom right cell of the screen
 675+ 0811 22 09 82                     ld      (ENDTXT),HL     ; store it
 676+ 0814 ED 4B 05 82                  ld      BC,(CUR_POS)    ; load starting address
 677+ 0818 AF                           xor     A
 678+ 0819 ED 42                        sbc     HL,BC           ; how many positions to move?
 679+ 081B CA F3 06                     jp      Z,MOVSHOWCRS    ; none - leave and re-place cursor
 680+ 081E 44 4D                        ld      BC,HL           ; number of chars to scroll into BC
 681+ 0820 2A 09 82                     ld      HL,(ENDTXT)     ; load address of the end of text
 682+ 0823 2B           CHKHL:          dec     HL              ; decrement to find the address of the char to move
 683+ 0824 E5                           push    HL
 684+ 0825 CD 05 4D                     call    CMP16           ; is it the last cell (bottom right) of screen?
 685+ 0828 E1                           pop     HL
 686+ 0829 D2 34 08                     jp      NC,NXTINST      ; yes, so jump over - nothing to do
 687+ 082C CD A7 06                     call    READ_VIDEO_LOC  ; no, so read current char
 688+ 082F 23                           inc     HL              ; next cell
 689+ 0830 CD BC 06                     call    WRITE_VIDEO_LOC ; write into new position
 690+ 0833 2B                           dec     HL              ; decrement to old position
 691+ 0834 0B           NXTINST:        dec     BC              ; decrement number of chars to move
 692+ 0835 79                           ld      A,C
 693+ 0836 B0                           or      B               ; finished?
 694+ 0837 20 EA                        jr      NZ,CHKHL        ; no, repeat
 695+ 0839 3E 20        ENDINSRT:       ld      A,SPC           ; load SPACE character
 696+ 083B 2A 05 82                     ld      HL,(CUR_POS)    ; get cursor position
 697+ 083E 32 FE 81                     ld      (SCR_ORG_CHR),A ; reset original char under the cursor
 698+ 0841 CD BC 06                     call    WRITE_VIDEO_LOC ; empty current video location
 699+ 0844 C3 F3 06                     jp      MOVSHOWCRS      ; re-place cursor
 700+ 0847
 701+ 0847              ; delete the char at the left of the cursor
 702+ 0847 CD 1D 07     BACKSPACE:      call    RSTCHRCRS       ; restore char
 703+ 084A 2A F8 81                     ld      HL,(SCR_NAM_TB) ; address of origin of screen (location 0,0)
 704+ 084D 44 4D                        ld      BC,HL           ; store into BC
 705+ 084F CD 26 07                     call    LOAD_CRSR_POS   ; load address of current cursor pos.
 706+ 0852 54 5D                        ld      DE,HL           ; copy into DE
 707+ 0854 AF                           xor     A               ; reset Carry
 708+ 0855 ED 42                        sbc     HL,BC           ; check how many chars between
 709+ 0857 CA 81 08                     jp      Z,LVBKSP        ; none, so we are at the top left corner
 710+ 085A ED 53 05 82                  ld      (CUR_POS),DE    ; store current cursor position
 711+ 085E CD 61 0A                     call    ENDOFLN         ; check end of text
 712+ 0861 ED 5B 05 82                  ld      DE,(CUR_POS)    ; retrieve cursor position
 713+ 0865 AF                           xor     A               ; reset Carry
 714+ 0866 ED 52                        sbc     HL,DE           ; check if none follows
 715+ 0868 CA 81 08                     jp      Z,LVBKSP        ; no chars follow, so simply move the cursor
 716+ 086B 44 4D                        ld      BC,HL           ; save numbers of chars to move
 717+ 086D EB                           ex      DE,HL           ; copy starting position into HL
 718+ 086E CD A7 06     MVBKSP:         call    READ_VIDEO_LOC  ; read char
 719+ 0871 2B                           dec     HL              ; 1 position to left
 720+ 0872 CD BC 06                     call    WRITE_VIDEO_LOC ; write char
 721+ 0875 23                           inc     HL              ; goto next char to copy (2 steps to right)
 722+ 0876 23                           inc     HL
 723+ 0877 0B                           dec     BC              ; decrement # of chars
 724+ 0878 79                           ld      A,C
 725+ 0879 B0                           or      B               ; 0 chars?
 726+ 087A 20 F2                        jr      NZ,MVBKSP       ; not finished, continue
 727+ 087C 2B                           dec     HL
 728+ 087D AF                           xor     A
 729+ 087E CD BC 06                     call    WRITE_VIDEO_LOC ; reset last char
 730+ 0881 CD B3 08     LVBKSP:         call    MVCRS2LFT       ; move cursor to new position
 731+ 0884 CD 08 07                     call    NEWCRSRCOORD    ; set new cursor's coordinates
 732+ 0887 C3 F3 06                     jp      MOVSHOWCRS      ; move cursor to the new location and set it ON
 733+ 088A
 734+ 088A
 735+ 088A              ; move cursor to left
 736+ 088A F5           CURSORLEFT:     push    AF              ; store A
 737+ 088B 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 738+ 088E A7                           and     A               ; is it at the most left of the screen (X=0)?
 739+ 088F 28 0C                        jr      Z,CHCKYPOS      ; yes, check Y position
 740+ 0891 3D                           dec     A               ; no, decrement X
 741+ 0892 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 742+ 0895 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 743+ 0898 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 744+ 089B 18 11                        jr      CONTCRSLFT      ; go on moving cursor
 745+ 089D 3A FB 81     CHCKYPOS:       ld      A,(SCR_CURS_Y)  ; load cursor Y
 746+ 08A0 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 747+ 08A1 28 0E                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 748+ 08A3 3D                           dec     A               ; no, decrement Y
 749+ 08A4 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 750+ 08A7 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 751+ 08AA 3D                           dec     A               ; cursor to the most right position (width-0)
 752+ 08AB 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 753+ 08AE CD ED 06     CONTCRSLFT:     call    MOVCRS          ; move cursor into new position
 754+ 08B1 F1           EXITCURSORLEFT: pop     AF              ; restore A
 755+ 08B2 C9                           ret                     ; return to caller
 756+ 08B3
 757+ 08B3              ; move cursor 1 position to the left
 758+ 08B3 3A FA 81     MVCRS2LFT:      ld      A,(SCR_CURS_X)  ; load cursor X into A
 759+ 08B6 A7                           and     A               ; is it at the most left of the screen (X=0)?
 760+ 08B7 28 0B                        jr      Z,CHKYPOS       ; yes, check Y position
 761+ 08B9 3D                           dec     A               ; no, decrement X
 762+ 08BA 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 763+ 08BD 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 764+ 08C0 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 765+ 08C3 C9                           ret                     ; go on moving cursor
 766+ 08C4 3A FB 81     CHKYPOS:        ld      A,(SCR_CURS_Y)  ; load cursor Y
 767+ 08C7 A7                           and     A               ; is it at the most top of the screen (Y=0)?
 768+ 08C8 28 E7                        jr      Z,EXITCURSORLEFT; yes, exit doing nothing
 769+ 08CA 3D                           dec     A               ; no, decrement Y
 770+ 08CB 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 771+ 08CE 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width
 772+ 08D1 3D                           dec     A               ; cursor to the most right position (width-1)
 773+ 08D2 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 774+ 08D5 C9                           ret                     ; return to caller
 775+ 08D6
 776+ 08D6              ; move cursor up
 777+ 08D6 F5           CURSORUP:       push    AF              ; store A
 778+ 08D7 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 779+ 08DA A7                           and     A               ; is it at the most top of the screen (Y=0)?
 780+ 08DB 28 10                        jr      Z,EXITCURSORUP  ; yes, exit doing nothing
 781+ 08DD 3D                           dec     A               ; no, decrement Y
 782+ 08DE 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 783+ 08E1 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 784+ 08E4 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 785+ 08E7 CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 786+ 08EA CD ED 06                     call    MOVCRS          ; move cursor into new position
 787+ 08ED F1           EXITCURSORUP:   pop     AF              ; restore A
 788+ 08EE C9                           ret                     ; return to caller
 789+ 08EF
 790+ 08EF
 791+ 08EF              ; move cursor to right
 792+ 08EF F5           CURSORRIGHT:    push    AF              ; store A
 793+ 08F0 C5                           push    BC              ; store B
 794+ 08F1 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load current screen width (in text modes it's 32 or 40)
 795+ 08F4 3D                           dec     A               ; decrement it (most right can only be 31 or 39)
 796+ 08F5 47                           ld      B,A             ; move A into B
 797+ 08F6 3A FA 81                     ld      A,(SCR_CURS_X)  ; load cursor X into A
 798+ 08F9 B8                           cp      B               ; is cursor at the most right position on the screen?
 799+ 08FA 30 0C                        jr      NC,CHCKYPOS2    ; yes, so jump to check Y position
 800+ 08FC 3C                           inc     A               ; no, so increment X
 801+ 08FD 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 802+ 0900 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load current cursor Y
 803+ 0903 32 FD 81                     ld      (SCR_CUR_NY),A  ; no move over Y axis
 804+ 0906 18 13                        jr      CONTCRSRGT      ; go on moving cursor
 805+ 0908 3A F6 81     CHCKYPOS2:      ld      A,(SCR_SIZE_H)  ; load screen height
 806+ 090B 3D                           dec     A               ; decrement it (last row can only be 23)
 807+ 090C 47                           ld      B,A             ; move bottom into B
 808+ 090D 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 809+ 0910 B8                           cp      B               ; is the cursor at the bottom of the screen?
 810+ 0911 30 0E                        jr      NC,EXITCURSORRGHT; yes, exit doing nothing
 811+ 0913 3C                           inc     A               ; no, increment Y
 812+ 0914 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 813+ 0917 AF                           xor     A               ; move cursor to top left
 814+ 0918 32 FC 81                     ld      (SCR_CUR_NX),A  ; store new X
 815+ 091B CD 1D 07     CONTCRSRGT:     call    RSTCHRCRS       ; restore char under the cursor and print it
 816+ 091E CD ED 06                     call    MOVCRS          ; move cursor into new position
 817+ 0921 C1           EXITCURSORRGHT: pop     BC              ; retrieve BC
 818+ 0922 F1                           pop     AF              ; restore A
 819+ 0923 C9                           ret                     ; return to caller
 820+ 0924
 821+ 0924
 822+ 0924              ; move cursor down
 823+ 0924 F5           CURSORDOWN:     push    AF              ; store A
 824+ 0925 C5                           push    BC              ; store B
 825+ 0926 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load current screen height (in text modes it's 24)
 826+ 0929 3D                           dec     A               ; decrement it (positions can only vary between 0 and 23)
 827+ 092A 47                           ld      B,A             ; move X into B
 828+ 092B 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 829+ 092E B8                           cp      B               ; is current cursor position < 23?
 830+ 092F 30 10                        jr      NC,EXITCURSORDOWN; no, exit doing nothing
 831+ 0931 3C                           inc     A               ; yes, increment Y
 832+ 0932 32 FD 81                     ld      (SCR_CUR_NY),A  ; store new Y
 833+ 0935 3A FA 81                     ld      A,(SCR_CURS_X)  ; load current cursor X
 834+ 0938 32 FC 81                     ld      (SCR_CUR_NX),A  ; set new cursor X
 835+ 093B CD 1D 07                     call    RSTCHRCRS       ; restore char under the cursor and print it
 836+ 093E CD ED 06                     call    MOVCRS          ; move cursor into new position
 837+ 0941 C1           EXITCURSORDOWN: pop     BC              ; retrieve BC
 838+ 0942 F1                           pop     AF              ; retrieve A
 839+ 0943 C9                           ret                     ; return to caller
 840+ 0944
 841+ 0944
 842+ 0944              ; set cursor on (visible on screen)
 843+ 0944 F5           CURSOR_ON:      push    AF              ; store AF
 844+ 0945 3A FF 81                     ld      A,(CRSR_STATE)  ; load cursor state
 845+ 0948 B7                           or      A               ; is it on?
 846+ 0949 20 0C                        jr      NZ,EXITCURSOR_ON; yes, so nothing to do
 847+ 094B 3A F6 81                     ld      A,(SCR_SIZE_H)  ; check the video mode
 848+ 094E FE 30                        cp      $30             ; graphics 2 or 3 (if value>=48)?
 849+ 0950 30 05                        jr      NC,EXITCURSOR_ON; yes, so exit (no cursor in graphics 2 or 3)
 850+ 0952 3E 01                        ld      A,$01           ; cursor state ON
 851+ 0954 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 852+ 0957 F1           EXITCURSOR_ON:  pop     AF              ; restore AF
 853+ 0958 C9                           ret                     ; return to caller
 854+ 0959
 855+ 0959              ; set cursor off (invisible on screen)
 856+ 0959 F5           CURSOR_OFF:     push    AF              ; store AF
 857+ 095A AF                           xor     A               ; cursor state OFF
 858+ 095B 32 FF 81                     ld      (CRSR_STATE),A  ; set state
 859+ 095E F1                           pop     AF              ; restore AF
 860+ 095F C9                           ret
 861+ 0960
 862+ 0960              ; scroll the screen 1 row up
 863+ 0960 AF           SCROLLUP:       xor     A               ; reset A
 864+ 0961 57                           ld      D,A             ; reset D
 865+ 0962 32 01 82                     ld      (PRNTVIDEO),A   ; no print on screen while scrolling
 866+ 0965 2A F8 81                     ld      HL,(SCR_NAM_TB) ; start address of the name table
 867+ 0968 22 35 82                     ld      (VIDTMP1),HL    ; store address of the destination row (1st row of the screen)
 868+ 096B 3A F5 81                     ld      A,(SCR_SIZE_W)  ; load the screen width
 869+ 096E 5F                           ld      E,A             ; move width into E
 870+ 096F 19                           add     HL,DE           ; HL now contains the address of the source row (2nd row of the screen)
 871+ 0970 22 37 82                     ld      (VIDTMP2),HL    ; store address of source row
 872+ 0973 3A F6 81                     ld      A,(SCR_SIZE_H)  ; load the screen height
 873+ 0976 3D                           dec     A               ; decrement the # of rows: now, A contains the # of rows to be moved
 874+ 0977 47                           ld      B,A             ; move # of rows into B
 875+ 0978 3A F5 81     SCROLLNXTRW:    ld      A,(SCR_SIZE_W)  ; (re)load the screen width
 876+ 097B 5F                           ld      E,A             ; move width into E
 877+ 097C 2A 37 82                     ld      HL,(VIDTMP2)    ; load source address
 878+ 097F 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 879+ 0981 ED 69                        out     (C),L           ; low byte of source
 880+ 0983 ED 61                        out     (C),H           ; high byte of source
 881+ 0985 21 0D 82                     ld      HL,VIDEOBUFF    ; load address of the first cell of the video buffer
 882+ 0988 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 883+ 098A ~                            LM64K_NOP               ; added to compensate shorter instruction
 884+ 098A ED 78        LOADNEXTCOL:    in      A,(C)           ; load char
 885+ 098C 77                           ld      (HL),A          ; store char
 886+ 098D 23                           inc     HL              ; next cell of the buffer
 887+ 098E 1D                           dec     E               ; count the chars to be read
 888+ 098F 20 F9                        jr      NZ,LOADNEXTCOL  ; repeat until we read the entire row
 889+ 0991 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload the screen width
 890+ 0994 5F                           ld      E,A             ; move # of rows into E
 891+ 0995 16 00                        ld      D,$00           ; reset D
 892+ 0997 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of destination row
 893+ 099A E5                           push    HL              ; store HL
 894+ 099B 2A 37 82                     ld      HL,(VIDTMP2)    ; current source will be..
 895+ 099E 22 35 82                     ld      (VIDTMP1),HL    ; ..new destination
 896+ 09A1 19                           add     HL,DE           ; address of new
 897+ 09A2 22 37 82                     ld      (VIDTMP2),HL    ; source row
 898+ 09A5 E1                           pop     HL              ; restore address of current destination row
 899+ 09A6 CB F4                        set     6,H             ; writing mode
 900+ 09A8 0E 32                        ld      C,VDP_SET       ; VDP setting mode
 901+ 09AA ED 69                        out     (C),L           ; low byte
 902+ 09AC ED 61                        out     (C),H           ; high byte of address
 903+ 09AE 21 0D 82                     ld      HL,VIDEOBUFF    ; video buffer address
 904+ 09B1 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 905+ 09B3 7E           WRITEBUF:       ld      A,(HL)          ; load char
 906+ 09B4 ED 79                        out     (C),A           ; send char
 907+ 09B6 23                           inc     HL              ; increment buffer index
 908+ 09B7 1D                           dec     E               ; next row
 909+ 09B8 20 F9                        jr      NZ,WRITEBUF     ; repeat until 0
 910+ 09BA 10 BC                        djnz    SCROLLNXTRW     ; repeat for the entire screen
 911+ 09BC 3A F5 81                     ld      A,(SCR_SIZE_W)  ; reload screen width
 912+ 09BF 47                           ld      B,A             ; cells to empty into B
 913+ 09C0 AF                           xor     A               ; null char
 914+ 09C1 0E 32                        ld      C,VDP_SET       ; VDP set mode
 915+ 09C3 2A 35 82                     ld      HL,(VIDTMP1)    ; load address of the last row
 916+ 09C6 CB F4                        set     6,H             ; writing mode
 917+ 09C8 ED 69                        out     (C),L           ; low byte then..
 918+ 09CA ED 61                        out     (C),H           ; high byte of address
 919+ 09CC 0E 30                        ld      C,VDP_DAT              ; VDP data mode
 920+ 09CE ~                            LM64K_NOP               ; delay
 921+ 09CE ED 79        RPTEMPTYROW:    out     (C),A           ; empty cell
 922+ 09D0 00                           nop                     ; delay
 923+ 09D1 00                           nop
 924+ 09D2 10 FA                        djnz    RPTEMPTYROW     ; repeat until the last row has been cleaned
 925+ 09D4 3E 01                        ld      A,$01
 926+ 09D6 32 01 82                     ld      (PRNTVIDEO),A   ; set print-on-video on
 927+ 09D9 C9                           ret                     ; return to caller
 928+ 09DA
 929+ 09DA              ; carriage return: first, it looks for char $00 at the beginning of the line (look for the first null char),
 930+ 09DA              ; then it starts sendind every char it finds on the screen to the terminal buffer of the BASIC interpreter
 931+ 09DA              ; until another null char is found. Finally, move to the next line and position the cursor at the beginning
 932+ 09DA              ; of the row (equivalent to CR+LF), then gets back control to the screen editor to let it interpret the line
 933+ 09DA              CUR_POS         equ     TMPBFR1         ; cursor position
 934+ 09DA              SRTTXT          equ     TMPBFR2         ; start of text line
 935+ 09DA              ENDTXT          equ     TMPBFR3         ; end of text line
 936+ 09DA              CRGRETURN:      ; preliminary: disable cursor if on, and retrieve char under it
 937+ 09DA 3A FF 81                     ld      A,(CRSR_STATE)  ; recover cursor state
 938+ 09DD 32 0B 82                     ld      (TMPBFR4),A     ; store status
 939+ 09E0 A7                           and     A               ; is cursor on?
 940+ 09E1 C4 59 09                     call    NZ,CURSOR_OFF   ; yes, so set cursor off
 941+ 09E4 CD 1D 07                     call    RSTCHRCRS       ; restore char under it
 942+ 09E7                              ; first, check if cursor if off, so that we just interpret return as a new line command
 943+ 09E7 3A 3F 82                     ld      A,(KBDNPT)      ; check if input from keyboad
 944+ 09EA A7                           and     A               ; if 0, input is not from keyboard...
 945+ 09EB CA 40 0A                     jp      Z,PRNTRETURN    ; ...so just print a carriage return; otherwise, interpret the return
 946+ 09EE                              ; first part: look for the beginning of the text line on screen
 947+ 09EE CD 26 07                     call    LOAD_CRSR_POS   ; load cursor position into HL
 948+ 09F1 22 05 82                     ld      (CUR_POS),HL    ; store it
 949+ 09F4 ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load VRAM address of top-left cell of screen ("home")
 950+ 09F8 E5           RPTNLLSRC:      push    HL
 951+ 09F9 CD 05 4D                     call    CMP16           ; check if at "home"
 952+ 09FC E1                           pop     HL
 953+ 09FD CA 08 0A                     jp      Z,CNTNULL       ; yes, exit because there is nothing before
 954+ 0A00 2B                           dec     HL              ; go 1 step back
 955+ 0A01 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
 956+ 0A04 A7                           and     A               ; is it $00 (null char)?
 957+ 0A05 20 F1                        jr      NZ,RPTNLLSRC    ; no, continue searching
 958+ 0A07 23                           inc     HL              ; move 1 step forward to go back to the last cell with something in
 959+ 0A08                              ; second part: look for the ending of the text on screen
 960+ 0A08 22 07 82     CNTNULL:        ld      (SRTTXT),HL     ; store beginning of text
 961+ 0A0B CD 61 0A                     call    ENDOFLN         ; find end of text line looking at the end of chars after the cursor position
 962+ 0A0E 22 09 82                     ld      (ENDTXT),HL     ; store ending of text line
 963+ 0A11 ED 5B 07 82                  ld      DE,(SRTTXT)     ; load beginning of text line
 964+ 0A15 A7                           and     A               ; clear Carry
 965+ 0A16 ED 52                        sbc     HL,DE           ; how many chars?
 966+ 0A18 28 26                        jr      Z,PRNTRETURN    ; no chars found (HL-DE=0), so just print return & leave
 967+ 0A1A                              ;---    central part: send the text on the screen to the interpreter
 968+ 0A1A 2A 07 82                     ld      HL,(SRTTXT)     ; load beginning of text line
 969+ 0A1D ED 5B 09 82                  ld      DE,(ENDTXT)     ; load ending of text line
 970+ 0A21 CD A7 06     SNDCHRTOBFR:    call    READ_VIDEO_LOC  ; read char
 971+ 0A24 E5                           push    HL
 972+ 0A25 CD FD 01                     call    CHARINTOBFR     ; send char to buffer
 973+ 0A28 E1                           pop     HL
 974+ 0A29 23                           inc     HL              ; go to next char
 975+ 0A2A E5                           push    HL              ; store HL
 976+ 0A2B CD 05 4D                     call    CMP16           ; check if DE=HL (finish chars)
 977+ 0A2E E1                           pop     HL
 978+ 0A2F 20 F0                        jr      NZ,SNDCHRTOBFR  ; no, repeat
 979+ 0A31 3E 0D                        ld      A,CR            ; yes, so now send carriage return
 980+ 0A33 CD FD 01                     call    CHARINTOBFR     ; send to buffer
 981+ 0A36 2A 09 82                     ld      HL,(ENDTXT)     ; recover address of last char of input text
 982+ 0A39 CD 49 07                     call    HL2XY           ; retrieve X,Y from address
 983+ 0A3C 7D                           ld      A,L             ; move Y into A (we don't need X anymore)
 984+ 0A3D 32 FB 81                     ld      (SCR_CURS_Y),A  ; store new Y
 985+ 0A40                              ;---    final part: go at the beginning of a new line on the screen
 986+ 0A40 AF           PRNTRETURN:     xor     A               ; move to col 0
 987+ 0A41 32 FA 81                     ld      (SCR_CURS_X),A  ; store new X
 988+ 0A44 3A FB 81                     ld      A,(SCR_CURS_Y)  ; load cursor Y into A
 989+ 0A47 3C                           inc     A               ; new row
 990+ 0A48 21 F6 81                     ld      HL,SCR_SIZE_H   ; load address of cell that keeps screen height
 991+ 0A4B BE                           cp      (HL)            ; is the cursor over the bottom of the screen?
 992+ 0A4C 38 06                        jr      C,ADDNEWLINE    ; no, jump over
 993+ 0A4E 3D                           dec     A               ; yes, so come back 1 row, then...
 994+ 0A4F F5                           push    AF              ; (store A)
 995+ 0A50 CD 60 09                     call    SCROLLUP        ; ...scroll the screen before to...
 996+ 0A53 F1                           pop     AF              ; (retrieve A)
 997+ 0A54 32 FB 81     ADDNEWLINE:     ld      (SCR_CURS_Y),A  ; ...store new Y
 998+ 0A57 3A 0B 82                     ld      A,(TMPBFR4)     ; retrieve cursor state
 999+ 0A5A A7                           and     A               ; was it off (A=0)?
1000+ 0A5B C4 44 09                     call    NZ,CURSOR_ON    ; no, set cursor on
1001+ 0A5E C3 E3 06                     jp      POS_CURSOR      ; position cursor to new location & return to caller
1002+ 0A61
1003+ 0A61              ; find end of text line
1004+ 0A61              ; destroys A, DE, and HL - store address of last char of text line into HL,
1005+ 0A61              ; while DE contains the address of the bottom right cell of the screen
1006+ 0A61 3A F6 81     ENDOFLN:        ld      A,(SCR_SIZE_H)
1007+ 0A64 5F                           ld      E,A             ; load screen height into DE
1008+ 0A65 3A F5 81                     ld      A,(SCR_SIZE_W)
1009+ 0A68 6F                           ld      L,A             ; load screen width into HL
1010+ 0A69 AF                           xor     A
1011+ 0A6A 67                           ld      H,A
1012+ 0A6B 57                           ld      D,A
1013+ 0A6C CD 10 4D                     call    MUL16           ; multiply HL times DE to get the screen size
1014+ 0A6F ED 5B F8 81                  ld      DE,(SCR_NAM_TB) ; load screen name table start address into DE
1015+ 0A73 19                           add     HL,DE           ; get the address...
1016+ 0A74 2B                           dec     HL              ; ...of the "last" video cell
1017+ 0A75 EB                           ex      DE,HL           ; store address into DE
1018+ 0A76 2A 05 82                     ld      HL,(CUR_POS)    ; retrieve original cursor position
1019+ 0A79 E5           RPTNLLSRC2:     push    HL
1020+ 0A7A CD 05 4D                     call    CMP16           ; check if at last position on screen (bottom right corner)
1021+ 0A7D E1                           pop     HL
1022+ 0A7E C8                           ret     Z               ; if yes, exit because these is nothing after
1023+ 0A7F 23                           inc     HL              ; 1 more step forward
1024+ 0A80 CD A7 06                     call    READ_VIDEO_LOC  ; read char of current position
1025+ 0A83 A7                           and     A               ; is it $00 (null char)?
1026+ 0A84 20 F3                        jr      NZ,RPTNLLSRC2   ; no, continue searching
1027+ 0A86 C9           CNTNULL2:       ret                     ; yes: found end of text, return to caller
1028+ 0A87
1029+ 0A87
1030+ 0A87              ; ------------------------------------------------------------------------------
1031+ 0A87                              ; this table contains the values of the offsets to be added to
1032+ 0A87                              ; the starting address of the name table to find the correct
1033+ 0A87                              ; value of the first cell of the corresponding row
1034+ 0A87                              ; (by doing so, it's faster than doing a multipication)
1035+ 0A87                              ; table for graphics 1 text mode: 32 cols
1036+ 0A87 00 00 20 00  POS_TB_CRS_32:  defw    $0000,$0020,$0040,$0060,$0080,$00A0,$00C0,$00E0
1036+ 0A8B 40 00 60 00
1036+ 0A8F 80 00 A0 00
1036+ 0A93 C0 00 E0 00
1037+ 0A97 00 01 20 01                  defw    $0100,$0120,$0140,$0160,$0180,$01A0,$01C0,$01E0
1037+ 0A9B 40 01 60 01
1037+ 0A9F 80 01 A0 01
1037+ 0AA3 C0 01 E0 01
1038+ 0AA7 00 02 20 02                  defw    $0200,$0220,$0240,$0260,$0280,$02A0,$02C0,$02E0
1038+ 0AAB 40 02 60 02
1038+ 0AAF 80 02 A0 02
1038+ 0AB3 C0 02 E0 02
1039+ 0AB7                              ; table for pure text mode: 40 cols
1040+ 0AB7 00 00 28 00  POS_TB_CRS_40:  defw    $0000,$0028,$0050,$0078,$00A0,$00C8,$00F0,$0118
1040+ 0ABB 50 00 78 00
1040+ 0ABF A0 00 C8 00
1040+ 0AC3 F0 00 18 01
1041+ 0AC7 40 01 68 01                  defw    $0140,$0168,$0190,$01B8,$01E0,$0208,$0230,$0258
1041+ 0ACB 90 01 B8 01
1041+ 0ACF E0 01 08 02
1041+ 0AD3 30 02 58 02
1042+ 0AD7 80 02 A8 02                  defw    $0280,$02A8,$02D0,$02F8,$0320,$0348,$0370,$0398
1042+ 0ADB D0 02 F8 02
1042+ 0ADF 20 03 48 03
1042+ 0AE3 70 03 98 03
1043+ 0AE7
1044+ 0AE7              ; ------------------------------------------------------------------------------
1045+ 0AE7              ; reset VRAM
1046+ 0AE7 AF           EMPTY_VRAM:     xor     A               ; reg.A cleared: we fill up VRAM with $00
1047+ 0AE8 67                           ld      H,A
1048+ 0AE9 6F                           ld      L,A             ; reset HL
1049+ 0AEA CD 87 06                     call    SETVDPADRS      ; set address of first VRAM cell to $0000
1050+ 0AED 06 40                        ld      B,$40           ; $40 pages of RAM...
1051+ 0AEF 57                           ld      D,A             ; ...each one with $100 cells (tot. $4000 bytes)
1052+ 0AF0 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1053+ 0AF2 ED 79        EMPTVRM:        out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
1054+ 0AF4 14                           inc     D               ; next cell
1055+ 0AF5 00                           nop
1056+ 0AF6 20 FA                        jr      NZ,EMPTVRM      ; repeat until page is fully cleared
1057+ 0AF8 10 F8                        djnz    EMPTVRM         ; repeat for $40 pages
1058+ 0AFA C9                           ret                     ; return to caller
1059+ 0AFB
1060+ 0AFB              ; clear video registers in SRAM
1061+ 0AFB 21 F5 81     CLR_RAM_REG:    ld      HL,SCR_SIZE_W   ; address of first register
1062+ 0AFE AF                           xor     A               ; $00 to clean the registers
1063+ 0AFF 06 44                        ld      B,CHASNDDTN-SCR_SIZE_W; how many bytes (registers) to clean (dinamically calculated)
1064+ 0B01 77           RSTVDPRAMREG:   ld      (HL),A          ; reset register
1065+ 0B02 23                           inc     HL              ; next register
1066+ 0B03 10 FC                        djnz    RSTVDPRAMREG    ; repeat
1067+ 0B05 C9                           ret                     ; return to caller
1068+ 0B06
1069+ 0B06              ; ------------------------------------------------------------------------------
1070+ 0B06              ; set a specific graphics mode, passed into reg. E
1071+ 0B06 06 08        SET_GFX_MODE:   ld      B,$08           ; 8 registers means 8 bytes..
1072+ 0B08 CB 23                        sla     E               ; multiply E by 8..
1073+ 0B0A CB 23                        sla     E               ; so that reg. E can point..
1074+ 0B0C CB 23                        sla     E               ; to the correct settings
1075+ 0B0E 16 00        SET_GFX_MODE2:  ld      D,$00           ; reset D
1076+ 0B10 21 43 0B                     ld      HL,VDPMODESET   ; pointer to register settings | <= here points the SHOW_LOGO sub-routine
1077+ 0B13 19                           add     HL,DE           ; add offset to get the correct set of values for the required mode
1078+ 0B14 3E 80                        ld      A,$80           ; start with REG0 ($80+register number)
1079+ 0B16 0E 32                        ld      C,VDP_SET       ; VDP set
1080+ 0B18 56           LDREGVLS:       ld      D,(HL)          ; load register's value
1081+ 0B19 ED 51                        out     (C),D           ; send data to VDP
1082+ 0B1B ED 79                        out     (C),A           ; indicate the register to send data to
1083+ 0B1D 3C                           inc     A               ; next register
1084+ 0B1E 23                           inc     HL              ; next value
1085+ 0B1F 10 F7                        djnz    LDREGVLS        ; repeat for 8 registers
1086+ 0B21 C9                           ret
1087+ 0B22
1088+ 0B22              ; ------------------------------------------------------------------------------
1089+ 0B22              LOADCHARSET:    ; reg. A contains the video mode
1090+ 0B22                              ; reg. HL contains address of pattern table into VRAM
1091+ 0B22 06 00                        ld      B,$00           ; 0=256 chars to load (complete charset)
1092+ 0B24 CB F4                        set     $06,H           ; add $4000 to address to indicate that we want to write into VRAM
1093+ 0B26 0E 32                        ld      C,VDP_SET       ; load VDP address into C
1094+ 0B28 ED 69                        out     (C),L           ; send low byte of address
1095+ 0B2A ED 61                        out     (C),H           ; send high byte
1096+ 0B2C 0E 30                        ld      C,VDP_DAT              ; VDP data mode
1097+ 0B2E 21 3B 4E                     ld      HL,CHRST68      ; starting address of 6x8 charset into ROM
1098+ 0B31 A7                           and     A               ; is it text mode (A=0)?
1099+ 0B32 28 03                        jr      Z,NXTCHAR       ; yes, so jump to load chars into VRAM
1100+ 0B34 21 3B 56                     ld      HL,CHRST88      ; no, so we change and load the 8x8 charset
1101+ 0B37 16 08        NXTCHAR:        ld      D,$08           ; 8 bytes per pattern char
1102+ 0B39 7E           SENDCHRPTRNS:   ld      A,(HL)          ; load byte to send to VDP
1103+ 0B3A ED 79                        out     (C),A           ; write byte into VRAM
1104+ 0B3C 23                           inc     HL              ; inc byte pointer
1105+ 0B3D 15                           dec     D               ; 8 bytes sents (0 char)?
1106+ 0B3E 20 F9                        jr      NZ,SENDCHRPTRNS ; no, continue
1107+ 0B40 10 F5                        djnz    NXTCHAR         ; yes, decrement chars counter and continue for all the chars
1108+ 0B42 C9                           ret                     ; return to caller
1109+ 0B43
1110+ 0B43              ;------------------------------------------------------------------------------
1111+ 0B43              ; NAME TABLE:       buffer video - contains the chars to be shown on video
1112+ 0B43              ; PATTERN TABLE:    charset - contains the chars/tiles to be loaded into the name table
1113+ 0B43              ; COLOR TABLE:      color settings for chars/tiles
1114+ 0B43
1115+ 0B43                              ; VDP register settings for a text display
1116+ 0B43 00           VDPMODESET:     defb    %00000000       ; reg.0: external video off
1117+ 0B44 D0                           defb    %11010000       ; reg.1: 16K VRAM, video on, int. off, text mode (40x24)
1118+ 0B45 02                           defb    $02             ; reg.2: name table set to $0800 ($02x$400)
1119+ 0B46 00                           defb    $00             ; reg.3: not used in text mode
1120+ 0B47 00                           defb    $00             ; reg.4: pattern table set to $0000
1121+ 0B48 00                           defb    $00             ; reg.5: not used in text mode
1122+ 0B49 00                           defb    $00             ; reg.6: not used in text mode
1123+ 0B4A F5                           defb    $f5             ; reg.7: white text on light blue background
1124+ 0B4B
1125+ 0B4B              VDPMODESET1:    ; VDP register settings for a graphics 1 mode
1126+ 0B4B 00                           defb    %00000000       ; reg.0: ext. video off
1127+ 0B4C C0                           defb    %11000000       ; reg.1: 16K Vram; video on, int off, graphics mode 1, sprite size 8x8, sprite magn. 0
1128+ 0B4D 06                           defb    $06             ; reg.2: name table address: $1800
1129+ 0B4E 80                           defb    $80             ; reg.3: color table address: $2000
1130+ 0B4F 00                           defb    $00             ; reg.4: pattern table address: $0000
1131+ 0B50 36                           defb    $36             ; reg.5: sprite attr. table address: $1B00
1132+ 0B51 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1133+ 0B52 05                           defb    $05             ; reg.7: backdrop color (light blue)
1134+ 0B53
1135+ 0B53              VDPMODESET2:    ; VDP register settings for a graphics 2 mode
1136+ 0B53 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1137+ 0B54 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1138+ 0B55 06                           defb    $06             ; reg.2: name table addr.: $1800
1139+ 0B56 FF                           defb    $FF             ; reg.3: color table addr.: $2000
1140+ 0B57 03                           defb    $03             ; reg.4: pattern table addr.: $0000
1141+ 0B58 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1142+ 0B59 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1143+ 0B5A 05                           defb    $05             ; reg.7: backdrop color: light blue
1144+ 0B5B
1145+ 0B5B              VDPMODESETMC:   ; VDP register settings for a multicolor mode
1146+ 0B5B 00                           defb    %00000000       ; reg.0: ext. video dis.
1147+ 0B5C CB                           defb    %11001011       ; reg.1: 16K VRAM, video on, INT off, multicolor mode, sprite size 8x8, sprite magn. 0
1148+ 0B5D 02                           defb    $02             ; reg.2: name table addr.: $0800
1149+ 0B5E 00                           defb    $00             ; reg.3: don't care
1150+ 0B5F 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1151+ 0B60 36                           defb    $36             ; reg.5: sprite attr. table addr.: $1B00
1152+ 0B61 07                           defb    $07             ; reg.6: sprite pattern table addr.: $3800
1153+ 0B62 0F                           defb    $0F             ; reg.7: backdrop color (white)
1154+ 0B63
1155+ 0B63              VDPMODESETEX2:  ; VDP register settings for an extended graphics 2 mode
1156+ 0B63 02                           defb    %00000010       ; reg.0: graphics 2 mode, ext. video dis.
1157+ 0B64 C0                           defb    %11000000       ; reg.1: 16K VRAM, video on, INT off, sprite size 8x8, sprite magn. 0
1158+ 0B65 0E                           defb    $0E             ; reg.2: name table addr.: $3800
1159+ 0B66 9F                           defb    $9F             ; reg.3: color table addr.: $2000
1160+ 0B67 00                           defb    $00             ; reg.4: pattern table addr.: $0000
1161+ 0B68 76                           defb    $76             ; reg.5: sprite attr. table addr.: $3B00
1162+ 0B69 03                           defb    $03             ; reg.6: sprite pattern table addr.: $1800
1163+ 0B6A 05                           defb    $05             ; reg.7: backdrop color: light blue
1164+ 0B6B
1165+ 0B6B              LM80CLOGO:      ; patterns to compose the splash screen logo
1166+ 0B6B                              ; 1st band
1167+ 0B6B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1167+ 0B6F 00 00 00 00
1167+ 0B73 00 00 00 00
1167+ 0B77 00 00 00 00
1167+ 0B7B 00 00 00 00
1167+ 0B7F 00 00 00 00
1167+ 0B83 00 00 00 00
1167+ 0B87 00 00 00 00
1168+ 0B8B 00 00 0F 0A                  defb    0,0,15,10,11,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1168+ 0B8F 0B 10 00 00
1168+ 0B93 00 00 00 00
1168+ 0B97 00 00 00 00
1168+ 0B9B 00 00 00 00
1168+ 0B9F 00 00 00 00
1168+ 0BA3 00 00 00 00
1168+ 0BA7 00 00 00 00
1169+ 0BAB                              ; 2nd band
1170+ 0BAB 00 00 0D 17                  defb    0,0,13,23,0,12,0,0,0,1,0,0,0,20,0,0,6,5,6,21,22,7,6,21,22,7,6,1,1,7,0,0
1170+ 0BAF 00 0C 00 00
1170+ 0BB3 00 01 00 00
1170+ 0BB7 00 14 00 00
1170+ 0BBB 06 05 06 15
1170+ 0BBF 16 07 06 15
1170+ 0BC3 16 07 06 01
1170+ 0BC7 01 07 00 00
1171+ 0BCB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,20,6,1,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1171+ 0BCF 00 0C 00 00
1171+ 0BD3 00 01 00 00
1171+ 0BD7 00 01 14 06
1171+ 0BDB 01 05 03 05
1171+ 0BDF 03 05 03 05
1171+ 0BE3 03 05 03 05
1171+ 0BE7 03 05 00 00
1172+ 0BEB                              ; 3rd band
1173+ 0BEB 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,1,1,1,5,9,20,19,8,3,5,19,5,3,5,0,0,0,0
1173+ 0BEF 00 0C 00 00
1173+ 0BF3 00 01 00 00
1173+ 0BF7 00 01 01 01
1173+ 0BFB 01 05 09 14
1173+ 0BFF 13 08 03 05
1173+ 0C03 13 05 03 05
1173+ 0C07 00 00 00 00
1174+ 0C0B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,8,3,5,6,21,22,7,3,1,22,5,3,5,0,0,0,0
1174+ 0C0F 00 0C 00 00
1174+ 0C13 00 01 00 00
1174+ 0C17 00 01 00 08
1174+ 0C1B 03 05 06 15
1174+ 0C1F 16 07 03 01
1174+ 0C23 16 05 03 05
1174+ 0C27 00 00 00 00
1175+ 0C2B                              ; 4th band
1176+ 0C2B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,0,0,0,1,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,0
1176+ 0C2F 00 0C 00 00
1176+ 0C33 00 01 00 00
1176+ 0C37 00 01 00 00
1176+ 0C3B 03 05 03 05
1176+ 0C3F 03 05 03 05
1176+ 0C43 03 05 03 05
1176+ 0C47 03 05 00 00
1177+ 0C4B 00 00 0D 00                  defb    0,0,13,0,0,12,0,0,0,1,4,4,0,1,0,0,3,5,9,20,19,8,9,20,19,8,9,1,1,8,0,0
1177+ 0C4F 00 0C 00 00
1177+ 0C53 00 01 04 04
1177+ 0C57 00 01 00 00
1177+ 0C5B 03 05 09 14
1177+ 0C5F 13 08 09 14
1177+ 0C63 13 08 09 01
1177+ 0C67 01 08 00 00
1178+ 0C6B                              ; 5th band
1179+ 0C6B 00 00 0E 12                  defb    0,0,14,18,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1179+ 0C6F 12 11 00 00
1179+ 0C73 00 00 00 00
1179+ 0C77 00 00 00 00
1179+ 0C7B 00 00 00 00
1179+ 0C7F 00 00 00 00
1179+ 0C83 00 00 00 00
1179+ 0C87 00 00 00 00
1180+ 0C8B 00 00 00 00                  defb    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1180+ 0C8F 00 00 00 00
1180+ 0C93 00 00 00 00
1180+ 0C97 00 00 00 00
1180+ 0C9B 00 00 00 00
1180+ 0C9F 00 00 00 00
1180+ 0CA3 00 00 00 00
1180+ 0CA7 00 00 00 00
# file closed: ../include/vdp/vdp-1.5.asm
  77  0CAB
  78  0CAB              ; incude the latest version of the PSG module
  79  0CAB                  INCLUDE "../include/psg/psg-1.1.asm"
# file opened: ../include/psg/psg-1.1.asm
   1+ 0CAB              ; ------------------------------------------------------------------------------
   2+ 0CAB              ; LM80C - PSG ROUTINES - 1.1
   3+ 0CAB              ; ------------------------------------------------------------------------------
   4+ 0CAB              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 0CAB              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 0CAB              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 0CAB              ; kind of warranty: you can use them at your own risk.
   8+ 0CAB              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 0CAB              ; maintain the copyright notices, include this advice and the note to the
  10+ 0CAB              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 0CAB              ; redistribuite them.
  12+ 0CAB              ; https://www.leonardomiliani.com
  13+ 0CAB              ;
  14+ 0CAB              ; Please support me by visiting the following links:
  15+ 0CAB              ; Main project page: https://www.leonardomiliani.com
  16+ 0CAB              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 0CAB              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 0CAB              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 0CAB              ; ------------------------------------------------------------------------------
  20+ 0CAB              ;
  21+ 0CAB              ; ------------------------------------------------------------------------------
  22+ 0CAB
  23+ 0CAB              ;------------------------------------------------------------------------------
  24+ 0CAB
  25+ 0CAB              ; configure the PSG
  26+ 0CAB 21 39 82     initPSG:        ld      HL,CHASNDDTN    ; starting address of sound & keyboard RAM registers
  27+ 0CAE 06 0E                        ld      B,SERIALS_EN-CHASNDDTN; # of PSG sound & keyboard registers
  28+ 0CB0 AF                           xor     A               ; reset A
  29+ 0CB1 77           EMPTSNDBFR:     ld      (HL),A          ; reset RAM register
  30+ 0CB2 23                           inc     HL              ; next register
  31+ 0CB3 10 FC                        djnz    EMPTSNDBFR      ; repeat
  32+ 0CB5 06 10        CLRPSGREGS:     ld      B,$10           ; 16 registers to set
  33+ 0CB7 21 C9 0C                     ld      HL,SNDREGCFG    ; starting address of register settings
  34+ 0CBA 16 00                        ld      D,$00           ; first register
  35+ 0CBC 7A           RSTPSG:         ld      A,D             ; register value
  36+ 0CBD CD 03 0D                     call    SETSNDREG       ; select register
  37+ 0CC0 7E                           ld      A,(HL)          ; load value
  38+ 0CC1 CD 08 0D                     call    WRTSNDREG       ; write to register
  39+ 0CC4 14                           inc     D               ; next register
  40+ 0CC5 23                           inc     HL              ; next value
  41+ 0CC6 10 F4                        djnz    RSTPSG          ; repeat for each register
  42+ 0CC8 C9                           ret                     ; return to caller
  43+ 0CC9
  44+ 0CC9 00 00 00 00  SNDREGCFG:      defb $00,$00,$00,$00,$00,$00,$00,%10111111
  44+ 0CCD 00 00 00 BF
  45+ 0CD1 00 00 00 00                  defb $00,$00,$00,$00,$00,$00,$ff,$ff
  45+ 0CD5 00 00 FF FF
  46+ 0CD9                              ; reg. 7: set I/O ch.A to OUTPUT, I/O ch.B to INPUT; set noise to OFF; set audio to OFF
  47+ 0CD9
  48+ 0CD9
  49+ 0CD9              ; routine to play a welcome beep on channel C (tone 4010) and to shut it off
  50+ 0CD9 21 F3 0C     WLCMBEEP:       ld      HL,WLCBPDAT     ; data address
  51+ 0CDC C3 E2 0C                     jp      SENDSND
  52+ 0CDF 21 FB 0C     NOBEEP:         ld      HL,NOBPDAT      ; data address
  53+ 0CE2 C5           SENDSND:        push    BC
  54+ 0CE3 06 04                        ld      B,$04           ; 4 pairs
  55+ 0CE5 7E           RPTWLCMBP:      ld      A,(HL)          ; read register #
  56+ 0CE6 CD 03 0D                     call    SETSNDREG
  57+ 0CE9 23                           inc     HL              ; next cell
  58+ 0CEA 7E                           ld      A,(HL)          ; read value
  59+ 0CEB CD 08 0D                     call    WRTSNDREG
  60+ 0CEE 23                           inc     HL
  61+ 0CEF 10 F4                        djnz    RPTWLCMBP       ; repeat
  62+ 0CF1 C1                           pop     BC
  63+ 0CF2 C9                           ret                     ; return to caller
  64+ 0CF3
  65+ 0CF3 07 BB 04 56  WLCBPDAT:       defb    $07,%10111011,$04,$56,$05,$00,$0A,$0F
  65+ 0CF7 05 00 0A 0F
  66+ 0CFB 04 00 05 00  NOBPDAT:        defb    $04,$00,$05,$00,$0A,$00,$07,%10111111
  66+ 0CFF 0A 00 07 BF
  67+ 0D03
  68+ 0D03
  69+ 0D03              ; select register on PSG
  70+ 0D03 0E 40        SETSNDREG:      ld      C,PSG_REG       ; PSG register port
  71+ 0D05 ED 79                        out     (C),A           ; set register
  72+ 0D07 C9                           ret                     ; return to caller
  73+ 0D08
  74+ 0D08              ; send data to PSG
  75+ 0D08 0E 41        WRTSNDREG:      ld      C,PSG_DAT       ; PSG data port
  76+ 0D0A ED 79                        out     (C),A           ; send data
  77+ 0D0C C9                           ret                     ; return to caller
  78+ 0D0D
  79+ 0D0D              ; manage the sounds' duration: each time this subroutine is called, it
  80+ 0D0D              ; decrements the single sound durations (measured in ms) and eventually
  81+ 0D0D              ; shut off the audio channel whose counter has reached 0.
  82+ 0D0D              ; (this sub-routine is called by CH3 timer ISR)
  83+ 0D0D DD E5        MNGSNDS:        push    IX              ; store IX
  84+ 0D0F DD 21 39 82                  ld      IX,CHASNDDTN    ; starting address of tones duration
  85+ 0D13 06 03                        ld      B,$03           ; 3 channels to check
  86+ 0D15 26 01                        ld      H,$01           ; mixer channels: A=>bit 1, B=>bit 2, C=>bit 3
  87+ 0D17 DD 5E 00     CHKSNDCH:       ld      E,(IX+0)        ; load LSB into E
  88+ 0D1A DD 56 01                     ld      D,(IX+1)        ; load MSB into D
  89+ 0D1D 7B                           ld      A,E             ; load E into A
  90+ 0D1E B2                           or      D               ; check that DE=0
  91+ 0D1F 28 31                        jr      Z,CNTCHKSND     ; yes, jump over
  92+ 0D21 1B                           dec     DE              ; no, so decrement DE
  93+ 0D22 7B                           ld      A,E             ; reload E into A...
  94+ 0D23 DD 73 00                     ld      (IX+0),E        ; store new...
  95+ 0D26 DD 72 01                     ld      (IX+1),D        ; ...duration and...
  96+ 0D29 B2                           or      D               ; ...do another check to see if DE=0
  97+ 0D2A 20 26                        jr      NZ,CNTCHKSND    ; no, so jump over
  98+ 0D2C                                                      ; if yes, let's shut down the corresponding channel
  99+ 0D2C                                                      ; to shut down a tone we disable it into the mixer
 100+ 0D2C                                                      ; then set 0 into its tone registers
 101+ 0D2C 16 07                        ld      D,$07           ; mixer register
 102+ 0D2E 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 103+ 0D30 ED 51                        out     (C),D           ; set mixer register
 104+ 0D32 ED 78                        in      A,(C)           ; load current value
 105+ 0D34 B4                           or      H               ; set off the channel into the mixer (remember that 1=OFF)
 106+ 0D35 ED 51                        out     (C),D           ; select mixer register
 107+ 0D37 0E 41                        ld      C,PSG_DAT       ; PSG data port
 108+ 0D39 ED 79                        out     (C),A           ; send new value for the mixer
 109+ 0D3B 3E 03                        ld      A,$03           ; three channels
 110+ 0D3D 90                           sub     B               ; find current channel (0->A, 1->B, 2->C)
 111+ 0D3E 87                           add     A,A             ; and find first register (A=>0, B=>2, C=>4)
 112+ 0D3F 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 113+ 0D41 ED 79                        out     (C),A           ; select first tone register of channel
 114+ 0D43 2E 00                        ld      L,$00           ; value 0 into L
 115+ 0D45 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 116+ 0D47 ED 69                        out     (C),L           ; write 0 into register
 117+ 0D49 0E 40                        ld      C,PSG_REG       ; PSG register selector port
 118+ 0D4B 3C                           inc     A               ; next tone register
 119+ 0D4C ED 79                        out     (C),A           ; select second tone register of channel
 120+ 0D4E 0E 41                        ld      C,PSG_DAT       ; PSG data selector port
 121+ 0D50 ED 69                        out     (C),L           ; write 0 into register
 122+ 0D52 DD 23        CNTCHKSND:      inc     IX              ; set for...
 123+ 0D54 DD 23                        inc     IX              ; ...next channel...
 124+ 0D56 CB 24                        sla     H               ; shift left H 1 bit
 125+ 0D58 10 BD                        djnz    CHKSNDCH        ; repeat for 3 channels
 126+ 0D5A DD E1                        pop     IX              ; restore IX
 127+ 0D5C C9                           ret                     ; return to caller
 128+ 0D5D
 129+ 0D5D              ; read a specific row of the keyboard matrix, set by A
 130+ 0D5D              ; return read into A
 131+ 0D5D C5           READKBLN:       push    BC              ; store BC
 132+ 0D5E 06 0F                        ld      B,$0F           ; reg #15
 133+ 0D60 0E 40                        ld      C,PSG_REG       ; PSG register port
 134+ 0D62 ED 41                        out     (C),B           ; select reg #15
 135+ 0D64 0E 41                        ld      C,PSG_DAT       ; PSG data port
 136+ 0D66 ED 79                        out     (C),A           ; activate the row
 137+ 0D68 06 0E                        ld      B,$0E           ; register #14 (port B)
 138+ 0D6A 0E 40                        ld      C,PSG_REG       ; PSG register port
 139+ 0D6C ED 41                        out     (C),B           ; select reg. 14 (port B)
 140+ 0D6E ED 78                        in      A,(C)           ; read register #14
 141+ 0D70 C1                           pop     BC              ; retrieve BC
 142+ 0D71 C9                           ret
 143+ 0D72
 144+ 0D72              ; read the keyboard matrix to look for a key pressure
 145+ 0D72 0E 40        KEYBOARD:       ld      C,PSG_REG       ; PSG register port
 146+ 0D74 06 07                        ld      B,$07           ; set register #7...
 147+ 0D76 ED 41                        out     (C),B           ; ...to work with
 148+ 0D78 ED 78                        in      A,(C)           ; read register #7
 149+ 0D7A CB FF                        set     7,A             ; port A set to output
 150+ 0D7C CB B7                        res     6,A             ; port B set to input
 151+ 0D7E ED 41                        out     (C),B           ; set register #7
 152+ 0D80 0E 41                        ld      C,PSG_DAT       ; PSG data port
 153+ 0D82 ED 79                        out     (C),A           ; set I/O ports w/o altering the rest of the mixer
 154+ 0D84                              ; check special keys (SHIFT/ALT/CTRL)
 155+ 0D84 3E FD                        ld      A,%11111101     ; select SHIFT row
 156+ 0D86 CD 5D 0D                     call    READKBLN        ; read row
 157+ 0D89 CB 5F                        bit     3,A             ; test if SHIFT key is pressed (4th bit is reset)
 158+ 0D8B 20 05                        jr      NZ,CHECKALT     ; no, so go on
 159+ 0D8D 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 160+ 0D90 36 01                        ld      (HL),%00000001  ; set SHIFT flag, reset CTRL & ALT flags (currently multiply control keys are NOT supported)
 161+ 0D92 3E FE        CHECKALT:       ld      A,%11111110     ; select ALT row
 162+ 0D94 CD 5D 0D                     call    READKBLN        ; read ALT row
 163+ 0D97 CB 6F                        bit     5,A             ; test if ALT key is pressed (5th bit is reset)
 164+ 0D99 20 05                        jr      NZ,CHECKCTRL    ; no, so go on
 165+ 0D9B 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 166+ 0D9E 36 04                        ld      (HL),%00000100  ; set ALT flag, reset SHIFT & CTRL flag (currently multiply control keys are NOT supported)
 167+ 0DA0 3E FE        CHECKCTRL:      ld      A,%11111110     ; select CTRL row
 168+ 0DA2 CD 5D 0D                     call    READKBLN        ; read CTRL row
 169+ 0DA5 CB 57                        bit     2,A             ; test if CTRL key is pressed (3rd bit is reset)
 170+ 0DA7 20 05                        jr      NZ,CHECKKBD     ; no, so make a normal reading
 171+ 0DA9 21 46 82                     ld      HL,CONTROLKEYS  ; control key flags
 172+ 0DAC 36 02                        ld      (HL),%00000010  ; set CTRL flag, reset SHIFT & ALT flags (currently multiply control keys are NOT supported)
 173+ 0DAE 06 08        CHECKKBD:       ld      B,$08           ; 8 lines
 174+ 0DB0 3E 7F                        ld      A,%01111111     ; start from the last line of the matrix
 175+ 0DB2 16 0F        RPTKBDRD:       ld      D,$0F           ; register #15 (port B)
 176+ 0DB4 0E 40                        ld      C,PSG_REG       ; PSG register port
 177+ 0DB6 ED 51                        out     (C),D           ; select reg. #15
 178+ 0DB8 0E 41                        ld      C,PSG_DAT       ; PSG data port
 179+ 0DBA ED 79                        out     (C),A           ; activate 1 line (active line is grounded, i.e. with a LOW signal)
 180+ 0DBC 5F                           ld      E,A             ; save current line into E
 181+ 0DBD 16 0E                        ld      D,$0E           ; register #14 (port A)
 182+ 0DBF 0E 40                        ld      C,PSG_REG       ; PSG register port
 183+ 0DC1 ED 51                        out     (C),D           ; select reg. 14 (port A)
 184+ 0DC3 00                           nop
 185+ 0DC4 ED 78                        in      A,(C)           ; read register #14
 186+ 0DC6 FE FF                        cp      $FF             ; is there any line set to 0?
 187+ 0DC8 28 2E                        jr      Z,NOKEYPRSD     ; no, go to the next row
 188+ 0DCA                              ; check control keys
 189+ 0DCA 32 40 82                     ld      (KBTMP),A       ; yes, check if a control key was pressed. First, store current row
 190+ 0DCD 78                           ld      A,B             ; copy current row (B) into A
 191+ 0DCE FE 02                        cp      $02             ; is it the row of the SHIFT?
 192+ 0DD0 20 0F                        jr      NZ,TESTALT      ; no, continue checking the other control keys
 193+ 0DD2 3A 40 82                     ld      A,(KBTMP)       ; yes, retrieve current row data
 194+ 0DD5 CB 5F                        bit     3,A             ; check SHIFT bit line
 195+ 0DD7 20 31                        jr      NZ,FINDKEY      ; no SHIFT, continue checking
 196+ 0DD9 CB DF                        set     3,A             ; yes, it's the SHIFT. So remove SHIFT bit
 197+ 0DDB FE FF                        cp      $FF             ; after deleting the SHIFT bit, is there any other bit selected?
 198+ 0DDD 20 2B                        jr      NZ,FINDKEY      ; yes, go to check which one
 199+ 0DDF 18 17                        jr      NOKEYPRSD       ; no, go to next row
 200+ 0DE1 FE 01        TESTALT:        cp      $01             ; is it the line of ALT & CTRL?
 201+ 0DE3 3A 40 82                     ld      A,(KBTMP)       ; retrieve current row data
 202+ 0DE6 20 22                        jr      NZ,FINDKEY      ; no, continue
 203+ 0DE8 CB 6F                        bit     5,A             ; yes, check ALT bit line
 204+ 0DEA 20 02                        jr      NZ,TESTCTRL     ; no ALT, continue checking
 205+ 0DEC CB EF                        set     5,A             ; yes, it's the ALT. So remove ALT bit
 206+ 0DEE CB 57        TESTCTRL:       bit     2,A             ; check CTRL bit line
 207+ 0DF0 20 02                        jr      NZ,ENDCTRLCK    ; no CTRL, continue checking
 208+ 0DF2 CB D7                        set     2,A             ; delete CTRL bit flag
 209+ 0DF4 FE FF        ENDCTRLCK:      cp      $FF             ; after deleting the ALT & CTRL bits, is there any other bit selected?
 210+ 0DF6 20 12                        jr      NZ,FINDKEY      ; yes, go to check which one
 211+ 0DF8 7B           NOKEYPRSD:      ld      A,E             ; no key pressed, load current output port
 212+ 0DF9 0F                           rrca                    ; rotate right by 1
 213+ 0DFA 10 B6                        djnz    RPTKBDRD        ; repeat for 8 lines
 214+ 0DFC AF                           xor     A               ; if exit from here, no key has been pressed...
 215+ 0DFD 32 42 82                     ld      (LASTKEYPRSD),A ; ...so reset the last key cell...
 216+ 0E00 32 46 82                     ld      (CONTROLKEYS),A ; ...reset contro key flags...
 217+ 0E03 32 3F 82                     ld      (KBDNPT),A      ; ...no input from keyboard...
 218+ 0E06 32 43 82                     ld      (STATUSKEY),A   ; ...no auto-repeat...
 219+ 0E09 C9                           ret                     ; ...and leave
 220+ 0E0A 1E FF        FINDKEY:        ld      E,$FF           ; counter
 221+ 0E0C 1C           CHKLN:          inc     E               ; E goes from 0 to 7
 222+ 0E0D CB 3F                        srl     A               ; is the first bit reset? (we're looking for a "0", meaning grounded line)
 223+ 0E0F 38 FB                        jr      C,CHKLN         ; no, check next bit
 224+ 0E11 3A 46 82                     ld      A,(CONTROLKEYS) ; load control key flags
 225+ 0E14 21 2D 0F                     ld      HL,KBMAP        ; normal keymap
 226+ 0E17 FE 01                        cp      $01             ; SHIFT flag?
 227+ 0E19 20 05                        jr      NZ,CHKCTRL      ; no, jump over
 228+ 0E1B 21 6D 0F                     ld      HL,KBMAP_SFT    ; SHIFT keymap
 229+ 0E1E 18 10                        jr      LOADMAP         ; and load it
 230+ 0E20 FE 02        CHKCTRL:        cp      $02             ; CTRL flag?
 231+ 0E22 20 05                        jr      NZ,CHKALT       ; no, jump over
 232+ 0E24 21 ED 0F                     ld      HL,KBMAP_CTRL   ; CTRL map
 233+ 0E27 18 07                        jr      LOADMAP         ; and load it
 234+ 0E29 FE 04        CHKALT:         cp      $04             ; ALT flag?
 235+ 0E2B 20 03                        jr      NZ,LOADMAP      ; no, check over
 236+ 0E2D 21 AD 0F                     ld      HL,KBMAP_ALT    ; ALT map
 237+ 0E30 05           LOADMAP:        dec     B               ; decrement row # (rows go from 0 to 7)
 238+ 0E31 48                           ld      C,B             ; move B into C and...
 239+ 0E32 CB 21                        sla     C               ; ...multiply it...
 240+ 0E34 CB 21                        sla     C               ; ...by 8 to find...
 241+ 0E36 CB 21                        sla     C               ; ...the current row into the matrix
 242+ 0E38 06 00                        ld      B,$00           ; reset B
 243+ 0E3A 09                           add     HL,BC           ; find the address of the current row
 244+ 0E3B 50                           ld      D,B             ; reset D
 245+ 0E3C 19                           add     HL,DE           ; find the current column - now (HL) stores the pressed key
 246+ 0E3D 3A 42 82                     ld      A,(LASTKEYPRSD) ; load the last key pressed
 247+ 0E40 BE                           cp      (HL)            ; is it the same key?
 248+ 0E41 20 41                        jr      NZ,NEWKEY       ; no, it's a new key
 249+ 0E43 44 4D                        ld      BC,HL           ; store address of current keycode
 250+ 0E45 2A E5 81                     ld      HL,(TMRCNT)     ; load current system timer
 251+ 0E48 ED 5B 44 82                  ld      DE,(KEYTMR)     ; load auto-repeat timer
 252+ 0E4C 3A 43 82                     ld      A,(STATUSKEY)   ; yes, load current status of auto-repeat
 253+ 0E4F FE 01                        cp      $01             ; is it initial pressure?
 254+ 0E51 20 1F                        jr      NZ,CHKAUTO      ; no, jump over
 255+ 0E53 AF                           xor     A               ; clear Carry
 256+ 0E54 ED 52                        sbc     HL,DE           ; startint time - actual time
 257+ 0E56 16 00                        ld      D,$00           ; 64 ths/s > 640 ms
 258+ 0E58 3A B3 80                     ld      A,(KEYDEL)
 259+ 0E5B 5F                           ld      E,A
 260+ 0E5C CD 05 4D                     call    CMP16           ; time elapsed is >= $40?
 261+ 0E5F DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 262+ 0E62 3E 02        SETNEWAUTO:     ld      A,$02           ; yes set status to...
 263+ 0E64 32 43 82                     ld      (STATUSKEY),A   ; ...auto-repeat
 264+ 0E67 2A E5 81                     ld      HL,(TMRCNT)     ; load system timer
 265+ 0E6A 22 44 82                     ld      (KEYTMR),HL     ; store starting time
 266+ 0E6D 60 69                        ld      HL,BC           ; retrieve address of current keycode
 267+ 0E6F C3 91 0E                     jp      SENDKEY         ; send key
 268+ 0E72 AF           CHKAUTO:        xor     A               ; clear Carry
 269+ 0E73 ED 52                        sbc     HL,DE           ; computer interval between initial pressure of key and current time
 270+ 0E75 16 00                        ld      D,$00
 271+ 0E77 3A B4 80                     ld      A,(AUTOKE)
 272+ 0E7A 5F                           ld      E,A             ; auto-repeat delay into DE
 273+ 0E7B CD 05 4D                     call    CMP16           ; check if interval is greater than delay
 274+ 0E7E DA D4 0E                     jp      C,LVKBRDCHK2    ; no, so leave
 275+ 0E81 C3 62 0E                     jp      SETNEWAUTO      ; set new loop and send key
 276+ 0E84 AF           NEWKEY:         xor     A               ; set initial state...
 277+ 0E85 3C                           inc     A               ; ...for auto-repeat...
 278+ 0E86 32 43 82                     ld      (STATUSKEY),A   ; ...1=pressure init
 279+ 0E89 ED 4B E5 81                  ld      BC,(TMRCNT)     ; load current system timer
 280+ 0E8D ED 43 44 82                  ld      (KEYTMR),BC     ; set starting time
 281+ 0E91 7E           SENDKEY:        ld      A,(HL)          ; then, load key...
 282+ 0E92 32 42 82                     ld      (LASTKEYPRSD),A ; ...store it...
 283+ 0E95 32 41 82                     ld      (TMPKEYBFR),A   ; ...insert it into the INKEY buffer...
 284+ 0E98 32 02 82                     ld      (CHR4VID),A     ; ...and store char for video
 285+ 0E9B FE 03                        cp      CTRLC           ; is it RUN/STOP?
 286+ 0E9D 20 05                        jr      NZ,CNTKBCK      ; no, jump over
 287+ 0E9F CD FD 01                     call    CHARINTOBFR     ; yes, send directly to buffer and...
 288+ 0EA2 18 30                        jr      LVKBRDCHK2      ; ...leave
 289+ 0EA4 01 00 08     CNTKBCK:        ld      BC,$0800        ; 8 FN keys (B), FN key number (C)
 290+ 0EA7 21 25 0F                     ld      HL,FNKEYSORD    ; FN keys codes
 291+ 0EAA BE           CHKFNK:         cp      (HL)            ; is it an FN key?
 292+ 0EAB CA D9 0E                     jp      Z,PRNTFNKEY     ; yes, jump over
 293+ 0EAE 0C                           inc     C               ; next FN key
 294+ 0EAF 23                           inc     HL              ; next FN key code
 295+ 0EB0 10 F8                        djnz    CHKFNK          ; continue for 8 FN keys
 296+ 0EB2 3E 01        SNDKEYTOBFR:    ld      A,$01           ; normal key - set input flag
 297+ 0EB4 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 298+ 0EB7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 299+ 0EBA B7                           or      A               ; is the print-on-video disabled?
 300+ 0EBB CA C4 0E                     jp      Z,PUTCHRBUF     ; yes, so send char to input buffer
 301+ 0EBE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 302+ 0EC1 B7                           or      A               ; is it 0 (cursor OFF)?
 303+ 0EC2 20 0D                        jr      NZ,PNT2VD       ; no, print on screen
 304+ 0EC4 AF           PUTCHRBUF:      xor     A
 305+ 0EC5 32 3F 82                     ld      (KBDNPT),A      ; if send to input buffer, set RETURN as from BASIC
 306+ 0EC8 3A 41 82                     ld      A,(TMPKEYBFR)   ; retrieve char
 307+ 0ECB CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 308+ 0ECE C3 D4 0E                     jp      LVKBRDCHK2      ; ...and leave
 309+ 0ED1 CD 78 07     PNT2VD:         call    CHAR2VID        ; send char to video
 310+ 0ED4 AF           LVKBRDCHK2:     xor     A
 311+ 0ED5 32 46 82                     ld      (CONTROLKEYS),A ; reset control key flags
 312+ 0ED8 C9           LVKBRDCHK:      ret                     ; return to caller: the current key code is into TMPKEYBFR
 313+ 0ED9                              ; manage FN keys
 314+ 0ED9 57           PRNTFNKEY:      ld      D,A             ; copy A into D
 315+ 0EDA 2A AF 80                     ld      HL,(LINEAT)     ; Get current line number
 316+ 0EDD 23                           inc     HL              ; -1 means direct statement
 317+ 0EDE 7C                           ld      A,H
 318+ 0EDF B5                           or      L
 319+ 0EE0 7A                           ld      A,D             ; retrieve char
 320+ 0EE1 20 CF                        jr      NZ,SNDKEYTOBFR  ; indirect mode - just send FN key code to buffer
 321+ 0EE3 79                           ld      A,C             ; direct mode, so print text - first, get FN key number
 322+ 0EE4 87                           add     A,A
 323+ 0EE5 87                           add     A,A
 324+ 0EE6 87                           add     A,A
 325+ 0EE7 87                           add     A,A             ; FN key number * 16
 326+ 0EE8 4F                           ld      C,A             ; move it into C
 327+ 0EE9 06 00                        ld      B,$00           ; reset B, to get offset
 328+ 0EEB 21 B5 80                     ld      HL,FNKEYS       ; load address of FN keys texts
 329+ 0EEE 09                           add     HL,BC           ; get correct text address
 330+ 0EEF 06 10                        ld      B,$10           ; 16 chars
 331+ 0EF1 7E           LDFNKEYCHR:     ld      A,(HL)          ; load char
 332+ 0EF2 A7                           and     A               ; null char?
 333+ 0EF3 CA D4 0E                     jp      Z,LVKBRDCHK2    ; yes, so leave
 334+ 0EF6 57                           ld      D,A             ; pass char into D
 335+ 0EF7 3A 01 82                     ld      A,(PRNTVIDEO)   ; load status of print-on-video
 336+ 0EFA B7                           or      A               ; is the print-on-video disabled?
 337+ 0EFB CA 0B 0F                     jp      Z,PUTCHRBUF1    ; yes, so send char to input buffer
 338+ 0EFE 3A FF 81                     ld      A,(CRSR_STATE)  ; check cursor state
 339+ 0F01 B7                           or      A               ; is it 0 (cursor OFF)?
 340+ 0F02 C4 18 0F                     call    NZ,PRNTFNK      ; no, print on screen
 341+ 0F05 23           CNTFNK:         inc     HL              ; next char
 342+ 0F06 10 E9                        djnz    LDFNKEYCHR      ; repeat for max. 16 chars
 343+ 0F08 C3 D4 0E                     jp      LVKBRDCHK2      ; leave
 344+ 0F0B AF           PUTCHRBUF1:     xor     A               ; if send to input buffer,...
 345+ 0F0C 32 3F 82                     ld      (KBDNPT),A      ; ...set input as from BASIC
 346+ 0F0F 7A                           ld      A,D             ; retrieve char
 347+ 0F10 E5                           push    HL              ; store HL
 348+ 0F11 CD FD 01                     call    CHARINTOBFR     ; cursor off, so send char to buffer...
 349+ 0F14 E1                           pop     HL              ; retrieve HL
 350+ 0F15 C3 05 0F                     jp      CNTFNK          ; repeat
 351+ 0F18 7A           PRNTFNK:        ld      A,D             ; recover char
 352+ 0F19 32 02 82                     ld      (CHR4VID),A     ; store char for printing
 353+ 0F1C 3E 01                        ld      A,$01           ; normal key - set input flag
 354+ 0F1E 32 3F 82                     ld      (KBDNPT),A      ; to keyboard
 355+ 0F21 CD 78 07                     call    CHAR2VID        ; print on screen
 356+ 0F24 C9                           ret                     ; return to caller
 357+ 0F25
 358+ 0F25
 359+ 0F25              ;-----------------------------------------------------------------------
 360+ 0F25 01 02 04 05  FNKEYSORD:      defb 1,2,4,5,6,22,23,24                 ; order of FN Keys
 360+ 0F29 06 16 17 18
 361+ 0F2D              ;-----------------------------------------------------------------------
 362+ 0F2D              ; key codes
 363+ 0F2D 31 19 0E 03  KBMAP:          defb '1',25,14,3,' ',16,'q','2'         ; 25=HOME  14=CTRL  3=RUN/STOP 16=C=
 363+ 0F31 20 10 71 32
 364+ 0F35 33 77 61 14                  defb '3','w','a',20,'z','s','e','4'     ; 20=SHIFT
 364+ 0F39 7A 73 65 34
 365+ 0F3D 35 72 64 78                  defb '5','r','d','x','c','f','t','6'
 365+ 0F41 63 66 74 36
 366+ 0F45 37 79 67 76                  defb '7','y','g','v','b','h','u','8'
 366+ 0F49 62 68 75 38
 367+ 0F4D 39 69 6A 6E                  defb '9','i','j','n','m','k','o','0'
 367+ 0F51 6D 6B 6F 30
 368+ 0F55 1F 70 6C 2C                  defb 31,'p','l',',','.',':','-',30      ; 31=CURSOR DOWN  30=CURSOR UP
 368+ 0F59 2E 3A 2D 1E
 369+ 0F5D 1C 2A 3B 2F                  defb 28,'*',';','/',27,'=','+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 369+ 0F61 1B 3D 2B 1D
 370+ 0F65 08 0D FC 40                  defb 8,13,252,'@',1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 370+ 0F69 01 02 04 18
 371+ 0F6D
 372+ 0F6D              ; shifted codes - not all the keys have the shifted version
 373+ 0F6D 21 0C 0E 03  KBMAP_SFT:      defb '!',12,14,3,' ',16,'Q',34          ; 12=CLEAR  14=CTRL  3=RUN/STOP 16=C=   34="
 373+ 0F71 20 10 51 22
 374+ 0F75 23 57 41 14                  defb '#','W','A',20,'Z','S','E','$'     ; 20=SHIFT
 374+ 0F79 5A 53 45 24
 375+ 0F7D 25 52 44 58                  defb '%','R','D','X','C','F','T','&'
 375+ 0F81 43 46 54 26
 376+ 0F85 27 59 47 56                  defb 39,'Y','G','V','B','H','U','('     ; 39='
 376+ 0F89 42 48 55 28
 377+ 0F8D 29 49 4A 4E                  defb ')','I','J','N','M','K','O',94     ; 94=^
 377+ 0F91 4D 4B 4F 5E
 378+ 0F95 1F 50 4C 3C                  defb 31,'P','L','<','>','[','_',30      ; 31=CURSOR DOWN  30=CURSOR UP
 378+ 0F99 3E 5B 5F 1E
 379+ 0F9D 1C 2A 5D 3F                  defb 28,'*',']','?',27,198,'+',29       ; 28=CURSOR LEFT  27=ESCAPE  29=CURSOR RIGHT
 379+ 0FA1 1B C6 2B 1D
 380+ 0FA5 1A 0D D3 40                  defb 26,13,211,'@',5,6,22,23            ; 26=INSERT, 211=â¬  5=F4  6=F5  22=F6  23=F7
 380+ 0FA9 05 06 16 17
 381+ 0FAD
 382+ 0FAD              ; ALT (C=) codes - not all the keys have the alt-ed version
 383+ 0FAD 31 0C 0E 03  KBMAP_ALT:      defb '1',12,14,3,' ',16,222,196         ; 12=CLEAR  14=CTRL  3=RUN/STOP  16=C=  34="
 383+ 0FB1 20 10 DE C4
 384+ 0FB5 33 DD 85 14                  defb '3',221,133,20,131,130,165,'4'     ; 20=SHIFT
 384+ 0FB9 83 82 A5 34
 385+ 0FBD 35 A2 A6 84                  defb '5',162,166,132,157,163,168,'6'
 385+ 0FC1 9D A3 A8 36
 386+ 0FC5 37 AB A9 A1                  defb '7',171,169,161,158,172,213,'8'    ;
 386+ 0FC9 9E AC D5 38
 387+ 0FCD 39 D6 D8 9F                  defb '9',214,216,159,160,215,135,195    ;
 387+ 0FD1 A0 D7 87 C3
 388+ 0FD5 1F 88 8A C1                  defb 31,136,138,193,192,123,144,30      ; 31=CURSOR DOWN  123={  30=CURSOR UP
 388+ 0FD9 C0 7B 90 1E
 389+ 0FDD 1C 8F 7D FE                  defb 28,143,125,254,27,209,148,29       ; 28=CURSOR LEFT  125=}  27=ESCAPE  29=CURSOR RIGHT
 389+ 0FE1 1B D1 94 1D
 390+ 0FE5 08 0D E0 89                  defb 8,13,224,137,5,6,22,23             ; 8=DEL(backspace)  13=RETURN  252=Â£  5=F4  6=F5  22=F6  23=F7
 390+ 0FE9 05 06 16 17
 391+ 0FED
 392+ 0FED              ; CTRL codes - not all the keys have the control-ed version
 393+ 0FED 31 19 0E 03  KBMAP_CTRL:     defb '1',25,14,3,' ',16,154,'2'         ; 25=HOME  14=CTRL  3=RUN/STOP  16=C=
 393+ 0FF1 20 10 9A 32
 394+ 0FF5 33 9C 95 14                  defb '3',156,149,20,152,150,153,'4'     ; 20=SHIFT
 394+ 0FF9 98 96 99 34
 395+ 0FFD 35 9B B0 97                  defb '5',155,176,151,177,175,165,'6'
 395+ 1001 B1 AF A5 36
 396+ 1005 37 A6 A8 B2                  defb '7',166,168,178,179,169,167,'8'
 396+ 1009 B3 A9 A7 38
 397+ 100D 39 B8 AA AC                  defb '9',184,170,172,171,181,164,'0'
 397+ 1011 AB B5 A4 30
 398+ 1015 1F A3 AD 2C                  defb 31,163,173,',','.',':',186,30      ; 31=CURSOR DOWN  30=CURSOR UP
 398+ 1019 2E 3A BA 1E
 399+ 101D 1C E1 3B 2F                  defb 28,225,';','/',27,212,185,29       ; 28=CURSOR LEFT  27=ESCAPE  212=Ï  29=CURSOR RIGHT
 399+ 1021 1B D4 B9 1D
 400+ 1025 08 0D BD A2                  defb 8,13,189,162,1,2,4,24              ; 8=DEL(backspace)  13=RETURN  252=Â£  1=F1  2=F2  4=F3  24=HELP
 400+ 1029 01 02 04 18
# file closed: ../include/psg/psg-1.1.asm
  80  102D
  81  102D              ; include the latest versions of the CF & DOS modules
  82  102D                  INCLUDE "../include/dos/bios-1.01.asm"
# file opened: ../include/dos/bios-1.01.asm
   1+ 102D              ; ------------------------------------------------------------------------------
   2+ 102D              ; LM80C 64K - BIOS ROUTINES - R1.0
   3+ 102D              ; ------------------------------------------------------------------------------
   4+ 102D              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 102D              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 102D              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 102D              ; kind of warranty: you can use them at your own risk.
   8+ 102D              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 102D              ; maintain the copyright notices, include this advice and the note to the
  10+ 102D              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 102D              ; redistribuite them.
  12+ 102D              ; https://www.leonardomiliani.com
  13+ 102D              ;
  14+ 102D              ; Please support me by visiting the following links:
  15+ 102D              ; Main project page: https://www.leonardomiliani.com
  16+ 102D              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 102D              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 102D              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 102D              ; ------------------------------------------------------------------------------
  20+ 102D              ;
  21+ 102D              ; ------------------------------------------------------------------------------
  22+ 102D              ; Code Revision:
  23+ 102D              ; R1.0  - 20210307 - first release
  24+ 102D              ; R1.01 - 2021xxxx -
  25+ 102D              ;
  26+ 102D              ;------------------------------------------------------------------------------
  27+ 102D
  28+ 102D              ; equates for CF at port $50
  29+ 102D              CF_DATA:        equ %01010000   ; ($50) Data register (R/W)
  30+ 102D              CF_ERR:         equ %01010001   ; ($51) Error (R)
  31+ 102D              CF_FTR:         equ %01010001   ; ($51) Features (W)
  32+ 102D              CF_SECCNT:      equ %01010010   ; ($52) Sector count register (R/W)
  33+ 102D              CF_LBA0:        equ %01010011   ; ($53) LBA register 0 (bits 0-7) (R/W)
  34+ 102D              CF_LBA1:        equ %01010100   ; ($54) LBA register 1 (bits 8-15) (R/W)
  35+ 102D              CF_LBA2:        equ %01010101   ; ($55) LBA register 2 (bits 16-23) (R/W)
  36+ 102D              CF_LBA3:        equ %01010110   ; ($56) LBA register 3 (bits 24-27) (R/W) - bits 28-31 must be set to 111 in LBA mode
  37+ 102D              CF_STAT:        equ %01010111   ; ($57) Status (R)
  38+ 102D              CF_CMD:         equ %01010111   ; ($57) Command register (W)
  39+ 102D
  40+ 102D
  41+ 102D              ;------------------------------------------------------------------------------
  42+ 102D              ; R O U T I N E S
  43+ 102D              ;------------------------------------------------------------------------------
  44+ 102D
  45+ 102D              ; initilialize CF to work with, wakeing it up from standby and setting it to work in 8-bit mode
  46+ 102D CD 43 10     CF_INIT:    call    CF_NOP          ; execute a NOP to wake up the CF
  47+ 1030 CD 91 10                 call    CR_DEV_RDY      ; wait for CF available and ready
  48+ 1033 D8                       ret     C               ; no card or I/O error, leave
  49+ 1034 3E 01                    ld      A,$01           ; 8-bit mode
  50+ 1036 D3 51                    out     (CF_FTR),A      ; set mode
  51+ 1038 CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  52+ 103B 3E EF                    ld      A,$EF           ; command to set mode
  53+ 103D D3 57                    out     (CF_CMD),A      ; execute command
  54+ 103F CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
  55+ 1042 C9                       ret                     ; return to caller
  56+ 1043
  57+ 1043
  58+ 1043              ; a NOP command, just used to wake up the CF card
  59+ 1043 3E 69        CF_NOP:     ld      A,$69           ; NOP command
  60+ 1045 D3 51                    out     (CF_FTR),A      ; send it
  61+ 1047 3E EF                    ld      A,$EF           ; set mode command
  62+ 1049 D3 57                    out     (CF_CMD),A      ; execute NOP
  63+ 104B C9                       ret                     ; return to caller
  64+ 104C
  65+ 104C
  66+ 104C              ; wait until BUSY bit is 0 (means CF has executed the requested job)
  67+ 104C DB 57        CF_BUSY:    in      A,(CF_STAT)     ; read status register
  68+ 104E 07                       rlca                    ; copy bit #7 into the Carry
  69+ 104F DA 4C 10                 jp      C,CF_BUSY       ; loop while bit #7 is 1
  70+ 1052 C9                       ret                     ; bit #7 cleared - return to caller
  71+ 1053
  72+ 1053
  73+ 1053              ; check that CF is ready to get commands
  74+ 1053 DB 57        CF_CMDRDY:  in      A,(CF_STAT)     ; read status register
  75+ 1055 CB 47                    bit     0,A             ; any error?
  76+ 1057 20 07                    jr      NZ,RETERR       ; yes, return error
  77+ 1059 E6 C0                    and     %11000000       ; check only bits #6 & #7
  78+ 105B EE 40                    xor     %01000000       ; bit #7 (BUSY) must be 0 and bit #6 (DRVRDY) must be 1
  79+ 105D 20 F4                    jr      NZ,CF_CMDRDY    ; wait
  80+ 105F C9                       ret                     ; return to caller
  81+ 1060 37           RETERR:     scf                     ; set carry flag
  82+ 1061 C9                       ret                     ; return
  83+ 1062
  84+ 1062
  85+ 1062              ; wait until data is ready to be read
  86+ 1062 DB 57        CF_DAT_RDY: in      A,(CF_STAT)     ; read status register
  87+ 1064 CB 47                    bit     0,A             ; any error?
  88+ 1066 20 F8                    jr      NZ,RETERR       ; yes, return error
  89+ 1068 E6 88                    and     %10001000       ; check only bits #7 & #3
  90+ 106A EE 08                    xor     %00001000       ; bit #7 (BUSY) must be 0 and bit #3 (DRQ) must be 1
  91+ 106C 20 F4                    jr      NZ,CF_DAT_RDY   ; wait until data is ready
  92+ 106E C9                       ret                     ; return to caller
  93+ 106F
  94+ 106F
  95+ 106F              ; set sector to read from/write to - sector number is into DEBC (C=LSB, D=MSB)
  96+ 106F CD 53 10     CF_SETSTR:  call    CF_CMDRDY       ; Make sure drive is ready for command
  97+ 1072 3E 01                    ld      A,$01           ; 1 sector at a time
  98+ 1074 D3 52                    out     (CF_SECCNT),A   ; set number of sectors
  99+ 1076 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 100+ 1079 79                       ld      A,C             ; load LBA0 byte
 101+ 107A D3 53                    out     (CF_LBA0),A     ; send it
 102+ 107C CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 103+ 107F 78                       ld      A,B             ; load LBA1 byte
 104+ 1080 D3 54                    out     (CF_LBA1),A     ; send it
 105+ 1082 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 106+ 1085 7B                       ld      A,E             ; load LBA2 byte
 107+ 1086 D3 55                    out     (CF_LBA2),A     ; send it
 108+ 1088 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 109+ 108B 3E E0                    ld      A,$E0           ; load LBA3 byte+master+LBA addressing
 110+ 108D B2                       or      D               ; add LBA sector
 111+ 108E D3 56                    out     (CF_LBA3),A     ; send it
 112+ 1090 C9                       ret                     ; return to caller
 113+ 1091
 114+ 1091
 115+ 1091              ; check if device is available & ready - try a bit of times, then exit with
 116+ 1091              ; error if no response, otherwise wait until device is ready
 117+ 1091              ; return Carry = 0 if device is available and ready, Carry = 1 if errors
 118+ 1091 C5           CR_DEV_RDY: push    BC              ; store HL
 119+ 1092 06 00                    ld      B,$00           ; 256 tries
 120+ 1094 0E 57                    ld      C,CF_STAT       ; address of status register
 121+ 1096 ED 78        CR_DV_RD_1: in      A,(C)           ; load status register (curiously, with no CF attached, in(CF_STAT) returns %01111000)
 122+ 1098 FE 40                    cp      %01000000       ; busy=0, rdy=1
 123+ 109A 28 07                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 124+ 109C FE 50                    cp      %01010000       ; busy=0, rdy=1, dsc=1
 125+ 109E 28 03                    jr      Z,CR_DV_RD_E    ; got a response, so leave
 126+ 10A0 10 F4                    djnz    CR_DV_RD_1      ; repeat until timeout (Carry=1 while HL<DE)
 127+ 10A2 37           CR_DV_ERR:  scf                     ; exit with Carry = 1 (device NOT ready)
 128+ 10A3 C1           CR_DV_RD_E: pop     BC              ; retrieve HL
 129+ 10A4 C9                       ret                     ; return to caller
 130+ 10A5
 131+ 10A5
 132+ 10A5              ; put the CF into stand-by mode
 133+ 10A5 3E E0        CF_STANDBY: ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
 134+ 10A7 D3 56                    out 	(CF_LBA3),A     ; send configuration
 135+ 10A9 3E 92                    ld      A,$92           ; standby mode
 136+ 10AB D3 57                    out     (CF_CMD),A      ; send command
 137+ 10AD CD 4C 10                 call    CF_BUSY         ; wait for CF being ready
 138+ 10B0 C9                       ret                     ; return to caller
 139+ 10B1
 140+ 10B1
 141+ 10B1              ;***************************************************************************
 142+ 10B1              ; CF_RD_SEC
 143+ 10B1              ; Function: load a sector (512 bytes) into RAM buffer.
 144+ 10B1              ;***************************************************************************
 145+ 10B1 CD 53 10     CF_RD_SEC:  call    CF_CMDRDY       ; Make sure drive is ready for command
 146+ 10B4 D8                       ret     C               ; return if error
 147+ 10B5 3E 20                    ld      A,$20           ; Prepare read command
 148+ 10B7 D3 57                    out     (CF_CMD),A      ; Send read command
 149+ 10B9 CD 62 10                 call    CF_DAT_RDY      ; Wait until data is ready to be read
 150+ 10BC D8                       ret     C               ; return if error
 151+ 10BD DB 57                    in      A,(CF_STAT)     ; Read status
 152+ 10BF E6 01                    and     %00000001       ; mask off error bit
 153+ 10C1 C2 B1 10                 jp      NZ,CF_RD_SEC    ; Try again if error
 154+ 10C4              ; read CF buffer after it's been filled up by a previous command
 155+ 10C4              ; and store data into the I/O buffer
 156+ 10C4 C5           CF_RD_CMD:  push    BC              ; store BC
 157+ 10C5 E5                       push    HL              ; store HL
 158+ 10C6 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 159+ 10C9 06 00                    ld      B,$00           ; read 256 words (512 bytes per sector)
 160+ 10CB CD 62 10                 call    CF_DAT_RDY	    ; wait for data from CF to be ready
 161+ 10CE 38 0A                    jr      C,CF_RD_EXIT
 162+ 10D0 DB 50        CF_RD_SECT: in      A,(CF_DATA)     ; get byte of data
 163+ 10D2 77                       ld      (HL),A          ; store into buffer
 164+ 10D3 23                       inc     HL              ; next location
 165+ 10D4 DB 50                    in      A,(CF_DATA)     ; get another byte
 166+ 10D6 77                       ld      (HL),A          ; store it
 167+ 10D7 23                       inc     HL              ; next location
 168+ 10D8 10 F6                    djnz    CF_RD_SECT      ; repeat
 169+ 10DA E1           CF_RD_EXIT: pop     HL              ; retrieve HL
 170+ 10DB C1                       pop     BC              ; retrieve BC
 171+ 10DC C9                       ret                     ; return to caller
 172+ 10DD
 173+ 10DD
 174+ 10DD              ;***************************************************************************
 175+ 10DD              ; CF_WR_SEC
 176+ 10DD              ; Function: write a sector to Compact Flash - sector address is into BCDE - source address is into HL
 177+ 10DD              ;***************************************************************************
 178+ 10DD C5           CF_WR_SEC:  push    BC              ; store BC
 179+ 10DE D5                       push    DE              ; store DE
 180+ 10DF E5                       push    HL              ; store HL
 181+ 10E0 CD 6F 10                 call    CF_SETSTR       ; set sector
 182+ 10E3 CD 53 10                 call    CF_CMDRDY       ; Make sure drive is ready for command
 183+ 10E6 38 1D                    jr      C,CF_WR_EXIT               ; return if error
 184+ 10E8 3E 30                    ld      A,$30           ; set write command
 185+ 10EA D3 57                    out     (CF_CMD),A      ; send command
 186+ 10EC CD 62 10                 call    CF_DAT_RDY      ; Make sure drive is ready to get data
 187+ 10EF 38 14                    jr      C,CF_WR_EXIT    ; return if error
 188+ 10F1 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 189+ 10F4 1E 02                    ld      E,$02           ; repeat 2 times
 190+ 10F6 06 00        CF_WR_SEC1: ld      B,$00           ; read 256 bytes per cycle
 191+ 10F8 7E           CF_WR_SEC2: ld      A,(HL)          ; load byte
 192+ 10F9 D3 50                    out     (CF_DATA),A     ; send byte to CF
 193+ 10FB 23                       inc     HL              ; next location
 194+ 10FC 10 FA                    djnz    CF_WR_SEC2      ; repeat
 195+ 10FE 1D                       dec     E               ; 2 cycles
 196+ 10FF 20 F5                    jr      NZ,CF_WR_SEC1   ; repeat
 197+ 1101 CD 4C 10                 call    CF_BUSY         ; wait for CF to complete the writing
 198+ 1104 AF                       xor     A               ; clear Carry
 199+ 1105 E1           CF_WR_EXIT: pop     HL              ; retrieve HL
 200+ 1106 D1                       pop     DE              ; retrieve DE
 201+ 1107 C1                       pop     BC              ; retrieve BC
 202+ 1108 C9                       ret                     ; return to caller
 203+ 1109
# file closed: ../include/dos/bios-1.01.asm
  83  1109                  INCLUDE "../include/dos/dos-1.01.asm"
# file opened: ../include/dos/dos-1.01.asm
   1+ 1109              ; ------------------------------------------------------------------------------
   2+ 1109              ; LM80C 64K - DOS ROUTINES - R1.01
   3+ 1109              ; ------------------------------------------------------------------------------
   4+ 1109              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 1109              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 1109              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 1109              ; kind of warranty: you can use them at your own risk.
   8+ 1109              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 1109              ; maintain the copyright notices, include this advice and the note to the
  10+ 1109              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 1109              ; redistribuite them.
  12+ 1109              ; https://www.leonardomiliani.com
  13+ 1109              ;
  14+ 1109              ; Please support me by visiting the following links:
  15+ 1109              ; Main project page: https://www.leonardomiliani.com
  16+ 1109              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 1109              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 1109              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 1109              ; ------------------------------------------------------------------------------
  20+ 1109              ;
  21+ 1109              ; ------------------------------------------------------------------------------
  22+ 1109              ; Code Revision:
  23+ 1109              ; R1.0  - 20210306 - first release
  24+ 1109              ; R1.01 - 2021xxxx -
  25+ 1109              ;
  26+ 1109              ;------------------------------------------------------------------------------
  27+ 1109
  28+ 1109
  29+ 1109 4C 4D 38 30  DFSCT0      defb    "LM80C DOS",$00,"1.01",$00     ; disk header
  29+ 110D 43 20 44 4F
  29+ 1111 53 00 31 2E
  29+ 1115 30 31 00
  30+ 1118 00 01        DSKDIRADR:  defb    $00,$01                         ; 1st sector of directory ($0001)
  31+ 111A
  32+ 111A              DIR_STRT:   equ     TMPDBF          ; (2) start of directory
  33+ 111A              DAT_STRT:   equ     DIR_STRT+$02    ; (2) start of DATA area
  34+ 111A              DIR_SCT:    equ     DAT_STRT+$02    ; (2) sector of first free entry in the directory
  35+ 111A              NTR_NBR:    equ     DIR_SCT+$02     ; (2) number of free entry
  36+ 111A              BYT_SIZ:    equ     NTR_NBR+$02     ; (2) file size in bytes
  37+ 111A              SCT_SIZ:    equ     BYT_SIZ+$02     ; (1) file size in sectors
  38+ 111A              MSB_SCT:    equ     SCT_SIZ+$01     ; (2) MSB sector of file
  39+ 111A              LSB_SCT:    equ     MSB_SCT+$02     ; (2) LSB sector of file
  40+ 111A              RAM_PTR:    equ     LSB_SCT+$02     ; (2) pointer to RAM
  41+ 111A              TPBF1:      equ     RAM_PTR+$02     ; (2) temp. word
  42+ 111A              TPBF2:      equ     TPBF1+$02       ; (2) temp. word
  43+ 111A              TPBF3:      equ     TPBF2+$02       ; (2) temp. word
  44+ 111A              TPBF4:      equ     TPBF3+$02       ; (2) temp. word
  45+ 111A              SRTMEM:     equ     TPBF4+$02       ; (2) temp. word
  46+ 111A              ENDMEM:     equ     SRTMEM+$02      ; (2) temp. word
  47+ 111A
  48+ 111A              ; *****************************************************************************
  49+ 111A              ; D I S K    I N I T
  50+ 111A              ; Functions: format a disk creating a fresh new file system on disk or
  51+ 111A              ;            rewrite only the Master Sector
  52+ 111A              ; *****************************************************************************
  53+ 111A 3A B4 81     DSK_INIT:   ld      A,(TPBF4)       ; load type of formatting
  54+ 111D 32 05 82                 ld      (TMPBFR1),A     ; save onto another location for later use
  55+ 1120 CD AA 18                 call    CLRIOBF         ; clear I/O buffer
  56+ 1123 CD BF 18                 call    CLRDOSBF        ; clear DOS buffer
  57+ 1126 3E E0                    ld 	    A,$E0   		; select CF as master, driver 0, LBA mode (bits #5-7=111)
  58+ 1128 D3 56                    out 	(CF_LBA3),A     ; send configuration
  59+ 112A 3E EC                    ld      A,$EC           ; select "drive ID" command
  60+ 112C D3 57                    out     (CF_CMD),A      ; send command
  61+ 112E CD 62 10                 call	CF_DAT_RDY      ; wait until data is ready to be read
  62+ 1131 CD C4 10                 call	CF_RD_CMD       ; read data and store into I/O buffer
  63+ 1134 ED 5B 98 81              ld      DE,(DOSBFR)     ; address of default conf. buffer
  64+ 1138 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  65+ 113B 01 0E 00                 ld      BC,$000E        ; position of current disk size in sectors
  66+ 113E 09                       add     HL,BC           ; set into HL
  67+ 113F 0E 04                    ld      C,$04           ; 4 bytes to copy
  68+ 1141 ED B0                    ldir                    ; copy (DE is auto-incremented)
  69+ 1143 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  70+ 1146 01 02 00                 ld      BC,$0002        ; 2 bytes to copy and also address of number of cylinders
  71+ 1149 09                       add     HL,BC           ; get position of data
  72+ 114A ED B0                    ldir                    ; copy (DE is auto-incremented)
  73+ 114C 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  74+ 114F 01 0C 00                 ld      BC,$000C        ; address of number of sectors per cylinder
  75+ 1152 09                       add     HL,BC           ; get position of data
  76+ 1153 0E 02                    ld      C,$02           ; 2 bytes to copy
  77+ 1155 ED B0                    ldir                    ; copy (DE is auto-incremented)
  78+ 1157 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
  79+ 115A 01 06 00                 ld      BC,$0006        ; address of number of heads
  80+ 115D 09                       add     HL,BC           ; get position of data
  81+ 115E 0E 02                    ld      C,$02           ; 2 bytes to copy
  82+ 1160 ED B0                    ldir                    ; copy (DE is auto-incremented)
  83+ 1162                          ; now we calculate the # of files allowed (1 file = 1 block = 64K)
  84+ 1162 ED 53 B4 81              ld      (TPBF4),DE      ; store current pointer to temp. def. conf. buffer
  85+ 1166 2A 98 81                 ld      HL,(DOSBFR)     ; load first 2 BYTES
  86+ 1169 4E                       ld      C,(HL)          ; load into AC
  87+ 116A 23                       inc     HL
  88+ 116B 7E                       ld      A,(HL)
  89+ 116C 23                       inc     HL
  90+ 116D 5E                       ld      E,(HL)          ; load into DE
  91+ 116E 23                       inc     HL
  92+ 116F 56                       ld      D,(HL)
  93+ 1170 D5                       push    DE              ; move DE into IX
  94+ 1171 DD E1                    pop     IX
  95+ 1173 11 80 00                 ld      DE,$0080        ; 128 sectors per block
  96+ 1176 CD 84 4D                 call    DIV_32_16       ; execute ACIX/DE; result is into ACIX, remainder into HL
  97+ 1179 47                       ld      B,A             ; now result is into BCIX
  98+ 117A B1                       or      C               ; BC=$0000?
  99+ 117B 28 05                    jr      Z,DOS_FTC       ; yes, but.....
 100+ 117D 11 FF FF                 ld      DE,$FFFF        ; ... no more than $FFFF files, so set limit
 101+ 1180 18 0E                    jr      DOS_FT1         ; jump over
 102+ 1182 DD E5        DOS_FTC:    push    IX              ; move IX into DE
 103+ 1184 D1                       pop     DE              ; now result is into BCDE
 104+ 1185 7C                       ld      A,H             ; remainder = zero?
 105+ 1186 B5                       or      L
 106+ 1187 CA 90 11                 jp      Z,DOS_FT1       ; yes, jump over
 107+ 118A 13                       inc     DE              ; no, increment DE
 108+ 118B 7A                       ld      A,D             ; check if DE is zero
 109+ 118C B3                       or      E
 110+ 118D 20 01                    jr      NZ,DOS_FT1      ; no, jump over
 111+ 118F 1B           DOS_FT0:    dec     DE              ; yes, so set files to limit of $FFFF
 112+ 1190 2A B4 81     DOS_FT1:    ld      HL,(TPBF4)      ; retrieve current pointer to temp. def. conf. buffer
 113+ 1193 73                       ld      (HL),E          ; store # of entries
 114+ 1194 23                       inc     HL
 115+ 1195 72                       ld      (HL),D
 116+ 1196 23                       inc     HL
 117+ 1197 D5                       push    DE              ; store entries
 118+ 1198 EB                       ex      DE,HL           ; copy current pointer into DE
 119+ 1199 21 18 11                 ld      HL,DSKDIRADR    ; address of directory start
 120+ 119C 01 02 00                 ld      BC,$0002        ; 2 bytes to copy
 121+ 119F ED B0                    ldir                    ; copy into buffer
 122+ 11A1                          ; now we calculate the starting sector of data area
 123+ 11A1 E1                       pop     HL              ; entries into HL
 124+ 11A2 0E 10                    ld      C,$10           ; 16 entries per sector
 125+ 11A4 CD 60 4D                 call    DIV_16_8        ; calculare how many sectors for dir (HL/C)
 126+ 11A7 B7                       or      A               ; remainder = 0?
 127+ 11A8 28 01                    jr      Z,DOS_FT2       ; yes, jump over
 128+ 11AA 23                       inc     HL              ; increment sectors
 129+ 11AB E5           DOS_FT2:    push    HL              ; store size of directory
 130+ 11AC FD E1                    pop     IY              ; into IY
 131+ 11AE 23                       inc     HL              ; data area is 1 sector bigger than directory's size
 132+ 11AF EB                       ex      DE,HL           ; restore pointer into HL, and move sectors into DE
 133+ 11B0 73                       ld      (HL),E          ; store starting of
 134+ 11B1 23                       inc     HL              ; data area
 135+ 11B2 72                       ld      (HL),D          ; into buffer
 136+ 11B3                          ; now clean again the I/O buffer and copy the configuration into I/O buffer
 137+ 11B3 CD AA 18                 call    CLRIOBF         ; clear I/O buffer
 138+ 11B6 21 09 11                 ld      HL,DFSCT0       ; address of disk header string
 139+ 11B9 ED 5B 9A 81              ld      DE,(IOBUFF)     ; address of I/O buffer
 140+ 11BD 01 0F 00                 ld      BC,$000F        ; 15 chars
 141+ 11C0 ED B0                    ldir                    ; copy header into buffer
 142+ 11C2 2A 98 81                 ld      HL,(DOSBFR)     ; first part of configuration
 143+ 11C5 01 10 00                 ld      BC,$0010        ; composed by 16 chars
 144+ 11C8 ED B0                    ldir                    ; copy (DE is auto-incremented)
 145+ 11CA AF                       xor     A               ; A=$0
 146+ 11CB 12                       ld      (DE),A          ; marker at $1F
 147+ 11CC 13                       inc     DE
 148+ 11CD CD 14 18                 call    CHKNMVAL;DOS_LDNAM       ; copy disk name into buffer
 149+ 11D0 DA 97 12                 jp      C,D1ERR         ; disk name error
 150+ 11D3 CD A5 17     DOS_FT5:    call    RND_ID          ; generate a semi-random disk ID
 151+ 11D6 2A 9A 81                 ld      HL,(IOBUFF)     ; get starting address of I/O buffer
 152+ 11D9 54                       ld      D,H             ; copy into DE...
 153+ 11DA 5D                       ld      E,L             ; ...for later use
 154+ 11DB 01 FE 01                 ld      BC,$01FE        ; get address of last 2 bytes...
 155+ 11DE 09                       add     HL,BC           ; ...of the I/O buffer
 156+ 11DF 3E 38                    ld      A,'8'           ; write marker "80"
 157+ 11E1 77                       ld      (HL),A          ; ...
 158+ 11E2 23                       inc     HL              ; ...
 159+ 11E3 3E 30                    ld      A,'0'           ; ...
 160+ 11E5 77                       ld      (HL),A          ; ...into last 2 locations
 161+ 11E6 EB                       ex      DE,HL           ; copy beginning of I/O buffer from DE into HL
 162+ 11E7 AF                       xor     A               ; reset A - set sector # to $00000000
 163+ 11E8 47                       ld      B,A             ; LBA0=0
 164+ 11E9 4F                       ld      C,A             ; LBA1=0
 165+ 11EA 57                       ld      D,A             ; LBA2=0
 166+ 11EB 5F                       ld      E,A             ; LBA3=0
 167+ 11EC CD DD 10                 call    CF_WR_SEC       ; write sector to CF
 168+ 11EF DA 7A 12                 jp      C,D2ERR
 169+ 11F2                          ; check if only re-writing of Master Sector was need
 170+ 11F2 3A 05 82                 ld      A,(TMPBFR1)     ; retrieve type of formatting
 171+ 11F5 3D                       dec     A               ; A=1?
 172+ 11F6 C8                       ret     Z               ; yes, finished job
 173+ 11F7                          ; erase directory -----------------------------
 174+ 11F7                          ; create a progress bar
 175+ 11F7 3E 0D                    ld      A,CR            ; new line
 176+ 11F9 CD 8E 23                 call    OUTC
 177+ 11FC FD E5                    push    IY              ; copy directory's size
 178+ 11FE E1                       pop     HL              ; into HL
 179+ 11FF 01 18 00                 ld      BC,$0018        ; 24 steps
 180+ 1202 CD 60 4D                 call    DIV_16_8        ; calculate HL/24 (remainder is ignored, here)
 181+ 1205 E5                       push    HL              ; store result
 182+ 1206 DD E1                    pop     IX              ; into IX
 183+ 1208 EB                       ex      DE,HL           ; and into DE
 184+ 1209 3E 2D                    ld      A,'-'           ; print a progress bar
 185+ 120B CD 47 12                 call    DOS_FT7         ; print it
 186+ 120E 3E 1C                    ld      A,CRSLFT        ; CURSOR left
 187+ 1210 CD 47 12                 call    DOS_FT7         ; come back to beginning of line
 188+ 1213 FD E5                    push    IY              ; copy directory's size
 189+ 1215 E1                       pop     HL              ; into HL
 190+ 1216 01 01 00                 ld      BC,$0001        ; first sector of directory
 191+ 1219 CD AA 18                 call    CLRIOBF         ; clear I/O buffer
 192+ 121C D5           DOS_FTA:    push    DE              ; store counter
 193+ 121D 11 00 00                 ld      DE,$0000        ; reset MSB of sector pointer
 194+ 1220 CD DD 10                 call    CF_WR_SEC       ; write sector to CF
 195+ 1223 DA 43 12                 jp      C,DOS_FT10      ; error occured
 196+ 1226 03                       inc     BC              ; next sector
 197+ 1227 2B                       dec     HL              ; decrement HL
 198+ 1228 D1                       pop     DE              ; retrieve counter
 199+ 1229 1B                       dec     DE              ; decrement counter
 200+ 122A 7B                       ld      A,E
 201+ 122B B2                       or      D               ; check if counter is zero
 202+ 122C 20 08                    jr      NZ,DOS_FT9      ; no, jump over
 203+ 122E 3E 2A                    ld      A,'*'           ; yes, print char
 204+ 1230 CD 8E 23                 call    OUTC
 205+ 1233 DD E5                    push    IX              ; re-set counter
 206+ 1235 D1                       pop     DE
 207+ 1236 7C           DOS_FT9:    ld      A,H             ; check if...
 208+ 1237 B5                       or      L               ; ...HL = 0
 209+ 1238 20 E2                    jr      NZ,DOS_FTA      ; if not, repeat
 210+ 123A 3E 0D                    ld      A,CR            ; return
 211+ 123C CD 8E 23                 call    OUTC            ; next line
 212+ 123F CD A5 10                 call    CF_STANDBY      ; set CF into stand-by mode
 213+ 1242 C9                       ret
 214+ 1243 D1           DOS_FT10:   pop     DE
 215+ 1244 C3 7A 12                 jp      D2ERR           ; disk geometry error
 216+ 1247
 217+ 1247              ; print 24 chars
 218+ 1247 06 18        DOS_FT7:    ld      B,$18           ; 24 chars
 219+ 1249 CD 8E 23     DOS_FT8:    call    OUTC            ; move cursor
 220+ 124C 10 FB                    djnz    DOS_FT8         ; repeat
 221+ 124E C9                       ret                     ; return to caller
 222+ 124F
 223+ 124F
 224+ 124F              ; *****************************************************************************
 225+ 124F              ; D I S K    R E N A M E
 226+ 124F              ;******************************************************************************
 227+ 124F CD AA 18     DSK_RNM:    call    CLRIOBF         ; clear I/O buffer
 228+ 1252 CD BF 18                 call    CLRDOSBF        ; clear DOS buf
 229+ 1255 11 00 00                 ld      DE,$0000        ; MSB sector
 230+ 1258 42                       ld      B,D             ; LSB sector
 231+ 1259 4A                       ld      C,D
 232+ 125A CD 6F 10                 call    CF_SETSTR       ; set sector
 233+ 125D CD B1 10                 call    CF_RD_SEC       ; read sector
 234+ 1260 2A 9A 81                 ld      HL,(IOBUFF)     ; point to start of I/O buffer
 235+ 1263 01 20 00                 ld      BC,$0020        ; offset for disk name
 236+ 1266 09                       add     HL,BC           ; get pointer
 237+ 1267 EB                       ex      DE,HL           ; copy pointer into DE
 238+ 1268 CD 14 18                 call    CHKNMVAL        ; copy disk name into buffer
 239+ 126B DA 97 12                 jp      C,D1ERR         ; disk name error
 240+ 126E 11 00 00                 ld      DE,$0000        ; reset MSB sector
 241+ 1271 42                       ld      B,D             ; reset LSB sector
 242+ 1272 4A                       ld      C,D
 243+ 1273 CD DD 10                 call    CF_WR_SEC       ; write sector
 244+ 1276 DA D6 16                 jp      C,WRT_ERR       ; error?
 245+ 1279 C9                       ret                     ; no, return to caller
 246+ 127A
 247+ 127A
 248+ 127A              ; *****************************************************************************
 249+ 127A              ; DOS ERRORS
 250+ 127A              ; *****************************************************************************
 251+ 127A 3E 3C        D2ERR:      ld      A,D2            ; disk geometry error
 252+ 127C 18 1B                    jr      RET_ERR
 253+ 127E 3E 42        DSKFULL:    ld      A,D5            ; disk full error
 254+ 1280 18 17                    jr      RET_ERR
 255+ 1282 3E 44        DUPLERR:    ld      A,D6            ; duplicate file name
 256+ 1284 18 13                    jr      RET_ERR
 257+ 1286 3E 3A        NAMERR:     ld      A,D1            ; file name error
 258+ 1288 18 0F                    jr      RET_ERR
 259+ 128A 3E 48        FLNTFND:    ld      A,D8            ; file not found
 260+ 128C 18 0B                    jr      RET_ERR
 261+ 128E 3E 40        LODERR:     ld      A,D4            ; generic load error
 262+ 1290 18 07                    jr      RET_ERR
 263+ 1292 3E 46        DOSVERSERR: ld      A,D7            ; DOS version error
 264+ 1294 C3 99 12                 jp      RET_ERR
 265+ 1297 3E 3A        D1ERR:      ld      A,D1            ; name string error
 266+ 1299 32 9C 81     RET_ERR:    ld      (DOSER),A       ; store DOS error
 267+ 129C CD A5 10                 call    CF_STANDBY      ; set CF into stand-by
 268+ 129F 37                       scf                     ; set Carry for error
 269+ 12A0 C9                       ret                     ; return to caller
 270+ 12A1
 271+ 12A1              ; *****************************************************************************
 272+ 12A1              ; L I S T    F I L E S
 273+ 12A1              ; Function: print details of disk and list files
 274+ 12A1              ; Input: D: $00=only disk details; $01=file list, too
 275+ 12A1              ; *****************************************************************************
 276+ 12A1 44 69 73 6B  DSKNMTX:    defb    "Disk name: ",0
 276+ 12A5 20 6E 61 6D
 276+ 12A9 65 3A 20 00
 277+ 12AD 0D 53 65 63  TLSCTTX:    defb    CR,"Sectors: ",0
 277+ 12B1 74 6F 72 73
 277+ 12B5 3A 20 00
 278+ 12B8 0D 41 6C 6C  ALFLSTXT:   defb    CR,"Allowed files: ",0
 278+ 12BC 6F 77 65 64
 278+ 12C0 20 66 69 6C
 278+ 12C4 65 73 3A 20
 278+ 12C8 00
 279+ 12C9 20 66 69 6C  TLFLSTX:    defb    " file(s)",CR,0
 279+ 12CD 65 28 73 29
 279+ 12D1 0D 00
 280+ 12D3 CD DC 17     LST_FILES:  call    CHKDSKVAL       ; check DOS version
 281+ 12D6 DA 92 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 282+ 12D9 D5                       push    DE              ; store D
 283+ 12DA 01 00 00                 ld      BC,$0000        ; point to sector #0
 284+ 12DD 11 00 00                 ld      DE,$0000
 285+ 12E0 CD 6F 10                 call    CF_SETSTR       ; set sector
 286+ 12E3 CD B1 10                 call    CF_RD_SEC       ; read sector
 287+ 12E6 21 A1 12                 ld      HL,DSKNMTX      ; pointer to "Disk name" message
 288+ 12E9 CD 65 2F                 call    PRS             ; print it
 289+ 12EC 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 290+ 12EF 11 20 00                 ld      DE,$0020        ; position of disk name
 291+ 12F2 19                       add     HL,DE           ; get address
 292+ 12F3 06 10                    ld      B,$10           ; 16 chars
 293+ 12F5 7E           INPR1:      ld      A,(HL)          ; load char
 294+ 12F6 CD 8E 23                 call    OUTC            ; print it
 295+ 12F9 23                       inc     HL
 296+ 12FA 10 F9                    djnz    INPR1           ; repeat
 297+ 12FC 3E 0D                    ld      A,CR
 298+ 12FE CD 8E 23                 call    OUTC            ; carriage return
 299+ 1301 D1                       pop     DE              ; retrieve D
 300+ 1302 DD 21 00 00              ld      IX,$0000        ; reset file counter
 301+ 1306 7A                       ld      A,D
 302+ 1307 B7                       or      A               ; is D=0?
 303+ 1308 CA C7 13                 jp      Z,PNTSTATS      ; yes, jump over
 304+ 130B                          ; print list of files
 305+ 130B 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 306+ 130E 11 0F 00                 ld      DE,$000F        ; point to details of disk
 307+ 1311 19                       add     HL,DE           ; find address
 308+ 1312 ED 5B 98 81              ld      DE,(DOSBFR)     ; store into DOS buffer
 309+ 1316 01 20 00                 ld      BC,$0020        ; 32 bytes
 310+ 1319 ED B0                    ldir                    ; copy
 311+ 131B 11 00 00                 ld      DE,$0000        ; beginning...
 312+ 131E 01 01 00                 ld      BC,$0001        ; ...of directory
 313+ 1321 CD 6F 10     LSTFILES1:  call    CF_SETSTR       ; set sector to read
 314+ 1324 CD B1 10                 call    CF_RD_SEC       ; read sector
 315+ 1327 2E 10        LSTFILES2:  ld      L,$10           ; 16 entries to check
 316+ 1329 FD 2A 9A 81              ld      IY,(IOBUFF)     ; beginning of I/O buffer
 317+ 132D FD 7E 00     LSTFILES4:  ld      A,(IY)          ; load 1st char of entry name
 318+ 1330 B7                       or      A               ; is it an empty entry ($00)?
 319+ 1331 28 5B                    jr      Z,LSTFILES6     ; yes, ignore it
 320+ 1333 FE 7F                    cp      $7F             ; is it a deleted entry ($7F)?
 321+ 1335 28 57                    jr      Z,LSTFILES6     ; yes, ignore it
 322+ 1337 C5                       push    BC              ; this is a valid entry - so, store BC
 323+ 1338 FD E5                    push    IY              ; store IY
 324+ 133A E5                       push    HL              ; store HL
 325+ 133B D5                       push    DE              ; store DE
 326+ 133C DD E5                    push    IX              ; store IX
 327+ 133E 06 10                    ld      B,$10           ; 16 chars to read and print
 328+ 1340 FD 7E 00     LSTFILES3:  ld      A,(IY)          ; load char from name
 329+ 1343 CD 8E 23                 call    OUTC            ; print char
 330+ 1346 FD 23                    inc     IY              ; next char
 331+ 1348 10 F6                    djnz    LSTFILES3       ; repeat
 332+ 134A 3E 20                    ld      A,SPC
 333+ 134C CD 8E 23                 call    OUTC            ; print space
 334+ 134F FD 7E 00                 ld      A,(IY)          ; file type
 335+ 1352 D6 80                    sub     $80             ; types start from $80
 336+ 1354 B7                       or      A               ; BAS type ($00)?
 337+ 1355 20 05                    jr      NZ,LSTFILES20   ; no, jump over
 338+ 1357 21 0B 14                 ld      HL,FILETP       ; print "BAS"
 339+ 135A 18 0B                    jr      LSTFILESPR
 340+ 135C 3D           LSTFILES20: dec     A               ; BIN type ($01)?
 341+ 135D 20 05                    jr      NZ,LSTFILES21   ; no, jump over
 342+ 135F 21 10 14                 ld      HL,FILETP+5     ; print "BIN "
 343+ 1362 18 03                    jr      LSTFILESPR
 344+ 1364 21 15 14     LSTFILES21: ld      HL,FILETP+10    ; print "??? "
 345+ 1367 CD 65 2F     LSTFILESPR: call    PRS
 346+ 136A 11 00 00                 ld      DE,$0000        ; MSB = $0000
 347+ 136D 01 08 00                 ld      BC,$0008
 348+ 1370 FD 09                    add     IY,BC           ; point to file size in bytes
 349+ 1372 FD 4E 00                 ld      C,(IY)          ; load size in BC, first LSB
 350+ 1375 FD 23                    inc     IY
 351+ 1377 FD 46 00                 ld      B,(IY)          ; then MSB
 352+ 137A C5                       push    BC              ; copy...
 353+ 137B DD E1                    pop     IX              ; ...into IX
 354+ 137D CD 50 18                 call    PRN16ASCIX      ; print size in bytes (DEIX)
 355+ 1380 3E 0D                    ld      A,CR
 356+ 1382 CD 8E 23                 call    OUTC            ; print carriage return
 357+ 1385 DD E1        LSTFILES8:  pop     IX
 358+ 1387 D1                       pop     DE
 359+ 1388 E1                       pop     HL
 360+ 1389 FD E1                    pop     IY              ; retrieve IY
 361+ 138B C1                       pop     BC              ; retrieve BC
 362+ 138C DD 23                    inc     IX              ; increment file counter
 363+ 138E CD F7 25     LSTFILES6:  call    TSTBRK          ; Test for break key
 364+ 1391 CD FA 24                 call    TSTSPC          ; test for space
 365+ 1394 C5                       push    BC              ; store sector counter
 366+ 1395 01 20 00                 ld      BC,$0020        ; dir entry size
 367+ 1398 FD 09                    add     IY,BC           ; next entry in current sector
 368+ 139A C1                       pop     BC              ; retrieve sector counter
 369+ 139B 2D                       dec     L               ; decrement entry counter
 370+ 139C 20 8F                    jr      NZ,LSTFILES4    ; all entries for this sector done? no, repeat
 371+ 139E 03           LSTFILES5:  inc     BC              ; increment sector counter
 372+ 139F 78                       ld      A,B             ; check if BC=$0000
 373+ 13A0 B1                       or      C               ; (means more than $FFFF entries, so counter overflowed)
 374+ 13A1 28 14                    jr      Z,LSTFILES7     ; yes, exit
 375+ 13A3 D5                       push    DE              ; store MSB of sector pointer
 376+ 13A4 2A 98 81                 ld      HL,(DOSBFR)     ; load data area sector from DOS buffer
 377+ 13A7 11 0E 00                 ld      DE,$000E        ; point to data area
 378+ 13AA 19                       add     HL,DE           ; find address in memory
 379+ 13AB 5E                       ld      E,(HL)          ; load data area sector...
 380+ 13AC 23                       inc     HL
 381+ 13AD 56                       ld      D,(HL)          ; ...into DE
 382+ 13AE 60                       ld      H,B             ; copy current sector
 383+ 13AF 69                       ld      L,C             ; into HL
 384+ 13B0 CD 05 4D                 call    CMP16           ; is current sector < data area sector?
 385+ 13B3 D1                       pop     DE              ; retrieve MSB of sector pointer
 386+ 13B4 DA 21 13                 jp      C,LSTFILES1     ; repeat if there are still directory sectors to check
 387+ 13B7 11 00 00     LSTFILES7:  ld      DE,$0000
 388+ 13BA DD E5                    push    IX
 389+ 13BC CD 50 18                 call    PRN16ASCIX      ; print number of files from DEIX
 390+ 13BF 21 C9 12                 ld      HL,TLFLSTX
 391+ 13C2 CD 65 2F                 call    PRS             ; print "file(s)"
 392+ 13C5 DD E1                    pop     IX
 393+ 13C7 21 AD 12     PNTSTATS:   ld      HL,TLSCTTX      ; Point to message "Tot. sectors"
 394+ 13CA CD 65 2F                 call    PRS             ; print message
 395+ 13CD 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer and point to disk size
 396+ 13D0 DD E5                    push    IX              ; store number of entries
 397+ 13D2 CD 46 18                 call    PRN32ASCII      ; print size
 398+ 13D5 3E 2F                    ld      A,'/'
 399+ 13D7 CD 8E 23                 call    OUTC            ; print a "/""
 400+ 13DA D1                       pop     DE              ; copy number of entries into DE
 401+ 13DB 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 402+ 13DE CD 2A 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 403+ 13E1 ED 53 AE 81              ld      (TPBF1),DE      ; store results
 404+ 13E5 22 B0 81                 ld      (TPBF2),HL
 405+ 13E8 21 AE 81                 ld      HL,TPBF1        ; print results
 406+ 13EB CD 46 18                 call    PRN32ASCII
 407+ 13EE 21 B8 12                 ld      HL,ALFLSTXT     ; Point to message "Tot. blocks"
 408+ 13F1 CD 65 2F                 call    PRS             ; print message
 409+ 13F4 2A 98 81                 ld      HL,(DOSBFR)     ; reload address of I/O buffer
 410+ 13F7 01 0A 00                 ld      BC,$000A        ; address of allowed files
 411+ 13FA 09                       add     HL,BC           ; find pointer
 412+ 13FB 11 00 00                 ld      DE,$0000        ; MSB set to $0000
 413+ 13FE CD 4A 18                 call    PRN16ASCII      ; print max files
 414+ 1401 3E 0D                    ld      A,CR
 415+ 1403 CD 8E 23                 call    OUTC            ; print a carriage return
 416+ 1406 CD A5 10     EXITFLS:    call    CF_STANDBY      ; put CF into standby
 417+ 1409 AF                       xor     A               ; clear Carry flag
 418+ 140A C9                       ret                     ; return to caller
 419+ 140B 42 41 53 20  FILETP:     defb    "BAS ",0        ; BASIC type
 419+ 140F 00
 420+ 1410 42 49 4E 20              defb    "BIN ",0        ; BINARY type
 420+ 1414 00
 421+ 1415 3F 3F 3F 20              defb    "??? ",0        ; unkown
 421+ 1419 00
 422+ 141A
 423+ 141A
 424+ 141A              ; *****************************************************************************
 425+ 141A              ; S A V E    F I L E
 426+ 141A              ; save current BASIC program onto a file
 427+ 141A              ; *****************************************************************************
 428+ 141A CD AA 18     SAVFILE:    call    CLRIOBF         ; clear I/O
 429+ 141D CD DC 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 430+ 1420 DA 92 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 431+ 1423 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 432+ 1426 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 433+ 1429 09                       add     HL,BC           ; get address
 434+ 142A CD 41 18                 call    HL2DE           ; get entries into DE
 435+ 142D ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 436+ 1431 CD 41 18                 call    HL2DE           ; get start of directory into DE
 437+ 1434 ED 53 9D 81              ld      (DIR_STRT),DE   ; store
 438+ 1438 CD 41 18                 call    HL2DE           ; get start of data area into DE
 439+ 143B ED 53 9F 81              ld      (DAT_STRT),DE   ; store
 440+ 143F CD AA 18                 call    CLRIOBF         ; clear IO buffer
 441+ 1442 CD BF 18                 call    CLRDOSBF        ; clear DOS buffer
 442+ 1445 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 443+ 1449 CD 14 18                 call    CHKNMVAL        ; check and copy file name
 444+ 144C DA 86 12                 jp      C,NAMERR        ; if Carry, file name error
 445+ 144F CD DB 16                 call    FILE_EXIST      ; check for name already present in dir
 446+ 1452 DA 82 12                 jp      C,DUPLERR       ; name is present - error
 447+ 1455 CD 47 17                 call    FNDFREDIR       ; find a free entry in the directory
 448+ 1458 DA 7E 12                 jp      C,DSKFULL       ; no entry, disk full error
 449+ 145B 3A B4 81                 ld      A,(TPBF4)       ; check what to save
 450+ 145E FE 80                    cp      $80             ; BASIC program?
 451+ 1460 C2 6F 14                 jp      NZ,SAVFL3       ; no, jump over
 452+ 1463                          ; BASIC area to save starts at PROGND and ends at (PROGND)
 453+ 1463 2A 4B 82                 ld      HL,(PROGND)     ; load end of BASIC program <- WARNING: pay attention to (PROGND) and PROGND
 454+ 1466 11 4B 82                 ld      DE,PROGND       ; start of RAM to be saved  <- WARNING: pay attention to (PROGND) and PROGND
 455+ 1469 ED 53 B6 81              ld      (SRTMEM),DE     ; copy DE
 456+ 146D 18 08                    jr      SAVFL1
 457+ 146F 2A B8 81     SAVFL3:     ld      HL,(ENDMEM)     ; save a portion of memory: HL <= end of portion
 458+ 1472 23                       inc     HL              ; we always need 1 more byte to store the portion of memory
 459+ 1473 ED 5B B6 81              ld      DE,(SRTMEM)     ; DE <= start of portion
 460+ 1477                          ; compute how many sectors/blocks are needed to save file
 461+ 1477 AF           SAVFL1:     xor     A               ; reset Carry
 462+ 1478 ED 52                    sbc     HL,DE           ; get how many bytes to save
 463+ 147A 22 A5 81                 ld      (BYT_SIZ),HL    ; store into memory
 464+ 147D 11 00 02                 ld      DE,$0200        ; 512 bytes per sector
 465+ 1480 7C                       ld      A,H             ; move lenght...
 466+ 1481 4D                       ld      C,L             ; ...into AC
 467+ 1482 CD 6F 4D                 call    DIV_16_16       ; lenght/512 = nbr. of sectors: quotient in AC but A will be discarded
 468+ 1485 7C                       ld      A,H             ; check if...
 469+ 1486 B5                       or      L               ; ...remainder (HL) is 0
 470+ 1487 28 01                    jr      Z,SAVFL6        ; yes, jump over
 471+ 1489 03                       inc     BC              ; no, so we need another sector
 472+ 148A 79           SAVFL6:     ld      A,C
 473+ 148B 32 A7 81                 ld      (SCT_SIZ),A     ; store into memory
 474+ 148E              SAVFL7:     ; start saving on disk
 475+ 148E 11 00 00                 ld      DE,$0000        ; directory is always from sector 0000-0001
 476+ 1491 ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 477+ 1495 CD 6F 10                 call    CF_SETSTR       ; set sector to read
 478+ 1498 CD B1 10                 call    CF_RD_SEC       ; read sector
 479+ 149B ED 5B A3 81              ld      DE,(NTR_NBR)    ; load entry number into E (D is $00)
 480+ 149F 7B                       ld      A,E             ; load entry LSB into A
 481+ 14A0 E6 0F                    and     %00001111       ; be sure to get only low nibble
 482+ 14A2 87                       add     A,A             ; multiply times 32
 483+ 14A3 87                       add     A,A
 484+ 14A4 87                       add     A,A
 485+ 14A5 87                       add     A,A
 486+ 14A6 87                       add     A,A
 487+ 14A7 4F                       ld      C,A             ; copy into C
 488+ 14A8 06 00                    ld      B,$00           ; reset B
 489+ 14AA                          ; set name
 490+ 14AA 2A 9A 81                 ld 	    HL,(IOBUFF)     ; get starting address of I/O buffer
 491+ 14AD 09                       add     HL,BC           ; add offset to get address of entry
 492+ 14AE ED 5B 98 81              ld      DE,(DOSBFR)     ; pointer to file name
 493+ 14B2 01 10 00                 ld      BC,$0010        ; 16 chars
 494+ 14B5 EB                       ex      DE,HL           ; move source into HL and destination into DE
 495+ 14B6 ED B0                    ldir                    ; copy file name
 496+ 14B8 EB                       ex      DE,HL           ; move current buffer pointer into HL
 497+ 14B9 3A B4 81                 ld      A,(TPBF4)       ; load the type of file
 498+ 14BC 77                       ld      (HL),A          ; store it
 499+ 14BD 23                       inc     HL
 500+ 14BE AF                       xor     A               ; file attributes - AT THE MOMENT, NO ATTRIBUTES
 501+ 14BF 77                       ld      (HL),A
 502+ 14C0 23                       inc     HL
 503+ 14C1 ED 5B A3 81              ld      DE,(NTR_NBR)    ; reload entry number
 504+ 14C5 CD 3C 18                 call    DE2HL           ; store entry into buffer
 505+ 14C8 E5                       push    HL              ; store pointer
 506+ 14C9 01 80 00                 ld      BC,$0080        ; 128 sectors per entry block
 507+ 14CC CD 2A 4D                 call    MUL_U32         ; multiply BC times DE: returns DEHL
 508+ 14CF ED 4B 9F 81              ld      BC,(DAT_STRT)   ; load start of data
 509+ 14D3 09                       add     HL,BC           ; add sector of data area
 510+ 14D4 30 01                    jr      NC,SAVFL9       ; overflow?
 511+ 14D6 13                       inc     DE              ; yes, increment DE
 512+ 14D7 ED 53 A8 81  SAVFL9:     ld      (MSB_SCT),DE    ; store MSB of sector
 513+ 14DB 22 AA 81                 ld      (LSB_SCT),HL    ; store LSB of sector
 514+ 14DE E1                       pop     HL              ; retrieve pointer
 515+ 14DF CD 3C 18                 call    DE2HL           ; also copy MSB of sector into entry
 516+ 14E2 ED 5B AA 81              ld      DE,(LSB_SCT)    ; retrieve LSB
 517+ 14E6 CD 3C 18                 call    DE2HL           ; also copy LSB of sector into entry
 518+ 14E9 ED 5B A5 81              ld      DE,(BYT_SIZ)    ; retrieve file size in bytes
 519+ 14ED CD 3C 18                 call    DE2HL           ; copy file size into buffer
 520+ 14F0 3A A7 81                 ld      A,(SCT_SIZ)     ; retrieve file size in sectors
 521+ 14F3 77                       ld      (HL),A          ; copy into buffer
 522+ 14F4 23                       inc     HL              ; next location
 523+ 14F5 ED 5B B6 81              ld      DE,(SRTMEM)     ; start of address of file in RAM
 524+ 14F9 CD 3C 18                 call    DE2HL           ; copy into buffer
 525+ 14FC 06 03                    ld      B,$03           ; remaining chars...
 526+ 14FE AF                       xor     A               ; ...set to $00
 527+ 14FF 77           SAVFL2:     ld      (HL),A          ; reset byte
 528+ 1500 23                       inc     HL              ; next cell
 529+ 1501 10 FC                    djnz    SAVFL2          ; repeat
 530+ 1503                          ; save entry into directory
 531+ 1503 11 00 00                 ld      DE,$0000        ; block 0
 532+ 1506 ED 4B A1 81              ld      BC,(DIR_SCT)    ; load sector of dir where to save file entry
 533+ 150A CD DD 10                 call    CF_WR_SEC       ; write new entry into directory
 534+ 150D DA 7A 12                 jp      C,D2ERR         ; error occured
 535+ 1510 CD AA 18                 call    CLRIOBF         ; clear I/O buffer
 536+ 1513                          ; start saving RAM
 537+ 1513 ED 5B B6 81              ld      DE,(SRTMEM)     ; load start of RAM
 538+ 1517 ED 53 AC 81              ld      (RAM_PTR),DE    ; store
 539+ 151B CD AA 18     SAVFL10:    call    CLRIOBF         ; clear I/O buffer
 540+ 151E 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 541+ 1521 11 00 02                 ld      DE,$0200        ; are they < 512?
 542+ 1524 CD 05 4D                 call    CMP16
 543+ 1527 30 04                    jr      NC,SAVFL4       ; no, jump over
 544+ 1529 ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load remaining bytes
 545+ 152D 4B           SAVFL4:     ld      C,E             ; bytes to copy
 546+ 152E 42                       ld      B,D             ; into BC
 547+ 152F 2A AC 81                 ld      HL,(RAM_PTR)    ; load pointer to RAM to be saved
 548+ 1532 ED 5B 9A 81              ld      DE,(IOBUFF)     ; load start of I/O buffer
 549+ 1536 ED B0                    ldir                    ; copy data
 550+ 1538 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 551+ 153C ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 552+ 1540                          ;call    CF_SETSTR       ; set sector
 553+ 1540 CD DD 10                 call    CF_WR_SEC       ; write sector
 554+ 1543 DA D6 16                 jp      C,WRT_ERR
 555+ 1546 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 556+ 1549 35                       dec     (HL)            ; copied all the sectors?
 557+ 154A CA 79 15                 jp      Z,SAVFLEXT      ; yes, exit
 558+ 154D 2A AC 81     SAVFL11:    ld      HL,(RAM_PTR)    ; pointer to RAM
 559+ 1550 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 560+ 1553 19                       add     HL,DE           ; calculate next starting address
 561+ 1554 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 562+ 1557 AF                       xor     A               ; reset Carry
 563+ 1558 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 564+ 155B ED 52                    sbc     HL,DE           ; subtract copied bytes
 565+ 155D 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 566+ 1560 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 567+ 1564 03                       inc     BC              ; next sector
 568+ 1565 78                       ld      A,B             ; BC=$0000?
 569+ 1566 B1                       or      C
 570+ 1567 20 09                    jr      NZ,SAVFL12      ; no, jump over
 571+ 1569 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 572+ 156D 13                       inc     DE              ; increment DE
 573+ 156E ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 574+ 1572 ED 43 AA 81  SAVFL12:    ld      (LSB_SCT),BC    ; store new LSB of sector
 575+ 1576 C3 1B 15                 jp      SAVFL10         ; repeat
 576+ 1579 CD A5 10     SAVFLEXT:   call    CF_STANDBY      ; set CF into stand-by mode
 577+ 157C AF                       xor     A               ; clear Carry flag
 578+ 157D C9                       ret                     ; return to caller
 579+ 157E
 580+ 157E
 581+ 157E              ; *****************************************************************************
 582+ 157E              ; F I L E    L O A D
 583+ 157E              ; load a file from the disk into the memory
 584+ 157E              ; *****************************************************************************
 585+ 157E CD AA 18     LODFILE:    call    CLRIOBF         ; clear I/O
 586+ 1581 CD DC 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 587+ 1584 DA 92 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 588+ 1587 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 589+ 158A 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 590+ 158D 09                       add     HL,BC           ; get address
 591+ 158E CD 41 18                 call    HL2DE           ; get entries into DE
 592+ 1591 ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 593+ 1595 CD AA 18                 call    CLRIOBF         ; clear IO buffer
 594+ 1598 CD BF 18                 call    CLRDOSBF        ; clear DOS buffer
 595+ 159B ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 596+ 159F CD 14 18                 call    CHKNMVAL        ; check and copy file name
 597+ 15A2 DA 86 12                 jp      C,NAMERR        ; if Carry, file name error
 598+ 15A5 CD DB 16                 call    FILE_EXIST      ; check if file exists
 599+ 15A8 D2 8A 12                 jp      NC,FLNTFND      ; file not found - error
 600+ 15AB DD E5                    push    IX              ; copy pointer to file...
 601+ 15AD E1                       pop     HL              ; ...into HL
 602+ 15AE 01 10 00                 ld      BC,$0010        ; skip file name (16 chars)...
 603+ 15B1 09                       add     HL,BC           ; ...by getting pointer to file details
 604+ 15B2 7E                       ld      A,(HL)          ; load file type
 605+ 15B3 FE 80                    cp      $80             ; 'BAS' type?
 606+ 15B5 28 0C                    jr      Z,LDFL4         ; yes, jump over
 607+ 15B7 FE 81                    cp      $81             ; 'BIN' type?
 608+ 15B9 C2 8E 12                 jp      NZ,LODERR       ; no, raise error
 609+ 15BC 3A B4 81                 ld      A,(TPBF4)       ; if BIN file, file must be loaded into its original position
 610+ 15BF B7                       or      A               ; did the user set this?
 611+ 15C0 CA 8E 12                 jp      Z,LODERR        ; no, raise an error
 612+ 15C3 0E 04        LDFL4:      ld      C,$04           ; 4 steps forward and also 4 bytes to copy
 613+ 15C5 09                       add     HL,BC           ; point to starting sector
 614+ 15C6 11 A8 81                 ld      DE,MSB_SCT      ; point to store sector address of file
 615+ 15C9 ED B0                    ldir                    ; copy MSB/LSB from entry into buffer
 616+ 15CB 11 A5 81                 ld      DE,BYT_SIZ      ; point to store size of file
 617+ 15CE 01 03 00                 ld      BC,$0003        ; 3 bytes to copy
 618+ 15D1 ED B0                    ldir                    ; copy size in bytes and sectors from entry into buffer
 619+ 15D3 11 4B 82                 ld      DE,PROGND       ; load start of BASIC RAM
 620+ 15D6 3A B4 81                 ld      A,(TPBF4)       ; check where to save the data from
 621+ 15D9 B7                       or      A               ; is it 0? (meaning from the current BASIC pointers)
 622+ 15DA 28 03                    jr      Z,LDFL1         ; yes, don't re-load the file from the address stored into the file
 623+ 15DC 5E                       ld      E,(HL)          ; no, load RAM address from disk - LSB...
 624+ 15DD 23                       inc     HL
 625+ 15DE 56                       ld      D,(HL)          ; ...then MSB
 626+ 15DF ED 53 AC 81  LDFL1:      ld      (RAM_PTR),DE    ; store starting pointer
 627+ 15E3                          ; start loading from disk
 628+ 15E3 CD AA 18     LDFL2:      call    CLRIOBF         ; clear I/O buffer
 629+ 15E6 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 630+ 15EA ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 631+ 15EE CD 6F 10                 call    CF_SETSTR       ; set sector
 632+ 15F1 CD B1 10                 call    CF_RD_SEC       ; read sector
 633+ 15F4 2A A5 81                 ld      HL,(BYT_SIZ)    ; load bytes left to be copied
 634+ 15F7 11 00 02                 ld      DE,$0200        ; are they < 512?
 635+ 15FA CD 05 4D                 call    CMP16
 636+ 15FD 30 04                    jr      NC,LDFL3        ; no, jump over
 637+ 15FF ED 5B A5 81              ld      DE,(BYT_SIZ)    ; yes, so load only remaining bytes
 638+ 1603 4B           LDFL3:      ld      C,E             ; move bytes to copy...
 639+ 1604 42                       ld      B,D             ; ...into BC
 640+ 1605 2A 9A 81                 ld      HL,(IOBUFF)     ; point to I/O buffer
 641+ 1608 ED 5B AC 81              ld      DE,(RAM_PTR)    ; point to RAM where to save
 642+ 160C ED B0                    ldir                    ; copy data
 643+ 160E 21 A7 81                 ld      HL,SCT_SIZ      ; sector counter
 644+ 1611 35                       dec     (HL)            ; copied all the sectors?
 645+ 1612 CA 41 16                 jp      Z,LDFLEX        ; yes, exit
 646+ 1615 2A AC 81                 ld      HL,(RAM_PTR)    ; pointer to RAM
 647+ 1618 11 00 02                 ld      DE,$0200        ; block of 512 bytes copied
 648+ 161B 19                       add     HL,DE           ; calculate next starting address
 649+ 161C 22 AC 81                 ld      (RAM_PTR),HL    ; store next block
 650+ 161F AF                       xor     A               ; reset Carry
 651+ 1620 2A A5 81                 ld      HL,(BYT_SIZ)    ; load left bytes
 652+ 1623 ED 52                    sbc     HL,DE           ; subtract copied bytes
 653+ 1625 22 A5 81                 ld      (BYT_SIZ),HL    ; store left bytes
 654+ 1628 ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of sector
 655+ 162C 03                       inc     BC              ; next sector
 656+ 162D 78                       ld      A,B             ; BC=$0000?
 657+ 162E B1                       or      C
 658+ 162F 20 09                    jr      NZ,LDFL5        ; no, jump over
 659+ 1631 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of sector
 660+ 1635 13                       inc     DE              ; increment DE
 661+ 1636 ED 53 A8 81              ld      (MSB_SCT),DE    ; store new MSB of sector
 662+ 163A ED 43 AA 81  LDFL5:      ld      (LSB_SCT),BC    ; store new LSB of sector
 663+ 163E C3 E3 15                 jp      LDFL2           ; repeat
 664+ 1641 CD A5 10     LDFLEX:     call    CF_STANDBY      ; set CF into stand-by mode
 665+ 1644 AF                       xor     A               ; clear Carry flag
 666+ 1645 C9                       ret                     ; return to caller
 667+ 1646
 668+ 1646
 669+ 1646              ; *****************************************************************************
 670+ 1646              ; F I L E    E R A S E
 671+ 1646              ; erase a file from disk, freeing its block
 672+ 1646              ; *****************************************************************************
 673+ 1646 CD AA 18     FIL_ERASE:  call    CLRIOBF         ; clear I/O
 674+ 1649 CD DC 17                 call    CHKDSKVAL       ; check DOS version & load disk details
 675+ 164C DA 92 12                 jp      C,DOSVERSERR    ; if Carry is set, raise DOS version error
 676+ 164F 2A 9A 81                 ld      HL,(IOBUFF)     ; start of I/O buffer
 677+ 1652 01 19 00                 ld      BC,$0019        ; point to max. allowed entries
 678+ 1655 09                       add     HL,BC           ; get address
 679+ 1656 CD 41 18                 call    HL2DE           ; get entries into DE
 680+ 1659 ED 53 A3 81              ld      (NTR_NBR),DE    ; store
 681+ 165D CD AA 18                 call    CLRIOBF         ; clear IO buffer
 682+ 1660 CD BF 18                 call    CLRDOSBF        ; clear DOS buffer
 683+ 1663 ED 5B 98 81              ld      DE,(DOSBFR)     ; DE set to beginning of DOS buffer
 684+ 1667 CD 14 18                 call    CHKNMVAL        ; check and copy file name
 685+ 166A DA 86 12                 jp      C,NAMERR        ; if Carry, file name error
 686+ 166D CD DB 16                 call    FILE_EXIST      ; check if file exists
 687+ 1670 D2 8A 12                 jp      NC,FLNTFND      ; file not found - error
 688+ 1673 DD 5E 14                 ld      E,(IX+$14)      ; load MSB into DE
 689+ 1676 DD 56 15                 ld      D,(IX+$15)
 690+ 1679 DD 4E 16                 ld      C,(IX+$16)      ; load LSB into BC
 691+ 167C DD 46 17                 ld      B,(IX+$17)
 692+ 167F ED 53 A8 81              ld      (MSB_SCT),DE    ; store DE
 693+ 1683 ED 43 AA 81              ld      (LSB_SCT),BC    ; store BC
 694+ 1687 DD 7E 1A                 ld      A,(IX+$1A)      ; load size in sectors
 695+ 168A 32 A7 81                 ld      (SCT_SIZ),A     ; store it
 696+ 168D 3E 7F                    ld      A,$7F           ; marker for file deleted
 697+ 168F DD 77 00                 ld      (IX),A          ; set file as deleted (quick erase)
 698+ 1692 3A B4 81                 ld      A,(TPBF4)       ; check for quick or full delete
 699+ 1695 B7                       or      A               ; A=0 quick erase
 700+ 1696 28 0A                    jr      Z,FIL_ERA5      ; jump if quick erase
 701+ 1698 AF                       xor     A               ; clear A
 702+ 1699 06 20                    ld      B,$20           ; full erase - clean entry (32 cells)
 703+ 169B DD 77 00     FIL_ERA6:   ld      (IX),A          ; reset cell
 704+ 169E DD 23                    inc     IX              ; next cell
 705+ 16A0 10 F9                    djnz    FIL_ERA6        ; repeat
 706+ 16A2 ED 5B B0 81  FIL_ERA5:   ld      DE,(TPBF2)      ; retrieve MSB of current directory sector
 707+ 16A6 ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve LSB of current directory sector
 708+ 16AA CD DD 10                 call    CF_WR_SEC       ; write sector
 709+ 16AD 38 27                    jr      C,WRT_ERR
 710+ 16AF 3A B4 81                 ld      A,(TPBF4)       ; check for quick or full delete
 711+ 16B2 B7                       or      A               ; if A=0 then quick erase
 712+ 16B3 28 1C                    jr      Z,FIL_ERA3      ; yes, leave
 713+ 16B5 CD AA 18                 call    CLRIOBF         ; no, full delete - clear I/O buffer
 714+ 16B8 ED 5B A8 81              ld      DE,(MSB_SCT)    ; load MSB of 1st sector of file block
 715+ 16BC ED 4B AA 81              ld      BC,(LSB_SCT)    ; load LSB of 1st sector of file block
 716+ 16C0 21 A7 81                 ld      HL,SCT_SIZ      ; pointer to size in sectors
 717+ 16C3 CD DD 10     FIL_ERA1:   call    CF_WR_SEC       ; erase sector
 718+ 16C6 38 0E                    jr      C,WRT_ERR
 719+ 16C8 03                       inc     BC              ; next sector
 720+ 16C9 78                       ld      A,B             ; is LSB rolled back to 0?
 721+ 16CA B1                       or      C
 722+ 16CB 20 01                    jr      NZ,FIL_ERA2     ; no, jump over
 723+ 16CD 13                       inc     DE              ; yes, increment MSB
 724+ 16CE 35           FIL_ERA2:   dec     (HL)            ; decrement sector counter
 725+ 16CF 20 F2                    jr      NZ,FIL_ERA1     ; repeat if other sectors
 726+ 16D1 CD A5 10     FIL_ERA3:   call    CF_STANDBY      ; set CF into stand-by mode
 727+ 16D4 AF                       xor     A               ; clear Carry
 728+ 16D5 C9                       ret
 729+ 16D6 CD A5 10     WRT_ERR:    call    CF_STANDBY
 730+ 16D9 37                       scf
 731+ 16DA C9                       ret
 732+ 16DB
 733+ 16DB
 734+ 16DB              ; *****************************************************************************
 735+ 16DB              ; F I L E    C H E C K
 736+ 16DB              ; check if file name already exists in directory
 737+ 16DB              ; file name must be stored from (DOSBFR) for 16 chars
 738+ 16DB              ; *****************************************************************************
 739+ 16DB 11 00 00     FILE_EXIST: ld      DE,$0000        ; beginning...
 740+ 16DE 01 01 00                 ld      BC,$0001        ; ...of directory
 741+ 16E1 FD 2A A3 81              ld      IY,(NTR_NBR)    ; load max entries
 742+ 16E5 CD 6F 10     CHKSTNM1:   call    CF_SETSTR       ; set sector to read
 743+ 16E8 CD B1 10                 call    CF_RD_SEC       ; read sector
 744+ 16EB DD 2A 9A 81  CHKSTNM2:   ld      IX,(IOBUFF)     ; beginning of I/O buffer
 745+ 16EF 2E 10                    ld      L,$10           ; reset entry counter
 746+ 16F1 DD 7E 00     CHKSTNM8:   ld      A,(IX)          ; load 1st char of entry name
 747+ 16F4 B7                       or      A               ; is it $00 (empty entry)?
 748+ 16F5 CA 25 17                 jp      Z,CHKSTNM10     ; yes, jump over
 749+ 16F8 FE 7F                    cp      $7F             ; is it $7F (deleted, re-usable, entry)?
 750+ 16FA 28 29                    jr      Z,CHKSTNM10     ; yes, jump over
 751+ 16FC 22 AE 81                 ld      (TPBF1),HL      ; store HL
 752+ 16FF ED 53 B0 81              ld      (TPBF2),DE      ; store DE
 753+ 1703 ED 43 B2 81              ld      (TPBF3),BC      ; store BC
 754+ 1707 DD E5                    push    IX              ; copy IX...
 755+ 1709 E1                       pop     HL              ; ...into HL
 756+ 170A ED 5B 98 81              ld      DE,(DOSBFR)     ; beginning of name file
 757+ 170E 06 10                    ld      B,$10           ; 16 chars to check
 758+ 1710 1A           CHKSTNM3:   ld      A,(DE)          ; load a char from name on disk
 759+ 1711 ED A1                    cpi                     ; compare with name from user
 760+ 1713 20 05                    jr      NZ,CHKSTNM6     ; chars are different, leave
 761+ 1715 13                       inc     DE              ; inc DE (HL is incremented by "cpi")
 762+ 1716 10 F8                    djnz    CHKSTNM3        ; repeat for 16 chars
 763+ 1718 18 2B                    jr      FLEXST          ; file exists in dir
 764+ 171A 2A AE 81     CHKSTNM6:   ld      HL,(TPBF1)      ; retrieve HL
 765+ 171D ED 5B B0 81              ld      DE,(TPBF2)      ; retrieve DE
 766+ 1721 ED 4B B2 81              ld      BC,(TPBF3)      ; retrieve sector counter
 767+ 1725 FD 2B        CHKSTNM10:  dec     IY              ; decrement entries left
 768+ 1727 E5                       push    HL              ; preserve current entry
 769+ 1728 FD E5                    push    IY              ; copy max allowed files...
 770+ 172A E1                       pop     HL              ; ...into HL
 771+ 172B 7C                       ld      A,H             ; chech if entries...
 772+ 172C B5                       or      L               ; ...are finished
 773+ 172D E1                       pop     HL              ; (retrieve current entry)
 774+ 172E 28 13                    jr      Z,FLNTEXS       ; entries finished - exit
 775+ 1730 C5                       push    BC              ; store bc
 776+ 1731 01 20 00                 ld      BC,$0020        ; dir entry size
 777+ 1734 DD 09                    add     IX,BC           ; next entry in current sector
 778+ 1736 C1                       pop     BC              ; retrieve BC
 779+ 1737 2D                       dec     L               ; decrement entry counter
 780+ 1738 20 B7                    jr      NZ,CHKSTNM8     ; more entries in this sector, repeat
 781+ 173A 03           CHKSTNM5:   inc     BC              ; entries finished, goto next sector
 782+ 173B 79                       ld      A,C             ; check if...
 783+ 173C B0                       or      B               ; BC=$0000?
 784+ 173D 20 01                    jr      NZ,CHKSTNM7     ; no, jump over
 785+ 173F 13                       inc     DE              ; yes, increment DE (MSB)
 786+ 1740 C3 E5 16     CHKSTNM7:   jp      CHKSTNM1        ; repeat
 787+ 1743 AF           FLNTEXS:    xor     A               ; file not found, reset Carry
 788+ 1744 C9                       ret                     ; return
 789+ 1745 37           FLEXST:     scf                     ; file is present - set Carry flag for error
 790+ 1746 C9                       ret
 791+ 1747
 792+ 1747
 793+ 1747              ; *****************************************************************************
 794+ 1747              ; FIND A FREE ENTRY
 795+ 1747              ; find a free entry in the directory to store a new file
 796+ 1747              ; *****************************************************************************
 797+ 1747 01 00 00     FNDFREDIR:  ld      BC,$0000        ; point to sector #0
 798+ 174A 11 00 00                 ld      DE,$0000
 799+ 174D CD 6F 10                 call    CF_SETSTR       ; set sector
 800+ 1750 CD B1 10                 call    CF_RD_SEC       ; read sector
 801+ 1753 2A 9A 81                 ld      HL,(IOBUFF)     ; address of I/O buffer
 802+ 1756 11 19 00                 ld      DE,$0019        ; pointer to number of allowed files (same of allowed blocks)
 803+ 1759 19                       add     HL,DE           ; find address
 804+ 175A 5E                       ld      E,(HL)          ; load max entries into DE
 805+ 175B 23                       inc     HL
 806+ 175C 56                       ld      D,(HL)
 807+ 175D D5                       push    DE              ; copy number of entries...
 808+ 175E FD E1                    pop     IY              ; ...into IY
 809+ 1760 01 01 00                 ld      BC,$0001        ; BC=$0001 (starting sector of dir) (LSB)
 810+ 1763 50                       ld      D,B             ; DE=$0000 (starting sector of dir) (MSB)
 811+ 1764 58                       ld      E,B
 812+ 1765 60                       ld      H,B             ; HL=$0000 (entry counter)
 813+ 1766 68                       ld      L,B
 814+ 1767 CD 6F 10     FNDFREDIR1: call    CF_SETSTR       ; set sector to read (BC-DE)
 815+ 176A CD B1 10                 call    CF_RD_SEC       ; read sector
 816+ 176D DD 2A 9A 81              ld      IX,(IOBUFF)     ; beginning of I/O buffer
 817+ 1771 DD 7E 00     FNDFREDIR2: ld      A,(IX)          ; load 1st char of entry name
 818+ 1774 FD 2B                    dec     IY              ; decrement number of entries
 819+ 1776 B7                       or      A               ; is it $00 (empty entry)?
 820+ 1777 28 23                    jr      Z,FNDFREDIR3    ; yes, found an entry
 821+ 1779 FE 7F                    cp      $7F             ; is it $7F (deleted entry)?
 822+ 177B 28 1F                    jr      Z,FNDFREDIR3    ; yes, found an entry
 823+ 177D C5                       push    BC              ; no, store BC
 824+ 177E 01 20 00                 ld      BC,$0020        ; load BC with directory entry size (32 bytes)
 825+ 1781 DD 09                    add     IX,BC           ; next entry in current sector
 826+ 1783 C1                       pop     BC              ; retrieve sector pointer
 827+ 1784 23                       inc     HL              ; increment entry counter
 828+ 1785 7D                       ld      A,L
 829+ 1786 E6 0F                    and     %00001111       ; just done 16 entries?
 830+ 1788 20 E7                    jr      NZ,FNDFREDIR2   ; no, repeat
 831+ 178A 03                       inc     BC              ; entries in this sector finished .. goto next sector
 832+ 178B 78                       ld      A,B             ; check if...
 833+ 178C B1                       or      C               ; ...BC=$000
 834+ 178D 20 01                    jr      NZ,FNDFREDIR5   ; no, jump over
 835+ 178F 13                       inc     DE              ; yes, increment DE (MSB)
 836+ 1790 E5           FNDFREDIR5: push    HL              ; preserve current entry
 837+ 1791 FD E5                    push    IY              ; copy max allowed files...
 838+ 1793 D1                       pop     DE              ; ...into HL
 839+ 1794 CD 05 4D                 call    CMP16           ; check if reached max allowed entries
 840+ 1797 E1                       pop     HL              ; (retrieve current entry)
 841+ 1798 30 CD                    jr      NC,FNDFREDIR1   ; no, there are other entries
 842+ 179A 37                       scf                     ; entries are finished, raise an error
 843+ 179B C9                       ret                     ; return
 844+ 179C ED 43 A1 81  FNDFREDIR3: ld      (DIR_SCT),BC    ; store sector of dir
 845+ 17A0 22 A3 81                 ld      (NTR_NBR),HL    ; store entry number
 846+ 17A3 AF                       xor     A               ; reset Carry
 847+ 17A4 C9                       ret
 848+ 17A5
 849+ 17A5
 850+ 17A5              ; *****************************************************************************
 851+ 17A5              ;   U T I L I T I E S
 852+ 17A5              ; *****************************************************************************
 853+ 17A5
 854+ 17A5              ; generate random disk ID
 855+ 17A5 2A B4 81     RND_ID:     ld      HL,(TPBF4)      ; retrieve pointer to beginning of name
 856+ 17A8 7E                       ld      A,(HL)          ; get first char
 857+ 17A9 12                       ld      (DE),A          ; copy it to disk ID
 858+ 17AA 13                       inc     DE              ; inc pointer
 859+ 17AB CD C0 17                 call    RND8            ; get a random char
 860+ 17AE CD D1 17                 call    CH0TO9          ; get a number from 0 to 9
 861+ 17B1 12                       ld      (DE),A          ; store it
 862+ 17B2 13                       inc     DE              ; inc pointer
 863+ 17B3 23                       inc     HL              ; next disk name char
 864+ 17B4 7E                       ld      A,(HL)          ; get second char from disk name
 865+ 17B5 12                       ld      (DE),A          ; store it
 866+ 17B6 13                       inc     DE              ; inc pointer
 867+ 17B7 CD C0 17                 call    RND8            ; get a random char
 868+ 17BA CD D1 17                 call    CH0TO9          ; get a number from 0 to 9
 869+ 17BD 12                       ld      (DE),A          ; store it
 870+ 17BE 13                       inc     DE              ; inc pointer
 871+ 17BF C9                       ret                     ; return to caller
 872+ 17C0
 873+ 17C0
 874+ 17C0              ; generate a pseudo-random number from TMR and R register
 875+ 17C0 3A E5 81     RND8:       ld      A,(TMRCNT)      ; load LSB of sys-timer
 876+ 17C3 47                       ld      B,A             ; copy into B
 877+ 17C4 ED 5F                    ld      A,R             ; load refresh register
 878+ 17C6 A8                       xor     B               ; A xor B
 879+ 17C7 47                       ld      B,A             ; copy into B
 880+ 17C8 0F                       rrca                    ; multiply by 32
 881+ 17C9 0F                       rrca
 882+ 17CA 0F                       rrca
 883+ 17CB EE 1F                    xor     $1F
 884+ 17CD 80                       add     A,B
 885+ 17CE DE FF                    sbc     A,255           ; carry
 886+ 17D0 C9                       ret                     ; return to caller
 887+ 17D1
 888+ 17D1
 889+ 17D1              ; char ported into 0-9 interval
 890+ 17D1 E6 0F        CH0TO9:     and     %00001111       ; get only low nibble
 891+ 17D3 FE 0A                    cp      $0A             ; is it < 10?
 892+ 17D5 38 02                    jr      C,CH0TO9E       ; yes, jump over
 893+ 17D7 D6 0A                    sub     $0A             ; subract 10
 894+ 17D9 C6 30        CH0TO9E:    add     $30             ; get a number from 0 to 9
 895+ 17DB C9                       ret
 896+ 17DC
 897+ 17DC
 898+ 17DC              ; first check DOS validity then load disk details
 899+ 17DC CD 2D 10     CHKDSKVAL:  call    CF_INIT         ; open CF card comm.
 900+ 17DF D8                       ret     C               ; if errors, leave
 901+ 17E0 C5                       push    BC              ; store BC
 902+ 17E1 D5                       push    DE              ; store DE
 903+ 17E2 E5                       push    HL              ; store HL
 904+ 17E3 01 00 00                 ld      BC,$0000        ; reset LSB of sector
 905+ 17E6 50                       ld      D,B             ; reset MSB of sector
 906+ 17E7 58                       ld      E,B
 907+ 17E8 CD 6F 10                 call    CF_SETSTR       ; set sector #0
 908+ 17EB CD B1 10                 call    CF_RD_SEC       ; read sector
 909+ 17EE 2A 9A 81                 ld      HL,(IOBUFF)     ; address of default conf. buffer
 910+ 17F1 11 0A 00                 ld      DE,$000A        ; point to disk DOS version
 911+ 17F4 19                       add     HL,DE
 912+ 17F5 11 13 11                 ld      DE,DFSCT0+10    ; get starting address of I/O buffer
 913+ 17F8 06 04                    ld      B,$04           ; 4 chars
 914+ 17FA 1A           CHKDSKVAL1: ld      A,(DE)          ; load char from DOS version into memory
 915+ 17FB BE                       cp      (HL)            ; compare with disk DOS version
 916+ 17FC 20 11                    jr      NZ,CHKDSKVALE   ; no match - so error
 917+ 17FE 13                       inc     DE              ; next source
 918+ 17FF 23                       inc     HL              ; next comparison
 919+ 1800 10 F8                    djnz    CHKDSKVAL1      ; repeat
 920+ 1802 2A 98 81                 ld      HL,(DOSBFR)     ; address of default conf. buffer
 921+ 1805 11 1D 00                 ld      DE,$001D        ; point to address of data area
 922+ 1808 19                       add     HL,DE           ; set pointer to beginning of identifies
 923+ 1809 5E                       ld      E,(HL)          ; load LSB
 924+ 180A 23                       inc     HL              ; increment pointer
 925+ 180B 56                       ld      D,(HL)          ; load MSB: DE now has the first sector of data area
 926+ 180C AF                       xor     A               ; no error - clear Carry flag
 927+ 180D 18 01                    jr      CHKDSKVAL2      ; jump over
 928+ 180F 37           CHKDSKVALE: scf                     ; error - set carry flag
 929+ 1810 E1           CHKDSKVAL2: pop     HL
 930+ 1811 D1                       pop     DE
 931+ 1812 C1                       pop     BC
 932+ 1813 C9                       ret                     ; return to caller
 933+ 1814
 934+ 1814
 935+ 1814              ; check name validity (only allowed chars) and copy it from string pool into a temp buff
 936+ 1814              ; Ipnputs: DE: pointer to dest. buffer
 937+ 1814              ; operation: copy (HL)->(DE) and pads to get a 16-chars name
 938+ 1814              ; destroys: A, BC, DE, HL
 939+ 1814 ED 4B 09 82  CHKNMVAL:   ld      BC,(DKLNPT)     ; load lenght of file name
 940+ 1818 79                       ld      A,C             ; lenght is max. 16 char, so we only check C
 941+ 1819 FE 11                    cp      $11             ; is it <=16?
 942+ 181B 38 02                    jr      C,CHKNMVAL1     ; yes, so jump over
 943+ 181D 0E 10                    ld      C,$10           ; no, get only 16 chars
 944+ 181F 41           CHKNMVAL1:  ld      B,C             ; copy lenght into B
 945+ 1820 0E 10                    ld      C,$10           ; char counter
 946+ 1822 2A 07 82                 ld      HL,(DKNMPT)     ; pointer to disk name
 947+ 1825 7E           CHKNMVAL2:  ld      A,(HL)          ; get a char from string name
 948+ 1826 CD 94 18                 call    CHK_NAM         ; check if valid
 949+ 1829 D8                       ret     C               ; no, file name error
 950+ 182A 12                       ld      (DE),A          ; yes, store char
 951+ 182B 13                       inc     DE              ; next I/O location
 952+ 182C 23                       inc     HL              ; next disk name char
 953+ 182D 0D                       dec     C               ; decrement number of chars copied
 954+ 182E 10 F5                    djnz    CHKNMVAL2       ; repeat until name ends
 955+ 1830 79                       ld      A,C             ; check if there are no empty chars in file
 956+ 1831 B7                       or      A
 957+ 1832 C8                       ret     Z               ; yes, job finished - return
 958+ 1833 3E 20                    ld      A,SPC           ; no, padding required
 959+ 1835 12           CHKNMVAL3:  ld      (DE),A          ; store char
 960+ 1836 13                       inc     DE              ; next location
 961+ 1837 0D                       dec     C               ; check if padding is over
 962+ 1838 20 FB                    jr      NZ,CHKNMVAL3    ; no, continue
 963+ 183A AF                       xor     A               ; clear Carry flag
 964+ 183B C9                       ret                     ; return to caller
 965+ 183C
 966+ 183C
 967+ 183C              ; store DE into (HL) and (HL+1)
 968+ 183C 73           DE2HL:      ld      (HL),E          ; LSB of size
 969+ 183D 23                       inc     HL
 970+ 183E 72                       ld      (HL),D          ; MSB of size
 971+ 183F 23                       inc     HL
 972+ 1840 C9                       ret                     ; return to caller
 973+ 1841
 974+ 1841
 975+ 1841              ; get DE from (HL) and (HL+1)
 976+ 1841 5E           HL2DE:      ld      E,(HL)          ; get LSB into E
 977+ 1842 23                       inc     HL              ; next location
 978+ 1843 56                       ld      D,(HL)          ; get MSB into D
 979+ 1844 23                       inc     HL              ; next location
 980+ 1845 C9                       ret                     ; return to caller
 981+ 1846
 982+ 1846
 983+ 1846              ; convert a 16/32-bit number into an ASCII string and print it
 984+ 1846              ; inputs: HL pointer to 32-bit number
 985+ 1846 5E           PRN32ASCII: ld      E,(HL)          ; load MSB into DE  <-- entry for 32-bit
 986+ 1847 23                       inc     HL
 987+ 1848 56                       ld      D,(HL)
 988+ 1849 23                       inc     HL
 989+ 184A 4E           PRN16ASCII: ld      C,(HL)          ; load LSB into BC   <-- entry for 16-bit (set DE to $0000 before to call)
 990+ 184B 23                       inc     HL
 991+ 184C 46                       ld      B,(HL)
 992+ 184D C5                       push    BC              ; copy BC...
 993+ 184E DD E1                    pop     IX              ; ...into IX
 994+ 1850 FD 21 AE 81  PRN16ASCIX: ld      IY,TPBF1        ; number is into DEIX - now, load pointer to destination buffer
 995+ 1854 CD CE 4D                 call    CLCN32          ; convert number in DEIX into ASCII number
 996+ 1857 21 AE 81                 ld      HL,TPBF1        ; address of ASCII number
 997+ 185A 7E           PRNTSIZ:    ld      A,(HL)          ; get a char
 998+ 185B B7                       or      A               ; is it $00 (end of string)?
 999+ 185C C8                       ret     Z               ; yes, leave
1000+ 185D CD 8E 23                 call    OUTC            ; no, print char
1001+ 1860 23                       inc     HL              ; next char
1002+ 1861 18 F7                    jr      PRNTSIZ         ; repeat
1003+ 1863
1004+ 1863
1005+ 1863              ; convert one or more bytes into memory in hex format
1006+ 1863              ; HL: pointer to number in memory - B: number of bytes to convert
1007+ 1863              ; destroys: A, D, HL
1008+ 1863 50           PRN_HEX:    ld      D,B             ; move bytes into D
1009+ 1864 7E           PRN_HEX1:   ld      A,(HL)          ; load value
1010+ 1865 CD 84 18                 call    BYTEHEX         ; print hex number
1011+ 1868 23                       inc     HL              ; next location
1012+ 1869 15                       dec     D               ; decrement bytes to convert
1013+ 186A 20 F8                    jr      NZ,PRN_HEX1     ; repeat
1014+ 186C C9                       ret
1015+ 186D
1016+ 186D
1017+ 186D              ; convert one or more words into memory in hex format
1018+ 186D              ; IX: pointer to number in memory - B: number of words to convert
1019+ 186D              ; destroys: AF, IX
1020+ 186D D5           PRN_WHEX:   push    DE
1021+ 186E 50                       ld      D,B
1022+ 186F DD 7E 01     PRN_WHEX1:  ld      A,(IX+1)        ; load MSB into A
1023+ 1872 CD 84 18                 call    BYTEHEX         ; print hex number
1024+ 1875 DD 7E 00                 ld      A,(IX)          ; load LSB into A
1025+ 1878 CD 84 18                 call    BYTEHEX         ; print hex number
1026+ 187B DD 23                    inc     IX
1027+ 187D DD 23                    inc     IX              ; next word
1028+ 187F 15                       dec     D               ; decrement words to convert
1029+ 1880 20 ED                    jr      NZ,PRN_WHEX1    ; repeat
1030+ 1882 D1                       pop     DE
1031+ 1883 C9                       ret
1032+ 1884
1033+ 1884
1034+ 1884              ; print A in hex format
1035+ 1884 C5           BYTEHEX:    push    BC
1036+ 1885 D5                       push    DE
1037+ 1886 CD 1A 4C                 call    BYT2ASC         ; convert to HEX and get back into BC
1038+ 1889 78                       ld      A,B
1039+ 188A CD 8E 23                 call    OUTC            ; print left nibble
1040+ 188D 79                       ld      A,C
1041+ 188E CD 8E 23                 call    OUTC            ; print right nibble
1042+ 1891 D1                       pop     DE
1043+ 1892 C1                       pop     BC
1044+ 1893 C9                       ret                     ; return to caller
1045+ 1894
1046+ 1894
1047+ 1894              ; check for non-allowed chars in disk/file names - allowed chars: '0'-'9' and 'A'-'Z'
1048+ 1894              ; input: A -> char to check
1049+ 1894              ; return: C is set if ERROR, reset otherwise
1050+ 1894 FE 20        CHK_NAM:    cp      SPC             ; is it a space?
1051+ 1896 C8                       ret     Z               ; return if equal (C is reset)
1052+ 1897 FE 2D                    cp      '-'             ; is it a minus?
1053+ 1899 C8                       ret     Z               ; return if equal
1054+ 189A FE 30                    cp      '0'             ; char < '0' ?
1055+ 189C D8                       ret     C               ; yes, disk name error
1056+ 189D FE 3A                    cp      ':'             ; is char <= '9' ?
1057+ 189F 38 07                    jr      C,CHK_C_CF      ; yes, leave
1058+ 18A1 E6 5F                    and     %01011111       ; for letters, only UPPER CASE
1059+ 18A3 FE 41                    cp      'A'             ; is char >= 'A' ?
1060+ 18A5 D8                       ret     C               ; no, error
1061+ 18A6 FE 5B                    cp      '['             ; is char <= 'Z' ? (if yes, C=1, then C=0; otherwise, C=0 then C=1)
1062+ 18A8 3F           CHK_C_CF:   ccf                     ; Carry complement (invert Carry)
1063+ 18A9 C9           CHK_NAM_LV: ret                     ; return to caller
1064+ 18AA
1065+ 18AA
1066+ 18AA
1067+ 18AA              ; clear I/O buffer
1068+ 18AA F5           CLRIOBF:    push    AF              ; store AF
1069+ 18AB C5                       push    BC              ; store BC
1070+ 18AC E5                       push    HL              ; store HL
1071+ 18AD 2A 9A 81                 ld 	    HL,(IOBUFF)     ; load address of last BASIC location
1072+ 18B0 01 02 00                 ld      BC,$0002        ; B=256 iterations ($00); C=repeat 2 times
1073+ 18B3 AF           CLRBUFF:    xor     A               ; reset A
1074+ 18B4 77           RSTIOBF:    ld      (HL),A          ; reset cell
1075+ 18B5 23                       inc     HL              ; next cell
1076+ 18B6 10 FC                    djnz    RSTIOBF         ; repeat for 256 times
1077+ 18B8 0D                       dec     C               ; decrement C
1078+ 18B9 20 F9                    jr      NZ,RSTIOBF      ; repeat if not zero
1079+ 18BB E1                       pop     HL              ; retrieve HL
1080+ 18BC C1                       pop     BC              ; retrieve BC
1081+ 18BD F1                       pop     AF              ; retrieve AF
1082+ 18BE C9                       ret                     ; return to caller
1083+ 18BF
1084+ 18BF
1085+ 18BF              ; clear DOS buffer
1086+ 18BF F5           CLRDOSBF:   push    AF
1087+ 18C0 C5                       push    BC
1088+ 18C1 E5                       push    HL
1089+ 18C2 2A 98 81                 ld 	    HL,(DOSBFR)     ; load address of last BASIC location
1090+ 18C5 01 01 20                 ld      BC,$2001        ; B=32 iterations; C=repeat 1 time
1091+ 18C8 C3 B3 18                 jp      CLRBUFF         ; continue
# file closed: ../include/dos/dos-1.01.asm
  84  18CB
  85  18CB              ; include the latest version of the LM80C BASIC interpreter
  86  18CB                  INCLUDE "../include/basic/basic-1.06.asm"
# file opened: ../include/basic/basic-1.06.asm
   1+ 18CB              ; ------------------------------------------------------------------------------
   2+ 18CB              ; LM80C BASIC (32K/64K) - R3.20
   3+ 18CB              ; ------------------------------------------------------------------------------
   4+ 18CB              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 18CB              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 18CB              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 18CB              ; kind of warranty: you can use them at your own risk.
   8+ 18CB              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 18CB              ; maintain the copyright notices, include this advice and the note to the
  10+ 18CB              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 18CB              ; redistribuite them.
  12+ 18CB              ; https://www.leonardomiliani.com
  13+ 18CB              ;
  14+ 18CB              ; Please support me by visiting the following links:
  15+ 18CB              ; Main project page: https://www.leonardomiliani.com
  16+ 18CB              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 18CB              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 18CB              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 18CB              ; ------------------------------------------------------------------------------
  20+ 18CB              ; LM80C BASIC 64K - originally based on the following NASCOM BASIC versions:
  21+ 18CB              ; 4.7  - original version by NASCOM/MICROSOFT
  22+ 18CB              ; 4.7b - modified version by Grant Searle (additional commands & functions)
  23+ 18CB
  24+ 18CB
  25+ 18CB              ;------------------------------------------------------------------------------
  26+ 18CB              ;  L M 8 0 C   B A S I C
  27+ 18CB              ;------------------------------------------------------------------------------
  28+ 18CB
  29+ 18CB              ; GENERAL EQUATES
  30+ 18CB
  31+ 18CB              NLLCR           equ     $00             ; null char (used as space/empty char in video prints)
  32+ 18CB              CTRLC           equ     $03             ; Control "C"
  33+ 18CB              CTRLG           equ     $07             ; Control "G"
  34+ 18CB              BKSP            equ     $08             ; Back space
  35+ 18CB              LF              equ     $0A             ; Line feed
  36+ 18CB              CS              equ     $0C             ; Clear screen
  37+ 18CB              CR              equ     $0D             ; Carriage return
  38+ 18CB              CTRLO           equ     $0F             ; Control "O"
  39+ 18CB              CTRLQ           equ     $11             ; Control "Q"
  40+ 18CB              CTRLR           equ     $12             ; Control "R"
  41+ 18CB              CTRLS           equ     $13             ; Control "S"
  42+ 18CB              CTRLU           equ     $15             ; Control "U"
  43+ 18CB              HOME            equ     $19             ; Home (cursor at 0,0)
  44+ 18CB              ESC             equ     $1B             ; Escape
  45+ 18CB              SPC             equ     $20             ; Space
  46+ 18CB              DEL             equ     $7F             ; Delete
  47+ 18CB              INSRT           equ     $1A             ; Insert Key
  48+ 18CB              ; cursor ASCII codes
  49+ 18CB              CRSLFT          equ     $1C             ; cursor left
  50+ 18CB              CRSRGT          equ     $1D             ; cursor right
  51+ 18CB              CRSUP           equ     $1E             ; cursor up
  52+ 18CB              CRSDN           equ     $1F             ; cursor down
  53+ 18CB
  54+ 18CB
  55+ 18CB              ;-------------------------------------------------------------------------
  56+ 18CB              ; BASIC ERROR MESSAGES
  57+ 18CB              ; the interpreter looks for a single-byte code in the following list,
  58+ 18CB              ; then loads the corresponding memory pointer in "ERRTBL" table to
  59+ 18CB              ; find where to retrieve the message text in "ERRORS"
  60+ 18CB
  61+ 18CB              ; BASIC ERROR CODE VALUES
  62+ 18CB              ; These values act as an offset to point to the error message into the error table
  63+ 18CB              ; must be incremented by 2 because they point to a word address jump
  64+ 18CB              NF      equ     $00     ; NEXT without FOR
  65+ 18CB              SN      equ     $02     ; Syntax error
  66+ 18CB              RG      equ     $04     ; RETURN without GOSUB
  67+ 18CB              OD      equ     $06     ; Out of DATA
  68+ 18CB              FC      equ     $08     ; Function call error
  69+ 18CB              OV      equ     $0A     ; Overflow
  70+ 18CB              OM      equ     $0C     ; Out of memory
  71+ 18CB              UL      equ     $0E     ; Undefined line number
  72+ 18CB              BS      equ     $10     ; Bad subscript
  73+ 18CB              DD      equ     $12     ; Re-Dimensioned array
  74+ 18CB              DZ      equ     $14     ; Division by zero (/0)
  75+ 18CB              ID      equ     $16     ; Illegal direct
  76+ 18CB              TM      equ     $18     ; Type mis-match
  77+ 18CB              OS      equ     $1A     ; Out of string space
  78+ 18CB              LS      equ     $1C     ; String too long
  79+ 18CB              ST      equ     $1E     ; String formula too complex
  80+ 18CB              CN      equ     $20     ; Can't continue
  81+ 18CB              UF      equ     $22     ; Undefined FN function
  82+ 18CB              MO      equ     $24     ; Missing operand
  83+ 18CB              HX      equ     $26     ; HEX error
  84+ 18CB              BN      equ     $28     ; BIN error
  85+ 18CB              GM      equ     $2A     ; No Graphics Mode
  86+ 18CB              SC      equ     $2C     ; Serial configuration
  87+ 18CB              SA      equ     $2E     ; Serial port already open
  88+ 18CB              SO      equ     $30     ; Serial buffer overrun
  89+ 18CB              HP      equ     $32     ; HELP call
  90+ 18CB              IM      equ     $34     ; Illegal indirect
  91+ 18CB              NR      equ     $36     ; Device not ready
  92+ 18CB              D0      equ     $38     ; DOS not enabled
  93+ 18CB              D1      equ     $3A     ; Disk/File name error
  94+ 18CB              D2      equ     $3C     ; Disk geometry error
  95+ 18CB              D3      equ     $3E     ; Save error
  96+ 18CB              D4      equ     $40     ; Load error
  97+ 18CB              D5      equ     $42     ; Disk full error
  98+ 18CB              D6      equ     $44     ; Duplicate file name error
  99+ 18CB              D7      equ     $46     ; DOS version error
 100+ 18CB              D8      equ     $48     ; File not found error
 101+ 18CB
 102+ 18CB
 103+ 18CB              ; BASIC ERROR POINTER TABLE
 104+ 18CB              ERRTBL: equ $
 105+ 18CB 15 19        NFPTR:  defw    NFMSG
 106+ 18CD 26 19        SNPTR:  defw    SNMSG
 107+ 18CF 2D 19        RGPTR:  defw    RGMSG
 108+ 18D1 42 19        ODPTR:  defw    ODMSG
 109+ 18D3 4E 19        FCPTR:  defw    FCMSG
 110+ 18D5 64 19        OVPTR:  defw    OVMSG
 111+ 18D7 6D 19        OMPTR:  defw    OMMSG
 112+ 18D9 7B 19        ULPTR:  defw    ULMSG
 113+ 18DB 8A 19        BSPTR:  defw    BSMSG
 114+ 18DD 98 19        DDPTR:  defw    DDMSG
 115+ 18DF AD 19        DZPTR:  defw    DZMSG
 116+ 18E1 BE 19        IDPTR:  defw    IDMSG
 117+ 18E3 D2 19        TMPTR:  defw    TMMSG
 118+ 18E5 E1 19        OSPTR:  defw    OSMSG
 119+ 18E7 F5 19        LSPTR:  defw    LSMSG
 120+ 18E9 05 1A        STPTR:  defw    STMSG
 121+ 18EB 20 1A        CNPTR:  defw    CNMSG
 122+ 18ED 2F 1A        UFPTR:  defw    UFMSG
 123+ 18EF 45 1A        MOPTR:  defw    MOMSG
 124+ 18F1 55 1A        HXPTR:  defw    HXMSG
 125+ 18F3 60 1A        BNPTR:  defw    BNMSG
 126+ 18F5 6B 1A        GMPRT:  defw    GMMSG
 127+ 18F7 7C 1A        SCPTR:  defw    SCMSG
 128+ 18F9 91 1A        SAPTR:  defw    SAMSG
 129+ 18FB AA 1A        SOPTR:  defw    SOMSG
 130+ 18FD C0 1A        HPPTR:  defw    HPMSG
 131+ 18FF CA 1A        IMPRT:  defw    IMMSG
 132+ 1901 E0 1A        NRPRT:  defw    NRMSG
 133+ 1903 F1 1A        D0PTR:  defw    D0MSG
 134+ 1905 01 1B        D1PRT:  defw    D1MSG
 135+ 1907 0D 1B        D2PRT:  defw    D2MSG
 136+ 1909 1B 1B        D3PRT:  defw    D3MSG
 137+ 190B 20 1B        D4PTR:  defw    D4MSG
 138+ 190D 25 1B        D5PTR:  defw    D5MSG
 139+ 190F 2F 1B        D6PTR:  defw    D6MSG
 140+ 1911 43 1B        D7PRT:  defw    D7MSG
 141+ 1913 4F 1B        D8PTR:  defw    D8MSG
 142+ 1915
 143+ 1915
 144+ 1915              ; BASIC ERROR MESSAGE LIST
 145+ 1915              ERRORS  equ $
 146+ 1915 4E 45 58 54  NFMSG:  defb    "NEXT Without FOR",0
 146+ 1919 20 57 69 74
 146+ 191D 68 6F 75 74
 146+ 1921 20 46 4F 52
 146+ 1925 00
 147+ 1926 53 79 6E 74  SNMSG:  defb    "Syntax",0
 147+ 192A 61 78 00
 148+ 192D 52 45 54 55  RGMSG:  defb    "RETURN without GOSUB",0
 148+ 1931 52 4E 20 77
 148+ 1935 69 74 68 6F
 148+ 1939 75 74 20 47
 148+ 193D 4F 53 55 42
 148+ 1941 00
 149+ 1942 4F 75 74 20  ODMSG:  defb    "Out of DATA",0
 149+ 1946 6F 66 20 44
 149+ 194A 41 54 41 00
 150+ 194E 49 6C 6C 65  FCMSG:  defb    "Illegal Function Call",0
 150+ 1952 67 61 6C 20
 150+ 1956 46 75 6E 63
 150+ 195A 74 69 6F 6E
 150+ 195E 20 43 61 6C
 150+ 1962 6C 00
 151+ 1964 4F 76 65 72  OVMSG:  defb    "Overflow",0
 151+ 1968 66 6C 6F 77
 151+ 196C 00
 152+ 196D 4F 75 74 20  OMMSG:  defb    "Out of Memory",0
 152+ 1971 6F 66 20 4D
 152+ 1975 65 6D 6F 72
 152+ 1979 79 00
 153+ 197B 55 6E 64 65  ULMSG:  defb    "Undefined Line",0
 153+ 197F 66 69 6E 65
 153+ 1983 64 20 4C 69
 153+ 1987 6E 65 00
 154+ 198A 42 61 64 20  BSMSG:  defb    "Bad Subscript",0
 154+ 198E 53 75 62 73
 154+ 1992 63 72 69 70
 154+ 1996 74 00
 155+ 1998 52 65 2D 44  DDMSG:  defb    "Re-Dimensioned Array",0
 155+ 199C 69 6D 65 6E
 155+ 19A0 73 69 6F 6E
 155+ 19A4 65 64 20 41
 155+ 19A8 72 72 61 79
 155+ 19AC 00
 156+ 19AD 44 69 76 69  DZMSG:  defb    "Division by Zero",0
 156+ 19B1 73 69 6F 6E
 156+ 19B5 20 62 79 20
 156+ 19B9 5A 65 72 6F
 156+ 19BD 00
 157+ 19BE 49 6C 6C 65  IDMSG:  defb    "Illegal Direct Mode",0
 157+ 19C2 67 61 6C 20
 157+ 19C6 44 69 72 65
 157+ 19CA 63 74 20 4D
 157+ 19CE 6F 64 65 00
 158+ 19D2 54 79 70 65  TMMSG:  defb    "Type Mis-match",0
 158+ 19D6 20 4D 69 73
 158+ 19DA 2D 6D 61 74
 158+ 19DE 63 68 00
 159+ 19E1 4F 75 74 20  OSMSG:  defb    "Out of String Space",0
 159+ 19E5 6F 66 20 53
 159+ 19E9 74 72 69 6E
 159+ 19ED 67 20 53 70
 159+ 19F1 61 63 65 00
 160+ 19F5 53 74 72 69  LSMSG:  defb    "String Too Long",0
 160+ 19F9 6E 67 20 54
 160+ 19FD 6F 6F 20 4C
 160+ 1A01 6F 6E 67 00
 161+ 1A05 53 74 72 69  STMSG:  defb    "String Formula Too Complex",0
 161+ 1A09 6E 67 20 46
 161+ 1A0D 6F 72 6D 75
 161+ 1A11 6C 61 20 54
 161+ 1A15 6F 6F 20 43
 161+ 1A19 6F 6D 70 6C
 161+ 1A1D 65 78 00
 162+ 1A20 43 61 6E 27  CNMSG:  defb    "Can't Continue",0
 162+ 1A24 74 20 43 6F
 162+ 1A28 6E 74 69 6E
 162+ 1A2C 75 65 00
 163+ 1A2F 55 6E 64 65  UFMSG:  defb    "Undefined FN Function",0
 163+ 1A33 66 69 6E 65
 163+ 1A37 64 20 46 4E
 163+ 1A3B 20 46 75 6E
 163+ 1A3F 63 74 69 6F
 163+ 1A43 6E 00
 164+ 1A45 4D 69 73 73  MOMSG:  defb    "Missing Operand",0
 164+ 1A49 69 6E 67 20
 164+ 1A4D 4F 70 65 72
 164+ 1A51 61 6E 64 00
 165+ 1A55 48 45 58 20  HXMSG:  defb    "HEX Format",0
 165+ 1A59 46 6F 72 6D
 165+ 1A5D 61 74 00
 166+ 1A60 42 49 4E 20  BNMSG:  defb    "BIN Format",0
 166+ 1A64 46 6F 72 6D
 166+ 1A68 61 74 00
 167+ 1A6B 4E 6F 20 47  GMMSG:  defb    "No Graphics Mode",0
 167+ 1A6F 72 61 70 68
 167+ 1A73 69 63 73 20
 167+ 1A77 4D 6F 64 65
 167+ 1A7B 00
 168+ 1A7C 53 65 72 69  SCMSG:  defb    "Serial Configuration",0
 168+ 1A80 61 6C 20 43
 168+ 1A84 6F 6E 66 69
 168+ 1A88 67 75 72 61
 168+ 1A8C 74 69 6F 6E
 168+ 1A90 00
 169+ 1A91 53 65 72 69  SAMSG:  defb    "Serial Port Already Open",0
 169+ 1A95 61 6C 20 50
 169+ 1A99 6F 72 74 20
 169+ 1A9D 41 6C 72 65
 169+ 1AA1 61 64 79 20
 169+ 1AA5 4F 70 65 6E
 169+ 1AA9 00
 170+ 1AAA 53 65 72 69  SOMSG:  defb    "Serial Buffer Overrun",0
 170+ 1AAE 61 6C 20 42
 170+ 1AB2 75 66 66 65
 170+ 1AB6 72 20 4F 76
 170+ 1ABA 65 72 72 75
 170+ 1ABE 6E 00
 171+ 1AC0 48 45 4C 50  HPMSG:  defb    "HELP Call",0
 171+ 1AC4 20 43 61 6C
 171+ 1AC8 6C 00
 172+ 1ACA 49 6C 6C 65  IMMSG:  defb    "Illegal Indirect Mode",0
 172+ 1ACE 67 61 6C 20
 172+ 1AD2 49 6E 64 69
 172+ 1AD6 72 65 63 74
 172+ 1ADA 20 4D 6F 64
 172+ 1ADE 65 00
 173+ 1AE0 44 65 76 69  NRMSG:  defb    "Device Not Ready",0
 173+ 1AE4 63 65 20 4E
 173+ 1AE8 6F 74 20 52
 173+ 1AEC 65 61 64 79
 173+ 1AF0 00
 174+ 1AF1 44 4F 53 20  D0MSG:  defb    "DOS Not Enabled",0
 174+ 1AF5 4E 6F 74 20
 174+ 1AF9 45 6E 61 62
 174+ 1AFD 6C 65 64 00
 175+ 1B01 4E 61 6D 65  D1MSG:  defb    "Name String",0
 175+ 1B05 20 53 74 72
 175+ 1B09 69 6E 67 00
 176+ 1B0D 44 69 73 6B  D2MSG:  defb    "Disk Geometry",0
 176+ 1B11 20 47 65 6F
 176+ 1B15 6D 65 74 72
 176+ 1B19 79 00
 177+ 1B1B 53 61 76 65  D3MSG:  defb    "Save",0
 177+ 1B1F 00
 178+ 1B20 4C 6F 61 64  D4MSG:  defb    "Load",0
 178+ 1B24 00
 179+ 1B25 44 69 73 6B  D5MSG:  defb    "Disk Full",0
 179+ 1B29 20 46 75 6C
 179+ 1B2D 6C 00
 180+ 1B2F 44 75 70 6C  D6MSG:  defb    "Duplicate File Name",0
 180+ 1B33 69 63 61 74
 180+ 1B37 65 20 46 69
 180+ 1B3B 6C 65 20 4E
 180+ 1B3F 61 6D 65 00
 181+ 1B43 44 4F 53 20  D7MSG:  defb    "DOS Version",0
 181+ 1B47 56 65 72 73
 181+ 1B4B 69 6F 6E 00
 182+ 1B4F 46 69 6C 65  D8MSG:  defb    "File Not Found",0
 182+ 1B53 20 4E 6F 74
 182+ 1B57 20 46 6F 75
 182+ 1B5B 6E 64 00
 183+ 1B5E
 184+ 1B5E
 185+ 1B5E              ;-----------------------------------------------------------------------------
 186+ 1B5E              ; STARTING POINTS FOR BASIC BOOT
 187+ 1B5E              ; COLD: reset every memory pointer, acting as a power-up boot
 188+ 1B5E              ; WARM: preserve program in memory, keeping every current pointer
 189+ 1B5E
 190+ 1B5E C3 64 1B     COLD:   jp      STARTB          ; Jump for cold start
 191+ 1B61 C3 2C 1C     WARM:   jp      WARMST          ; Jump for warm start
 192+ 1B64
 193+ 1B64 C3 6B 1B     STARTB: jp      CSTART          ; Jump to initialise
 194+ 1B67 82 26                defw    DEINT           ; Get integer -32768 to 32767
 195+ 1B69 47 2E                defw    ABPASS          ; Return integer in AB
 196+ 1B6B 21 5E 80     CSTART: ld      HL,WRKSPC       ; Start of workspace RAM
 197+ 1B6E F9                   ld      SP,HL           ; Set up a temporary stack
 198+ 1B6F C3 F0 4C             jp      INITST          ; Go to initialise
 199+ 1B72
 200+ 1B72 21 1C 1F     SYSINIT:ld      HL,INITAB       ; Initialise workspace
 201+ 1B75 01 DC 00             ld      BC,INITBE-INITAB+3; Bytes to copy
 202+ 1B78 11 5E 80             ld      DE,WRKSPC       ; Into workspace RAM
 203+ 1B7B ED B0                ldir                    ; Copy data
 204+ 1B7D EB                   ex      DE,HL           ; Copy DE into HL
 205+ 1B7E F9                   ld      SP,HL           ; Temporary stack
 206+ 1B7F CD E5 21             call    CLREG           ; Clear registers and stack
 207+ 1B82 CD 99 28             call    PRNTCRLF        ; Output CRLF
 208+ 1B85 32 91 81             ld      (BUFFER+88+1),A ; Mark end of buffer
 209+ 1B88 32 6E 82             ld      (PROGST),A      ; Initialise program area
 210+ 1B8B 18 13                jr      MNOASK          ; usually, don't ask for memory top (only when there are errors)
 211+ 1B8D 21 B0 1C     MSIZE:  ld      HL,MEMMSG       ; Point to message
 212+ 1B90 CD 65 2F             call    PRS             ; Output "Memory size"
 213+ 1B93 CD 02 22             call    PROMPT          ; Get input with '?'
 214+ 1B96 CD 44 09             call    CURSOR_ON       ; enable cursor
 215+ 1B99 CD CC 25             call    GETCHR          ; Get next character
 216+ 1B9C B7                   or      A               ; Set flags
 217+ 1B9D C2 B5 1B             jp      NZ,TSTMEM       ; If number - Test if RAM there
 218+ 1BA0 21 D2 82     MNOASK: ld      HL,STLOOK       ; Point to start of RAM
 219+ 1BA3 23           MLOOP:  inc     HL              ; Next byte
 220+ 1BA4 7C                   ld      A,H             ; Above address FFFF ?
 221+ 1BA5 B5                   or      L
 222+ 1BA6 CA C7 1B             jp      Z,SETTOP        ; Yes - 64K RAM
 223+ 1BA9 7E                   ld      A,(HL)          ; Get contents
 224+ 1BAA 47                   ld      B,A             ; Save it
 225+ 1BAB 2F                   cpl                     ; Flip all bits
 226+ 1BAC 77                   ld      (HL),A          ; Put it back
 227+ 1BAD BE                   cp      (HL)            ; RAM there if same
 228+ 1BAE 70                   ld      (HL),B          ; Restore old contents
 229+ 1BAF CA A3 1B             jp      Z,MLOOP         ; If RAM - test next byte
 230+ 1BB2 C3 C7 1B             jp      SETTOP          ; Top of RAM found
 231+ 1BB5
 232+ 1BB5 CD 9C 26     TSTMEM: call    ATOH            ; Get high memory into DE
 233+ 1BB8 B7                   or      A               ; Set flags on last byte
 234+ 1BB9 C2 83 20             jp      NZ,SNERR        ; ?SN Error if bad character
 235+ 1BBC EB                   ex      DE,HL           ; Address into HL
 236+ 1BBD 2B                   dec     HL              ; Back one byte
 237+ 1BBE 3E D9                ld      A,%11011001     ; Test byte
 238+ 1BC0 46                   ld      B,(HL)          ; Get old contents
 239+ 1BC1 77                   ld      (HL),A          ; Load test byte
 240+ 1BC2 BE                   cp      (HL)            ; RAM there if same
 241+ 1BC3 70                   ld      (HL),B          ; Restore old contents
 242+ 1BC4 C2 8D 1B             jp      NZ,MSIZE        ; Ask again if no RAM
 243+ 1BC7
 244+ 1BC7 CD 59 09     SETTOP: call    CURSOR_OFF      ; disable cursor
 245+ 1BCA 2B                   dec     HL              ; Back one byte
 246+ 1BCB 11 D1 82             ld      DE,STLOOK-1     ; See if enough RAM
 247+ 1BCE CD 7D 23             call    CPDEHL          ; Compare DE with HL
 248+ 1BD1 DA 8D 1B             jp      C,MSIZE         ; Ask again if not enough RAM
 249+ 1BD4 3A 4A 82             ld      A,(DOS_EN)      ; read if the user enabled/disabled DOS while booting
 250+ 1BD7 1F                   rra                     ; is DOS disabled?
 251+ 1BD8 30 12                jr      NC,NODOS        ; yes, so jump over
 252+ 1BDA 11 00 FE             ld      DE,0-512        ; no, so reserve 512 bytes on top of RAM...
 253+ 1BDD 19                   add     HL,DE           ; ...for I/O buffer...
 254+ 1BDE 22 9A 81             ld      (IOBUFF),HL     ; ...and store address
 255+ 1BE1 11 E0 FF             ld      DE,0-32         ; then, reserve 32 bytes...
 256+ 1BE4 19                   add     HL,DE           ; ...for DOS buffer...
 257+ 1BE5 22 98 81             ld      (DOSBFR),HL     ; ...and store address
 258+ 1BE8 11 FF FF             ld      DE,0-1          ; then, 1 more byte to go back to preserve...
 259+ 1BEB 19                   add     HL,DE           ; ... the 1st byte of buffer
 260+ 1BEC 11 9C FF     NODOS:  ld      DE,0-100        ; now, preserve 100 bytes for string space
 261+ 1BEF 22 96 81             ld      (LSTRAM),HL     ; Save last available RAM
 262+ 1BF2 19                   add     HL,DE           ; Allocate string space
 263+ 1BF3 22 AD 80             ld      (STRSPC),HL     ; Save string space
 264+ 1BF6 CD C0 21             call    CLRPTR          ; Clear program area
 265+ 1BF9 2A AD 80             ld      HL,(STRSPC)     ; Get end of memory
 266+ 1BFC 11 EF FF             ld      DE,0-17         ; Offset for free bytes
 267+ 1BFF 19                   add     HL,DE           ; Adjust HL
 268+ 1C00 11 6E 82             ld      DE,PROGST       ; Start of program text
 269+ 1C03 7D                   ld      A,L             ; Get LSB
 270+ 1C04 93                   sub     E               ; Adjust it
 271+ 1C05 6F                   ld      L,A             ; Re-save
 272+ 1C06 7C                   ld      A,H             ; Get MSB
 273+ 1C07 9A                   sbc     A,D             ; Adjust it
 274+ 1C08 67                   ld      H,A             ; Re-save
 275+ 1C09 E5                   push    HL              ; Save bytes free
 276+ 1C0A 21 52 1C             ld      HL,SIGNON       ; Sign-on message
 277+ 1C0D CD 65 2F             call    PRS             ; Output string
 278+ 1C10 3A 4A 82             ld      A,(DOS_EN)      ; check if DOS is enabled
 279+ 1C13 B7                   or      A
 280+ 1C14 28 06                jr      Z,SETTP1        ; no DOS, jump over
 281+ 1C16 21 93 1C             ld      HL,DOSMSG       ; DOS message
 282+ 1C19 CD 65 2F             call    PRS
 283+ 1C1C 21 3B 1C     SETTP1: ld      HL,BLNSPC       ; Empty space
 284+ 1C1F CD 65 2F             call    PRS             ; Output string
 285+ 1C22 E1                   pop     HL              ; Get bytes free back
 286+ 1C23 CD 04 3A             call    PRNTHL          ; Output amount of free memory
 287+ 1C26 21 44 1C             ld      HL,BFREE        ; " Bytes free" message
 288+ 1C29 CD 65 2F             call    PRS             ; Output string
 289+ 1C2C
 290+ 1C2C 31 3D 81     WARMST: ld      SP,STACK        ; Temporary stack
 291+ 1C2F CD E5 21     BRKRET: call    CLREG           ; Clear registers and stack
 292+ 1C32 CD 2B 47             call    RESFN           ; reset FN keys and auto-repeat
 293+ 1C35 CD 44 09             call    CURSOR_ON       ; enable cursor
 294+ 1C38 C3 E3 20             jp      PRNTOK          ; Go to get command line
 295+ 1C3B
 296+ 1C3B 20 20 20 20  BLNSPC: defb    "        ",0    ; 8 empty cells to align the "XXXX Bytes free" message
 296+ 1C3F 20 20 20 20
 296+ 1C43 00
 297+ 1C44 20 42 79 74  BFREE:  defb    " Bytes free",CR,CR,0
 297+ 1C48 65 73 20 66
 297+ 1C4C 72 65 65 0D
 297+ 1C50 0D 00
 298+ 1C52
 299+ 1C52 4C 4D 38 30  SIGNON: defb    "LM80C BASIC 3.20 ",251,"2021 L.Miliani"
 299+ 1C56 43 20 42 41
 299+ 1C5A 53 49 43 20
 299+ 1C5E 33 2E 32 30
 299+ 1C62 20 FB 32 30
 299+ 1C66 32 31 20 4C
 299+ 1C6A 2E 4D 69 6C
 299+ 1C6E 69 61 6E 69
 300+ 1C72 20 5A 38 30          defb    " Z80 BASIC 4.7  ",251,"1978 Microsoft",CR,0
 300+ 1C76 20 42 41 53
 300+ 1C7A 49 43 20 34
 300+ 1C7E 2E 37 20 20
 300+ 1C82 FB 31 39 37
 300+ 1C86 38 20 4D 69
 300+ 1C8A 63 72 6F 73
 300+ 1C8E 6F 66 74 0D
 300+ 1C92 00
 301+ 1C93 20 20 20 20  DOSMSG: defb    "     LM80C DOS ","1.01","  Loaded",CR,0
 301+ 1C97 20 4C 4D 38
 301+ 1C9B 30 43 20 44
 301+ 1C9F 4F 53 20 31
 301+ 1CA3 2E 30 31 20
 301+ 1CA7 20 4C 6F 61
 301+ 1CAB 64 65 64 0D
 301+ 1CAF 00
 302+ 1CB0
 303+ 1CB0 4D 65 6D 6F  MEMMSG: defb    "Memory top",0
 303+ 1CB4 72 79 20 74
 303+ 1CB8 6F 70 00
 304+ 1CBB
 305+ 1CBB              ; The following list reports all the functions supported by the interpreter.
 306+ 1CBB              ; To add a custom function, the user must first insert the reserved word here,
 307+ 1CBB              ; then into the list of the reserved words below, and finally must increment the
 308+ 1CBB              ; ZSGN token value and all the following ones after ZSGN by 1 for every added
 309+ 1CBB              ; function.
 310+ 1CBB
 311+ 1CBB              ; FUNCTION ADDRESS TABLE (this is a sort of offset table)
 312+ 1CBB              ; this list must be coherent with the tokens' functions list. This means that every
 313+ 1CBB              ; entry here must have the corresponding entry in the tokens list.
 314+ 1CBB 79 38        FNCTAB: defw    SGN
 315+ 1CBD 0F 2E                defw    TMR         ; added by Leonardo Miliani
 316+ 1CBF 3D 39                defw    INT
 317+ 1CC1 8F 38                defw    ABS_        ; '_' necessary to avoid assembler warnings
 318+ 1CC3 64 80                defw    USR
 319+ 1CC5 25 2E                defw    FRE
 320+ 1CC7 A0 32                defw    INP
 321+ 1CC9 53 2E                defw    POS
 322+ 1CCB 03 3B                defw    SQR
 323+ 1CCD E2 3B                defw    RND
 324+ 1CCF CD 36                defw    LOG
 325+ 1CD1 51 3B                defw    EXP
 326+ 1CD3 57 3C                defw    COS
 327+ 1CD5 5D 3C                defw    SIN
 328+ 1CD7 BE 3C                defw    TAN
 329+ 1CD9 D3 3C                defw    ATN
 330+ 1CDB 7C 33                defw    PEEK
 331+ 1CDD 3E 3D                defw    DEEK
 332+ 1CDF 83 33                defw    VPEEK       ; added by Leonardo Miliani
 333+ 1CE1 52 35                defw    VSTAT       ; added by Leonardo Miliani
 334+ 1CE3 5D 35                defw    SSTAT       ; added by Leonardo Miliani
 335+ 1CE5 71 35                defw    INKEY       ; added by Leonardo Miliani
 336+ 1CE7 97 40                defw    POINT       ; added by Leonardo Miliani
 337+ 1CE9 37 31                defw    INSTR       ; added by Leonardo Miliani
 338+ 1CEB D7 30                defw    LEN
 339+ 1CED EF 2E                defw    STR
 340+ 1CEF 67 32                defw    VAL
 341+ 1CF1 E6 30                defw    ASC
 342+ 1CF3 F7 30                defw    CHR
 343+ 1CF5 E4 4B                defw    HEX         ; added by Grant Searle
 344+ 1CF7 75 4C                defw    BIN         ; added by Grant Searle
 345+ 1CF9 07 31                defw    LEFT
 346+ 1CFB 2D 32                defw    RIGHT
 347+ 1CFD 37 32                defw    MID
 348+ 1CFF
 349+ 1CFF              ; RESERVED WORD LIST
 350+ 1CFF              ; Here are all the reserved words used by the interpreter
 351+ 1CFF              ; To add custom functions/commands, the user must insert the keyword
 352+ 1CFF              ; in this list, following the schematic
 353+ 1CFF C5 4E 44     WORDS:  defb    'E'+$80,"ND"            ; from here the list contains the COMMANDS
 354+ 1D02 C6 4F 52             defb    'F'+$80,"OR"
 355+ 1D05 CE 45 58 54          defb    'N'+$80,"EXT"
 356+ 1D09 C4 41 54 41          defb    'D'+$80,"ATA"
 357+ 1D0D C9 4E 50 55          defb    'I'+$80,"NPUT"
 357+ 1D11 54
 358+ 1D12 C4 49 4D             defb    'D'+$80,"IM"
 359+ 1D15 D2 45 41 44          defb    'R'+$80,"EAD"
 360+ 1D19 CC 45 54             defb    'L'+$80,"ET"
 361+ 1D1C C7 4F 54 4F          defb    'G'+$80,"OTO"
 362+ 1D20 D2 55 4E             defb    'R'+$80,"UN"
 363+ 1D23 C9 46                defb    'I'+$80,"F"
 364+ 1D25 D2 45 53 54          defb    'R'+$80,"ESTORE"
 364+ 1D29 4F 52 45
 365+ 1D2C C7 4F 53 55          defb    'G'+$80,"OSUB"
 365+ 1D30 42
 366+ 1D31 D2 45 54 55          defb    'R'+$80,"ETURN"
 366+ 1D35 52 4E
 367+ 1D37 D2 45 4D             defb    'R'+$80,"EM"            ; original REM
 368+ 1D3A D3 54 4F 50          defb    'S'+$80,"TOP"
 369+ 1D3E CF 55 54             defb    'O'+$80,"UT"
 370+ 1D41 CF 4E                defb    'O'+$80,"N"
 371+ 1D43 C6 49 4C 45          defb    'F'+$80,"ILES"          ; added by Leonardo Miliani
 371+ 1D47 53
 372+ 1D48 C5 52 41 53          defb    'E'+$80,"RASE"          ; added by Leonardo Miliani
 372+ 1D4C 45
 373+ 1D4D C4 49 53 4B          defb    'D'+$80,"ISK"           ; added by Leonardo Miliani
 374+ 1D51 D7 41 49 54          defb    'W'+$80,"AIT"
 375+ 1D55 C4 45 46             defb    'D'+$80,"EF"
 376+ 1D58 D0 4F 4B 45          defb    'P'+$80,"OKE"
 377+ 1D5C C4 4F 4B 45          defb    'D'+$80,"OKE"
 378+ 1D60 D6 50 4F 4B          defb    'V'+$80,"POKE"          ; added by Leonardo Miliani
 378+ 1D64 45
 379+ 1D65 D3 52 45 47          defb    'S'+$80,"REG"           ; added by Leonardo Miliani
 380+ 1D69 D6 52 45 47          defb    'V'+$80,"REG"           ; added by Leonardo Miliani
 381+ 1D6D D3 43 52 45          defb    'S'+$80,"CREEN"         ; changed by Leonardo Miliani
 381+ 1D71 45 4E
 382+ 1D73 CC 4F 43 41          defb    'L'+$80,"OCATE"         ; added by Leonardo Miliani
 382+ 1D77 54 45
 383+ 1D79 D3 4F 55 4E          defb    'S'+$80,"OUND"          ; added by Leonardo Miliani
 383+ 1D7D 44
 384+ 1D7E D6 4F 4C 55          defb    'V'+$80,"OLUME"         ; added by Leonardo Miliani
 384+ 1D82 4D 45
 385+ 1D84 D0 41 55 53          defb    'P'+$80,"AUSE"          ; added by Leonardo Miliani
 385+ 1D88 45
 386+ 1D89 C3 4F 4C 4F          defb    'C'+$80,"OLOR"          ; added by Leonardo Miliani
 386+ 1D8D 52
 387+ 1D8E D0 4C 4F 54          defb    'P'+$80,"LOT"           ; added by Leonardo Miliani
 388+ 1D92 C4 52 41 57          defb    'D'+$80,"RAW"           ; added by Leonardo Miliani
 389+ 1D96 C3 49 52 43          defb    'C'+$80,"IRCLE"         ; added by Leonardo Miliani
 389+ 1D9A 4C 45
 390+ 1D9C D0 41 49 4E          defb    'P'+$80,"AINT"          ; added by Leonardo Miliani
 390+ 1DA0 54
 391+ 1DA1 D3 45 52 49          defb    'S'+$80,"ERIAL"         ; added by Leonardo Miliani
 391+ 1DA5 41 4C
 392+ 1DA7 C8 45 4C 50          defb    'H'+$80,"ELP"           ; changed by Leonardo Miliani - was LINES
 393+ 1DAB C3 4C 53             defb    'C'+$80,"LS"            ; restored command
 394+ 1DAE CB 45 59             defb    'K'+$80,"EY"            ; added by Leonardo Miliani
 395+ 1DB1 CE 4D 49             defb    'N'+$80,"MI"            ; added by Leonardo Miliani
 396+ 1DB4 C7 50 52 49          defb    'G'+$80,"PRINT"         ; added by Leonardo Miliani
 396+ 1DB8 4E 54
 397+ 1DBA D7 49 44 54          defb    'W'+$80,"IDTH"
 397+ 1DBE 48
 398+ 1DBF D3 59 53             defb    'S'+$80,"YS"            ; added by Leonardo Miliani
 399+ 1DC2 D2 45 53 45          defb    'R'+$80,"ESET"          ; changed by Leonardo Miliani
 399+ 1DC6 54
 400+ 1DC7 C5 4C 53 45          defb    'E'+$80,"LSE"           ; added by Leonardo Miliani
 401+ 1DCB D0 52 49 4E          defb    'P'+$80,"RINT"
 401+ 1DCF 54
 402+ 1DD0 C3 4F 4E 54          defb    'C'+$80,"ONT"
 403+ 1DD4 CC 49 53 54          defb    'L'+$80,"IST"
 404+ 1DD8 C3 4C 45 41          defb    'C'+$80,"LEAR"
 404+ 1DDC 52
 405+ 1DDD CC 4F 41 44          defb    'L'+$80,"OAD"
 406+ 1DE1 D3 41 56 45          defb    'S'+$80,"AVE"
 407+ 1DE5 CE 45 57             defb    'N'+$80,"EW"
 408+ 1DE8 D4 41 42 28          defb    'T'+$80,"AB("
 409+ 1DEC D4 4F                defb    'T'+$80,"O"
 410+ 1DEE C6 4E                defb    'F'+$80,"N"
 411+ 1DF0 D3 50 43 28          defb    'S'+$80,"PC("
 412+ 1DF4 D4 48 45 4E          defb    'T'+$80,"HEN"
 413+ 1DF8 CE 4F 54             defb    'N'+$80,"OT"
 414+ 1DFB D3 54 45 50          defb    'S'+$80,"TEP"
 415+ 1DFF                      ; from here: operators
 416+ 1DFF AB                   defb    '+'+$80
 417+ 1E00 AD                   defb    '-'+$80
 418+ 1E01 AA                   defb    '*'+$80
 419+ 1E02 AF                   defb    '/'+$80
 420+ 1E03 A5                   defb    '%'+$80
 421+ 1E04 A3                   defb    '#'+$80
 422+ 1E05 DE                   defb    '^'+$80
 423+ 1E06 C1 4E 44             defb    'A'+$80,"ND"
 424+ 1E09 D8 4F 52             defb    'X'+$80,"OR"
 425+ 1E0C CF 52                defb    'O'+$80,"R"
 426+ 1E0E BE                   defb    '>'+$80
 427+ 1E0F BD                   defb    '='+$80
 428+ 1E10 BC                   defb    '<'+$80
 429+ 1E11
 430+ 1E11                      ; from here there are the tokens' FUNCTIONS list
 431+ 1E11                      ; this list must be coherent with the functions list above
 432+ 1E11 D3 47 4E             defb    'S'+$80,"GN"
 433+ 1E14 D4 4D 52             defb    'T'+$80,"MR"            ; added by Leonardo Miliani
 434+ 1E17 C9 4E 54             defb    'I'+$80,"NT"
 435+ 1E1A C1 42 53             defb    'A'+$80,"BS"
 436+ 1E1D D5 53 52             defb    'U'+$80,"SR"
 437+ 1E20 C6 52 45             defb    'F'+$80,"RE"
 438+ 1E23 C9 4E 50             defb    'I'+$80,"NP"
 439+ 1E26 D0 4F 53             defb    'P'+$80,"OS"
 440+ 1E29 D3 51 52             defb    'S'+$80,"QR"
 441+ 1E2C D2 4E 44             defb    'R'+$80,"ND"
 442+ 1E2F CC 4F 47             defb    'L'+$80,"OG"
 443+ 1E32 C5 58 50             defb    'E'+$80,"XP"
 444+ 1E35 C3 4F 53             defb    'C'+$80,"OS"
 445+ 1E38 D3 49 4E             defb    'S'+$80,"IN"
 446+ 1E3B D4 41 4E             defb    'T'+$80,"AN"
 447+ 1E3E C1 54 4E             defb    'A'+$80,"TN"
 448+ 1E41 D0 45 45 4B          defb    'P'+$80,"EEK"
 449+ 1E45 C4 45 45 4B          defb    'D'+$80,"EEK"
 450+ 1E49 D6 50 45 45          defb    'V'+$80,"PEEK"          ; added by Leonardo Miliani
 450+ 1E4D 4B
 451+ 1E4E D6 53 54 41          defb    'V'+$80,"STAT"          ; added by Leonardo Miliani
 451+ 1E52 54
 452+ 1E53 D3 53 54 41          defb    'S'+$80,"STAT"          ; added by Leonardo Miliani
 452+ 1E57 54
 453+ 1E58 C9 4E 4B 45          defb    'I'+$80,"NKEY"          ; added by Leonardo Miliani
 453+ 1E5C 59
 454+ 1E5D D0 4F 49 4E          defb    'P'+$80,"OINT"          ; added by Leonardo Miliani
 454+ 1E61 54
 455+ 1E62 C9 4E 53 54          defb    'I'+$80,"NSTR"          ; added by Leonardo Miliani
 455+ 1E66 52
 456+ 1E67 CC 45 4E             defb    'L'+$80,"EN"
 457+ 1E6A D3 54 52 24          defb    'S'+$80,"TR$"
 458+ 1E6E D6 41 4C             defb    'V'+$80,"AL"
 459+ 1E71 C1 53 43             defb    'A'+$80,"SC"
 460+ 1E74 C3 48 52 24          defb    'C'+$80,"HR$"
 461+ 1E78 C8 45 58 24          defb    'H'+$80,"EX$"           ; added by Grant Searle
 462+ 1E7C C2 49 4E 24          defb    'B'+$80,"IN$"           ; added by Grant Searle
 463+ 1E80 CC 45 46 54          defb    'L'+$80,"EFT$"
 463+ 1E84 24
 464+ 1E85 D2 49 47 48          defb    'R'+$80,"IGHT$"
 464+ 1E89 54 24
 465+ 1E8B CD 49 44 24          defb    'M'+$80,"ID$"
 466+ 1E8F 80                   defb    $80                     ; End-of-list marker
 467+ 1E90
 468+ 1E90              ; KEYWORD ADDRESS TABLE
 469+ 1E90              ; this list must be coherent with the commands'
 470+ 1E90              ; tokens list above
 471+ 1E90 16 26        WORDTB: defw    PEND
 472+ 1E92 13 25                defw    FOR
 473+ 1E94 12 2A                defw    NEXT
 474+ 1E96 75 27                defw    DATA
 475+ 1E98 0F 29                defw    INPUT
 476+ 1E9A 67 2C                defw    DIM
 477+ 1E9C 49 29                defw    READ
 478+ 1E9E 8C 27                defw    LET
 479+ 1EA0 32 27                defw    GOTO
 480+ 1EA2 0D 27                defw    RUN
 481+ 1EA4 04 28                defw    IF
 482+ 1EA6 DC 25                defw    RESTOR
 483+ 1EA8 21 27                defw    GOSUB
 484+ 1EAA 50 27                defw    RETURN
 485+ 1EAC 77 27                defw    REM         ; original REM
 486+ 1EAE 14 26                defw    STOP
 487+ 1EB0 AC 32                defw    POUT
 488+ 1EB2 E6 27                defw    ON
 489+ 1EB4 B9 49                defw    FILES       ; changed by Leonardo Miliani - was NULL
 490+ 1EB6 F4 49                defw    ERASE       ; added by Leonardo Miliani
 491+ 1EB8 54 4A                defw    DISK        ; added by Leonardo Miliani
 492+ 1EBA B2 32                defw    WAIT
 493+ 1EBC 5B 2E                defw    DEF
 494+ 1EBE A6 33                defw    POKE
 495+ 1EC0 49 3D                defw    DOKE
 496+ 1EC2 AB 33                defw    VPOKE       ; added by Leonardo Miliani
 497+ 1EC4 E8 33                defw    SREG        ; added by Leonardo Miliani
 498+ 1EC6 36 35                defw    VREG        ; added by Leonardo Miliani
 499+ 1EC8 7F 3D                defw    SCREEN      ; new behaviour: now it sets up a graphics mode (Leonardo Miliani)
 500+ 1ECA B6 33                defw    LOCATE      ; added by Leonardo Miliani
 501+ 1ECC 42 34                defw    SOUND       ; added by Leonardo Miliani
 502+ 1ECE 09 34                defw    VOLUME      ; added by Leonardo Miliani
 503+ 1ED0 60 3D                defw    PAUSE       ; added by Leonardo Miliani
 504+ 1ED2 FA 3D                defw    COLOR       ; added by Leonardo Miliani
 505+ 1ED4 EA 40                defw    PLOT        ; added by Leonardo Miliani
 506+ 1ED6 7D 41                defw    DRAW        ; added by Leonardo Miliani
 507+ 1ED8 B6 42                defw    CIRCLE      ; added by Leonardo Miliani
 508+ 1EDA A7 3F                defw    PAINT       ; added by Leonardo Miliani
 509+ 1EDC C1 44                defw    SERIAL      ; added by Leonardo Miliani
 510+ 1EDE 00 47                defw    HELP        ; changed by Leonardo Miliani - was LINES
 511+ 1EE0 22 3D                defw    CLS
 512+ 1EE2 1E 47                defw    KEY         ; added by Leonardo Miliani
 513+ 1EE4 F4 32                defw    NMI         ; added by Leonardo Miliani
 514+ 1EE6 B6 3E                defw    GPRINT      ; added by Leonardo Miliani
 515+ 1EE8 36 3D                defw    WIDTH
 516+ 1EEA 4E 33                defw    SYS         ; added by Leonardo Miliani
 517+ 1EEC DA 4C                defw    RESET       ; new behaviour: now it resets the system
 518+ 1EEE 79 27                defw    REM+2       ; ELSE: added by Leonardo Miliani
 519+ 1EF0 36 28                defw    PRINT
 520+ 1EF2 48 26                defw    CONT
 521+ 1EF4 EA 23                defw    LIST
 522+ 1EF6 C1 26                defw    CLEAR
 523+ 1EF8 95 48                defw    LOAD        ; re-implemented by Leonardo Miliani (was CLOAD)
 524+ 1EFA 2F 49                defw    SAVE        ; re-implemented by Leonardo Miliani (was CSAVE)
 525+ 1EFC BF 21                defw    NEW
 526+ 1EFE
 527+ 1EFE              ; RESERVED WORD TOKEN VALUES
 528+ 1EFE              ; if you add a function or command you must increment by 1
 529+ 1EFE              ; the values below. Pay attention that you must increment only the
 530+ 1EFE              ; values AFTER the position where you entered the function/command word
 531+ 1EFE              ; in the "Reserver word list" above. I.E.: VPOKE has been added between
 532+ 1EFE              ; DOKE and SCREEN, and since REM is the reserved work listed below
 533+ 1EFE              ; that is before the point where VPOKE has been entered, every entry
 534+ 1EFE              ; after REM has been incremented.
 535+ 1EFE              ; Another example: when TMR has been added, since it's a function, every
 536+ 1EFE              ; entry after & included ZSGN must be checked (read below)
 537+ 1EFE
 538+ 1EFE              ZEND    equ     $80             ; END        <-- from here, there are the commands
 539+ 1EFE              ZFOR    equ     $81             ; FOR
 540+ 1EFE              ZDATA   equ     $83             ; DATA
 541+ 1EFE              ZGOTO   equ     $88             ; GOTO
 542+ 1EFE              ZGOSUB  equ     $8C             ; GOSUB
 543+ 1EFE              ZREM    equ     $8E             ; REM
 544+ 1EFE              ZELSE   equ     $AF             ; ELSE
 545+ 1EFE              ZPRINT  equ     $B0             ; PRINT
 546+ 1EFE              ZNEW    equ     $B6             ; NEW
 547+ 1EFE
 548+ 1EFE              ZTAB    equ     $B7             ; TAB
 549+ 1EFE              ZTO     equ     $B8             ; TO
 550+ 1EFE              ZFN     equ     $B9             ; FN
 551+ 1EFE              ZSPC    equ     $BA             ; SPC
 552+ 1EFE              ZTHEN   equ     $BB             ; THEN
 553+ 1EFE              ZNOT    equ     $BC             ; NOT
 554+ 1EFE              ZSTEP   equ     $BD             ; STEP
 555+ 1EFE
 556+ 1EFE              ZPLUS   equ     $BE             ; +         <-- from here, there are the math operators
 557+ 1EFE              ZMINUS  equ     $BF             ; -
 558+ 1EFE              ZTIMES  equ     $C0             ; *
 559+ 1EFE              ZDIV    equ     $C1             ; /
 560+ 1EFE              ZMOD    equ     $C2             ; %
 561+ 1EFE              ZDINT   equ     $C3             ; #
 562+ 1EFE              ZOR     equ     $C7             ; OR
 563+ 1EFE              ZGTR    equ     $C8             ; >
 564+ 1EFE              ZEQUAL  equ     $C9             ; M
 565+ 1EFE              ZLTH    equ     $CA             ; <
 566+ 1EFE
 567+ 1EFE              ZSGN    equ     $CB             ; SGN       <-- from here, there are the functions
 568+ 1EFE              ZPOINT  equ     $E1             ; ZPOINT    <-- if the user enters a custom function, between
 569+ 1EFE                                              ;               SGN and POINT, he/she must increment this pointer by 1
 570+ 1EFE              ZINSTR  equ     $E2             ; ZINSTR    <-- same here
 571+ 1EFE              ZLEFT   equ     $EA             ; LEFT$     <-- if the user enters a custom function anywhere,
 572+ 1EFE                                              ;               he/she must increment this pointer by 1
 573+ 1EFE
 574+ 1EFE              ; ARITHMETIC PRECEDENCE TABLE
 575+ 1EFE              ; in the formulas below, <last> is a number stored into the stack that must be retrieved
 576+ 1EFE              ; with POP BC, POP DE; FPREG is a f.p. number store into the RAM register FPREG
 577+ 1EFE 79           PRITAB: defb    $79             ; Precedence value
 578+ 1EFF EB 39                defw    PADD            ; FPREG = <last> + FPREG
 579+ 1F01
 580+ 1F01 79                   defb    $79             ; Precedence value
 581+ 1F02 CE 35                defw    PSUB            ; FPREG = <last> - FPREG
 582+ 1F04
 583+ 1F04 7C                   defb    $7C             ; Precedence value
 584+ 1F05 0C 37                defw    MULT            ; PPREG = <last> * FPREG
 585+ 1F07
 586+ 1F07 7C                   defb    $7C             ; Precedence value
 587+ 1F08 BE 37                defw    DIV             ; FPREG = <last> / FPREG
 588+ 1F0A
 589+ 1F0A 7C                   defb    $7C             ; Precedence value
 590+ 1F0B 69 37                defw    MOD             ; FPREG = INT(<last>)-(INT(FPREG)*INT(<last>/FPREG))
 591+ 1F0D
 592+ 1F0D 7C                   defb    $7C             ; precedence value
 593+ 1F0E 61 37                defw    DINT            ; FPREG = INT(<last> / FPREG )
 594+ 1F10
 595+ 1F10 7F                   defb    $7F             ; Precedence value
 596+ 1F11 0C 3B                defw    POWER           ; FPREG = <last> ^ FPREG
 597+ 1F13
 598+ 1F13 50                   defb    $50             ; Precedence value
 599+ 1F14 B0 2B                defw    PAND            ; FPREG = <last> AND FPREG
 600+ 1F16
 601+ 1F16 4A                   defb    $4A             ; Precedence value
 602+ 1F17 B8 2B                defw    PXOR            ; FPREG = <last> XOR FPREG
 603+ 1F19
 604+ 1F19 46                   defb    $46             ; Precedence value
 605+ 1F1A B3 2B                defw    POR             ; FPREG = <last> OR FPREG
 606+ 1F1C
 607+ 1F1C
 608+ 1F1C              ; INITIALISATION TABLE -------------------------------------------------------
 609+ 1F1C              ; these values are copied into RAM at startup
 610+ 1F1C C3 2C 1C     INITAB: jp      WARMST          ; Warm start jump
 611+ 1F1F ED 45 00             defb    $ED,$45,$00     ; RETN + NOP for default NMI service routine
 612+ 1F22 C3 97 26             jp      FCERR           ; "USR (X)" jump (Set to Error)
 613+ 1F25 D3 00                out     (0),A           ; "out p,n" skeleton
 614+ 1F27 C9                   ret
 615+ 1F28 D6 00                sub     $00             ; Division support routine
 616+ 1F2A 6F                   ld      L,A
 617+ 1F2B 7C                   ld      A,H
 618+ 1F2C DE 00                sbc     A,$00
 619+ 1F2E 67                   ld      H,A
 620+ 1F2F 78                   ld      A,B
 621+ 1F30 DE 00                sbc     A,$00
 622+ 1F32 47                   ld      B,A
 623+ 1F33 3E 00                ld      A,$00
 624+ 1F35 C9                   ret
 625+ 1F36 00 00 00             defb    $00,$00,$00     ; Random number seed table used by RND
 626+ 1F39 35 4A CA 99          defb    $35,$4A,$CA,$99 ;-2.65145E+07
 627+ 1F3D 39 1C 76 98          defb    $39,$1C,$76,$98 ; 1.61291E+07
 628+ 1F41 22 95 B3 98          defb    $22,$95,$B3,$98 ;-1.17691E+07
 629+ 1F45 0A DD 47 98          defb    $0A,$DD,$47,$98 ; 1.30983E+07
 630+ 1F49 53 D1 99 99          defb    $53,$D1,$99,$99 ;-2-01612E+07
 631+ 1F4D 0A 1A 9F 98          defb    $0A,$1A,$9F,$98 ;-1.04269E+07
 632+ 1F51 65 BC CD 98          defb    $65,$BC,$CD,$98 ;-1.34831E+07
 633+ 1F55 D6 77 3E 98          defb    $D6,$77,$3E,$98 ; 1.24825E+07
 634+ 1F59 52 C7 4F 80          defb    $52,$C7,$4F,$80 ; Last random number
 635+ 1F5D DB 00                in      A,($00)         ; INP (x) skeleton
 636+ 1F5F C9                   ret
 637+ 1F60 FF                   defb    $FF             ; Terminal width (255 = no auto CRLF)
 638+ 1F61 14                   defb    $14             ; Width for commas (at reset, 3 columns, for G1 mode)
 639+ 1F62 00                   defb    $00             ; No nulls after input bytes
 640+ 1F63 00                   defb    $00             ; Output enabled (^O off)
 641+ 1F64 00 00                defw    $00             ; Array load/save check sum
 642+ 1F66 00                   defb    $00             ; Break not by NMI
 643+ 1F67 00                   defb    $00             ; Break flag
 644+ 1F68 C3 03 23             jp      TTYLIN          ; Input reflection (set to TTY)
 645+ 1F6B D2 82                defw    STLOOK          ; Temp string space
 646+ 1F6D FE FF                defw    -2              ; Current line number (cold)
 647+ 1F6F FF FF                defw    -1              ; Current line with errors (no errors)
 648+ 1F71 40           AUTORP: defb    $40             ; delay for key auto-repeat start
 649+ 1F72 08                   defb    $08             ; auto-repeat delay
 650+ 1F73 4C 49 53 54  DEFFNKS:defm    "LIST",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 1
 650+ 1F77 0D 00 00 00
 650+ 1F7B 00 00 00 00
 650+ 1F7F 00 00 00 00
 651+ 1F83 52 55 4E 0D          defm    "RUN",13,0,0,0,0,0,0,0,0,0,0,0,0    ; KEY 2
 651+ 1F87 00 00 00 00
 651+ 1F8B 00 00 00 00
 651+ 1F8F 00 00 00 00
 652+ 1F93 53 43 52 45          defm    "SCREEN1",13,0,0,0,0,0,0,0,0        ; KEY 3
 652+ 1F97 45 4E 31 0D
 652+ 1F9B 00 00 00 00
 652+ 1F9F 00 00 00 00
 653+ 1FA3 43 4F 4C 4F          defm    "COLOR1,15,5",13,0,0,0,0            ; KEY 4
 653+ 1FA7 52 31 2C 31
 653+ 1FAB 35 2C 35 0D
 653+ 1FAF 00 00 00 00
 654+ 1FB3 53 45 52 49          defm    "SERIAL1,38400",13,0,0              ; KEY 5
 654+ 1FB7 41 4C 31 2C
 654+ 1FBB 33 38 34 30
 654+ 1FBF 30 0D 00 00
 655+ 1FC3 53 43 52 45          defm    "SCREEN2",13,0,0,0,0,0,0,0,0        ; KEY 6
 655+ 1FC7 45 4E 32 0D
 655+ 1FCB 00 00 00 00
 655+ 1FCF 00 00 00 00
 656+ 1FD3 43 4F 4E 54          defm    "CONT",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 7
 656+ 1FD7 0D 00 00 00
 656+ 1FDB 00 00 00 00
 656+ 1FDF 00 00 00 00
 657+ 1FE3 48 45 4C 50          defm    "HELP",13,0,0,0,0,0,0,0,0,0,0,0     ; KEY 8 (HELP KEY)
 657+ 1FE7 0D 00 00 00
 657+ 1FEB 00 00 00 00
 657+ 1FEF 00 00 00 00
 658+ 1FF3 6F 82                defw    PROGST+1        ; Start of program text
 659+ 1FF5              INITBE:
 660+ 1FF5
 661+ 1FF5              ; END OF INITIALISATION TABLE ---------------------------------------------------
 662+ 1FF5
 663+ 1FF5 20 45 72 72  ERRMSG: defb    " Error",0
 663+ 1FF9 6F 72 00
 664+ 1FFC 20 69 6E 20  INMSG:  defb    " in ",0
 664+ 2000 00
 665+ 2001              ZERBYT  equ     $-1             ; A zero byte
 666+ 2001 4F 6B 0D 00  OKMSG:  defb    "Ok",CR,0,0
 666+ 2005 00
 667+ 2006 42 72 65 61  BRKMSG: defb    "Break",0
 667+ 200A 6B 00
 668+ 200C
 669+ 200C 21 04 00     BAKSTK: ld      HL,$04          ; Look for "FOR" block with
 670+ 200F 39                   add     HL,SP           ; same index as specified
 671+ 2010 7E           LOKFOR: ld      A,(HL)          ; Get block ID
 672+ 2011 23                   inc     HL              ; Point to index address
 673+ 2012 FE 81                cp      ZFOR            ; Is it a "FOR" token
 674+ 2014 C0                   ret     NZ              ; No - exit
 675+ 2015 4E                   ld      C,(HL)          ; BC = Address of "FOR" index
 676+ 2016 23                   inc     HL
 677+ 2017 46                   ld      B,(HL)
 678+ 2018 23                   inc     HL              ; Point to sign of STEP
 679+ 2019 E5                   push    HL              ; Save pointer to sign
 680+ 201A 69                   ld      L,C             ; HL = address of "FOR" index
 681+ 201B 60                   ld      H,B
 682+ 201C 7A                   ld      A,D             ; See if an index was specified
 683+ 201D B3                   or      E               ; DE = 0 if no index specified
 684+ 201E EB                   ex      DE,HL           ; Specified index into HL
 685+ 201F CA 26 20             jp      Z,INDFND        ; Skip if no index given
 686+ 2022 EB                   ex      DE,HL           ; Index back into DE
 687+ 2023 CD 7D 23             call    CPDEHL          ; Compare index with one given
 688+ 2026 01 0D 00     INDFND: ld      BC,16-3         ; Offset to next block
 689+ 2029 E1                   pop     HL              ; Restore pointer to sign
 690+ 202A C8                   ret     Z               ; Return if block found
 691+ 202B 09                   add     HL,BC           ; Point to next block
 692+ 202C C3 10 20             jp      LOKFOR          ; Keep on looking
 693+ 202F
 694+ 202F CD 49 20     MOVUP:  call    ENFMEM          ; See if enough memory
 695+ 2032 C5           MOVSTR: push    BC              ; Save end of source
 696+ 2033 E3                   ex      (SP),HL         ; Swap source and dest" end
 697+ 2034 C1                   pop     BC              ; Get end of destination
 698+ 2035 CD 7D 23     MOVLP:  call    CPDEHL          ; See if list moved
 699+ 2038 7E                   ld      A,(HL)          ; Get byte
 700+ 2039 02                   ld      (BC),A          ; Move it
 701+ 203A C8                   ret     Z               ; Exit if all done
 702+ 203B 0B                   dec     BC              ; Next byte to move to
 703+ 203C 2B                   dec     HL              ; Next byte to move
 704+ 203D C3 35 20             jp      MOVLP           ; Loop until all bytes moved
 705+ 2040
 706+ 2040 E5           CHKSTK: push    HL              ; Save code string address
 707+ 2041 2A 4F 82             ld      HL,(ARREND)     ; Lowest free memory
 708+ 2044 06 00                ld      B,$00           ; BC = Number of levels to test
 709+ 2046 09                   add     HL,BC           ; 2 Bytes for each level
 710+ 2047 09                   add     HL,BC
 711+ 2048 3E                   defb    $3E             ; Skip "push HL"
 712+ 2049 E5           ENFMEM: push    HL              ; Save code string address
 713+ 204A 3E D0                ld      A,$D0           ; LOW -48 ; 48 Bytes minimum RAM
 714+ 204C 95                   sub     L
 715+ 204D 6F                   ld      L,A
 716+ 204E 3E FF                ld      A,$FF           ; HIGH (-48) ; 48 Bytes minimum RAM
 717+ 2050 9C                   sbc     A,H
 718+ 2051 DA 58 20             jp      C,OMERR         ; Not enough - ?OM Error
 719+ 2054 67                   ld      H,A
 720+ 2055 39                   add     HL,SP           ; Test if stack is overflowed
 721+ 2056 E1                   pop     HL              ; Restore code string address
 722+ 2057 D8                   ret     C               ; Return if enough memory
 723+ 2058 1E 0C        OMERR:  ld      E,OM            ; ?OM Error
 724+ 205A C3 9D 20             jp      ERROR
 725+ 205D
 726+ 205D
 727+ 205D              ; if in graphics mode, return to text (called by "NOLIN" and "ERROR")
 728+ 205D F5           EXITGM: push    AF              ; store AF
 729+ 205E 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
 730+ 2061 FE 02                cp      $02             ; G2?
 731+ 2063 CA 6A 20             jp      Z,LDG1          ; yes, back to G1
 732+ 2066 FE 03                cp      $03             ; G3?
 733+ 2068 20 11                jr      NZ,LDG1ND       ; no, so return
 734+ 206A E5           LDG1:   push    HL              ; store HL
 735+ 206B D5                   push    DE              ; store DE
 736+ 206C 11 01 00             ld      DE,$0001        ; sprites set to defaults, G1 mode
 737+ 206F F3                   di                      ; disable INTs
 738+ 2070 CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
 739+ 2073 FB                   ei                      ; re-enable INTs
 740+ 2074 3E 01                ld      A,$01           ; activate the...
 741+ 2076 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
 742+ 2079 D1                   pop     DE              ; retrieve DE
 743+ 207A E1                   pop     HL              ; retrieve HL
 744+ 207B F1           LDG1ND: pop     AF              ; retrieve AF
 745+ 207C C9                   ret                     ; return to caller
 746+ 207D
 747+ 207D
 748+ 207D 2A D8 81     DATSNR: ld      HL,(DATLIN)     ; Get line of current DATA item
 749+ 2080 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 750+ 2083 1E 02        SNERR:  ld      E,SN            ; ?SN Error
 751+ 2085 01                   defb    $01             ; Skip "ld E,DZ"
 752+ 2086 1E 14        DZERR:  ld      E,DZ            ; ?/0 Error
 753+ 2088 01                   defb    $01             ; Skip "ld E,NF"
 754+ 2089 1E 00        NFERR:  ld      E,NF            ; ?NF Error
 755+ 208B 01                   defb    $01             ; Skip "ld E,DD"
 756+ 208C 1E 12        DDERR:  ld      E,DD            ; ?DD Error
 757+ 208E 01                   defb    $01             ; Skip "ld E,UF"
 758+ 208F 1E 22        UFERR:  ld      E,UF            ; ?UF Error
 759+ 2091 01                   defb    $01             ; Skip "ld E,OV
 760+ 2092 1E 0A        OVERR:  ld      E,OV            ; ?OV Error
 761+ 2094 01                   defb    $01             ; Skip "ld E,TM"
 762+ 2095 1E 18        TMERR:  ld      E,TM            ; ?TM Error
 763+ 2097 01                   defb    $01             ; Skip next statement
 764+ 2098 1E 34        IMERR:  ld      E,IM            ; ?Illegal indirect mode error
 765+ 209A 01                   defb    $01             ; Skip next statement
 766+ 209B 1E 36        NRERR:  ld      E,NR            ; ?Device not ready error
 767+ 209D
 768+ 209D CD E5 21     ERROR:  call    CLREG           ; Clear registers and stack
 769+ 20A0 CD 5D 20             call    EXITGM          ; exit from graphic modes
 770+ 20A3 32 A5 80             ld      (CTLOFG),A      ; Enable output (A is 0)
 771+ 20A6 CD 44 09             call    CURSOR_ON       ; enable cursor
 772+ 20A9 CD 87 28             call    STTLIN          ; Start new line
 773+ 20AC 21 CB 18             ld      HL,ERRTBL       ; Point to error codes
 774+ 20AF 57                   ld      D,A             ; D = 0 (A is 0)
 775+ 20B0 3E 3F                ld      A,'?'
 776+ 20B2 CD 8E 23             call    OUTC            ; Output '?'
 777+ 20B5 19                   add     HL,DE           ; Offset to correct error code
 778+ 20B6 5E                   ld      E,(HL)          ; load pointer to error message
 779+ 20B7 23                   inc     HL              ; by loading LSB,
 780+ 20B8 56                   ld      D,(HL)          ; then MSB
 781+ 20B9 62 6B                ld      HL,DE           ; load pointer to HL
 782+ 20BB CD 65 2F             call    PRS             ; Output error message
 783+ 20BE 21 F5 1F             ld      HL,ERRMSG       ; "Error" message
 784+ 20C1 CD 65 2F     ERRIN:  call    PRS             ; Output message
 785+ 20C4 2A AF 80             ld      HL,(LINEAT)     ; Get line of error
 786+ 20C7 11 FE FF             ld      DE,-2           ; Cold start error if -2
 787+ 20CA CD 7D 23             call    CPDEHL          ; See if cold start error
 788+ 20CD CA 6B 1B             jp      Z,CSTART        ; Cold start error - Restart
 789+ 20D0 7C                   ld      A,H             ; Was it a direct error?
 790+ 20D1 A5                   and     L               ; Line = -1 if direct error
 791+ 20D2 3C                   inc     A
 792+ 20D3 CA DE 20             jp      Z,PTLN          ; Yes, jump over
 793+ 20D6 E5                   push    HL              ; indirect mode - store HL
 794+ 20D7 2A AF 80             ld      HL,(LINEAT)     ; copy current line number
 795+ 20DA 22 B1 80             ld      (HLPLN),HL      ; save in HELP line register
 796+ 20DD E1                   pop     HL              ; retrieve HL
 797+ 20DE C4 FC 39     PTLN:   call    NZ,LINEIN       ; No - output line of error
 798+ 20E1
 799+ 20E1 3E                   defb    $3E             ; Skip "pop BC"
 800+ 20E2 C1           POPNOK: pop     BC              ; Drop address in input buffer
 801+ 20E3
 802+ 20E3              ; run into direct mode: print OK and get command
 803+ 20E3 AF           PRNTOK: xor     A               ; Output "Ok" and get command
 804+ 20E4 32 A5 80             ld      (CTLOFG),A      ; Enable output
 805+ 20E7 CD 87 28             call    STTLIN          ; Start new line
 806+ 20EA 21 01 20             ld      HL,OKMSG        ; "Ok" message
 807+ 20ED CD 65 2F             call    PRS             ; Output "Ok"
 808+ 20F0 CD 44 09     GETCMD: call    CURSOR_ON       ; enable cursor
 809+ 20F3 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 810+ 20F6 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 811+ 20F8 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 812+ 20FB 21 FF FF             ld      HL,-1           ; Flag direct mode
 813+ 20FE 22 AF 80             ld      (LINEAT),HL     ; Save as current line
 814+ 2101 CD 03 23             call    GETLIN          ; Get an input line
 815+ 2104 DA F0 20             jp      C,GETCMD        ; Get line again if break
 816+ 2107 CD CC 25             call    GETCHR          ; Get first character
 817+ 210A 17                   rla                     ; 8th bit is copied into carry and original carry is copied into bit 0)
 818+ 210B DA 83 20             jp      C,SNERR         ; if char >=128 (8th bit set) then raise an error
 819+ 210E 1F                   rra                     ; recover original char and Carry
 820+ 210F 3C                   inc     A               ; Test if end of line
 821+ 2110 3D                   dec     A               ; Without affecting Carry
 822+ 2111 CA F0 20             jp      Z,GETCMD        ; Nothing entered - Get another
 823+ 2114 F5                   push    AF              ; Save Carry status
 824+ 2115 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 825+ 2118 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 826+ 211A CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
 827+ 211D CD 59 09             call    CURSOR_OFF      ; cursor disabled
 828+ 2120 CD 9C 26             call    ATOH            ; Get line number into DE
 829+ 2123 D5                   push    DE              ; Save line number
 830+ 2124 CD 1A 22             call    CRUNCH          ; Tokenise rest of line
 831+ 2127 47                   ld      B,A             ; Length of tokenised line
 832+ 2128 D1                   pop     DE              ; Restore line number
 833+ 2129 F1                   pop     AF              ; Restore Carry
 834+ 212A D2 AC 25             jp      NC,EXCUTE       ; No line number - Direct mode
 835+ 212D D5                   push    DE              ; Save line number
 836+ 212E C5                   push    BC              ; Save length of tokenised line
 837+ 212F AF                   xor     A
 838+ 2130 32 DB 81             ld      (LSTBIN),A      ; Clear last byte input
 839+ 2133 CD CC 25             call    GETCHR          ; Get next character
 840+ 2136 B7                   or      A               ; Set flags
 841+ 2137 F5                   push    AF              ; And save them
 842+ 2138 CD 9F 21             call    SRCHLN          ; Search for line number in DE
 843+ 213B DA 44 21             jp      C,LINFND        ; Jump if line found
 844+ 213E F1                   pop     AF              ; Get status
 845+ 213F F5                   push    AF              ; And re-save
 846+ 2140 CA 4B 27             jp      Z,ULERR         ; Nothing after number - Error
 847+ 2143 B7                   or      A               ; Clear Carry
 848+ 2144 C5           LINFND: push    BC              ; Save address of line in prog
 849+ 2145 D2 5B 21             jp      NC,INEWLN       ; Line not found - Insert new
 850+ 2148 EB                   ex      DE,HL           ; Next line address in DE
 851+ 2149 2A 4B 82             ld      HL,(PROGND)     ; End of program
 852+ 214C 1A           SFTPRG: ld      A,(DE)          ; Shift rest of program down
 853+ 214D 02                   ld      (BC),A
 854+ 214E 03                   inc     BC              ; Next destination
 855+ 214F 13                   inc     DE              ; Next source
 856+ 2150 CD 7D 23             call    CPDEHL          ; All done?
 857+ 2153 C2 4C 21             jp      NZ,SFTPRG       ; More to do
 858+ 2156 60                   ld      H,B             ; HL - New end of program
 859+ 2157 69                   ld      L,C
 860+ 2158 22 4B 82             ld      (PROGND),HL     ; Update end of program
 861+ 215B
 862+ 215B D1           INEWLN: pop     DE              ; Get address of line,
 863+ 215C F1                   pop     AF              ; Get status
 864+ 215D CA 82 21             jp      Z,SETPTR        ; No text - Set up pointers
 865+ 2160 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 866+ 2163 E3                   ex      (SP),HL         ; Get length of input line
 867+ 2164 C1                   pop     BC              ; End of program to BC
 868+ 2165 09                   add     HL,BC           ; Find new end
 869+ 2166 E5                   push    HL              ; Save new end
 870+ 2167 CD 2F 20             call    MOVUP           ; Make space for line
 871+ 216A E1                   pop     HL              ; Restore new end
 872+ 216B 22 4B 82             ld      (PROGND),HL     ; Update end of program pointer
 873+ 216E EB                   ex      DE,HL           ; Get line to move up in HL
 874+ 216F 74                   ld      (HL),H          ; Save MSB
 875+ 2170 D1                   pop     DE              ; Get new line number
 876+ 2171 23                   inc     HL              ; Skip pointer
 877+ 2172 23                   inc     HL
 878+ 2173 73                   ld      (HL),E          ; Save LSB of line number
 879+ 2174 23                   inc     HL
 880+ 2175 72                   ld      (HL),D          ; Save MSB of line number
 881+ 2176 23                   inc     HL              ; To first byte in line
 882+ 2177 11 38 81             ld      DE,BUFFER       ; Copy buffer to program
 883+ 217A 1A           MOVBUF: ld      A,(DE)          ; Get source
 884+ 217B 77                   ld      (HL),A          ; Save destinations
 885+ 217C 23                   inc     HL              ; Next source
 886+ 217D 13                   inc     DE              ; Next destination
 887+ 217E B7                   or      A               ; Done?
 888+ 217F C2 7A 21             jp      NZ,MOVBUF       ; No - Repeat
 889+ 2182 CD CB 21     SETPTR: call    RUNFST          ; Set line pointers
 890+ 2185 23                   inc     HL              ; To LSB of pointer
 891+ 2186 EB                   ex      DE,HL           ; Address to DE
 892+ 2187 62           PTRLP:  ld      H,D             ; Address to HL
 893+ 2188 6B                   ld      L,E
 894+ 2189 7E                   ld      A,(HL)          ; Get LSB of pointer
 895+ 218A 23                   inc     HL              ; To MSB of pointer
 896+ 218B B6                   or      (HL)            ; Compare with MSB pointer
 897+ 218C CA F0 20             jp      Z,GETCMD        ; Get command line if end
 898+ 218F 23                   inc     HL              ; To LSB of line number
 899+ 2190 23                   inc     HL              ; Skip line number
 900+ 2191 23                   inc     HL              ; Point to first byte in line
 901+ 2192 AF                   xor     A               ; Looking for 00 byte
 902+ 2193 BE           FNDEND: cp      (HL)            ; Found end of line?
 903+ 2194 23                   inc     HL              ; Move to next byte
 904+ 2195 C2 93 21             jp      NZ,FNDEND       ; No - Keep looking
 905+ 2198 EB                   ex      DE,HL           ; Next line address to HL
 906+ 2199 73                   ld      (HL),E          ; Save LSB of pointer
 907+ 219A 23                   inc     HL
 908+ 219B 72                   ld      (HL),D          ; Save MSB of pointer
 909+ 219C C3 87 21             jp      PTRLP           ; Do next line
 910+ 219F
 911+ 219F 2A 35 81     SRCHLN: ld      HL,(BASTXT)     ; Start of program text
 912+ 21A2 44           SRCHLP: ld      B,H             ; BC = Address to look at
 913+ 21A3 4D                   ld      C,L
 914+ 21A4 7E                   ld      A,(HL)          ; Get address of next line
 915+ 21A5 23                   inc     HL
 916+ 21A6 B6                   or      (HL)            ; End of program found?
 917+ 21A7 2B                   dec     HL
 918+ 21A8 C8                   ret     Z               ; Yes - Line not found
 919+ 21A9 23                   inc     HL
 920+ 21AA 23                   inc     HL
 921+ 21AB 7E                   ld      A,(HL)          ; Get LSB of line number
 922+ 21AC 23                   inc     HL
 923+ 21AD 66                   ld      H,(HL)          ; Get MSB of line number
 924+ 21AE 6F                   ld      L,A
 925+ 21AF CD 7D 23             call    CPDEHL          ; Compare with line in DE
 926+ 21B2 60                   ld      H,B             ; HL = Start of this line
 927+ 21B3 69                   ld      L,C
 928+ 21B4 7E                   ld      A,(HL)          ; Get LSB of next line address
 929+ 21B5 23                   inc     HL
 930+ 21B6 66                   ld      H,(HL)          ; Get MSB of next line address
 931+ 21B7 6F                   ld      L,A             ; Next line to HL
 932+ 21B8 3F                   ccf
 933+ 21B9 C8                   ret     Z               ; Lines found - Exit
 934+ 21BA 3F                   ccf
 935+ 21BB D0                   ret     NC              ; Line not found,at line after
 936+ 21BC C3 A2 21             jp      SRCHLP          ; Keep looking
 937+ 21BF
 938+ 21BF C0           NEW:    ret     NZ              ; Return if any more on line
 939+ 21C0 2A 35 81     CLRPTR: ld      HL,(BASTXT)     ; Point to start of program
 940+ 21C3 AF                   xor     A               ; Set program area to empty
 941+ 21C4 77                   ld      (HL),A          ; Save LSB = 00
 942+ 21C5 23                   inc     HL
 943+ 21C6 77                   ld      (HL),A          ; Save MSB = 00
 944+ 21C7 23                   inc     HL
 945+ 21C8 22 4B 82             ld      (PROGND),HL     ; Set program end
 946+ 21CB
 947+ 21CB 2A 35 81     RUNFST: ld      HL,(BASTXT)     ; Clear all variables
 948+ 21CE 2B                   dec     HL
 949+ 21CF
 950+ 21CF 22 DD 81     INTVAR: ld      (BRKLIN),HL     ; Initialise RUN variables
 951+ 21D2 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
 952+ 21D5 22 D2 81             ld      (STRBOT),HL     ; Clear string space
 953+ 21D8 AF                   xor     A
 954+ 21D9 CD DC 25             call    RESTOR          ; Reset DATA pointers
 955+ 21DC 2A 4B 82             ld      HL,(PROGND)     ; Get end of program
 956+ 21DF 22 4D 82             ld      (VAREND),HL     ; Clear variables
 957+ 21E2 22 4F 82             ld      (ARREND),HL     ; Clear arrays
 958+ 21E5
 959+ 21E5 C1           CLREG:  pop     BC              ; Save return address
 960+ 21E6 2A AD 80             ld      HL,(STRSPC)     ; Get end of working RAM
 961+ 21E9 F9                   ld      SP,HL           ; Set stack
 962+ 21EA 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
 963+ 21ED 22 C0 81             ld      (TMSTPT),HL     ; Reset temporary string ptr
 964+ 21F0 AF                   xor     A               ; A = 00
 965+ 21F1 6F                   ld      L,A             ; HL = 0000
 966+ 21F2 67                   ld      H,A
 967+ 21F3 22 E3 81             ld      (CONTAD),HL     ; No CONTinue
 968+ 21F6 32 DA 81             ld      (FORFLG),A      ; Clear FOR flag
 969+ 21F9 22 53 82             ld      (FNRGNM),HL     ; Clear FN argument
 970+ 21FC E5                   push    HL              ; HL = 0000
 971+ 21FD C5                   push    BC              ; Put back return
 972+ 21FE 2A DD 81     DOAGN:  ld      HL,(BRKLIN)     ; Get address of code to RUN
 973+ 2201 C9                   ret                     ; Return to execution driver
 974+ 2202
 975+ 2202 3E 3F        PROMPT: ld      A,'?'           ; '?'
 976+ 2204 CD 8E 23             call    OUTC            ; Output character
 977+ 2207 3E 00                ld      A,NLLCR         ; null char
 978+ 2209 CD 8E 23             call    OUTC            ; Output character
 979+ 220C CD 44 09             call    CURSOR_ON       ; enable cursor
 980+ 220F 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
 981+ 2212 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
 982+ 2214 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
 983+ 2217 C3 AA 80             jp      RINPUT          ; Get input line
 984+ 221A
 985+ 221A AF           CRUNCH: xor     A               ; Tokenise line @ HL to BUFFER
 986+ 221B 32 95 81             ld      (DATFLG),A      ; Reset literal flag
 987+ 221E 0E 05                ld      C,2+3           ; 2 byte number and 3 nulls
 988+ 2220 11 38 81             ld      DE,BUFFER       ; Start of input buffer
 989+ 2223 7E           CRNCLP: ld      A,(HL)          ; Get byte
 990+ 2224 FE 20                cp      SPC             ; Is it a space?
 991+ 2226 CA A2 22             jp      Z,MOVDIR        ; Yes - Copy direct
 992+ 2229 47                   ld      B,A             ; Save character
 993+ 222A FE 22                cp      $22             ; '"'             ; Is it a quote?
 994+ 222C CA C2 22             jp      Z,CPYLIT        ; Yes - Copy literal string
 995+ 222F B7                   or      A               ; Is it end of buffer?
 996+ 2230 CA C9 22             jp      Z,ENDBUF        ; Yes - End buffer
 997+ 2233 3A 95 81             ld      A,(DATFLG)      ; Get data type
 998+ 2236 B7                   or      A               ; Literal?
 999+ 2237 7E                   ld      A,(HL)          ; Get byte to copy
1000+ 2238 C2 A2 22             jp      NZ,MOVDIR       ; Literal - Copy direct
1001+ 223B FE 3F                cp      '?'             ; Is it '?' short for PRINT
1002+ 223D 3E B0                ld      A,ZPRINT        ; "PRINT" token
1003+ 223F CA A2 22             jp      Z,MOVDIR        ; Yes - replace it
1004+ 2242 7E                   ld      A,(HL)          ; Get byte again
1005+ 2243 FE 30                cp      '0'             ; Is it less than '0'
1006+ 2245 DA 4D 22             jp      C,FNDWRD        ; Yes - Look for reserved words
1007+ 2248 FE 3C                cp      $3C  ;60; ";"+1       ; Is it "0123456789:;" ?
1008+ 224A DA A2 22             jp      C,MOVDIR        ; Yes - copy it direct
1009+ 224D D5           FNDWRD: push    DE              ; Look for reserved words
1010+ 224E 11 FE 1C             ld      DE,WORDS-1      ; Point to table
1011+ 2251 C5                   push    BC              ; Save count
1012+ 2252 01 9E 22             ld      BC,RETNAD       ; Where to return to
1013+ 2255 C5                   push    BC              ; Save return address
1014+ 2256 06 7F                ld      B,ZEND-1        ; First token value -1
1015+ 2258 7E                   ld      A,(HL)          ; Get byte
1016+ 2259 FE 61                cp      'a'             ; Less than 'a' ?
1017+ 225B DA 66 22             jp      C,SEARCH        ; Yes - search for words
1018+ 225E FE 7B                cp      'z'+1           ; Greater than 'z' ?
1019+ 2260 D2 66 22             jp      NC,SEARCH       ; Yes - search for words
1020+ 2263 E6 5F                and     %01011111       ; Force upper case
1021+ 2265 77                   ld      (HL),A          ; Replace byte
1022+ 2266 4E           SEARCH: ld      C,(HL)          ; Search for a word
1023+ 2267 EB                   ex      DE,HL
1024+ 2268 23           GETNXT: inc     HL              ; Get next reserved word
1025+ 2269 B6                   or      (HL)            ; Start of word?
1026+ 226A F2 68 22             jp      P,GETNXT        ; No - move on
1027+ 226D 04                   inc     B               ; Increment token value
1028+ 226E 7E                   ld      A,(HL)          ; Get byte from table
1029+ 226F E6 7F                and     %01111111       ; Strip bit 7
1030+ 2271 C8                   ret     Z               ; Return if end of list
1031+ 2272 B9                   cp      C               ; Same character as in buffer?
1032+ 2273 C2 68 22             jp      NZ,GETNXT       ; No - get next word
1033+ 2276 EB                   ex      DE,HL
1034+ 2277 E5                   push    HL              ; Save start of word
1035+ 2278
1036+ 2278 13           NXTBYT: inc     DE              ; Look through rest of word
1037+ 2279 1A                   ld      A,(DE)          ; Get byte from table
1038+ 227A B7                   or      A               ; End of word ?
1039+ 227B FA 9A 22             jp      M,MATCH         ; Yes - Match found
1040+ 227E 4F                   ld      C,A             ; Save it
1041+ 227F 78                   ld      A,B             ; Get token value
1042+ 2280 FE 88                cp      ZGOTO           ; Is it "GOTO" token ?
1043+ 2282 C2 89 22             jp      NZ,NOSPC        ; No - Don't allow spaces
1044+ 2285 CD CC 25             call    GETCHR          ; Get next character
1045+ 2288 2B                   dec     HL              ; Cancel increment from GETCHR
1046+ 2289 23           NOSPC:  inc     HL              ; Next byte
1047+ 228A 7E                   ld      A,(HL)          ; Get byte
1048+ 228B FE 61                cp      'a'             ; Less than 'a' ?
1049+ 228D DA 92 22             jp      C,NOCHNG        ; Yes - don't change
1050+ 2290 E6 5F                and     %01011111       ; Make upper case
1051+ 2292 B9           NOCHNG: cp      C               ; Same as in buffer ?
1052+ 2293 CA 78 22             jp      Z,NXTBYT        ; Yes - keep testing
1053+ 2296 E1                   pop     HL              ; Get back start of word
1054+ 2297 C3 66 22             jp      SEARCH          ; Look at next word
1055+ 229A
1056+ 229A 48           MATCH:  ld      C,B             ; Word found - Save token value
1057+ 229B F1                   pop     AF              ; Throw away return
1058+ 229C EB                   ex      DE,HL
1059+ 229D C9                   ret                     ; Return to "RETNAD"
1060+ 229E EB           RETNAD: ex      DE,HL           ; Get address in string
1061+ 229F 79                   ld      A,C             ; Get token value
1062+ 22A0 C1                   pop     BC              ; Restore buffer length
1063+ 22A1 D1                   pop     DE              ; Get destination address
1064+ 22A2 23           MOVDIR: inc     HL              ; Next source in buffer
1065+ 22A3 12                   ld      (DE),A          ; Put byte in buffer
1066+ 22A4 13                   inc     DE              ; Move up buffer
1067+ 22A5 0C                   inc     C               ; Increment length of buffer
1068+ 22A6 D6 3A                sub     ':'             ; End of statement?
1069+ 22A8 CA B0 22             jp      Z,SETLIT        ; Jump if multi-statement line
1070+ 22AB FE 49                cp      ZDATA-$3A       ; Is it DATA statement ?
1071+ 22AD C2 B3 22             jp      NZ,TSTREM       ; No - see if REM
1072+ 22B0 32 95 81     SETLIT: ld      (DATFLG),A      ; Set literal flag
1073+ 22B3 D6 54        TSTREM: sub     ZREM-$3A        ; Is it REM?
1074+ 22B5 C2 23 22             jp      NZ,CRNCLP       ; No - Leave flag
1075+ 22B8 47                   ld      B,A             ; Copy rest of buffer
1076+ 22B9 7E           NXTCHR: ld      A,(HL)          ; Get byte
1077+ 22BA B7                   or      A               ; End of line ?
1078+ 22BB CA C9 22             jp      Z,ENDBUF        ; Yes - Terminate buffer
1079+ 22BE B8                   cp      B               ; End of statement ?
1080+ 22BF CA A2 22             jp      Z,MOVDIR        ; Yes - Get next one
1081+ 22C2 23           CPYLIT: inc     HL              ; Move up source string
1082+ 22C3 12                   ld      (DE),A          ; Save in destination
1083+ 22C4 0C                   inc     C               ; Increment length
1084+ 22C5 13                   inc     DE              ; Move up destination
1085+ 22C6 C3 B9 22             jp      NXTCHR          ; Repeat
1086+ 22C9
1087+ 22C9 21 37 81     ENDBUF: ld      HL,BUFFER-1     ; Point to start of buffer
1088+ 22CC 12                   ld      (DE),A          ; Mark end of buffer (A = 00)
1089+ 22CD 13                   inc     DE
1090+ 22CE 12                   ld      (DE),A          ; A = 00
1091+ 22CF 13                   inc     DE
1092+ 22D0 12                   ld      (DE),A          ; A = 00
1093+ 22D1 C9                   ret
1094+ 22D2
1095+ 22D2 3A A4 80     DODEL:  ld      A,(NULFLG)      ; Get null flag status
1096+ 22D5 B7                   or      A               ; Is it zero?
1097+ 22D6 3E 00                ld      A,$00           ; Zero A - Leave flags
1098+ 22D8 32 A4 80             ld      (NULFLG),A      ; Zero null flag
1099+ 22DB C2 E6 22             jp      NZ,ECHDEL       ; Set - Echo it
1100+ 22DE 05                   dec     B               ; Decrement length
1101+ 22DF CA 03 23             jp      Z,GETLIN        ; Get line again if empty
1102+ 22E2 CD 8E 23             call    OUTC            ; Output null character
1103+ 22E5 3E                   defb    $3E             ; Skip "dec B"
1104+ 22E6 05           ECHDEL: dec     B               ; Count bytes in buffer
1105+ 22E7 2B                   dec     HL              ; Back space buffer
1106+ 22E8 CA FA 22             jp      Z,OTKLN         ; No buffer - Try again
1107+ 22EB 7E                   ld      A,(HL)          ; Get deleted byte
1108+ 22EC CD 8E 23             call    OUTC            ; Echo it
1109+ 22EF C3 0C 23             jp      MORINP          ; Get more input
1110+ 22F2
1111+ 22F2 05           DELCHR: dec     B               ; Count bytes in buffer
1112+ 22F3 2B                   dec     HL              ; Back space buffer
1113+ 22F4 CD 8E 23             call    OUTC            ; Output character in A
1114+ 22F7 C2 0C 23             jp      NZ,MORINP       ; Not end - Get more
1115+ 22FA CD 8E 23     OTKLN:  call    OUTC            ; Output character in A
1116+ 22FD CD 99 28     KILIN:  call    PRNTCRLF        ; Output CRLF
1117+ 2300 C3 03 23             jp      TTYLIN          ; Get line again
1118+ 2303
1119+ 2303              GETLIN:
1120+ 2303 21 38 81     TTYLIN: ld      HL,BUFFER       ; Get a line by character
1121+ 2306 06 01                ld      B,$01           ; Set buffer as empty
1122+ 2308 AF                   xor     A
1123+ 2309 32 A4 80             ld      (NULFLG),A      ; Clear null flag
1124+ 230C CD CF 23     MORINP: call    CLOTST          ; Get character and test ^O
1125+ 230F 4F                   ld      C,A             ; Save character in C
1126+ 2310 FE 7F                cp      DEL             ; Delete character?
1127+ 2312 CA D2 22             jp      Z,DODEL         ; Yes - Process it
1128+ 2315 3A A4 80             ld      A,(NULFLG)      ; Get null flag
1129+ 2318 B7                   or      A               ; Test null flag status
1130+ 2319 CA 25 23             jp      Z,PROCES        ; Reset - Process character
1131+ 231C 3E 00                ld      A,$00           ; Set a null
1132+ 231E CD 8E 23             call    OUTC            ; Output null
1133+ 2321 AF                   xor     A               ; Clear A
1134+ 2322 32 A4 80             ld      (NULFLG),A      ; Reset null flag
1135+ 2325 79           PROCES: ld      A,C             ; Get character
1136+ 2326 FE 07                cp      CTRLG           ; Bell?
1137+ 2328 CA 65 23             jp      Z,PUTCTL        ; Yes - Save it
1138+ 232B FE 03                cp      CTRLC           ; Is it control "C"?
1139+ 232D CC 5A 23             call    Z,GMNCR         ; Yes - exit from graphic mode & Output CRLF
1140+ 2330 37                   scf                     ; Flag break
1141+ 2331 C8                   ret     Z               ; Return if control "C"
1142+ 2332 FE 0D                cp      CR              ; Is it enter?
1143+ 2334 CA 8F 28             jp      Z,ENDINP        ; Yes - Terminate input
1144+ 2337 FE 15                cp      CTRLU           ; Is it control "U"?
1145+ 2339 CA FD 22             jp      Z,KILIN         ; Yes - Get another line
1146+ 233C FE 08                cp      BKSP            ; Is it backspace?
1147+ 233E CA F2 22             jp      Z,DELCHR        ; Yes - Delete character
1148+ 2341 FE 12                cp      CTRLR           ; Is it control "R"?
1149+ 2343 C2 60 23             jp      NZ,PUTBUF       ; No - Put in buffer
1150+ 2346 C5                   push    BC              ; Save buffer length
1151+ 2347 D5                   push    DE              ; Save DE
1152+ 2348 E5                   push    HL              ; Save buffer address
1153+ 2349 36 00                ld      (HL),$00        ; Mark end of buffer
1154+ 234B CD FF 4C             call    OUTNCR          ; Output and do CRLF
1155+ 234E 21 38 81             ld      HL,BUFFER       ; Point to buffer start
1156+ 2351 CD 65 2F             call    PRS             ; Output buffer
1157+ 2354 E1                   pop     HL              ; Restore buffer address
1158+ 2355 D1                   pop     DE              ; Restore DE
1159+ 2356 C1                   pop     BC              ; Restore buffer length
1160+ 2357 C3 0C 23             jp      MORINP          ; Get another character
1161+ 235A CD 5D 20     GMNCR:  call    EXITGM          ; exit from graphic mode
1162+ 235D C3 99 28             jp      PRNTCRLF        ; output CRLF
1163+ 2360
1164+ 2360 FE 20        PUTBUF: cp      SPC             ; Is it a control code?
1165+ 2362 DA 0C 23             jp      C,MORINP        ; Yes - Ignore
1166+ 2365 78           PUTCTL: ld      A,B             ; Get number of bytes in buffer
1167+ 2366 FE 59                cp      $58+$01         ; Test for line overflow
1168+ 2368 3E 08                ld      A,BKSP          ; Set a bell
1169+ 236A D2 77 23             jp      NC,OUTNBS       ; Ring bell if buffer full
1170+ 236D 79                   ld      A,C             ; Get character
1171+ 236E 71                   ld      (HL),C          ; Save in buffer
1172+ 236F 32 DB 81             ld      (LSTBIN),A      ; Save last input byte
1173+ 2372 23                   inc     HL              ; Move up buffer
1174+ 2373 04                   inc     B               ; Increment length
1175+ 2374 C3 0C 23     OUTIT:  jp      MORINP          ; Get another character
1176+ 2377
1177+ 2377 CD 8E 23     OUTNBS: call    OUTC            ; Output bell and back over it
1178+ 237A C3 74 23             jp      OUTIT           ; get more chars
1179+ 237D
1180+ 237D 7C           CPDEHL: ld      A,H             ; Get H
1181+ 237E 92                   sub     D               ; Compare with D
1182+ 237F C0                   ret     NZ              ; Different - Exit
1183+ 2380 7D                   ld      A,L             ; Get L
1184+ 2381 93                   sub     E               ; Compare with E
1185+ 2382 C9                   ret                     ; Return status
1186+ 2383
1187+ 2383 7E           CHKSYN: ld      A,(HL)          ; Check syntax of character
1188+ 2384 E3                   ex      (SP),HL         ; Address of test byte
1189+ 2385 BE                   cp      (HL)            ; Same as in code string?
1190+ 2386 23                   inc     HL              ; Return address
1191+ 2387 E3                   ex      (SP),HL         ; Put it back
1192+ 2388 CA CC 25             jp      Z,GETCHR        ; Yes - Get next character
1193+ 238B C3 83 20             jp      SNERR           ; Different - ?SN Error
1194+ 238E
1195+ 238E F5           OUTC:   push    AF              ; Save character
1196+ 238F 3A A5 80             ld      A,(CTLOFG)      ; Get control "O" flag
1197+ 2392 B7                   or      A               ; Is it set?
1198+ 2393 C2 9A 2F             jp      NZ,POPAF        ; Yes - don't output
1199+ 2396 F1                   pop     AF              ; Restore character
1200+ 2397 C5                   push    BC              ; Save buffer length
1201+ 2398 F5                   push    AF              ; Save character
1202+ 2399 FE 20                cp      SPC             ; Is it a control code?
1203+ 239B DA B2 23             jp      C,DINPOS        ; Yes - Don't inc POS(X)
1204+ 239E 3A A2 80             ld      A,(LWIDTH)      ; Get line width
1205+ 23A1 47                   ld      B,A             ; To B
1206+ 23A2 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1207+ 23A5 04                   inc     B               ; Width 255?
1208+ 23A6 CA AE 23             jp      Z,INCLEN        ; Yes - No width limit
1209+ 23A9 05                   dec     B               ; Restore width
1210+ 23AA B8                   cp      B               ; At end of line?
1211+ 23AB CC 99 28             call    Z,PRNTCRLF      ; Yes - output CRLF
1212+ 23AE 3C           INCLEN: inc     A               ; Move on one character
1213+ 23AF 32 92 81             ld      (CURPOS),A      ; Save new position
1214+ 23B2 AF           DINPOS: xor     A
1215+ 23B3 32 3F 82             ld      (KBDNPT),A      ; set flag for no char from keyboard
1216+ 23B6 F1                   pop     AF              ; Restore character
1217+ 23B7 C1                   pop     BC              ; Restore buffer length
1218+ 23B8 F5                   push    AF
1219+ 23B9 CD C1 23             call    SND2VID         ; send char to video
1220+ 23BC F1                   pop     AF
1221+ 23BD CD D7 4C             call    MONOUT          ; send char to serial if enabled
1222+ 23C0 C9                   ret
1223+ 23C1
1224+ 23C1              ; print char to video if cursor is on
1225+ 23C1 32 02 82     SND2VID:ld      (CHR4VID),A     ; store A
1226+ 23C4 3A 01 82             ld      A,(PRNTVIDEO)   ; check print-on-video
1227+ 23C7 B7                   or      A               ; is it off?
1228+ 23C8 C8                   ret     Z               ; yes, so return
1229+ 23C9 F3                   di                      ; disable INTs
1230+ 23CA CD 78 07             call    CHAR2VID        ; cursor is on, so print char on screen
1231+ 23CD FB                   ei                      ; re-enable INTs
1232+ 23CE C9                   ret                     ; return to caller
1233+ 23CF
1234+ 23CF CD 20 3D     CLOTST: call    GETINP          ; Get input character
1235+ 23D2 FE 0F                cp      CTRLO           ; Is it control "O"?
1236+ 23D4 C0                   ret     NZ              ; No don't flip flag
1237+ 23D5 3A A5 80             ld      A,(CTLOFG)      ; Get flag
1238+ 23D8 2F                   cpl                     ; Flip it
1239+ 23D9 32 A5 80             ld      (CTLOFG),A      ; Put it back
1240+ 23DC A7                   and     A               ; is output enabled?
1241+ 23DD CC 44 09             call    Z,CURSOR_ON     ; yes, so cursor on
1242+ 23E0 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1243+ 23E3 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1244+ 23E5 CC AD 01             call    Z,A_RTS_ON      ; yes, set RTS on
1245+ 23E8 AF                   xor     A               ; Null character
1246+ 23E9 C9                   ret
1247+ 23EA
1248+ 23EA              ; LIST: list the program stored into memory
1249+ 23EA C1           LIST:   pop     BC              ; rubbish - not needed (legacy from original call of LIST)
1250+ 23EB 2B                   dec     HL              ; dec 'cos GETCHR INCs
1251+ 23EC CD CC 25             call    GETCHR          ; Get next character
1252+ 23EF CA 45 24             jp      Z,LSTALL        ; list all if nothing follows
1253+ 23F2 FE BF                cp      ZMINUS          ; is it '-'?
1254+ 23F4 20 20                jr      NZ,LST01        ; no, look for a line number
1255+ 23F6 11 00 00             ld      DE,$0000        ; yes, set search from 0
1256+ 23F9 CD E6 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1257+ 23FC ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1258+ 2400 CD 83 23             call    CHKSYN          ; skip '-'
1259+ 2403 BF                   defb    ZMINUS
1260+ 2404 CD 9C 26             call    ATOH            ; now, look for another number (ASCII number to DE)
1261+ 2407 CD EC 24             call    SRCLN           ; find a line, getting the previous if it doesn't exist
1262+ 240A ED 43 07 82          ld      (TMPBFR2),BC    ; store address of ending line
1263+ 240E ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1264+ 2412 C5                   push    BC              ; store address of line for later use
1265+ 2413 C3 7D 24             jp      LISTLP          ; go listing
1266+ 2416 CD 9C 26     LST01:  call    ATOH            ; get a line number (ASCII number to DE)
1267+ 2419 ED 53 0B 82  LST01H: ld      (TMPBFR4),DE    ; store ending line address for later use - N.B.: this is a hook for HELP command
1268+ 241D CD E6 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1269+ 2420 ED 43 05 82          ld      (TMPBFR1),BC    ; store address of starting line
1270+ 2424 ED 43 07 82          ld      (TMPBFR2),BC    ; same address for ending line (we'll change it later if needed)
1271+ 2428 2B                   dec     HL              ; dec 'cos GETCHR INCs
1272+ 2429 CD CC 25             call    GETCHR          ; Get next character
1273+ 242C CA 38 24             jp      Z,LSTNOT        ; nothing follows, so ending & starting lines are the same
1274+ 242F FE BF                cp      ZMINUS          ; is it '-'?
1275+ 2431 CA 5D 24             jp      Z,LST03         ; yes, read ending line
1276+ 2434 C5           LST06:  push    BC              ; store address for later use
1277+ 2435 C3 7D 24             jp      LISTLP          ; jump to list
1278+ 2438 ED 5B 0B 82  LSTNOT: ld      DE,(TMPBFR4)
1279+ 243C CD E6 24             call    SRCHLIN         ; find address of line number, getting the following if it doesn't exist
1280+ 243F DA 34 24             jp      C,LST06
1281+ 2442 C3 E3 20             jp      PRNTOK
1282+ 2445 11 F9 FF     LSTALL: ld      DE,65529        ; set ending line to max. allowed line number
1283+ 2448 CD E6 24             call    SRCHLIN         ; get address of last line
1284+ 244B ED 43 07 82          ld      (TMPBFR2),BC    ; store it
1285+ 244F 11 00 00             ld      DE,$0000        ; set start to first line in memory
1286+ 2452 CD E6 24             call    SRCHLIN         ; get address of first line
1287+ 2455 ED 43 05 82          ld      (TMPBFR1),BC    ; store it
1288+ 2459 C5                   push    BC              ; store address of starting line for later use
1289+ 245A C3 7D 24             jp      LISTLP          ; start printing
1290+ 245D CD 83 23     LST03:  call    CHKSYN          ; skip '-'
1291+ 2460 BF                   defb    ZMINUS
1292+ 2461 CD 9C 26             call    ATOH            ; look for another number (return into DE)
1293+ 2464 7A                   ld      A,D
1294+ 2465 B3                   or      E               ; is line=0?
1295+ 2466 20 09                jr      NZ,LST05        ; no, jump over
1296+ 2468 11 F9 FF             ld      DE,65529        ; yes set last valid line number
1297+ 246B CD E6 24             call    SRCHLIN         ; get address of last line
1298+ 246E C3 74 24             jp      LST02
1299+ 2471 CD EC 24     LST05:  call    SRCLN           ; find a line, getting the previous if it doesn't exist
1300+ 2474 ED 43 07 82  LST02:  ld      (TMPBFR2),BC    ; store address of ending line
1301+ 2478 ED 4B 05 82          ld      BC,(TMPBFR1)    ; retrieve address of starting line
1302+ 247C C5                   push    BC              ; store it for later use
1303+ 247D E1           LISTLP: pop     HL              ; Restore address of line
1304+ 247E 4E                   ld      C,(HL)          ; Get LSB of next line
1305+ 247F 23                   inc     HL
1306+ 2480 46                   ld      B,(HL)          ; Get MSB of next line
1307+ 2481 23                   inc     HL
1308+ 2482 78                   ld      A,B             ; BC = 0 (End of program)?
1309+ 2483 B1                   or      C
1310+ 2484 CA E3 20             jp      Z,PRNTOK        ; Yes - Go to command mode
1311+ 2487 CD F7 25             call    TSTBRK          ; Test for break key
1312+ 248A CD FA 24             call    TSTSPC          ; test for space
1313+ 248D C5                   push    BC              ; Save address of next line
1314+ 248E 3A FA 81             ld      A,(SCR_CURS_X)  ; load current X pos of cursor
1315+ 2491 A7                   and     A               ; is it at the beginning of a new line?
1316+ 2492 20 0B                jr      NZ,LST08        ; No, jump over
1317+ 2494 3E 0D                ld      A,CR            ; yes, so just send a CR
1318+ 2496 CD D7 4C             call    MONOUT          ; to serial if it's open
1319+ 2499 AF                   xor     A               ; then, set cursor
1320+ 249A 32 92 81             ld      (CURPOS),A      ; to position 0
1321+ 249D 18 03                jr      LST07           ; and continue
1322+ 249F CD 99 28     LST08:  call    PRNTCRLF        ; output CRLF
1323+ 24A2 5E           LST07:  ld      E,(HL)          ; Get LSB of line number
1324+ 24A3 23                   inc     HL
1325+ 24A4 56                   ld      D,(HL)          ; Get MSB of line number
1326+ 24A5 23                   inc     HL
1327+ 24A6 E5                   push    HL              ; Save address of line start
1328+ 24A7 EB                   ex      DE,HL           ; Line number to HL
1329+ 24A8 CD 04 3A             call    PRNTHL          ; Output line number in decimal
1330+ 24AB 3E 20                ld      A,SPC           ; Space after line number
1331+ 24AD E1                   pop     HL              ; Restore start of line address
1332+ 24AE CD 8E 23     LSTLP2: call    OUTC            ; Output character in A
1333+ 24B1 7E           LSTLP3: ld      A,(HL)          ; Get next byte in line
1334+ 24B2 B7                   or      A               ; End of line?
1335+ 24B3 23                   inc     HL              ; To next byte in line
1336+ 24B4 CA D8 24             jp      Z,NXTLN         ; Yes - check next line
1337+ 24B7 F2 AE 24             jp      P,LSTLP2        ; No token - output it
1338+ 24BA D6 7F                sub     ZEND-1          ; Find and output word
1339+ 24BC 4F                   ld      C,A             ; Token offset+1 to C
1340+ 24BD 11 FF 1C             ld      DE,WORDS        ; Reserved word list
1341+ 24C0 1A           FNDTOK: ld      A,(DE)          ; Get character in list
1342+ 24C1 13                   inc     DE              ; Move on to next
1343+ 24C2 B7                   or      A               ; Is it start of word?
1344+ 24C3 F2 C0 24             jp      P,FNDTOK        ; No - Keep looking for word
1345+ 24C6 0D                   dec     C               ; Count words
1346+ 24C7 C2 C0 24             jp      NZ,FNDTOK       ; Not there - keep looking
1347+ 24CA E6 7F        OUTWRD: and     %01111111       ; Strip bit 7
1348+ 24CC CD 8E 23             call    OUTC            ; Output character
1349+ 24CF 1A                   ld      A,(DE)          ; Get next character
1350+ 24D0 13                   inc     DE              ; Move on to next
1351+ 24D1 B7                   or      A               ; Is it end of word?
1352+ 24D2 F2 CA 24             jp      P,OUTWRD        ; No - output the rest
1353+ 24D5 C3 B1 24             jp      LSTLP3          ; Next byte in line
1354+ 24D8 D1           NXTLN:  pop     DE              ; recover address of current line
1355+ 24D9 2A 07 82             ld      HL,(TMPBFR2)    ; address of last line to print
1356+ 24DC CD 05 4D             call    CMP16           ; check if current line is over last printable line
1357+ 24DF DA E3 20             jp      C,PRNTOK        ; finish - leave & print OK
1358+ 24E2 D5                   push    DE              ; store address of current line
1359+ 24E3 C3 7D 24             jp      LISTLP          ; continue listing
1360+ 24E6              ; look for the address of a program line
1361+ 24E6 E5           SRCHLIN:push    HL              ; store HL (this is needed because HL store the pointer to the input buffer)
1362+ 24E7 CD 9F 21             call    SRCHLN          ; search for line number in DE
1363+ 24EA E1                   pop     HL              ; retrieve HL
1364+ 24EB C9                   ret                     ; return to caller
1365+ 24EC              ; look for the address of a program line - if the line isn't found,
1366+ 24EC              ; it look backward for the previous line
1367+ 24EC E5           SRCLN:  push    HL              ; store HL
1368+ 24ED CD 9F 21     SRCLN1: call    SRCHLN          ; search for line in DE
1369+ 24F0 DA F8 24             jp      C,LVSRLN        ; found it, leave loop
1370+ 24F3 1B                   dec     DE              ; not found, decrement number to look backward for an existing line
1371+ 24F4 7B                   ld      A,E
1372+ 24F5 B2                   or      D               ; is line number zero?
1373+ 24F6 20 F5                jr      NZ,SRCLN1       ; no, continue
1374+ 24F8 E1           LVSRLN: pop     HL              ; retrieve HL
1375+ 24F9 C9                   ret                     ; return to caller
1376+ 24FA
1377+ 24FA              ; during LISTing, check if PAUSE is pressed, then pause listing and
1378+ 24FA              ; wait for another pressing of PAUSE to continue or CTRL-C/BREAK to exit
1379+ 24FA 3A 41 82     TSTSPC: ld      A,(TMPKEYBFR)   ; Get input character
1380+ 24FD FE 20                cp      SPC             ; Is it SPACE?
1381+ 24FF C0                   ret     NZ              ; No, return
1382+ 2500 CD 20 3D     WTSPC:  call    GETINP          ; Yes, stop listing and wait for another space or BREAK
1383+ 2503 FE 20                cp      SPC             ; is it SPACE?
1384+ 2505 20 05                jr      NZ,CNTWTSP      ; no, continue
1385+ 2507 AF                   xor     A
1386+ 2508 32 41 82             ld      (TMPKEYBFR),A   ; reset key
1387+ 250B C9                   ret                     ; return to caller
1388+ 250C FE 03        CNTWTSP:cp      CTRLC           ; is it CTRL-C/BREAK?
1389+ 250E 20 F0                jr      NZ,WTSPC        ; no, loop
1390+ 2510 C3 2F 1C             jp      BRKRET          ; exit and output "Ok"
1391+ 2513
1392+ 2513
1393+ 2513 3E 64        FOR:    ld      A,$64           ; Flag "FOR" assignment
1394+ 2515 32 DA 81             ld      (FORFLG),A      ; Save "FOR" flag
1395+ 2518 CD 8C 27             call    LET             ; Set up initial index
1396+ 251B C1                   pop     BC              ; Drop RETurn address
1397+ 251C E5                   push    HL              ; Save code string address
1398+ 251D CD 75 27             call    DATA            ; Get next statement address
1399+ 2520 22 D6 81             ld      (LOOPST),HL     ; Save it for start of loop
1400+ 2523 21 02 00             ld      HL,$0002        ; Offset for "FOR" block
1401+ 2526 39                   add     HL,SP           ; Point to it
1402+ 2527 CD 10 20     FORSLP: call    LOKFOR          ; Look for existing "FOR" block
1403+ 252A D1                   pop     DE              ; Get code string address
1404+ 252B C2 43 25             jp      NZ,FORFND       ; No nesting found
1405+ 252E 09                   add     HL,BC           ; Move into "FOR" block
1406+ 252F D5                   push    DE              ; Save code string address
1407+ 2530 2B                   dec     HL
1408+ 2531 56                   ld      D,(HL)          ; Get MSB of loop statement
1409+ 2532 2B                   dec     HL
1410+ 2533 5E                   ld      E,(HL)          ; Get LSB of loop statement
1411+ 2534 23                   inc     HL
1412+ 2535 23                   inc     HL
1413+ 2536 E5                   push    HL              ; Save block address
1414+ 2537 2A D6 81             ld      HL,(LOOPST)     ; Get address of loop statement
1415+ 253A CD 7D 23             call    CPDEHL          ; Compare the FOR loops
1416+ 253D E1                   pop     HL              ; Restore block address
1417+ 253E C2 27 25             jp      NZ,FORSLP       ; Different FORs - Find another
1418+ 2541 D1                   pop     DE              ; Restore code string address
1419+ 2542 F9                   ld      SP,HL           ; Remove all nested loops
1420+ 2543
1421+ 2543 EB           FORFND: ex      DE,HL           ; Code string address to HL
1422+ 2544 0E 08                ld      C,$08
1423+ 2546 CD 40 20             call    CHKSTK          ; Check for 8 levels of stack
1424+ 2549 E5                   push    HL              ; Save code string address
1425+ 254A 2A D6 81             ld      HL,(LOOPST)     ; Get first statement of loop
1426+ 254D E3                   ex      (SP),HL         ; Save and restore code string
1427+ 254E E5                   push    HL              ; Re-save code string address
1428+ 254F 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
1429+ 2552 E3                   ex      (SP),HL         ; Save and restore code string
1430+ 2553 CD 60 2A             call    TSTNUM          ; Make sure it's a number
1431+ 2556 CD 83 23             call    CHKSYN          ; Make sure "TO" is next
1432+ 2559 B8                   defb    ZTO             ; "TO" token
1433+ 255A CD 5D 2A             call    GETNUM          ; Get "TO" expression value
1434+ 255D E5                   push    HL              ; Save code string address
1435+ 255E CD B6 38             call    BCDEFP          ; Move "TO" value to BCDE
1436+ 2561 E1                   pop     HL              ; Restore code string address
1437+ 2562 C5                   push    BC              ; Save "TO" value in block
1438+ 2563 D5                   push    DE
1439+ 2564 01 00 81             ld      BC,$8100        ; BCDE - 1 (default STEP)
1440+ 2567 51                   ld      D,C             ; C=0
1441+ 2568 5A                   ld      E,D             ; D=0
1442+ 2569 7E                   ld      A,(HL)          ; Get next byte in code string
1443+ 256A FE BD                cp      ZSTEP           ; See if "STEP" is stated
1444+ 256C 3E 01                ld      A,$01           ; Sign of step = 1
1445+ 256E C2 7F 25             jp      NZ,SAVSTP       ; No STEP given - Default to 1
1446+ 2571 CD CC 25             call    GETCHR          ; Jump over "STEP" token
1447+ 2574 CD 5D 2A             call    GETNUM          ; Get step value
1448+ 2577 E5                   push    HL              ; Save code string address
1449+ 2578 CD B6 38             call    BCDEFP          ; Move STEP to BCDE
1450+ 257B CD 6A 38             call    TSTSGN          ; Test sign of FPREG
1451+ 257E E1                   pop     HL              ; Restore code string address
1452+ 257F C5           SAVSTP: push    BC              ; Save the STEP value in block
1453+ 2580 D5                   push    DE
1454+ 2581 F5                   push    AF              ; Save sign of STEP
1455+ 2582 33                   inc     SP              ; Don't save flags
1456+ 2583 E5                   push    HL              ; Save code string address
1457+ 2584 2A DD 81             ld      HL,(BRKLIN)     ; Get address of index variable
1458+ 2587 E3                   ex      (SP),HL         ; Save and restore code string
1459+ 2588 06 81        PUTFID: ld      B,ZFOR          ; "FOR" block marker
1460+ 258A C5                   push    BC              ; Save it
1461+ 258B 33                   inc     SP              ; Don't save C
1462+ 258C
1463+ 258C CD F7 25     RUNCNT: call    TSTBRK          ; Execution driver - Test break
1464+ 258F 22 DD 81             ld      (BRKLIN),HL     ; Save code address for break
1465+ 2592 7E                   ld      A,(HL)          ; Get next byte in code string
1466+ 2593 FE 3A                cp      ':'             ; Multi statement line?
1467+ 2595 CA AC 25             jp      Z,EXCUTE        ; Yes - Execute it
1468+ 2598 B7                   or      A               ; End of line?
1469+ 2599 C2 83 20             jp      NZ,SNERR        ; No - Syntax error
1470+ 259C 23                   inc     HL              ; Point to address of next line
1471+ 259D 7E                   ld      A,(HL)          ; Get LSB of line pointer
1472+ 259E 23                   inc     HL
1473+ 259F B6                   or      (HL)            ; Is it zero (End of prog)?
1474+ 25A0 CA 1E 26             jp      Z,ENDPRG        ; Yes - Terminate execution
1475+ 25A3 23                   inc     HL              ; Point to line number
1476+ 25A4 5E                   ld      E,(HL)          ; Get LSB of line number
1477+ 25A5 23                   inc     HL
1478+ 25A6 56                   ld      D,(HL)          ; Get MSB of line number
1479+ 25A7 EB                   ex      DE,HL           ; Line number to HL
1480+ 25A8 22 AF 80             ld      (LINEAT),HL     ; Save as current line number
1481+ 25AB EB                   ex      DE,HL           ; Line number back to DE
1482+ 25AC CD CC 25     EXCUTE: call    GETCHR          ; Get key word
1483+ 25AF 11 8C 25             ld      DE,RUNCNT       ; Where to RETurn to
1484+ 25B2 D5                   push    DE              ; Save for RETurn
1485+ 25B3 C8           IFJMP:  ret     Z               ; Go to RUNCNT if end of STMT
1486+ 25B4
1487+ 25B4 D6 80        ONJMP:  sub     ZEND            ; Is it a token?
1488+ 25B6 DA 8C 27             jp      C,LET           ; No - try to assign it
1489+ 25B9 FE 37                cp      ZNEW+1-ZEND     ; END to NEW ?
1490+ 25BB D2 83 20             jp      NC,SNERR        ; Not a key word - ?SN Error
1491+ 25BE 07                   rlca                    ; Double it
1492+ 25BF 4F                   ld      C,A             ; BC = Offset into table
1493+ 25C0 06 00                ld      B,0
1494+ 25C2 EB                   ex      DE,HL           ; Save code string address
1495+ 25C3 21 90 1E             ld      HL,WORDTB       ; Keyword address table
1496+ 25C6 09                   add     HL,BC           ; Point to routine address
1497+ 25C7 4E                   ld      C,(HL)          ; Get LSB of routine address
1498+ 25C8 23                   inc     HL
1499+ 25C9 46                   ld      B,(HL)          ; Get MSB of routine address
1500+ 25CA C5                   push    BC              ; Save routine address
1501+ 25CB EB                   ex      DE,HL           ; Restore code string address
1502+ 25CC
1503+ 25CC              ; get a char from input buffer: exit with NC if character found is
1504+ 25CC              ; not a number; exit with Z if nothing found; char is into A
1505+ 25CC 23           GETCHR: inc     HL              ; Point to next character
1506+ 25CD 7E                   ld      A,(HL)          ; Get next code string byte
1507+ 25CE FE 3A                cp      ':'             ; Z if ':'
1508+ 25D0 D0                   ret     NC              ; NC if > "9"
1509+ 25D1 FE 20                cp      SPC
1510+ 25D3 CA CC 25             jp      Z,GETCHR        ; Skip over spaces
1511+ 25D6 FE 30                cp      '0'
1512+ 25D8 3F                   ccf                     ; NC if < '0'
1513+ 25D9 3C                   inc     A               ; Test for zero - Leave carry
1514+ 25DA 3D                   dec     A               ; Z if Null
1515+ 25DB C9                   ret
1516+ 25DC
1517+ 25DC EB           RESTOR: ex      DE,HL           ; Save code string address
1518+ 25DD 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1519+ 25E0 CA F1 25             jp      Z,RESTNL        ; Just RESTORE - reset pointer
1520+ 25E3 EB                   ex      DE,HL           ; Restore code string address
1521+ 25E4 CD 9C 26             call    ATOH            ; Get line number to DE
1522+ 25E7 E5                   push    HL              ; Save code string address
1523+ 25E8 CD 9F 21             call    SRCHLN          ; Search for line number in DE
1524+ 25EB 60                   ld      H,B             ; HL = Address of line
1525+ 25EC 69                   ld      L,C
1526+ 25ED D1                   pop     DE              ; Restore code string address
1527+ 25EE D2 4B 27             jp      NC,ULERR        ; ?UL Error if not found
1528+ 25F1 2B           RESTNL: dec     HL              ; Byte before DATA statement
1529+ 25F2 22 51 82     UPDATA: ld      (NXTDAT),HL     ; Update DATA pointer
1530+ 25F5 EB                   ex      DE,HL           ; Restore code string address
1531+ 25F6 C9                   ret
1532+ 25F7
1533+ 25F7
1534+ 25F7              ; check if CTRL-C is into input buffer
1535+ 25F7 DF           TSTBRK: rst     $18             ; Check input status
1536+ 25F8 C8                   ret     Z               ; No key, go back
1537+ 25F9 D7                   rst     $10             ; Get the key into A
1538+ 25FA FE 1B                cp      ESC             ; Escape key?
1539+ 25FC 28 11                jr      Z,BRK           ; Yes, break
1540+ 25FE FE 03                cp      CTRLC           ; <Ctrl-C>
1541+ 2600 28 0D                jr      Z,BRK           ; Yes, break
1542+ 2602 FE 13                cp      CTRLS           ; Stop scrolling?
1543+ 2604 C0                   ret     NZ              ; Other key, ignore
1544+ 2605
1545+ 2605
1546+ 2605              ; wait for a key while listing
1547+ 2605 D7           STALL:  rst     $10             ; Wait for key
1548+ 2606 FE 11                cp      CTRLQ           ; Resume scrolling?
1549+ 2608 C8                   ret     Z               ; Release the chokehold
1550+ 2609 FE 03                cp      CTRLC           ; Second break?
1551+ 260B 28 07                jr      Z,STOP          ; Break during hold exits prog
1552+ 260D 18 F6                jr      STALL           ; Loop until <Ctrl-Q> or <brk>
1553+ 260F
1554+ 260F 3E FF        BRK:    ld      A,$FF           ; Set BRKFLG
1555+ 2611 32 A9 80             ld      (BRKFLG),A      ; Store it
1556+ 2614
1557+ 2614 C0           STOP:   ret     NZ              ; Exit if anything else
1558+ 2615 F6                   defb    $F6             ; Flag "STOP"
1559+ 2616 C0           PEND:   ret     NZ              ; Exit if anything else
1560+ 2617 22 DD 81             ld      (BRKLIN),HL     ; Save point of break
1561+ 261A 21                   defb    $21             ; Skip "OR 11111111B"
1562+ 261B F6 FF        INPBRK: or      %11111111       ; Flag "Break" wanted
1563+ 261D C1                   pop     BC              ; Return not needed and more
1564+ 261E 2A AF 80     ENDPRG: ld      HL,(LINEAT)     ; Get current line number
1565+ 2621 F5                   push    AF              ; Save STOP / END status
1566+ 2622 7D                   ld      A,L             ; Is it direct break?
1567+ 2623 A4                   and     H
1568+ 2624 3C                   inc     A               ; Line is -1 if direct break
1569+ 2625 CA 31 26             jp      Z,NOLIN         ; Yes - No line number
1570+ 2628 22 E1 81             ld      (ERRLIN),HL     ; Save line of break
1571+ 262B 2A DD 81             ld      HL,(BRKLIN)     ; Get point of break
1572+ 262E 22 E3 81             ld      (CONTAD),HL     ; Save point to CONTinue
1573+ 2631 AF           NOLIN:  xor     A
1574+ 2632 32 A5 80             ld      (CTLOFG),A      ; Enable output
1575+ 2635 CD 87 28             call    STTLIN          ; Start a new line
1576+ 2638 F1                   pop     AF              ; Restore STOP / END status
1577+ 2639 21 06 20             ld      HL,BRKMSG       ; "Break" message
1578+ 263C C2 42 26             jp      NZ,ERRINT       ; "in line" wanted?
1579+ 263F C3 E3 20             jp      PRNTOK          ; Go to command mode
1580+ 2642 CD 5D 20     ERRINT: call    EXITGM          ; exit from graphics mode
1581+ 2645 C3 C1 20             jp      ERRIN           ; print message
1582+ 2648
1583+ 2648
1584+ 2648              ; CONTinue after a break/error
1585+ 2648 21 FF FF     CONT:   ld      HL,-1           ; reset...
1586+ 264B 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1587+ 264E 2A E3 81             ld      HL,(CONTAD)     ; Get CONTinue address
1588+ 2651 7C                   ld      A,H             ; Is it zero?
1589+ 2652 B5                   or      L
1590+ 2653 1E 20                ld      E,CN            ; ?CN Error
1591+ 2655 CA 9D 20             jp      Z,ERROR         ; Yes - output "?CN Error"
1592+ 2658 EB                   ex      DE,HL           ; Save code string address
1593+ 2659 2A E1 81             ld      HL,(ERRLIN)     ; Get line of last break
1594+ 265C 22 AF 80             ld      (LINEAT),HL     ; Set up current line number
1595+ 265F EB                   ex      DE,HL           ; Restore code string address
1596+ 2660 C9                   ret                     ; CONTinue where left off
1597+ 2661
1598+ 2661 E5           ACCSUM: push    HL              ; Save address in array
1599+ 2662 2A A6 80             ld      HL,(CHKSUM)     ; Get check sum
1600+ 2665 06 00                ld      B,$00           ; BC - Value of byte
1601+ 2667 4F                   ld      C,A
1602+ 2668 09                   add     HL,BC           ; Add byte to check sum
1603+ 2669 22 A6 80             ld      (CHKSUM),HL     ; Re-save check sum
1604+ 266C E1                   pop     HL              ; Restore address in array
1605+ 266D C9                   ret
1606+ 266E
1607+ 266E 7E           CHKLTR: ld      A,(HL)          ; Get byte
1608+ 266F FE 41                cp      'A'             ; < 'a' ?
1609+ 2671 D8                   ret     C               ; Carry set if not letter
1610+ 2672 FE 5B                cp      'Z'+1           ; > 'z' ?
1611+ 2674 3F                   ccf
1612+ 2675 C9                   ret                     ; Carry set if not letter
1613+ 2676
1614+ 2676 CD CC 25     FPSINT: call    GETCHR          ; Get next character
1615+ 2679 CD 5D 2A     POSINT: call    GETNUM          ; Get integer 0 to 32767
1616+ 267C CD 6A 38     DEPINT: call    TSTSGN          ; Test sign of FPREG
1617+ 267F FA 97 26             jp      M,FCERR         ; Negative - ?FC Error
1618+ 2682 3A 5C 82     DEINT:  ld      A,(FPEXP)       ; Get integer value to DE
1619+ 2685 FE 90                cp      $80+$10         ; Exponent in range (16 bits)?
1620+ 2687 DA 12 39             jp      C,FPINT         ; Yes - convert it
1621+ 268A 01 80 90             ld      BC,$9080        ; BCDE = -32768
1622+ 268D 11 00 00             ld      DE,$0000
1623+ 2690 E5                   push    HL              ; Save code string address
1624+ 2691 CD E5 38             call    CMPNUM          ; Compare FPREG with BCDE
1625+ 2694 E1                   pop     HL              ; Restore code string address
1626+ 2695 51                   ld      D,C             ; MSB to D
1627+ 2696 C8                   ret     Z               ; Return if in range
1628+ 2697 1E 08        FCERR:  ld      E,FC            ; ?FC Error
1629+ 2699 C3 9D 20             jp      ERROR           ; Output error-
1630+ 269C
1631+ 269C
1632+ 269C              ; convert a number in ASCII chars into an integer and store it into DE
1633+ 269C 2B           ATOH:   dec     HL              ; ASCII number to DE binary
1634+ 269D 11 00 00     GETLN:  ld      DE,$0000        ; Get number to DE
1635+ 26A0 CD CC 25     GTLNLP: call    GETCHR          ; Get next character
1636+ 26A3 D0                   ret     NC              ; Exit if not a digit
1637+ 26A4 E5                   push    HL              ; Save code string address
1638+ 26A5 F5                   push    AF              ; Save digit
1639+ 26A6 21 98 19             ld      HL,65529/10     ; Largest number 65529
1640+ 26A9 CD 7D 23             call    CPDEHL          ; Number in range?
1641+ 26AC DA 83 20             jp      C,SNERR         ; No - ?SN Error
1642+ 26AF 62                   ld      H,D             ; HL = Number
1643+ 26B0 6B                   ld      L,E
1644+ 26B1 19                   add     HL,DE           ; Times 2
1645+ 26B2 29                   add     HL,HL           ; Times 4
1646+ 26B3 19                   add     HL,DE           ; Times 5
1647+ 26B4 29                   add     HL,HL           ; Times 10
1648+ 26B5 F1                   pop     AF              ; Restore digit
1649+ 26B6 D6 30                sub     '0'             ; Make it 0 to 9
1650+ 26B8 5F                   ld      E,A             ; DE = Value of digit
1651+ 26B9 16 00                ld      D,0
1652+ 26BB 19                   add     HL,DE           ; Add to number
1653+ 26BC EB                   ex      DE,HL           ; Number to DE
1654+ 26BD E1                   pop     HL              ; Restore code string address
1655+ 26BE C3 A0 26             jp      GTLNLP          ; Go to next character
1656+ 26C1
1657+ 26C1 CA CF 21     CLEAR:  jp      Z,INTVAR        ; Just "CLEAR" Keep parameters
1658+ 26C4 CD 5D 2A             call    GETNUM          ; Evaluate a number
1659+ 26C7 CD 82 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1660+ 26CA 2B                   dec     HL              ; Cancel increment
1661+ 26CB CD CC 25             call    GETCHR          ; Get next character
1662+ 26CE E5                   push    HL              ; Save code string address
1663+ 26CF 2A 96 81             ld      HL,(LSTRAM)     ; Get end of RAM
1664+ 26D2 CA EA 26             jp      Z,STORED        ; No value given - Use stored
1665+ 26D5 E1                   pop     HL              ; Restore code string address
1666+ 26D6 CD 83 23             call    CHKSYN          ; Check for comma
1667+ 26D9 2C                   defb    ','
1668+ 26DA D5                   push    DE              ; Save number
1669+ 26DB CD 5D 2A             call    GETNUM          ; Evaluate a number
1670+ 26DE CD 82 26             call    DEINT           ; Get integer -32768 to 32767 into DE
1671+ 26E1 2B                   dec     HL              ; Cancel increment
1672+ 26E2 CD CC 25             call    GETCHR          ; Get next character
1673+ 26E5 C2 83 20             jp      NZ,SNERR        ; ?SN Error if more on line
1674+ 26E8 E3                   ex      (SP),HL         ; Save code string address
1675+ 26E9 EB                   ex      DE,HL           ; Number to DE
1676+ 26EA 7D           STORED: ld      A,L             ; Get LSB of new RAM top
1677+ 26EB 93                   sub     E               ; Subtract LSB of string space
1678+ 26EC 5F                   ld      E,A             ; Save LSB
1679+ 26ED 7C                   ld      A,H             ; Get MSB of new RAM top
1680+ 26EE 9A                   sbc     A,D             ; Subtract MSB of string space
1681+ 26EF 57                   ld      D,A             ; Save MSB
1682+ 26F0 DA 58 20             jp      C,OMERR         ; ?OM Error if not enough mem
1683+ 26F3 E5                   push    HL              ; Save RAM top
1684+ 26F4 2A 4B 82             ld      HL,(PROGND)     ; Get program end
1685+ 26F7 01 28 00             ld      BC,$28          ; 40 Bytes minimum working RAM
1686+ 26FA 09                   add     HL,BC           ; Get lowest address
1687+ 26FB CD 7D 23             call    CPDEHL          ; Enough memory?
1688+ 26FE D2 58 20             jp      NC,OMERR        ; No - ?OM Error
1689+ 2701 EB                   ex      DE,HL           ; RAM top to HL
1690+ 2702 22 AD 80             ld      (STRSPC),HL     ; Set new string space
1691+ 2705 E1                   pop     HL              ; End of memory to use
1692+ 2706 22 96 81             ld      (LSTRAM),HL     ; Set new top of RAM
1693+ 2709 E1                   pop     HL              ; Restore code string address
1694+ 270A C3 CF 21             jp      INTVAR          ; Initialise variables
1695+ 270D
1696+ 270D E5           RUN:    push    HL              ; store HL
1697+ 270E 21 FF FF             ld      HL,-1           ; reset...
1698+ 2711 22 B1 80             ld      (HLPLN),HL      ; ...HELP line register
1699+ 2714 E1                   pop     HL              ; retrieve HL
1700+ 2715 CA CB 21             jp      Z,RUNFST        ; RUN from start if just RUN
1701+ 2718 CD CF 21             call    INTVAR          ; Initialise variables
1702+ 271B 01 8C 25             ld      BC,RUNCNT       ; Execution driver loop
1703+ 271E C3 31 27             jp      RUNLIN          ; RUN from line number
1704+ 2721
1705+ 2721 0E 03        GOSUB:  ld      C,$03           ; 3 Levels of stack needed
1706+ 2723 CD 40 20             call    CHKSTK          ; Check for 3 levels of stack
1707+ 2726 C1                   pop     BC              ; Get return address
1708+ 2727 E5                   push    HL              ; Save code string for RETURN
1709+ 2728 E5                   push    HL              ; And for GOSUB routine
1710+ 2729 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1711+ 272C E3                   ex      (SP),HL         ; Into stack - Code string out
1712+ 272D 3E 8C                ld      A,ZGOSUB        ; "GOSUB" token
1713+ 272F F5                   push    AF              ; Save token
1714+ 2730 33                   inc     SP              ; Don't save flags
1715+ 2731
1716+ 2731 C5           RUNLIN: push    BC              ; Save return address
1717+ 2732 CD 9C 26     GOTO:   call    ATOH            ; ASCII number to DE binary
1718+ 2735 CD 77 27             call    REM             ; Get end of line
1719+ 2738 E5                   push    HL              ; Save end of line
1720+ 2739 2A AF 80             ld      HL,(LINEAT)     ; Get current line
1721+ 273C CD 7D 23             call    CPDEHL          ; Line after current?
1722+ 273F E1                   pop     HL              ; Restore end of line
1723+ 2740 23                   inc     HL              ; Start of next line
1724+ 2741 DC A2 21             call    C,SRCHLP        ; Line is after current line
1725+ 2744 D4 9F 21             call    NC,SRCHLN       ; Line is before current line
1726+ 2747 60                   ld      H,B             ; Set up code string address
1727+ 2748 69                   ld      L,C
1728+ 2749 2B                   dec     HL              ; Incremented after
1729+ 274A D8                   ret     C               ; Line found
1730+ 274B 1E 0E        ULERR:  ld      E,UL            ; ?UL Error
1731+ 274D C3 9D 20             jp      ERROR           ; Output error message
1732+ 2750
1733+ 2750 C0           RETURN: ret     NZ              ; Return if not just RETURN
1734+ 2751 16 FF                ld      D,-1            ; Flag "GOSUB" search
1735+ 2753 CD 0C 20             call    BAKSTK          ; Look "GOSUB" block
1736+ 2756 F9                   ld      SP,HL           ; Kill all FORs in subroutine
1737+ 2757 FE 8C                cp      ZGOSUB          ; Test for "GOSUB" token
1738+ 2759 1E 04                ld      E,RG            ; ?RG Error
1739+ 275B C2 9D 20             jp      NZ,ERROR        ; Error if no "GOSUB" found
1740+ 275E E1                   pop     HL              ; Get RETURN line number
1741+ 275F 22 AF 80             ld      (LINEAT),HL     ; Save as current
1742+ 2762 23                   inc     HL              ; Was it from direct statement?
1743+ 2763 7C                   ld      A,H
1744+ 2764 B5                   or      L               ; Return to line
1745+ 2765 C2 6F 27             jp      NZ,RETLIN       ; No - Return to line
1746+ 2768 3A DB 81             ld      A,(LSTBIN)      ; Any INPUT in subroutine?
1747+ 276B B7                   or      A               ; If so buffer is corrupted
1748+ 276C C2 E2 20             jp      NZ,POPNOK       ; Yes - Go to command mode
1749+ 276F 21 8C 25     RETLIN: ld      HL,RUNCNT       ; Execution driver loop
1750+ 2772 E3                   ex      (SP),HL         ; Into stack - Code string out
1751+ 2773 3E                   defb    $3E             ; Skip "pop HL"
1752+ 2774 E1           NXTDTA: pop     HL              ; Restore code string address
1753+ 2775
1754+ 2775 01 3A        DATA:   defb    $01,$3A         ; ':' End of statement (stands for LD BC,$0E3A - NOP)
1755+ 2777 0E 00        REM:    ld      C,$00           ; 00  End of statement
1756+ 2779 06 00                ld      B,$00
1757+ 277B 79           NXTSTL: ld      A,C             ; Statement and byte
1758+ 277C 48                   ld      C,B
1759+ 277D 47                   ld      B,A             ; Statement end byte
1760+ 277E 7E           NXTSTT: ld      A,(HL)          ; Get byte
1761+ 277F B7                   or      A               ; End of line?
1762+ 2780 C8                   ret     Z               ; Yes - Exit
1763+ 2781 B8                   cp      B               ; End of statement?
1764+ 2782 C8                   ret     Z               ; Yes - Exit
1765+ 2783 23                   inc     HL              ; Next byte
1766+ 2784 FE 22                cp      $22             ; '"'             ; Literal string?
1767+ 2786 CA 7B 27             jp      Z,NXTSTL        ; Yes - Look for another '"'
1768+ 2789 C3 7E 27             jp      NXTSTT          ; Keep looking
1769+ 278C
1770+ 278C CD 6C 2C     LET:    call    GETVAR          ; Get variable name
1771+ 278F CD 83 23             call    CHKSYN          ; Make sure "=" follows
1772+ 2792 C9                   defb    ZEQUAL          ; "=" token
1773+ 2793 D5                   push    DE              ; Save address of variable
1774+ 2794 3A 94 81             ld      A,(TYPE)        ; Get data type
1775+ 2797 F5                   push    AF              ; Save type
1776+ 2798 CD 6F 2A             call    EVAL            ; Evaluate expression
1777+ 279B F1                   pop     AF              ; Restore type
1778+ 279C E3                   ex      (SP),HL         ; Save code - Get var addr
1779+ 279D 22 DD 81             ld      (BRKLIN),HL     ; Save address of variable
1780+ 27A0 1F                   rra                     ; Adjust type
1781+ 27A1 CD 62 2A             call    CHKTYP          ; Check types are the same
1782+ 27A4 CA DF 27             jp      Z,LETNUM        ; Numeric - Move value
1783+ 27A7 E5           LETSTR: push    HL              ; Save address of string var
1784+ 27A8 2A 59 82             ld      HL,(FPREG)      ; Pointer to string entry
1785+ 27AB E5                   push    HL              ; Save it on stack
1786+ 27AC 23                   inc     HL              ; Skip over length
1787+ 27AD 23                   inc     HL
1788+ 27AE 5E                   ld      E,(HL)          ; LSB of string address
1789+ 27AF 23                   inc     HL
1790+ 27B0 56                   ld      D,(HL)          ; MSB of string address
1791+ 27B1 2A 35 81             ld      HL,(BASTXT)     ; Point to start of program
1792+ 27B4 CD 7D 23             call    CPDEHL          ; Is string before program?
1793+ 27B7 D2 CE 27             jp      NC,CRESTR       ; Yes - Create string entry
1794+ 27BA 2A AD 80             ld      HL,(STRSPC)     ; Point to string space
1795+ 27BD CD 7D 23             call    CPDEHL          ; Is string literal in program?
1796+ 27C0 D1                   pop     DE              ; Restore address of string
1797+ 27C1 D2 D6 27             jp      NC,MVSTPT       ; Yes - Set up pointer
1798+ 27C4 21 CE 81             ld      HL,TMPSTR       ; Temporary string pool
1799+ 27C7 CD 7D 23             call    CPDEHL          ; Is string in temporary pool?
1800+ 27CA D2 D6 27             jp      NC,MVSTPT       ; No - Set up pointer
1801+ 27CD 3E                   defb    $3E             ; Skip "pop DE"
1802+ 27CE D1           CRESTR: pop     DE              ; Restore address of string
1803+ 27CF CD C6 30             call    BAKTMP          ; Back to last tmp-str entry
1804+ 27D2 EB                   ex      DE,HL           ; Address of string entry
1805+ 27D3 CD FF 2E             call    SAVSTR          ; Save string in string area
1806+ 27D6 CD C6 30     MVSTPT: call    BAKTMP          ; Back to last tmp-str entry
1807+ 27D9 E1                   pop     HL              ; Get string pointer
1808+ 27DA CD C5 38             call    DETHL4          ; Move string pointer to var
1809+ 27DD E1                   pop     HL              ; Restore code string address
1810+ 27DE C9                   ret
1811+ 27DF
1812+ 27DF E5           LETNUM: push    HL              ; Save address of variable
1813+ 27E0 CD C2 38             call    FPTHL           ; Move value to variable
1814+ 27E3 D1                   pop     DE              ; Restore address of variable
1815+ 27E4 E1                   pop     HL              ; Restore code string address
1816+ 27E5 C9                   ret
1817+ 27E6
1818+ 27E6 CD E3 32     ON:     call    GETINT          ; Get integer 0-255
1819+ 27E9 7E                   ld      A,(HL)          ; Get "GOTO" or "GOSUB" token
1820+ 27EA 47                   ld      B,A             ; Save in B
1821+ 27EB FE 8C                cp      ZGOSUB          ; "GOSUB" token?
1822+ 27ED CA F5 27             jp      Z,ONGO          ; Yes - Find line number
1823+ 27F0 CD 83 23             call    CHKSYN          ; Make sure it's "GOTO"
1824+ 27F3 88                   defb    ZGOTO           ; "GOTO" token
1825+ 27F4 2B                   dec     HL              ; Cancel increment
1826+ 27F5 4B           ONGO:   ld      C,E             ; Integer of branch value
1827+ 27F6 0D           ONGOLP: dec     C               ; Count branches
1828+ 27F7 78                   ld      A,B             ; Get "GOTO" or "GOSUB" token
1829+ 27F8 CA B4 25             jp      Z,ONJMP         ; Go to that line if right one
1830+ 27FB CD 9D 26             call    GETLN           ; Get line number to DE
1831+ 27FE FE 2C                cp      ','             ; Another line number?
1832+ 2800 C0                   ret     NZ              ; No - Drop through
1833+ 2801 C3 F6 27             jp      ONGOLP          ; Yes - loop
1834+ 2804
1835+ 2804 CD 6F 2A     IF:     call    EVAL            ; Evaluate expression
1836+ 2807 7E                   ld      A,(HL)          ; Get token
1837+ 2808 FE 88                cp      ZGOTO           ; "GOTO" token?
1838+ 280A CA 12 28             jp      Z,IFGO          ; Yes - Get line
1839+ 280D CD 83 23             call    CHKSYN          ; Make sure it's "THEN"
1840+ 2810 BB                   defb    ZTHEN           ; "THEN" token
1841+ 2811 2B                   dec     HL              ; Cancel increment
1842+ 2812 CD 60 2A     IFGO:   call    TSTNUM          ; Make sure it's numeric
1843+ 2815 CD 6A 38             call    TSTSGN          ; Test state of expression
1844+ 2818 CA 24 28             jp      Z,IF1           ; False - Jump over
1845+ 281B CD CC 25     IF0:    call    GETCHR          ; Get next character
1846+ 281E DA 32 27             jp      C,GOTO          ; Number - GOTO that line
1847+ 2821 C3 B3 25             jp      IFJMP           ; Otherwise do statement
1848+ 2824 0E AF        IF1:    ld      C,ZELSE
1849+ 2826 CD 79 27             call    REM+2           ; check statement
1850+ 2829 B7                   or      A               ; end of line?
1851+ 282A C8                   ret     Z               ; yes, leave
1852+ 282B FE AF                cp      ZELSE
1853+ 282D 20 F5                jr      NZ,IF1          ; ELSE not found, continue check
1854+ 282F C3 1B 28             jp      IF0             ; return to IF
1855+ 2832
1856+ 2832
1857+ 2832 2B           MRPRNT: dec     HL              ; dec 'cos GETCHR INCs
1858+ 2833 CD CC 25             call    GETCHR          ; Get next character
1859+ 2836 CA 99 28     PRINT:  jp      Z,PRNTCRLF      ; CRLF if just PRINT
1860+ 2839 C8           PRNTLP: ret     Z               ; End of list - Exit
1861+ 283A FE B7                cp      ZTAB            ; "TAB(" token?
1862+ 283C CA C1 28             jp      Z,DOTAB         ; Yes - Do TAB routine
1863+ 283F FE BA                cp      ZSPC            ; "SPC(" token?
1864+ 2841 CA C1 28             jp      Z,DOTAB         ; Yes - Do SPC routine
1865+ 2844 E5                   push    HL              ; Save code string address
1866+ 2845 FE 2C                cp      ','             ; Comma?
1867+ 2847 CA A8 28             jp      Z,DOCOM         ; Yes - Move to next zone
1868+ 284A FE 3B                cp      ';'             ; Semi-colon?
1869+ 284C CA E5 28             jp      Z,NEXITM        ; Do semi-colon routine
1870+ 284F C1                   pop     BC              ; Code string address to BC
1871+ 2850 CD 6F 2A             call    EVAL            ; Evaluate expression
1872+ 2853 E5                   push    HL              ; Save code string address
1873+ 2854 3A 94 81             ld      A,(TYPE)        ; Get variable type
1874+ 2857 B7                   or      A               ; Is it a string variable?
1875+ 2858 C2 80 28             jp      NZ,PRNTST       ; Yes - Output string contents
1876+ 285B CD 0F 3A             call    NUMASC          ; Convert number to text
1877+ 285E CD 23 2F             call    CRTST           ; Create temporary string
1878+ 2861 36 00                ld      (HL),NLLCR      ; Followed by a NULL char (was SPC, space)
1879+ 2863 2A 59 82             ld      HL,(FPREG)      ; Get length of output
1880+ 2866 34                   inc     (HL)            ; Plus 1 for the space
1881+ 2867 2A 59 82             ld      HL,(FPREG)      ; < Not needed >
1882+ 286A 3A A2 80             ld      A,(LWIDTH)      ; Get width of line
1883+ 286D 47                   ld      B,A             ; To B
1884+ 286E 04                   inc     B               ; Width 255 (No limit)?
1885+ 286F CA 7C 28             jp      Z,PRNTNB        ; Yes - Output number string
1886+ 2872 04                   inc     B               ; Adjust it
1887+ 2873 3A 92 81             ld      A,(CURPOS)      ; Get cursor position
1888+ 2876 86                   add     A,(HL)          ; Add length of string
1889+ 2877 3D                   dec     A               ; Adjust it
1890+ 2878 B8                   cp      B               ; Will output fit on this line?
1891+ 2879 D4 99 28             call    NC,PRNTCRLF     ; No - CRLF first
1892+ 287C CD 68 2F     PRNTNB: call    PRS1            ; Output string at (HL)
1893+ 287F AF                   xor     A               ; Skip call by setting 'z' flag
1894+ 2880 C4 68 2F     PRNTST: call    NZ,PRS1         ; Output string at (HL)
1895+ 2883 E1                   pop     HL              ; Restore code string address
1896+ 2884 C3 32 28             jp      MRPRNT          ; See if more to PRINT
1897+ 2887
1898+ 2887 3A 92 81     STTLIN: ld      A,(CURPOS)      ; Make sure on new line
1899+ 288A B7                   or      A               ; Already at start?
1900+ 288B C8                   ret     Z               ; Yes - Do nothing
1901+ 288C C3 99 28             jp      PRNTCRLF        ; Start a new line
1902+ 288F
1903+ 288F AF           ENDINP: xor     A
1904+ 2890 32 3F 82             ld      (KBDNPT),A      ; char is not from keyboard
1905+ 2893 77                   ld      (HL),A          ; Mark end of buffer
1906+ 2894 21 37 81             ld      HL,BUFFER-1     ; Point to buffer
1907+ 2897 18 0A                jr      CNTEND
1908+ 2899 3E 0D        PRNTCRLF:ld     A,CR            ; Load a CR
1909+ 289B CD 8E 23             call    OUTC            ; Output character
1910+ 289E 3E 0A                ld      A,LF            ; Load a LF
1911+ 28A0 CD 8E 23             call    OUTC            ; Output character
1912+ 28A3 AF           CNTEND: xor     A               ; Set to position 0
1913+ 28A4 32 92 81             ld      (CURPOS),A      ; Store it
1914+ 28A7 C9                   ret                     ; return to caller
1915+ 28A8
1916+ 28A8 3A A3 80     DOCOM:  ld      A,(COMMAN)      ; Get comma width
1917+ 28AB 47                   ld      B,A             ; Save in B
1918+ 28AC 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current position
1919+ 28AF B8                   cp      B               ; Within the limit?
1920+ 28B0 D4 99 28             call    NC,PRNTCRLF     ; No - output CRLF
1921+ 28B3 D2 E5 28             jp      NC,NEXITM       ; Get next item
1922+ 28B6 D6 0A        ZONELP: sub     $0A             ; Next zone of 10 characters
1923+ 28B8 D2 B6 28             jp      NC,ZONELP       ; Repeat if more zones
1924+ 28BB 2F                   cpl                     ; Number of null chars to output
1925+ 28BC 0E 00                ld      C,NLLCR         ; null char
1926+ 28BE C3 DB 28             jp      ASPCS           ; Output them
1927+ 28C1
1928+ 28C1 F5           DOTAB:  push    AF              ; Save token
1929+ 28C2 CD E0 32             call    FNDNUM          ; Evaluate expression
1930+ 28C5 CD 83 23             call    CHKSYN          ; Make sure ")" follows
1931+ 28C8 29                   defb    ')'
1932+ 28C9 2B                   dec     HL              ; Back space on to ")"
1933+ 28CA F1                   pop     AF              ; Restore token
1934+ 28CB 0E 00                ld      C,NLLCR         ; for SPC we use NULL char (was SPACE)
1935+ 28CD D6 BA                sub     ZSPC            ; Was it "SPC(" ?
1936+ 28CF E5                   push    HL              ; Save code string address
1937+ 28D0 CA D6 28             jp      Z,DOSPC         ; Yes - Do 'E' spaces
1938+ 28D3 3A FA 81             ld      A,(SCR_CURS_X)  ; Get current X position
1939+ 28D6 2F           DOSPC:  cpl                     ; Number of spaces to print to
1940+ 28D7 83                   add     A,E             ; Total number to print
1941+ 28D8 D2 E5 28             jp      NC,NEXITM       ; TAB < Current POS(X)
1942+ 28DB 3C           ASPCS:  inc     A               ; Output A spaces
1943+ 28DC 47                   ld      B,A             ; Save number to print
1944+ 28DD 79           SPCLP:  ld      A,C             ; char to print
1945+ 28DE CD 8E 23             call    OUTC            ; Output character in A
1946+ 28E1 05                   dec     B               ; Count them
1947+ 28E2 C2 DD 28             jp      NZ,SPCLP        ; Repeat if more
1948+ 28E5 E1           NEXITM: pop     HL              ; Restore code string address
1949+ 28E6 CD CC 25             call    GETCHR          ; Get next character
1950+ 28E9 C3 39 28             jp      PRNTLP          ; More to print
1951+ 28EC
1952+ 28EC 3F 52 65 64  REDO:   defb    "?Redo from start",CR,0
1952+ 28F0 6F 20 66 72
1952+ 28F4 6F 6D 20 73
1952+ 28F8 74 61 72 74
1952+ 28FC 0D 00
1953+ 28FE
1954+ 28FE 3A DC 81     BADINP: ld      A,(READFG)      ; READ or INPUT?
1955+ 2901 B7                   or      A
1956+ 2902 C2 7D 20             jp      NZ,DATSNR       ; READ - ?SN Error
1957+ 2905 C1                   pop     BC              ; Throw away code string addr
1958+ 2906 21 EC 28             ld      HL,REDO         ; "Redo from start" message
1959+ 2909 CD 65 2F             call    PRS             ; Output string
1960+ 290C C3 FE 21             jp      DOAGN           ; Do last INPUT again
1961+ 290F
1962+ 290F CD D0 2E     INPUT:  call    IDTEST          ; Test for illegal direct
1963+ 2912 7E                   ld      A,(HL)          ; Get character after "INPUT"
1964+ 2913 FE 22                cp      $22             ; '"' ; Is there a prompt string?
1965+ 2915 3E 00                ld      A,$00           ; Clear A and leave flags
1966+ 2917 32 A5 80             ld      (CTLOFG),A      ; Enable output
1967+ 291A C2 29 29             jp      NZ,NOPMPT       ; No prompt - get input
1968+ 291D CD 24 2F             call    QTSTR           ; Get string terminated by '"'
1969+ 2920 CD 83 23             call    CHKSYN          ; Check for ';' after prompt
1970+ 2923 3B                   defb    ";"
1971+ 2924 E5                   push    HL              ; Save code string address
1972+ 2925 CD 68 2F             call    PRS1            ; Output prompt string
1973+ 2928 3E                   defb    $3E             ; Skip "push HL"
1974+ 2929 E5           NOPMPT: push    HL              ; Save code string address
1975+ 292A CD 02 22             call    PROMPT          ; Get input with "? " prompt
1976+ 292D C1                   pop     BC              ; Restore code string address
1977+ 292E DA 1B 26             jp      C,INPBRK        ; Break pressed - Exit
1978+ 2931 23                   inc     HL              ; Next byte
1979+ 2932 7E                   ld      A,(HL)          ; Get it
1980+ 2933 B7                   or      A               ; End of line?
1981+ 2934 2B                   dec     HL              ; Back again
1982+ 2935 C5                   push    BC              ; Re-save code string address
1983+ 2936 3A 47 82             ld      A,(SERIALS_EN)  ; load serial state
1984+ 2939 EE 05                xor     %00000101       ; check if serial 1 is open and RX enabled
1985+ 293B CC 8F 01             call    Z,A_RTS_OFF      ; yes, set RTS on
1986+ 293E CD 59 09             call    CURSOR_OFF      ; disable cursor
1987+ 2941 CA 74 27             jp      Z,NXTDTA        ; Yes - Find next DATA stmt
1988+ 2944 36 2C                ld      (HL),','        ; Store comma as separator
1989+ 2946 C3 4E 29             jp      NXTITM          ; Get next item
1990+ 2949
1991+ 2949 E5           READ:   push    HL              ; Save code string address
1992+ 294A 2A 51 82             ld      HL,(NXTDAT)     ; Next DATA statement
1993+ 294D F6                   defb    $F6             ; Flag "READ"
1994+ 294E AF           NXTITM: xor     A               ; Flag "INPUT"
1995+ 294F 32 DC 81             ld      (READFG),A      ; Save "READ"/"INPUT" flag
1996+ 2952 E3                   ex      (SP),HL         ; Get code str' , Save pointer
1997+ 2953 C3 5A 29             jp      GTVLUS          ; Get values
1998+ 2956
1999+ 2956 CD 83 23     NEDMOR: call    CHKSYN          ; Check for comma between items
2000+ 2959 2C                   defb    ','
2001+ 295A CD 6C 2C     GTVLUS: call    GETVAR          ; Get variable name
2002+ 295D E3                   ex      (SP),HL         ; Save code str" , Get pointer
2003+ 295E D5                   push    DE              ; Save variable address
2004+ 295F 7E                   ld      A,(HL)          ; Get next "INPUT"/"DATA" byte
2005+ 2960 FE 2C                cp      ','             ; Comma?
2006+ 2962 CA 82 29             jp      Z,ANTVLU        ; Yes - Get another value
2007+ 2965 3A DC 81             ld      A,(READFG)      ; Is it READ?
2008+ 2968 B7                   or      A
2009+ 2969 C2 EE 29             jp      NZ,FDTLP        ; Yes - Find next DATA stmt
2010+ 296C 3E 3F                ld      A,'?'           ; More INPUT needed
2011+ 296E CD 8E 23             call    OUTC            ; Output character
2012+ 2971 CD 02 22             call    PROMPT          ; Get INPUT with prompt
2013+ 2974 D1                   pop     DE              ; Variable address
2014+ 2975 C1                   pop     BC              ; Code string address
2015+ 2976 DA 1B 26             jp      C,INPBRK        ; Break pressed
2016+ 2979 23                   inc     HL              ; Point to next DATA byte
2017+ 297A 7E                   ld      A,(HL)          ; Get byte
2018+ 297B B7                   or      A               ; Is it zero (No input) ?
2019+ 297C 2B                   dec     HL              ; Back space INPUT pointer
2020+ 297D C5                   push    BC              ; Save code string address
2021+ 297E CA 74 27             jp      Z,NXTDTA        ; Find end of buffer
2022+ 2981 D5                   push    DE              ; Save variable address
2023+ 2982 3A 94 81     ANTVLU: ld      A,(TYPE)        ; Check data type
2024+ 2985 B7                   or      A               ; Is it numeric?
2025+ 2986 CA AC 29             jp      Z,INPBIN        ; Yes - Convert to binary
2026+ 2989 CD CC 25             call    GETCHR          ; Get next character
2027+ 298C 57                   ld      D,A             ; Save input character
2028+ 298D 47                   ld      B,A             ; Again
2029+ 298E FE 22                cp      $22             ; '"'     ; Start of literal sting?
2030+ 2990 CA A0 29             jp      Z,STRENT        ; Yes - Create string entry
2031+ 2993 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2032+ 2996 B7                   or      A
2033+ 2997 57                   ld      D,A             ; Save 00 if "INPUT"
2034+ 2998 CA 9D 29             jp      Z,ITMSEP        ; "INPUT" - End with 00
2035+ 299B 16 3A                ld      D,':'           ; "DATA" - End with 00 or ':'
2036+ 299D 06 2C        ITMSEP: ld      B,','           ; Item separator
2037+ 299F 2B                   dec     HL              ; Back space for DTSTR
2038+ 29A0 CD 27 2F     STRENT: call    DTSTR           ; Get string terminated by D
2039+ 29A3 EB                   ex      DE,HL           ; String address to DE
2040+ 29A4 21 B7 29             ld      HL,LTSTND       ; Where to go after LETSTR
2041+ 29A7 E3                   ex      (SP),HL         ; Save HL , get input pointer
2042+ 29A8 D5                   push    DE              ; Save address of string
2043+ 29A9 C3 A7 27             jp      LETSTR          ; Assign string to variable
2044+ 29AC
2045+ 29AC CD CC 25     INPBIN: call    GETCHR          ; Get next character
2046+ 29AF CD 71 39             call    ASCTFP          ; Convert ASCII to FP number
2047+ 29B2 E3                   ex      (SP),HL         ; Save input ptr, Get var addr
2048+ 29B3 CD C2 38             call    FPTHL           ; Move FPREG to variable
2049+ 29B6 E1                   pop     HL              ; Restore input pointer
2050+ 29B7 2B           LTSTND: dec     HL              ; dec 'cos GETCHR INCs
2051+ 29B8 CD CC 25             call    GETCHR          ; Get next character
2052+ 29BB CA C3 29             jp      Z,MORDT         ; End of line - More needed?
2053+ 29BE FE 2C                cp      ','             ; Another value?
2054+ 29C0 C2 FE 28             jp      NZ,BADINP       ; No - Bad input
2055+ 29C3 E3           MORDT:  ex      (SP),HL         ; Get code string address
2056+ 29C4 2B                   dec     HL              ; dec 'cos GETCHR INCs
2057+ 29C5 CD CC 25             call    GETCHR          ; Get next character
2058+ 29C8 C2 56 29             jp      NZ,NEDMOR       ; More needed - Get it
2059+ 29CB D1                   pop     DE              ; Restore DATA pointer
2060+ 29CC 3A DC 81             ld      A,(READFG)      ; "READ" or "INPUT" ?
2061+ 29CF B7                   or      A
2062+ 29D0 EB                   ex      DE,HL           ; DATA pointer to HL
2063+ 29D1 C2 F2 25             jp      NZ,UPDATA       ; Update DATA pointer if "READ"
2064+ 29D4 D5                   push    DE              ; Save code string address
2065+ 29D5 B6                   or      (HL)            ; More input given?
2066+ 29D6 21 DE 29             ld      HL,EXTIG        ; "?Extra ignored" message
2067+ 29D9 C4 65 2F             call    NZ,PRS          ; Output string if extra given
2068+ 29DC E1                   pop     HL              ; Restore code string address
2069+ 29DD C9                   ret
2070+ 29DE
2071+ 29DE 3F 45 78 74  EXTIG:  defb    "?Extra ignored",CR,0
2071+ 29E2 72 61 20 69
2071+ 29E6 67 6E 6F 72
2071+ 29EA 65 64 0D 00
2072+ 29EE
2073+ 29EE CD 75 27     FDTLP:  call    DATA            ; Get next statement
2074+ 29F1 B7                   or      A               ; End of line?
2075+ 29F2 C2 07 2A             jp      NZ,FANDT        ; No - See if DATA statement
2076+ 29F5 23                   inc     HL
2077+ 29F6 7E                   ld      A,(HL)          ; End of program?
2078+ 29F7 23                   inc     HL
2079+ 29F8 B6                   or      (HL)            ; 00 00 Ends program
2080+ 29F9 1E 06                ld      E,OD            ; ?OD Error
2081+ 29FB CA 9D 20             jp      Z,ERROR         ; Yes - Out of DATA
2082+ 29FE 23                   inc     HL
2083+ 29FF 5E                   ld      E,(HL)          ; LSB of line number
2084+ 2A00 23                   inc     HL
2085+ 2A01 56                   ld      D,(HL)          ; MSB of line number
2086+ 2A02 EB                   ex      DE,HL
2087+ 2A03 22 D8 81             ld      (DATLIN),HL     ; Set line of current DATA item
2088+ 2A06 EB                   ex      DE,HL
2089+ 2A07 CD CC 25     FANDT:  call    GETCHR          ; Get next character
2090+ 2A0A FE 83                cp      ZDATA           ; "DATA" token
2091+ 2A0C C2 EE 29             jp      NZ,FDTLP        ; No "DATA" - Keep looking
2092+ 2A0F C3 82 29             jp      ANTVLU          ; Found - Convert input
2093+ 2A12
2094+ 2A12 11 00 00     NEXT:   ld      DE,$0000        ; In case no index given
2095+ 2A15 C4 6C 2C     NEXT1:  call    NZ,GETVAR       ; Get index address
2096+ 2A18 22 DD 81             ld      (BRKLIN),HL     ; Save code string address
2097+ 2A1B CD 0C 20             call    BAKSTK          ; Look for "FOR" block
2098+ 2A1E C2 89 20             jp      NZ,NFERR        ; No "FOR" - ?NF Error
2099+ 2A21 F9                   ld      SP,HL           ; Clear nested loops
2100+ 2A22 D5                   push    DE              ; Save index address
2101+ 2A23 7E                   ld      A,(HL)          ; Get sign of STEP
2102+ 2A24 23                   inc     HL
2103+ 2A25 F5                   push    AF              ; Save sign of STEP
2104+ 2A26 D5                   push    DE              ; Save index address
2105+ 2A27 CD A8 38             call    PHLTFP          ; Move index value to FPREG
2106+ 2A2A E3                   ex      (SP),HL         ; Save address of TO value
2107+ 2A2B E5                   push    HL              ; Save address of index
2108+ 2A2C CD C4 35             call    ADDPHL          ; Add STEP to index value
2109+ 2A2F E1                   pop     HL              ; Restore address of index
2110+ 2A30 CD C2 38             call    FPTHL           ; Move value to index variable
2111+ 2A33 E1                   pop     HL              ; Restore address of TO value
2112+ 2A34 CD B9 38             call    LOADFP          ; Move TO value to BCDE
2113+ 2A37 E5                   push    HL              ; Save address of line of FOR
2114+ 2A38 CD E5 38             call    CMPNUM          ; Compare index with TO value
2115+ 2A3B E1                   pop     HL              ; Restore address of line num
2116+ 2A3C C1                   pop     BC              ; Address of sign of STEP
2117+ 2A3D 90                   sub     B               ; Compare with expected sign
2118+ 2A3E CD B9 38             call    LOADFP          ; BC = Loop stmt,DE = Line num
2119+ 2A41 CA 4D 2A             jp      Z,KILFOR        ; Loop finished - Terminate it
2120+ 2A44 EB                   ex      DE,HL           ; Loop statement line number
2121+ 2A45 22 AF 80             ld      (LINEAT),HL     ; Set loop line number
2122+ 2A48 69                   ld      L,C             ; Set code string to loop
2123+ 2A49 60                   ld      H,B
2124+ 2A4A C3 88 25             jp      PUTFID          ; Put back "FOR" and continue
2125+ 2A4D
2126+ 2A4D F9           KILFOR: ld      SP,HL           ; Remove "FOR" block
2127+ 2A4E 2A DD 81             ld      HL,(BRKLIN)     ; Code string after "NEXT"
2128+ 2A51 7E                   ld      A,(HL)          ; Get next byte in code string
2129+ 2A52 FE 2C                cp      ','             ; More NEXTs ?
2130+ 2A54 C2 8C 25             jp      NZ,RUNCNT       ; No - Do next statement
2131+ 2A57 CD CC 25             call    GETCHR          ; Position to index name
2132+ 2A5A CD 15 2A             call    NEXT1           ; Re-enter NEXT routine
2133+ 2A5D              ; < will not RETurn to here , Exit to RUNCNT or Loop >
2134+ 2A5D
2135+ 2A5D CD 6F 2A     GETNUM: call    EVAL            ; Get a numeric expression
2136+ 2A60 F6           TSTNUM: defb    $F6             ; Clear carry (numeric)
2137+ 2A61 37           TSTSTR: scf                     ; Set carry (string)
2138+ 2A62 3A 94 81     CHKTYP: ld      A,(TYPE)        ; Check types match
2139+ 2A65 8F                   adc     A,A             ; Expected + actual
2140+ 2A66 B7                   or      A               ; Clear carry , set parity
2141+ 2A67 E8                   ret     PE              ; Even parity - Types match
2142+ 2A68 C3 95 20             jp      TMERR           ; Different types - Error
2143+ 2A6B
2144+ 2A6B CD 83 23     OPNPAR: call    CHKSYN          ; Make sure "(" follows
2145+ 2A6E 28                   defb    '('
2146+ 2A6F 2B           EVAL:   dec     HL              ; Evaluate expression & save
2147+ 2A70 16 00                ld      D,$00           ; Precedence value
2148+ 2A72 D5           EVAL1:  push    DE              ; Save precedence
2149+ 2A73 0E 01                ld      C,$01
2150+ 2A75 CD 40 20             call    CHKSTK          ; Check for 1 level of stack
2151+ 2A78 CD E6 2A             call    OPRND           ; Get next expression value
2152+ 2A7B 22 DF 81     EVAL2:  ld      (NXTOPR),HL     ; Save address of next operator
2153+ 2A7E 2A DF 81     EVAL3:  ld      HL,(NXTOPR)     ; Restore address of next opr
2154+ 2A81 C1                   pop     BC              ; Precedence value and operator
2155+ 2A82 78                   ld      A,B             ; Get precedence value
2156+ 2A83 FE 78                cp      $78             ; "AND", "OR", or "XOR" ?
2157+ 2A85 D4 60 2A             call    NC,TSTNUM       ; No - Make sure it's a number
2158+ 2A88 7E                   ld      A,(HL)          ; Get next operator / function
2159+ 2A89 16 00                ld      D,$00           ; Clear Last relation
2160+ 2A8B D6 C8        RLTLP:  sub     ZGTR            ; ">" Token
2161+ 2A8D DA A7 2A             jp      C,FOPRND        ; + - * / ^ AND OR XOR - Test it
2162+ 2A90 FE 03                cp      ZLTH+1-ZGTR     ; < = >
2163+ 2A92 D2 A7 2A             jp      NC,FOPRND       ; Function - Call it
2164+ 2A95 FE 01                cp      ZEQUAL-ZGTR     ; "="
2165+ 2A97 17                   rla                     ; <- Test for legal
2166+ 2A98 AA                   xor     D               ; <- combinations of < = >
2167+ 2A99 BA                   cp      D               ; <- by combining last token
2168+ 2A9A 57                   ld      D,A             ; <- with current one
2169+ 2A9B DA 83 20             jp      C,SNERR         ; Error if "<<' '==" or ">>"
2170+ 2A9E 22 D4 81             ld      (CUROPR),HL     ; Save address of current token
2171+ 2AA1 CD CC 25             call    GETCHR          ; Get next character
2172+ 2AA4 C3 8B 2A             jp      RLTLP           ; Treat the two as one
2173+ 2AA7
2174+ 2AA7 7A           FOPRND: ld      A,D             ; < = > found ?
2175+ 2AA8 B7                   or      A
2176+ 2AA9 C2 E7 2B             jp      NZ,TSTRED       ; Yes - Test for reduction
2177+ 2AAC 7E                   ld      A,(HL)          ; Get operator token
2178+ 2AAD 22 D4 81             ld      (CUROPR),HL     ; Save operator address
2179+ 2AB0 D6 BE                sub     ZPLUS           ; Operator or function?
2180+ 2AB2 D8                   ret     C               ; Neither - Exit
2181+ 2AB3 FE 0A                cp      ZOR+1-ZPLUS     ; Is it + - * / ^ AND XOR OR ?
2182+ 2AB5 D0                   ret     NC              ; No - Exit
2183+ 2AB6 5F                   ld      E,A             ; Coded operator
2184+ 2AB7 3A 94 81             ld      A,(TYPE)        ; Get data type
2185+ 2ABA 3D                   dec     A               ; FF = numeric , 00 = string
2186+ 2ABB B3                   or      E               ; Combine with coded operator
2187+ 2ABC 7B                   ld      A,E             ; Get coded operator
2188+ 2ABD CA 5B 30             jp      Z,CONCAT        ; String concatenation
2189+ 2AC0 07                   rlca                    ; Times 2
2190+ 2AC1 83                   add     A,E             ; Times 3
2191+ 2AC2 5F                   ld      E,A             ; To DE (D is 0)
2192+ 2AC3 21 FE 1E             ld      HL,PRITAB       ; Precedence table
2193+ 2AC6 19                   add     HL,DE           ; To the operator concerned
2194+ 2AC7 78                   ld      A,B             ; Last operator precedence
2195+ 2AC8 56                   ld      D,(HL)          ; Get evaluation precedence
2196+ 2AC9 BA                   cp      D               ; Compare with eval precedence
2197+ 2ACA D0                   ret     NC              ; Exit if higher precedence
2198+ 2ACB 23                   inc     HL              ; Point to routine address
2199+ 2ACC CD 60 2A             call    TSTNUM          ; Make sure it's a number
2200+ 2ACF
2201+ 2ACF C5           STKTHS: push    BC              ; Save last precedence & token
2202+ 2AD0 01 7E 2A             ld      BC,EVAL3        ; Where to go on prec' break
2203+ 2AD3 C5                   push    BC              ; Save on stack for return
2204+ 2AD4 43                   ld      B,E             ; Save operator
2205+ 2AD5 4A                   ld      C,D             ; Save precedence
2206+ 2AD6 CD 9B 38             call    STAKFP          ; Move value to stack
2207+ 2AD9 58                   ld      E,B             ; Restore operator
2208+ 2ADA 51                   ld      D,C             ; Restore precedence
2209+ 2ADB 4E                   ld      C,(HL)          ; Get LSB of routine address
2210+ 2ADC 23                   inc     HL
2211+ 2ADD 46                   ld      B,(HL)          ; Get MSB of routine address
2212+ 2ADE 23                   inc     HL
2213+ 2ADF C5                   push    BC              ; Save routine address
2214+ 2AE0 2A D4 81             ld      HL,(CUROPR)     ; Address of current operator
2215+ 2AE3 C3 72 2A             jp      EVAL1           ; Loop until prec' break
2216+ 2AE6
2217+ 2AE6 AF           OPRND:  xor     A               ; Get operand routine
2218+ 2AE7 32 94 81             ld      (TYPE),A        ; Set numeric expected
2219+ 2AEA CD CC 25             call    GETCHR          ; Get next character
2220+ 2AED 1E 24                ld      E,MO            ; ?MO Error
2221+ 2AEF CA 9D 20             jp      Z,ERROR         ; No operand - Error
2222+ 2AF2 DA 71 39             jp      C,ASCTFP        ; Number - Get value
2223+ 2AF5 CD 6E 26             call    CHKLTR          ; See if a letter
2224+ 2AF8 D2 4D 2B             jp      NC,CONVAR       ; Letter - Find variable
2225+ 2AFB FE 26                cp      '&'             ; &H = HEX, &B = BINARY
2226+ 2AFD 20 12                jr      NZ,NOTAMP
2227+ 2AFF CD CC 25             call    GETCHR          ; Get next character
2228+ 2B02 FE 48                cp      'H'             ; Hex number indicated? [function added]
2229+ 2B04 CA 37 4C             jp      Z,HEXTFP        ; Convert Hex to FPREG
2230+ 2B07 FE 42                cp      'B'             ; Binary number indicated? [function added]
2231+ 2B09 CA A7 4C             jp      Z,BINTFP        ; Convert Bin to FPREG
2232+ 2B0C 1E 02                ld      E,SN            ; If neither then a ?SN Error
2233+ 2B0E CA 9D 20             jp      Z,ERROR         ;
2234+ 2B11 FE BE        NOTAMP: cp      ZPLUS           ; '+' Token ?
2235+ 2B13 CA E6 2A             jp      Z,OPRND         ; Yes - Look for operand
2236+ 2B16 FE 2E                cp      '.'             ; '.' ?
2237+ 2B18 CA 71 39             jp      Z,ASCTFP        ; Yes - Create FP number
2238+ 2B1B FE BF                cp      ZMINUS          ; '-' Token ?
2239+ 2B1D CA 3C 2B             jp      Z,MINUS         ; Yes - Do minus
2240+ 2B20 FE 22                cp      $22             ; '"'             ; Literal string ?
2241+ 2B22 CA 24 2F             jp      Z,QTSTR         ; Get string terminated by '"'
2242+ 2B25 FE BC                cp      ZNOT            ; "NOT" Token ?
2243+ 2B27 CA 47 2C             jp      Z,EVNOT         ; Yes - Eval NOT expression
2244+ 2B2A FE B9                cp      ZFN             ; "FN" Token ?
2245+ 2B2C CA 88 2E             jp      Z,DOFN          ; Yes - Do FN routine
2246+ 2B2F D6 CB                sub     ZSGN            ; Is it a function?
2247+ 2B31 D2 5E 2B             jp      NC,FNOFST       ; Yes - Evaluate function
2248+ 2B34 CD 6B 2A     EVLPAR: call    OPNPAR          ; Evaluate expression in "()"
2249+ 2B37 CD 83 23             call    CHKSYN          ; Make sure ")" follows
2250+ 2B3A 29                   defb    ')'
2251+ 2B3B C9                   ret
2252+ 2B3C
2253+ 2B3C 16 7D        MINUS:  ld      D,$7D           ; '-' precedence
2254+ 2B3E CD 72 2A             call    EVAL1           ; Evaluate until prec' break
2255+ 2B41 2A DF 81             ld      HL,(NXTOPR)     ; Get next operator address
2256+ 2B44 E5                   push    HL              ; Save next operator address
2257+ 2B45 CD 93 38             call    INVSGN          ; Negate value
2258+ 2B48 CD 60 2A     RETNUM: call    TSTNUM          ; Make sure it's a number
2259+ 2B4B E1                   pop     HL              ; Restore next operator address
2260+ 2B4C C9                   ret
2261+ 2B4D
2262+ 2B4D CD 6C 2C     CONVAR: call    GETVAR          ; Get variable address to DE
2263+ 2B50 E5           FRMEVL: push    HL              ; Save code string address
2264+ 2B51 EB                   ex      DE,HL           ; Variable address to HL
2265+ 2B52 22 59 82             ld      (FPREG),HL      ; Save address of variable
2266+ 2B55 3A 94 81             ld      A,(TYPE)        ; Get type
2267+ 2B58 B7                   or      A               ; Numeric?
2268+ 2B59 CC A8 38             call    Z,PHLTFP        ; Yes - Move contents to FPREG
2269+ 2B5C E1                   pop     HL              ; Restore code string address
2270+ 2B5D C9                   ret
2271+ 2B5E
2272+ 2B5E 06 00        FNOFST: ld      B,$00           ; Get address of function
2273+ 2B60 07                   rlca                    ; Double function offset
2274+ 2B61 4F                   ld      C,A             ; BC = Offset in function table
2275+ 2B62 C5                   push    BC              ; Save adjusted token value
2276+ 2B63 CD CC 25             call    GETCHR          ; Get next character
2277+ 2B66 79                   ld      A,C             ; Get adjusted token value
2278+ 2B67 FE 2C                cp      2*(ZPOINT-ZSGN) ; "POINT" token?
2279+ 2B69 CA 97 40             jp      Z,POINT         ; Yes, do "POINT"
2280+ 2B6C FE 2E                cp      2*(ZINSTR-ZSGN) ; "INSTR" token?
2281+ 2B6E CA 37 31             jp      Z,INSTR         ; Yes, do "INSTR"
2282+ 2B71 FE 3D                cp      2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
2283+ 2B73 DA 8F 2B             jp      C,FNVAL         ; No - Do function
2284+ 2B76 CD 6B 2A             call    OPNPAR          ; Evaluate expression  (X,...
2285+ 2B79 CD 83 23             call    CHKSYN          ; Make sure ',' follows
2286+ 2B7C 2C                   defb    ','
2287+ 2B7D CD 61 2A             call    TSTSTR          ; Make sure it's a string
2288+ 2B80 EB                   ex      DE,HL           ; Save code string address
2289+ 2B81 2A 59 82             ld      HL,(FPREG)      ; Get address of string
2290+ 2B84 E3                   ex      (SP),HL         ; Save address of string
2291+ 2B85 E5                   push    HL              ; Save adjusted token value
2292+ 2B86 EB                   ex      DE,HL           ; Restore code string address
2293+ 2B87 CD E3 32             call    GETINT          ; Get integer 0-255
2294+ 2B8A EB                   ex      DE,HL           ; Save code string address
2295+ 2B8B E3                   ex      (SP),HL         ; Save integer,HL = adj' token
2296+ 2B8C C3 97 2B             jp      GOFUNC          ; Jump to string function
2297+ 2B8F
2298+ 2B8F CD 34 2B     FNVAL:  call    EVLPAR          ; Evaluate expression
2299+ 2B92 E3                   ex      (SP),HL         ; HL = Adjusted token value
2300+ 2B93 11 48 2B             ld      DE,RETNUM       ; Return number from function
2301+ 2B96 D5                   push    DE              ; Save on stack
2302+ 2B97 01 BB 1C     GOFUNC: ld      BC,FNCTAB       ; Function routine addresses
2303+ 2B9A 09                   add     HL,BC           ; Point to right address
2304+ 2B9B 4E                   ld      C,(HL)          ; Get LSB of address
2305+ 2B9C 23                   inc     HL              ;
2306+ 2B9D 66                   ld      H,(HL)          ; Get MSB of address
2307+ 2B9E 69                   ld      L,C             ; Address to HL
2308+ 2B9F E9                   jp      (HL)            ; Jump to function
2309+ 2BA0
2310+ 2BA0 15           SGNEXP: dec     D               ; Dee to flag negative exponent
2311+ 2BA1 FE BF                cp      ZMINUS          ; '-' token ?
2312+ 2BA3 C8                   ret     Z               ; Yes - Return
2313+ 2BA4 FE 2D                cp      '-'             ; '-' ASCII ?
2314+ 2BA6 C8                   ret     Z               ; Yes - Return
2315+ 2BA7 14                   inc     D               ; Inc to flag positive exponent
2316+ 2BA8 FE 2B                cp      '+'             ; '+' ASCII ?
2317+ 2BAA C8                   ret     Z               ; Yes - Return
2318+ 2BAB FE BE                cp      ZPLUS           ; '+' token ?
2319+ 2BAD C8                   ret     Z               ; Yes - Return
2320+ 2BAE 2B                   dec     HL              ; dec 'cos GETCHR INCs
2321+ 2BAF C9                   ret                     ; Return "NZ"
2322+ 2BB0
2323+ 2BB0              ; execute OR, AND, and XOR operations
2324+ 2BB0 AF           PAND:   xor     A               ; for AND, Z=1
2325+ 2BB1 18 07                jr      CNTLGC
2326+ 2BB3 AF           POR:    xor     A               ; for OR, Z=0, S=1
2327+ 2BB4 D6 01                sub     $01
2328+ 2BB6 18 02                jr      CNTLGC
2329+ 2BB8 AF           PXOR:   xor     A               ; for XOR, Z=0, S=0
2330+ 2BB9 3C                   inc     A
2331+ 2BBA F5           CNTLGC: push    AF              ; store operand's flags
2332+ 2BBB CD 60 2A             call    TSTNUM          ; Make sure it's a number
2333+ 2BBE CD 82 26             call    DEINT           ; Get integer -32768 to 32767
2334+ 2BC1 F1                   pop     AF              ; retrieve operand's flags
2335+ 2BC2 EB                   ex      DE,HL           ; <- Get last
2336+ 2BC3 C1                   pop     BC              ; <-  value
2337+ 2BC4 E3                   ex      (SP),HL         ; <-  from
2338+ 2BC5 EB                   ex      DE,HL           ; <-  stack
2339+ 2BC6 CD AB 38             call    FPBCDE          ; Move last value to FPREG
2340+ 2BC9 F5                   push    AF              ; store operand's flags
2341+ 2BCA CD 82 26             call    DEINT           ; Get integer -32768 to 32767
2342+ 2BCD F1                   pop     AF              ; retrieve operand's flags
2343+ 2BCE C1                   pop     BC              ; Get value
2344+ 2BCF 79                   ld      A,C             ; Get LSB
2345+ 2BD0 21 46 2E             ld      HL,ACPASS       ; Address of save AC as current
2346+ 2BD3 20 05                jr      NZ,POR1         ; if X/OR, jump over
2347+ 2BD5 A3           PAND1:  and     E               ; "AND" LSBs
2348+ 2BD6 4F                   ld      C,A             ; Save LSB
2349+ 2BD7 78                   ld      A,B             ; Get MSB
2350+ 2BD8 A2                   and     D               ; "AND" MSBs
2351+ 2BD9 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2352+ 2BDA F2 E2 2B     POR1:   jp      P,PXOR1         ; if S=0, jump to XOR
2353+ 2BDD B3                   or      E               ; "OR" LSBs
2354+ 2BDE 4F                   ld      C,A             ; Save LSB
2355+ 2BDF 78                   ld      A,B             ; Get MSB
2356+ 2BE0 B2                   or      D               ; "OR" MSBs
2357+ 2BE1 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2358+ 2BE2 AB           PXOR1:  xor     E               ; "XOR" LSBs
2359+ 2BE3 4F                   ld      C,A             ; Save LSB
2360+ 2BE4 78                   ld      A,B             ; Get MSB
2361+ 2BE5 AA                   xor     D               ; "XOR" MSBs
2362+ 2BE6 E9                   jp      (HL)            ; Save AC as current (ACPASS)
2363+ 2BE7
2364+ 2BE7 21 F9 2B     TSTRED: ld      HL,CMPLOG       ; Logical compare routine
2365+ 2BEA 3A 94 81             ld      A,(TYPE)        ; Get data type
2366+ 2BED 1F                   rra                     ; Carry set = string
2367+ 2BEE 7A                   ld      A,D             ; Get last precedence value
2368+ 2BEF 17                   rla                     ; Times 2 plus carry
2369+ 2BF0 5F                   ld      E,A             ; To E
2370+ 2BF1 16 64                ld      D,$64           ; Relational precedence
2371+ 2BF3 78                   ld      A,B             ; Get current precedence
2372+ 2BF4 BA                   cp      D               ; Compare with last
2373+ 2BF5 D0                   ret     NC              ; Eval if last was rel' or log'
2374+ 2BF6 C3 CF 2A             jp      STKTHS          ; Stack this one and get next
2375+ 2BF9
2376+ 2BF9 FB 2B        CMPLOG: defw    CMPLG1          ; Compare two values / strings
2377+ 2BFB 79           CMPLG1: ld      A,C             ; Get data type
2378+ 2BFC B7                   or      A
2379+ 2BFD 1F                   rra
2380+ 2BFE C1                   pop     BC              ; Get last expression to BCDE
2381+ 2BFF D1                   pop     DE
2382+ 2C00 F5                   push    AF              ; Save status
2383+ 2C01 CD 62 2A             call    CHKTYP          ; Check that types match
2384+ 2C04 21 3D 2C             ld      HL,CMPRES       ; Result to comparison
2385+ 2C07 E5                   push    HL              ; Save for RETurn
2386+ 2C08 CA E5 38             jp      Z,CMPNUM        ; Compare values if numeric
2387+ 2C0B AF                   xor     A               ; Compare two strings
2388+ 2C0C 32 94 81             ld      (TYPE),A        ; Set type to numeric
2389+ 2C0F D5                   push    DE              ; Save string name
2390+ 2C10 CD A8 30             call    GSTRCU          ; Get current string
2391+ 2C13 7E                   ld      A,(HL)          ; Get length of string
2392+ 2C14 23                   inc     HL
2393+ 2C15 23                   inc     HL
2394+ 2C16 4E                   ld      C,(HL)          ; Get LSB of address
2395+ 2C17 23                   inc     HL
2396+ 2C18 46                   ld      B,(HL)          ; Get MSB of address
2397+ 2C19 D1                   pop     DE              ; Restore string name
2398+ 2C1A C5                   push    BC              ; Save address of string
2399+ 2C1B F5                   push    AF              ; Save length of string
2400+ 2C1C CD AC 30             call    GSTRDE          ; Get second string
2401+ 2C1F CD B9 38             call    LOADFP          ; Get address of second string
2402+ 2C22 F1                   pop     AF              ; Restore length of string 1
2403+ 2C23 57                   ld      D,A             ; Length to D
2404+ 2C24 E1                   pop     HL              ; Restore address of string 1
2405+ 2C25 7B           CMPSTR: ld      A,E             ; Bytes of string 2 to do
2406+ 2C26 B2                   or      D               ; Bytes of string 1 to do
2407+ 2C27 C8                   ret     Z               ; Exit if all bytes compared
2408+ 2C28 7A                   ld      A,D             ; Get bytes of string 1 to do
2409+ 2C29 D6 01                sub     $01
2410+ 2C2B D8                   ret     C               ; Exit if end of string 1
2411+ 2C2C AF                   xor     A
2412+ 2C2D BB                   cp      E               ; Bytes of string 2 to do
2413+ 2C2E 3C                   inc     A
2414+ 2C2F D0                   ret     NC              ; Exit if end of string 2
2415+ 2C30 15                   dec     D               ; Count bytes in string 1
2416+ 2C31 1D                   dec     E               ; Count bytes in string 2
2417+ 2C32 0A                   ld      A,(BC)          ; Byte in string 2
2418+ 2C33 BE                   cp      (HL)            ; Compare to byte in string 1
2419+ 2C34 23                   inc     HL              ; Move up string 1
2420+ 2C35 03                   inc     BC              ; Move up string 2
2421+ 2C36 CA 25 2C             jp      Z,CMPSTR        ; Same - Try next bytes
2422+ 2C39 3F                   ccf                     ; Flag difference (">" or "<")
2423+ 2C3A C3 75 38             jp      FLGDIF          ; "<" gives -1 , ">" gives +1
2424+ 2C3D
2425+ 2C3D 3C           CMPRES: inc     A               ; Increment current value
2426+ 2C3E 8F                   adc     A,A             ; Double plus carry
2427+ 2C3F C1                   pop     BC              ; Get other value
2428+ 2C40 A0                   and     B               ; Combine them
2429+ 2C41 C6 FF                add     A,-1            ; Carry set if different
2430+ 2C43 9F                   sbc     A,A             ; 00 - Equal , FF - Different
2431+ 2C44 C3 7C 38             jp      FLGREL          ; Set current value & continue
2432+ 2C47
2433+ 2C47 16 5A        EVNOT:  ld      D,$5A           ; Precedence value for "NOT"
2434+ 2C49 CD 72 2A             call    EVAL1           ; Eval until precedence break
2435+ 2C4C CD 60 2A             call    TSTNUM          ; Make sure it's a number
2436+ 2C4F CD 82 26             call    DEINT           ; Get integer -32768 - 32767
2437+ 2C52 7B                   ld      A,E             ; Get LSB
2438+ 2C53 2F                   cpl                     ; Invert LSB
2439+ 2C54 4F                   ld      C,A             ; Save "NOT" of LSB
2440+ 2C55 7A                   ld      A,D             ; Get MSB
2441+ 2C56 2F                   cpl                     ; Invert MSB
2442+ 2C57 CD 46 2E             call    ACPASS          ; Save AC as current
2443+ 2C5A C1                   pop     BC              ; Clean up stack
2444+ 2C5B C3 7E 2A             jp      EVAL3           ; Continue evaluation
2445+ 2C5E
2446+ 2C5E 2B           DIMRET: dec     HL              ; dec 'cos GETCHR INCs
2447+ 2C5F CD CC 25             call    GETCHR          ; Get next character
2448+ 2C62 C8                   ret     Z               ; End of DIM statement
2449+ 2C63 CD 83 23             call    CHKSYN          ; Make sure ',' follows
2450+ 2C66 2C                   defb    ','
2451+ 2C67 01 5E 2C     DIM:    ld      BC,DIMRET       ; Return to "DIMRET"
2452+ 2C6A C5                   push    BC              ; Save on stack
2453+ 2C6B F6                   defb    $F6             ; Flag "Create" variable
2454+ 2C6C AF           GETVAR: xor     A               ; Find variable address,to DE
2455+ 2C6D 32 93 81             ld      (LCRFLG),A      ; Set locate / create flag
2456+ 2C70 46                   ld      B,(HL)          ; Get First byte of name
2457+ 2C71 CD 6E 26     GTFNAM: call    CHKLTR          ; See if a letter
2458+ 2C74 DA 83 20             jp      C,SNERR         ; ?SN Error if not a letter
2459+ 2C77 AF                   xor     A
2460+ 2C78 4F                   ld      C,A             ; Clear second byte of name
2461+ 2C79 32 94 81             ld      (TYPE),A        ; Set type to numeric
2462+ 2C7C CD CC 25             call    GETCHR          ; Get next character
2463+ 2C7F DA 88 2C             jp      C,SVNAM2        ; Numeric - Save in name
2464+ 2C82 CD 6E 26             call    CHKLTR          ; See if a letter
2465+ 2C85 DA 95 2C             jp      C,CHARTY        ; Not a letter - Check type
2466+ 2C88 4F           SVNAM2: ld      C,A             ; Save second byte of name
2467+ 2C89 CD CC 25     ENDNAM: call    GETCHR          ; Get next character
2468+ 2C8C DA 89 2C             jp      C,ENDNAM        ; Numeric - Get another
2469+ 2C8F CD 6E 26             call    CHKLTR          ; See if a letter
2470+ 2C92 D2 89 2C             jp      NC,ENDNAM       ; Letter - Get another
2471+ 2C95 D6 24        CHARTY: sub     '$'             ; String variable?
2472+ 2C97 C2 A4 2C             jp      NZ,NOTSTR       ; No - Numeric variable
2473+ 2C9A 3C                   inc     A               ; A = 1 (string type)
2474+ 2C9B 32 94 81             ld      (TYPE),A        ; Set type to string
2475+ 2C9E 0F                   rrca                    ; A = 80H , Flag for string
2476+ 2C9F 81                   add     A,C             ; 2nd byte of name has bit 7 on
2477+ 2CA0 4F                   ld      C,A             ; Resave second byte on name
2478+ 2CA1 CD CC 25             call    GETCHR          ; Get next character
2479+ 2CA4 3A DA 81     NOTSTR: ld      A,(FORFLG)      ; Array name needed ?
2480+ 2CA7 3D                   dec     A
2481+ 2CA8 CA 51 2D             jp      Z,ARLDSV        ; Yes - Get array name
2482+ 2CAB F2 B4 2C             jp      P,NSCFOR        ; No array with "FOR" or "FN"
2483+ 2CAE 7E                   ld      A,(HL)          ; Get byte again
2484+ 2CAF D6 28                sub     '('             ; Subscripted variable?
2485+ 2CB1 CA 29 2D             jp      Z,SBSCPT        ; Yes - Sort out subscript
2486+ 2CB4
2487+ 2CB4 AF           NSCFOR: xor     A               ; Simple variable
2488+ 2CB5 32 DA 81             ld      (FORFLG),A      ; Clear "FOR" flag
2489+ 2CB8 E5                   push    HL              ; Save code string address
2490+ 2CB9 50                   ld      D,B             ; DE = Variable name to find
2491+ 2CBA 59                   ld      E,C
2492+ 2CBB 2A 53 82             ld      HL,(FNRGNM)     ; FN argument name
2493+ 2CBE CD 7D 23             call    CPDEHL          ; Is it the FN argument?
2494+ 2CC1 11 55 82             ld      DE,FNARG        ; Point to argument value
2495+ 2CC4 CA 5A 37             jp      Z,POPHRT        ; Yes - Return FN argument value
2496+ 2CC7 2A 4D 82             ld      HL,(VAREND)     ; End of variables
2497+ 2CCA EB                   ex      DE,HL           ; Address of end of search
2498+ 2CCB 2A 4B 82             ld      HL,(PROGND)     ; Start of variables address
2499+ 2CCE CD 7D 23     FNDVAR: call    CPDEHL          ; End of variable list table?
2500+ 2CD1 CA E7 2C             jp      Z,CFEVAL        ; Yes - Called from EVAL?
2501+ 2CD4 79                   ld      A,C             ; Get second byte of name
2502+ 2CD5 96                   sub     (HL)            ; Compare with name in list
2503+ 2CD6 23                   inc     HL              ; Move on to first byte
2504+ 2CD7 C2 DC 2C             jp      NZ,FNTHR        ; Different - Find another
2505+ 2CDA 78                   ld      A,B             ; Get first byte of name
2506+ 2CDB 96                   sub     (HL)            ; Compare with name in list
2507+ 2CDC 23           FNTHR:  inc     HL              ; Move on to LSB of value
2508+ 2CDD CA 1B 2D             jp      Z,RETADR        ; Found - Return address
2509+ 2CE0 23                   inc     HL              ; <- Skip
2510+ 2CE1 23                   inc     HL              ; <- over
2511+ 2CE2 23                   inc     HL              ; <- F.P.
2512+ 2CE3 23                   inc     HL              ; <- value
2513+ 2CE4 C3 CE 2C             jp      FNDVAR          ; Keep looking
2514+ 2CE7
2515+ 2CE7 E1           CFEVAL: pop     HL              ; Restore code string address
2516+ 2CE8 E3                   ex      (SP),HL         ; Get return address
2517+ 2CE9 D5                   push    DE              ; Save address of variable
2518+ 2CEA 11 50 2B             ld      DE,FRMEVL       ; Return address in EVAL
2519+ 2CED CD 7D 23             call    CPDEHL          ; Called from EVAL ?
2520+ 2CF0 D1                   pop     DE              ; Restore address of variable
2521+ 2CF1 CA 1E 2D             jp      Z,RETNUL        ; Yes - Return null variable
2522+ 2CF4 E3                   ex      (SP),HL         ; Put back return
2523+ 2CF5 E5                   push    HL              ; Save code string address
2524+ 2CF6 C5                   push    BC              ; Save variable name
2525+ 2CF7 01 06 00             ld      BC,$0006        ; 2 byte name plus 4 byte data
2526+ 2CFA 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2527+ 2CFD E5                   push    HL              ; Save end of arrays
2528+ 2CFE 09                   add     HL,BC           ; Move up 6 bytes
2529+ 2CFF C1                   pop     BC              ; Source address in BC
2530+ 2D00 E5                   push    HL              ; Save new end address
2531+ 2D01 CD 2F 20             call    MOVUP           ; Move arrays up
2532+ 2D04 E1                   pop     HL              ; Restore new end address
2533+ 2D05 22 4F 82             ld      (ARREND),HL     ; Set new end address
2534+ 2D08 60                   ld      H,B             ; End of variables to HL
2535+ 2D09 69                   ld      L,C
2536+ 2D0A 22 4D 82             ld      (VAREND),HL     ; Set new end address
2537+ 2D0D
2538+ 2D0D 2B           ZEROLP: dec     HL              ; Back through to zero variable
2539+ 2D0E 36 00                ld      (HL),$00        ; Zero byte in variable
2540+ 2D10 CD 7D 23             call    CPDEHL          ; Done them all?
2541+ 2D13 C2 0D 2D             jp      NZ,ZEROLP       ; No - Keep on going
2542+ 2D16 D1                   pop     DE              ; Get variable name
2543+ 2D17 73                   ld      (HL),E          ; Store second character
2544+ 2D18 23                   inc     HL
2545+ 2D19 72                   ld      (HL),D          ; Store first character
2546+ 2D1A 23                   inc     HL
2547+ 2D1B EB           RETADR: ex      DE,HL           ; Address of variable in DE
2548+ 2D1C E1                   pop     HL              ; Restore code string address
2549+ 2D1D C9                   ret
2550+ 2D1E
2551+ 2D1E 32 5C 82     RETNUL: ld      (FPEXP),A       ; Set result to zero
2552+ 2D21 21 00 20             ld      HL,ZERBYT       ; Also set a null string
2553+ 2D24 22 59 82             ld      (FPREG),HL      ; Save for EVAL
2554+ 2D27 E1                   pop     HL              ; Restore code string address
2555+ 2D28 C9                   ret
2556+ 2D29
2557+ 2D29 E5           SBSCPT: push    HL              ; Save code string address
2558+ 2D2A 2A 93 81             ld      HL,(LCRFLG)     ; Locate/Create and Type
2559+ 2D2D E3                   ex      (SP),HL         ; Save and get code string
2560+ 2D2E 57                   ld      D,A             ; Zero number of dimensions
2561+ 2D2F D5           SCPTLP: push    DE              ; Save number of dimensions
2562+ 2D30 C5                   push    BC              ; Save array name
2563+ 2D31 CD 76 26             call    FPSINT          ; Get subscript (0-32767)
2564+ 2D34 C1                   pop     BC              ; Restore array name
2565+ 2D35 F1                   pop     AF              ; Get number of dimensions
2566+ 2D36 EB                   ex      DE,HL
2567+ 2D37 E3                   ex      (SP),HL         ; Save subscript value
2568+ 2D38 E5                   push    HL              ; Save LCRFLG and TYPE
2569+ 2D39 EB                   ex      DE,HL
2570+ 2D3A 3C                   inc     A               ; Count dimensions
2571+ 2D3B 57                   ld      D,A             ; Save in D
2572+ 2D3C 7E                   ld      A,(HL)          ; Get next byte in code string
2573+ 2D3D FE 2C                cp      ','             ; Comma (more to come)?
2574+ 2D3F CA 2F 2D             jp      Z,SCPTLP        ; Yes - More subscripts
2575+ 2D42 CD 83 23             call    CHKSYN          ; Make sure ")" follows
2576+ 2D45 29                   defb    ')'
2577+ 2D46 22 DF 81             ld      (NXTOPR),HL     ; Save code string address
2578+ 2D49 E1                   pop     HL              ; Get LCRFLG and TYPE
2579+ 2D4A 22 93 81             ld      (LCRFLG),HL     ; Restore Locate/create & type
2580+ 2D4D 1E 00                ld      E,$00           ; Flag not CSAVE* or CLOAD*
2581+ 2D4F D5                   push    DE              ; Save number of dimensions (D)
2582+ 2D50 11                   defb    $11             ; Skip "push HL" and "push AF'
2583+ 2D51
2584+ 2D51 E5           ARLDSV: push    HL              ; Save code string address
2585+ 2D52 F5                   push    AF              ; A = 00 , Flags set = Z,N
2586+ 2D53 2A 4D 82             ld      HL,(VAREND)     ; Start of arrays
2587+ 2D56 3E                   defb    $3E             ; Skip "add HL,DE"
2588+ 2D57 19           FNDARY: add     HL,DE           ; Move to next array start
2589+ 2D58 EB                   ex      DE,HL
2590+ 2D59 2A 4F 82             ld      HL,(ARREND)     ; End of arrays
2591+ 2D5C EB                   ex      DE,HL           ; Current array pointer
2592+ 2D5D CD 7D 23             call    CPDEHL          ; End of arrays found?
2593+ 2D60 CA 89 2D             jp      Z,CREARY        ; Yes - Create array
2594+ 2D63 7E                   ld      A,(HL)          ; Get second byte of name
2595+ 2D64 B9                   cp      C               ; Compare with name given
2596+ 2D65 23                   inc     HL              ; Move on
2597+ 2D66 C2 6B 2D             jp      NZ,NXTARY       ; Different - Find next array
2598+ 2D69 7E                   ld      A,(HL)          ; Get first byte of name
2599+ 2D6A B8                   cp      B               ; Compare with name given
2600+ 2D6B 23           NXTARY: inc     HL              ; Move on
2601+ 2D6C 5E                   ld      E,(HL)          ; Get LSB of next array address
2602+ 2D6D 23                   inc     HL
2603+ 2D6E 56                   ld      D,(HL)          ; Get MSB of next array address
2604+ 2D6F 23                   inc     HL
2605+ 2D70 C2 57 2D             jp      NZ,FNDARY       ; Not found - Keep looking
2606+ 2D73 3A 93 81             ld      A,(LCRFLG)      ; Found Locate or Create it?
2607+ 2D76 B7                   or      A
2608+ 2D77 C2 8C 20             jp      NZ,DDERR        ; Create - ?DD Error
2609+ 2D7A F1                   pop     AF              ; Locate - Get number of dim'ns
2610+ 2D7B 44                   ld      B,H             ; BC Points to array dim'ns
2611+ 2D7C 4D                   ld      C,L
2612+ 2D7D CA 5A 37             jp      Z,POPHRT        ; Jump if array load/save
2613+ 2D80 96                   sub     (HL)            ; Same number of dimensions?
2614+ 2D81 CA E7 2D             jp      Z,FINDEL        ; Yes - Find element
2615+ 2D84 1E 10        BSERR:  ld      E,BS            ; ?BS Error
2616+ 2D86 C3 9D 20             jp      ERROR           ; Output error
2617+ 2D89
2618+ 2D89 11 04 00     CREARY: ld      DE,$0004        ; 4 Bytes per entry
2619+ 2D8C F1                   pop     AF              ; Array to save or 0 dim'ns?
2620+ 2D8D CA 97 26             jp      Z,FCERR         ; Yes - ?FC Error
2621+ 2D90 71                   ld      (HL),C          ; Save second byte of name
2622+ 2D91 23                   inc     HL
2623+ 2D92 70                   ld      (HL),B          ; Save first byte of name
2624+ 2D93 23                   inc     HL
2625+ 2D94 4F                   ld      C,A             ; Number of dimensions to C
2626+ 2D95 CD 40 20             call    CHKSTK          ; Check if enough memory
2627+ 2D98 23                   inc     HL              ; Point to number of dimensions
2628+ 2D99 23                   inc     HL
2629+ 2D9A 22 D4 81             ld      (CUROPR),HL     ; Save address of pointer
2630+ 2D9D 71                   ld      (HL),C          ; Set number of dimensions
2631+ 2D9E 23                   inc     HL
2632+ 2D9F 3A 93 81             ld      A,(LCRFLG)      ; Locate of Create?
2633+ 2DA2 17                   rla                     ; Carry set = Create
2634+ 2DA3 79                   ld      A,C             ; Get number of dimensions
2635+ 2DA4 01 0B 00     CRARLP: ld      BC,10+1         ; Default dimension size 10
2636+ 2DA7 D2 AC 2D             jp      NC,DEFSIZ       ; Locate - Set default size
2637+ 2DAA C1                   pop     BC              ; Get specified dimension size
2638+ 2DAB 03                   inc     BC              ; Include zero element
2639+ 2DAC 71           DEFSIZ: ld      (HL),C          ; Save LSB of dimension size
2640+ 2DAD 23                   inc     HL
2641+ 2DAE 70                   ld      (HL),B          ; Save MSB of dimension size
2642+ 2DAF 23                   inc     HL
2643+ 2DB0 F5                   push    AF              ; Save num' of dim'ns an status
2644+ 2DB1 E5                   push    HL              ; Save address of dim'n size
2645+ 2DB2 CD 56 39             call    MLDEBC          ; Multiply DE by BC to find
2646+ 2DB5 EB                   ex      DE,HL           ; amount of mem needed (to DE)
2647+ 2DB6 E1                   pop     HL              ; Restore address of dimension
2648+ 2DB7 F1                   pop     AF              ; Restore number of dimensions
2649+ 2DB8 3D                   dec     A               ; Count them
2650+ 2DB9 C2 A4 2D             jp      NZ,CRARLP       ; Do next dimension if more
2651+ 2DBC F5                   push    AF              ; Save locate/create flag
2652+ 2DBD 42                   ld      B,D             ; MSB of memory needed
2653+ 2DBE 4B                   ld      C,E             ; LSB of memory needed
2654+ 2DBF EB                   ex      DE,HL
2655+ 2DC0 19                   add     HL,DE           ; Add bytes to array start
2656+ 2DC1 DA 58 20             jp      C,OMERR         ; Too big - Error
2657+ 2DC4 CD 49 20             call    ENFMEM          ; See if enough memory
2658+ 2DC7 22 4F 82             ld      (ARREND),HL     ; Save new end of array
2659+ 2DCA
2660+ 2DCA 2B           ZERARY: dec     HL              ; Back through array data
2661+ 2DCB 36 00                ld      (HL),$00        ; Set array element to zero
2662+ 2DCD CD 7D 23             call    CPDEHL          ; All elements zeroed?
2663+ 2DD0 C2 CA 2D             jp      NZ,ZERARY       ; No - Keep on going
2664+ 2DD3 03                   inc     BC              ; Number of bytes + 1
2665+ 2DD4 57                   ld      D,A             ; A=0
2666+ 2DD5 2A D4 81             ld      HL,(CUROPR)     ; Get address of array
2667+ 2DD8 5E                   ld      E,(HL)          ; Number of dimensions
2668+ 2DD9 EB                   ex      DE,HL           ; To HL
2669+ 2DDA 29                   add     HL,HL           ; Two bytes per dimension size
2670+ 2DDB 09                   add     HL,BC           ; Add number of bytes
2671+ 2DDC EB                   ex      DE,HL           ; Bytes needed to DE
2672+ 2DDD 2B                   dec     HL
2673+ 2DDE 2B                   dec     HL
2674+ 2DDF 73                   ld      (HL),E          ; Save LSB of bytes needed
2675+ 2DE0 23                   inc     HL
2676+ 2DE1 72                   ld      (HL),D          ; Save MSB of bytes needed
2677+ 2DE2 23                   inc     HL
2678+ 2DE3 F1                   pop     AF              ; Locate / Create?
2679+ 2DE4 DA 0B 2E             jp      C,ENDDIM        ; A is 0 , End if create
2680+ 2DE7 47           FINDEL: ld      B,A             ; Find array element
2681+ 2DE8 4F                   ld      C,A
2682+ 2DE9 7E                   ld      A,(HL)          ; Number of dimensions
2683+ 2DEA 23                   inc     HL
2684+ 2DEB 16                   defb    $16             ; Skip "pop HL"
2685+ 2DEC E1           FNDELP: pop     HL              ; Address of next dim' size
2686+ 2DED 5E                   ld      E,(HL)          ; Get LSB of dim'n size
2687+ 2DEE 23                   inc     HL
2688+ 2DEF 56                   ld      D,(HL)          ; Get MSB of dim'n size
2689+ 2DF0 23                   inc     HL
2690+ 2DF1 E3                   ex      (SP),HL         ; Save address - Get index
2691+ 2DF2 F5                   push    AF              ; Save number of dim'ns
2692+ 2DF3 CD 7D 23             call    CPDEHL          ; Dimension too large?
2693+ 2DF6 D2 84 2D             jp      NC,BSERR        ; Yes - ?BS Error
2694+ 2DF9 E5                   push    HL              ; Save index
2695+ 2DFA CD 56 39             call    MLDEBC          ; Multiply previous by size
2696+ 2DFD D1                   pop     DE              ; Index supplied to DE
2697+ 2DFE 19                   add     HL,DE           ; Add index to pointer
2698+ 2DFF F1                   pop     AF              ; Number of dimensions
2699+ 2E00 3D                   dec     A               ; Count them
2700+ 2E01 44                   ld      B,H             ; MSB of pointer
2701+ 2E02 4D                   ld      C,L             ; LSB of pointer
2702+ 2E03 C2 EC 2D             jp      NZ,FNDELP       ; More - Keep going
2703+ 2E06 29                   add     HL,HL           ; 4 Bytes per element
2704+ 2E07 29                   add     HL,HL
2705+ 2E08 C1                   pop     BC              ; Start of array
2706+ 2E09 09                   add     HL,BC           ; Point to element
2707+ 2E0A EB                   ex      DE,HL           ; Address of element to DE
2708+ 2E0B 2A DF 81     ENDDIM: ld      HL,(NXTOPR)     ; Got code string address
2709+ 2E0E C9                   ret
2710+ 2E0F
2711+ 2E0F
2712+ 2E0F              ; returns the value of the 32-bit system tick counter as
2713+ 2E0F              ; two 16-bit words
2714+ 2E0F CD 60 2A     TMR:    call    TSTNUM          ; Make sure it's a number
2715+ 2E12 CD 82 26             call    DEINT           ; Get integer (-32768 to 32767)
2716+ 2E15 2A E5 81             ld      HL,(TMRCNT)     ; load the LSBytes of timer
2717+ 2E18 7B                   ld      A,E
2718+ 2E19 B2                   or      D               ; is it 0?
2719+ 2E1A CA 20 2E             jp      Z,ENDTMR        ; yes, jump over
2720+ 2E1D 2A E7 81             ld      HL,(TMRCNT+2)   ; load the MSBytes of timer
2721+ 2E20 45           ENDTMR: ld      B,L             ; move bytes...
2722+ 2E21 7C                   ld      A,H             ; ...into AB
2723+ 2E22 C3 47 2E             jp      ABPASS          ; return word into AB
2724+ 2E25
2725+ 2E25
2726+ 2E25              ; returns the free space for BASIC or into the string pool
2727+ 2E25 2A 4F 82     FRE:    ld      HL,(ARREND)     ; Start of free memory
2728+ 2E28 EB                   ex      DE,HL           ; To DE
2729+ 2E29 21 00 00             ld      HL,$0000        ; End of free memory
2730+ 2E2C 39                   add     HL,SP           ; Current stack value
2731+ 2E2D 3A 94 81             ld      A,(TYPE)        ; Dummy argument type
2732+ 2E30 B7                   or      A
2733+ 2E31 CA 41 2E             jp      Z,FRENUM        ; Numeric - Free variable space
2734+ 2E34 CD A8 30             call    GSTRCU          ; Current string to pool
2735+ 2E37 CD A8 2F             call    GARBGE          ; Garbage collection
2736+ 2E3A 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2737+ 2E3D EB                   ex      DE,HL           ; To DE
2738+ 2E3E 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string space
2739+ 2E41 7D           FRENUM: ld      A,L             ; Get LSB of end
2740+ 2E42 93                   sub     E               ; Subtract LSB of beginning
2741+ 2E43 4F                   ld      C,A             ; Save difference if C
2742+ 2E44 7C                   ld      A,H             ; Get MSB of end
2743+ 2E45 9A                   sbc     A,D             ; Subtract MSB of beginning
2744+ 2E46 41           ACPASS: ld      B,C             ; Return integer AC
2745+ 2E47 50           ABPASS: ld      D,B             ; Return integer AB
2746+ 2E48 1E 00                ld      E,$00
2747+ 2E4A 21 94 81             ld      HL,TYPE         ; Point to type
2748+ 2E4D 73                   ld      (HL),E          ; Set type to numeric
2749+ 2E4E 06 90                ld      B,$80+$10       ; 16 bit integer
2750+ 2E50 C3 81 38             jp      RETINT          ; Return the integer
2751+ 2E53
2752+ 2E53              ; returns the X position of the cursor during a print
2753+ 2E53 3A 92 81     POS:    ld      A,(CURPOS)      ; Get cursor position
2754+ 2E56              ; return the value in A as a number
2755+ 2E56 47           PASSA:  ld      B,A             ; Put A into AB
2756+ 2E57 AF                   xor     A               ; Zero A
2757+ 2E58 C3 47 2E             jp      ABPASS          ; Return integer AB
2758+ 2E5B
2759+ 2E5B CD DE 2E     DEF:    call    CHEKFN          ; Get "FN" and name
2760+ 2E5E CD D0 2E             call    IDTEST          ; Test for illegal direct
2761+ 2E61 01 75 27             ld      BC,DATA         ; To get next statement
2762+ 2E64 C5                   push    BC              ; Save address for RETurn
2763+ 2E65 D5                   push    DE              ; Save address of function ptr
2764+ 2E66 CD 83 23             call    CHKSYN          ; Make sure "(" follows
2765+ 2E69 28                   defb    '('
2766+ 2E6A CD 6C 2C             call    GETVAR          ; Get argument variable name
2767+ 2E6D E5                   push    HL              ; Save code string address
2768+ 2E6E EB                   ex      DE,HL           ; Argument address to HL
2769+ 2E6F 2B                   dec     HL
2770+ 2E70 56                   ld      D,(HL)          ; Get first byte of arg name
2771+ 2E71 2B                   dec     HL
2772+ 2E72 5E                   ld      E,(HL)          ; Get second byte of arg name
2773+ 2E73 E1                   pop     HL              ; Restore code string address
2774+ 2E74 CD 60 2A             call    TSTNUM          ; Make sure numeric argument
2775+ 2E77 CD 83 23             call    CHKSYN          ; Make sure ")" follows
2776+ 2E7A 29                   defb    ')'
2777+ 2E7B CD 83 23             call    CHKSYN          ; Make sure "=" follows
2778+ 2E7E C9                   defb    ZEQUAL          ; "=" token
2779+ 2E7F 44                   ld      B,H             ; Code string address to BC
2780+ 2E80 4D                   ld      C,L
2781+ 2E81 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2782+ 2E82 71                   ld      (HL),C          ; Save LSB of FN code string
2783+ 2E83 23                   inc     HL
2784+ 2E84 70                   ld      (HL),B          ; Save MSB of FN code string
2785+ 2E85 C3 1D 2F             jp      SVSTAD          ; Save address and do function
2786+ 2E88
2787+ 2E88 CD DE 2E     DOFN:   call    CHEKFN          ; Make sure FN follows
2788+ 2E8B D5                   push    DE              ; Save function pointer address
2789+ 2E8C CD 34 2B             call    EVLPAR          ; Evaluate expression in "()"
2790+ 2E8F CD 60 2A             call    TSTNUM          ; Make sure numeric result
2791+ 2E92 E3                   ex      (SP),HL         ; Save code str , Get FN ptr
2792+ 2E93 5E                   ld      E,(HL)          ; Get LSB of FN code string
2793+ 2E94 23                   inc     HL
2794+ 2E95 56                   ld      D,(HL)          ; Get MSB of FN code string
2795+ 2E96 23                   inc     HL
2796+ 2E97 7A                   ld      A,D             ; And function DEFined?
2797+ 2E98 B3                   or      E
2798+ 2E99 CA 8F 20             jp      Z,UFERR         ; No - ?UF Error
2799+ 2E9C 7E                   ld      A,(HL)          ; Get LSB of argument address
2800+ 2E9D 23                   inc     HL
2801+ 2E9E 66                   ld      H,(HL)          ; Get MSB of argument address
2802+ 2E9F 6F                   ld      L,A             ; HL = Arg variable address
2803+ 2EA0 E5                   push    HL              ; Save it
2804+ 2EA1 2A 53 82             ld      HL,(FNRGNM)     ; Get old argument name
2805+ 2EA4 E3                   ex      (SP),HL         ; Save old , Get new
2806+ 2EA5 22 53 82             ld      (FNRGNM),HL     ; Set new argument name
2807+ 2EA8 2A 57 82             ld      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
2808+ 2EAB E5                   push    HL              ; Save it
2809+ 2EAC 2A 55 82             ld      HL,(FNARG)      ; Get MSB,EXP of old arg value
2810+ 2EAF E5                   push    HL              ; Save it
2811+ 2EB0 21 55 82             ld      HL,FNARG        ; HL = Value of argument
2812+ 2EB3 D5                   push    DE              ; Save FN code string address
2813+ 2EB4 CD C2 38             call    FPTHL           ; Move FPREG to argument
2814+ 2EB7 E1                   pop     HL              ; Get FN code string address
2815+ 2EB8 CD 5D 2A             call    GETNUM          ; Get value from function
2816+ 2EBB 2B                   dec     HL              ; dec 'cos GETCHR INCs
2817+ 2EBC CD CC 25             call    GETCHR          ; Get next character
2818+ 2EBF C2 83 20             jp      NZ,SNERR        ; Bad character in FN - Error
2819+ 2EC2 E1                   pop     HL              ; Get MSB,EXP of old arg
2820+ 2EC3 22 55 82             ld      (FNARG),HL      ; Restore it
2821+ 2EC6 E1                   pop     HL              ; Get LSB,NLSB of old arg
2822+ 2EC7 22 57 82             ld      (FNARG+2),HL    ; Restore it
2823+ 2ECA E1                   pop     HL              ; Get name of old arg
2824+ 2ECB 22 53 82             ld      (FNRGNM),HL     ; Restore it
2825+ 2ECE E1                   pop     HL              ; Restore code string address
2826+ 2ECF C9                   ret
2827+ 2ED0
2828+ 2ED0 E5           IDTEST: push    HL              ; Save code string address
2829+ 2ED1 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
2830+ 2ED4 23                   inc     HL              ; -1 means direct statement
2831+ 2ED5 7C                   ld      A,H
2832+ 2ED6 B5                   or      L
2833+ 2ED7 E1                   pop     HL              ; Restore code string address
2834+ 2ED8 C0                   ret     NZ              ; Return if in program
2835+ 2ED9 1E 16                ld      E,ID            ; ?ID Error
2836+ 2EDB C3 9D 20             jp      ERROR
2837+ 2EDE
2838+ 2EDE CD 83 23     CHEKFN: call    CHKSYN          ; Make sure FN follows
2839+ 2EE1 B9                   defb    ZFN             ; "FN" token
2840+ 2EE2 3E 80                ld      A,$80
2841+ 2EE4 32 DA 81             ld      (FORFLG),A      ; Flag FN name to find
2842+ 2EE7 B6                   or      (HL)            ; FN name has bit 7 set
2843+ 2EE8 47                   ld      B,A             ; in first byte of name
2844+ 2EE9 CD 71 2C             call    GTFNAM          ; Get FN name
2845+ 2EEC C3 60 2A             jp      TSTNUM          ; Make sure numeric function
2846+ 2EEF
2847+ 2EEF CD 60 2A     STR:    call    TSTNUM          ; Make sure it's a number
2848+ 2EF2 CD 0F 3A             call    NUMASC          ; Turn number into text
2849+ 2EF5 CD 23 2F     STR1:   call    CRTST           ; Create string entry for it
2850+ 2EF8 CD A8 30             call    GSTRCU          ; Current string to pool
2851+ 2EFB 01 03 31             ld      BC,TOPOOL       ; Save in string pool
2852+ 2EFE C5                   push    BC              ; Save address on stack
2853+ 2EFF
2854+ 2EFF 7E           SAVSTR: ld      A,(HL)          ; Get string length
2855+ 2F00 23                   inc     HL
2856+ 2F01 23                   inc     HL
2857+ 2F02 E5                   push    HL              ; Save pointer to string
2858+ 2F03 CD 7E 2F             call    TESTR           ; See if enough string space
2859+ 2F06 E1                   pop     HL              ; Restore pointer to string
2860+ 2F07 4E                   ld      C,(HL)          ; Get LSB of address
2861+ 2F08 23                   inc     HL
2862+ 2F09 46                   ld      B,(HL)          ; Get MSB of address
2863+ 2F0A CD 17 2F             call    CRTMST          ; Create string entry
2864+ 2F0D E5                   push    HL              ; Save pointer to MSB of addr
2865+ 2F0E 6F                   ld      L,A             ; Length of string
2866+ 2F0F CD 9B 30             call    TOSTRA          ; Move to string area
2867+ 2F12 D1                   pop     DE              ; Restore pointer to MSB
2868+ 2F13 C9                   ret
2869+ 2F14
2870+ 2F14 CD 7E 2F     MKTMST: call    TESTR           ; See if enough string space
2871+ 2F17 21 CE 81     CRTMST: ld      HL,TMPSTR       ; Temporary string
2872+ 2F1A E5                   push    HL              ; Save it
2873+ 2F1B 77                   ld      (HL),A          ; Save length of string
2874+ 2F1C 23                   inc     HL
2875+ 2F1D 23           SVSTAD: inc     HL
2876+ 2F1E 73                   ld      (HL),E          ; Save LSB of address
2877+ 2F1F 23                   inc     HL
2878+ 2F20 72                   ld      (HL),D          ; Save MSB of address
2879+ 2F21 E1                   pop     HL              ; Restore pointer
2880+ 2F22 C9                   ret
2881+ 2F23
2882+ 2F23 2B           CRTST:  dec     HL              ; dec - INCed after
2883+ 2F24 06 22        QTSTR:  ld      B,$22           ; '"'           ; Terminating quote
2884+ 2F26 50                   ld      D,B             ; Quote to D
2885+ 2F27 E5           DTSTR:  push    HL              ; Save start
2886+ 2F28 0E FF                ld      C,-1            ; Set counter to -1
2887+ 2F2A 23           QTSTLP: inc     HL              ; Move on
2888+ 2F2B 7E                   ld      A,(HL)          ; Get byte
2889+ 2F2C 0C                   inc     C               ; Count bytes
2890+ 2F2D B7                   or      A               ; End of line?
2891+ 2F2E CA 39 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2892+ 2F31 BA                   cp      D               ; Terminator D found?
2893+ 2F32 CA 39 2F             jp      Z,CRTSTE        ; Yes - Create string entry
2894+ 2F35 B8                   cp      B               ; Terminator B found?
2895+ 2F36 C2 2A 2F             jp      NZ,QTSTLP       ; No - Keep looking
2896+ 2F39 FE 22        CRTSTE: cp      $22             ; '"'             ; End with '"'?
2897+ 2F3B CC CC 25             call    Z,GETCHR        ; Yes - Get next character
2898+ 2F3E E3                   ex      (SP),HL         ; Starting quote
2899+ 2F3F 23                   inc     HL              ; First byte of string
2900+ 2F40 EB                   ex      DE,HL           ; To DE
2901+ 2F41 79                   ld      A,C             ; Get length
2902+ 2F42 CD 17 2F             call    CRTMST          ; Create string entry
2903+ 2F45 11 CE 81     TSTOPL: ld      DE,TMPSTR       ; Temporary string
2904+ 2F48 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2905+ 2F4B 22 59 82             ld      (FPREG),HL      ; Save address of string ptr
2906+ 2F4E 3E 01                ld      A,$01
2907+ 2F50 32 94 81             ld      (TYPE),A        ; Set type to string
2908+ 2F53 CD C5 38             call    DETHL4          ; Move string to pool
2909+ 2F56 CD 7D 23             call    CPDEHL          ; Out of string pool?
2910+ 2F59 22 C0 81             ld      (TMSTPT),HL     ; Save new pointer
2911+ 2F5C E1                   pop     HL              ; Restore code string address
2912+ 2F5D 7E                   ld      A,(HL)          ; Get next code byte
2913+ 2F5E C0                   ret     NZ              ; Return if pool OK
2914+ 2F5F 1E 1E                ld      E,ST            ; ?ST Error
2915+ 2F61 C3 9D 20             jp      ERROR           ; String pool overflow
2916+ 2F64
2917+ 2F64 23           PRNUMS: inc     HL              ; Skip leading space
2918+ 2F65 CD 23 2F     PRS:    call    CRTST           ; Create string entry for it
2919+ 2F68 CD A8 30     PRS1:   call    GSTRCU          ; Current string to pool
2920+ 2F6B CD B9 38             call    LOADFP          ; Move string block to BCDE
2921+ 2F6E 1C                   inc     E               ; Length + 1
2922+ 2F6F 1D           PRSLP:  dec     E               ; Count characters
2923+ 2F70 C8                   ret     Z               ; End of string
2924+ 2F71 0A                   ld      A,(BC)          ; Get byte to output
2925+ 2F72 CD 8E 23             call    OUTC            ; Output character in A
2926+ 2F75 FE 0D                cp      CR              ; Return?
2927+ 2F77 CC A3 28             call    Z,CNTEND        ; Yes - Position cursor to 0
2928+ 2F7A 03                   inc     BC              ; Next byte in string
2929+ 2F7B C3 6F 2F             jp      PRSLP           ; More characters to output
2930+ 2F7E
2931+ 2F7E B7           TESTR:  or      A               ; Test if enough room
2932+ 2F7F 0E                   defb    $0E             ; No garbage collection done
2933+ 2F80 F1           GRBDON: pop     AF              ; Garbage collection done
2934+ 2F81 F5                   push    AF              ; Save status
2935+ 2F82 2A AD 80             ld      HL,(STRSPC)     ; Bottom of string space in use
2936+ 2F85 EB                   ex      DE,HL           ; To DE
2937+ 2F86 2A D2 81             ld      HL,(STRBOT)     ; Bottom of string area
2938+ 2F89 2F                   cpl                     ; Negate length (Top down)
2939+ 2F8A 4F                   ld      C,A             ; -Length to BC
2940+ 2F8B 06 FF                ld      B,-1            ; BC = -ve length of string
2941+ 2F8D 09                   add     HL,BC           ; Add to bottom of space in use
2942+ 2F8E 23                   inc     HL              ; Plus one for 2's complement
2943+ 2F8F CD 7D 23             call    CPDEHL          ; Below string RAM area?
2944+ 2F92 DA 9C 2F             jp      C,TESTOS        ; Tidy up if not done else err
2945+ 2F95 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of area
2946+ 2F98 23                   inc     HL              ; Point to first byte of string
2947+ 2F99 EB                   ex      DE,HL           ; Address to DE
2948+ 2F9A F1           POPAF:  pop     AF              ; Throw away status push
2949+ 2F9B C9                   ret
2950+ 2F9C
2951+ 2F9C F1           TESTOS: pop     AF              ; Garbage collect been done?
2952+ 2F9D 1E 1A                ld      E,OS            ; ?OS Error
2953+ 2F9F CA 9D 20             jp      Z,ERROR         ; Yes - Not enough string space
2954+ 2FA2 BF                   cp      A               ; Flag garbage collect done
2955+ 2FA3 F5                   push    AF              ; Save status
2956+ 2FA4 01 80 2F             ld      BC,GRBDON       ; Garbage collection done
2957+ 2FA7 C5                   push    BC              ; Save for RETurn
2958+ 2FA8 2A 96 81     GARBGE: ld      HL,(LSTRAM)     ; Get end of RAM pointer
2959+ 2FAB 22 D2 81     GARBLP: ld      (STRBOT),HL     ; Reset string pointer
2960+ 2FAE 21 00 00             ld      HL,$0000
2961+ 2FB1 E5                   push    HL              ; Flag no string found
2962+ 2FB2 2A AD 80             ld      HL,(STRSPC)     ; Get bottom of string space
2963+ 2FB5 E5                   push    HL              ; Save bottom of string space
2964+ 2FB6 21 C2 81             ld      HL,TMSTPL       ; Temporary string pool
2965+ 2FB9 EB           GRBLP:  ex      DE,HL
2966+ 2FBA 2A C0 81             ld      HL,(TMSTPT)     ; Temporary string pool pointer
2967+ 2FBD EB                   ex      DE,HL
2968+ 2FBE CD 7D 23             call    CPDEHL          ; Temporary string pool done?
2969+ 2FC1 01 B9 2F             ld      BC,GRBLP        ; Loop until string pool done
2970+ 2FC4 C2 0D 30             jp      NZ,STPOOL       ; No - See if in string area
2971+ 2FC7 2A 4B 82             ld      HL,(PROGND)     ; Start of simple variables
2972+ 2FCA EB           SMPVAR: ex      DE,HL
2973+ 2FCB 2A 4D 82             ld      HL,(VAREND)     ; End of simple variables
2974+ 2FCE EB                   ex      DE,HL
2975+ 2FCF CD 7D 23             call    CPDEHL          ; All simple strings done?
2976+ 2FD2 CA E0 2F             jp      Z,ARRLP         ; Yes - Do string arrays
2977+ 2FD5 7E                   ld      A,(HL)          ; Get type of variable
2978+ 2FD6 23                   inc     HL
2979+ 2FD7 23                   inc     HL
2980+ 2FD8 B7                   or      A               ; "S" flag set if string
2981+ 2FD9 CD 10 30             call    STRADD          ; See if string in string area
2982+ 2FDC C3 CA 2F             jp      SMPVAR          ; Loop until simple ones done
2983+ 2FDF
2984+ 2FDF C1           GNXARY: pop     BC              ; Scrap address of this array
2985+ 2FE0 EB           ARRLP:  ex      DE,HL
2986+ 2FE1 2A 4F 82             ld      HL,(ARREND)     ; End of string arrays
2987+ 2FE4 EB                   ex      DE,HL
2988+ 2FE5 CD 7D 23             call    CPDEHL          ; All string arrays done?
2989+ 2FE8 CA 36 30             jp      Z,SCNEND        ; Yes - Move string if found
2990+ 2FEB CD B9 38             call    LOADFP          ; Get array name to BCDE
2991+ 2FEE 7B                   ld      A,E             ; Get type of array
2992+ 2FEF E5                   push    HL              ; Save address of num of dim'ns
2993+ 2FF0 09                   add     HL,BC           ; Start of next array
2994+ 2FF1 B7                   or      A               ; Test type of array
2995+ 2FF2 F2 DF 2F             jp      P,GNXARY        ; Numeric array - Ignore it
2996+ 2FF5 22 D4 81             ld      (CUROPR),HL     ; Save address of next array
2997+ 2FF8 E1                   pop     HL              ; Get address of num of dim'ns
2998+ 2FF9 4E                   ld      C,(HL)          ; BC = Number of dimensions
2999+ 2FFA 06 00                ld      B,$00
3000+ 2FFC 09                   add     HL,BC           ; Two bytes per dimension size
3001+ 2FFD 09                   add     HL,BC
3002+ 2FFE 23                   inc     HL              ; Plus one for number of dim'ns
3003+ 2FFF EB           GRBARY: ex      DE,HL
3004+ 3000 2A D4 81             ld      HL,(CUROPR)     ; Get address of next array
3005+ 3003 EB                   ex      DE,HL
3006+ 3004 CD 7D 23             call    CPDEHL          ; Is this array finished?
3007+ 3007 CA E0 2F             jp      Z,ARRLP         ; Yes - Get next one
3008+ 300A 01 FF 2F             ld      BC,GRBARY       ; Loop until array all done
3009+ 300D C5           STPOOL: push    BC              ; Save return address
3010+ 300E F6 80                or      $80             ; Flag string type
3011+ 3010 7E           STRADD: ld      A,(HL)          ; Get string length
3012+ 3011 23                   inc     HL
3013+ 3012 23                   inc     HL
3014+ 3013 5E                   ld      E,(HL)          ; Get LSB of string address
3015+ 3014 23                   inc     HL
3016+ 3015 56                   ld      D,(HL)          ; Get MSB of string address
3017+ 3016 23                   inc     HL
3018+ 3017 F0                   ret     P               ; Not a string - Return
3019+ 3018 B7                   or      A               ; Set flags on string length
3020+ 3019 C8                   ret     Z               ; Null string - Return
3021+ 301A 44                   ld      B,H             ; Save variable pointer
3022+ 301B 4D                   ld      C,L
3023+ 301C 2A D2 81             ld      HL,(STRBOT)     ; Bottom of new area
3024+ 301F CD 7D 23             call    CPDEHL          ; String been done?
3025+ 3022 60                   ld      H,B             ; Restore variable pointer
3026+ 3023 69                   ld      L,C
3027+ 3024 D8                   ret     C               ; String done - Ignore
3028+ 3025 E1                   pop     HL              ; Return address
3029+ 3026 E3                   ex      (SP),HL         ; Lowest available string area
3030+ 3027 CD 7D 23             call    CPDEHL          ; String within string area?
3031+ 302A E3                   ex      (SP),HL         ; Lowest available string area
3032+ 302B E5                   push    HL              ; Re-save return address
3033+ 302C 60                   ld      H,B             ; Restore variable pointer
3034+ 302D 69                   ld      L,C
3035+ 302E D0                   ret     NC              ; Outside string area - Ignore
3036+ 302F C1                   pop     BC              ; Get return , Throw 2 away
3037+ 3030 F1                   pop     AF              ;
3038+ 3031 F1                   pop     AF              ;
3039+ 3032 E5                   push    HL              ; Save variable pointer
3040+ 3033 D5                   push    DE              ; Save address of current
3041+ 3034 C5                   push    BC              ; Put back return address
3042+ 3035 C9                   ret                     ; Go to it
3043+ 3036
3044+ 3036 D1           SCNEND: pop     DE              ; Addresses of strings
3045+ 3037 E1                   pop     HL              ;
3046+ 3038 7D                   ld      A,L             ; HL = 0 if no more to do
3047+ 3039 B4                   or      H
3048+ 303A C8                   ret     Z               ; No more to do - Return
3049+ 303B 2B                   dec     HL
3050+ 303C 46                   ld      B,(HL)          ; MSB of address of string
3051+ 303D 2B                   dec     HL
3052+ 303E 4E                   ld      C,(HL)          ; LSB of address of string
3053+ 303F E5                   push    HL              ; Save variable address
3054+ 3040 2B                   dec     HL
3055+ 3041 2B                   dec     HL
3056+ 3042 6E                   ld      L,(HL)          ; HL = Length of string
3057+ 3043 26 00                ld      H,$00
3058+ 3045 09                   add     HL,BC           ; Address of end of string+1
3059+ 3046 50                   ld      D,B             ; String address to DE
3060+ 3047 59                   ld      E,C
3061+ 3048 2B                   dec     HL              ; Last byte in string
3062+ 3049 44                   ld      B,H             ; Address to BC
3063+ 304A 4D                   ld      C,L
3064+ 304B 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3065+ 304E CD 32 20             call    MOVSTR          ; Move string to new address
3066+ 3051 E1                   pop     HL              ; Restore variable address
3067+ 3052 71                   ld      (HL),C          ; Save new LSB of address
3068+ 3053 23                   inc     HL
3069+ 3054 70                   ld      (HL),B          ; Save new MSB of address
3070+ 3055 69                   ld      L,C             ; Next string area+1 to HL
3071+ 3056 60                   ld      H,B
3072+ 3057 2B                   dec     HL              ; Next string area address
3073+ 3058 C3 AB 2F             jp      GARBLP          ; Look for more strings
3074+ 305B
3075+ 305B C5           CONCAT: push    BC              ; Save prec' opr & code string
3076+ 305C E5                   push    HL              ;
3077+ 305D 2A 59 82             ld      HL,(FPREG)      ; Get first string
3078+ 3060 E3                   ex      (SP),HL         ; Save first string
3079+ 3061 CD E6 2A             call    OPRND           ; Get second string
3080+ 3064 E3                   ex      (SP),HL         ; Restore first string
3081+ 3065 CD 61 2A             call    TSTSTR          ; Make sure it's a string
3082+ 3068 7E                   ld      A,(HL)          ; Get length of second string
3083+ 3069 E5                   push    HL              ; Save first string
3084+ 306A 2A 59 82             ld      HL,(FPREG)      ; Get second string
3085+ 306D E5                   push    HL              ; Save second string
3086+ 306E 86                   add     A,(HL)          ; Add length of second string
3087+ 306F 1E 1C                ld      E,LS            ; ?LS Error
3088+ 3071 DA 9D 20             jp      C,ERROR         ; String too long - Error
3089+ 3074 CD 14 2F             call    MKTMST          ; Make temporary string
3090+ 3077 D1                   pop     DE              ; Get second string to DE
3091+ 3078 CD AC 30             call    GSTRDE          ; Move to string pool if needed
3092+ 307B E3                   ex      (SP),HL         ; Get first string
3093+ 307C CD AB 30             call    GSTRHL          ; Move to string pool if needed
3094+ 307F E5                   push    HL              ; Save first string
3095+ 3080 2A D0 81             ld      HL,(TMPSTR+2)   ; Temporary string address
3096+ 3083 EB                   ex      DE,HL           ; To DE
3097+ 3084 CD 92 30             call    SSTSA           ; First string to string area
3098+ 3087 CD 92 30             call    SSTSA           ; Second string to string area
3099+ 308A 21 7B 2A             ld      HL,EVAL2        ; Return to evaluation loop
3100+ 308D E3                   ex      (SP),HL         ; Save return,get code string
3101+ 308E E5                   push    HL              ; Save code string address
3102+ 308F C3 45 2F             jp      TSTOPL          ; To temporary string to pool
3103+ 3092
3104+ 3092 E1           SSTSA:  pop     HL              ; Return address
3105+ 3093 E3                   ex      (SP),HL         ; Get string block,save return
3106+ 3094 7E                   ld      A,(HL)          ; Get length of string
3107+ 3095 23                   inc     HL
3108+ 3096 23                   inc     HL
3109+ 3097 4E                   ld      C,(HL)          ; Get LSB of string address
3110+ 3098 23                   inc     HL
3111+ 3099 46                   ld      B,(HL)          ; Get MSB of string address
3112+ 309A 6F                   ld      L,A             ; Length to L
3113+ 309B 2C           TOSTRA: inc     L               ; inc - DECed after
3114+ 309C 2D           TSALP:  dec     L               ; Count bytes moved
3115+ 309D C8                   ret     Z               ; End of string - Return
3116+ 309E 0A                   ld      A,(BC)          ; Get source
3117+ 309F 12                   ld      (DE),A          ; Save destination
3118+ 30A0 03                   inc     BC              ; Next source
3119+ 30A1 13                   inc     DE              ; Next destination
3120+ 30A2 C3 9C 30             jp      TSALP           ; Loop until string moved
3121+ 30A5
3122+ 30A5 CD 61 2A     GETSTR: call    TSTSTR          ; Make sure it's a string
3123+ 30A8 2A 59 82     GSTRCU: ld      HL,(FPREG)      ; Get current string
3124+ 30AB EB           GSTRHL: ex      DE,HL           ; Save DE
3125+ 30AC CD C6 30     GSTRDE: call    BAKTMP          ; Was it last tmp-str?
3126+ 30AF EB                   ex      DE,HL           ; Restore DE
3127+ 30B0 C0                   ret     NZ              ; No - Return
3128+ 30B1 D5                   push    DE              ; Save string
3129+ 30B2 50                   ld      D,B             ; String block address to DE
3130+ 30B3 59                   ld      E,C
3131+ 30B4 1B                   dec     DE              ; Point to length
3132+ 30B5 4E                   ld      C,(HL)          ; Get string length
3133+ 30B6 2A D2 81             ld      HL,(STRBOT)     ; Current bottom of string area
3134+ 30B9 CD 7D 23             call    CPDEHL          ; Last one in string area?
3135+ 30BC C2 C4 30             jp      NZ,POPHL        ; No - Return
3136+ 30BF 47                   ld      B,A             ; Clear B (A=0)
3137+ 30C0 09                   add     HL,BC           ; Remove string from str' area
3138+ 30C1 22 D2 81             ld      (STRBOT),HL     ; Save new bottom of str' area
3139+ 30C4 E1           POPHL:  pop     HL              ; Restore string
3140+ 30C5 C9                   ret
3141+ 30C6
3142+ 30C6 2A C0 81     BAKTMP: ld      HL,(TMSTPT)     ; Get temporary string pool top
3143+ 30C9 2B                   dec     HL              ; Back
3144+ 30CA 46                   ld      B,(HL)          ; Get MSB of address
3145+ 30CB 2B                   dec     HL              ; Back
3146+ 30CC 4E                   ld      C,(HL)          ; Get LSB of address
3147+ 30CD 2B                   dec     HL              ; Back
3148+ 30CE 2B                   dec     HL              ; Back
3149+ 30CF CD 7D 23             call    CPDEHL          ; String last in string pool?
3150+ 30D2 C0                   ret     NZ              ; Yes - Leave it
3151+ 30D3 22 C0 81             ld      (TMSTPT),HL     ; Save new string pool top
3152+ 30D6 C9                   ret
3153+ 30D7
3154+ 30D7 01 56 2E     LEN:    ld      BC,PASSA        ; To return integer A
3155+ 30DA C5                   push    BC              ; Save address
3156+ 30DB CD A5 30     GETLEN: call    GETSTR          ; Get string and its length
3157+ 30DE AF                   xor     A
3158+ 30DF 57                   ld      D,A             ; Clear D
3159+ 30E0 32 94 81             ld      (TYPE),A        ; Set type to numeric
3160+ 30E3 7E                   ld      A,(HL)          ; Get length of string
3161+ 30E4 B7                   or      A               ; Set status flags
3162+ 30E5 C9                   ret
3163+ 30E6
3164+ 30E6 01 56 2E     ASC:    ld      BC,PASSA        ; To return integer A
3165+ 30E9 C5                   push    BC              ; Save address
3166+ 30EA CD DB 30     GTFLNM: call    GETLEN          ; Get length of string
3167+ 30ED CA 97 26             jp      Z,FCERR         ; Null string - Error
3168+ 30F0 23                   inc     HL
3169+ 30F1 23                   inc     HL
3170+ 30F2 5E                   ld      E,(HL)          ; Get LSB of address
3171+ 30F3 23                   inc     HL
3172+ 30F4 56                   ld      D,(HL)          ; Get MSB of address
3173+ 30F5 1A                   ld      A,(DE)          ; Get first byte of string
3174+ 30F6 C9                   ret
3175+ 30F7
3176+ 30F7 3E 01        CHR:    ld      A,$01           ; One character string
3177+ 30F9 CD 14 2F             call    MKTMST          ; Make a temporary string
3178+ 30FC CD E6 32             call    MAKINT          ; Make it integer A
3179+ 30FF 2A D0 81             ld      HL,(TMPSTR+2)   ; Get address of string
3180+ 3102 73                   ld      (HL),E          ; Save character
3181+ 3103 C1           TOPOOL: pop     BC              ; Clean up stack
3182+ 3104 C3 45 2F             jp      TSTOPL          ; Temporary string to pool
3183+ 3107
3184+ 3107 CD 96 32     LEFT:   call    LFRGNM          ; Get number and ending ")"
3185+ 310A AF                   xor     A               ; Start at first byte in string
3186+ 310B E3           RIGHT1: ex      (SP),HL         ; Save code string,Get string
3187+ 310C 4F                   ld      C,A             ; Starting position in string
3188+ 310D E5           MID1:   push    HL              ; Save string block address
3189+ 310E 7E                   ld      A,(HL)          ; Get length of string
3190+ 310F B8                   cp      B               ; Compare with number given
3191+ 3110 DA 15 31             jp      C,ALLFOL        ; All following bytes required
3192+ 3113 78                   ld      A,B             ; Get new length
3193+ 3114 11                   defb    $11             ; Skip "ld C,0"
3194+ 3115 0E 00        ALLFOL: ld      C,$00           ; First byte of string
3195+ 3117 C5                   push    BC              ; Save position in string
3196+ 3118 CD 7E 2F             call    TESTR           ; See if enough string space
3197+ 311B C1                   pop     BC              ; Get position in string
3198+ 311C E1                   pop     HL              ; Restore string block address
3199+ 311D E5                   push    HL              ; And re-save it
3200+ 311E 23                   inc     HL
3201+ 311F 23                   inc     HL
3202+ 3120 46                   ld      B,(HL)          ; Get LSB of address
3203+ 3121 23                   inc     HL
3204+ 3122 66                   ld      H,(HL)          ; Get MSB of address
3205+ 3123 68                   ld      L,B             ; HL = address of string
3206+ 3124 06 00                ld      B,$00           ; BC = starting address
3207+ 3126 09                   add     HL,BC           ; Point to that byte
3208+ 3127 44                   ld      B,H             ; BC = source string
3209+ 3128 4D                   ld      C,L
3210+ 3129 CD 17 2F             call    CRTMST          ; Create a string entry
3211+ 312C 6F                   ld      L,A             ; Length of new string
3212+ 312D CD 9B 30             call    TOSTRA          ; Move string to string area
3213+ 3130 D1                   pop     DE              ; Clear stack
3214+ 3131 CD AC 30             call    GSTRDE          ; Move to string pool if needed
3215+ 3134 C3 45 2F             jp      TSTOPL          ; Temporary string to pool
3216+ 3137
3217+ 3137
3218+ 3137              ; INSTR statement - look for a string inside another string
3219+ 3137              ; usage: INSTR(A$,B$) -> search for B$ into A$
3220+ 3137              ; return 0 if B$ is not found into A$, or LEN(A$)<LEN(B$)
3221+ 3137              ; return 1~255 to indicate the starting position of B$ into A$
3222+ 3137              ; ex.: INSTR("HELLO","LO") returns 4 - INSTR("HOME","PC") returns 0
3223+ 3137              LNS1    equ     TMPBFR1
3224+ 3137              ADRS1   equ     TMPBFR2
3225+ 3137              LNS2    equ     TMPBFR3
3226+ 3137              ADRS2   equ     TMPBFR4
3227+ 3137              PT      equ     VIDEOBUFF
3228+ 3137              PT1     equ     VIDEOBUFF+2
3229+ 3137              PT2     equ     VIDEOBUFF+4
3230+ 3137              TP      equ     VIDEOBUFF+6
3231+ 3137              TF      equ     VIDEOBUFF+8
3232+ 3137 CD 83 23     INSTR:  call    CHKSYN          ; make sure "(" follows
3233+ 313A 28                   defb    '('
3234+ 313B 2B                   dec     HL              ; dec 'cause GETCHR increments
3235+ 313C CD CC 25             call    GETCHR          ; check if something follows
3236+ 313F CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3237+ 3142 CD 6F 2A             call    EVAL            ; Evaluate expression
3238+ 3145 CD 61 2A             call    TSTSTR          ; Make sure it's a string
3239+ 3148 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3240+ 314B CD A8 30             call    GSTRCU          ; check that a string follows
3241+ 314E CD B9 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3242+ 3151 ED 53 05 82          ld      (LNS1),DE       ; store values into
3243+ 3155 ED 43 07 82          ld      (ADRS1),BC      ; temp buffers
3244+ 3159 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3245+ 315C CD 83 23             call    CHKSYN          ; Make sure ',' follows
3246+ 315F 2C                   defb    ','
3247+ 3160 2B                   dec     HL              ; dec 'cause GETCHR increments
3248+ 3161 CD CC 25             call    GETCHR          ; check if something follows
3249+ 3164 CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
3250+ 3167 CD 6F 2A             call    EVAL            ; Evaluate expression
3251+ 316A CD 61 2A             call    TSTSTR          ; Make sure it's a string
3252+ 316D 22 0D 82             ld      (VIDEOBUFF),HL  ; store code string pointer into a temp buffer
3253+ 3170 CD A8 30             call    GSTRCU          ; check that a string follows
3254+ 3173 CD B9 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
3255+ 3176 ED 53 09 82          ld      (LNS2),DE       ; store values into
3256+ 317A ED 43 0B 82          ld      (ADRS2),BC      ; temp buffers
3257+ 317E 2A 0D 82             ld      HL,(VIDEOBUFF)  ; retrieve code string pointer from temp buffer
3258+ 3181 CD 83 23             call    CHKSYN          ; make sure ")" follows
3259+ 3184 29                   defb    ')'
3260+ 3185 E5                   push    HL              ; store current code string pointer (the point after the ")" ) ...
3261+ 3186 FD E1                pop     IY              ; ...into IY
3262+ 3188 AF                   xor     A               ; reset 10 RAM cells
3263+ 3189 06 0A                ld      B,$0A           ; (INSTR registers)
3264+ 318B 21 0D 82             ld      HL,PT           ; first cell
3265+ 318E 77           EMPTINS:ld      (HL),A          ; reset cell
3266+ 318F 23                   inc     HL              ; next cell
3267+ 3190 10 FC                djnz    EMPTINS         ; repeat
3268+ 3192 ED 5B 09 82          ld      DE,(LNS2)       ; load len(S2) into DE
3269+ 3196 2A 05 82             ld      HL,(LNS1)       ; load len(S1) into HL
3270+ 3199 CD 05 4D             call    CMP16           ; check that len(S1)>=len(S2)
3271+ 319C DA 11 32             jp      C,RZINSTR       ; if len(S2)>len(S1) then return 0
3272+ 319F AF           RPTINST:xor     A               ; reset...
3273+ 31A0 32 13 82             ld      (TP),A          ; ...TP...
3274+ 31A3 32 15 82             ld      (TF),A          ; ...and TF
3275+ 31A6 ED 4B 0D 82          ld      BC,(PT)         ; pointer to S1
3276+ 31AA 2A 07 82             ld      HL,(ADRS1)      ; first cell of S1
3277+ 31AD 09                   add     HL,BC           ; get current position into RAM
3278+ 31AE 7E                   ld      A,(HL)          ; load S1(PT)
3279+ 31AF 2A 0B 82             ld      HL,(ADRS2)      ; pointer to first char of S2
3280+ 31B2 BE                   cp      (HL)            ; is S1(PT)=S2(0)?
3281+ 31B3 20 3A                jr      NZ,CNT1INS      ; no, continue
3282+ 31B5 3A 0D 82             ld      A,(PT)          ; load current PT
3283+ 31B8 32 13 82             ld      (TP),A          ; TP=PT
3284+ 31BB 32 0F 82             ld      (PT1),A         ; P1=PT
3285+ 31BE AF                   xor     A               ; set...
3286+ 31BF 32 11 82             ld      (PT2),A         ; ...PT2=0
3287+ 31C2 3C                   inc     A               ;
3288+ 31C3 32 15 82             ld      (TF),A          ; set TF=1
3289+ 31C6 ED 4B 0F 82  RP2INST:ld      BC,(PT1)        ; load pointer PT1
3290+ 31CA 2A 07 82             ld      HL,(ADRS1)      ; load address of S1
3291+ 31CD 09                   add     HL,BC           ; find char of S1 pointed by PT1
3292+ 31CE 7E                   ld      A,(HL)          ; load S1(PT1)
3293+ 31CF ED 4B 11 82          ld      BC,(PT2)        ; load pointer PT2
3294+ 31D3 2A 0B 82             ld      HL,(ADRS2)      ; load char of S2 pointed by PT2
3295+ 31D6 09                   add     HL,BC           ; find S2(PT2)
3296+ 31D7 BE                   cp      (HL)            ; is S1(PT1)=S2(PT2)?
3297+ 31D8 20 4C                jr      NZ,CNTZIN       ; no, exit inner loop
3298+ 31DA 21 0F 82             ld      HL,PT1
3299+ 31DD 34                   inc     (HL)            ; increment PT1
3300+ 31DE 3A 11 82             ld      A,(PT2)
3301+ 31E1 3C                   inc     A               ; increment PT2
3302+ 31E2 32 11 82             ld      (PT2),A
3303+ 31E5 CA EF 31             jp      Z,CNT1INS       ; if PT2>255 then exit
3304+ 31E8 21 09 82             ld      HL,LNS2         ; len(S2)
3305+ 31EB BE                   cp      (HL)            ; PT2=len(S2)?
3306+ 31EC DA C6 31             jp      C,RP2INST       ; no (PT2<len(S2) - repeat
3307+ 31EF 3A 15 82     CNT1INS:ld      A,(TF)          ; check TF
3308+ 31F2 A7                   and     A               ; TF=0? (clears also Carry for next SBC)
3309+ 31F3 20 1C                jr      NZ,RZINSTR      ; no, exit
3310+ 31F5 2A 05 82             ld      HL,(LNS1)       ; load len(S1)
3311+ 31F8 ED 4B 09 82          ld      BC,(LNS2)       ; load len(S2)
3312+ 31FC ED 42                sbc     HL,BC           ; HL=len(S1)-len(S2)
3313+ 31FE ED 5B 0D 82          ld      DE,(PT)         ; load pointer
3314+ 3202 1C                   inc     E               ; PT=PT+1
3315+ 3203 ED 53 0D 82          ld      (PT),DE         ; store new value
3316+ 3207 EB                   ex      DE,HL           ; invert registers
3317+ 3208 CD 05 4D             call    CMP16           ; check if PT>len(S1)-len(S2)
3318+ 320B DA 9F 31             jp      C,RPTINST       ; repeat if <
3319+ 320E CA 9F 31             jp      Z,RPTINST       ; repeat if =
3320+ 3211 3A 15 82     RZINSTR:ld      A,(TF)          ; current value of TF
3321+ 3214 A7                   and     A               ; is it 0?
3322+ 3215 CA 1C 32             jp      Z,LVINSTR       ; yes, return 0
3323+ 3218 3A 13 82             ld      A,(TP)          ; return TP...
3324+ 321B 3C                   inc     A               ; ...incremented by 1
3325+ 321C E1           LVINSTR:pop     HL              ; drop original return point
3326+ 321D FD E5                push    IY              ; load current string address from IY into stack
3327+ 321F 11 48 2B             ld      DE,RETNUM       ; Address of Return number from function...
3328+ 3222 D5                   push    DE              ; ...saved on stack
3329+ 3223 C3 56 2E             jp      PASSA           ; return TP
3330+ 3226 AF           CNTZIN: xor     A               ; set...
3331+ 3227 32 15 82             ld      (TF),A          ; TF=0
3332+ 322A C3 EF 31             jp      CNT1INS         ; continue
3333+ 322D
3334+ 322D
3335+ 322D              ; returns the right portion of a string
3336+ 322D CD 96 32     RIGHT:  call    LFRGNM          ; Get number and ending ")"
3337+ 3230 D1                   pop     DE              ; Get string length
3338+ 3231 D5                   push    DE              ; And re-save
3339+ 3232 1A                   ld      A,(DE)          ; Get length
3340+ 3233 90                   sub     B               ; Move back N bytes
3341+ 3234 C3 0B 31             jp      RIGHT1          ; Go and get sub-string
3342+ 3237
3343+ 3237              ; returns a piece of a string
3344+ 3237 EB           MID:    ex      DE,HL           ; Get code string address
3345+ 3238 7E                   ld      A,(HL)          ; Get next byte ',' or ")"
3346+ 3239 CD 9B 32             call    MIDNUM          ; Get number supplied
3347+ 323C 04                   inc     B               ; Is it character zero?
3348+ 323D 05                   dec     B
3349+ 323E CA 97 26             jp      Z,FCERR         ; Yes - Error
3350+ 3241 C5                   push    BC              ; Save starting position
3351+ 3242 1E FF                ld      E,$FF           ; All of string
3352+ 3244 FE 29                cp      ')'             ; Any length given?
3353+ 3246 CA 50 32             jp      Z,RSTSTR        ; No - Rest of string
3354+ 3249 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3355+ 324C 2C                   defb    ','
3356+ 324D CD E3 32             call    GETINT          ; Get integer 0-255
3357+ 3250 CD 83 23     RSTSTR: call    CHKSYN          ; Make sure ")" follows
3358+ 3253 29                   defb    ')'
3359+ 3254 F1                   pop     AF              ; Restore starting position
3360+ 3255 E3                   ex      (SP),HL         ; Get string,save code string
3361+ 3256 01 0D 31             ld      BC,MID1         ; Continuation of MID$ routine
3362+ 3259 C5                   push    BC              ; Save for return
3363+ 325A 3D                   dec     A               ; Starting position-1
3364+ 325B BE                   cp      (HL)            ; Compare with length
3365+ 325C 06 00                ld      B,$00           ; Zero bytes length
3366+ 325E D0                   ret     NC              ; Null string if start past end
3367+ 325F 4F                   ld      C,A             ; Save starting position-1
3368+ 3260 7E                   ld      A,(HL)          ; Get length of string
3369+ 3261 91                   sub     C               ; Subtract start
3370+ 3262 BB                   cp      E               ; Enough string for it?
3371+ 3263 47                   ld      B,A             ; Save maximum length available
3372+ 3264 D8                   ret     C               ; Truncate string if needed
3373+ 3265 43                   ld      B,E             ; Set specified length
3374+ 3266 C9                   ret                     ; Go and create string
3375+ 3267
3376+ 3267
3377+ 3267              ; return the value of a numeric string
3378+ 3267 CD DB 30     VAL:    call    GETLEN          ; Get length of string
3379+ 326A CA 39 36             jp      Z,RESZER        ; Result zero
3380+ 326D 5F                   ld      E,A             ; Save length
3381+ 326E 23                   inc     HL
3382+ 326F 23                   inc     HL
3383+ 3270 7E                   ld      A,(HL)          ; Get LSB of address
3384+ 3271 23                   inc     HL
3385+ 3272 66                   ld      H,(HL)          ; Get MSB of address
3386+ 3273 6F                   ld      L,A             ; HL = String address
3387+ 3274 E5                   push    HL              ; Save string address
3388+ 3275 19                   add     HL,DE
3389+ 3276 46                   ld      B,(HL)          ; Get end of string+1 byte
3390+ 3277 72                   ld      (HL),D          ; Zero it to terminate
3391+ 3278 E3                   ex      (SP),HL         ; Save string end,get start
3392+ 3279 C5                   push    BC              ; Save end+1 byte
3393+ 327A 7E                   ld      A,(HL)          ; Get starting byte
3394+ 327B FE 24                cp      '$'             ; Hex number indicated? [function added]
3395+ 327D C2 85 32             jp      NZ,VAL1
3396+ 3280 CD 37 4C             call    HEXTFP          ; Convert Hex to FPREG
3397+ 3283 18 0D                jr      VAL3
3398+ 3285 FE 25        VAL1:   cp      '%'             ; Binary number indicated? [function added]
3399+ 3287 C2 8F 32             jp      NZ,VAL2
3400+ 328A CD A7 4C             call    BINTFP          ; Convert Bin to FPREG
3401+ 328D 18 03                jr      VAL3
3402+ 328F CD 71 39     VAL2:   call    ASCTFP          ; Convert ASCII string to FP
3403+ 3292 C1           VAL3:   pop     BC              ; Restore end+1 byte
3404+ 3293 E1                   pop     HL              ; Restore end+1 address
3405+ 3294 70                   ld      (HL),B          ; Put back original byte
3406+ 3295 C9                   ret
3407+ 3296
3408+ 3296 EB           LFRGNM: ex      DE,HL           ; Code string address to HL
3409+ 3297 CD 83 23             call    CHKSYN          ; Make sure ")" follows
3410+ 329A 29                   defb    ')'
3411+ 329B C1           MIDNUM: pop     BC              ; Get return address
3412+ 329C D1                   pop     DE              ; Get number supplied
3413+ 329D C5                   push    BC              ; Re-save return address
3414+ 329E 43                   ld      B,E             ; Number to B
3415+ 329F C9                   ret
3416+ 32A0
3417+ 32A0 CD E6 32     INP:    call    MAKINT          ; Make it integer A
3418+ 32A3 32 A0 80             ld      (INPORT),A      ; Set input port
3419+ 32A6 CD 9F 80             call    INPSUB          ; Get input from port
3420+ 32A9 C3 56 2E             jp      PASSA           ; Return integer A
3421+ 32AC
3422+ 32AC CD D0 32     POUT:   call    SETIO           ; Set up port number
3423+ 32AF C3 67 80             jp      OUTSUB          ; Output data and return
3424+ 32B2
3425+ 32B2 CD D0 32     WAIT:   call    SETIO           ; Set up port number
3426+ 32B5 F5                   push    AF              ; Save AND mask
3427+ 32B6 1E 00                ld      E,$00           ; Assume zero if none given
3428+ 32B8 2B                   dec     HL              ; dec 'cos GETCHR INCs
3429+ 32B9 CD CC 25             call    GETCHR          ; Get next character
3430+ 32BC CA C6 32             jp      Z,NOXOR         ; No XOR byte given
3431+ 32BF CD 83 23             call    CHKSYN          ; Make sure ',' follows
3432+ 32C2 2C                   defb    ','
3433+ 32C3 CD E3 32             call    GETINT          ; Get integer 0-255 to XOR with
3434+ 32C6 C1           NOXOR:  pop     BC              ; Restore AND mask
3435+ 32C7 CD 9F 80     WAITLP: call    INPSUB          ; Get input
3436+ 32CA AB                   xor     E               ; Flip selected bits
3437+ 32CB A0                   and     B               ; Result non-zero?
3438+ 32CC CA C7 32             jp      Z,WAITLP        ; No = keep waiting
3439+ 32CF C9                   ret
3440+ 32D0
3441+ 32D0 CD E3 32     SETIO:  call    GETINT          ; Get integer 0-255
3442+ 32D3 32 A0 80             ld      (INPORT),A      ; Set input port
3443+ 32D6 32 68 80             ld      (OTPORT),A      ; Set output port
3444+ 32D9 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3445+ 32DC 2C                   defb    ','
3446+ 32DD C3 E3 32             jp      GETINT          ; Get integer 0-255 and return
3447+ 32E0
3448+ 32E0 CD CC 25     FNDNUM: call    GETCHR          ; Get next character
3449+ 32E3 CD 5D 2A     GETINT: call    GETNUM          ; Get a number from 0 to 255
3450+ 32E6 CD 7C 26     MAKINT: call    DEPINT          ; Make sure value 0 - 255
3451+ 32E9 7A                   ld      A,D             ; Get MSB of number
3452+ 32EA B7                   or      A               ; Zero?
3453+ 32EB C2 97 26             jp      NZ,FCERR        ; No - Error
3454+ 32EE 2B                   dec     HL              ; dec 'cos GETCHR INCs
3455+ 32EF CD CC 25             call    GETCHR          ; Get next character
3456+ 32F2 7B                   ld      A,E             ; Get number to A
3457+ 32F3 C9                   ret
3458+ 32F4
3459+ 32F4
3460+ 32F4              ; activate a Non-Maskable Interrupt hooked to VDP interrupt signal
3461+ 32F4              ; address must point to an ISR routine that terminates with EI/RETN instructions
3462+ 32F4 CD 5D 2A     NMI:    call    GETNUM          ; Get memory address
3463+ 32F7 CD 82 26             call    DEINT           ; get integer -32768 to 32767
3464+ 32FA 7B                   ld      A,E             ; check if address is 0
3465+ 32FB B2                   or      D
3466+ 32FC 20 11                jr      NZ,NM1          ; no, so jump over
3467+ 32FE F3           DISNMI: di                      ; disable INTs
3468+ 32FF CD 2B 33             call    NMIDINT         ; disable VDP INT
3469+ 3302 E5                   push    HL              ; store HL
3470+ 3303 21 ED 45             ld      HL,$45ED        ; these are the op-codes for "RETN"
3471+ 3306 22 61 80             ld      (NMIUSR),HL     ; store RETN
3472+ 3309 AF                   xor     A
3473+ 330A 32 63 80             ld      (NMIUSR+2),A    ; "NOP"
3474+ 330D 18 11                jr      NMI2            ; execute the last part of code
3475+ 330F E5           NM1:    push    HL              ; store current HL
3476+ 3310 EB                   ex      DE,HL           ; move address argument into HL
3477+ 3311 F3                   di                      ; disable INTs
3478+ 3312 CD 2B 33             call    NMIDINT         ; disable VDP INT, if enabled
3479+ 3315 3E C3                ld      A,$C3           ; "jp" instruction
3480+ 3317 32 61 80             ld      (NMIUSR),A      ; store it
3481+ 331A 22 62 80             ld      (NMIUSR+1),HL   ; store address
3482+ 331D CD 24 33             call    NMIEINT         ; re-enable VDP INT
3483+ 3320 FB           NMI2:   ei                      ; re-enable INTS
3484+ 3321 00                   nop                     ; wait for INTs
3485+ 3322 E1                   pop    HL               ; retrieve HL
3486+ 3323 C9                   ret                     ; return to caller
3487+ 3324              ; enable VDP INT
3488+ 3324 CD 3A 33     NMIEINT:call    NMIVR1          ; load default VReg #1 setting
3489+ 3327 F6 20                or      %00100000       ; enable VDP INT
3490+ 3329 18 03                jr      NMIINT          ; rest of code is shared
3491+ 332B              ; disable VDP INT
3492+ 332B CD 3A 33     NMIDINT:call    NMIVR1          ; load default VReg #1 setting
3493+ 332E D5           NMIINT: push    DE              ; store DE
3494+ 332F 5F                   ld      E,A             ; move value into E
3495+ 3330 3E 01                ld      A,$01           ; VREG #1
3496+ 3332 F3                   di                      ; disable INTs
3497+ 3333 CD D1 06             call    WRITE_VREG      ; disable VDP INT
3498+ 3336 FB                   ei                      ; re-enable INTs
3499+ 3337 00                   nop                     ; wait for INTs being enabled
3500+ 3338 D1                   pop     DE              ; retrieve DE
3501+ 3339 C9                   ret                     ; return to caller
3502+ 333A
3503+ 333A              ; load VREG #1 setting for current screen mode and return it into A
3504+ 333A E5           NMIVR1: push    HL              ; store HL
3505+ 333B D5                   push    DE              ; store DE
3506+ 333C 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
3507+ 333F 87                   add     A,A             ; multiply A by 8...
3508+ 3340 87                   add     A,A             ; ...so that reg. A can points..
3509+ 3341 87                   add     A,A             ; to the correct settings
3510+ 3342 3C                   inc     A               ; need to change VREG 1
3511+ 3343 5F                   ld      E,A             ; copy A into E
3512+ 3344 16 00                ld      D,$00           ; reset D
3513+ 3346 21 43 0B             ld      HL,VDPMODESET   ; pointer to register #1 setting...
3514+ 3349 19                   add     HL,DE           ; ...for current screen mode
3515+ 334A 7E                   ld      A,(HL)          ; load current setting
3516+ 334B D1                   pop     DE              ; retrieve DE
3517+ 334C E1                   pop     HL              ; retrieve HL
3518+ 334D C9                   ret                     ; return to caller
3519+ 334E
3520+ 334E              ; execute a machine language routine, eventually passing a param into A
3521+ 334E CD 5D 2A     SYS:    call    GETNUM          ; Get memory address
3522+ 3351 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
3523+ 3354 ED 53 07 82          ld      (TMPBFR2),DE    ; store user routine's address
3524+ 3358 AF                   xor     A               ; reset A
3525+ 3359 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3526+ 335C 2B                   dec     HL              ; dec 'cos GETCHR INCs
3527+ 335D CD CC 25             call    GETCHR          ; check next character
3528+ 3360 28 0A                jr      Z,NOSYSPR       ; jump if nothing follows
3529+ 3362 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3530+ 3365 2C                   defb    ','
3531+ 3366 CD E3 32             call    GETINT          ; get byte value (0~255) if something follows
3532+ 3369 32 05 82             ld      (TMPBFR1),A     ; store into temp buffer
3533+ 336C 3A 05 82     NOSYSPR:ld      A,(TMPBFR1)     ; recover A
3534+ 336F ED 5B 07 82          ld      DE,(TMPBFR2)    ; recover user routine's address
3535+ 3373 E5                   push    HL              ; save code string address
3536+ 3374 EB                   ex      DE,HL           ; move user routine's address into HL
3537+ 3375 11 7A 33             ld      DE,SYSRET       ; set point of return after the user routine
3538+ 3378 D5                   push    DE              ; store into stack
3539+ 3379 E9                   jp      (HL)            ; call user routine
3540+ 337A E1           SYSRET: pop     HL              ; retrieve code string address
3541+ 337B C9                   ret                     ; return to caller
3542+ 337C
3543+ 337C
3544+ 337C              ; read the contents of a RAM location
3545+ 337C CD 82 26     PEEK:   call    DEINT           ; Get memory address into DE
3546+ 337F 1A                   ld      A,(DE)          ; Read value of memory cell
3547+ 3380 C3 56 2E             jp      PASSA           ; Return into A
3548+ 3383
3549+ 3383              ; read the contents of a VRAM location
3550+ 3383 CD 82 26     VPEEK:  call    DEINT           ; Get VRAM address into DE
3551+ 3386 EB                   ex      DE,HL           ; Copy param into HL
3552+ 3387 F3                   di                      ; Disable interrupts
3553+ 3388 CD A7 06             call    READ_VIDEO_LOC  ; Read data from VRAM at address HL
3554+ 338B FB                   ei                      ; Re-enable interrupts
3555+ 338C EB                   ex      DE,HL           ; Restore HL
3556+ 338D C3 56 2E             jp      PASSA           ; Return value into A
3557+ 3390
3558+ 3390              ; recover params for POKE/VPOKE commands
3559+ 3390              ; returns address into DE and byte to be written into A
3560+ 3390 CD 5D 2A     PKEPRMS:call    GETNUM          ; Get memory address
3561+ 3393 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
3562+ 3396 ED 53 05 82          ld      (TMPBFR1),DE    ; Store DE into a temp. buffer
3563+ 339A CD 83 23             call    CHKSYN          ; Make sure ',' follows
3564+ 339D 2C                   defb    ','
3565+ 339E CD E3 32             call    GETINT          ; Get integer 0-255
3566+ 33A1 ED 5B 05 82          ld      DE,(TMPBFR1)    ; Restore memory address
3567+ 33A5 C9                   ret                     ; Return to caller
3568+ 33A6
3569+ 33A6              ; write a byte into a RAM location
3570+ 33A6 CD 90 33     POKE:   call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3571+ 33A9 12                   ld      (DE),A          ; Load it into memory
3572+ 33AA C9                   ret
3573+ 33AB
3574+ 33AB              ; write a byte into a VRAM location
3575+ 33AB CD 90 33     VPOKE:  call    PKEPRMS         ; Get params: address and value, return into DE and A, resp.
3576+ 33AE EB                   ex      DE,HL           ; Copy address into HL
3577+ 33AF F3                   di                      ; Disable interrupts
3578+ 33B0 CD BC 06             call    WRITE_VIDEO_LOC ; write data into VRAM at address HL
3579+ 33B3 FB                   ei                      ; Re-enable interrupts
3580+ 33B4 EB                   ex      DE,HL           ; Restore HL
3581+ 33B5 C9                   ret                     ; Return to caller
3582+ 33B6
3583+ 33B6              ; position the cursor at a specific X,Y location onto screen
3584+ 33B6 CD E3 32     LOCATE: call    GETINT          ; get the first param into A
3585+ 33B9 E5                   push    HL              ; store HL
3586+ 33BA 21 F5 81             ld      HL,SCR_SIZE_W   ; load address of screen width
3587+ 33BD 5E                   ld      E,(HL)          ; load screen width into E
3588+ 33BE E1                   pop     HL              ; restore HL
3589+ 33BF BB                   cp      E               ; compare witdh with param
3590+ 33C0 D2 97 26             jp      NC,FCERR        ; value over the width of the screen, exit with Illegal F.C. error
3591+ 33C3 32 05 82             ld      (TMPBFR1),A     ; Store X into a temp. buffer
3592+ 33C6 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3593+ 33C9 2C                   defb    ','
3594+ 33CA CD E3 32             call    GETINT          ; Get the second param into A
3595+ 33CD E5                   push    HL              ; store HL
3596+ 33CE 21 F6 81             ld      HL,SCR_SIZE_H   ; load address of screen width
3597+ 33D1 5E                   ld      E,(HL)          ; load screen width into A
3598+ 33D2 E1                   pop     HL              ; restore HL
3599+ 33D3 BB                   cp      E               ; compare witdh with param
3600+ 33D4 D2 97 26             jp      NC,FCERR        ; value over the height of the screen, exit with Illegal F.C. error
3601+ 33D7 32 FD 81             ld      (SCR_CUR_NY),A  ; store new Y
3602+ 33DA 3A 05 82             ld      A,(TMPBFR1)     ; recover the new X
3603+ 33DD 32 FC 81             ld      (SCR_CUR_NX),A  ; store new X
3604+ 33E0 E5                   push    HL              ; store HL
3605+ 33E1 F3                   di                      ; disable INTs
3606+ 33E2 CD ED 06             call    MOVCRS          ; move cursor to new location
3607+ 33E5 FB                   ei                      ; re-enable INTs
3608+ 33E6 E1                   pop     HL              ; restore HL
3609+ 33E7 C9                   ret                     ; return to caller
3610+ 33E8
3611+ 33E8              ; write a byte into one of the PSG registers
3612+ 33E8 CD E3 32     SREG:   call    GETINT          ; Get register number back into A
3613+ 33EB FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3614+ 33ED D2 97 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3615+ 33F0 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3616+ 33F3 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3617+ 33F6 2C                   defb    ','
3618+ 33F7 CD E3 32             call    GETINT          ; get second value (0-255), returned into A
3619+ 33FA 5F                   ld      E,A             ; store value into E
3620+ 33FB 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into D
3621+ 33FE F3                   di                      ; disable INTs
3622+ 33FF 0E 40                ld      C,PSG_REG       ; output port to access PSG registers
3623+ 3401 ED 79                out     (C),A           ; send register # to PSG
3624+ 3403 0E 41                ld      C,PSG_DAT       ; output port to send data to PSG
3625+ 3405 ED 59                out     (C),E           ; send byte to write into selected register
3626+ 3407 FB                   ei                      ; re-enable INTs
3627+ 3408 C9                   ret                     ; return to caller
3628+ 3409
3629+ 3409              ; VOLUME ch,vol
3630+ 3409              ; set the volume for the audio channels
3631+ 3409              ; "ch" is 1~3 for corresponding channel, or 0 for all; "vol" is 0~15 (0=OFF, 15=MAX)
3632+ 3409 CD E3 32     VOLUME: call    GETINT          ; get integer 0-255 (recover channel)
3633+ 340C FE 04                cp      $04             ; check if it's in the range 0~3
3634+ 340E D2 97 26             jp      NC,FCERR        ; if not, exit with Illegal function call error
3635+ 3411 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3636+ 3414 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3637+ 3417 2C                   defb    ','
3638+ 3418 CD E3 32             call    GETINT          ; get integer 0-255 (recover channel)
3639+ 341B FE 10                cp      $10             ; check if it's in the range 0~15
3640+ 341D D2 97 26             jp      NC,FCERR        ; if not, exit with Illegal funcion call
3641+ 3420 57                   ld      D,A             ; store volume into D
3642+ 3421 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3643+ 3424 A7                   and     A               ; is it 0? (0=every channel)
3644+ 3425 20 10                jr      NZ,VOLCH        ; no, jump over
3645+ 3427 06 03                ld      B,$03           ; yes, set every channel
3646+ 3429 1E 08                ld      E,$08           ; register volume of first channel
3647+ 342B 0E 40        RPVOLCG:ld      C,PSG_REG       ; PSG register port
3648+ 342D ED 59                out     (C),E           ; set register #
3649+ 342F 0E 41                ld      C,PSG_DAT       ; PSG data port
3650+ 3431 ED 51                out     (C),D           ; send volume
3651+ 3433 1C                   inc     E               ; next register
3652+ 3434 10 F5                djnz    RPVOLCG         ; repeat for each channel
3653+ 3436 C9                   ret                     ; return to caller
3654+ 3437 0E 40        VOLCH:  ld      C,PSG_REG       ; PSG register port
3655+ 3439 C6 07                add     $07             ; add 7 to A so that we have the correct register (1->8, 2->9, 3->10)
3656+ 343B ED 79                out     (C),A           ; set register
3657+ 343D 0E 41                ld      C,PSG_DAT       ; PSG data port
3658+ 343F ED 51                out     (C),D           ; send volume level
3659+ 3441 C9                   ret                     ; return to caller
3660+ 3442
3661+ 3442              ; SOUND ch,tone,dur
3662+ 3442              ; play a tone or noise of "tone" frequency from selected channel "ch" for duration "dur"
3663+ 3442              ; "ch" is 1~6 (0=means sound OFF,1~3 for tone, 4~6 for noise) / "tone" is 1~4,095 (0=means no tone) /
3664+ 3442              ; "dur" is 1~16383 h.o.s.,0.001~163s (0=means non-stop tone)
3665+ 3442 CD E3 32     SOUND:  call    GETINT          ; get integer 0-255 (recover channel)
3666+ 3445 A7                   and     A               ; is it zero?
3667+ 3446 20 08                jr      NZ,CTSNDC       ; no, continue with checking of params
3668+ 3448 E5                   push    HL              ; store HL
3669+ 3449 F3                   di                      ; disable INTs
3670+ 344A CD B5 0C             call    CLRPSGREGS      ; yes, it's zero, so reset PSG registers to shut down every sound
3671+ 344D FB                   ei                      ; re-enable INTs
3672+ 344E E1                   pop     HL              ; retrieve HL
3673+ 344F C9                   ret                     ; return to caller
3674+ 3450 32 05 82     CTSNDC: ld      (TMPBFR1),A     ; no, continue by storing A into a temp. buffer
3675+ 3453 FE 04                cp      $04             ; is channel >3?
3676+ 3455 D2 D4 34             jp      NC,NOISUP       ; Yes - check to see if it's a noise channel
3677+ 3458 CD 83 23             call    CHKSYN          ; No, continue checking by making sure ',' follows
3678+ 345B 2C                   defb    ','
3679+ 345C CD 5D 2A             call    GETNUM          ; Get tone frequency
3680+ 345F CD 82 26             call    DEINT           ; Get integer -32768 to 32767
3681+ 3462 ED 53 07 82          ld      (TMPBFR2),DE    ; Store frequency
3682+ 3466 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3683+ 3469 2C                   defb    ','
3684+ 346A CD 5D 2A             call    GETNUM          ; Get duration
3685+ 346D CD 82 26             call    DEINT           ; Get integer -32768 to 32767
3686+ 3470 ED 53 09 82          ld      (TMPBFR3),DE    ; Store duration
3687+ 3474                                              ; CHECK CHANNEL
3688+ 3474 3A 05 82             ld      A,(TMPBFR1)     ; recover channel
3689+ 3477 FE 01                cp      $01             ; is channel <1?
3690+ 3479 DA 97 26             jp      C,FCERR         ; Yes - Illegal function call error
3691+ 347C                                              ; CHECK FREQUENCY
3692+ 347C ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3693+ 3480 7A                   ld      A,D             ; move D into A and check if it is in the range 0~4095...
3694+ 3481 FE 10                cp      $10             ; ...so D must not be greater than $0F (15)
3695+ 3483 D2 97 26             jp      NC,FCERR        ; if not in the range, exit with an Illegal function call error
3696+ 3486                                              ; CHECK DURATION
3697+ 3486 ED 5B 09 82          ld      DE,(TMPBFR3)    ; restore duration from temp buffer
3698+ 348A 7A                   ld      A,D             ; check if it is in the range 0~16383...
3699+ 348B E6 C0                and     $C0             ; ...(15th & 14th bits must not be set)
3700+ 348D C2 97 26             jp      NZ,FCERR        ; if not in the range, exit with an Illegal function call error
3701+ 3490                                              ;
3702+ 3490                                              ; SET TONE:
3703+ 3490                                              ; let's start by setting up the channel
3704+ 3490 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3705+ 3493 FE 03                cp      $03             ; is it 3?
3706+ 3495 20 02                jr      NZ,SND1         ; no, jump over
3707+ 3497 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3708+ 3499 2F           SND1:   cpl                     ; complement of A - this is used later to set on the channel into the mixer
3709+ 349A CD 21 35             call    WRTSND          ; enable line into mixer of channel stored in A
3710+ 349D                                              ; SET FREQUENCY
3711+ 349D                                              ; we simply get frequency and subtract from 4096. The result
3712+ 349D                                              ; is put into register pair of the corresponding freq tone channel
3713+ 349D ED 5B 07 82          ld      DE,(TMPBFR2)    ; restore frequency from temp buffer
3714+ 34A1 E5                   push    HL              ; store HL (it will be used by the subroutine)
3715+ 34A2 21 00 10             ld      HL,$1000        ; load 4096 into HL
3716+ 34A5 A7                   and     A               ; reset C flag
3717+ 34A6 ED 52                sbc     HL,DE           ; subtract freq from HL - now the frequency is inverted, so we will send the low as high and vice-versa
3718+ 34A8 3A 05 82             ld      A,(TMPBFR1)     ; restore channel value
3719+ 34AB 3D                   dec     A               ; set A into the range 0~2
3720+ 34AC 87                   add     A,A             ; double A to find the register pair that correspond to the channel (A->0,1 / B->2,3, C->4,5)
3721+ 34AD 0E 40                ld      C,PSG_REG       ; PSG register port
3722+ 34AF ED 79                out     (C),A           ; select first register of the pair
3723+ 34B1 0E 41                ld      C,PSG_DAT       ; PSG data port
3724+ 34B3 ED 69                out     (C),L           ; send high byte
3725+ 34B5 0E 40                ld      C,PSG_REG       ; PSG register support
3726+ 34B7 3C                   inc     A               ; second register of the pair
3727+ 34B8 ED 79                out     (C),A           ; select register
3728+ 34BA 0E 41                ld      C,PSG_DAT       ; PSG data port
3729+ 34BC ED 61                out     (C),H           ; send low byte
3730+ 34BE ED 5B 09 82          ld      DE,(TMPBFR3)    ; recover duration
3731+ 34C2 3A 05 82             ld      A,(TMPBFR1)     ; recover channel value
3732+ 34C5 3D                   dec     A               ; set channel into the range 0~2
3733+ 34C6 87                   add     A,A             ; double A to find the correct offset
3734+ 34C7 21 39 82             ld      HL,CHASNDDTN    ; set duration into...
3735+ 34CA 85                   add     A,L             ; ...the proper...
3736+ 34CB 30 01                jr      NC,SNDOVR       ; (is there a rest? no, jump over
3737+ 34CD 24                   inc     H               ; yes, increment H)
3738+ 34CE 6F           SNDOVR: ld      L,A             ; ...register pair...
3739+ 34CF 73                   ld      (HL),E          ; ...and store the value
3740+ 34D0 23                   inc     HL
3741+ 34D1 72                   ld      (HL),D
3742+ 34D2 E1                   pop     HL              ; retrieve HL
3743+ 34D3 C9                   ret                     ; Return to caller
3744+ 34D4 FE 07        NOISUP: cp      $07             ; is channel in range 4 to 6 (for a noise)?
3745+ 34D6 D2 97 26             jp      NC,FCERR        ; no, so ILLEGAL FUNCTION CALL
3746+ 34D9 CD 83 23             call    CHKSYN          ; yes, continue checking by making sure ',' follows
3747+ 34DC 2C                   defb    ','
3748+ 34DD CD E3 32             call    GETINT          ; get integer 0-255 (frequency)
3749+ 34E0 FE 20                cp      $20             ; make sure it's in range 0~31
3750+ 34E2 D2 97 26             jp      NC,FCERR        ; no, so Illegal function call
3751+ 34E5 32 07 82             ld      (TMPBFR2),A     ; store freq.
3752+ 34E8 2B                   dec     HL              ; dec 'cos GETCHR INCs
3753+ 34E9 CD CC 25             call    GETCHR          ; check that nothing follows
3754+ 34EC C2 83 20             jp      NZ,SNERR        ; error if no empty line
3755+ 34EF 3A 07 82             ld      A,(TMPBFR2)     ; retrieve freq.
3756+ 34F2 5F                   ld      E,A             ; store freq into E
3757+ 34F3 3A 05 82             ld      A,(TMPBFR1)     ; retrieve channel
3758+ 34F6 D6 03                sub     $03             ; subtract 3 to get channel in range 1~3
3759+ 34F8 FE 03                cp      $03             ; is it 3?
3760+ 34FA 20 02                jr      NZ,NOS1         ; no, jump over
3761+ 34FC 3E 04                ld      A,%00000100     ; yes, for ch.3, set 3rd bit only (so A=001, B=010, C=100)
3762+ 34FE 87           NOS1:   add     A,A
3763+ 34FF 87                   add     A,A
3764+ 3500 87                   add     A,A             ; let's move A 3 bits to left
3765+ 3501 47                   ld      B,A             ; store channel into B
3766+ 3502 7B                   ld      A,E             ; check if
3767+ 3503 A7                   and     A               ; freq is 0 (means that noise reproduction must be halted)
3768+ 3504 F3                   di                      ; disable INts
3769+ 3505 20 0A                jr      NZ,NOS2         ; no, so jump over
3770+ 3507 3E 07                ld      A,$07           ; mixer register
3771+ 3509 CD 03 0D             call    SETSNDREG       ; set mixer register
3772+ 350C ED 78                in      A,(C)           ; load current mixer value
3773+ 350E B0                   or      B               ; disable noise
3774+ 350F 18 19                jr      NOS3            ; continue over
3775+ 3511 78           NOS2:   ld      A,B             ; recover channel
3776+ 3512 2F                   cpl                     ; complement of A - this is used to set on the channel into the mixer
3777+ 3513 CD 21 35             call    WRTSND          ; enable line into mixer of channel stored in A
3778+ 3516 3E 06                ld      A,$06           ; write into noise register
3779+ 3518 CD 03 0D             call    SETSNDREG       ; set register into PSG
3780+ 351B 7B                   ld      A,E             ; load value for noise frequency
3781+ 351C CD 08 0D             call    WRTSNDREG       ; write data into register $06
3782+ 351F FB                   ei                      ; re-enable INTs
3783+ 3520 C9                   ret
3784+ 3521                      ; enable line into mixer of channel stored in A
3785+ 3521 47           WRTSND: ld      B,A             ; move channel into B
3786+ 3522 3E 07                ld      A,$07           ; mixer register
3787+ 3524 CD 03 0D             call    SETSNDREG       ; set mixer register
3788+ 3527 ED 78                in      A,(C)           ; load current value
3789+ 3529 A0                   and     B               ; set on the channel into the mixer (remember that 0=ON)
3790+ 352A                                              ; example: if channel is A (1), complement of 1 is 254 (11111110). So, 255 (in case
3791+ 352A                                              ; the register is still unchanged after reset) is 11111111 and
3792+ 352A                                              ; 11111111 AND 11111110 is equal to 11111110
3793+ 352A                                              ; 11111001 AND 11111110 is equal to 11111000 (in case channels B & C are ON)
3794+ 352A 47           NOS3:   ld      B,A             ; store new mixer value into B
3795+ 352B 3E 07                ld      A,$07           ; mixer address
3796+ 352D CD 03 0D             call    SETSNDREG       ; set register
3797+ 3530 78                   ld      A,B             ; retrieve new mixer value from B
3798+ 3531 CD 08 0D             call    WRTSNDREG       ; send new value for the mixer
3799+ 3534 FB                   ei                      ; re-enable INTs
3800+ 3535 C9                   ret                     ; return to caller
3801+ 3536
3802+ 3536              ; write a byte into one of the VDP registers
3803+ 3536 CD E3 32     VREG:   call    GETINT          ; Get register number back into A
3804+ 3539 FE 08                cp      $08             ; check if value is equal or greater than 8 (VDP registers are only 8, from 0 to 7)
3805+ 353B D2 97 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3806+ 353E 32 05 82             ld      (TMPBFR1),A     ; Store A into a temp. buffer
3807+ 3541 CD 83 23             call    CHKSYN          ; Make sure ',' follows
3808+ 3544 2C                   defb    ','
3809+ 3545 CD E3 32             call    GETINT          ; get value (0-255)
3810+ 3548 5F                   ld      E,A             ; store value into E
3811+ 3549 3A 05 82             ld      A,(TMPBFR1)     ; recover VDP register and store into A
3812+ 354C F3                   di                      ; disable INTs
3813+ 354D CD D1 06             call    WRITE_VREG      ; write value into VDP register
3814+ 3550 FB                   ei                      ; re-enable INTs
3815+ 3551 C9                   ret                     ; return to caller
3816+ 3552
3817+ 3552              ; read the VDP status register and return it into A
3818+ 3552 CD 82 26     VSTAT:  call    DEINT           ; Get integer -32768 to 32767 (Note: we do NOT use it)
3819+ 3555 F3                   di                      ; disable INTs
3820+ 3556 CD DC 06             call    READ_VSTAT      ; read VDP register status
3821+ 3559 FB                   ei                      ; re-enable INTs
3822+ 355A C3 56 2E             jp      PASSA           ; Return integer A
3823+ 355D
3824+ 355D              ; read from PSG register and return it into A
3825+ 355D CD 82 26     SSTAT:  call    DEINT           ; get integer -32768 to 32767
3826+ 3560 7B                   ld      A,E             ; consider LSB
3827+ 3561 FE 10                cp      $10             ; check if value >= 16 (PSG registers go from 0 to 15)
3828+ 3563 D2 97 26             jp      NC,FCERR        ; If yes, exit and raise an Illegal function call Error
3829+ 3566 F3                   di                      ; disable INts
3830+ 3567 0E 40                ld      C,PSG_REG       ; output port to set PSG register
3831+ 3569 ED 79                out     (C),A           ; send register to read from
3832+ 356B ED 78                in      A,(C)           ; read register's contents and store into A
3833+ 356D FB                   ei                      ; re-enable INTs
3834+ 356E C3 56 2E             jp      PASSA           ; return A
3835+ 3571
3836+ 3571              ; read the temp key buffer and return the value of the current key being pressed
3837+ 3571              ; can wait for the number of 100thds of second before to return
3838+ 3571 CD D0 2E     INKEY:  call    IDTEST          ; Test for illegal direct
3839+ 3574 CD 82 26             call    DEINT           ; get number param (100thds of second to wait) into DE
3840+ 3577 C5                   push    BC              ; store BC
3841+ 3578 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
3842+ 357B 47                   ld      B,A             ; move it into B
3843+ 357C 3A E5 81     CMP_A:  ld      A,(TMRCNT)      ; make a little delay of 1/100 sec...
3844+ 357F B8                   cp      B               ; ...to let the sniffer collect...
3845+ 3580 20 FA                jr      NZ,CMP_A        ; ...at least 1 char before to continue
3846+ 3582 7A                   ld      A,D             ; check the param
3847+ 3583 B3                   or      E               ; if DE<>0 then...
3848+ 3584 20 05                jr      NZ,INKEY2       ; ...jump over...
3849+ 3586 3A 41 82             ld      A,(TMPKEYBFR)   ; ...else read the buffer and...
3850+ 3589 18 2A                jr      ENDINK          ; ...return it
3851+ 358B 7A           INKEY2: ld      A,D             ; check if param>1023
3852+ 358C FE 04                cp      $04             ; to do this we check if MSB>3
3853+ 358E D2 97 26             jp      NC,FCERR        ; if MSB >=4 then error
3854+ 3591 E5                   push    HL              ; store HL
3855+ 3592 21 09 00             ld      HL,$0009        ; check if value
3856+ 3595 CD 05 4D             call    CMP16           ; is < 10
3857+ 3598 E1                   pop     HL              ; retrieve HL
3858+ 3599 DA 9F 35             jp      C,SRTINK        ; if value >= 10 then jump over
3859+ 359C 11 0A 00             ld      DE,$000A        ; else, use 10 (no intervals shorter than 10/100s)
3860+ 359F 3A E5 81     SRTINK: ld      A,(TMRCNT)      ; Load the first byte of the system timer
3861+ 35A2 47                   ld      B,A             ; move it into B
3862+ 35A3 3A 41 82     CHKINK: ld      A,(TMPKEYBFR)   ; load char code from buffer
3863+ 35A6 A7                   and     A               ; is it 0?
3864+ 35A7 20 0C                jr      NZ,ENDINK       ; no, so we can return it
3865+ 35A9 3A E5 81             ld      A,(TMRCNT)      ; load the first byte of the system timer
3866+ 35AC B8                   cp      B               ; is it the same value?
3867+ 35AD 28 F4                jr      Z,CHKINK        ; yes, so read again
3868+ 35AF 47                   ld      B,A             ; store new value
3869+ 35B0 1B                   dec     DE              ; no, decrement timer
3870+ 35B1 7A                   ld      A,D             ; check if zero reached
3871+ 35B2 B3                   or      E               ; by ORing D and E
3872+ 35B3 20 EE                jr      NZ,CHKINK       ; if not 0, repeat
3873+ 35B5 C1           ENDINK: pop     BC              ; restore BC
3874+ 35B6 F5                   push    AF              ; store A
3875+ 35B7 F3                   di                      ; disable INTs
3876+ 35B8 AF                   xor     A               ; clear the...
3877+ 35B9 32 41 82             ld      (TMPKEYBFR),A   ; ...TMP KEY buffer for the next read
3878+ 35BC FB                   ei                      ; re-enable INTs
3879+ 35BD F1                   pop     AF              ; retrieve A
3880+ 35BE C3 56 2E     ENDINK2:jp      PASSA           ; return A as ASCII value
3881+ 35C1
3882+ 35C1
3883+ 35C1 21 E8 3A     ROUND:  ld      HL,HALF         ; Add 0.5 to FPREG
3884+ 35C4 CD B9 38     ADDPHL: call    LOADFP          ; Load FP at (HL) to BCDE
3885+ 35C7 C3 D3 35             jp      FPADD           ; Add BCDE to FPREG
3886+ 35CA
3887+ 35CA
3888+ 35CA CD B9 38     SUBPHL: call    LOADFP          ; FPREG = -FPREG + number at HL
3889+ 35CD 21                   defb    $21             ; Skip "pop BC" and "pop DE"
3890+ 35CE C1           PSUB:   pop     BC              ; Get FP number from stack
3891+ 35CF D1                   pop     DE
3892+ 35D0 CD 93 38     SUBCDE: call    INVSGN          ; Negate FPREG
3893+ 35D3 78           FPADD:  ld      A,B             ; Get FP exponent
3894+ 35D4 B7                   or      A               ; Is number zero?
3895+ 35D5 C8                   ret     Z               ; Yes - Nothing to add
3896+ 35D6 3A 5C 82             ld      A,(FPEXP)       ; Get FPREG exponent
3897+ 35D9 B7                   or      A               ; Is this number zero?
3898+ 35DA CA AB 38             jp      Z,FPBCDE        ; Yes - Move BCDE to FPREG
3899+ 35DD 90                   sub     B               ; BCDE number larger?
3900+ 35DE D2 ED 35             jp      NC,NOSWAP       ; No - Don't swap them
3901+ 35E1 2F                   cpl                     ; Two's complement
3902+ 35E2 3C                   inc     A               ;  FP exponent
3903+ 35E3 EB                   ex      DE,HL
3904+ 35E4 CD 9B 38             call    STAKFP          ; Put FPREG on stack
3905+ 35E7 EB                   ex      DE,HL
3906+ 35E8 CD AB 38             call    FPBCDE          ; Move BCDE to FPREG
3907+ 35EB C1                   pop     BC              ; Restore number from stack
3908+ 35EC D1                   pop     DE
3909+ 35ED FE 19        NOSWAP: cp      24+1            ; Second number insignificant?
3910+ 35EF D0                   ret     NC              ; Yes - First number is result
3911+ 35F0 F5                   push    AF              ; Save number of bits to scale
3912+ 35F1 CD D0 38             call    SIGNS           ; Set MSBs & sign of result
3913+ 35F4 67                   ld      H,A             ; Save sign of result
3914+ 35F5 F1                   pop     AF              ; Restore scaling factor
3915+ 35F6 CD 98 36             call    SCALE           ; Scale BCDE to same exponent
3916+ 35F9 B4                   or      H               ; Result to be positive?
3917+ 35FA 21 59 82             ld      HL,FPREG        ; Point to FPREG
3918+ 35FD F2 13 36             jp      P,MINCDE        ; No - Subtract FPREG from CDE
3919+ 3600 CD 78 36             call    PLUCDE          ; Add FPREG to CDE
3920+ 3603 D2 59 36             jp      NC,RONDUP       ; No overflow - Round it up
3921+ 3606 23                   inc     HL              ; Point to exponent
3922+ 3607 34                   inc     (HL)            ; Increment it
3923+ 3608 CA 92 20             jp      Z,OVERR         ; Number overflowed - Error
3924+ 360B 2E 01                ld      L,$01           ; 1 bit to shift right
3925+ 360D CD AE 36             call    SHRT1           ; Shift result right
3926+ 3610 C3 59 36             jp      RONDUP          ; Round it up
3927+ 3613
3928+ 3613 AF           MINCDE: xor     A               ; Clear A and carry
3929+ 3614 90                   sub     B               ; Negate exponent
3930+ 3615 47                   ld      B,A             ; Re-save exponent
3931+ 3616 7E                   ld      A,(HL)          ; Get LSB of FPREG
3932+ 3617 9B                   sbc     A, E            ; Subtract LSB of BCDE
3933+ 3618 5F                   ld      E,A             ; Save LSB of BCDE
3934+ 3619 23                   inc     HL
3935+ 361A 7E                   ld      A,(HL)          ; Get NMSB of FPREG
3936+ 361B 9A                   sbc     A,D             ; Subtract NMSB of BCDE
3937+ 361C 57                   ld      D,A             ; Save NMSB of BCDE
3938+ 361D 23                   inc     HL
3939+ 361E 7E                   ld      A,(HL)          ; Get MSB of FPREG
3940+ 361F 99                   sbc     A,C             ; Subtract MSB of BCDE
3941+ 3620 4F                   ld      C,A             ; Save MSB of BCDE
3942+ 3621 DC 84 36     CONPOS: call    C,COMPL         ; Overflow - Make it positive
3943+ 3624
3944+ 3624 68           BNORM:  ld      L,B             ; L = Exponent
3945+ 3625 63                   ld      H,E             ; H = LSB
3946+ 3626 AF                   xor     A
3947+ 3627 47           BNRMLP: ld      B,A             ; Save bit count
3948+ 3628 79                   ld      A,C             ; Get MSB
3949+ 3629 B7                   or      A               ; Is it zero?
3950+ 362A C2 46 36             jp      NZ,PNORM        ; No - Do it bit at a time
3951+ 362D 4A                   ld      C,D             ; MSB = NMSB
3952+ 362E 54                   ld      D,H             ; NMSB= LSB
3953+ 362F 65                   ld      H,L             ; LSB = VLSB
3954+ 3630 6F                   ld      L,A             ; VLSB= 0
3955+ 3631 78                   ld      A,B             ; Get exponent
3956+ 3632 D6 08                sub     $08             ; Count 8 bits
3957+ 3634 FE E0                cp      -24-8           ; Was number zero?
3958+ 3636 C2 27 36             jp      NZ,BNRMLP       ; No - Keep normalising
3959+ 3639 AF           RESZER: xor     A               ; Result is zero
3960+ 363A 32 5C 82     SAVEXP: ld      (FPEXP),A       ; Save result as zero
3961+ 363D C9                   ret
3962+ 363E
3963+ 363E 05           NORMAL: dec     B               ; Count bits
3964+ 363F 29                   add     HL,HL           ; Shift HL left
3965+ 3640 7A                   ld      A,D             ; Get NMSB
3966+ 3641 17                   rla                     ; Shift left with last bit
3967+ 3642 57                   ld      D,A             ; Save NMSB
3968+ 3643 79                   ld      A,C             ; Get MSB
3969+ 3644 8F                   adc     A,A             ; Shift left with last bit
3970+ 3645 4F                   ld      C,A             ; Save MSB
3971+ 3646 F2 3E 36     PNORM:  jp      P,NORMAL        ; Not done - Keep going
3972+ 3649 78                   ld      A,B             ; Number of bits shifted
3973+ 364A 5C                   ld      E,H             ; Save HL in EB
3974+ 364B 45                   ld      B,L
3975+ 364C B7                   or      A               ; Any shifting done?
3976+ 364D CA 59 36             jp      Z,RONDUP        ; No - Round it up
3977+ 3650 21 5C 82             ld      HL,FPEXP        ; Point to exponent
3978+ 3653 86                   add     A,(HL)          ; Add shifted bits
3979+ 3654 77                   ld      (HL),A          ; Re-save exponent
3980+ 3655 D2 39 36             jp      NC,RESZER       ; Underflow - Result is zero
3981+ 3658 C8                   ret     Z               ; Result is zero
3982+ 3659 78           RONDUP: ld      A,B             ; Get VLSB of number
3983+ 365A 21 5C 82     RONDB:  ld      HL,FPEXP        ; Point to exponent
3984+ 365D B7                   or      A               ; Any rounding?
3985+ 365E FC 6B 36             call    M,FPROND        ; Yes - Round number up
3986+ 3661 46                   ld      B,(HL)          ; B = Exponent
3987+ 3662 23                   inc     HL
3988+ 3663 7E                   ld      A,(HL)          ; Get sign of result
3989+ 3664 E6 80                and     %10000000       ; Only bit 7 needed
3990+ 3666 A9                   xor     C               ; Set correct sign
3991+ 3667 4F                   ld      C,A             ; Save correct sign in number
3992+ 3668 C3 AB 38             jp      FPBCDE          ; Move BCDE to FPREG
3993+ 366B
3994+ 366B 1C           FPROND: inc     E               ; Round LSB
3995+ 366C C0                   ret     NZ              ; Return if ok
3996+ 366D 14                   inc     D               ; Round NMSB
3997+ 366E C0                   ret     NZ              ; Return if ok
3998+ 366F 0C                   inc     C               ; Round MSB
3999+ 3670 C0                   ret     NZ              ; Return if ok
4000+ 3671 0E 80                ld      C,$80           ; Set normal value
4001+ 3673 34                   inc     (HL)            ; Increment exponent
4002+ 3674 C0                   ret     NZ              ; Return if ok
4003+ 3675 C3 92 20             jp      OVERR           ; Overflow error
4004+ 3678
4005+ 3678 7E           PLUCDE: ld      A,(HL)          ; Get LSB of FPREG
4006+ 3679 83                   add     A,E             ; Add LSB of BCDE
4007+ 367A 5F                   ld      E,A             ; Save LSB of BCDE
4008+ 367B 23                   inc     HL
4009+ 367C 7E                   ld      A,(HL)          ; Get NMSB of FPREG
4010+ 367D 8A                   adc     A,D             ; Add NMSB of BCDE
4011+ 367E 57                   ld      D,A             ; Save NMSB of BCDE
4012+ 367F 23                   inc     HL
4013+ 3680 7E                   ld      A,(HL)          ; Get MSB of FPREG
4014+ 3681 89                   adc     A,C             ; Add MSB of BCDE
4015+ 3682 4F                   ld      C,A             ; Save MSB of BCDE
4016+ 3683 C9                   ret
4017+ 3684
4018+ 3684 21 5D 82     COMPL:  ld      HL,SGNRES       ; Sign of result
4019+ 3687 7E                   ld      A,(HL)          ; Get sign of result
4020+ 3688 2F                   cpl                     ; Negate it
4021+ 3689 77                   ld      (HL),A          ; Put it back
4022+ 368A AF                   xor     A
4023+ 368B 6F                   ld      L,A             ; Set L to zero
4024+ 368C 90                   sub     B               ; Negate exponent,set carry
4025+ 368D 47                   ld      B,A             ; Re-save exponent
4026+ 368E 7D                   ld      A,L             ; Load zero
4027+ 368F 9B                   sbc     A,E             ; Negate LSB
4028+ 3690 5F                   ld      E,A             ; Re-save LSB
4029+ 3691 7D                   ld      A,L             ; Load zero
4030+ 3692 9A                   sbc     A,D             ; Negate NMSB
4031+ 3693 57                   ld      D,A             ; Re-save NMSB
4032+ 3694 7D                   ld      A,L             ; Load zero
4033+ 3695 99                   sbc     A,C             ; Negate MSB
4034+ 3696 4F                   ld      C,A             ; Re-save MSB
4035+ 3697 C9                   ret
4036+ 3698
4037+ 3698 06 00        SCALE:  ld      B,$00           ; Clear underflow
4038+ 369A D6 08        SCALLP: sub     $08             ; 8 bits (a whole byte)?
4039+ 369C DA A7 36             jp      C,SHRITE        ; No - Shift right A bits
4040+ 369F 43                   ld      B,E             ; <- Shift
4041+ 36A0 5A                   ld      E,D             ; <- right
4042+ 36A1 51                   ld      D,C             ; <- eight
4043+ 36A2 0E 00                ld      C,$00           ; <- bits
4044+ 36A4 C3 9A 36             jp      SCALLP          ; More bits to shift
4045+ 36A7
4046+ 36A7 C6 09        SHRITE: add     A,8+1           ; Adjust count
4047+ 36A9 6F                   ld      L,A             ; Save bits to shift
4048+ 36AA AF           SHRLP:  xor     A               ; Flag for all done
4049+ 36AB 2D                   dec     L               ; All shifting done?
4050+ 36AC C8                   ret     Z               ; Yes - Return
4051+ 36AD 79                   ld      A,C             ; Get MSB
4052+ 36AE 1F           SHRT1:  rra                     ; Shift it right
4053+ 36AF 4F                   ld      C,A             ; Re-save
4054+ 36B0 7A                   ld      A,D             ; Get NMSB
4055+ 36B1 1F                   rra                     ; Shift right with last bit
4056+ 36B2 57                   ld      D,A             ; Re-save it
4057+ 36B3 7B                   ld      A,E             ; Get LSB
4058+ 36B4 1F                   rra                     ; Shift right with last bit
4059+ 36B5 5F                   ld      E,A             ; Re-save it
4060+ 36B6 78                   ld      A,B             ; Get underflow
4061+ 36B7 1F                   rra                     ; Shift right with last bit
4062+ 36B8 47                   ld      B,A             ; Re-save underflow
4063+ 36B9 C3 AA 36             jp      SHRLP           ; More bits to do
4064+ 36BC
4065+ 36BC 00 00 00 81  UNITY:  defb    $00,$00,$00,$81 ; 1.00000
4066+ 36C0
4067+ 36C0 03           LOGTAB: defb    $03             ; Table used by LOG
4068+ 36C1 AA 56 19 80          defb    $AA,$56,$19,$80 ; 0.59898
4069+ 36C5 F1 22 76 80          defb    $F1,$22,$76,$80 ; 0.96147
4070+ 36C9 45 AA 38 82          defb    $45,$AA,$38,$82 ; 2.88539
4071+ 36CD
4072+ 36CD CD 6A 38     LOG:    call    TSTSGN          ; Test sign of value
4073+ 36D0 B7                   or      A
4074+ 36D1 EA 97 26             jp      PE,FCERR        ; ?FC Error if <= zero
4075+ 36D4 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4076+ 36D7 7E                   ld      A,(HL)          ; Get exponent
4077+ 36D8 01 35 80             ld      BC,$8035        ; BCDE = SQR(1/2)
4078+ 36DB 11 F3 04             ld      DE,$04F3
4079+ 36DE 90                   sub     B               ; Scale value to be < 1
4080+ 36DF F5                   push    AF              ; Save scale factor
4081+ 36E0 70                   ld      (HL),B          ; Save new exponent
4082+ 36E1 D5                   push    DE              ; Save SQR(1/2)
4083+ 36E2 C5                   push    BC
4084+ 36E3 CD D3 35             call    FPADD           ; Add SQR(1/2) to value
4085+ 36E6 C1                   pop     BC              ; Restore SQR(1/2)
4086+ 36E7 D1                   pop     DE
4087+ 36E8 04                   inc     B               ; Make it SQR(2)
4088+ 36E9 CD C0 37             call    DVBCDE          ; Divide by SQR(2)
4089+ 36EC 21 BC 36             ld      HL,UNITY        ; Point to 1.
4090+ 36EF CD CA 35             call    SUBPHL          ; Subtract FPREG from 1
4091+ 36F2 21 C0 36             ld      HL,LOGTAB       ; Coefficient table
4092+ 36F5 CD B2 3B             call    SUMSER          ; Evaluate sum of series
4093+ 36F8 01 80 80             ld      BC,$8080        ; BCDE = -0.5
4094+ 36FB 11 00 00             ld      DE,$0000
4095+ 36FE CD D3 35             call    FPADD           ; Subtract 0.5 from FPREG
4096+ 3701 F1                   pop     AF              ; Restore scale factor
4097+ 3702 CD E5 39             call    RSCALE          ; Re-scale number
4098+ 3705 01 31 80     MULLN2: ld      BC,$8031        ; BCDE = Ln(2)
4099+ 3708 11 18 72             ld      DE,$7218
4100+ 370B 21                   defb    $21             ; Skip "pop BC" and "pop DE"
4101+ 370C
4102+ 370C C1           MULT:   pop     BC              ; Get number from stack
4103+ 370D D1                   pop     DE
4104+ 370E CD 6A 38     FPMULT: call    TSTSGN          ; Test sign of FPREG
4105+ 3711 C8                   ret     Z               ; Return zero if zero
4106+ 3712 2E 00                ld      L,$00           ; Flag add exponents
4107+ 3714 CD 28 38             call    ADDEXP          ; Add exponents
4108+ 3717 79                   ld      A,C             ; Get MSB of multiplier
4109+ 3718 32 6B 82             ld      (MULVAL),A      ; Save MSB of multiplier
4110+ 371B EB                   ex      DE,HL
4111+ 371C 22 6C 82             ld      (MULVAL+1),HL   ; Save rest of multiplier
4112+ 371F 01 00 00             ld      BC,$0000        ; Partial product (BCDE) = zero
4113+ 3722 50                   ld      D,B
4114+ 3723 58                   ld      E,B
4115+ 3724 21 24 36             ld      HL,BNORM        ; Address of normalise
4116+ 3727 E5                   push    HL              ; Save for return
4117+ 3728 21 30 37             ld      HL,MULT8        ; Address of 8 bit multiply
4118+ 372B E5                   push    HL              ; Save for NMSB,MSB
4119+ 372C E5                   push    HL              ;
4120+ 372D 21 59 82             ld      HL,FPREG        ; Point to number
4121+ 3730 7E           MULT8:  ld      A,(HL)          ; Get LSB of number
4122+ 3731 23                   inc     HL              ; Point to NMSB
4123+ 3732 B7                   or      A               ; Test LSB
4124+ 3733 CA 5C 37             jp      Z,BYTSFT        ; Zero - shift to next byte
4125+ 3736 E5                   push    HL              ; Save address of number
4126+ 3737 2E 08                ld      L,$08           ; 8 bits to multiply by
4127+ 3739 1F           MUL8LP: rra                     ; Shift LSB right
4128+ 373A 67                   ld      H,A             ; Save LSB
4129+ 373B 79                   ld      A,C             ; Get MSB
4130+ 373C D2 4A 37             jp      NC,NOMADD       ; Bit was zero - Don't add
4131+ 373F E5                   push    HL              ; Save LSB and count
4132+ 3740 2A 6C 82             ld      HL,(MULVAL+1)   ; Get LSB and NMSB
4133+ 3743 19                   add     HL,DE           ; Add NMSB and LSB
4134+ 3744 EB                   ex      DE,HL           ; Leave sum in DE
4135+ 3745 E1                   pop     HL              ; Restore MSB and count
4136+ 3746 3A 6B 82             ld      A,(MULVAL)      ; Get MSB of multiplier
4137+ 3749 89                   adc     A,C             ; Add MSB
4138+ 374A 1F           NOMADD: rra                     ; Shift MSB right
4139+ 374B 4F                   ld      C,A             ; Re-save MSB
4140+ 374C 7A                   ld      A,D             ; Get NMSB
4141+ 374D 1F                   rra                     ; Shift NMSB right
4142+ 374E 57                   ld      D,A             ; Re-save NMSB
4143+ 374F 7B                   ld      A,E             ; Get LSB
4144+ 3750 1F                   rra                     ; Shift LSB right
4145+ 3751 5F                   ld      E,A             ; Re-save LSB
4146+ 3752 78                   ld      A,B             ; Get VLSB
4147+ 3753 1F                   rra                     ; Shift VLSB right
4148+ 3754 47                   ld      B,A             ; Re-save VLSB
4149+ 3755 2D                   dec     L               ; Count bits multiplied
4150+ 3756 7C                   ld      A,H             ; Get LSB of multiplier
4151+ 3757 C2 39 37             jp      NZ,MUL8LP       ; More - Do it
4152+ 375A E1           POPHRT: pop     HL              ; Restore address of number
4153+ 375B C9                   ret
4154+ 375C
4155+ 375C 43           BYTSFT: ld      B,E             ; Shift partial product left
4156+ 375D 5A                   ld      E,D
4157+ 375E 51                   ld      D,C
4158+ 375F 4F                   ld      C,A
4159+ 3760 C9                   ret
4160+ 3761
4161+ 3761
4162+ 3761              ; WORKING ââ
4163+ 3761 C1           DINT:   pop     BC              ; Get number from stack
4164+ 3762 D1                   pop     DE
4165+ 3763 CD C0 37             call    DVBCDE          ; get BCDE/FPREG and store result into FPREG
4166+ 3766 C3 3D 39             jp      INT             ; return INT(FPREG)
4167+ 3769
4168+ 3769
4169+ 3769              ; A MODULO B - return remainder of the integer division A/B where:
4170+ 3769              ; A is in stack; B is in FPREG
4171+ 3769              ; math is:
4172+ 3769              ; A=INT(A); B=INT(B); R=A-(B*INT(A/B))
4173+ 3769 CD 3D 39     MOD:    call    INT             ; B=INT(B)
4174+ 376C CD B6 38             call    BCDEFP          ; copy B (from FPREG) into BCDE
4175+ 376F ED 53 09 82          ld      (TMPBFR3),DE    ; store B into...
4176+ 3773 ED 43 0B 82          ld      (TMPBFR4),BC    ; ...a temp buffer
4177+ 3777 C1                   pop     BC              ; recover A...
4178+ 3778 D1                   pop     DE              ; ...from stack
4179+ 3779 CD AB 38             call    FPBCDE          ; store A into FPREG
4180+ 377C CD 3D 39             call    INT             ; get integer part: A=INT(A)
4181+ 377F CD B6 38             call    BCDEFP          ; copy A (from FPREG) into BCDE
4182+ 3782 ED 53 05 82          ld      (TMPBFR1),DE    ; store A into...
4183+ 3786 ED 43 07 82          ld      (TMPBFR2),BC    ; ...a temp buffer
4184+ 378A                                              ; begin calculation
4185+ 378A 2A 09 82             ld      HL,(TMPBFR3)    ; move B...
4186+ 378D 22 59 82             ld      (FPREG),HL      ; ...from...
4187+ 3790 2A 0B 82             ld      HL,(TMPBFR4)    ; ...temp buffer...
4188+ 3793 22 5B 82             ld      (FPREG+2),HL    ; ...into FPREG
4189+ 3796 CD C0 37             call    DVBCDE          ; compute A/B and store into FPREG
4190+ 3799 CD 3D 39             call    INT             ; get integer part of result: now FPREG = INT(A/B)
4191+ 379C ED 5B 09 82          ld      DE,(TMPBFR3)    ; load B...
4192+ 37A0 ED 4B 0B 82          ld      BC,(TMPBFR4)    ; ...into BCDE
4193+ 37A4 CD 0E 37             call    FPMULT          ; get B*INT(A/B) and store into FPREG
4194+ 37A7 ED 5B 05 82          ld      DE,(TMPBFR1)    ; retrieve A from...
4195+ 37AB ED 4B 07 82          ld      BC,(TMPBFR2)    ; ...temp buffer
4196+ 37AF C3 D0 35             jp      SUBCDE          ; return result of A-(B*INT(A/B))
4197+ 37B2
4198+ 37B2
4199+ 37B2 CD 9B 38     DIV10:  call    STAKFP          ; Save FPREG on stack
4200+ 37B5 01 20 84             ld      BC,$8420        ; BCDE = 10.
4201+ 37B8 11 00 00             ld      DE,$0000
4202+ 37BB CD AB 38             call    FPBCDE          ; Move 10 to FPREG
4203+ 37BE
4204+ 37BE C1           DIV:    pop     BC              ; Get number from stack
4205+ 37BF D1                   pop     DE
4206+ 37C0 CD 6A 38     DVBCDE: call    TSTSGN          ; Test sign of FPREG
4207+ 37C3 CA 86 20             jp      Z,DZERR         ; Error if division by zero
4208+ 37C6 2E FF                ld      L,-1            ; Flag subtract exponents
4209+ 37C8 CD 28 38             call    ADDEXP          ; Subtract exponents
4210+ 37CB 34                   inc     (HL)            ; Add 2 to exponent to adjust
4211+ 37CC 34                   inc     (HL)
4212+ 37CD 2B                   dec     HL              ; Point to MSB
4213+ 37CE 7E                   ld      A,(HL)          ; Get MSB of dividend
4214+ 37CF 32 73 80             ld      (DIV3),A        ; Save for subtraction
4215+ 37D2 2B                   dec     HL
4216+ 37D3 7E                   ld      A,(HL)          ; Get NMSB of dividend
4217+ 37D4 32 6F 80             ld      (DIV2),A        ; Save for subtraction
4218+ 37D7 2B                   dec     HL
4219+ 37D8 7E                   ld      A,(HL)          ; Get MSB of dividend
4220+ 37D9 32 6B 80             ld      (DIV1),A        ; Save for subtraction
4221+ 37DC 41                   ld      B,C             ; Get MSB
4222+ 37DD EB                   ex      DE,HL           ; NMSB,LSB to HL
4223+ 37DE AF                   xor     A
4224+ 37DF 4F                   ld      C,A             ; Clear MSB of quotient
4225+ 37E0 57                   ld      D,A             ; Clear NMSB of quotient
4226+ 37E1 5F                   ld      E,A             ; Clear LSB of quotient
4227+ 37E2 32 76 80             ld      (DIV4),A        ; Clear overflow count
4228+ 37E5 E5           DIVLP:  push    HL              ; Save divisor
4229+ 37E6 C5                   push    BC
4230+ 37E7 7D                   ld      A,L             ; Get LSB of number
4231+ 37E8 CD 6A 80             call    DIVSUP          ; Subt' divisor from dividend
4232+ 37EB DE 00                sbc     A,$00           ; Count for overflows
4233+ 37ED 3F                   ccf
4234+ 37EE D2 F8 37             jp      NC,RESDIV       ; Restore divisor if borrow
4235+ 37F1 32 76 80             ld      (DIV4),A        ; Re-save overflow count
4236+ 37F4 F1                   pop     AF              ; Scrap divisor
4237+ 37F5 F1                   pop     AF
4238+ 37F6 37                   scf                     ; Set carry to
4239+ 37F7 D2                   defb    $D2             ; Skip "pop BC" and "pop HL"
4240+ 37F8
4241+ 37F8 C1           RESDIV: pop     BC              ; Restore divisor
4242+ 37F9 E1                   pop     HL
4243+ 37FA 79                   ld      A,C             ; Get MSB of quotient
4244+ 37FB 3C                   inc     A
4245+ 37FC 3D                   dec     A
4246+ 37FD 1F                   rra                     ; Bit 0 to bit 7
4247+ 37FE FA 5A 36             jp      M,RONDB         ; Done - Normalise result
4248+ 3801 17                   rla                     ; Restore carry
4249+ 3802 7B                   ld      A,E             ; Get LSB of quotient
4250+ 3803 17                   rla                     ; Double it
4251+ 3804 5F                   ld      E,A             ; Put it back
4252+ 3805 7A                   ld      A,D             ; Get NMSB of quotient
4253+ 3806 17                   rla                     ; Double it
4254+ 3807 57                   ld      D,A             ; Put it back
4255+ 3808 79                   ld      A,C             ; Get MSB of quotient
4256+ 3809 17                   rla                     ; Double it
4257+ 380A 4F                   ld      C,A             ; Put it back
4258+ 380B 29                   add     HL,HL           ; Double NMSB,LSB of divisor
4259+ 380C 78                   ld      A,B             ; Get MSB of divisor
4260+ 380D 17                   rla                     ; Double it
4261+ 380E 47                   ld      B,A             ; Put it back
4262+ 380F 3A 76 80             ld      A,(DIV4)        ; Get VLSB of quotient
4263+ 3812 17                   rla                     ; Double it
4264+ 3813 32 76 80             ld      (DIV4),A        ; Put it back
4265+ 3816 79                   ld      A,C             ; Get MSB of quotient
4266+ 3817 B2                   or      D               ; Merge NMSB
4267+ 3818 B3                   or      E               ; Merge LSB
4268+ 3819 C2 E5 37             jp      NZ,DIVLP        ; Not done - Keep dividing
4269+ 381C E5                   push    HL              ; Save divisor
4270+ 381D 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4271+ 3820 35                   dec     (HL)            ; Divide by 2
4272+ 3821 E1                   pop     HL              ; Restore divisor
4273+ 3822 C2 E5 37             jp      NZ,DIVLP        ; Ok - Keep going
4274+ 3825 C3 92 20             jp      OVERR           ; Overflow error
4275+ 3828
4276+ 3828
4277+ 3828 78           ADDEXP: ld      A,B             ; Get exponent of dividend
4278+ 3829 B7                   or      A               ; Test it
4279+ 382A CA 4C 38             jp      Z,OVTST3        ; Zero - Result zero
4280+ 382D 7D                   ld      A,L             ; Get add/subtract flag
4281+ 382E 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4282+ 3831 AE                   xor     (HL)            ; Add or subtract it
4283+ 3832 80                   add     A,B             ; Add the other exponent
4284+ 3833 47                   ld      B,A             ; Save new exponent
4285+ 3834 1F                   rra                     ; Test exponent for overflow
4286+ 3835 A8                   xor     B
4287+ 3836 78                   ld      A,B             ; Get exponent
4288+ 3837 F2 4B 38             jp      P,OVTST2        ; Positive - Test for overflow
4289+ 383A C6 80                add     A,$80           ; Add excess 128
4290+ 383C 77                   ld      (HL),A          ; Save new exponent
4291+ 383D CA 5A 37             jp      Z,POPHRT        ; Zero - Result zero
4292+ 3840 CD D0 38             call    SIGNS           ; Set MSBs and sign of result
4293+ 3843 77                   ld      (HL),A          ; Save new exponent
4294+ 3844 2B                   dec     HL              ; Point to MSB
4295+ 3845 C9                   ret
4296+ 3846
4297+ 3846 CD 6A 38     OVTST1: call    TSTSGN          ; Test sign of FPREG
4298+ 3849 2F                   cpl                     ; Invert sign
4299+ 384A E1                   pop     HL              ; Clean up stack
4300+ 384B B7           OVTST2: or      A               ; Test if new exponent zero
4301+ 384C E1           OVTST3: pop     HL              ; Clear off return address
4302+ 384D F2 39 36             jp      P,RESZER        ; Result zero
4303+ 3850 C3 92 20             jp      OVERR           ; Overflow error
4304+ 3853
4305+ 3853 CD B6 38     MLSP10: call    BCDEFP          ; Move FPREG to BCDE
4306+ 3856 78                   ld      A,B             ; Get exponent
4307+ 3857 B7                   or      A               ; Is it zero?
4308+ 3858 C8                   ret     Z               ; Yes - Result is zero
4309+ 3859 C6 02                add     A,$02           ; Multiply by 4
4310+ 385B DA 92 20             jp      C,OVERR         ; Overflow - ?OV Error
4311+ 385E 47                   ld      B,A             ; Re-save exponent
4312+ 385F CD D3 35             call    FPADD           ; Add BCDE to FPREG (Times 5)
4313+ 3862 21 5C 82             ld      HL,FPEXP        ; Point to exponent
4314+ 3865 34                   inc     (HL)            ; Double number (Times 10)
4315+ 3866 C0                   ret     NZ              ; Ok - Return
4316+ 3867 C3 92 20             jp      OVERR           ; Overflow error
4317+ 386A
4318+ 386A 3A 5C 82     TSTSGN: ld      A,(FPEXP)       ; Get sign of FPREG
4319+ 386D B7                   or      A
4320+ 386E C8                   ret     Z               ; RETurn if number is zero
4321+ 386F 3A 5B 82             ld      A,(FPREG+2)     ; Get MSB of FPREG
4322+ 3872 FE                   defb    0FEH            ; Test sign
4323+ 3873 2F           RETREL: cpl                     ; Invert sign
4324+ 3874 17                   rla                     ; Sign bit to carry
4325+ 3875 9F           FLGDIF: sbc     A,A             ; Carry to all bits of A
4326+ 3876 C0                   ret     NZ              ; Return -1 if negative
4327+ 3877 3C                   inc     A               ; Bump to +1
4328+ 3878 C9                   ret                     ; Positive - Return +1
4329+ 3879
4330+ 3879 CD 6A 38     SGN:    call    TSTSGN          ; Test sign of FPREG
4331+ 387C 06 88        FLGREL: ld      B,$80+8         ; 8 bit integer in exponent
4332+ 387E 11 00 00             ld      DE,0            ; Zero NMSB and LSB
4333+ 3881 21 5C 82     RETINT: ld      HL,FPEXP        ; Point to exponent
4334+ 3884 4F                   ld      C,A             ; CDE = MSB,NMSB and LSB
4335+ 3885 70                   ld      (HL),B          ; Save exponent
4336+ 3886 06 00                ld      B,0             ; CDE = integer to normalise
4337+ 3888 23                   inc     HL              ; Point to sign of result
4338+ 3889 36 80                ld      (HL),$80        ; Set sign of result
4339+ 388B 17                   rla                     ; Carry = sign of integer
4340+ 388C C3 21 36             jp      CONPOS          ; Set sign of result
4341+ 388F
4342+ 388F CD 6A 38     ABS_:   call    TSTSGN          ; Test sign of FPREG
4343+ 3892 F0                   ret     P               ; Return if positive
4344+ 3893 21 5B 82     INVSGN: ld      HL,FPREG+2      ; Point to MSB
4345+ 3896 7E                   ld      A,(HL)          ; Get sign of mantissa
4346+ 3897 EE 80                xor     $80             ; Invert sign of mantissa
4347+ 3899 77                   ld      (HL),A          ; Re-save sign of mantissa
4348+ 389A C9                   ret
4349+ 389B
4350+ 389B EB           STAKFP: ex      DE,HL           ; Save code string address
4351+ 389C 2A 59 82             ld      HL,(FPREG)      ; LSB,NLSB of FPREG
4352+ 389F E3                   ex      (SP),HL         ; Stack them,get return
4353+ 38A0 E5                   push    HL              ; Re-save return
4354+ 38A1 2A 5B 82             ld      HL,(FPREG+2)    ; MSB and exponent of FPREG
4355+ 38A4 E3                   ex      (SP),HL         ; Stack them,get return
4356+ 38A5 E5                   push    HL              ; Re-save return
4357+ 38A6 EB                   ex      DE,HL           ; Restore code string address
4358+ 38A7 C9                   ret
4359+ 38A8
4360+ 38A8              ; store F.P. number from BCDE into (FPREG)
4361+ 38A8 CD B9 38     PHLTFP: call    LOADFP          ; Number at HL to BCDE
4362+ 38AB EB           FPBCDE: ex      DE,HL           ; Save code string address
4363+ 38AC 22 59 82             ld      (FPREG),HL      ; Save LSB,NLSB of number
4364+ 38AF 60                   ld      H,B             ; Exponent of number
4365+ 38B0 69                   ld      L,C             ; MSB of number
4366+ 38B1 22 5B 82             ld      (FPREG+2),HL    ; Save MSB and exponent
4367+ 38B4 EB                   ex      DE,HL           ; Restore code string address
4368+ 38B5 C9                   ret
4369+ 38B6
4370+ 38B6              ; load F.P. number from (FPREG) into BCDE
4371+ 38B6 21 59 82     BCDEFP: ld      HL,FPREG        ; Point to FPREG
4372+ 38B9 5E           LOADFP: ld      E,(HL)          ; Get LSB of number
4373+ 38BA 23                   inc     HL
4374+ 38BB 56                   ld      D,(HL)          ; Get NMSB of number
4375+ 38BC 23                   inc     HL
4376+ 38BD 4E                   ld      C,(HL)          ; Get MSB of number
4377+ 38BE 23                   inc     HL
4378+ 38BF 46                   ld      B,(HL)          ; Get exponent of number
4379+ 38C0 23           INCHL:  inc     HL              ; Used for conditional "inc HL"
4380+ 38C1 C9                   ret
4381+ 38C2
4382+ 38C2              ; move floating point from (FPREG) into (HL)
4383+ 38C2 11 59 82     FPTHL:  ld      DE,FPREG        ; Point to FPREG
4384+ 38C5 06 04        DETHL4: ld      B,$04           ; 4 bytes to move
4385+ 38C7 1A           DETHLB: ld      A,(DE)          ; Get source
4386+ 38C8 77                   ld      (HL),A          ; Save destination
4387+ 38C9 13                   inc     DE              ; Next source
4388+ 38CA 23                   inc     HL              ; Next destination
4389+ 38CB 05                   dec     B               ; Count bytes
4390+ 38CC C2 C7 38             jp      NZ,DETHLB       ; Loop if more
4391+ 38CF C9                   ret
4392+ 38D0
4393+ 38D0 21 5B 82     SIGNS:  ld      HL,FPREG+2      ; Point to MSB of FPREG
4394+ 38D3 7E                   ld      A,(HL)          ; Get MSB
4395+ 38D4 07                   rlca                    ; Old sign to carry
4396+ 38D5 37                   scf                     ; Set MSBit
4397+ 38D6 1F                   rra                     ; Set MSBit of MSB
4398+ 38D7 77                   ld      (HL),A          ; Save new MSB
4399+ 38D8 3F                   ccf                     ; Complement sign
4400+ 38D9 1F                   rra                     ; Old sign to carry
4401+ 38DA 23                   inc     HL
4402+ 38DB 23                   inc     HL
4403+ 38DC 77                   ld      (HL),A          ; Set sign of result
4404+ 38DD 79                   ld      A,C             ; Get MSB
4405+ 38DE 07                   rlca                    ; Old sign to carry
4406+ 38DF 37                   scf                     ; Set MSBit
4407+ 38E0 1F                   rra                     ; Set MSBit of MSB
4408+ 38E1 4F                   ld      C,A             ; Save MSB
4409+ 38E2 1F                   rra
4410+ 38E3 AE                   xor     (HL)            ; New sign of result
4411+ 38E4 C9                   ret
4412+ 38E5
4413+ 38E5 78           CMPNUM: ld      A,B             ; Get exponent of number
4414+ 38E6 B7                   or      A
4415+ 38E7 CA 6A 38             jp      Z,TSTSGN        ; Zero - Test sign of FPREG
4416+ 38EA 21 73 38             ld      HL,RETREL       ; Return relation routine
4417+ 38ED E5                   push    HL              ; Save for return
4418+ 38EE CD 6A 38             call    TSTSGN          ; Test sign of FPREG
4419+ 38F1 79                   ld      A,C             ; Get MSB of number
4420+ 38F2 C8                   ret     Z               ; FPREG zero - Number's MSB
4421+ 38F3 21 5B 82             ld      HL,FPREG+2      ; MSB of FPREG
4422+ 38F6 AE                   xor     (HL)            ; Combine signs
4423+ 38F7 79                   ld      A,C             ; Get MSB of number
4424+ 38F8 F8                   ret     M               ; Exit if signs different
4425+ 38F9 CD FF 38             call    CMPFP           ; Compare FP numbers
4426+ 38FC 1F                   rra                     ; Get carry to sign
4427+ 38FD A9                   xor     C               ; Combine with MSB of number
4428+ 38FE C9                   ret
4429+ 38FF
4430+ 38FF 23           CMPFP:  inc     HL              ; Point to exponent
4431+ 3900 78                   ld      A,B             ; Get exponent
4432+ 3901 BE                   cp      (HL)            ; Compare exponents
4433+ 3902 C0                   ret     NZ              ; Different
4434+ 3903 2B                   dec     HL              ; Point to MBS
4435+ 3904 79                   ld      A,C             ; Get MSB
4436+ 3905 BE                   cp      (HL)            ; Compare MSBs
4437+ 3906 C0                   ret     NZ              ; Different
4438+ 3907 2B                   dec     HL              ; Point to NMSB
4439+ 3908 7A                   ld      A,D             ; Get NMSB
4440+ 3909 BE                   cp      (HL)            ; Compare NMSBs
4441+ 390A C0                   ret     NZ              ; Different
4442+ 390B 2B                   dec     HL              ; Point to LSB
4443+ 390C 7B                   ld      A,E             ; Get LSB
4444+ 390D 96                   sub     (HL)            ; Compare LSBs
4445+ 390E C0                   ret     NZ              ; Different
4446+ 390F E1                   pop     HL              ; Drop RETurn
4447+ 3910 E1                   pop     HL              ; Drop another RETurn
4448+ 3911 C9                   ret
4449+ 3912
4450+ 3912 47           FPINT:  ld      B,A             ; <- Move
4451+ 3913 4F                   ld      C,A             ; <- exponent
4452+ 3914 57                   ld      D,A             ; <- to all
4453+ 3915 5F                   ld      E,A             ; <- bits
4454+ 3916 B7                   or      A               ; Test exponent
4455+ 3917 C8                   ret     Z               ; Zero - Return zero
4456+ 3918 E5                   push    HL              ; Save pointer to number
4457+ 3919 CD B6 38             call    BCDEFP          ; Move FPREG to BCDE
4458+ 391C CD D0 38             call    SIGNS           ; Set MSBs & sign of result
4459+ 391F AE                   xor     (HL)            ; Combine with sign of FPREG
4460+ 3920 67                   ld      H,A             ; Save combined signs
4461+ 3921 FC 36 39             call    M,DCBCDE        ; Negative - Decrement BCDE
4462+ 3924 3E 98                ld      A,$80+24        ; 24 bits
4463+ 3926 90                   sub     B               ; Bits to shift
4464+ 3927 CD 98 36             call    SCALE           ; Shift BCDE
4465+ 392A 7C                   ld      A,H             ; Get combined sign
4466+ 392B 17                   rla                     ; Sign to carry
4467+ 392C DC 6B 36             call    C,FPROND        ; Negative - Round number up
4468+ 392F 06 00                ld      B,$00           ; Zero exponent
4469+ 3931 DC 84 36             call    C,COMPL         ; If negative make positive
4470+ 3934 E1                   pop     HL              ; Restore pointer to number
4471+ 3935 C9                   ret
4472+ 3936
4473+ 3936 1B           DCBCDE: dec     DE              ; Decrement BCDE
4474+ 3937 7A                   ld      A,D             ; Test LSBs
4475+ 3938 A3                   and     E
4476+ 3939 3C                   inc     A
4477+ 393A C0                   ret     NZ              ; Exit if LSBs not FFFF
4478+ 393B 0B                   dec     BC              ; Decrement MSBs
4479+ 393C C9                   ret
4480+ 393D
4481+ 393D 21 5C 82     INT:    ld      HL,FPEXP        ; Point to exponent
4482+ 3940 7E                   ld      A,(HL)          ; Get exponent
4483+ 3941 FE 98                cp      $80+24          ; Integer accuracy only?
4484+ 3943 3A 59 82             ld      A,(FPREG)       ; Get LSB
4485+ 3946 D0                   ret     NC              ; Yes - Already integer
4486+ 3947 7E                   ld      A,(HL)          ; Get exponent
4487+ 3948 CD 12 39             call    FPINT           ; F.P to integer
4488+ 394B 36 98                ld      (HL),$80+24     ; Save 24 bit integer
4489+ 394D 7B                   ld      A,E             ; Get LSB of number
4490+ 394E F5                   push    AF              ; Save LSB
4491+ 394F 79                   ld      A,C             ; Get MSB of number
4492+ 3950 17                   rla                     ; Sign to carry
4493+ 3951 CD 21 36             call    CONPOS          ; Set sign of result
4494+ 3954 F1                   pop     AF              ; Restore LSB of number
4495+ 3955 C9                   ret
4496+ 3956
4497+ 3956 21 00 00     MLDEBC: ld      HL,$0000        ; Clear partial product
4498+ 3959 78                   ld      A,B             ; Test multiplier
4499+ 395A B1                   or      C
4500+ 395B C8                   ret     Z               ; Return zero if zero
4501+ 395C 3E 10                ld      A,$10           ; 16 bits
4502+ 395E 29           MLDBLP: add     HL,HL           ; Shift P.P left
4503+ 395F DA 84 2D             jp      C,BSERR         ; ?BS Error if overflow
4504+ 3962 EB                   ex      DE,HL
4505+ 3963 29                   add     HL,HL           ; Shift multiplier left
4506+ 3964 EB                   ex      DE,HL
4507+ 3965 D2 6C 39             jp      NC,NOMLAD       ; Bit was zero - No add
4508+ 3968 09                   add     HL,BC           ; Add multiplicand
4509+ 3969 DA 84 2D             jp      C,BSERR         ; ?BS Error if overflow
4510+ 396C 3D           NOMLAD: dec     A               ; Count bits
4511+ 396D C2 5E 39             jp      NZ,MLDBLP       ; More
4512+ 3970 C9                   ret
4513+ 3971
4514+ 3971 FE 2D        ASCTFP: cp      '-'             ; Negative?
4515+ 3973 F5                   push    AF              ; Save it and flags
4516+ 3974 CA 7D 39             jp      Z,CNVNUM        ; Yes - Convert number
4517+ 3977 FE 2B                cp      '+'             ; Positive?
4518+ 3979 CA 7D 39             jp      Z,CNVNUM        ; Yes - Convert number
4519+ 397C 2B                   dec     HL              ; dec 'cos GETCHR INCs
4520+ 397D CD 39 36     CNVNUM: call    RESZER          ; Set result to zero
4521+ 3980 47                   ld      B,A             ; Digits after point counter
4522+ 3981 57                   ld      D,A             ; Sign of exponent
4523+ 3982 5F                   ld      E,A             ; Exponent of ten
4524+ 3983 2F                   cpl
4525+ 3984 4F                   ld      C,A             ; Before or after point flag
4526+ 3985 CD CC 25     MANLP:  call    GETCHR          ; Get next character
4527+ 3988 DA CE 39             jp      C,ADDIG         ; Digit - Add to number
4528+ 398B FE 2E                cp      '.'
4529+ 398D CA A9 39             jp      Z,DPOINT        ; '.' - Flag point
4530+ 3990 FE 45                cp      'E'
4531+ 3992 C2 AD 39             jp      NZ,CONEXP       ; Not 'E' - Scale number
4532+ 3995 CD CC 25             call    GETCHR          ; Get next character
4533+ 3998 CD A0 2B             call    SGNEXP          ; Get sign of exponent
4534+ 399B CD CC 25     EXPLP:  call    GETCHR          ; Get next character
4535+ 399E DA F0 39             jp      C,EDIGIT        ; Digit - Add to exponent
4536+ 39A1 14                   inc     D               ; Is sign negative?
4537+ 39A2 C2 AD 39             jp      NZ,CONEXP       ; No - Scale number
4538+ 39A5 AF                   xor     A
4539+ 39A6 93                   sub     E               ; Negate exponent
4540+ 39A7 5F                   ld      E,A             ; And re-save it
4541+ 39A8 0C                   inc     C               ; Flag end of number
4542+ 39A9 0C           DPOINT: inc     C               ; Flag point passed
4543+ 39AA CA 85 39             jp      Z,MANLP         ; Zero - Get another digit
4544+ 39AD E5           CONEXP: push    HL              ; Save code string address
4545+ 39AE 7B                   ld      A,E             ; Get exponent
4546+ 39AF 90                   sub     B               ; Subtract digits after point
4547+ 39B0 F4 C6 39     SCALMI: call    P,SCALPL        ; Positive - Multiply number
4548+ 39B3 F2 BC 39             jp      P,ENDCON        ; Positive - All done
4549+ 39B6 F5                   push    AF              ; Save number of times to /10
4550+ 39B7 CD B2 37             call    DIV10           ; Divide by 10
4551+ 39BA F1                   pop     AF              ; Restore count
4552+ 39BB 3C                   inc     A               ; Count divides
4553+ 39BC
4554+ 39BC C2 B0 39     ENDCON: jp      NZ,SCALMI       ; More to do
4555+ 39BF D1                   pop     DE              ; Restore code string address
4556+ 39C0 F1                   pop     AF              ; Restore sign of number
4557+ 39C1 CC 93 38             call    Z,INVSGN        ; Negative - Negate number
4558+ 39C4 EB                   ex      DE,HL           ; Code string address to HL
4559+ 39C5 C9                   ret
4560+ 39C6
4561+ 39C6 C8           SCALPL: ret     Z               ; Exit if no scaling needed
4562+ 39C7 F5           MULTEN: push    AF              ; Save count
4563+ 39C8 CD 53 38             call    MLSP10          ; Multiply number by 10
4564+ 39CB F1                   pop     AF              ; Restore count
4565+ 39CC 3D                   dec     A               ; Count multiplies
4566+ 39CD C9                   ret
4567+ 39CE
4568+ 39CE D5           ADDIG:  push    DE              ; Save sign of exponent
4569+ 39CF 57                   ld      D,A             ; Save digit
4570+ 39D0 78                   ld      A,B             ; Get digits after point
4571+ 39D1 89                   adc     A,C             ; Add one if after point
4572+ 39D2 47                   ld      B,A             ; Re-save counter
4573+ 39D3 C5                   push    BC              ; Save point flags
4574+ 39D4 E5                   push    HL              ; Save code string address
4575+ 39D5 D5                   push    DE              ; Save digit
4576+ 39D6 CD 53 38             call    MLSP10          ; Multiply number by 10
4577+ 39D9 F1                   pop     AF              ; Restore digit
4578+ 39DA D6 30                sub     '0'             ; Make it absolute
4579+ 39DC CD E5 39             call    RSCALE          ; Re-scale number
4580+ 39DF E1                   pop     HL              ; Restore code string address
4581+ 39E0 C1                   pop     BC              ; Restore point flags
4582+ 39E1 D1                   pop     DE              ; Restore sign of exponent
4583+ 39E2 C3 85 39             jp      MANLP           ; Get another digit
4584+ 39E5
4585+ 39E5 CD 9B 38     RSCALE: call    STAKFP          ; Put number on stack
4586+ 39E8 CD 7C 38             call    FLGREL          ; Digit to add to FPREG
4587+ 39EB C1           PADD:   pop     BC              ; Restore number
4588+ 39EC D1                   pop     DE
4589+ 39ED C3 D3 35             jp      FPADD           ; Add BCDE to FPREG and return
4590+ 39F0
4591+ 39F0 7B           EDIGIT: ld      A,E             ; Get digit
4592+ 39F1 07                   rlca                    ; Times 2
4593+ 39F2 07                   rlca                    ; Times 4
4594+ 39F3 83                   add     A,E             ; Times 5
4595+ 39F4 07                   rlca                    ; Times 10
4596+ 39F5 86                   add     A,(HL)          ; Add next digit
4597+ 39F6 D6 30                sub     '0'             ; Make it absolute
4598+ 39F8 5F                   ld      E,A             ; Save new digit
4599+ 39F9 C3 9B 39             jp      EXPLP           ; Look for another digit
4600+ 39FC
4601+ 39FC E5           LINEIN: push    HL              ; Save code string address
4602+ 39FD 21 FC 1F             ld      HL,INMSG        ; Output " in "
4603+ 3A00 CD 65 2F             call    PRS             ; Output string at HL
4604+ 3A03 E1                   pop     HL              ; Restore code string address
4605+ 3A04 EB           PRNTHL: ex      DE,HL           ; Code string address to DE
4606+ 3A05 AF                   xor     A
4607+ 3A06 06 98                ld      B,$80+24        ; 24 bits
4608+ 3A08 CD 81 38             call    RETINT          ; Return the integer
4609+ 3A0B 21 64 2F             ld      HL,PRNUMS       ; Print number string
4610+ 3A0E E5                   push    HL              ; Save for return
4611+ 3A0F              ; conmvert FP number into ASCII chars
4612+ 3A0F 21 5E 82     NUMASC: ld      HL,PBUFF        ; Convert number to ASCII
4613+ 3A12 E5                   push    HL              ; Save for return
4614+ 3A13 CD 6A 38             call    TSTSGN          ; Test sign of FPREG
4615+ 3A16 36 20                ld      (HL),SPC        ; Space at start
4616+ 3A18 F2 1D 3A             jp      P,SPCFST        ; Positive - Space to start
4617+ 3A1B 36 2D                ld      (HL),'-'        ; '-' sign at start
4618+ 3A1D 23           SPCFST: inc     HL              ; First byte of number
4619+ 3A1E 36 30                ld      (HL),'0'        ; '0' if zero
4620+ 3A20 CA D3 3A             jp      Z,JSTZER        ; Return '0' if zero
4621+ 3A23 E5                   push    HL              ; Save buffer address
4622+ 3A24 FC 93 38             call    M,INVSGN        ; Negate FPREG if negative
4623+ 3A27 AF                   xor     A               ; Zero A
4624+ 3A28 F5                   push    AF              ; Save it
4625+ 3A29 CD D9 3A             call    RNGTST          ; Test number is in range
4626+ 3A2C 01 43 91     SIXDIG: ld      BC,$9143        ; BCDE - 99999.9
4627+ 3A2F 11 F8 4F             ld      DE,$4FF8
4628+ 3A32 CD E5 38             call    CMPNUM          ; Compare numbers
4629+ 3A35 B7                   or      A
4630+ 3A36 E2 4A 3A             jp      PO,INRNG        ; > 99999.9 - Sort it out
4631+ 3A39 F1                   pop     AF              ; Restore count
4632+ 3A3A CD C7 39             call    MULTEN          ; Multiply by ten
4633+ 3A3D F5                   push    AF              ; Re-save count
4634+ 3A3E C3 2C 3A             jp      SIXDIG          ; Test it again
4635+ 3A41
4636+ 3A41 CD B2 37     GTSIXD: call    DIV10           ; Divide by 10
4637+ 3A44 F1                   pop     AF              ; Get count
4638+ 3A45 3C                   inc     A               ; Count divides
4639+ 3A46 F5                   push    AF              ; Re-save count
4640+ 3A47 CD D9 3A             call    RNGTST          ; Test number is in range
4641+ 3A4A CD C1 35     INRNG:  call    ROUND           ; Add 0.5 to FPREG
4642+ 3A4D 3C                   inc     A
4643+ 3A4E CD 12 39             call    FPINT           ; F.P to integer
4644+ 3A51 CD AB 38             call    FPBCDE          ; Move BCDE to FPREG
4645+ 3A54 01 06 03             ld      BC,$0306        ; 1E+06 to 1E-03 range
4646+ 3A57 F1                   pop     AF              ; Restore count
4647+ 3A58 81                   add     A,C             ; 6 digits before point
4648+ 3A59 3C                   inc     A               ; Add one
4649+ 3A5A FA 66 3A             jp      M,MAKNUM        ; Do it in 'E' form if < 1E-02
4650+ 3A5D FE 08                cp      6+1+1           ; More than 999999 ?
4651+ 3A5F D2 66 3A             jp      NC,MAKNUM       ; Yes - Do it in 'E' form
4652+ 3A62 3C                   inc     A               ; Adjust for exponent
4653+ 3A63 47                   ld      B,A             ; Exponent of number
4654+ 3A64 3E 02                ld      A,2             ; Make it zero after
4655+ 3A66
4656+ 3A66 3D           MAKNUM: dec     A               ; Adjust for digits to do
4657+ 3A67 3D                   dec     A
4658+ 3A68 E1                   pop     HL              ; Restore buffer address
4659+ 3A69 F5                   push    AF              ; Save count
4660+ 3A6A 11 EC 3A             ld      DE,POWERS       ; Powers of ten
4661+ 3A6D 05                   dec     B               ; Count digits before point
4662+ 3A6E C2 77 3A             jp      NZ,DIGTXT       ; Not zero - Do number
4663+ 3A71 36 2E                ld      (HL),'.'        ; Save point
4664+ 3A73 23                   inc     HL              ; Move on
4665+ 3A74 36 30                ld      (HL),'0'        ; Save zero
4666+ 3A76 23                   inc     HL              ; Move on
4667+ 3A77 05           DIGTXT: dec     B               ; Count digits before point
4668+ 3A78 36 2E                ld      (HL),'.'        ; Save point in case
4669+ 3A7A CC C0 38             call    Z,INCHL         ; Last digit - move on
4670+ 3A7D C5                   push    BC              ; Save digits before point
4671+ 3A7E E5                   push    HL              ; Save buffer address
4672+ 3A7F D5                   push    DE              ; Save powers of ten
4673+ 3A80 CD B6 38             call    BCDEFP          ; Move FPREG to BCDE
4674+ 3A83 E1                   pop     HL              ; Powers of ten table
4675+ 3A84 06 2F                ld      B,'0'-1         ; ASCII '0' - 1
4676+ 3A86 04           TRYAGN: inc     B               ; Count subtractions
4677+ 3A87 7B                   ld      A,E             ; Get LSB
4678+ 3A88 96                   sub     (HL)            ; Subtract LSB
4679+ 3A89 5F                   ld      E,A             ; Save LSB
4680+ 3A8A 23                   inc     HL
4681+ 3A8B 7A                   ld      A,D             ; Get NMSB
4682+ 3A8C 9E                   sbc     A,(HL)          ; Subtract NMSB
4683+ 3A8D 57                   ld      D,A             ; Save NMSB
4684+ 3A8E 23                   inc     HL
4685+ 3A8F 79                   ld      A,C             ; Get MSB
4686+ 3A90 9E                   sbc     A,(HL)          ; Subtract MSB
4687+ 3A91 4F                   ld      C,A             ; Save MSB
4688+ 3A92 2B                   dec     HL              ; Point back to start
4689+ 3A93 2B                   dec     HL
4690+ 3A94 D2 86 3A             jp      NC,TRYAGN       ; No overflow - Try again
4691+ 3A97 CD 78 36             call    PLUCDE          ; Restore number
4692+ 3A9A 23                   inc     HL              ; Start of next number
4693+ 3A9B CD AB 38             call    FPBCDE          ; Move BCDE to FPREG
4694+ 3A9E EB                   ex      DE,HL           ; Save point in table
4695+ 3A9F E1                   pop     HL              ; Restore buffer address
4696+ 3AA0 70                   ld      (HL),B          ; Save digit in buffer
4697+ 3AA1 23                   inc     HL              ; And move on
4698+ 3AA2 C1                   pop     BC              ; Restore digit count
4699+ 3AA3 0D                   dec     C               ; Count digits
4700+ 3AA4 C2 77 3A             jp      NZ,DIGTXT       ; More - Do them
4701+ 3AA7 05                   dec     B               ; Any decimal part?
4702+ 3AA8 CA B7 3A             jp      Z,DOEBIT        ; No - Do 'E' bit
4703+ 3AAB 2B           SUPTLZ: dec     HL              ; Move back through buffer
4704+ 3AAC 7E                   ld      A,(HL)          ; Get character
4705+ 3AAD FE 30                cp      '0'             ; '0' character?
4706+ 3AAF CA AB 3A             jp      Z,SUPTLZ        ; Yes - Look back for more
4707+ 3AB2 FE 2E                cp      '.'             ; A decimal point?
4708+ 3AB4 C4 C0 38             call    NZ,INCHL        ; Move back over digit
4709+ 3AB7
4710+ 3AB7 F1           DOEBIT: pop     AF              ; Get 'E' flag
4711+ 3AB8 CA D6 3A             jp      Z,NOENED        ; No 'E' needed - End buffer
4712+ 3ABB 36 45                ld      (HL),'E'        ; Put 'E' in buffer
4713+ 3ABD 23                   inc     HL              ; And move on
4714+ 3ABE 36 2B                ld      (HL),'+'        ; Put '+' in buffer
4715+ 3AC0 F2 C7 3A             jp      P,OUTEXP        ; Positive - Output exponent
4716+ 3AC3 36 2D                ld      (HL),'-'        ; Put '-' in buffer
4717+ 3AC5 2F                   cpl                     ; Negate exponent
4718+ 3AC6 3C                   inc     A
4719+ 3AC7 06 2F        OUTEXP: ld      B,'0'-1         ; ASCII '0' - 1
4720+ 3AC9 04           EXPTEN: inc     B               ; Count subtractions
4721+ 3ACA D6 0A                sub     $0A             ; Tens digit
4722+ 3ACC D2 C9 3A             jp      NC,EXPTEN       ; More to do
4723+ 3ACF C6 3A                add     A,'0'+10        ; Restore and make ASCII
4724+ 3AD1 23                   inc     HL              ; Move on
4725+ 3AD2 70                   ld      (HL),B          ; Save MSB of exponent
4726+ 3AD3 23           JSTZER: inc     HL              ;
4727+ 3AD4 77                   ld      (HL),A          ; Save LSB of exponent
4728+ 3AD5 23                   inc     HL
4729+ 3AD6 71           NOENED: ld      (HL),C          ; Mark end of buffer
4730+ 3AD7 E1                   pop     HL              ; Restore code string address
4731+ 3AD8 C9                   ret
4732+ 3AD9
4733+ 3AD9 01 74 94     RNGTST: ld      BC,$9474        ; BCDE = 999999.
4734+ 3ADC 11 F7 23             ld      DE,$23F7
4735+ 3ADF CD E5 38             call    CMPNUM          ; Compare numbers
4736+ 3AE2 B7                   or      A
4737+ 3AE3 E1                   pop     HL              ; Return address to HL
4738+ 3AE4 E2 41 3A             jp      PO,GTSIXD       ; Too big - Divide by ten
4739+ 3AE7 E9                   jp      (HL)            ; Otherwise return to caller
4740+ 3AE8
4741+ 3AE8 00 00 00 80  HALF:   defb    $00,$00,$00,$80 ; 0.5
4742+ 3AEC
4743+ 3AEC A0 86 01     POWERS: defb    $A0,$86,$01  ; 100000
4744+ 3AEF 10 27 00             defb    $10,$27,$00  ;  10000
4745+ 3AF2 E8 03 00             defb    $E8,$03,$00  ;   1000
4746+ 3AF5 64 00 00             defb    $64,$00,$00  ;    100
4747+ 3AF8 0A 00 00             defb    $0A,$00,$00  ;     10
4748+ 3AFB 01 00 00             defb    $01,$00,$00  ;      1
4749+ 3AFE
4750+ 3AFE 21 93 38     NEGAFT: ld      HL,INVSGN       ; Negate result
4751+ 3B01 E3                   ex      (SP),HL         ; To be done after caller
4752+ 3B02 E9                   jp      (HL)            ; Return to caller
4753+ 3B03
4754+ 3B03 CD 9B 38     SQR:    call    STAKFP          ; Put value on stack
4755+ 3B06 21 E8 3A             ld      HL,HALF         ; Set power to 1/2
4756+ 3B09 CD A8 38             call    PHLTFP          ; Move 1/2 to FPREG
4757+ 3B0C
4758+ 3B0C C1           POWER:  pop     BC              ; Get base
4759+ 3B0D D1                   pop     DE
4760+ 3B0E CD 6A 38             call    TSTSGN          ; Test sign of power
4761+ 3B11 78                   ld      A,B             ; Get exponent of base
4762+ 3B12 CA 51 3B             jp      Z,EXP           ; Make result 1 if zero
4763+ 3B15 F2 1C 3B             jp      P,POWER1        ; Positive base - Ok
4764+ 3B18 B7                   or      A               ; Zero to negative power?
4765+ 3B19 CA 86 20             jp      Z,DZERR         ; Yes - ?/0 Error
4766+ 3B1C B7           POWER1: or      A               ; Base zero?
4767+ 3B1D CA 3A 36             jp      Z,SAVEXP        ; Yes - Return zero
4768+ 3B20 D5                   push    DE              ; Save base
4769+ 3B21 C5                   push    BC
4770+ 3B22 79                   ld      A,C             ; Get MSB of base
4771+ 3B23 F6 7F                or      %01111111       ; Get sign status
4772+ 3B25 CD B6 38             call    BCDEFP          ; Move power to BCDE
4773+ 3B28 F2 39 3B             jp      P,POWER2        ; Positive base - Ok
4774+ 3B2B D5                   push    DE              ; Save power
4775+ 3B2C C5                   push    BC
4776+ 3B2D CD 3D 39             call    INT             ; Get integer of power
4777+ 3B30 C1                   pop     BC              ; Restore power
4778+ 3B31 D1                   pop     DE
4779+ 3B32 F5                   push    AF              ; MSB of base
4780+ 3B33 CD E5 38             call    CMPNUM          ; Power an integer?
4781+ 3B36 E1                   pop     HL              ; Restore MSB of base
4782+ 3B37 7C                   ld      A,H             ; but don't affect flags
4783+ 3B38 1F                   rra                     ; Exponent odd or even?
4784+ 3B39 E1           POWER2: pop     HL              ; Restore MSB and exponent
4785+ 3B3A 22 5B 82             ld      (FPREG+2),HL    ; Save base in FPREG
4786+ 3B3D E1                   pop     HL              ; LSBs of base
4787+ 3B3E 22 59 82             ld      (FPREG),HL      ; Save in FPREG
4788+ 3B41 DC FE 3A             call    C,NEGAFT        ; Odd power - Negate result
4789+ 3B44 CC 93 38             call    Z,INVSGN        ; Negative base - Negate it
4790+ 3B47 D5                   push    DE              ; Save power
4791+ 3B48 C5                   push    BC
4792+ 3B49 CD CD 36             call    LOG             ; Get LOG of base
4793+ 3B4C C1                   pop     BC              ; Restore power
4794+ 3B4D D1                   pop     DE
4795+ 3B4E CD 0E 37             call    FPMULT          ; Multiply LOG by power
4796+ 3B51
4797+ 3B51 CD 9B 38     EXP:    call    STAKFP          ; Put value on stack
4798+ 3B54 01 38 81             ld      BC,$8138        ; BCDE = 1/Ln(2)
4799+ 3B57 11 3B AA             ld      DE,$AA3B
4800+ 3B5A CD 0E 37             call    FPMULT          ; Multiply value by 1/LN(2)
4801+ 3B5D 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4802+ 3B60 FE 88                cp      $80+8           ; Is it in range?
4803+ 3B62 D2 46 38             jp      NC,OVTST1       ; No - Test for overflow
4804+ 3B65 CD 3D 39             call    INT             ; Get INT of FPREG
4805+ 3B68 C6 80                add     A,$80           ; For excess 128
4806+ 3B6A C6 02                add     A,$02           ; Exponent > 126?
4807+ 3B6C DA 46 38             jp      C,OVTST1        ; Yes - Test for overflow
4808+ 3B6F F5                   push    AF              ; Save scaling factor
4809+ 3B70 21 BC 36             ld      HL,UNITY        ; Point to 1.
4810+ 3B73 CD C4 35             call    ADDPHL          ; Add 1 to FPREG
4811+ 3B76 CD 05 37             call    MULLN2          ; Multiply by LN(2)
4812+ 3B79 F1                   pop     AF              ; Restore scaling factor
4813+ 3B7A C1                   pop     BC              ; Restore exponent
4814+ 3B7B D1                   pop     DE
4815+ 3B7C F5                   push    AF              ; Save scaling factor
4816+ 3B7D CD D0 35             call    SUBCDE          ; Subtract exponent from FPREG
4817+ 3B80 CD 93 38             call    INVSGN          ; Negate result
4818+ 3B83 21 91 3B             ld      HL,EXPTAB       ; Coefficient table
4819+ 3B86 CD C1 3B             call    SMSER1          ; Sum the series
4820+ 3B89 11 00 00             ld      DE,$0000        ; Zero LSBs
4821+ 3B8C C1                   pop     BC              ; Scaling factor
4822+ 3B8D 4A                   ld      C,D             ; Zero MSB
4823+ 3B8E C3 0E 37             jp      FPMULT          ; Scale result to correct value
4824+ 3B91
4825+ 3B91 08           EXPTAB: defb    $08             ; Table used by EXP
4826+ 3B92 40 2E 94 74          defb    $40,$2E,$94,$74 ; -1/7! (-1/5040)
4827+ 3B96 70 4F 2E 77          defb    $70,$4F,$2E,$77 ;  1/6! ( 1/720)
4828+ 3B9A 6E 02 88 7A          defb    $6E,$02,$88,$7A ; -1/5! (-1/120)
4829+ 3B9E E6 A0 2A 7C          defb    $E6,$A0,$2A,$7C ;  1/4! ( 1/24)
4830+ 3BA2 50 AA AA 7E          defb    $50,$AA,$AA,$7E ; -1/3! (-1/6)
4831+ 3BA6 FF FF 7F 7F          defb    $FF,$FF,$7F,$7F ;  1/2! ( 1/2)
4832+ 3BAA 00 00 80 81          defb    $00,$00,$80,$81 ; -1/1! (-1/1)
4833+ 3BAE 00 00 00 81          defb    $00,$00,$00,$81 ;  1/0! ( 1/1)
4834+ 3BB2
4835+ 3BB2 CD 9B 38     SUMSER: call    STAKFP          ; Put FPREG on stack
4836+ 3BB5 11 0C 37             ld      DE,MULT         ; Multiply by "X"
4837+ 3BB8 D5                   push    DE              ; To be done after
4838+ 3BB9 E5                   push    HL              ; Save address of table
4839+ 3BBA CD B6 38             call    BCDEFP          ; Move FPREG to BCDE
4840+ 3BBD CD 0E 37             call    FPMULT          ; Square the value
4841+ 3BC0 E1                   pop     HL              ; Restore address of table
4842+ 3BC1 CD 9B 38     SMSER1: call    STAKFP          ; Put value on stack
4843+ 3BC4 7E                   ld      A,(HL)          ; Get number of coefficients
4844+ 3BC5 23                   inc     HL              ; Point to start of table
4845+ 3BC6 CD A8 38             call    PHLTFP          ; Move coefficient to FPREG
4846+ 3BC9 06                   defb    06H             ; Skip "pop AF"
4847+ 3BCA F1           SUMLP:  pop     AF              ; Restore count
4848+ 3BCB C1                   pop     BC              ; Restore number
4849+ 3BCC D1                   pop     DE
4850+ 3BCD 3D                   dec     A               ; Cont coefficients
4851+ 3BCE C8                   ret     Z               ; All done
4852+ 3BCF D5                   push    DE              ; Save number
4853+ 3BD0 C5                   push    BC
4854+ 3BD1 F5                   push    AF              ; Save count
4855+ 3BD2 E5                   push    HL              ; Save address in table
4856+ 3BD3 CD 0E 37             call    FPMULT          ; Multiply FPREG by BCDE
4857+ 3BD6 E1                   pop     HL              ; Restore address in table
4858+ 3BD7 CD B9 38             call    LOADFP          ; Number at HL to BCDE
4859+ 3BDA E5                   push    HL              ; Save address in table
4860+ 3BDB CD D3 35             call    FPADD           ; Add coefficient to FPREG
4861+ 3BDE E1                   pop     HL              ; Restore address in table
4862+ 3BDF C3 CA 3B             jp      SUMLP           ; More coefficients
4863+ 3BE2
4864+ 3BE2
4865+ 3BE2              ; random number generator
4866+ 3BE2              ; a negative argument is used as a seed for the RNG
4867+ 3BE2              ; 0 is used to repeat the last random number
4868+ 3BE2              ; a positive argument generates a new random number
4869+ 3BE2 CD 6A 38     RND:    call    TSTSGN          ; Test sign of FPREG
4870+ 3BE5 21 7A 80             ld      HL,SEED+2       ; Random number seed
4871+ 3BE8 FA 43 3C             jp      M,RESEED        ; Negative - Re-seed
4872+ 3BEB 21 9B 80             ld      HL,LSTRND       ; Last random number
4873+ 3BEE CD A8 38             call    PHLTFP          ; Move last RND to FPREG
4874+ 3BF1 21 7A 80             ld      HL,SEED+2       ; Random number seed
4875+ 3BF4 C8                   ret     Z               ; Return if RND(0)
4876+ 3BF5 86                   add     A,(HL)          ; Add (SEED+2)
4877+ 3BF6 E6 07                and     %00000111       ; 0 to 7
4878+ 3BF8 06 00                ld      B,$00
4879+ 3BFA 77                   ld      (HL),A          ; Re-save seed
4880+ 3BFB 23                   inc     HL              ; Move to coefficient table
4881+ 3BFC 87                   add     A,A             ; 4 bytes
4882+ 3BFD 87                   add     A,A             ; per entry
4883+ 3BFE 4F                   ld      C,A             ; BC = Offset into table
4884+ 3BFF 09                   add     HL,BC           ; Point to coefficient
4885+ 3C00 CD B9 38             call    LOADFP          ; Coefficient to BCDE
4886+ 3C03 CD 0E 37             call    FPMULT          ; Multiply FPREG by coefficient
4887+ 3C06 3A 79 80             ld      A,(SEED+1)      ; Get (SEED+1)
4888+ 3C09 3C                   inc     A               ; Add 1
4889+ 3C0A E6 03                and     %00000011       ; 0 to 3
4890+ 3C0C 06 00                ld      B,$00
4891+ 3C0E FE 01                cp      $01             ; Is it zero?
4892+ 3C10 88                   adc     A,B             ; Yes - Make it 1
4893+ 3C11 32 79 80             ld      (SEED+1),A      ; Re-save seed
4894+ 3C14 21 47 3C             ld      HL,RNDTAB-4     ; Addition table
4895+ 3C17 87                   add     A,A             ; 4 bytes
4896+ 3C18 87                   add     A,A             ; per entry
4897+ 3C19 4F                   ld      C,A             ; BC = Offset into table
4898+ 3C1A 09                   add     HL,BC           ; Point to value
4899+ 3C1B CD C4 35             call    ADDPHL          ; Add value to FPREG
4900+ 3C1E CD B6 38     RND1:   call    BCDEFP          ; Move FPREG to BCDE
4901+ 3C21 7B                   ld      A,E             ; Get LSB
4902+ 3C22 59                   ld      E,C             ; LSB = MSB
4903+ 3C23 EE 4F                xor     %01001111       ; Fiddle around
4904+ 3C25 4F                   ld      C,A             ; New MSB
4905+ 3C26 36 80                ld      (HL),$80        ; Set exponent
4906+ 3C28 2B                   dec     HL              ; Point to MSB
4907+ 3C29 46                   ld      B,(HL)          ; Get MSB
4908+ 3C2A 36 80                ld      (HL),$80        ; Make value -0.5
4909+ 3C2C 21 78 80             ld      HL,SEED         ; Random number seed
4910+ 3C2F 34                   inc     (HL)            ; Count seed
4911+ 3C30 7E                   ld      A,(HL)          ; Get seed
4912+ 3C31 D6 AB                sub     $AB             ; Do it modulo 171
4913+ 3C33 C2 3A 3C             jp      NZ,RND2         ; Non-zero - Ok
4914+ 3C36 77                   ld      (HL),A          ; Zero seed
4915+ 3C37 0C                   inc     C               ; Fillde about
4916+ 3C38 15                   dec     D               ; with the
4917+ 3C39 1C                   inc     E               ; number
4918+ 3C3A CD 24 36     RND2:   call    BNORM           ; Normalise number
4919+ 3C3D 21 9B 80             ld      HL,LSTRND       ; Save random number
4920+ 3C40 C3 C2 38             jp      FPTHL           ; Move FPREG to last and return
4921+ 3C43
4922+ 3C43 77           RESEED: ld      (HL),A          ; Re-seed random numbers
4923+ 3C44 2B                   dec     HL
4924+ 3C45 77                   ld      (HL),A
4925+ 3C46 2B                   dec     HL
4926+ 3C47 77                   ld      (HL),A
4927+ 3C48 C3 1E 3C             jp      RND1            ; Return RND seed
4928+ 3C4B
4929+ 3C4B 68 B1 46 68  RNDTAB: defb    $68,$B1,$46,$68 ; Table used by RND
4930+ 3C4F 99 E9 92 69          defb    $99,$E9,$92,$69
4931+ 3C53 10 D1 75 68          defb    $10,$D1,$75,$68
4932+ 3C57
4933+ 3C57              ; COS and SIN functions
4934+ 3C57 21 A1 3C     COS:    ld      HL,HALFPI       ; Point to PI/2
4935+ 3C5A CD C4 35             call    ADDPHL          ; Add it to PPREG
4936+ 3C5D CD 9B 38     SIN:    call    STAKFP          ; Put angle on stack
4937+ 3C60 01 49 83             ld      BC,$8349        ; BCDE = 2 PI
4938+ 3C63 11 DB 0F             ld      DE,$0FDB
4939+ 3C66 CD AB 38             call    FPBCDE          ; Move 2 PI to FPREG
4940+ 3C69 C1                   pop     BC              ; Restore angle
4941+ 3C6A D1                   pop     DE
4942+ 3C6B CD C0 37             call    DVBCDE          ; Divide angle by 2 PI
4943+ 3C6E CD 9B 38             call    STAKFP          ; Put it on stack
4944+ 3C71 CD 3D 39             call    INT             ; Get INT of result
4945+ 3C74 C1                   pop     BC              ; Restore number
4946+ 3C75 D1                   pop     DE
4947+ 3C76 CD D0 35             call    SUBCDE          ; Make it 0 <= value < 1
4948+ 3C79 21 A5 3C             ld      HL,QUARTR       ; Point to 0.25
4949+ 3C7C CD CA 35             call    SUBPHL          ; Subtract value from 0.25
4950+ 3C7F CD 6A 38             call    TSTSGN          ; Test sign of value
4951+ 3C82 37                   scf                     ; Flag positive
4952+ 3C83 F2 8D 3C             jp      P,SIN1          ; Positive - Ok
4953+ 3C86 CD C1 35             call    ROUND           ; Add 0.5 to value
4954+ 3C89 CD 6A 38             call    TSTSGN          ; Test sign of value
4955+ 3C8C B7                   or      A               ; Flag negative
4956+ 3C8D F5           SIN1:   push    AF              ; Save sign
4957+ 3C8E F4 93 38             call    P,INVSGN        ; Negate value if positive
4958+ 3C91 21 A5 3C             ld      HL,QUARTR       ; Point to 0.25
4959+ 3C94 CD C4 35             call    ADDPHL          ; Add 0.25 to value
4960+ 3C97 F1                   pop     AF              ; Restore sign
4961+ 3C98 D4 93 38             call    NC,INVSGN       ; Negative - Make positive
4962+ 3C9B 21 A9 3C             ld      HL,SINTAB       ; Coefficient table
4963+ 3C9E C3 B2 3B             jp      SUMSER          ; Evaluate sum of series
4964+ 3CA1
4965+ 3CA1 DB 0F 49 81  HALFPI: defb    $DB,$0F,$49,$81 ; 1.5708 (PI/2)
4966+ 3CA5
4967+ 3CA5 00 00 00 7F  QUARTR: defb    $00,$00,$00,$7F ; 0.25
4968+ 3CA9
4969+ 3CA9 05           SINTAB: defb    $05             ; Table used by SIN
4970+ 3CAA BA D7 1E 86          defb    $BA,$D7,$1E,$86 ; 39.711
4971+ 3CAE 64 26 99 87          defb    $64,$26,$99,$87 ;-76.575
4972+ 3CB2 58 34 23 87          defb    $58,$34,$23,$87 ; 81.602
4973+ 3CB6 E0 5D A5 86          defb    $E0,$5D,$A5,$86 ;-41.342
4974+ 3CBA DA 0F 49 83          defb    $DA,$0F,$49,$83 ;  6.2832
4975+ 3CBE
4976+ 3CBE CD 9B 38     TAN:    call    STAKFP          ; Put angle on stack
4977+ 3CC1 CD 5D 3C             call    SIN             ; Get SIN of angle
4978+ 3CC4 C1                   pop     BC              ; Restore angle
4979+ 3CC5 E1                   pop     HL
4980+ 3CC6 CD 9B 38             call    STAKFP          ; Save SIN of angle
4981+ 3CC9 EB                   ex      DE,HL           ; BCDE = Angle
4982+ 3CCA CD AB 38             call    FPBCDE          ; Angle to FPREG
4983+ 3CCD CD 57 3C             call    COS             ; Get COS of angle
4984+ 3CD0 C3 BE 37             jp      DIV             ; TAN = SIN / COS
4985+ 3CD3
4986+ 3CD3 CD 6A 38     ATN:    call    TSTSGN          ; Test sign of value
4987+ 3CD6 FC FE 3A             call    M,NEGAFT        ; Negate result after if -ve
4988+ 3CD9 FC 93 38             call    M,INVSGN        ; Negate value if -ve
4989+ 3CDC 3A 5C 82             ld      A,(FPEXP)       ; Get exponent
4990+ 3CDF FE 81                cp      81H             ; Number less than 1?
4991+ 3CE1 DA F0 3C             jp      C,ATN1          ; Yes - Get arc tangnt
4992+ 3CE4 01 00 81             ld      BC,$8100        ; BCDE = 1
4993+ 3CE7 51                   ld      D,C
4994+ 3CE8 59                   ld      E,C
4995+ 3CE9 CD C0 37             call    DVBCDE          ; Get reciprocal of number
4996+ 3CEC 21 CA 35             ld      HL,SUBPHL       ; Sub angle from PI/2
4997+ 3CEF E5                   push    HL              ; Save for angle > 1
4998+ 3CF0 21 FA 3C     ATN1:   ld      HL,ATNTAB       ; Coefficient table
4999+ 3CF3 CD B2 3B             call    SUMSER          ; Evaluate sum of series
5000+ 3CF6 21 A1 3C             ld      HL,HALFPI       ; PI/2 - angle in case > 1
5001+ 3CF9 C9                   ret                     ; Number > 1 - Sub from PI/2
5002+ 3CFA
5003+ 3CFA 09           ATNTAB: defb    $09             ; Table used by ATN
5004+ 3CFB 4A D7 3B 78          defb    $4A,$D7,$3B,$78 ; 1/17
5005+ 3CFF 02 6E 84 7B          defb    $02,$6E,$84,$7B ;-1/15
5006+ 3D03 FE C1 2F 7C          defb    $FE,$C1,$2F,$7C ; 1/13
5007+ 3D07 74 31 9A 7D          defb    $74,$31,$9A,$7D ;-1/11
5008+ 3D0B 84 3D 5A 7D          defb    $84,$3D,$5A,$7D ; 1/9
5009+ 3D0F C8 7F 91 7E          defb    $C8,$7F,$91,$7E ;-1/7
5010+ 3D13 E4 BB 4C 7E          defb    $E4,$BB,$4C,$7E ; 1/5
5011+ 3D17 6C AA AA 7F          defb    $6C,$AA,$AA,$7F ;-1/3
5012+ 3D1B 00 00 00 81          defb    $00,$00,$00,$81 ; 1/1
5013+ 3D1F
5014+ 3D1F
5015+ 3D1F C9           ARET:   ret                     ; A RETurn instruction
5016+ 3D20
5017+ 3D20 D7           GETINP: rst     $10             ; input a character
5018+ 3D21 C9                   ret
5019+ 3D22
5020+ 3D22 E5           CLS:    push    HL
5021+ 3D23 D5                   push    DE
5022+ 3D24 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5023+ 3D27 FE 02                cp      $02             ; G2 mode?
5024+ 3D29 CC F5 05             call    Z,EMPTYVIDBUF   ; yes, reset video buffer
5025+ 3D2C D1                   pop     DE
5026+ 3D2D E1                   pop     HL
5027+ 3D2E 3E 0C                ld      A,CS            ; ASCII Clear screen
5028+ 3D30 CD C1 23             call    SND2VID         ; send to screen
5029+ 3D33 C3 D7 4C             jp      MONOUT          ; Output character
5030+ 3D36
5031+ 3D36 CD E3 32     WIDTH:  call    GETINT          ; Get integer 0-255
5032+ 3D39 7B                   ld      A,E             ; Width to A
5033+ 3D3A 32 A2 80             ld      (LWIDTH),A      ; Set width
5034+ 3D3D C9                   ret
5035+ 3D3E
5036+ 3D3E
5037+ 3D3E              ; read a word (2 bytes) from a couple of RAM locations, in little-endian format
5038+ 3D3E              ; i.e., the first location is the LSB, while the second one is the MSB
5039+ 3D3E CD 82 26     DEEK:   call    DEINT           ; Get integer -32768 to 32767
5040+ 3D41 D5                   push    DE              ; Save number
5041+ 3D42 E1                   pop     HL              ; Number to HL
5042+ 3D43 46           RECWRD: ld      B,(HL)          ; Get LSB of contents
5043+ 3D44 23                   inc     HL
5044+ 3D45 7E                   ld      A,(HL)          ; Get MSB of contents
5045+ 3D46 C3 47 2E             jp      ABPASS          ; Return integer AB
5046+ 3D49
5047+ 3D49              ; write a word (2 bytes) into a couple of RAM locations, in little-endian format
5048+ 3D49              ; i.e., the LSB will go into the first location, while the MSB into the second one
5049+ 3D49 CD 5D 2A     DOKE:   call    GETNUM          ; Get a number
5050+ 3D4C CD 82 26             call    DEINT           ; Get integer -32768 to 32767
5051+ 3D4F D5                   push    DE              ; Save address
5052+ 3D50 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5053+ 3D53 2C                   defb    ','
5054+ 3D54 CD 5D 2A             call    GETNUM          ; Get a number
5055+ 3D57 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
5056+ 3D5A E3                   ex      (SP),HL         ; Save value,get address
5057+ 3D5B 73                   ld      (HL),E          ; Save LSB of value
5058+ 3D5C 23                   inc     HL
5059+ 3D5D 72                   ld      (HL),D          ; Save MSB of value
5060+ 3D5E E1                   pop     HL              ; Restore code string address
5061+ 3D5F C9                   ret
5062+ 3D60
5063+ 3D60              ; stop the execution of code for a certain bit of time. The pause
5064+ 3D60              ; is between $0000 and $FFFF 100ths of a second (0~655.5 secs)
5065+ 3D60 CD 5D 2A     PAUSE:  call    GETNUM          ; Get a number
5066+ 3D63 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
5067+ 3D66 7A                   ld      A,D             ; load D into A
5068+ 3D67 B3                   or      E               ; are D & E equal to $00?
5069+ 3D68 C8                   ret     Z               ; if yes, then return
5070+ 3D69 C5           DIR_PAU:push    BC              ; store BC
5071+ 3D6A 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5072+ 3D6D 47                   ld      B,A             ; move it into B
5073+ 3D6E CD F7 25     RPTPS:  call    TSTBRK          ; Test for break key
5074+ 3D71 3A E5 81             ld      A,(TMRCNT)      ; Load current value of system timer
5075+ 3D74 B8                   cp      B               ; is it the same value?
5076+ 3D75 28 F7                jr      Z,RPTPS         ; yes, so read again
5077+ 3D77 47                   ld      B,A             ; no, so store the new value
5078+ 3D78 1B                   dec     DE              ; decrement interval
5079+ 3D79 7A                   ld      A,D             ; load D into A
5080+ 3D7A B3                   or      E               ; check if DE is equal to 0 (if D & e are $00 then result is 0)
5081+ 3D7B 20 F1                jr      NZ,RPTPS        ; no, repeat
5082+ 3D7D C1                   pop     BC              ; yes, recover BC and continue
5083+ 3D7E C9                   ret
5084+ 3D7F
5085+ 3D7F              ; change the screen mode and set some graphic features. Usage: SCREEN X[,Y][,Z]
5086+ 3D7F              ; where X is graphic mode:
5087+ 3D7F              ; 0=text mode (40x24), 1=graphic mode 1 (32x24 chars); 2=graphic mode 2 (256x192 pixels);
5088+ 3D7F              ; 3=multicolor mode (64x48 pixels); 4=extended graphic mode 2 (32x24 chars mixed between G1 and G2)
5089+ 3D7F              ; Y is: 0=8x8 sprites, 1=16x16 sprites
5090+ 3D7F              ; Z is: 0=no sprite magnification; 1=sprite magnification x2 (8x8=>16x16, and 16x16=32x32)
5091+ 3D7F              ; (the latters are accepted only in graphic modes G1, G2, G3, and G4)
5092+ 3D7F AF           SCREEN: xor     A
5093+ 3D80 32 07 82             ld      (TMPBFR2),A     ; sprite size & magnif. byte set to 0
5094+ 3D83 CD E3 32             call    GETINT          ; Get integer 0-255
5095+ 3D86 FE 05                cp      $05             ; is it a valid mode (0~4)?
5096+ 3D88 D2 97 26             jp      NC,FCERR        ; No - Illegal function call Error
5097+ 3D8B 32 05 82             ld      (TMPBFR1),A     ; store graphic mode
5098+ 3D8E A7                   and     A               ; is it 0 (text mode)?
5099+ 3D8F CA AB 3D             jp      Z,SCVDP         ; yes, ignore other arguments and set mode immediately
5100+ 3D92 CD EA 3D     SETVDP: call    CHKSCAR         ; no, check if sprite size follows
5101+ 3D95 DA 9D 3D             jp      C,CKMAGN        ; no (set to 0 or missing), so jump over
5102+ 3D98 3E 02                ld      A,$02           ; no, so set sprite size
5103+ 3D9A 32 07 82             ld      (TMPBFR2),A     ; ...to 16x16
5104+ 3D9D CD EA 3D     CKMAGN: call    CHKSCAR         ; check if sprite magnification follows
5105+ 3DA0 DA AB 3D             jp      C,SCVDP         ; no (set to 0 or missing), so jump over
5106+ 3DA3 3A 07 82             ld      A,(TMPBFR2)     ; yes, so retrieve sprite attributes...
5107+ 3DA6 F6 01                or      $01             ; ...set sprite magnification to 2x...
5108+ 3DA8 32 07 82             ld      (TMPBFR2),A     ; ...and save flags again
5109+ 3DAB F3           SCVDP:  di                      ; disable INTs
5110+ 3DAC D5                   push    DE              ; store DE
5111+ 3DAD E5                   push    HL              ; store HL
5112+ 3DAE 3A 05 82             ld      A,(TMPBFR1)     ; recover graphic mode
5113+ 3DB1 5F                   ld      E,A             ; and store it into E
5114+ 3DB2 3A 07 82             ld      A,(TMPBFR2)     ; recover sprite flags
5115+ 3DB5 57                   ld      D,A             ; and store them into D
5116+ 3DB6 D5                   push    DE              ; store D & E
5117+ 3DB7 CD ED 03             call    initVDP         ; initialize VDP with mode pointed by E
5118+ 3DBA D1                   pop     DE              ; retrieve D & E
5119+ 3DBB 7B                   ld      A,E             ; move graphic mode into A
5120+ 3DBC 87                   add     A,A
5121+ 3DBD 87                   add     A,A
5122+ 3DBE 87                   add     A,A             ; multiply A times 8 to get offset of graphic mode
5123+ 3DBF 5F                   ld      E,A             ; and pass it into E
5124+ 3DC0 D5                   push    DE              ; store sprite flags in E
5125+ 3DC1 16 00                ld      D,$00           ; reset D
5126+ 3DC3 21 44 0B             ld      HL,VDPMODESET+1 ; load address of VDP settings for reg#1
5127+ 3DC6 19                   add     HL,DE           ; load correct reg#1 setting
5128+ 3DC7 D1                   pop     DE              ; retrieve sprite flags from E
5129+ 3DC8 7E                   ld      A,(HL)          ; load reg#1 setting
5130+ 3DC9 E6 FC                and     %11111100       ; reset size & magn. bits
5131+ 3DCB B2                   or      D               ; set size & magn. bits
5132+ 3DCC 5F                   ld      E,A             ; value into E
5133+ 3DCD 3E 01                ld      A,$01           ; reg #1
5134+ 3DCF CD D1 06             call    WRITE_VREG      ; send setting to reg #1
5135+ 3DD2 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
5136+ 3DD5 23                   inc     HL              ; -1 means direct statement
5137+ 3DD6 7C                   ld      A,H
5138+ 3DD7 B5                   or      L
5139+ 3DD8 CC 44 09             call    Z,CURSOR_ON     ; enable cursor if not in program mode
5140+ 3DDB FB                   ei                      ; re-enable interrupts
5141+ 3DDC E1                   pop     HL              ; restore HL
5142+ 3DDD D1                   pop     DE              ; restore DE
5143+ 3DDE 3A F6 81             ld      A,(SCR_SIZE_H)  ; check the screen mode by looking at the screen height
5144+ 3DE1 FE 30                cp      $30             ; is it 48 chars or 192 pixels (MC and G2 modes)?
5145+ 3DE3 D0                   ret     NC              ; yes, so exit (in graphics 2 and multicolor no print-on-video)
5146+ 3DE4 3E 01                ld      A,$01           ; no (we are in Text, G1 or ExG2), so activate the...
5147+ 3DE6 32 01 82             ld      (PRNTVIDEO),A   ; ...video buffer...
5148+ 3DE9 C9                   ret                     ; ...and return to caller
5149+ 3DEA
5150+ 3DEA              ; check an additional argument for SCREEN - There are 2 ways of working:
5151+ 3DEA              ; to check if something follows: Carry is 1 is no argument follows, 0 otherwise
5152+ 3DEA              ; to check the value of the following argument: 0 is argument is 1, 1 is argument is <> 1
5153+ 3DEA 2B           CHKSCAR:dec     HL              ; dec 'cos GETCHR INCs
5154+ 3DEB CD CC 25             call    GETCHR          ; Get next character
5155+ 3DEE 37                   scf                     ; set carry flag
5156+ 3DEF C8                   ret     Z               ; return if nothing follows with Carry=1
5157+ 3DF0 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5158+ 3DF3 2C                   defb    ','
5159+ 3DF4 CD E3 32             call    GETINT          ; get value
5160+ 3DF7 1F                   rra                     ; Carry=bit #0
5161+ 3DF8 3F                   ccf                     ; invert Carry, so Carry=0 if arg. is 1, and Carry=1 otherwise (arg<>1)
5162+ 3DF9 C9                   ret                     ; return
5163+ 3DFA
5164+ 3DFA
5165+ 3DFA              ; change the colors of the screen - Syntax is COLOR a,b,c where:
5166+ 3DFA              ; a=foreground color / b=background color / c=border color
5167+ 3DFA              ; a,b,c must be in a range between 1 and 15 (0 is transparent and it's not supported)
5168+ 3DFA              ; the number of arguments is based on the current screen mode
5169+ 3DFA CD E3 32     COLOR:  call    GETINT          ; get first value
5170+ 3DFD CD A3 3E             call    CHKCLR1         ; check if it's in range 1~15
5171+ 3E00 32 05 82             ld      (TMPBFR1),A     ; store it
5172+ 3E03 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5173+ 3E06 FE 03                cp      $03             ; is it multicolor mode?
5174+ 3E08 20 0D                jr      NZ,CNTCKCL      ; no, continue
5175+ 3E0A 3E 0F                ld      A,$0F           ; white for...
5176+ 3E0C 32 03 82             ld      (FRGNDCLR),A    ; ...foreground (even it's not used in MC)
5177+ 3E0F 3A 05 82             ld      A,(TMPBFR1)     ; yes, so we stop here because in MC mode we just support border color
5178+ 3E12 32 09 82             ld      (TMPBFR3),A     ; move color into temp buffer 3
5179+ 3E15 18 31                jr      CLRMC           ; jump to set color
5180+ 3E17 CD 83 23     CNTCKCL:call    CHKSYN          ; Make sure ',' follows
5181+ 3E1A 2C                   defb    ','
5182+ 3E1B CD E3 32             call    GETINT          ; get second value
5183+ 3E1E CD A3 3E             call    CHKCLR1         ; check if it's in range 1~15
5184+ 3E21 32 07 82             ld      (TMPBFR2),A     ; store it
5185+ 3E24 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5186+ 3E27 A7                   and     A               ; is it text mode?
5187+ 3E28 28 1B                jr      Z,CLRTXT        ; yes, stop here because in text mode, background and border colors coincide
5188+ 3E2A CD 83 23             call    CHKSYN          ; Make sure ',' follows
5189+ 3E2D 2C                   defb    ','
5190+ 3E2E CD E3 32             call    GETINT          ; get third value
5191+ 3E31 CD A3 3E             call    CHKCLR1         ; check if it's in range 1~15
5192+ 3E34 32 09 82             ld      (TMPBFR3),A     ; store it
5193+ 3E37 D5                   push    DE              ; store DE
5194+ 3E38 3A F7 81             ld      A,(SCR_MODE)    ; check screen mode
5195+ 3E3B FE 01                cp      $01             ; is it G1 mode?
5196+ 3E3D 28 10                jr      Z,CLRG1         ; yes, jump over
5197+ 3E3F FE 02                cp      $02             ; is it G2 mode?
5198+ 3E41 28 15                jr      Z,CLRG2         ; yes, jump over
5199+ 3E43 18 1C                jr      CLREX2          ; last case can only be ExG2
5200+ 3E45 CD 96 3E     CLRTXT: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5201+ 3E48 32 09 82     CLRMC:  ld      (TMPBFR3),A     ; store color settings (for MC mode, we only set border color)
5202+ 3E4B D5                   push    DE              ; store DE
5203+ 3E4C F3                   di                      ; disable INTs
5204+ 3E4D 18 2E                jr      SETBRCL         ; set colors and exit
5205+ 3E4F CD 96 3E     CLRG1:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5206+ 3E52 16 01                ld      D,$01           ; repeat 1 time
5207+ 3E54 06 20                ld      B,$20           ; 32 bytes of colors
5208+ 3E56 18 10                jr      LOADCLR         ; load colors
5209+ 3E58 CD 96 3E     CLRG2:  call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5210+ 3E5B 16 18                ld      D,$18           ; 18 pages of...
5211+ 3E5D 06 00                ld      B,$00           ; ...256 bytes each
5212+ 3E5F 18 07                jr      LOADCLR         ; load colors
5213+ 3E61 CD 96 3E     CLREX2: call    MIXCLRS         ; mix foreground and background color nibbles in 1 byte
5214+ 3E64 16 08                ld      D,$08           ; 8 pages of...
5215+ 3E66 06 00                ld      B,$00           ; ...256 bytes each
5216+ 3E68 E5           LOADCLR:push    HL              ; store HL
5217+ 3E69 21 00 20             ld      HL,$2000        ; color table start: $2000
5218+ 3E6C F3                   di                      ; disable INTs
5219+ 3E6D CD 87 06             call    SETVDPADRS
5220+ 3E70 0E 30                ld      C,VDP_DAT              ; VDP data mode
5221+ 3E72 ED 79        RPTLDCL:out     (C),A           ; after first byte, the VDP autoincrements VRAM pointer
5222+ 3E74 00                   nop
5223+ 3E75 00                   nop
5224+ 3E76 10 FA                djnz    RPTLDCL         ; repeat for 256 bytes (1 page)
5225+ 3E78 15                   dec     D               ; did we fill up all the pages?
5226+ 3E79 20 F7                jr      NZ,RPTLDCL      ; no, repeat
5227+ 3E7B FB                   ei
5228+ 3E7C E1                   pop     HL              ; retrieve HL
5229+ 3E7D 3A 05 82     SETBRCL:ld      A,(TMPBFR1)     ; retrieve foreground color
5230+ 3E80 32 03 82             ld      (FRGNDCLR),A    ; store it
5231+ 3E83 3A 07 82             ld      A,(TMPBFR2)     ; retrieve background color
5232+ 3E86 32 04 82             ld      (BKGNDCLR),A    ; store it
5233+ 3E89 3A 09 82             ld      A,(TMPBFR3)     ; recover border color
5234+ 3E8C 5F                   ld      E,A             ; move it into E
5235+ 3E8D 3E 07                ld      A,$07           ; set VDP register 7
5236+ 3E8F F3                   di
5237+ 3E90 CD D1 06             call    WRITE_VREG      ; send value to VDP: set border color
5238+ 3E93 FB                   ei                      ; re-enable INTs
5239+ 3E94 D1                   pop     DE              ; retrieve DE
5240+ 3E95 C9                   ret                     ; return to caller
5241+ 3E96
5242+ 3E96
5243+ 3E96              ; mix 2 color nibbles in 1 byte
5244+ 3E96 3A 07 82     MIXCLRS:ld      A,(TMPBFR2)     ; retrieve background color
5245+ 3E99 47                   ld      B,A             ; move it into B
5246+ 3E9A 3A 05 82             ld      A,(TMPBFR1)     ; retrieve foreground color
5247+ 3E9D 87                   add     A,A             ; move foreground color into the high nibble of A
5248+ 3E9E 87                   add     A,A
5249+ 3E9F 87                   add     A,A
5250+ 3EA0 87                   add     A,A
5251+ 3EA1 B0                   or      B               ; put background color into the low nibble of A
5252+ 3EA2 C9                   ret                     ; return to caller
5253+ 3EA3
5254+ 3EA3
5255+ 3EA3              ; check if the color is not 0 and into the range 1~15
5256+ 3EA3 A7           CHKCLR1:and     A               ; is it 0?
5257+ 3EA4 CA 83 20             jp      Z,SNERR         ; yes, raise a SN error
5258+ 3EA7 FE 10        CHKCLR0:cp      $10             ; is it in range 0~15?
5259+ 3EA9 D2 83 20             jp      NC,SNERR        ; no, raise a SN error
5260+ 3EAC C9                   ret                     ; param is OK, can return
5261+ 3EAD
5262+ 3EAD
5263+ 3EAD              ; check if in graphics 2 mode
5264+ 3EAD 3A F7 81     CHKG2M: ld      A,(SCR_MODE)    ; check screen mode
5265+ 3EB0 FE 02                cp      $02             ; actually, we can paint only in G2
5266+ 3EB2 C2 BC 44             jp      NZ,GMERR        ; no G2, print a No Graphics Mode Error
5267+ 3EB5 C9                   ret                     ; return to caller
5268+ 3EB6
5269+ 3EB6
5270+ 3EB6              ; print a text in screen 2
5271+ 3EB6              ; GPRINT text,x,y[,fc[,bc]]
5272+ 3EB6              ; where "text" is an expression that can be converted into a sequence of ASCII chars,
5273+ 3EB6              ; x & y are the coordinates (0<=x<=31, 0<=y<=23), fc & bc are foreground and background
5274+ 3EB6              ; colors (1~15), resp.
5275+ 3EB6              ; (portions of code are from nippur72)
5276+ 3EB6              GX      equ     TMPBFR3
5277+ 3EB6              GY      equ     TMPBFR4
5278+ 3EB6              TMPCLR  equ     TMPBFR2
5279+ 3EB6              MIXCOL  equ     TMPBFR1
5280+ 3EB6              TMPADR  equ     VIDEOBUFF
5281+ 3EB6              CHRPNT  equ     VIDEOBUFF+$02
5282+ 3EB6              NUMCHR  equ     VIDEOBUFF+$04
5283+ 3EB6              TMPHL   equ     VIDEOBUFF+$06
5284+ 3EB6 CD AD 3E     GPRINT: call    CHKG2M          ; check if in graphic mode 2
5285+ 3EB9 2B                   dec     HL              ; dec 'cos GETCHR INCs
5286+ 3EBA CD CC 25             call    GETCHR          ; check if something follows
5287+ 3EBD CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
5288+ 3EC0 22 0D 82             ld      (TMPADR),HL     ; save current code string pointer
5289+ 3EC3 CD 6F 2A             call    EVAL            ; Evaluate expression
5290+ 3EC6 CD 61 2A             call    TSTSTR          ; Make sure it's a string
5291+ 3EC9 22 13 82             ld      (TMPHL),HL      ; store code string pointer
5292+ 3ECC CD A8 30             call    GSTRCU          ; Current string to pool
5293+ 3ECF CD B9 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
5294+ 3ED2 ED 43 0F 82          ld      (CHRPNT),BC     ; store string pointer
5295+ 3ED6 ED 53 11 82          ld      (NUMCHR),DE     ; store string lenght
5296+ 3EDA 2A 13 82             ld      HL,(TMPHL)      ; restore code string pointer
5297+ 3EDD CD 83 23             call    CHKSYN          ; Make sure ',' follows
5298+ 3EE0 2C                   defb    ','
5299+ 3EE1 CD E3 32             call    GETINT          ; get X coord.
5300+ 3EE4 FE 20                cp      $20             ; is it in rage 0~31?
5301+ 3EE6 D2 97 26             jp      NC,FCERR        ; Illegal function call error
5302+ 3EE9 32 09 82             ld      (GX),A          ; store into temp. buffer
5303+ 3EEC CD 83 23             call    CHKSYN          ; Make sure ',' follows
5304+ 3EEF 2C                   defb    ','
5305+ 3EF0 CD E3 32             call    GETINT          ; get Y coord.
5306+ 3EF3 FE 18                cp      $18             ; is it in range 0~23?
5307+ 3EF5 D2 97 26             jp      NC,FCERR        ; Illegal function call error
5308+ 3EF8 32 0B 82             ld      (GY),A          ; store into temp. buffer
5309+ 3EFB 11 07 82             ld      DE,TMPCLR
5310+ 3EFE 3A 04 82             ld      A,(BKGNDCLR)    ; load background color
5311+ 3F01 12                   ld      (DE),A          ; store into temp buff
5312+ 3F02 3A 03 82             ld      A,(FRGNDCLR)    ; load foreground color
5313+ 3F05 1B                   dec     DE
5314+ 3F06 1B                   dec     DE
5315+ 3F07 12                   ld      (DE),A          ; store into temp buff
5316+ 3F08 CD 94 3F             call    CKCOL           ; check color
5317+ 3F0B CA 13 3F             jp      Z,CNTGPT2       ; if anything follows, jump over
5318+ 3F0E 13                   inc     DE
5319+ 3F0F 13                   inc     DE
5320+ 3F10 CD 94 3F             call    CKCOL           ; check background color
5321+ 3F13 CD 96 3E     CNTGPT2:call    MIXCLRS         ; mix foreground & background colors
5322+ 3F16 32 05 82             ld      (MIXCOL),A      ; store mixed colors
5323+ 3F19 E5                   push    HL              ; store code string address
5324+ 3F1A ED 4B 0F 82          ld      BC,(CHRPNT)     ; retrieve string pointer
5325+ 3F1E ED 5B 11 82          ld      DE,(NUMCHR)     ; retrieve string lenght
5326+ 3F22 1C                   inc     E               ; Length + 1
5327+ 3F23 CD 28 3F             call    GPNT            ; print on G2
5328+ 3F26 E1                   pop     HL              ; recover HL
5329+ 3F27 C9                   ret                     ; return to caller
5330+ 3F28 D5           GPNT:   push    DE              ; store string lenght (E)
5331+ 3F29                      ; calculate VRAM address of first char
5332+ 3F29 3A 09 82             LD      A,(GX)          ; load X
5333+ 3F2C 6F                   ld      L,A             ;
5334+ 3F2D 26 00                ld      H,0             ; HL = X
5335+ 3F2F 29                   add     HL,HL           ;
5336+ 3F30 29                   add     HL,HL           ;
5337+ 3F31 29                   add     HL,HL           ; X=X*8
5338+ 3F32 3A 0B 82             ld      A,(GY)          ; load Y
5339+ 3F35 57                   ld      D,A             ; move it into D
5340+ 3F36 1E 00                ld      E,0             ; DE =Y*256
5341+ 3F38 19                   add     HL,DE           ; address = X*8 + Y*256
5342+ 3F39 22 0D 82             ld      (TMPADR),HL     ; store VRAM address of first VRAM cell
5343+ 3F3C D1                   pop     DE              ; retrieve # of chars to be printed yet (E)
5344+ 3F3D 1D           RPGPNT: dec     E               ; Count characters
5345+ 3F3E C8                   ret     Z               ; End of string - return
5346+ 3F3F D5                   push    DE              ; store chars counter
5347+ 3F40                      ; calculate dest address in color vram
5348+ 3F40 2A 0D 82             ld      HL,(TMPADR)     ; recover VRAM address
5349+ 3F43 11 00 20             ld      DE,$2000        ; color map address
5350+ 3F46 19                   add     HL,DE           ; HL = $2000 + XY address
5351+ 3F47 F3                   di                      ; disable INTs
5352+ 3F48                      ; send color settings
5353+ 3F48 CD 87 06     GPNTCOL:call    SETVDPADRS      ; set VRAM address for color cell
5354+ 3F4B 3A 05 82             ld      A,(MIXCOL)      ; load color settings
5355+ 3F4E 06 08                ld      B,$08           ; repeat for 8 rows
5356+ 3F50 0E 30                ld      C,VDP_DAT       ; VDP data mode
5357+ 3F52 ED 79        GPNTCO1:out     (C),A           ; send data (VRAM pointer auto-increments)
5358+ 3F54 00                   nop                     ; wait...
5359+ 3F55 00                   nop                     ; ...a...
5360+ 3F56 00                   nop                     ; ...while
5361+ 3F57 10 F9                djnz    GPNTCO1         ; repeat for 8 cells
5362+ 3F59                      ; calculate source address
5363+ 3F59 2A 0F 82             ld      HL,(CHRPNT)     ; load char pointer
5364+ 3F5C 7E                   ld      A,(HL)          ; get char
5365+ 3F5D 23                   inc     HL              ; increment char pointer
5366+ 3F5E 22 0F 82             ld      (CHRPNT),HL     ; store char pointer
5367+ 3F61 6F                   ld      L,A             ;
5368+ 3F62 26 00                ld      H,$00           ; char into HL
5369+ 3F64 29                   add     HL,HL           ;
5370+ 3F65 29                   add     HL,HL           ;
5371+ 3F66 29                   add     HL,HL           ; get offset of char into ROM (charcode * 8)
5372+ 3F67 11 3B 56             ld      DE,CHRST88      ; DE = start of 8x8 fonts in ROM
5373+ 3F6A 19                   add     HL,DE           ; HL = start of characters in ROM
5374+ 3F6B EB                   ex      DE,HL           ; store address into DE
5375+ 3F6C 2A 0D 82     GPCPCHR:ld      HL,(TMPADR)     ; load VRAM address
5376+ 3F6F CD 87 06             call    SETVDPADRS      ; send it to VDP
5377+ 3F72 EB                   ex      DE,HL           ; restore address into HL
5378+ 3F73 06 08                ld      B,$08           ; repeat for 8 rows
5379+ 3F75 0E 30                ld      C,VDP_DAT              ; VDP data mode
5380+ 3F77 ED A3        GPCPCH1:outi                    ; load a byte from ROM and send to VRAM
5381+ 3F79 00                   nop                     ; wait...
5382+ 3F7A 00                   nop                     ; ...a...
5383+ 3F7B 00                   nop                     ; ...while
5384+ 3F7C 20 F9                jr      NZ,GPCPCH1      ; repeat for 8 chars
5385+ 3F7E FB                   ei                      ; re-enable INTs
5386+ 3F7F 11 08 00             ld      DE,$0008        ; 8 bytes to go to the next video cell
5387+ 3F82 2A 0D 82             ld      HL,(TMPADR)     ; load VRAM address
5388+ 3F85 19                   add     HL,DE           ; get address of next VRAM cell
5389+ 3F86 22 0D 82             ld      (TMPADR),HL     ; store new VRAM address
5390+ 3F89 11 00 18             ld      DE,$1800        ; forbidden address
5391+ 3F8C CD 05 4D             call    CMP16           ; check if the printing has gone out of the screen
5392+ 3F8F D1                   pop     DE              ; retrieve number of chars to be printed
5393+ 3F90 D0                   ret     NC              ; if HL>=$1800 then leave
5394+ 3F91 C3 3D 3F             jp      RPGPNT          ; otherwise, check if more chars to output
5395+ 3F94
5396+ 3F94              ; used by GPRINT to get a color argument (if present)
5397+ 3F94 2B           CKCOL:  dec     HL              ; dec 'cos GETCHR INCs
5398+ 3F95 CD CC 25             call    GETCHR          ; Get next character
5399+ 3F98 C8                   ret     Z               ; return if nothing follows
5400+ 3F99 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5401+ 3F9C 2C                   defb    ','
5402+ 3F9D D5                   push    DE              ; store DE
5403+ 3F9E CD E3 32             call    GETINT          ; get value
5404+ 3FA1 CD A3 3E             call    CHKCLR1         ; check if color is in range 1~15
5405+ 3FA4 D1                   pop     DE              ; retrieve DE
5406+ 3FA5 12                   ld      (DE),A          ; store color into temp buffer
5407+ 3FA6 C9                   ret                     ; return to caller
5408+ 3FA7
5409+ 3FA7
5410+ 3FA7              ; paint X,Y[,C]: in graphics mode, fills an area starting
5411+ 3FA7              ; at point X,Y, using default color or, if used, with
5412+ 3FA7              ; color set by C
5413+ 3FA7              ; TMPBFR1       X
5414+ 3FA7              ; TMPBFR2       Y
5415+ 3FA7              ; TMPBFR3       COLOR
5416+ 3FA7              PNT     equ     VIDEOBUFF
5417+ 3FA7              SPA     equ     VIDEOBUFF+$02
5418+ 3FA7              SPB     equ     VIDEOBUFF+$03
5419+ 3FA7              ORGSP   equ     VIDEOBUFF+$04
5420+ 3FA7 CD AD 3E     PAINT:  call    CHKG2M          ; check if in graphic mode 2
5421+ 3FAA CD E3 32             call    GETINT          ; get X
5422+ 3FAD 32 05 82             ld      (TMPBFR1),A     ; store X
5423+ 3FB0 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5424+ 3FB3 2C                   defb    ','
5425+ 3FB4 CD E3 32             call    GETINT          ; get Y coords,
5426+ 3FB7 FE C0                cp      $C0             ; check if Y is in range 0~191
5427+ 3FB9 D2 97 26             jp      NC,FCERR        ; no, raise an FC error
5428+ 3FBC 32 07 82             ld      (TMPBFR2),A     ; store Y
5429+ 3FBF CD A3 44             call    CLRPRM          ; check if color has been passed
5430+ 3FC2 3A 09 82             ld      A,(TMPBFR3)     ; load color
5431+ 3FC5 A7                   and     A               ; check if 0
5432+ 3FC6 CA 97 26             jp      Z,FCERR         ; yes, raise an error
5433+ 3FC9 E5                   push    HL              ; store HL
5434+ 3FCA C5                   push    BC              ; store BC
5435+ 3FCB D5                   push    DE              ; store DE
5436+ 3FCC                      ; start algorithm
5437+ 3FCC CD DF 40             call    PNTRTN          ; check if pixel is already set
5438+ 3FCF C2 83 40             jp      NZ,EXITPA2      ; if yes, then leave PAINT
5439+ 3FD2 ED 73 11 82          ld      (ORGSP),SP      ; no, store current Stack Pointer
5440+ 3FD6 21 01 00             ld      HL,$0001        ; HL=1
5441+ 3FD9 22 0D 82             ld      (PNT),HL        ; set PNT
5442+ 3FDC 3A 05 82             ld      A,(TMPBFR1)     ; load starting X...
5443+ 3FDF 47                   ld      B,A             ; ...into B
5444+ 3FE0 3A 07 82             ld      A,(TMPBFR2)     ; load starting Y...
5445+ 3FE3 4F                   ld      C,A             ; ...into C
5446+ 3FE4 C5                   push    BC              ; store starting X,Y into stack
5447+ 3FE5                      ; main loop
5448+ 3FE5 2A 0D 82     NXTLOOP:ld      HL,(PNT)        ; retrieve PNT
5449+ 3FE8 7C                   ld      A,H             ; check if PNT=0
5450+ 3FE9 B5                   or      L
5451+ 3FEA CA 7F 40             jp      Z,EXITPAI       ; yes, no more points to process - exit
5452+ 3FED 2B                   dec     HL              ; no, so decrement PNT...
5453+ 3FEE 22 0D 82             ld      (PNT),HL        ; ...and store it
5454+ 3FF1 C1                   pop     BC              ; retrieve pixel coordinates X,Y into BC
5455+ 3FF2 CD 87 40     PAINT0: call    CHECKPA         ; check if pixel is set/reset
5456+ 3FF5 20 09                jr      NZ,PAINT11      ; pixel is set, so jump over
5457+ 3FF7 78                   ld      A,B             ; pixel is reset, check if X1=0
5458+ 3FF8 A7                   and     A               ; (reached the limit of the screen)
5459+ 3FF9 CA 01 40             jp      Z,PAINT1        ; yes, jump over
5460+ 3FFC 05                   dec     B               ; no, decrement X1...
5461+ 3FFD C3 F2 3F             jp      PAINT0          ; ...and repeat
5462+ 4000 04           PAINT11:inc     B               ; if found a pixel on, the re-increment X1
5463+ 4001 AF           PAINT1: xor     A               ; reset A
5464+ 4002 57                   ld      D,A             ; set SA=0
5465+ 4003 5F                   ld      E,A             ; set SB=0
5466+ 4004 CD 87 40     MNPAINT:call    CHECKPA         ; check if pixel is set/reset
5467+ 4007 20 DC                jr      NZ,NXTLOOP      ; it's set, so goto next loop
5468+ 4009 78                   ld      A,B             ; copy X1
5469+ 400A 32 05 82             ld      (TMPBFR1),A     ; into buffer
5470+ 400D 79                   ld      A,C             ; copy Y
5471+ 400E 32 07 82             ld      (TMPBFR2),A     ; into buffer
5472+ 4011 CD 05 41             call    CNTPLOT         ; plot pixel X1,Y
5473+ 4014 7A                   ld      A,D             ; load SA into A
5474+ 4015 A7                   and     A               ; SA=0?
5475+ 4016 20 1C                jr      NZ,PAINT2       ; no, jump over
5476+ 4018 79                   ld      A,C             ; load Y
5477+ 4019 FE 01                cp      $01             ; Y>0?
5478+ 401B DA 34 40             jp      C,PAINT2        ; no, jump over
5479+ 401E 3D                   dec     A               ; yes, Y=Y-1
5480+ 401F CD 88 40             call    CHECKPY         ; check pixel X1,Y-1
5481+ 4022 20 10                jr      NZ,PAINT2       ; it's set, so jump over
5482+ 4024 0D                   dec     C               ; Y=Y-1
5483+ 4025 C5                   push    BC              ; insert pixel(X1,Y-1) into stack
5484+ 4026 0C                   inc     C               ; retrieve original Y
5485+ 4027 2A 0D 82             ld      HL,(PNT)        ; load PNT
5486+ 402A 23                   inc     HL              ; increment PNT
5487+ 402B 22 0D 82             ld      (PNT),HL        ; store new PNT
5488+ 402E 3E 01                ld      A,$01           ; set SA=1 and...
5489+ 4030 57                   ld      D,A             ; ...store SA into memory
5490+ 4031 C3 47 40             jp      PAINT3          ; jump over
5491+ 4034 7A           PAINT2: ld      A,D             ; load SA into A
5492+ 4035 1F                   rra                     ; check if SA=1
5493+ 4036 30 0F                jr      NC,PAINT3       ; no, jump over
5494+ 4038 79                   ld      A,C             ; load Y
5495+ 4039 FE 01                cp      $01             ; Y>0?
5496+ 403B DA 47 40             jp      C,PAINT3        ; no, jump over
5497+ 403E 3D                   dec     A               ; Y=Y-1
5498+ 403F CD 88 40             call    CHECKPY         ; check pixel X1,Y-1
5499+ 4042 CA 47 40             jp      Z,PAINT3        ; if pixel is off, jump over
5500+ 4045 AF                   xor     A               ; pixel is on, so...
5501+ 4046 57                   ld      D,A             ; ...set SA=0
5502+ 4047 7B           PAINT3: ld      A,E             ; check if...
5503+ 4048 A7                   and     A               ; SB=0
5504+ 4049 20 1B                jr      NZ,PAINT4       ; no, jump over
5505+ 404B 79                   ld      A,C             ; load Y
5506+ 404C FE BF                cp      $BF             ; Y<191?
5507+ 404E 30 16                jr      NC,PAINT4       ; no, jump over
5508+ 4050 3C                   inc     A               ; Y=Y+1
5509+ 4051 CD 88 40             call    CHECKPY         ; check pixel X1,Y+1
5510+ 4054 20 10                jr      NZ,PAINT4       ; pixel is on, so jump over
5511+ 4056 0C                   inc     C               ; Y=Y+1
5512+ 4057 C5                   push    BC              ; insert pixel(X1,Y+1) into stack
5513+ 4058 0D                   dec     C               ; retrieve original Y
5514+ 4059 2A 0D 82             ld      HL,(PNT)        ; PNT
5515+ 405C 23                   inc     HL              ; PNT=PNT+1
5516+ 405D 22 0D 82             ld      (PNT),HL        ; store PNT
5517+ 4060 3E 01                ld      A,$01           ; SB=1
5518+ 4062 5F                   ld      E,A             ; set SB
5519+ 4063 C3 78 40             jp      PAINT5          ; jump over
5520+ 4066 7B           PAINT4: ld      A,E             ; load SB
5521+ 4067 1F                   rra                     ; check if SB=1
5522+ 4068 30 0E                jr      NC,PAINT5       ; no, jump over
5523+ 406A 79                   ld      A,C             ; load Y
5524+ 406B FE BF                cp      $BF             ; Y<191?
5525+ 406D 30 09                jr      NC,PAINT5       ; no, jump over
5526+ 406F 3C                   inc     A               ; Y=Y+1
5527+ 4070 CD 88 40             call    CHECKPY         ; check pixel X1,Y+1
5528+ 4073 CA 78 40             jp      Z,PAINT5        ; if pixel is off, jump over
5529+ 4076 AF                   xor     A               ; pixel is on, so...
5530+ 4077 5F                   ld      E,A             ; ...set SB=0
5531+ 4078 04           PAINT5: inc     B               ; X1=X1+1
5532+ 4079 CA E5 3F             jp      Z,NXTLOOP       ; if X1>255 (X1=0) then goto next loop
5533+ 407C C3 04 40             jp      MNPAINT         ; otherwise, repeat for next X
5534+ 407F ED 7B 11 82  EXITPAI:ld      SP,(ORGSP)      ; retrieve original SP pointer
5535+ 4083 D1           EXITPA2:pop     DE              ; retrieve DE
5536+ 4084 C1                   pop     BC              ; retrieve BC
5537+ 4085 E1                   pop     HL              ; retrieve HL
5538+ 4086 C9                   ret                     ; return to caller
5539+ 4087 79           CHECKPA:ld      A,C             ; copy Y into A
5540+ 4088 32 07 82     CHECKPY:ld      (TMPBFR2),A     ; store Y
5541+ 408B 78                   ld      A,B             ; copy X1 into A
5542+ 408C 32 05 82             ld      (TMPBFR1),A     ; store X1
5543+ 408F C5                   push    BC              ; save X1,Y
5544+ 4090 D5                   push    DE
5545+ 4091 CD DF 40             call    PNTRTN          ; check if pixel is set/reset
5546+ 4094 D1                   pop     DE
5547+ 4095 C1                   pop     BC              ; retrieve X1,Y
5548+ 4096 C9                   ret                     ; return to caller
5549+ 4097
5550+ 4097
5551+ 4097              ; POINT(x,y): return if a pixel is set (returns color) or if it's reset (0)
5552+ 4097 CD AD 3E     POINT:  call    CHKG2M          ; check if in graphic mode 2
5553+ 409A CD 83 23             call    CHKSYN          ; make sure "(" follows
5554+ 409D 28                   defb    '('
5555+ 409E CD E3 32             call    GETINT          ; get X coords.
5556+ 40A1 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5557+ 40A4 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5558+ 40A7 2C                   defb    ','
5559+ 40A8 CD E3 32             call    GETINT          ; get Y coords,
5560+ 40AB FE C0                cp      $C0             ; check if Y is in range 0~191
5561+ 40AD D2 97 26             jp      NC,FCERR        ; no, raise an FC error
5562+ 40B0 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5563+ 40B3 CD 83 23             call    CHKSYN          ; make sure ")" follows
5564+ 40B6 29                   defb    ')'
5565+ 40B7 E5                   push    HL              ; store current string address - the point after the ")" - ...
5566+ 40B8 FD E1                pop     IY              ; ...into IY
5567+ 40BA CD DF 40             call    PNTRTN          ; check if pixel is set or reset
5568+ 40BD 20 0C                jr      NZ,CTPOINT      ; it's ON, jump over
5569+ 40BF AF                   xor     A               ; no, it's OFF. make sure to reset A...
5570+ 40C0 47                   ld      B,A             ; ...and B
5571+ 40C1 E1           PNTEND: pop     HL              ; drop original return point
5572+ 40C2 FD E5                push    IY              ; load current string address from IY into stack
5573+ 40C4 11 48 2B             ld      DE,RETNUM       ; Address of Return number from function...
5574+ 40C7 D5                   push    DE              ; ...saved on stack
5575+ 40C8 C3 47 2E             jp      ABPASS          ; return AB
5576+ 40CB CB EC        CTPOINT:set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5577+ 40CD F3                   di
5578+ 40CE CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5579+ 40D1 FB                   ei
5580+ 40D2 CB 3F                srl     A               ; shift A...
5581+ 40D4 CB 3F                srl     A               ; ...4 times...
5582+ 40D6 CB 3F                srl     A               ; ...to move foreground color...
5583+ 40D8 CB 3F                srl     A               ; ...into lowest nibble
5584+ 40DA 47                   ld      B,A             ; color into B
5585+ 40DB AF                   xor     A               ; reset MSB
5586+ 40DC C3 C1 40             jp      PNTEND          ; return AB
5587+ 40DF CD 52 41     PNTRTN: call    XY2HL           ; find HL address of pixel at X,Y
5588+ 40E2 57                   ld      D,A             ; store pixel index
5589+ 40E3 F3                   di                      ; disable INTs
5590+ 40E4 CD A7 06             call    READ_VIDEO_LOC  ; read contents of VRAM cell addressed by HL
5591+ 40E7 FB                   ei                      ; re-enable INTs
5592+ 40E8 A2                   and     D               ; is the pixel ON or OFF? (will be checked later)
5593+ 40E9 C9                   ret                     ; return to caller
5594+ 40EA
5595+ 40EA
5596+ 40EA              ; PLOT X,Y[,color]
5597+ 40EA              ; plot a pixel in graphic mode 2
5598+ 40EA CD AD 3E     PLOT:   call    CHKG2M          ; check if in G2 mode
5599+ 40ED CD E3 32             call    GETINT          ; get X coords.
5600+ 40F0 32 05 82             ld      (TMPBFR1),A     ; store it into a temp buffer
5601+ 40F3 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5602+ 40F6 2C                   defb    ','
5603+ 40F7 CD E3 32             call    GETINT          ; get Y coords,
5604+ 40FA FE C0                cp      $C0             ; check if Y is in range 0~191
5605+ 40FC D2 97 26             jp      NC,FCERR        ; no, raise an FC error
5606+ 40FF 32 07 82             ld      (TMPBFR2),A     ; store into a temp buffer
5607+ 4102 CD A3 44             call    CLRPRM          ; check if param "color" has been passed
5608+ 4105 E5           CNTPLOT:push    HL              ; store HL
5609+ 4106 C5                   push    BC              ; store BC
5610+ 4107 D5                   push    DE              ; store DE
5611+ 4108 CD 52 41             call    XY2HL           ; find VRAM address of byte containing pixel at X,Y & return into HL
5612+ 410B D2 46 41             jp      NC,NOGD         ; if carry is reset, there was an error -> so leave
5613+ 410E 57                   ld      D,A             ; move pixel value into D
5614+ 410F 3A 09 82             ld      A,(TMPBFR3)     ; retrieve color
5615+ 4112 A7                   and     A               ; is it 0? (background, or reset pixel)
5616+ 4113 20 11                jr      NZ,CNTPLT1      ; no, continue
5617+ 4115 F3                   di                      ; yes - so, disable INTs
5618+ 4116 CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5619+ 4119 FB                   ei                      ; re-enable INTs
5620+ 411A 5F                   ld      E,A             ; store value of cell
5621+ 411B 7A                   ld      A,D             ; retrieve pixel
5622+ 411C 2F                   cpl                     ; revert bits
5623+ 411D A3                   and     E               ; set video pixel to off
5624+ 411E F3                   di                      ; disable INTs
5625+ 411F CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5626+ 4122 FB                   ei                      ; re-enable INTs
5627+ 4123 C3 46 41             jp      NOGD            ; leave
5628+ 4126 87           CNTPLT1:add     A,A             ; now we move low nibble
5629+ 4127 87                   add     A,A             ; in the high nibble
5630+ 4128 87                   add     A,A             ; by adding A to itself
5631+ 4129 87                   add     A,A             ; 4 times (this is a shift left 4)
5632+ 412A 5F                   ld      E,A             ; move it into E
5633+ 412B F3                   di                      ; disable INTs
5634+ 412C CD A7 06             call    READ_VIDEO_LOC  ; load original value of VRAM cell pointed by HL
5635+ 412F FB                   ei
5636+ 4130 B2                   or      D               ; merge new pixel preserving original pattern
5637+ 4131 F3                   di
5638+ 4132 CD BC 06             call    WRITE_VIDEO_LOC ; write new value into VRAM cell
5639+ 4135 FB                   ei
5640+ 4136 CB EC                set     5,H             ; set to read from color VRAM (it's like adding $2000 to HL)
5641+ 4138 F3                   di
5642+ 4139 CD A7 06             call    READ_VIDEO_LOC  ; load original colors of pixel
5643+ 413C FB                   ei
5644+ 413D E6 0F                and     %00001111       ; reset high nibble (the foreground color)
5645+ 413F B3                   or      E               ; set new foreground color
5646+ 4140 F3                   di
5647+ 4141 CD BC 06             call    WRITE_VIDEO_LOC ; write new color settings
5648+ 4144 FB                   ei                      ; re-enable INTs
5649+ 4145 00                   nop                     ; wait for INTs to be enabled again
5650+ 4146 D1           NOGD:   pop     DE              ; retrieve DE
5651+ 4147 C1                   pop     BC              ; retrieve BC
5652+ 4148 E1                   pop     HL              ; retrieve HL
5653+ 4149 C9                   ret                     ; return to caller
5654+ 414A 80 40 20 10  PXLSET: defb    $80,$40,$20,$10,$08,$04,$02,$01 ; pixel to be set ON
5654+ 414E 08 04 02 01
5655+ 4152                      ; where R(X/8)=> 0=80h, 1=40h, 2=20h, 3=10h, 4=08h, 5=04h, 6=02h, 7=$01
5656+ 4152
5657+ 4152
5658+ 4152              ; compute the VRAM address of the byte containing the pixel
5659+ 4152              ; being pointed by X,Y (TMPBFR1,TMPBFR2)
5660+ 4152              ; byte address is returned into HL
5661+ 4152              ; pixel is returned into A
5662+ 4152              XY2HL:  ; formula is: ADDRESS=(INT(X/8))*8 + (INT(Y/8))*256 + R(Y/8)
5663+ 4152                      ; where R(Y/8) is the remainder of (Y/8)
5664+ 4152                      ; the pixel to be set is given by R(X/8), and data is taken from the array
5665+ 4152 3A 07 82             ld      A,(TMPBFR2)     ; retrieve Y
5666+ 4155 FE C0                cp      $C0             ; Y>=192?
5667+ 4157 D0                   ret     NC              ; yes, so leave
5668+ 4158 1E 08                ld      E,$08           ; load E with divisor
5669+ 415A 57                   ld      D,A             ; and store into D (dividend)
5670+ 415B CD 50 4D             call    DIV_8_8         ; get Y/8, D is quotient=INT(Y/8), and A is remainder
5671+ 415E 4F                   ld      C,A             ; store remainder into C
5672+ 415F 42                   ld      B,D             ; B=(INT(Y/8))*256 (we simply copy quotient into B)
5673+ 4160 60 69                ld      HL,BC           ; copy BC into HL: now HL has the VRAM address of the byte being set
5674+ 4162 3A 05 82             ld      A,(TMPBFR1)     ; retrieve X
5675+ 4165 57                   ld      D,A             ; and move it into D (dividend)
5676+ 4166 CD 50 4D             call    DIV_8_8         ; get X/8, D is quotient=INT(X/8), and A is remainder
5677+ 4169 4F                   ld      C,A             ; store remainder into C
5678+ 416A 7A                   ld      A,D             ; move quotient into A
5679+ 416B 87                   add     A,A             ; multiply quotient by 8
5680+ 416C 87                   add     A,A
5681+ 416D 87                   add     A,A
5682+ 416E 5F                   ld      E,A             ; store result into E
5683+ 416F 16 00                ld      D,$00           ; reset D
5684+ 4171 19                   add     HL,DE           ; add DE to HL, getting the final VRAM address
5685+ 4172 EB                   ex      DE,HL           ; move VRAM address into DE
5686+ 4173 21 4A 41             ld      HL,PXLSET       ; starting address of table for pixel to draw
5687+ 4176 06 00                ld      B,$00           ; reset B
5688+ 4178 09                   add     HL,BC           ; add C (remainder of X/8) to get address of pixel to turn on
5689+ 4179 7E                   ld      A,(HL)          ; load pixel data
5690+ 417A EB                   ex      DE,HL           ; retrieve VRAM pattern address into HL
5691+ 417B 37                   scf                     ; set Carry for normal exit
5692+ 417C C9                   ret                     ; return to caller
5693+ 417D
5694+ 417D
5695+ 417D              ; DRAW X1,Y1,X2,Y2[,color]
5696+ 417D              ; Draw a line using Bresenham's line algorithm from X1,Y1 to X2,Y2
5697+ 417D              ; X1,Y1 can be either less than or greater than X2,Y2 (meaning that)
5698+ 417D              ; the drawing will be ever done from X1,Y2 to X2,Y2, regardless of
5699+ 417D              ; the values. If color is not specified, the foreground color set
5700+ 417D              ; with COLOR will be used
5701+ 417D              X1      equ     TMPBFR1
5702+ 417D              Y1      equ     TMPBFR2
5703+ 417D              X2      equ     VIDEOBUFF
5704+ 417D              Y2      equ     VIDEOBUFF+$02
5705+ 417D              ER      equ     VIDEOBUFF+$04
5706+ 417D              E2      equ     VIDEOBUFF+$06
5707+ 417D              SX      equ     VIDEOBUFF+$08
5708+ 417D              SY      equ     VIDEOBUFF+$0A
5709+ 417D              DX      equ     VIDEOBUFF+$0C
5710+ 417D              DY      equ     VIDEOBUFF+$0E
5711+ 417D CD AD 3E     DRAW:   call    CHKG2M          ; check if in G2 mode
5712+ 4180 CD 85 44             call    CLRTMBF         ; clear TMPBFRx
5713+ 4183 CD 94 44             call    CLRVDBF         ; clear VIDEOBUFF
5714+ 4186 CD E3 32             call    GETINT          ; get X1 coords.
5715+ 4189 32 05 82             ld      (X1),A          ; store it into a temp buffer
5716+ 418C CD 83 23             call    CHKSYN          ; Make sure ',' follows
5717+ 418F 2C                   defb    ','
5718+ 4190 CD E3 32             call    GETINT          ; get Y1 coords.
5719+ 4193 FE C0                cp      $C0             ; check if Y1 is in range 0~191
5720+ 4195 D2 97 26             jp      NC,FCERR        ; no, raise an FC error
5721+ 4198 32 07 82             ld      (Y1),A          ; store into a temp buffer
5722+ 419B CD 83 23             call    CHKSYN          ; Make sure ',' follows
5723+ 419E 2C                   defb    ','
5724+ 419F CD E3 32             call    GETINT          ; get X2 coords.
5725+ 41A2 32 0D 82             ld      (X2),A          ; store it into a temp buffer
5726+ 41A5 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5727+ 41A8 2C                   defb    ','
5728+ 41A9 CD E3 32             call    GETINT          ; get Y2 coords
5729+ 41AC FE C0                cp      $C0             ; check if Y2 is in range 0~191
5730+ 41AE D2 97 26             jp      NC,FCERR        ; no, raise an FC error
5731+ 41B1 32 0F 82             ld      (Y2),A          ; store it into a temp buffer
5732+ 41B4 CD A3 44             call    CLRPRM          ; check for arg. "color" and store it into TMPBFR3
5733+ 41B7 E5                   push    HL              ; store register we'll use
5734+ 41B8 D5                   push    DE
5735+ 41B9 C5                   push    BC
5736+ 41BA ED 5B 05 82          ld      DE,(X1)         ; load X1 and
5737+ 41BE 2A 0D 82             ld      HL,(X2)         ; X2
5738+ 41C1 B7                   or      A               ; clear CARRY
5739+ 41C2 ED 52                sbc     HL,DE           ; DX=X2-X1
5740+ 41C4 CD 46 4D             call    absHL           ; DX=ABS(DX)
5741+ 41C7 22 19 82             ld      (DX),HL         ; store DX
5742+ 41CA 01 FF FF             ld      BC,$FFFF        ; SX=-1
5743+ 41CD 2A 05 82             ld      HL,(X1)
5744+ 41D0 ED 5B 0D 82          ld      DE,(X2)
5745+ 41D4 CD 05 4D             call    CMP16           ; X1<X2?
5746+ 41D7 CA E0 41             jp      Z,X1GR          ; no, X1=X2
5747+ 41DA F2 E0 41             jp      P,X1GR          ; no, X1>X2
5748+ 41DD 01 01 00             ld      BC,$0001        ; yes, so set SX=1
5749+ 41E0 ED 43 15 82  X1GR:   ld      (SX),BC         ; store SX
5750+ 41E4 ED 5B 07 82          ld      DE,(Y1)
5751+ 41E8 2A 0F 82             ld      HL,(Y2)
5752+ 41EB B7                   or      A               ; clear Carry
5753+ 41EC ED 52                sbc     HL,DE           ; DY=Y2-Y1
5754+ 41EE CD 46 4D             call    absHL           ; DY=ABS(DY)
5755+ 41F1 22 1B 82             ld      (DY),HL         ; store DY
5756+ 41F4 01 FF FF             ld      BC,$FFFF        ; SY=-1
5757+ 41F7 2A 07 82             ld      HL,(Y1)
5758+ 41FA ED 5B 0F 82          ld      DE,(Y2)
5759+ 41FE CD 05 4D             call    CMP16           ; is Y1<Y2?
5760+ 4201 CA 0A 42             jp      Z,Y1GR          ; no, Y1=Y2
5761+ 4204 F2 0A 42             jp      P,Y1GR          ; no, Y1>Y2 - jump over
5762+ 4207 01 01 00             ld      BC,$0001        ; yes, so set SY=1
5763+ 420A ED 43 17 82  Y1GR:   ld      (SY),BC         ; store SY
5764+ 420E 2A 1B 82             ld      HL,(DY)         ; ER=DY
5765+ 4211 CD 49 4D             call    negHL           ; ER=-DY
5766+ 4214 22 11 82             ld      (ER),HL         ; store ER
5767+ 4217 2A 19 82             ld      HL,(DX)
5768+ 421A ED 5B 1B 82          ld      DE,(DY)
5769+ 421E CD 05 4D             call    CMP16           ; DX>DY?
5770+ 4221 CA 2D 42             jp      Z,ER2           ; no, DX=DY
5771+ 4224 FA 2D 42             jp      M,ER2           ; no, DX<DY
5772+ 4227 2A 19 82             ld      HL,(DX)         ; reload DX
5773+ 422A 22 11 82             ld      (ER),HL         ; yes: DX>DY, so ER=DX
5774+ 422D 2A 11 82     ER2:    ld      HL,(ER)         ; load ER
5775+ 4230 CB 2C                sra     H               ; right shift (and preserve sign)...
5776+ 4232 CB 1D                rr      L               ; ...of HL, so ER=INT(ER/2)
5777+ 4234 CB 7C                bit     7,H             ; is the number negative?
5778+ 4236 CA 3A 42             jp      Z,STRE2         ; no, jump over
5779+ 4239 23                   inc     HL              ; yes, add 1 'cos INT of a negative number needs to be incremented
5780+ 423A 22 11 82     STRE2:  ld      (ER),HL         ; store ER
5781+ 423D CD 05 41     RPTDRW: call    CNTPLOT         ; plot first pixel
5782+ 4240 2A 05 82             ld      HL,(X1)
5783+ 4243 ED 5B 0D 82          ld      DE,(X2)
5784+ 4247 CD 05 4D             call    CMP16           ; X1=X2?
5785+ 424A 20 0D                jr      NZ,CNTDRW       ; no, continue drawing
5786+ 424C 2A 07 82             ld      HL,(Y1)         ; yes, so check
5787+ 424F ED 5B 0F 82          ld      DE,(Y2)         ; also Y
5788+ 4253 CD 05 4D             call    CMP16           ; Y1=Y2?
5789+ 4256 CA B2 42             jp      Z,ENDDRAW       ; yes, finished drawing: exit
5790+ 4259 ED 5B 11 82  CNTDRW: ld      DE,(ER)
5791+ 425D ED 53 13 82          ld      (E2),DE         ; E2=ER
5792+ 4261 2A 19 82             ld      HL,(DX)
5793+ 4264 CD 49 4D             call    negHL           ; DX=-DX
5794+ 4267 EB                   ex      DE,HL           ; invert DE and HL => HL=E2, DE=-DX
5795+ 4268 CD 05 4D             call    CMP16           ; E2>-DX?
5796+ 426B CA 89 42             jp      Z,DXGR          ; no, E2=-DX: jump
5797+ 426E FA 89 42             jp      M,DXGR          ; no, E2<-DX: jump
5798+ 4271 2A 11 82             ld      HL,(ER)         ; yes
5799+ 4274 ED 5B 1B 82          ld      DE,(DY)
5800+ 4278 B7                   or      A               ; clear CARRY
5801+ 4279 ED 52                sbc     HL,DE           ; ER=ER-DY
5802+ 427B 22 11 82             ld      (ER),HL
5803+ 427E 2A 05 82             ld      HL,(X1)
5804+ 4281 ED 5B 15 82          ld      DE,(SX)
5805+ 4285 19                   add     HL,DE           ; X1=X1+SX (increment X1)
5806+ 4286 22 05 82             ld      (X1),HL
5807+ 4289 2A 13 82     DXGR:   ld      HL,(E2)
5808+ 428C ED 5B 1B 82          ld      DE,(DY)
5809+ 4290 CD 05 4D             call    CMP16           ; E2<DY?
5810+ 4293 CA 3D 42             jp      Z,RPTDRW        ; no, E2=DY: jump
5811+ 4296 F2 3D 42             jp      P,RPTDRW        ; no, E2>DY: jump
5812+ 4299 2A 11 82             ld      HL,(ER)         ; yes
5813+ 429C ED 5B 19 82          ld      DE,(DX)
5814+ 42A0 19                   add     HL,DE           ; ER=ER+DX
5815+ 42A1 22 11 82             ld      (ER),HL
5816+ 42A4 2A 07 82             ld      HL,(Y1)
5817+ 42A7 ED 5B 17 82          ld      DE,(SY)
5818+ 42AB 19                   add     HL,DE           ; Y1=Y1+SY (increment Y1)
5819+ 42AC 22 07 82             ld      (Y1),HL
5820+ 42AF C3 3D 42             jp      RPTDRW          ; repeat
5821+ 42B2 C1           ENDDRAW:pop     BC              ; retrieve BC
5822+ 42B3 D1                   pop     DE              ; retrieve DE
5823+ 42B4 E1                   pop     HL              ; retrieve HL
5824+ 42B5 C9                   ret                     ; return to caller
5825+ 42B6
5826+ 42B6
5827+ 42B6              ; CIRCLE X,Y,R[,C]
5828+ 42B6              ; Draw a circle using Bresenham's circle algorithm with center in X,Y
5829+ 42B6              ; and radius R, with optional color C. If color is not specified, the
5830+ 42B6              ; foreground color set with COLOR will be used
5831+ 42B6              XC      equ     VIDEOBUFF
5832+ 42B6              YC      equ     VIDEOBUFF+$02
5833+ 42B6              RADIUS  equ     VIDEOBUFF+$04
5834+ 42B6              XI      equ     VIDEOBUFF+$06
5835+ 42B6              YI      equ     VIDEOBUFF+$08
5836+ 42B6              DC      equ     VIDEOBUFF+$0A
5837+ 42B6 CD AD 3E     CIRCLE: call    CHKG2M          ; check if in G2 mode
5838+ 42B9 CD 94 44             call    CLRVDBF         ; clear VIDEOBUFF
5839+ 42BC CD E3 32             call    GETINT          ; get X coords.
5840+ 42BF 32 0D 82             ld      (XC),A          ; store it into a temp buffer
5841+ 42C2 CD 83 23             call    CHKSYN          ; Make sure ',' follows
5842+ 42C5 2C                   defb    ','
5843+ 42C6 CD E3 32             call    GETINT          ; get Y coords,
5844+ 42C9 32 0F 82             ld      (YC),A          ; store it into a temp buffer
5845+ 42CC CD 83 23             call    CHKSYN          ; Make sure ',' follows
5846+ 42CF 2C                   defb    ','
5847+ 42D0 CD E3 32             call    GETINT          ; get radius
5848+ 42D3 32 11 82             ld      (RADIUS),A      ; store it into a temp buffer
5849+ 42D6 CD A3 44             call    CLRPRM          ; check if param "color" has been passed
5850+ 42D9 C5                   push    BC              ; store BC
5851+ 42DA D5                   push    DE              ; store DE
5852+ 42DB E5                   push    HL              ; store HL
5853+ 42DC AF                   xor     A               ; clear A,
5854+ 42DD 47                   ld      B,A             ; B,
5855+ 42DE 4F                   ld      C,A             ; C,
5856+ 42DF 57                   ld      D,A             ; D,
5857+ 42E0 67                   ld      H,A             ; and H
5858+ 42E1 ED 43 13 82          ld      (XI),BC         ; clear XI
5859+ 42E5 3A 11 82             ld      A,(RADIUS)      ; load RADIUS into A
5860+ 42E8 6F                   ld      L,A             ; HL now contains R
5861+ 42E9 22 15 82             ld      (YI),HL         ; YI=RADIUS
5862+ 42EC 29                   add     HL,HL           ; R*2
5863+ 42ED EB                   ex      DE,HL           ; put HL into DE
5864+ 42EE 21 03 00             ld      HL,$0003        ; HL = 3
5865+ 42F1 AF                   xor     A               ; clear Carry
5866+ 42F2 ED 52                sbc     HL,DE           ; D=3-(2*R) => HL
5867+ 42F4 22 17 82             ld      (DC),HL         ; store D
5868+ 42F7 CD 56 43             call    DRWCRL          ; draw initial point
5869+ 42FA ED 5B 13 82  RPTCRL: ld      DE,(XI)         ; load XI
5870+ 42FE 2A 15 82             ld      HL,(YI)         ; load YI
5871+ 4301 CD 05 4D             call    CMP16           ; is YI<DI?
5872+ 4304 CA 0D 43             jp      Z,RPTCL1        ; no, YI=XI
5873+ 4307 F2 0D 43             jp      P,RPTCL1        ; no, YI>XI
5874+ 430A C3 52 43             jp      ENDCRL          ; yes, so we've finished
5875+ 430D 21 13 82     RPTCL1: ld      HL,XI
5876+ 4310 34                   inc     (HL)            ; XI=XI+1
5877+ 4311 2A 17 82             ld      HL,(DC)         ; load D
5878+ 4314 7C                   ld      A,H
5879+ 4315 B5                   or      L               ; is D=0? Yes, jump over
5880+ 4316 CA 3A 43             jp      Z,DLSZ
5881+ 4319 CB 7C                bit     7,H             ; is D<0?
5882+ 431B 20 1D                jr      NZ,DLSZ         ; yes, jump over
5883+ 431D ED 5B 15 82          ld      DE,(YI)         ; D>0
5884+ 4321 1B                   dec     DE              ; so, YI=YI-1
5885+ 4322 ED 53 15 82          ld      (YI),DE         ; store YI
5886+ 4326 AF                   xor     A               ; clear Carry
5887+ 4327 2A 13 82             ld      HL,(XI)
5888+ 432A ED 52                sbc     HL,DE           ; HL=XI-YI
5889+ 432C 29                   add     HL,HL
5890+ 432D 29                   add     HL,HL           ; HL=HL*4
5891+ 432E 11 0A 00             ld      DE,10
5892+ 4331 19                   add     HL,DE           ; HL=HL+10
5893+ 4332 ED 5B 17 82          ld      DE,(DC)         ; load D
5894+ 4336 EB                   ex      DE,HL           ; invert DE and HL, so that HL=4*(XI-YI)+10 and DE=D
5895+ 4337 19                   add     HL,DE           ; D=D+4*(XI-YI)+10
5896+ 4338 18 0F                jr      PLTCRL          ; plot next pixel
5897+ 433A 2A 13 82     DLSZ:   ld      HL,(XI)         ; load XI
5898+ 433D 29                   add     HL,HL
5899+ 433E 29                   add     HL,HL           ; XI=XI*4
5900+ 433F 11 06 00             ld      DE,$0006
5901+ 4342 19                   add     HL,DE
5902+ 4343 ED 5B 17 82          ld      DE,(DC)
5903+ 4347 EB                   ex      DE,HL           ; HL=D and DE=4*XI+6
5904+ 4348 19                   add     HL,DE           ; D=D+4*XI+6
5905+ 4349 22 17 82     PLTCRL: ld      (DC),HL         ; store new D
5906+ 434C CD 56 43             call    DRWCRL          ; plot pixel
5907+ 434F C3 FA 42             jp      RPTCRL          ; repeat
5908+ 4352 E1           ENDCRL: pop     HL
5909+ 4353 D1                   pop     DE
5910+ 4354 C1                   pop     BC
5911+ 4355 C9                   ret                     ; return to caller
5912+ 4356 2A 0D 82     DRWCRL: ld      HL,(XC)
5913+ 4359 ED 5B 13 82          ld      DE,(XI)
5914+ 435D 19                   add     HL,DE           ; X=XC+XI
5915+ 435E 22 05 82             ld      (X1),HL         ; store X
5916+ 4361 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5917+ 4364 DA 78 43             jp      C,CNTCL1        ; if Carry is set, X is not valid
5918+ 4367 2A 0F 82             ld      HL,(YC)
5919+ 436A ED 5B 15 82          ld      DE,(YI)
5920+ 436E 19                   add     HL,DE           ; Y=YC+YI
5921+ 436F 22 07 82             ld      (Y1),HL         ; store Y
5922+ 4372 CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5923+ 4375 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5924+ 4378 AF           CNTCL1: xor     A               ; clear Carry
5925+ 4379 2A 0D 82             ld      HL,(XC)
5926+ 437C ED 5B 13 82          ld      DE,(XI)
5927+ 4380 ED 52                sbc     HL,DE           ; X=XC-XI
5928+ 4382 22 05 82             ld      (X1),HL         ; store X
5929+ 4385 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5930+ 4388 DA 9C 43             jp      C,CNTCL2        ; if Carry is set, X is not valid
5931+ 438B 2A 0F 82             ld      HL,(YC)
5932+ 438E ED 5B 15 82          ld      DE,(YI)
5933+ 4392 19                   add     HL,DE           ; Y=YC+YI
5934+ 4393 22 07 82             ld      (Y1),HL         ; store Y
5935+ 4396 CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5936+ 4399 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5937+ 439C 2A 0D 82     CNTCL2: ld      HL,(XC)
5938+ 439F ED 5B 13 82          ld      DE,(XI)
5939+ 43A3 19                   add     HL,DE           ; X=XC+XI
5940+ 43A4 22 05 82             ld      (X1),HL         ; store X
5941+ 43A7 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5942+ 43AA DA C0 43             jp      C,CNTCL3        ; if Carry is set, X is not valid
5943+ 43AD AF                   xor     A               ; clear Carry
5944+ 43AE 2A 0F 82             ld      HL,(YC)
5945+ 43B1 ED 5B 15 82          ld      DE,(YI)
5946+ 43B5 ED 52                sbc     HL,DE           ; Y=YC-YI
5947+ 43B7 22 07 82             ld      (Y1),HL         ; store Y
5948+ 43BA CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5949+ 43BD D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5950+ 43C0 AF           CNTCL3: xor     A               ; clear Carry
5951+ 43C1 2A 0D 82             ld      HL,(XC)
5952+ 43C4 ED 5B 13 82          ld      DE,(XI)
5953+ 43C8 ED 52                sbc     HL,DE           ; X=XC-XI
5954+ 43CA 22 05 82             ld      (X1),HL         ; store X
5955+ 43CD CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5956+ 43D0 DA E6 43             jp      C,CNTCL4        ; if Carry is set, X is not valid
5957+ 43D3 AF                   xor     A               ; clear Carry
5958+ 43D4 2A 0F 82             ld      HL,(YC)
5959+ 43D7 ED 5B 15 82          ld      DE,(YI)
5960+ 43DB ED 52                sbc     HL,DE           ; Y=YC-YI
5961+ 43DD 22 07 82             ld      (Y1),HL         ; store Y
5962+ 43E0 CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5963+ 43E3 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5964+ 43E6 2A 0D 82     CNTCL4: ld      HL,(XC)
5965+ 43E9 ED 5B 15 82          ld      DE,(YI)
5966+ 43ED 19                   add     HL,DE           ; X=XC+YI
5967+ 43EE 22 05 82             ld      (X1),HL         ; store X
5968+ 43F1 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5969+ 43F4 DA 08 44             jp      C,CNTCL5        ; if Carry is set, X is not valid
5970+ 43F7 2A 0F 82             ld      HL,(YC)
5971+ 43FA ED 5B 13 82          ld      DE,(XI)
5972+ 43FE 19                   add     HL,DE           ; Y=YC+XI
5973+ 43FF 22 07 82             ld      (Y1),HL         ; store Y
5974+ 4402 CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5975+ 4405 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5976+ 4408 AF           CNTCL5: xor     A               ; clear Carry
5977+ 4409 2A 0D 82             ld      HL,(XC)
5978+ 440C ED 5B 15 82          ld      DE,(YI)
5979+ 4410 ED 52                sbc     HL,DE           ; X=XC-YI
5980+ 4412 22 05 82             ld      (X1),HL         ; store X
5981+ 4415 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5982+ 4418 DA 2C 44             jp      C,CNTCL6        ; if Carry is set, X is not valid
5983+ 441B 2A 0F 82             ld      HL,(YC)
5984+ 441E ED 5B 13 82          ld      DE,(XI)
5985+ 4422 19                   add     HL,DE           ; Y=YC+XI
5986+ 4423 22 07 82             ld      (Y1),HL         ; store Y
5987+ 4426 CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
5988+ 4429 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
5989+ 442C 2A 0D 82     CNTCL6: ld      HL,(XC)
5990+ 442F ED 5B 15 82          ld      DE,(YI)
5991+ 4433 19                   add     HL,DE           ; X=XC+YI
5992+ 4434 22 05 82             ld      (X1),HL         ; store X
5993+ 4437 CD 75 44             call    VALIDX          ; check if X is valid (0~255)
5994+ 443A DA 50 44             jp      C,CNTCL7        ; if Carry is set, X is not valid
5995+ 443D AF                   xor     A               ; clear Carry
5996+ 443E 2A 0F 82             ld      HL,(YC)
5997+ 4441 ED 5B 13 82          ld      DE,(XI)
5998+ 4445 ED 52                sbc     HL,DE           ; Y=YC-XI
5999+ 4447 22 07 82             ld      (Y1),HL         ; store Y
6000+ 444A CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
6001+ 444D D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6002+ 4450 AF           CNTCL7: xor     A               ; clear Carry
6003+ 4451 2A 0D 82             ld      HL,(XC)
6004+ 4454 ED 5B 15 82          ld      DE,(YI)
6005+ 4458 ED 52                sbc     HL,DE           ; X=XC-YI
6006+ 445A 22 05 82             ld      (X1),HL         ; store X
6007+ 445D CD 75 44             call    VALIDX          ; check if X is valid (0~255)
6008+ 4460 D8                   ret     C               ; if Carry is set, X is not valid
6009+ 4461 AF                   xor     A               ; clear Carry
6010+ 4462 2A 0F 82             ld      HL,(YC)
6011+ 4465 ED 5B 13 82          ld      DE,(XI)
6012+ 4469 ED 52                sbc     HL,DE           ; Y=YC-XI
6013+ 446B 22 07 82             ld      (Y1),HL         ; store Y
6014+ 446E CD 7A 44             call    VALIDY          ; check if Y is valid (0~191)
6015+ 4471 D4 05 41             call    NC,CNTPLOT      ; if Carry is reset, Y is valid and plot the pixel
6016+ 4474 C9                   ret                     ; return to caller
6017+ 4475
6018+ 4475              ; check if X,Y coordinates are valid: 0<=X<=255 and 0<=Y<=191
6019+ 4475              ; input: HL (value to check), can be negative
6020+ 4475              ; output: CARRY flag: reset => VALID  //  set => NOT VALID
6021+ 4475              ; destroys: A
6022+ 4475 AF           VALIDX: xor     A               ; reset A
6023+ 4476 B4                   or      H               ; check if H is 0 (this means that X is in range 0~255 and not negative)
6024+ 4477 C8                   ret     Z               ; yes, we can return (C is clear)
6025+ 4478 37                   scf                     ; set Carry flag to raise error
6026+ 4479 C9                   ret                     ; return to caller
6027+ 447A
6028+ 447A AF           VALIDY: xor     A               ; reset A
6029+ 447B B4                   or      H               ; check if H is 0 (this means that Y is in range 0~255 and not negative)
6030+ 447C 28 02                jr      Z,CNTVALY       ; yes, continue checking
6031+ 447E 37                   scf                     ; no, raise error by setting Carry flag
6032+ 447F C9                   ret                     ; return to caller
6033+ 4480 7D           CNTVALY:ld      A,L
6034+ 4481 FE C0                cp      $C0             ; is Y<192? Carry is set if Y<192
6035+ 4483 3F                   ccf                     ; invert Carry, so Carry=0 means OK, Carry=1 means ERROR
6036+ 4484 C9                   ret                     ; return to caller
6037+ 4485
6038+ 4485
6039+ 4485
6040+ 4485              ; cleat TMPBFR1-4 buffers before using them
6041+ 4485 AF           CLRTMBF:xor     A               ; reset A
6042+ 4486 E5                   push    HL              ; store HL
6043+ 4487 C5                   push    BC              ; store BC
6044+ 4488 21 05 82             ld      HL,TMPBFR1      ; address of 1st location
6045+ 448B 06 08                ld      B,$08           ; 8 locations
6046+ 448D 77           RPCLTMB:ld      (HL),A          ; clear byte
6047+ 448E 23                   inc     HL              ; next location
6048+ 448F 10 FC                djnz    RPCLTMB         ; repeat
6049+ 4491 C1                   pop     BC              ; retrieve BC
6050+ 4492 E1                   pop     HL              ; retrieve HL
6051+ 4493 C9                   ret                     ; return to caller
6052+ 4494
6053+ 4494
6054+ 4494              ; clear VIDEOBUFF before using it as temp buffer
6055+ 4494 AF           CLRVDBF:xor     A               ; clear A
6056+ 4495 C5                   push    BC              ; store BC
6057+ 4496 E5                   push    HL              ; store HL
6058+ 4497 06 28                ld      B,$28           ; 40 cells
6059+ 4499 21 0D 82             ld      HL,VIDEOBUFF    ; address of 1st cell
6060+ 449C 77           RPTCVBF:ld      (HL),A          ; clear cell
6061+ 449D 23                   inc     HL              ; next cell
6062+ 449E 10 FC                djnz    RPTCVBF         ; repeat
6063+ 44A0 E1                   pop     HL              ; retrieve HL
6064+ 44A1 C1                   pop     BC              ; retrieve BC
6065+ 44A2 C9                   ret                     ; return to caller
6066+ 44A3
6067+ 44A3
6068+ 44A3              ; check if a color is passed as argument with PLOT, DRAW, and CIRCLE
6069+ 44A3              ; commands. If not present, the default foreground color will be used
6070+ 44A3 3A 03 82     CLRPRM: ld      A,(FRGNDCLR)    ; load foreground color
6071+ 44A6 32 09 82             ld      (TMPBFR3),A     ; store into temp buffer
6072+ 44A9 2B                   dec     HL              ; dec 'cos GETCHR INCs
6073+ 44AA CD CC 25             call    GETCHR          ; Get next character
6074+ 44AD C8                   ret     Z               ; return foreground color if nothing follows
6075+ 44AE CD 83 23             call    CHKSYN          ; Make sure ',' follows
6076+ 44B1 2C                   defb    ','
6077+ 44B2 CD E3 32             call    GETINT          ; get value
6078+ 44B5 CD A7 3E             call    CHKCLR0         ; check if color is in range 0~15
6079+ 44B8 32 09 82             ld      (TMPBFR3),A     ; store color into temp buffer
6080+ 44BB C9                   ret                     ; return to caller
6081+ 44BC
6082+ 44BC
6083+ 44BC              ; no graphics mode error: raised when a graphics command is invoked
6084+ 44BC              ; out of graphic 2 mode.
6085+ 44BC 1E 2A        GMERR:  ld      E,GM            ; load Graphics Mode Error flag
6086+ 44BE C3 9D 20             jp      ERROR           ; print error
6087+ 44C1
6088+ 44C1
6089+ 44C1              ; set a serial port: params are PORT,BPS,DATA,PARITY,STOP
6090+ 44C1              ; PORT=1/2; BPS=1,200~57,600 (see below), DATA=5/6/7/8
6091+ 44C1              ; PARITY: 0=no parity; 1=ODD parity; 2=EVEN parity;
6092+ 44C1              ; STOP=0/1/2/3: 0=0 bit; 1=1 bit; 2=1.5 bits; 3=2 bits
6093+ 44C1              ; PORT 1 acts as a char device; PORT 2 acts as a block device
6094+ 44C1              ; DATA,PARITY, and STOP are optional: if nothing follows BPS,
6095+ 44C1              ; they are assumed to be 8,0,1 resp.
6096+ 44C1              PRTNUM  equ     VIDEOBUFF
6097+ 44C1              BPS     equ     PRTNUM+$01
6098+ 44C1              DATABT  equ     BPS+$02
6099+ 44C1              PARBT   equ     DATABT+$01
6100+ 44C1              STPBT   equ     PARBT+$01
6101+ 44C1              SIOBFR  equ     STPBT+$01
6102+ 44C1 CD E3 32     SERIAL: call    GETINT          ; get port #
6103+ 44C4 A7                   and     A               ; is it zero?
6104+ 44C5 CA 97 26             jp      Z,FCERR         ; yes, error
6105+ 44C8 FE 03                cp      $03             ; is it 1 or 2?
6106+ 44CA D2 EA 46             jp      NC,SCERR        ; no, error
6107+ 44CD 32 0D 82             ld      (PRTNUM),A      ; store port number into a temp buffer
6108+ 44D0 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6109+ 44D3 2C                   defb    ','
6110+ 44D4 2B                   dec     HL
6111+ 44D5 CD CC 25             call    GETCHR          ; check what's following
6112+ 44D8 CA 83 20             jp      Z,SNERR         ; error if nothing follows
6113+ 44DB 30 05                jr      NC,SERVAR       ; it's not a number, try a variable
6114+ 44DD CD 9C 26             call    ATOH            ; get bps (returned into DE)
6115+ 44E0 18 0F                jr      CHKZSER         ; jump over
6116+ 44E2 CD 5D 2A     SERVAR: call    GETNUM          ; get number
6117+ 44E5 CD 6A 38             call    TSTSGN          ; check value
6118+ 44E8 FA 97 26             jp      M,FCERR         ; negative - illegal function call
6119+ 44EB 3A 5C 82             ld      A,(FPEXP)       ; Get integer value to DE
6120+ 44EE CD 12 39             call    FPINT           ; get integer number into BCDE - drop BC 'cause isn't necessary
6121+ 44F1 7A           CHKZSER:ld      A,D             ; bps is into DE - move MSB into A
6122+ 44F2 B3                   or      E               ; check if bps=0
6123+ 44F3 20 3A                jr      NZ,CNTSER       ; no, continue checking
6124+ 44F5                      ; if baud rate is 0, then close the serial comm.
6125+ 44F5 3A 0D 82     RSTSERS:ld      A,(PRTNUM)      ; yes, so reset the channel. First, load port number
6126+ 44F8 3D                   dec     A               ; subtract 1, so that serial channel is 0=>A and 1=>B
6127+ 44F9 C6 22                add     SIO_CA          ; find correct channel
6128+ 44FB 4F                   ld      C,A             ; store serial channel
6129+ 44FC F3                   di                      ; disable INTs
6130+ 44FD AF                   xor     A               ; reset A
6131+ 44FE 16 01                ld      D,$01           ; start from WR1
6132+ 4500 06 05                ld      B,$05           ; 5 registers
6133+ 4502 ED 51        RPTRSSR:out     (C),D           ; select register
6134+ 4504 ED 79                out     (C),A           ; reset register
6135+ 4506 14                   inc     D               ; next register
6136+ 4507 10 F9                djnz    RPTRSSR         ; repeat
6137+ 4509 3E 30                ld      A,%00110000     ; write into WR0: error reset, select WR0
6138+ 450B ED 79                out     (C),A           ; send command to serial channel
6139+ 450D 3E 18                ld      A,%00011000     ; write into WR0: channel reset
6140+ 450F ED 79                out     (C),A           ; send command to serial channel
6141+ 4511 FB                   ei                      ; re-enable INTs
6142+ 4512 E5                   push    HL              ; store HL
6143+ 4513 21 47 82             ld      HL,SERIALS_EN   ; serials enabled status byte
6144+ 4516 DB 01                in      A,(PIO_DB)      ; read status LEDs
6145+ 4518 CB 41                bit     0,C             ; check serial port
6146+ 451A 20 09                jr      NZ,SRPT2        ; if bit is set, jump to port 2
6147+ 451C CB B7                res     6,A             ; it's port 1
6148+ 451E CB A7                res     4,A             ; remove possible error LED
6149+ 4520 CB 86                res     0,(HL)          ; disable port 1
6150+ 4522 C3 2B 45             jp      SERLED          ; jump over
6151+ 4525 CB BF        SRPT2:  res     7,A             ; it's port 2
6152+ 4527 CB AF                res     5,A             ; remove possible error LED
6153+ 4529 CB 8E                res     1,(HL)          ; disable port 2
6154+ 452B D3 01        SERLED: out     (PIO_DB),A      ; send new configuration
6155+ 452D E1                   pop     HL              ; retrieve HL
6156+ 452E C9                   ret                     ; return to caller
6157+ 452F                      ; check if bps=1, meaning reactivate RX on serial
6158+ 452F 7A           CNTSER: ld      A,D
6159+ 4530 B2                   or      D               ; check if bps<>1 by first checking D=0
6160+ 4531 20 36                jr      NZ,CNTSER2      ; if not, jump over
6161+ 4533 7B                   ld      A,E             ; then by checking that
6162+ 4534 FE 01                cp      $01             ; E=1
6163+ 4536 20 31                jr      NZ,CNTSER2      ; if not, jump over
6164+ 4538 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6165+ 453B 57                   ld      D,A             ; store port on D
6166+ 453C 3A 47 82             ld      A,(SERIALS_EN)  ; load address of serial status cell
6167+ 453F A2                   and     D               ; check status
6168+ 4540 CA EA 46             jp      Z,SCERR         ; port not open, raise error
6169+ 4543 F3                   di                      ; disable INTs
6170+ 4544 7A                   ld      A,D             ; move port # into A
6171+ 4545 5F                   ld      E,A             ; and also into E
6172+ 4546 87                   add     A
6173+ 4547 87                   add     A               ; move A to left times 2
6174+ 4548 57                   ld      D,A             ; move value into D
6175+ 4549 3A 47 82             ld      A,(SERIALS_EN)  ; load serial status byte
6176+ 454C B2                   or      D               ; re-enable RX
6177+ 454D 32 47 82             ld      (SERIALS_EN),A  ; store new serial status
6178+ 4550 7B                   ld      A,E             ; recover port #
6179+ 4551 3D                   dec     A               ; check port
6180+ 4552 20 0A                jr      NZ,CNTRX2       ; port is #2
6181+ 4554 CD E3 01             call    SIO_A_EI        ; re-enable RX on port 1
6182+ 4557 DB 01                in      A,(PIO_DB)      ; load status LEDs
6183+ 4559 CB A7                res     4,A             ; remove error LED
6184+ 455B C3 65 45             jp      RXEND           ; terminate setting
6185+ 455E CD EB 01     CNTRX2: call    SIO_B_EI        ; re-enable RX on port 2
6186+ 4561 DB 01                in      A,(PIO_DB)      ; load status LEDs
6187+ 4563 CB AF                res     5,A             ; remove error LED
6188+ 4565 D3 01        RXEND:  out     (PIO_DB),A      ; set new status for LEDs
6189+ 4567 FB                   ei                      ; re-enable INTs
6190+ 4568 C9                   ret                     ; return to caller
6191+ 4569                      ; set serial port comm.
6192+ 4569 D5           CNTSER2:push    DE              ; store BPS
6193+ 456A 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6194+ 456D 57                   ld      D,A             ; move port # into D
6195+ 456E 3A 47 82             ld      A,(SERIALS_EN)  ; check if serial port is already open
6196+ 4571 A2                   and     D               ; by ANDing A with D
6197+ 4572 D1                   pop     DE              ; retrieve BPS
6198+ 4573 CA 7B 45             jp      Z,CNTSER3       ; not open, continue
6199+ 4576 1E 2E                ld      E,SA            ; already open, so raise a "Serial Port Already Error"
6200+ 4578 C3 9D 20             jp      ERROR           ; and leave
6201+ 457B E5           CNTSER3:push    HL              ; store HL
6202+ 457C 21 00 E1             ld      HL,$E100        ; check bps. start with HL=57,600
6203+ 457F CD 05 4D             call    CMP16           ; is bps<=57,600?
6204+ 4582 E1                   pop     HL              ; but first, recover HL
6205+ 4583 DA EA 46             jp      C,SCERR         ; no (bps>57,600) then error
6206+ 4586 ED 53 0E 82          ld      (BPS),DE        ; store bps
6207+ 458A 2B                   dec     HL              ; dec 'cos GETCHR INCs
6208+ 458B CD CC 25             call    GETCHR          ; Get next character
6209+ 458E CA C6 45             jp      Z,DEFSER        ; defaults if nothing follows
6210+ 4591 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6211+ 4594 2C                   defb    ','
6212+ 4595 CD E3 32             call    GETINT          ; get data bits
6213+ 4598 FE 05                cp      $05             ; is it <5?
6214+ 459A DA EA 46             jp      C,SCERR         ; yes, error
6215+ 459D FE 09                cp      $09             ; is it >=9?
6216+ 459F D2 97 26             jp      NC,FCERR        ; yes, error
6217+ 45A2 32 10 82             ld      (DATABT),A      ; store data bits
6218+ 45A5 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6219+ 45A8 2C                   defb    ','
6220+ 45A9 CD E3 32             call    GETINT          ; get parity bits
6221+ 45AC BF FE 03             cp      A,$03           ; check if parity is in range 0~2
6222+ 45AF D2 EA 46             jp      NC,SCERR        ; no, error
6223+ 45B2 32 11 82             ld      (PARBT),A       ; store parity
6224+ 45B5 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6225+ 45B8 2C                   defb    ','
6226+ 45B9 CD E3 32             call    GETINT          ; get stop bits
6227+ 45BC FE 03                cp      $03             ; is it >=3?
6228+ 45BE D2 EA 46             jp      NC,SCERR        ; yes, error
6229+ 45C1 32 12 82             ld      (STPBT),A       ; store stop bits
6230+ 45C4 18 0D                jr      SETSER          ; jump to set serial
6231+ 45C6 3E 08        DEFSER: ld      A,$08           ; 8 bits for data
6232+ 45C8 32 10 82             ld      (DATABT),A
6233+ 45CB AF                   xor     A               ; no parity bit
6234+ 45CC 32 11 82             ld      (PARBT),A
6235+ 45CF 3C                   inc     A               ; 1 bit for stop
6236+ 45D0 32 12 82             ld      (STPBT),A
6237+ 45D3                      ; check if bps are legal
6238+ 45D3 E5           SETSER: push    HL              ; store HL
6239+ 45D4 D5                   push    DE              ; store DE
6240+ 45D5 DD E5                push    IX              ; store IX
6241+ 45D7 DD 21 C5 46          ld      IX,SUP_BPS      ; allowed BPSs
6242+ 45DB 06 0B                ld      B,$0B           ; 11 items
6243+ 45DD 0E 00                ld      C,$00           ; reset pointer
6244+ 45DF 2A 0E 82     CKBPS:  ld      HL,(BPS)        ; load BPS
6245+ 45E2 DD 5E 00             ld      E,(IX+0)        ; load LSB of item
6246+ 45E5 DD 56 01             ld      D,(IX+1)        ; load MSB of item
6247+ 45E8 CD 05 4D             call    CMP16           ; is it equal?
6248+ 45EB CA F8 45             jp      Z,SET_PT        ; yes, found a correspondance
6249+ 45EE DD 23                inc     IX
6250+ 45F0 DD 23                inc     IX              ; no, go to next entry
6251+ 45F2 0C                   inc     C               ; increment pointer
6252+ 45F3 10 EA                djnz    CKBPS           ; repeat for 10 entries
6253+ 45F5 C3 E6 46             jp      SCERR1          ; if nothing found, raise an error
6254+ 45F8              SET_PT: ;init CTC CH0: CH0 provides RX/TX clock to SIO port A
6255+ 45F8                      ; TO0 output frequency=INPUT CLK/time constant. Time constant is set to get 16 times
6256+ 45F8                      ; the requested baud rate. I.e., if bps is 19,200 then time constast is set to 6 because
6257+ 45F8                      ; 1,843,200/6 = 307,200 Hz (that is 19,200 x 16)
6258+ 45F8 F3                   di                      ; disable INTs
6259+ 45F9 06 00                ld      B,$00           ; reset B
6260+ 45FB 21 DB 46             ld      HL,CTC_CFG      ; address of first CTC divider
6261+ 45FE 09                   add     HL,BC           ; adjust for correct CTC divider
6262+ 45FF 0E 10                ld      C,CTC_CH0       ; CTC channel 0
6263+ 4601 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6264+ 4604 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6265+ 4605 DA 09 46             jp      C,SET_CTC       ; port 1 => ch. 0, so continue
6266+ 4608 0C                   inc     C               ; port 2 => ch. 1, increment address port into C
6267+ 4609 3E 47        SET_CTC:ld      A,%01000111     ; interrupt off, counter mode, prsc=16 (doesn't matter), ext. start,
6268+ 460B                                              ; start upon loading time constant, time constant follows, sw reset, command word
6269+ 460B ED 79                out     (C),A           ; configure CTC channel
6270+ 460D 7E                   ld      A,(HL)          ; load CTC divider
6271+ 460E ED 79                out     (C),A           ; send divider
6272+ 4610                      ; configure SIO
6273+ 4610 21 54 03             ld      HL,SIO_A_SETS   ; load default settings for SIO
6274+ 4613 11 13 82             ld      DE,SIOBFR       ; into a temp buffer
6275+ 4616 01 0A 00             ld      BC,$000A        ; 10 items to copy
6276+ 4619 ED B0                ldir                    ; copy SIO settings into TEMP buffer
6277+ 461B 3A 18 82             ld      A,(SIOBFR+5)    ; load WR5 setting
6278+ 461E 47                   ld      B,A             ; move it into B
6279+ 461F 3A 10 82             ld      A,(DATABT)      ; load DATA bits
6280+ 4622 FE 05                cp      $05             ; is it 5 bits?
6281+ 4624 20 06                jr      NZ,BITS6        ; no, jump over
6282+ 4626 CB B0                res     6,B
6283+ 4628 CB A8                res     5,B             ; set D6 & D5 to 0
6284+ 462A 18 19                jr      SETPAR          ; jump to set parity
6285+ 462C FE 06        BITS6:  cp      $06             ; is it 6 bits?
6286+ 462E 20 06                jr      NZ,BITS7        ; no, jump over
6287+ 4630 CB F0                set     6,B
6288+ 4632 CB A8                res     5,B             ; set D6 & D5 to 1,0
6289+ 4634 18 0F                jr      SETPAR          ; jump to set parity
6290+ 4636 FE 07        BITS7:  cp      $07             ; is it 7 bits?
6291+ 4638 20 07                jr      NZ,BITS8        ; no, jump over
6292+ 463A CB B0                res     6,B
6293+ 463C CB E8                set     5,B             ; set D6 & D5 to 0,1
6294+ 463E C3 45 46             jp      SETPAR          ; jump to set parity
6295+ 4641 CB F0        BITS8:  set     6,B
6296+ 4643 CB E8                set     5,B             ; set D6 & D5 to 1,1
6297+ 4645 21 48 82     SETPAR: ld      HL,SERABITS     ; load address for storing data bits
6298+ 4648 3A 0D 82             ld      A,(PRTNUM)      ; check serial port number
6299+ 464B 3D                   dec     A               ; is it port #1?
6300+ 464C CA 50 46             jp      Z,SETPAR2       ; yes, jump over
6301+ 464F 23                   inc     HL              ; port #2, use SERBBITS instead
6302+ 4650 78           SETPAR2:ld      A,B             ; retrieve DATA bits
6303+ 4651 32 18 82             ld      (SIOBFR+5),A    ; save DATA bits
6304+ 4654 E6 60                and     %01100000       ; filter only D5&D6 bits
6305+ 4656 87                   add     A,A             ; shift left times 1
6306+ 4657 77                   ld      (HL),A          ; store for SIO_EI & SIO_DI functions
6307+ 4658 3A 12 82             ld      A,(STPBT)       ; load STOP bits
6308+ 465B 87                   add     A,A
6309+ 465C 87                   add     A,A             ; 2 left shifts
6310+ 465D 47                   ld      B,A             ; move forming byte into B
6311+ 465E 3A 11 82             ld      A,(PARBT)       ; load PARITY setting
6312+ 4661 A7                   and     A               ; is it 0?
6313+ 4662 CA 6D 46             jp      Z,STRPAR        ; yes, jump over
6314+ 4665 CB C0                set     0,B             ; set PARITY on
6315+ 4667 3D                   dec     A               ; is parity ODD?
6316+ 4668 CA 6D 46             jp      Z,STRPAR        ; yes, so jump over
6317+ 466B CB C8                set     1,B             ; no, it's EVEN so set the corresponding bit
6318+ 466D 3A 16 82     STRPAR: ld      A,(SIOBFR+3)    ; load WR4 setting
6319+ 4670 E6 F0                and     %11110000       ; reset STOP & PARITY bits
6320+ 4672 B0                   or      B               ; set new STOP & PARITY bits
6321+ 4673 32 16 82             ld      (SIOBFR+3),A    ; store new value
6322+ 4676                      ;set up TX and RX:
6323+ 4676                      ; the followings are settings for channel A
6324+ 4676 21 13 82             ld      HL,SIOBFR       ; settings for SIO ch. A
6325+ 4679 06 06                ld      B,$06           ; 6 bytes to send
6326+ 467B 0E 22                ld      C,SIO_CA        ; I/O address of SIO ch.A
6327+ 467D 3A 0D 82             ld      A,(PRTNUM)      ; load port number
6328+ 4680 1F                   rra                     ; is it 1 (Carry=1) or 2 (Carry=0)
6329+ 4681 DA 85 46             jp      C,SRLCNT        ; port 1, continue
6330+ 4684 0C                   inc     C               ; port 2, increment address port into C
6331+ 4685 ED B3        SRLCNT: otir                    ; send bytes to SIO
6332+ 4687                      ; the following are settings for channel B (don't need to load HL since settings are contigous)
6333+ 4687 06 04                ld      B,$04           ; other 4 bytes to send
6334+ 4689 51                   ld      D,C             ; store port address into D
6335+ 468A 0E 23                ld      C,SIO_CB        ; I/O address of SIO ch.B
6336+ 468C ED B3                otir                    ; send bytes to SIO
6337+ 468E                      ; the following are settings for selected channel
6338+ 468E 3E 01                ld      A,$01           ; write into WR0: select WR1
6339+ 4690 4A                   ld      C,D             ; retrieve port address
6340+ 4691 ED 79                out     (C),A
6341+ 4693 3E 18                ld      A,%00011000     ; interrupts on every RX char; parity is no special condition;
6342+ 4695                                              ; buffer overrun is special condition
6343+ 4695 ED 79                out     (C),A
6344+ 4697 21 47 82             ld      HL,SERIALS_EN
6345+ 469A 3A 0D 82             ld      A,(PRTNUM)      ; retrieve serial channel
6346+ 469D 3D                   dec     A               ; channel A?
6347+ 469E 20 10                jr      NZ,ENCHB        ; no, jump over
6348+ 46A0 CD E3 01             call    SIO_A_EI        ; enable RX on SIO channel A
6349+ 46A3 CB C6                set     0,(HL)          ; set serial port 1 status ON
6350+ 46A5 CB D6                set     2,(HL)          ; set serial port 1 RX ON
6351+ 46A7                      ; back to normal running
6352+ 46A7 FB                   ei                      ; re-enable INTs
6353+ 46A8 DB 01                in      A,(PIO_DB)      ; load status LEDs
6354+ 46AA CB F7                set     6,A             ; set status LED on
6355+ 46AC CB A7                res     4,A             ; set error LED off
6356+ 46AE 18 0E                jr      EXNRM           ; leave
6357+ 46B0 CD EB 01     ENCHB:  call    SIO_B_EI        ; enable RX on SIO channel B
6358+ 46B3 CB CE                set     1,(HL)          ; set serial port 2 status ON
6359+ 46B5 CB DE                set     3,(HL)          ; set serial port 2 RX ON
6360+ 46B7                      ; back to normal running
6361+ 46B7 FB                   ei                      ; re-enable INTs
6362+ 46B8 DB 01                in      A,(PIO_DB)      ; load status LEDs
6363+ 46BA CB FF                set     7,A             ; set status LED on
6364+ 46BC CB AF                res     5,A             ; set error LED off
6365+ 46BE D3 01        EXNRM:  out     (PIO_DB),A      ; send new configuration
6366+ 46C0 DD E1                pop     IX              ; retrieve IX
6367+ 46C2 D1                   pop     DE              ; retrieve DE
6368+ 46C3 E1                   pop     HL              ; retrieve HL
6369+ 46C4 C9                   ret                     ; return to caller
6370+ 46C5
6371+ 46C5              ; allowed bps (Bauds per second)
6372+ 46C5 00 E1 00 96  SUP_BPS:defw    57600,38400,28800,19200,14400,9600,4800,3600,2400,1200,600
6372+ 46C9 80 70 00 4B
6372+ 46CD 40 38 80 25
6372+ 46D1 C0 12 10 0E
6372+ 46D5 60 09 B0 04
6372+ 46D9 58 02
6373+ 46DB              ; corresponding CTC divider
6374+ 46DB 02 03 04 06  CTC_CFG:defb    2,3,4,6,8,12,24,32,48,96,192
6374+ 46DF 08 0C 18 20
6374+ 46E3 30 60 C0
6375+ 46E6
6376+ 46E6
6377+ 46E6              ; serial configuration error
6378+ 46E6 DD E1        SCERR1: pop     IX              ; retrieve IX
6379+ 46E8 D1                   pop     DE              ; retrieve DE
6380+ 46E9 E1                   pop     HL              ; retrieve HL
6381+ 46EA 1E 2C        SCERR:  ld      E,SC            ; Serial Configuration Error
6382+ 46EC C3 9D 20             jp      ERROR           ; print error
6383+ 46EF
6384+ 46EF
6385+ 46EF              ; serial buffer overrun
6386+ 46EF CD 99 28     SOERR:  call    PRNTCRLF
6387+ 46F2 1E 30                ld      E,SO            ; Serial Buffer Overrun
6388+ 46F4 C3 9D 20             jp      ERROR
6389+ 46F7
6390+ 46F7
6391+ 46F7              ; check for direct mode:
6392+ 46F7              ; Z is set if in direct mode, reset otherwise
6393+ 46F7 E5           DIRMOD: push    HL              ; Save code string address
6394+ 46F8 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6395+ 46FB 23                   inc     HL              ; -1 means direct statement
6396+ 46FC 7C                   ld      A,H
6397+ 46FD B5                   or      L
6398+ 46FE E1                   pop     HL              ; Restore code string address
6399+ 46FF C9                   ret
6400+ 4700
6401+ 4700
6402+ 4700              ; HELP lists the line program where an error occured
6403+ 4700 CD F7 46     HELP:   call    DIRMOD          ; check if in direct mode
6404+ 4703 C2 19 47             jp      NZ,HLPERR       ; raise error if in indirect mode
6405+ 4706 E5                   push    HL              ; store HL
6406+ 4707 2A B1 80             ld      HL,(HLPLN)      ; load HELP line
6407+ 470A 23                   inc     HL              ; increment HL
6408+ 470B 7C                   ld      A,H
6409+ 470C B5                   or      L               ; check if there is a line into the HELP reg.
6410+ 470D E1                   pop     HL
6411+ 470E CA 19 47             jp      Z,HLPERR        ; no line found, raise error
6412+ 4711 ED 5B B1 80          ld      DE,(HLPLN)      ; recover line
6413+ 4715 C1                   pop     BC              ; remove BC from stack since it's not needed anymore for LIST
6414+ 4716 C3 19 24             jp      LST01H          ; jump to list line
6415+ 4719 1E 32        HLPERR: ld      E,HP            ; HELP call error
6416+ 471B C3 9D 20             jp      ERROR           ; raise error
6417+ 471E
6418+ 471E
6419+ 471E              ; KEY command to list/modify function keys and auto-repeat
6420+ 471E 2B           KEY:    dec     HL              ; dec 'cos GETCHR INCs
6421+ 471F CD CC 25             call    GETCHR          ; Get next character
6422+ 4722 CA A2 47             jp      Z,LSTKEYS       ; jump if nothing follows
6423+ 4725                      ; change FN keys
6424+ 4725 CD E3 32             call    GETINT          ; get a number
6425+ 4728 A7                   and     A               ; is it 0?
6426+ 4729 20 10                jr      NZ,KEYCH        ; no, jump over
6427+ 472B E5           RESFN:  push    HL              ; yes - reset FN keys to defaults
6428+ 472C D5                   push    DE              ; store HL & DE
6429+ 472D 21 71 1F             ld      HL,AUTORP       ; pointer to default auto-repeat delays and FN keys texts
6430+ 4730 11 B3 80             ld      DE,KEYDEL       ; pointer to destination
6431+ 4733 01 82 00             ld      BC,$0082        ; 130 chars to be copied (2xauto-delay, 128xFN keys)
6432+ 4736 ED B0                ldir                    ; restore default texts
6433+ 4738 D1                   pop     DE              ; retrieve DE
6434+ 4739 E1                   pop     HL              ; retrieve HL
6435+ 473A C9                   ret                     ; return to caller
6436+ 473B FE 09        KEYCH:  cp      $09             ; is it >= 9?
6437+ 473D D2 55 48             jp      NC,SETREP       ; yes - jump over
6438+ 4740 3D                   dec     A               ; FN key in range 0~7
6439+ 4741 87                   add     A,A             ; multiply A...
6440+ 4742 87                   add     A,A             ; ... times 4...
6441+ 4743 87                   add     A,A             ; ... to get the correct...
6442+ 4744 87                   add     A,A             ; ... offset fo FN key text
6443+ 4745 32 05 82             ld      (TMPBFR1),A     ; store FN key offset...
6444+ 4748 AF                   xor     A               ; ...in a...
6445+ 4749 32 06 82             ld      (TMPBFR1+1),A   ; ...16-bit register
6446+ 474C CD 83 23             call    CHKSYN          ; Make sure ',' follows
6447+ 474F 2C                   defb    ','
6448+ 4750 44 4D                ld      BC,HL           ; copy address into BC
6449+ 4752 CD 6F 2A             call    EVAL            ; Evaluate expression (in E there is the length)
6450+ 4755 E5                   push    HL              ; store string pointer
6451+ 4756 3A 94 81             ld      A,(TYPE)        ; Get variable type
6452+ 4759 B7                   or      A               ; Is it a string variable?
6453+ 475A CA 83 20             jp      Z,SNERR         ; no - syntax error
6454+ 475D CD A8 30             call    GSTRCU          ; Current string to pool
6455+ 4760 CD B9 38             call    LOADFP          ; Move string block data to (BC=pointer, DE=length)
6456+ 4763 7B                   ld      A,E             ; copy length into A
6457+ 4764 FE 11                cp      $11             ; is length > 16?
6458+ 4766 DA 6B 47             jp      C,DECLN1        ; no, jump over
6459+ 4769 1E 10                ld      E,$10           ; yes, so set length to 16
6460+ 476B 3E 10        DECLN1: ld      A,$10           ; calculate how many...
6461+ 476D 93                   sub     E               ; ...null chars needed to fill up...
6462+ 476E 57                   ld      D,A             ; ...the FN key text
6463+ 476F C5                   push    BC              ; store address of string
6464+ 4770 ED 4B 05 82          ld      BC,(TMPBFR1)    ; load FN key offset
6465+ 4774 21 B5 80             ld      HL,FNKEYS       ; load address of FN keys texts
6466+ 4777 09                   add     HL,BC           ; get corrected address
6467+ 4778 C1                   pop     BC              ; retrieve address of string chars
6468+ 4779 0A           CPKEY:  ld      A,(BC)          ; load char from string
6469+ 477A FE 0D                cp      CR              ; return?
6470+ 477C CA 89 47             jp      Z,CPKEY2        ; yes, store char
6471+ 477F FE 7B                cp      $7B             ; if char > "z" ?
6472+ 4781 D2 83 20             jp      NC,SNERR        ; yes - syntax error
6473+ 4784 FE 20                cp      $20             ; is char < space?
6474+ 4786 DA 83 20             jp      C,SNERR         ; yes - syntax error
6475+ 4789 FE 61        CPKEY2: cp      $61             ; is it >= 'a'?
6476+ 478B DA 90 47             jp      C,CPKEY3        ; no, continue
6477+ 478E E6 5F                and     %01011111       ; set letters to uppercase
6478+ 4790 77           CPKEY3: ld      (HL),A          ; store char
6479+ 4791 23                   inc     HL              ; next string char
6480+ 4792 03                   inc     BC              ; next free cell
6481+ 4793 1D                   dec     E               ; decrement E
6482+ 4794 20 E3                jr      NZ,CPKEY        ; repeat until 0
6483+ 4796 AF                   xor     A               ; null char
6484+ 4797 14                   inc     D               ; +1 to decrement below
6485+ 4798 15           CPKEY1: dec     D               ; how many null chars to insert?
6486+ 4799 CA A0 47             jp      Z,CPKYEND       ; no more nulls, so exit
6487+ 479C 77                   ld      (HL),A          ; store it
6488+ 479D 23                   inc     HL              ; next cell
6489+ 479E 18 F8                jr      CPKEY1          ; repeat
6490+ 47A0 E1           CPKYEND:pop     HL              ; retrieve pointer to string
6491+ 47A1 C9                   ret                     ; return to caller
6492+ 47A2                                              ; list FN keys
6493+ 47A2 E5           LSTKEYS:push    HL              ; Save code string address
6494+ 47A3 2A AF 80             ld      HL,(LINEAT)     ; Get current line number
6495+ 47A6 23                   inc     HL              ; -1 means direct statement
6496+ 47A7 7C                   ld      A,H
6497+ 47A8 B5                   or      L
6498+ 47A9 E1                   pop     HL              ; Restore code string address
6499+ 47AA C2 83 20             jp      NZ,SNERR        ; raise error if in indirect mode
6500+ 47AD E5                   push    HL              ; store HL
6501+ 47AE D5                   push    DE              ; store DE
6502+ 47AF 21 B5 80             ld      HL,FNKEYS       ; load starting address of FN keys text
6503+ 47B2 0E 01                ld      C,$01           ; 8 function keys
6504+ 47B4 06 10        PRTK4:  ld      B,$10           ; 16 chars each
6505+ 47B6 11 77 48     PRTK2:  ld      DE,CHKEY1       ; message "KEY "
6506+ 47B9 CD 46 48             call    PRTCKEY         ; print it
6507+ 47BC 79                   ld      A,C             ; load FN key
6508+ 47BD C6 30                add     $30             ; get number in ASCI code
6509+ 47BF CD 8E 23             call    OUTC            ; print it
6510+ 47C2 11 7C 48             ld      DE,CHKEY2       ; message ": ""
6511+ 47C5 CD 46 48             call    PRTCKEY         ; print it
6512+ 47C8 3E 01                ld      A,$01           ; " opened
6513+ 47CA 32 05 82             ld      (TMPBFR1),A
6514+ 47CD 7E           LDKEY:  ld      A,(HL)          ; retrieve char
6515+ 47CE A7                   and     A               ; is it zero?
6516+ 47CF CA E2 47             jp      Z,CNTLTK        ; yes, go next char
6517+ 47D2 CD 2E 48             call    OPNQT           ; check if quotes are opened
6518+ 47D5 FE 22                cp      $22             ; check if char is "?
6519+ 47D7 CA F7 47             jp      Z,PRTCHR        ; yes, print "chr$("
6520+ 47DA FE 0D                cp      CR              ; is it a CR?
6521+ 47DC CA F7 47             jp      Z,PRTCHR        ; yes, print "chr$("
6522+ 47DF CD 8E 23     PRTK3:  call    OUTC            ; no, just print it
6523+ 47E2 23           CNTLTK: inc     HL              ; next char
6524+ 47E3 10 E8                djnz    LDKEY           ; continue until finished
6525+ 47E5 CD 1C 48             call    CLSQT           ; check if quotes are still open
6526+ 47E8 3E 0D                ld      A,CR            ; go next line
6527+ 47EA CD 8E 23             call    OUTC            ; print it
6528+ 47ED 0C                   inc     C               ; next FN key
6529+ 47EE 79                   ld      A,C             ; check if...
6530+ 47EF FE 09                cp      $09             ; finished keys?
6531+ 47F1 DA B4 47             jp      C,PRTK4         ; no, repeat 1 more time
6532+ 47F4 D1                   pop     DE              ; retrieve DE
6533+ 47F5 E1                   pop     HL              ; retrieve HL
6534+ 47F6 C9                   ret                     ; return to caller
6535+ 47F7 E5           PRTCHR: push    HL              ; store HL
6536+ 47F8 CD 1C 48             call    CLSQT           ; check if quotes are closed
6537+ 47FB 3E 2B                ld      A,'+'           ; '+' char
6538+ 47FD CD 8E 23             call    OUTC            ; print it
6539+ 4800 11 7F 48             ld      DE,CHKEY3       ; address of "CHR$("
6540+ 4803 CD 46 48             call    PRTCKEY         ; print it
6541+ 4806 E1                   pop     HL              ; recover HL
6542+ 4807 23                   inc     HL              ; next char
6543+ 4808 05                   dec     B               ; increment char counter
6544+ 4809 11 85 48             ld      DE,CHKEY4       ; load address of RETURN
6545+ 480C 7E                   ld      A,(HL)          ; load char
6546+ 480D FE 0D                cp      CR              ; is it a RETURN?
6547+ 480F 20 03                jr      NZ,PTCHR1       ; no, jump over
6548+ 4811 11 88 48             ld      DE,CHKEY5       ; yes, load address of "
6549+ 4814 CD 46 48     PTCHR1: call    PRTCKEY         ; print it
6550+ 4817 3E 29                ld      A,')'           ; char )
6551+ 4819 C3 DF 47             jp      PRTK3           ; continue
6552+ 481C F5           CLSQT:  push    AF              ; store A
6553+ 481D 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6554+ 4820 A7                   and     A               ; are they closed?
6555+ 4821 28 09                jr      Z,CLSQT1        ; if yes, return
6556+ 4823 3E 22                ld      A,$22           ; no, so close them
6557+ 4825 CD 8E 23             call    OUTC            ; print "
6558+ 4828 AF                   xor     A               ; set quotes
6559+ 4829 32 05 82             ld      (TMPBFR1),A     ; as closed
6560+ 482C F1           CLSQT1: pop     AF              ; retrieve A
6561+ 482D C9                   ret                     ; return to caller
6562+ 482E F5           OPNQT:  push    AF              ; store A
6563+ 482F 3A 05 82             ld      A,(TMPBFR1)     ; quote status
6564+ 4832 A7                   and     A               ; are they open?
6565+ 4833 20 0F                jr      NZ,OPNQT1       ; if yes, return
6566+ 4835 3E 2B                ld      A,'+'           ; no, so add '+
6567+ 4837 CD 8E 23             call    OUTC            ; print it
6568+ 483A 3E 22                ld      A,$22           ; and then open quotes
6569+ 483C CD 8E 23             call    OUTC            ; print them
6570+ 483F 3E 01                ld      A,$01           ; set quotes
6571+ 4841 32 05 82             ld      (TMPBFR1),A     ; as opened
6572+ 4844 F1           OPNQT1: pop     AF              ; retrieve A
6573+ 4845 C9                   ret                     ; return to caller
6574+ 4846 F5           PRTCKEY:push    AF              ; store original char
6575+ 4847 1A           PRTK1:  ld      A,(DE)          ; load char
6576+ 4848 A7                   and     A               ; is it 0?
6577+ 4849 CA 53 48             jp      Z,PRTEND        ; yes, finished printing
6578+ 484C CD 8E 23             call    OUTC            ; no, print char
6579+ 484F 13                   inc     DE              ; next char
6580+ 4850 C3 47 48             jp      PRTK1           ; repeat
6581+ 4853 F1           PRTEND: pop     AF              ; retrieve AF
6582+ 4854 C9                   ret                     ; return to caller
6583+ 4855 FE 09        SETREP: cp      $09             ; is it special key 9? (stands for auto-repeat)
6584+ 4857 C2 83 20             jp      NZ,SNERR        ; no, raise an error
6585+ 485A CD 83 23             call    CHKSYN          ; Check for comma
6586+ 485D 2C                   defb    ','
6587+ 485E CD E3 32             call    GETINT          ; get a number
6588+ 4861 32 05 82             ld      (TMPBFR1),A     ; store it
6589+ 4864 CD 83 23             call    CHKSYN          ; Check for comma
6590+ 4867 2C                   defb    ','
6591+ 4868 CD E3 32             call    GETINT          ; get another number
6592+ 486B E5                   push    HL              ; store HL
6593+ 486C 21 B4 80             ld      HL,AUTOKE       ; address of second cell for key auto-repeat
6594+ 486F 77                   ld      (HL),A          ; store auto-repeat delay
6595+ 4870 2B                   dec     HL              ; previous cell
6596+ 4871 3A 05 82             ld      A,(TMPBFR1)     ; retrieve value
6597+ 4874 77                   ld      (HL),A          ; store delay for auto-repeat
6598+ 4875 E1                   pop     HL              ; retrieve HL
6599+ 4876 C9                   ret
6600+ 4877 4B 45 59 20  CHKEY1: defb    "KEY ",0
6600+ 487B 00
6601+ 487C 3A 22 00     CHKEY2: defb    ":",34,0
6602+ 487F 63 68 72 24  CHKEY3: defb    "chr$(",0
6602+ 4883 28 00
6603+ 4885 31 33 00     CHKEY4: defb    "13",0
6604+ 4888 33 34 00     CHKEY5: defb    "34",0
6605+ 488B
6606+ 488B
6607+ 488B              ; check if DOS is enabled
6608+ 488B 3A 4A 82     CHKDOS: ld      A,(DOS_EN)      ; load DOS state
6609+ 488E A7                   and     A               ; check if 0 (NOT enabled)
6610+ 488F C0                   ret     NZ              ; return if enabled
6611+ 4890 1E 38                ld      E,D0            ; DOS not enabled error
6612+ 4892 C3 9D 20             jp      ERROR           ; raise error
6613+ 4895
6614+ 4895
6615+ 4895              ; LOAD "filename"[,1]  <- load a BASIC program from disk
6616+ 4895              ; LOAD x,y,z           <- load a sector from disc, LBA address equals to (((z*256)+y)*256)+x
6617+ 4895 CD E8 48     LOAD:   call    LDSVPT          ; check if in direct mode and what's following
6618+ 4898 CA B6 48             jp      Z,LOADST        ; number - load a single sector
6619+ 489B CD F7 46             call    DIRMOD          ; a file can be loaded ONLY in direct mode
6620+ 489E C2 98 20             jp      NZ,IMERR        ; raise error if in indirect mode
6621+ 48A1 CD B7 4B             call    CHKFN1          ; string - evaluate file name
6622+ 48A4 CD DB 49             call    CHK1AR          ; check for ",1" argument
6623+ 48A7 22 05 82             ld      (TMPBFR1),HL    ; store HL
6624+ 48AA 21 D7 48             ld      HL,TXTLDG       ; loading message
6625+ 48AD CD 65 2F             call    PRS             ; print
6626+ 48B0 CD 7E 15             call    LODFILE         ; load file into memory
6627+ 48B3 C3 CB 48             jp      LDEND           ; retrieve registers and leave
6628+ 48B6 2A 05 82     LOADST: ld      HL,(TMPBFR1)    ; retrieve HL
6629+ 48B9 CD FD 48             call    GET3AR          ; get 3 arguments
6630+ 48BC 22 05 82             ld      (TMPBFR1),HL    ; store HL
6631+ 48BF CD 6F 10             call    CF_SETSTR
6632+ 48C2 CD B1 10             call    CF_RD_SEC       ; read sector
6633+ 48C5 38 0B                jr      C,LDERR
6634+ 48C7 CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6635+ 48CA AF                   xor     A               ; clear Carry
6636+ 48CB 2A 05 82     LDEND:  ld      HL,(TMPBFR1)    ; retrieve HL
6637+ 48CE DA D4 49             jp      C,DOS_ERR       ; jump if DOS error
6638+ 48D1 C9                   ret                     ; return to caller
6639+ 48D2 1E 40        LDERR:  ld      E,D4            ; load error
6640+ 48D4 C3 9D 20             jp      ERROR
6641+ 48D7 4C 6F 61 64  TXTLDG: defb    "Loading file...",CR,0
6641+ 48DB 69 6E 67 20
6641+ 48DF 66 69 6C 65
6641+ 48E3 2E 2E 2E 0D
6641+ 48E7 00
6642+ 48E8
6643+ 48E8
6644+ 48E8              ; common code for LOAD/SAVE to check the type of operation required
6645+ 48E8              ; (load/save a file or a single sector)
6646+ 48E8              ; returns Z if argument is a number, NZ if it's a string
6647+ 48E8 CD 8B 48     LDSVPT: call    CHKDOS          ; check if DOS is enabled
6648+ 48EB 2B                   dec     HL              ; dec 'cos GETCHR INCs
6649+ 48EC CD CC 25             call    GETCHR          ; check if something follows
6650+ 48EF CA 83 20             jp      Z,SNERR         ; if anything else, raise a syntax error
6651+ 48F2 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6652+ 48F5 CD 6F 2A             call    EVAL            ; Evaluate expression
6653+ 48F8 3A 94 81             ld      A,(TYPE)        ; Get variable type
6654+ 48FB B7                   or      A               ; Is it a string variable?
6655+ 48FC C9                   ret                     ; return to caller
6656+ 48FD
6657+ 48FD
6658+ 48FD              ; shared code between LOAD and SAVE
6659+ 48FD              ; get 3 arguments after the command LOAD or SAVE
6660+ 48FD              ; and load them into appropriate registers
6661+ 48FD 2A 05 82     GET3AR: ld      HL,(TMPBFR1)     ; retrieve string code pointer
6662+ 4900 CD E3 32             call    GETINT          ; get 1st pointer
6663+ 4903 32 9D 81             ld      (TMPDBF),A      ; store it into a temp buffer
6664+ 4906 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6665+ 4909 2C                   defb    ','
6666+ 490A CD E3 32             call    GETINT          ; get 2nd pointer
6667+ 490D 32 9E 81             ld      (TMPDBF+1),A    ; store it into a temp buffer
6668+ 4910 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6669+ 4913 2C                   defb    ','
6670+ 4914 CD E3 32             call    GETINT          ; get 3rd pointer
6671+ 4917 32 9F 81             ld      (TMPDBF+2),A    ; store it into a temp buffer
6672+ 491A CD 2D 10             call    CF_INIT         ; init CF card
6673+ 491D DA 9B 20             jp      C,NRERR         ; error if device not available/ready
6674+ 4920 3A 9D 81             ld      A,(TMPDBF)      ; retrieve 1st pointer
6675+ 4923 4F                   ld      C,A
6676+ 4924 3A 9E 81             ld      A,(TMPDBF+1)    ; retrieve 2nd pointer
6677+ 4927 47                   ld      B,A
6678+ 4928 3A 9F 81             ld      A,(TMPDBF+2)    ; retrieve 3rd pointer
6679+ 492B 5F                   ld      E,A
6680+ 492C 16 00                ld      D,$00           ; set disk
6681+ 492E C9                   ret                     ; return to caller
6682+ 492F
6683+ 492F
6684+ 492F              ; save a file onto the disk
6685+ 492F CD 8B 48     SAVE:   call    CHKDOS          ; check if DOS is enabled
6686+ 4932 2B                   dec     HL              ; dec 'cos GETCHR INCs
6687+ 4933 CD CC 25             call    GETCHR          ; check if something follows
6688+ 4936 CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6689+ 4939 22 05 82             ld      (TMPBFR1),HL    ; save current code string pointer
6690+ 493C CD 6F 2A             call    EVAL            ; Evaluate expression
6691+ 493F 3A 94 81             ld      A,(TYPE)        ; Get variable type
6692+ 4942 B7                   or      A               ; Is it a string variable?
6693+ 4943 CA 8A 49             jp      Z,SAVEST        ; no - load a single sector
6694+ 4946 CD B7 4B             call    CHKFN1          ; yes, evaluate string
6695+ 4949 3E 80                ld      A,$80           ; set BAS for file type
6696+ 494B 32 B4 81             ld      (TPBF4),A
6697+ 494E 2B                   dec     HL              ; dec 'cos GETCHR INCs
6698+ 494F CD CC 25             call    GETCHR          ; check if something follows
6699+ 4952 28 21                jr      Z,SAVE1         ; no, jump over
6700+ 4954 CD 83 23             call    CHKSYN          ; yes - Make sure ',' follows
6701+ 4957 2C                   defb    ','
6702+ 4958 CD 5D 2A             call    GETNUM          ; Get memory address
6703+ 495B CD 82 26             call    DEINT           ; Get integer -32768 to 32767
6704+ 495E ED 53 B6 81          ld      (SRTMEM),DE     ; Store DE into a temp. buffer
6705+ 4962 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6706+ 4965 2C                   defb    ','
6707+ 4966 CD 5D 2A             call    GETNUM          ; Get memory address
6708+ 4969 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
6709+ 496C ED 53 B8 81          ld      (ENDMEM),DE     ; Store DE into a temp. buffer
6710+ 4970 3E 81                ld      A,$81           ; set BIN for file type
6711+ 4972 32 B4 81             ld      (TPBF4),A
6712+ 4975 CD F7 46     SAVE1:  call    DIRMOD          ; can be executed ONLY in direct mode
6713+ 4978 C2 98 20             jp      NZ,IMERR        ; raise error if in indirect mode
6714+ 497B 22 05 82             ld      (TMPBFR1),HL    ; store code string pointer
6715+ 497E 21 A8 49             ld      HL,TXTSVG       ; loading message
6716+ 4981 CD 65 2F             call    PRS             ; print
6717+ 4984 CD 1A 14             call    SAVFILE         ; load file into memory
6718+ 4987 C3 9C 49             jp      SVEND           ; retrieve registers and leave
6719+ 498A 2A 9D 81     SAVEST: ld      HL,(TMPDBF)     ; retrieve string code pointer
6720+ 498D CD FD 48             call    GET3AR          ; get 3 arguments
6721+ 4990 22 05 82             ld      (TMPBFR1),HL    ; store code string pointer
6722+ 4993 CD DD 10             call    CF_WR_SEC       ; read sector
6723+ 4996 38 0B                jr      C,SVERR
6724+ 4998 CD A5 10             call    CF_STANDBY      ; put CF in standby mode
6725+ 499B AF                   xor     A               ; clear Carry
6726+ 499C 2A 05 82     SVEND:  ld      HL,(TMPBFR1)    ; retrieve code string pointer
6727+ 499F DA D4 49             jp      C,DOS_ERR       ; jump if DOS error
6728+ 49A2 C9                   ret                     ; return to caller
6729+ 49A3 1E 3E        SVERR:  ld      E,D3            ; save error
6730+ 49A5 C3 9D 20             jp      ERROR
6731+ 49A8 53 61 76 69  TXTSVG: defb    "Saving file... ",CR,0
6731+ 49AC 6E 67 20 66
6731+ 49B0 69 6C 65 2E
6731+ 49B4 2E 2E 20 0D
6731+ 49B8 00
6732+ 49B9
6733+ 49B9
6734+ 49B9              ; FILES
6735+ 49B9              ; list files on disk
6736+ 49B9 CD 8B 48     FILES:  call    CHKDOS          ; check if DOS is enabled
6737+ 49BC CD AA 18             call    CLRIOBF         ; clear I/O buffer
6738+ 49BF CD 2D 10             call    CF_INIT         ; init CF card
6739+ 49C2 DA D4 49             jp      C,DOS_ERR       ; error if device not available/ready
6740+ 49C5 C5                   push    BC              ; store BC
6741+ 49C6 D5                   push    DE              ; store DE
6742+ 49C7 E5                   push    HL              ; store HL
6743+ 49C8 16 01                ld      D,$01           ; print disk details and file list
6744+ 49CA CD D3 12             call    LST_FILES       ; list files
6745+ 49CD E1                   pop     HL
6746+ 49CE D1                   pop     DE
6747+ 49CF C1                   pop     BC
6748+ 49D0 DA D4 49             jp      C,DOS_ERR       ; any error?
6749+ 49D3 C9                   ret                     ; return to caller
6750+ 49D4
6751+ 49D4
6752+ 49D4              ; raise a DOS error
6753+ 49D4 3A 9C 81     DOS_ERR:ld      A,(DOSER)       ; load error code
6754+ 49D7 5F                   ld      E,A             ; copy into E
6755+ 49D8 C3 9D 20             jp      ERROR           ; goto error routine
6756+ 49DB
6757+ 49DB
6758+ 49DB              ; check for ",1" argument
6759+ 49DB              ; check if 1 is passed as argument after LOAD and ERASE
6760+ 49DB AF           CHK1AR: xor     A               ; reset A
6761+ 49DC 32 B4 81             ld      (TPBF4),A       ; default setting
6762+ 49DF                                              ; (load=store file in RAM using current BASIC pointers
6763+ 49DF                                              ; (erase=quick delete)
6764+ 49DF 2B                   dec     HL              ; dec 'cause GETCHR increments
6765+ 49E0 CD CC 25             call    GETCHR          ; check if something follows
6766+ 49E3 C8                   ret     Z               ; if nothing follows, return
6767+ 49E4 CD 83 23             call    CHKSYN          ; Make sure ',' follows
6768+ 49E7 2C                   defb    ','
6769+ 49E8 CD E3 32             call    GETINT          ; get a value
6770+ 49EB 3D                   dec     A               ; decrement it
6771+ 49EC C2 83 20             jp      NZ,SNERR        ; not '1' - raise an error
6772+ 49EF 3C                   inc     A               ; A=1
6773+ 49F0 32 B4 81             ld      (TPBF4),A       ; load=store file in RAM using address in file
6774+ 49F3                                              ; erase=full delete
6775+ 49F3 C9                   ret                     ; return to caller
6776+ 49F4
6777+ 49F4
6778+ 49F4              ; ERASE "filename"
6779+ 49F4              ; erase a file from disk
6780+ 49F4 CD 8B 48     ERASE:  call    CHKDOS          ; check if DOS is enabled
6781+ 49F7 CD AD 4B             call    CHKFLNM         ; check for a disk name
6782+ 49FA CD DB 49             call    CHK1AR          ; check for ",1" argument
6783+ 49FD E5                   push    HL              ; store code string pointer
6784+ 49FE 21 21 4A             ld      HL,ERSTX        ; Point to message
6785+ 4A01 CD 65 2F             call    PRS             ; print message for init confirmation
6786+ 4A04 E1                   pop     HL              ; retrieve HL
6787+ 4A05 CD 8A 4B             call    CNFREQ          ; ask for confirmation
6788+ 4A08 38 33                jr      C,ABRTDS        ; if Carry set then abort
6789+ 4A0A CD 2D 10             call    CF_INIT         ; init CF card
6790+ 4A0D DA D4 49             jp      C,DOS_ERR       ; error if device not available/ready
6791+ 4A10 E5                   push    HL              ; store code string pointer
6792+ 4A11 CD 46 16             call    FIL_ERASE       ; deleted file
6793+ 4A14 E1                   pop     HL
6794+ 4A15 DA D4 49             jp      C,DOS_ERR       ; leave if error
6795+ 4A18 E5                   push    HL              ; store HL
6796+ 4A19 21 2F 4A             ld      HL,ERASED       ; point to message of file deleted
6797+ 4A1C CD 65 2F             call    PRS             ; print it
6798+ 4A1F E1                   pop     HL              ; retrieve HL
6799+ 4A20 C9                   ret                     ; return to caller
6800+ 4A21 44 65 6C 65  ERSTX:  defb    "Delete file? ",0
6800+ 4A25 74 65 20 66
6800+ 4A29 69 6C 65 3F
6800+ 4A2D 20 00
6801+ 4A2F 46 69 6C 65  ERASED: defb    "File deleted",CR,0
6801+ 4A33 20 64 65 6C
6801+ 4A37 65 74 65 64
6801+ 4A3B 0D 00
6802+ 4A3D
6803+ 4A3D
6804+ 4A3D              ; disk operation aborted
6805+ 4A3D 3E 01        ABRTDS: ld      A,$01           ; re-enable...
6806+ 4A3F 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6807+ 4A42 E5                   push    HL              ; store HL
6808+ 4A43 21 4B 4A             ld      HL,ABRTXT       ; Point to message
6809+ 4A46 CD 65 2F             call    PRS             ; print message for leaving init procedure
6810+ 4A49 E1                   pop     HL              ; retrieve HL
6811+ 4A4A C9                   ret                     ; return to caller
6812+ 4A4B 0D 41 62 6F  ABRTXT: defb    CR,"Aborted",0
6812+ 4A4F 72 74 65 64
6812+ 4A53 00
6813+ 4A54
6814+ 4A54
6815+ 4A54               ; DISK command -------
6816+ 4A54              ; execute several operations on a disk:
6817+ 4A54              ; "F": format/rewrite Master Sector
6818+ 4A54              ; "R": rename disk
6819+ 4A54              ; syntax: DISK "arg1"[,arg2][,1]
6820+ 4A54              TPHL:   equ     TMPDBF          ; temp. buffer for code string pointer
6821+ 4A54 CD F7 46     DISK:   call    DIRMOD          ; can be executed ONLY in direct mode
6822+ 4A57 C2 98 20             jp      NZ,IMERR        ; raise error if in indirect mode
6823+ 4A5A CD 8B 48             call    CHKDOS          ; check if DOS is enabled
6824+ 4A5D                      ; check first argument
6825+ 4A5D 2B                   dec     HL              ; dec 'cause GETCHR increments
6826+ 4A5E CD CC 25             call    GETCHR          ; check if something follows
6827+ 4A61 CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6828+ 4A64 CD 6F 2A             call    EVAL            ; Evaluate expression
6829+ 4A67 CD 61 2A             call    TSTSTR          ; Make sure it's a string
6830+ 4A6A 22 9D 81             ld      (TPHL),HL       ; store code string pointer into a temp buffer
6831+ 4A6D CD A8 30             call    GSTRCU          ; check that a string follows
6832+ 4A70 CD B9 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6833+ 4A73 7B                   ld      A,E
6834+ 4A74 3D                   dec     A               ; lenght must be = 1
6835+ 4A75 2A 9D 81             ld      HL,(TPHL)       ; retrieve code string pointer
6836+ 4A78 C2 83 20             jp      NZ,SNERR
6837+ 4A7B 0A                   ld      A,(BC)          ; load command
6838+ 4A7C E6 5F                and     %01011111       ; Force upper case
6839+ 4A7E FE 46                cp      'F'             ; format command?
6840+ 4A80 CA 8B 4A             jp      Z,DSKFRM        ; yes, format disk
6841+ 4A83 FE 52                cp      'R'             ; rename command?
6842+ 4A85 CA 58 4B             jp      Z,DSKRNM        ; yes, rename disk
6843+ 4A88 C3 83 20             jp      SNERR           ; raise a syntax error
6844+ 4A8B
6845+ 4A8B
6846+ 4A8B              ; Format disk or rewrite Master sector
6847+ 4A8B              ; syntax: DISK "F","disk name"[,1]
6848+ 4A8B              ; "disk name" is the name -> max 16 chars, allowed chars: "A" to "Z", "0" to "9","-", SPACE
6849+ 4A8B              ; ",1": just rewrite Master sector without overwriting current directory
6850+ 4A8B              ; Format: set up a fresh new file system, re-writing the Master sector and
6851+ 4A8B              ; initializing the directory
6852+ 4A8B              ; Master Sector rewriting: re-initialize the Master Sector, writing a new disk name and
6853+ 4A8B              ; re-calculating disk geometry
6854+ 4A8B              DKNMPT: equ     TMPBFR2         ; store the pointer to the disk name string
6855+ 4A8B              DKLNPT: equ     TMPBFR3         ; store the pointer to the lenght of disk name string
6856+ 4A8B CD 83 23     DSKFRM: call    CHKSYN          ; Make sure ',' follows
6857+ 4A8E 2C                   defb    ','
6858+ 4A8F CD AD 4B             call    CHKFLNM         ; check for file name
6859+ 4A92 CD DB 49             call    CHK1AR          ; check if ",1" follows - saved into A
6860+ 4A95 11 DD 4A             ld      DE,MSTTXT       ; format message
6861+ 4A98 B7                   or      A               ; A=0?
6862+ 4A99 20 03                jr      NZ,CFINIT       ; no, jump over
6863+ 4A9B 11 F5 4A             ld      DE,FRMTXT       ; only Master Sector
6864+ 4A9E E5           CFINIT: push    HL              ; store code string pointer
6865+ 4A9F 62                   ld      H,D             ; Point to message
6866+ 4AA0 6B                   ld      L,E
6867+ 4AA1 CD 65 2F             call    PRS             ; print message for confirmation
6868+ 4AA4 E1                   pop     HL              ; retrieve HL
6869+ 4AA5 CD 8A 4B             call    CNFREQ          ; ask for confirmation
6870+ 4AA8 DA 3D 4A             jp      C,ABRTDS        ; if Carry set then abort
6871+ 4AAB CD 2D 10     INITDSK:call    CF_INIT         ; init CF card
6872+ 4AAE DA D4 49             jp      C,DOS_ERR       ; error if device not available/ready
6873+ 4AB1 C5                   push    BC
6874+ 4AB2 D5                   push    DE
6875+ 4AB3 E5                   push    HL              ; store code string pointer
6876+ 4AB4 CD 1A 11             call    DSK_INIT        ; init disk
6877+ 4AB7 E1                   pop     HL
6878+ 4AB8 D1                   pop     DE
6879+ 4AB9 C1                   pop     BC
6880+ 4ABA 30 03                jr      NC,INITFN       ; leave if no errors
6881+ 4ABC C3 D4 49             jp      DOS_ERR         ; raise error
6882+ 4ABF E5           INITFN: push    HL              ; store code string pointer
6883+ 4AC0 3A 05 82             ld      A,(TMPBFR1)
6884+ 4AC3 B7                   or      A               ; full formatting?
6885+ 4AC4 20 0F                jr      NZ,MSPTOK       ; no
6886+ 4AC6 21 27 4B             ld      HL,FRMTOK       ; yes, Point to message
6887+ 4AC9 CD 65 2F             call    PRS             ; print message for init confirmation
6888+ 4ACC D5                   push    DE
6889+ 4ACD 16 00                ld      D,$00           ; print only disk details, no file list
6890+ 4ACF CD D3 12             call    LST_FILES       ; print details of disk and list files
6891+ 4AD2 D1                   pop     DE
6892+ 4AD3 E1                   pop     HL
6893+ 4AD4 C9                   ret                     ; return to caller
6894+ 4AD5 21 3E 4B     MSPTOK: ld      HL,MSWROK       ; format OK message
6895+ 4AD8 CD 65 2F             call    PRS             ; print message for init confirmation
6896+ 4ADB E1                   pop     HL              ; retrieve code string pointer
6897+ 4ADC C9                   ret                     ; return to caller
6898+ 4ADD 52 65 77 72  MSTTXT: defb    "Rewrite Master Sector? ",0
6898+ 4AE1 69 74 65 20
6898+ 4AE5 4D 61 73 74
6898+ 4AE9 65 72 20 53
6898+ 4AED 65 63 74 6F
6898+ 4AF1 72 3F 20 00
6899+ 4AF5 57 41 52 4E  FRMTXT: defb    "WARNING!! Disk contents will be erased. "      ; the spacing is calculated for both 32&40 cols video modes.
6899+ 4AF9 49 4E 47 21
6899+ 4AFD 21 20 44 69
6899+ 4B01 73 6B 20 63
6899+ 4B05 6F 6E 74 65
6899+ 4B09 6E 74 73 20
6899+ 4B0D 77 69 6C 6C
6899+ 4B11 20 62 65 20
6899+ 4B15 65 72 61 73
6899+ 4B19 65 64 2E 20
6900+ 4B1D 50 72 6F 63          defb    "Proceed? ",0                                   ; do not add other chars
6900+ 4B21 65 65 64 3F
6900+ 4B25 20 00
6901+ 4B27 0D 46 6F 72  FRMTOK: defb    CR,"Formatting completed",CR,0
6901+ 4B2B 6D 61 74 74
6901+ 4B2F 69 6E 67 20
6901+ 4B33 63 6F 6D 70
6901+ 4B37 6C 65 74 65
6901+ 4B3B 64 0D 00
6902+ 4B3E 0D 4D 61 73  MSWROK: defb    CR,"Master Sector rewritten",CR,0
6902+ 4B42 74 65 72 20
6902+ 4B46 53 65 63 74
6902+ 4B4A 6F 72 20 72
6902+ 4B4E 65 77 72 69
6902+ 4B52 74 74 65 6E
6902+ 4B56 0D 00
6903+ 4B58
6904+ 4B58
6905+ 4B58              ; disk rename
6906+ 4B58 CD 83 23     DSKRNM: call    CHKSYN          ; Make sure ',' follows
6907+ 4B5B 2C                   defb    ','
6908+ 4B5C CD AD 4B             call    CHKFLNM         ; check for file name
6909+ 4B5F E5                   push    HL              ; store code string pointer
6910+ 4B60 21 7C 4B             ld      HL,RNDKTX       ; Point to message
6911+ 4B63 CD 65 2F             call    PRS             ; print message for confirmation
6912+ 4B66 E1                   pop     HL              ; retrieve HL
6913+ 4B67 CD 8A 4B             call    CNFREQ          ; ask for confirmation
6914+ 4B6A DA 3D 4A             jp      C,ABRTDS        ; if Carry set then abort
6915+ 4B6D CD 2D 10             call    CF_INIT         ; init CF card
6916+ 4B70 DA D4 49             jp      C,DOS_ERR       ; error if device not available/ready
6917+ 4B73 E5                   push    HL              ; store code string pointer
6918+ 4B74 CD 4F 12             call    DSK_RNM         ; init disk
6919+ 4B77 E1                   pop     HL
6920+ 4B78 DA D4 49             jp      C,DOS_ERR       ; DOS error
6921+ 4B7B C9                   ret
6922+ 4B7C 52 65 6E 61  RNDKTX: defb    "Rename disk? ",0
6922+ 4B80 6D 65 20 64
6922+ 4B84 69 73 6B 3F
6922+ 4B88 20 00
6923+ 4B8A
6924+ 4B8A
6925+ 4B8A              ; confirmation required by the user ('y' or 'Y' DO confirm, otherwise DON'T)
6926+ 4B8A CD 44 09     CNFREQ: call    CURSOR_ON       ; enable cursor
6927+ 4B8D AF                   xor     A
6928+ 4B8E 32 01 82             ld      (PRNTVIDEO),A   ; disable print-on-video
6929+ 4B91 CD 2A 02             call    RXA             ; look for a pressed key
6930+ 4B94 FE 03                cp      CTRLC           ; is it RUN STOP?
6931+ 4B96 28 13                jr      Z,CNFRQN        ; yes, abort operation
6932+ 4B98 E6 DF                and     %11011111       ; only UPPERCASE char
6933+ 4B9A FE 59                cp      'Y'             ; 'Y'?
6934+ 4B9C 20 0D                jr      NZ,CNFRQN       ; no, abort operation
6935+ 4B9E 3E 01                ld      A,$01           ; re-enable...
6936+ 4BA0 32 01 82             ld      (PRNTVIDEO),A   ; ...print-on-video
6937+ 4BA3 CD 1F 03             call    ECHO_CHAR       ; yes, echoes the char
6938+ 4BA6 CD 59 09             call    CURSOR_OFF      ; disable cursor
6939+ 4BA9 AF                   xor     A               ; reset Carry flag
6940+ 4BAA C9                   ret                     ; return to caller
6941+ 4BAB 37           CNFRQN: scf                     ; set Carry flag
6942+ 4BAC C9                   ret                     ; return to caller
6943+ 4BAD
6944+ 4BAD
6945+ 4BAD              ; check that a disk/file name follows
6946+ 4BAD 2B           CHKFLNM:dec     HL              ; dec 'cause GETCHR increments
6947+ 4BAE CD CC 25             call    GETCHR          ; check if something follows
6948+ 4BB1 CA 83 20             jp      Z,SNERR         ; if nothing else, raise a syntax error
6949+ 4BB4 CD 6F 2A             call    EVAL            ; Evaluate expression
6950+ 4BB7 CD 61 2A     CHKFN1: call    TSTSTR          ; Make sure it's a string
6951+ 4BBA 22 9F 81             ld      (TMPDBF+2),HL   ; store code string pointer into a temp buffer
6952+ 4BBD ED 53 A1 81          ld      (TMPDBF+4),DE   ; store DE
6953+ 4BC1 ED 43 A3 81          ld      (TMPDBF+6),BC
6954+ 4BC5 CD A8 30             call    GSTRCU          ; get current string into pool
6955+ 4BC8 CD B9 38             call    LOADFP          ; Move string block to BCDE (BC=pointer, E=length)
6956+ 4BCB 7B                   ld      A,E             ; check if lenght = 0
6957+ 4BCC A7                   and     A               ; null string?
6958+ 4BCD CA 83 20             jp      Z,SNERR         ; yes, syntax error
6959+ 4BD0 ED 53 09 82          ld      (DKLNPT),DE     ; no, store lenght
6960+ 4BD4 ED 43 07 82          ld      (DKNMPT),BC     ; store address of temp string
6961+ 4BD8 2A 9F 81             ld      HL,(TMPDBF+2)   ; retrieve code string pointer
6962+ 4BDB ED 5B A1 81          ld      DE,(TMPDBF+4)   ; retrieve DE
6963+ 4BDF ED 4B A3 81          ld      BC,(TMPDBF+6)   ; retrieve BC
6964+ 4BE3 C9                   ret                     ; return to caller
6965+ 4BE4
6966+ 4BE4
6967+ 4BE4              ; HEX$(nn) Convert 16 bit number to Hexadecimal string
6968+ 4BE4 CD 60 2A     HEX: 	call	TSTNUM          ; Verify it's a number
6969+ 4BE7 CD 82 26             call	DEINT           ; Get integer -32768 to 32767
6970+ 4BEA C5                   push	BC              ; Save contents of BC
6971+ 4BEB 21 5E 82             ld      HL,PBUFF        ; load address of PBUFF into HL
6972+ 4BEE 7A                   ld      A,D             ; Get MSB into A
6973+ 4BEF B7                   or      A               ; OR with LSB to see if param=0
6974+ 4BF0 28 0C                jr      Z,HEX2          ; Skip output if both high digits are zero
6975+ 4BF2 CD 1A 4C             call    BYT2ASC         ; Convert D to ASCII
6976+ 4BF5 78                   ld      A,B             ; cechk if B
6977+ 4BF6 FE 30                cp      '0'             ; is 0
6978+ 4BF8 28 02                jr      Z,HEX1          ; Don't store high digit if zero
6979+ 4BFA 70                   ld      (HL),B          ; Store it to PBUFF
6980+ 4BFB 23                   inc     HL              ; Next location
6981+ 4BFC 71           HEX1:   ld      (HL),C          ; Store C to PBUFF+1
6982+ 4BFD 23                   inc     HL              ; Next location
6983+ 4BFE 7B           HEX2:   ld      A,E             ; Get lower byte
6984+ 4BFF CD 1A 4C             call    BYT2ASC         ; Convert E to ASCII
6985+ 4C02 7A                   ld      A,D
6986+ 4C03 B7                   or      A
6987+ 4C04 20 05                jr      NZ,HEX3         ; If upper byte was not zero then always print lower byte
6988+ 4C06 78                   ld      A,B
6989+ 4C07 FE 30                cp      '0'             ; If high digit of lower byte is zero then don't print
6990+ 4C09 28 02                jr      Z,HEX4
6991+ 4C0B 70           HEX3:   ld      (HL),B          ; to PBUFF+2
6992+ 4C0C 23                   inc     HL              ; Next location
6993+ 4C0D 71           HEX4:   ld      (HL),C          ; to PBUFF+3
6994+ 4C0E 23                   inc     HL              ; PBUFF+4 to zero
6995+ 4C0F AF                   xor     A               ; Terminating character
6996+ 4C10 77                   ld      (HL),A          ; Store zero to terminate
6997+ 4C11 23                   inc     HL              ; Make sure PBUFF is terminated
6998+ 4C12 77                   ld      (HL),A          ; Store the double zero there
6999+ 4C13 C1                   pop     BC              ; Get BC back
7000+ 4C14 21 5E 82             ld      HL,PBUFF        ; Reset to start of PBUFF
7001+ 4C17 C3 F5 2E             jp      STR1            ; Convert the PBUFF to a string and return it
7002+ 4C1A 47           BYT2ASC:ld      B,A             ; Save original value
7003+ 4C1B E6 0F                and     $0F             ; Strip off upper nybble
7004+ 4C1D FE 0A                cp      $0A             ; 0-9?
7005+ 4C1F 38 02                jr      C,ADD30         ; If A-F, add 7 more
7006+ 4C21 C6 07                add     A,$07           ; Bring value up to ASCII A-F
7007+ 4C23 C6 30        ADD30:  add     A,$30           ; And make ASCII
7008+ 4C25 4F                   ld      C,A             ; Save converted char to C
7009+ 4C26 78                   ld      A,B             ; Retrieve original value
7010+ 4C27 0F                   rrca                    ; and Rotate it right
7011+ 4C28 0F                   rrca
7012+ 4C29 0F                   rrca
7013+ 4C2A 0F                   rrca
7014+ 4C2B E6 0F                and     $0F             ; Mask off upper nybble
7015+ 4C2D FE 0A                cp      $0A             ; 0-9? < A hex?
7016+ 4C2F 38 02                jr      C,ADD301        ; Skip Add 7
7017+ 4C31 C6 07                add     A,$07           ; Bring it up to ASCII A-F
7018+ 4C33 C6 30        ADD301: add     A,$30           ; And make it full ASCII
7019+ 4C35 47                   ld      B,A             ; Store high order byte
7020+ 4C36 C9                   ret
7021+ 4C37
7022+ 4C37              ; Convert "&Hnnnn" to FPREG
7023+ 4C37              ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
7024+ 4C37              ; Char is in A, NC if char is ;<=>?@ A-z, CY is set if 0-9
7025+ 4C37 EB           HEXTFP: ex      DE,HL           ; Move code string pointer to DE
7026+ 4C38 21 00 00             ld      HL,$0000        ; Zero out the value
7027+ 4C3B CD 50 4C             call    GETHEX          ; Check the number for valid hex
7028+ 4C3E DA 70 4C             jp      C,HXERR         ; First value wasn't hex, HX error
7029+ 4C41 18 05                jr      HEXLP1          ; Convert first character
7030+ 4C43 CD 50 4C     HEXLP:  call    GETHEX          ; Get second and addtional characters
7031+ 4C46 38 1F                jr      C,HEXIT         ; Exit if not a hex character
7032+ 4C48 29           HEXLP1: add     HL,HL           ; Rotate 4 bits to the left
7033+ 4C49 29                   add     HL,HL
7034+ 4C4A 29                   add     HL,HL
7035+ 4C4B 29                   add     HL,HL
7036+ 4C4C B5                   or      L               ; Add in D0-D3 into L
7037+ 4C4D 6F                   ld      L,A             ; Save new value
7038+ 4C4E 18 F3                jr      HEXLP           ; And continue until all hex characters are in
7039+ 4C50
7040+ 4C50 13           GETHEX: inc     DE              ; Next location
7041+ 4C51 1A                   ld      A,(DE)          ; Load character at pointer
7042+ 4C52 FE 20                cp      SPC
7043+ 4C54 CA 50 4C             jp      Z,GETHEX        ; Skip spaces
7044+ 4C57 D6 30                sub     $30             ; Get absolute value
7045+ 4C59 D8                   ret     C               ; < "0", error
7046+ 4C5A FE 0A                cp      $0A
7047+ 4C5C 38 05                jr      C,NOSUB7        ; Is already in the range 0-9
7048+ 4C5E D6 07                sub     $07             ; Reduce to A-F
7049+ 4C60 FE 0A                cp      $0A             ; Value should be $0A-$0F at this point
7050+ 4C62 D8                   ret     C               ; CY set if was :            ; < = > ? @
7051+ 4C63 FE 10        NOSUB7: cp      $10             ; > Greater than "F"?
7052+ 4C65 3F                   ccf
7053+ 4C66 C9                   ret                     ; CY set if it wasn't valid hex
7054+ 4C67
7055+ 4C67 EB           HEXIT:  ex      DE,HL           ; Value into DE, Code string into HL
7056+ 4C68 7A                   ld      A,D             ; Load DE into AC
7057+ 4C69 4B                   ld      C,E             ; For prep to
7058+ 4C6A E5                   push    HL
7059+ 4C6B CD 46 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7060+ 4C6E E1                   pop     HL
7061+ 4C6F C9                   ret
7062+ 4C70
7063+ 4C70 DD 5C        HXERR:  ld      E,HX            ; ?HEX Error
7064+ 4C72 C3 9D 20             jp      ERROR
7065+ 4C75
7066+ 4C75              ; BIN$(NN) Convert integer to a 1-16 char binary string
7067+ 4C75 CD 60 2A     BIN:    call    TSTNUM          ; Verify it's a number
7068+ 4C78 CD 82 26             call    DEINT           ; Get integer -32768 to 32767
7069+ 4C7B C5           BIN2:   push    BC              ; Save contents of BC
7070+ 4C7C 21 5E 82             ld      HL,PBUFF
7071+ 4C7F 06 11                ld      B,$11           ; One higher than max char count (16+1)
7072+ 4C81              ZEROSUP:                        ; Suppress leading zeros
7073+ 4C81 05                   dec     B               ; Max 16 chars
7074+ 4C82 78                   ld      A,B
7075+ 4C83 FE 01                cp      $01
7076+ 4C85 28 08                jr      Z,BITOUT        ; Always output at least one character
7077+ 4C87 CB 13                rl      E
7078+ 4C89 CB 12                rl      D
7079+ 4C8B 30 F4                jr      NC,ZEROSUP
7080+ 4C8D 18 04                jr      BITOUT2
7081+ 4C8F CB 13        BITOUT: rl      E
7082+ 4C91 CB 12                rl      D               ; Top bit now in carry
7083+ 4C93 3E 30        BITOUT2:ld      A,'0'           ; Char for '0'
7084+ 4C95 CE 00                adc     A,$00           ; If carry set then '0' --> '1'
7085+ 4C97 77                   ld      (HL),A
7086+ 4C98 23                   inc     HL
7087+ 4C99 05                   dec     B
7088+ 4C9A 20 F3                jr      NZ,BITOUT
7089+ 4C9C AF                   xor     A               ; Terminating character
7090+ 4C9D 77                   ld      (HL),A          ; Store zero to terminate
7091+ 4C9E 23                   inc     HL              ; Make sure PBUFF is terminated
7092+ 4C9F 77                   ld      (HL),A          ; Store the double zero there
7093+ 4CA0 C1                   pop     BC
7094+ 4CA1 21 5E 82             ld      HL,PBUFF
7095+ 4CA4 C3 F5 2E             jp      STR1
7096+ 4CA7
7097+ 4CA7              ; Convert "&Bnnnn" to FPREG
7098+ 4CA7              ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
7099+ 4CA7 EB           BINTFP: ex      DE,HL           ; Move code string pointer to DE
7100+ 4CA8 21 00 00             ld      HL,$0000        ; Zero out the value
7101+ 4CAB CD C4 4C             call    CHKBIN          ; Check the number for valid bin
7102+ 4CAE DA D2 4C             jp      C,BINERR        ; First value wasn't bin, HX error
7103+ 4CB1 D6 30        BINIT:  sub     '0'
7104+ 4CB3 29                   add     HL,HL           ; Rotate HL left
7105+ 4CB4 B5                   or      L
7106+ 4CB5 6F                   ld      L,A
7107+ 4CB6 CD C4 4C             call    CHKBIN          ; Get second and addtional characters
7108+ 4CB9 30 F6                jr      NC,BINIT        ; Process if a bin character
7109+ 4CBB EB                   ex      DE,HL           ; Value into DE, Code string into HL
7110+ 4CBC 7A                   ld      A,D             ; Load DE into AC
7111+ 4CBD 4B                   ld      C,E             ; For prep to
7112+ 4CBE E5                   push    HL
7113+ 4CBF CD 46 2E             call    ACPASS          ; ACPASS to set AC as integer into FPREG
7114+ 4CC2 E1                   pop     HL
7115+ 4CC3 C9                   ret
7116+ 4CC4
7117+ 4CC4              ; Char is in A, NC if char is 0 or 1
7118+ 4CC4 13           CHKBIN: inc     DE
7119+ 4CC5 1A                   ld      A,(DE)
7120+ 4CC6 FE 20                cp      SPC
7121+ 4CC8 CA C4 4C             jp      Z,CHKBIN        ; Skip spaces
7122+ 4CCB FE 30                cp      '0'             ; Set C if < '0'
7123+ 4CCD D8                   ret     C
7124+ 4CCE FE 32                cp      '2'
7125+ 4CD0 3F                   ccf                     ; Set C if > '1'
7126+ 4CD1 C9                   ret
7127+ 4CD2
7128+ 4CD2 1E 28        BINERR: ld      E,BN            ; ?BIN Error
7129+ 4CD4 C3 9D 20             jp      ERROR
7130+ 4CD7
7131+ 4CD7
7132+ 4CD7 C3 08 00     MONOUT: jp      $0008           ; output a char
7133+ 4CDA
7134+ 4CDA
7135+ 4CDA CD FE 32     RESET:  call    DISNMI          ; disable NMI vector
7136+ 4CDD 3A 47 82             ld      A,(SERIALS_EN)  ; load status of serial lines
7137+ 4CE0 E6 11                and     $11             ; are serial ports open?
7138+ 4CE2 C4 F5 44             call    NZ,RSTSERS      ; yes, reset serials
7139+ 4CE5 3A 4A 82             ld      A,(DOS_EN)      ; is DOS enabled
7140+ 4CE8 A7                   and     A               ; if enabled, A<>0
7141+ 4CE9 C4 A5 10             call    NZ,CF_STANDBY   ; put CF into standby mode
7142+ 4CEC F3                   di                      ; disable INTs
7143+ 4CED                  IFDEF LM80C64K
7144+ 4CED ~                    jp      ROM2RAM         ; Restart
7145+ 4CED                  ELSE
7146+ 4CED C3 00 00             jp      $0000           ; Restart
7147+ 4CF0                  ENDIF
7148+ 4CF0
7149+ 4CF0
7150+ 4CF0 3E 00        INITST: ld      A,$00           ; Clear break flag
7151+ 4CF2 32 A9 80             ld      (BRKFLG),A
7152+ 4CF5 C3 72 1B             jp      SYSINIT
7153+ 4CF8
7154+ 4CF8
7155+ 4CF8 F5           TSTBIT: push    AF              ; Save bit mask
7156+ 4CF9 A0                   and     B               ; Get common bits
7157+ 4CFA C1                   pop     BC              ; Restore bit mask
7158+ 4CFB B8                   cp      B               ; Same bit set?
7159+ 4CFC 3E 00                ld      A,$00           ; Return 0 in A
7160+ 4CFE C9                   ret
7161+ 4CFF
7162+ 4CFF CD 8E 23     OUTNCR: call    OUTC            ; Output character in A
7163+ 4D02 C3 99 28             jp      PRNTCRLF        ; Output CRLF
7164+ 4D05
# file closed: ../include/basic/basic-1.06.asm
  87  4D05
  88  4D05              ; include utils
  89  4D05                  INCLUDE "../include/utils/utils-r1.2.asm"
# file opened: ../include/utils/utils-r1.2.asm
   1+ 4D05              ; ------------------------------------------------------------------------------
   2+ 4D05              ; LM80C - UTILITY ROUTINES - R1.2
   3+ 4D05              ; ------------------------------------------------------------------------------
   4+ 4D05              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4D05              ; designed by Leonardo Miliani. More info at
   6+ 4D05              ; www DOT leonardomiliani DOT com
   7+ 4D05              ;
   8+ 4D05              ; *ALS are routines from "Z80 Assembly Language Subroutines" by Lance
   9+ 4D05              ; A. Leventhal and Winthrop Saville - Ed. Osborne/McGraw-Hill (1983)
  10+ 4D05              ;
  11+ 4D05              ; * WKT are routines from WikiTI:
  12+ 4D05              ; http://wikiti.brandonw.net/index.php?title=WikiTI_Home
  13+ 4D05              ;
  14+ 4D05              ; * LAC are routines from Learn@Cemetch
  15+ 4D05              ; https://learn.cemetech.net/index.php/Main_Page
  16+ 4D05              ;
  17+ 4D05              ; ------------------------------------------------------------------------------
  18+ 4D05              ; Code Revision:
  19+ 4D05              ; R1.0 - 20200110 - First release: 16-bit comparision/multiplication/negation
  20+ 4D05              ; R1.1 - 20200413 - Second release: added ABS(HL)
  21+ 4D05              ; R1.2 - 20200131 - Added 32/16 bit multiplication/division and converter to
  22+ 4D05              ;                   transform a 32-bit value into ASCII representation
  23+ 4D05              ;
  24+ 4D05              ; ------------------------------------------------------------------------------
  25+ 4D05
  26+ 4D05              ; compare two 16-bit registers, HL (minuend) and DE (subtrahend)
  27+ 4D05              ; values can be both signed or unsigned words
  28+ 4D05              ; inputs: HL, DE
  29+ 4D05              ; destroys: A,F,HL
  30+ 4D05              ;
  31+ 4D05              ; returns: Z=1 if HL = DE
  32+ 4D05              ; for UNSIGNED: C=1 if HL<DE  //  C=0 if HL>DE
  33+ 4D05              ; for SIGNED:   S=1 (M) if HL<DE  //  S=0 (P) if HL>DE
  34+ 4D05              ; if HL=DE: Z,P,NC  - Z=1, S=0; C=0
  35+ 4D05              ; if HL>DE: NZ,P,NC - Z=0, S=0; C=0
  36+ 4D05              ; if HL<DE: NZ,M,C  - Z=0, S=1; C=1
  37+ 4D05              ; Source: ALS
  38+ 4D05
  39+ 4D05 B7           CMP16:  or      A           ; clear CARRY
  40+ 4D06 ED 52                sbc     HL,DE       ; subtract DE from HL
  41+ 4D08 E0                   ret     PO          ; return if no overflow
  42+ 4D09 7C                   ld      A,H         ; overflow - invert SIGN flag
  43+ 4D0A 1F                   rra                 ; save CARRY flag in bit 7
  44+ 4D0B EE 40                xor     %01000000   ; complement bit 6 (SIGN bit)
  45+ 4D0D 37                   scf                 ; ensure a Non-Zero result
  46+ 4D0E 8F                   adc     A,A         ; restore CARRY, complemented SIGN
  47+ 4D0F                                          ; ZERO flag = 0 for sure
  48+ 4D0F C9                   ret                 ; return
  49+ 4D10
  50+ 4D10              ; ----------------------------------------------------------------------
  51+ 4D10
  52+ 4D10              ; multiply 2 signed/unsigned 16-bit words and return a 16-bit
  53+ 4D10              ; signed/unsigned product
  54+ 4D10              ; inputs: HL (multiplicand); DE (multiplier)
  55+ 4D10              ; destroys: A,F
  56+ 4D10              ; returns: HL (product)
  57+ 4D10              ; Source: ALS
  58+ 4D10
  59+ 4D10              ; initialize partial product, bit count
  60+ 4D10 C5           MUL16:  push    BC
  61+ 4D11 4D                   ld      C,L         ; BC = multiplier
  62+ 4D12 44                   ld      B,H
  63+ 4D13 21 00 00             ld      HL,0        ; product = 0
  64+ 4D16 3E 0F                ld      A,$0F       ; count = bit lenght - 1 (16-1)
  65+ 4D18                      ; shift-and-add algorithm
  66+ 4D18                      ; if MSB of multiplier is 1, add multiplicand to partial product
  67+ 4D18                      ; shift partial product, multiplier left 1 bit
  68+ 4D18 CB 23        MLP:    sla     E           ; shift multiplier left 1 bit
  69+ 4D1A CB 12                rl      D
  70+ 4D1C 30 01                jr      NC,MLP1     ; jump if MSB of multiplier = 0
  71+ 4D1E 09                   add     HL,BC       ; add multiplicand to partial product
  72+ 4D1F 29           MLP1:   add     HL,HL       ; shift partial product left
  73+ 4D20 3D                   dec     A
  74+ 4D21 20 F5                jr      NZ,MLP      ; continue until count = 0
  75+ 4D23                      ; add multiplicand one last time if MSB of multiplier is 1
  76+ 4D23 B2                   or      D           ; sign flag = MSB of multiplier
  77+ 4D24 F2 28 4D             jp      P,EXMUL16   ; exit if MSB of multiplier is 0
  78+ 4D27 09                   add     HL,BC       ; add multiplicand to product
  79+ 4D28 C1           EXMUL16:pop     BC
  80+ 4D29 C9                   ret
  81+ 4D2A
  82+ 4D2A
  83+ 4D2A              ; ----------------------------------------------------------------------
  84+ 4D2A
  85+ 4D2A              ; multiply 2 unsigned 16-bit words and return a 32-bit unsigned product
  86+ 4D2A              ; inputs: BC (multiplicand); DE (multiplier)
  87+ 4D2A              ; destroys: A,F
  88+ 4D2A              ; operation: BC * DE
  89+ 4D2A              ; returns: DEHL (product)
  90+ 4D2A              ; Source: WKT
  91+ 4D2A
  92+ 4D2A 21 00 00     MUL_U32:ld      HL,$0000        ; reset HL
  93+ 4D2D CB 23                sla     E		; optimised 1st iteration
  94+ 4D2F CB 12                rl      D
  95+ 4D31 30 02                jr      NC,MU32_1       ; if no Carry then jump over
  96+ 4D33 60                   ld      H,B
  97+ 4D34 69                   ld      L,C
  98+ 4D35 3E 0F        MU32_1: ld      A,$0F
  99+ 4D37 29           MUL_32L:add     HL,HL           ; main loop
 100+ 4D38 CB 13                rl      E
 101+ 4D3A CB 12                rl      D
 102+ 4D3C 30 04                jr      NC,MU32_2
 103+ 4D3E 09                   add     HL,BC
 104+ 4D3F 30 01                jr      NC,MU32_2
 105+ 4D41 13                   inc     DE
 106+ 4D42 3D           MU32_2: dec     A
 107+ 4D43 20 F2                jr      NZ,MUL_32L
 108+ 4D45 C9                   ret
 109+ 4D46
 110+ 4D46              ; ----------------------------------------------------------------------
 111+ 4D46              ; absolute value of HL (same applies to other 16-bit register pairs)
 112+ 4D46              ; also, invert value of HL (or any other 16-bit register, just adjust the code)
 113+ 4D46              ;
 114+ 4D46              ; inputs: HL
 115+ 4D46              ; destroys: A
 116+ 4D46              ; operation: ABS(HL)
 117+ 4D46              ; returns: HL with no sign or negated
 118+ 4D46              ; Source: WKT
 119+ 4D46
 120+ 4D46 CB 7C        absHL:  bit     7,H
 121+ 4D48 C8                   ret     Z
 122+ 4D49 AF           negHL:  xor     A
 123+ 4D4A 95                   sub     L
 124+ 4D4B 6F                   ld      L,A
 125+ 4D4C 9F                   sbc     A,A
 126+ 4D4D 94                   sub     H
 127+ 4D4E 67                   ld      H,A
 128+ 4D4F C9                   ret
 129+ 4D50
 130+ 4D50              ; ------------------------------------------------------------------------------
 131+ 4D50
 132+ 4D50              ; 8/8 division
 133+ 4D50              ; INPUT: D (dividend), E (divisor)
 134+ 4D50              ; OPERATION: D/E
 135+ 4D50              ; OUTPUT: D (quotient), A (remainder)
 136+ 4D50 AF           DIV_8_8:    xor     A
 137+ 4D51 C5                       push    BC
 138+ 4D52 06 08                    ld      B,08h
 139+ 4D54 CB 22        DIV_8_8LOOP:sla     D
 140+ 4D56 17                       rla
 141+ 4D57 BB                       cp      E
 142+ 4D58 38 02                    jr      C,$+4
 143+ 4D5A 93                       sub     E
 144+ 4D5B 14                       inc     D
 145+ 4D5C 10 F6                    djnz    DIV_8_8LOOP
 146+ 4D5E C1                       pop     BC
 147+ 4D5F C9                       ret
 148+ 4D60
 149+ 4D60              ; ----------------------------------------------------------------------
 150+ 4D60              ; divide a 16-bit number by an 8-bit number
 151+ 4D60              ; (16/8 division)
 152+ 4D60              ;
 153+ 4D60              ; inputs: HL (Dividend), C (divisor)
 154+ 4D60              ; destroys: A, B
 155+ 4D60              ; OPERATION: HL/C
 156+ 4D60              ; returns: HL (quotient), A (remainder)
 157+ 4D60              ; source: WKT
 158+ 4D60
 159+ 4D60 AF           DIV_16_8:   xor     A
 160+ 4D61 06 10                    ld      B,16
 161+ 4D63 29           DIV_16_8LP: add     HL,HL
 162+ 4D64 17                       rla
 163+ 4D65 38 03                    jr      C,$+5
 164+ 4D67 B9                       cp      C
 165+ 4D68 38 02                    jr      C,$+4
 166+ 4D6A 91                       sub     C
 167+ 4D6B 2C                       inc     L
 168+ 4D6C 10 F5                    djnz    DIV_16_8LP
 169+ 4D6E C9                       ret
 170+ 4D6F
 171+ 4D6F              ; ----------------------------------------------------------------------
 172+ 4D6F              ; divide a 16-bit number by a 16-bit number
 173+ 4D6F              ; (16/16 division)
 174+ 4D6F              ;
 175+ 4D6F              ; inputs: AC (Dividend), DE (divisor)
 176+ 4D6F              ; destroys: HL,A,C
 177+ 4D6F              ; OPERATION: AC/DE
 178+ 4D6F              ; returns: AC (quotient), HL (remainder)
 179+ 4D6F              ; source: WKT
 180+ 4D6F 21 00 00     DIV_16_16:  ld      HL, 0
 181+ 4D72 06 10                    ld      B, 16
 182+ 4D74 CB 21        DV16_16_LP: sla     C
 183+ 4D76 CB C1                    set     0,C         ; this simulates the SLL undocumented instruction
 184+ 4D78 17                       rla
 185+ 4D79 ED 6A                    adc     HL,HL
 186+ 4D7B ED 52                    sbc     HL,DE
 187+ 4D7D 30 02                    jr      NC, $+4
 188+ 4D7F 19                       add     HL,DE
 189+ 4D80 0D                       dec     C
 190+ 4D81 10 F1                    djnz    DV16_16_LP
 191+ 4D83 C9                       ret
 192+ 4D84
 193+ 4D84
 194+ 4D84              ; ----------------------------------------------------------------------
 195+ 4D84              ; divide a 32-bit number by a 16 bit-number
 196+ 4D84              ; (32/16 division)
 197+ 4D84              ;
 198+ 4D84              ; inputs: ACIX (Dividend), DE (divisor)
 199+ 4D84              ; destroys: HL,IX,BC
 200+ 4D84              ; OPERATION: ACIX/DE
 201+ 4D84              ; returns: ACIX (quotient), HL (remainder)
 202+ 4D84              ; source: WKT
 203+ 4D84
 204+ 4D84 21 00 00     DIV_32_16:  ld      HL,0
 205+ 4D87 06 20                    ld      B,32
 206+ 4D89 DD 29        DIV_32_16LP:add     IX,IX
 207+ 4D8B CB 11                    rl      C
 208+ 4D8D 17                       rla
 209+ 4D8E ED 6A                    adc     HL,HL
 210+ 4D90 38 08                    jr      C,DIV_32_16OF
 211+ 4D92 ED 52                    sbc     HL,DE
 212+ 4D94 30 07                    jr      NC,DIV_32_16SB
 213+ 4D96 19                       add     HL,DE
 214+ 4D97 10 F0                    djnz    DIV_32_16LP
 215+ 4D99 C9                       ret
 216+ 4D9A B7           DIV_32_16OF:or      A                   ; overflow
 217+ 4D9B ED 52                    sbc     HL,DE
 218+ 4D9D DD 23        DIV_32_16SB:inc     IX                  ; set bit
 219+ 4D9F 10 E8                    djnz    DIV_32_16LP
 220+ 4DA1 C9                       ret
 221+ 4DA2
 222+ 4DA2
 223+ 4DA2              ; ----------------------------------------------------------------------
 224+ 4DA2              ; convert a 32-bit number in ASCII string (terminated by '0')
 225+ 4DA2              ;
 226+ 4DA2              ; inputs: DEIX (Value), IY (dest. address in memory)
 227+ 4DA2              ; destroys: AF, BC, DE, HL, IX
 228+ 4DA2              ; outputs: IY (last char in dest. string)
 229+ 4DA2              ; source: MSX Forum
 230+ 4DA2
 231+ 4DA2 01 00 00 00  CLCN32T:    defw    1,0,10,0,100,0,1000,0,10000,0
 231+ 4DA6 0A 00 00 00
 231+ 4DAA 64 00 00 00
 231+ 4DAE E8 03 00 00
 231+ 4DB2 10 27 00 00
 232+ 4DB6 A0 86 01 00              defw    $86A0,$1,$4240,$F,$9680,$98,$E100,$5F5,$CA00,$3B9A
 232+ 4DBA 40 42 0F 00
 232+ 4DBE 80 96 98 00
 232+ 4DC2 00 E1 F5 05
 232+ 4DC6 00 CA 9A 3B
 233+ 4DCA 00 00 00 00  CLCN32Z:    defs    4
 234+ 4DCE
 235+ 4DCE DD 22 CA 4D  CLCN32:     ld      (CLCN32Z),IX
 236+ 4DD2 ED 53 CC 4D              ld      (CLCN32Z+$02),DE
 237+ 4DD6 DD 21 C6 4D              ld      IX,CLCN32T+$24
 238+ 4DDA 06 09                    ld      B,$09
 239+ 4DDC 0E 00                    ld      C,$00
 240+ 4DDE 3E 30        CLCN321:    ld      A,"0"
 241+ 4DE0 B7                       or      A
 242+ 4DE1 DD 5E 00     CLCN322:    ld      E,(IX+$00)
 243+ 4DE4 DD 56 01                 ld      D,(IX+$01)
 244+ 4DE7 2A CA 4D                 ld      HL,(CLCN32Z)
 245+ 4DEA ED 52                    sbc     HL,DE
 246+ 4DEC 22 CA 4D                 ld      (CLCN32Z),HL
 247+ 4DEF DD 5E 02                 ld      E,(IX+$02)
 248+ 4DF2 DD 56 03                 ld      D,(IX+$03)
 249+ 4DF5 2A CC 4D                 ld      HL,(CLCN32Z+$02)
 250+ 4DF8 ED 52                    sbc     HL,DE
 251+ 4DFA 22 CC 4D                 ld      (CLCN32Z+$02),HL
 252+ 4DFD 38 04                    jr      C,CLCN325
 253+ 4DFF 0C                       inc     C
 254+ 4E00 3C                       inc     A
 255+ 4E01 18 DE                    jr      CLCN322
 256+ 4E03 DD 5E 00     CLCN325:    ld      E,(IX+$00)
 257+ 4E06 DD 56 01                 ld      D,(IX+$01)
 258+ 4E09 2A CA 4D                 ld      HL,(CLCN32Z)
 259+ 4E0C 19                       add     HL,DE
 260+ 4E0D 22 CA 4D                 ld      (CLCN32Z),HL
 261+ 4E10 DD 5E 02                 ld      E,(IX+$02)
 262+ 4E13 DD 56 03                 ld      D,(IX+$03)
 263+ 4E16 2A CC 4D                 ld      HL,(CLCN32Z+$02)
 264+ 4E19 ED 5A                    adc     HL,DE
 265+ 4E1B 22 CC 4D                 ld      (CLCN32Z+$02),HL
 266+ 4E1E 11 FC FF                 ld      DE,-4
 267+ 4E21 DD 19                    add     IX,DE
 268+ 4E23 0C                       inc     C
 269+ 4E24 0D                       dec     C
 270+ 4E25 28 05                    jr      Z,CLCN323
 271+ 4E27 FD 77 00                 ld      (IY+$00),A
 272+ 4E2A FD 23                    inc     IY
 273+ 4E2C 10 B0        CLCN323:    djnz    CLCN321
 274+ 4E2E 3A CA 4D                 ld      A,(CLCN32Z)
 275+ 4E31 C6 30                    add     "0"
 276+ 4E33 FD 77 00                 ld      (IY+$00),A
 277+ 4E36 FD 36 01 00              ld      (IY+$01),0
 278+ 4E3A C9                       ret
# file closed: ../include/utils/utils-r1.2.asm
  90  4E3B
  91  4E3B              ; include the latest version of the font sets
  92  4E3B                  INCLUDE "../include/vdp/6x8fonts-r16.asm"
# file opened: ../include/vdp/6x8fonts-r16.asm
   1+ 4E3B              ; ------------------------------------------------------------------------------
   2+ 4E3B              ; LM80C - 6x8 CHARSET - R1.6
   3+ 4E3B              ; ------------------------------------------------------------------------------
   4+ 4E3B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 4E3B              ; designed by Leonardo Miliani. More info at
   6+ 4E3B              ; www DOT leonardomiliani DOT com
   7+ 4E3B              ; ------------------------------------------------------------------------------
   8+ 4E3B              ; Code Revision:
   9+ 4E3B              ; R1.0 - 20190511 - First revision: ASCII chars (from 0 to 127)
  10+ 4E3B              ; R1.1 - 20190521 - Expanded to 255 chars
  11+ 4E3B              ; R1.2 - 20191209 - Start adding graphic chars to be coherent with 8x8 fonts
  12+ 4E3B              ; R1.3 - 20191226 - Added extended char codes (128-255)
  13+ 4E3B              ; R1.4 - 20200228 - adopted more usual hexadecimal & binary prefixes
  14+ 4E3B              ; R1.5 - 20200524 - New style for char #252
  15+ 4E3B              ; R1.6 - 20200704 - Redefined chars 105, 106, and 252
  16+ 4E3B              ; ------------------------------------------------------------------------------
  17+ 4E3B              ;
  18+ 4E3B              ;-------------------------------------------------------------------------------
  19+ 4E3B              ;
  20+ 4E3B              ;               6 x 8    C  H  A  R  S  E  T
  21+ 4E3B              ;
  22+ 4E3B              ;-------------------------------------------------------------------------------
  23+ 4E3B              ;
  24+ 4E3B              ;       6X8 CHARS, DESIGNED FOR TEXT BUT USABLE IN GRAPHICS 1 MODE TOO
  25+ 4E3B              ;       UPDATE: NOW GRAPHICS 1 MODE HAS ITS OWN CHAR SET
  26+ 4E3B
  27+ 4E3B              CHRST68 equ $
  28+ 4E3B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  28+ 4E3F 00 00 00 00
  29+ 4E43 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  29+ 4E47 00 00 00 00
  30+ 4E4B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  30+ 4E4F 00 00 00 00
  31+ 4E53 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  31+ 4E57 00 00 00 00
  32+ 4E5B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  32+ 4E5F 00 00 00 00
  33+ 4E63 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  33+ 4E67 00 00 00 00
  34+ 4E6B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  34+ 4E6F 00 00 00 00
  35+ 4E73 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  35+ 4E77 00 00 00 00
  36+ 4E7B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 (backspace)
  36+ 4E7F 00 00 00 00
  37+ 4E83 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  37+ 4E87 00 00 00 00
  38+ 4E8B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  38+ 4E8F 00 00 00 00
  39+ 4E93 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11
  39+ 4E97 00 00 00 00
  40+ 4E9B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  40+ 4E9F 00 00 00 00
  41+ 4EA3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 (carriage return)
  41+ 4EA7 00 00 00 00
  42+ 4EAB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL
  42+ 4EAF 00 00 00 00
  43+ 4EB3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  43+ 4EB7 00 00 00 00
  44+ 4EBB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  44+ 4EBF 00 00 00 00
  45+ 4EC3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  45+ 4EC7 00 00 00 00
  46+ 4ECB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  46+ 4ECF 00 00 00 00
  47+ 4ED3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  47+ 4ED7 00 00 00 00
  48+ 4EDB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT
  48+ 4EDF 00 00 00 00
  49+ 4EE3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  49+ 4EE7 00 00 00 00
  50+ 4EEB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6
  50+ 4EEF 00 00 00 00
  51+ 4EF3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7
  51+ 4EF7 00 00 00 00
  52+ 4EFB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP
  52+ 4EFF 00 00 00 00
  53+ 4F03 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 (home)
  53+ 4F07 00 00 00 00
  54+ 4F0B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26
  54+ 4F0F 00 00 00 00
  55+ 4F13 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 (escape)
  55+ 4F17 00 00 00 00
  56+ 4F1B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 (cursor left)
  56+ 4F1F 00 00 00 00
  57+ 4F23 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 (cursor right)
  57+ 4F27 00 00 00 00
  58+ 4F2B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 (cursor up)
  58+ 4F2F 00 00 00 00
  59+ 4F33 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 (cursor down)
  59+ 4F37 00 00 00 00
  60+ 4F3B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32: space
  60+ 4F3F 00 00 00 00
  61+ 4F43 20 20 20 20          defb $20,$20,$20,$20,$20,$00,$20,$00 ; char 33: !
  61+ 4F47 20 00 20 00
  62+ 4F4B 50 50 00 00          defb $50,$50,$00,$00,$00,$00,$00,$00 ; char 34: "
  62+ 4F4F 00 00 00 00
  63+ 4F53 50 50 F8 50          defb $50,$50,$f8,$50,$f8,$50,$50,$00 ; char 35: #
  63+ 4F57 F8 50 50 00
  64+ 4F5B 20 78 A0 70          defb $20,$78,$a0,$70,$28,$f0,$20,$00 ; char 36: $
  64+ 4F5F 28 F0 20 00
  65+ 4F63 C0 C8 10 20          defb $c0,$c8,$10,$20,$40,$98,$18,$00 ; char 37: %
  65+ 4F67 40 98 18 00
  66+ 4F6B 60 90 A0 40          defb $60,$90,$a0,$40,$a8,$90,$68,$00 ; char 38: &
  66+ 4F6F A8 90 68 00
  67+ 4F73 60 20 40 00          defb $60,$20,$40,$00,$00,$00,$00,$00 ; char 39: '
  67+ 4F77 00 00 00 00
  68+ 4F7B 10 20 40 40          defb $10,$20,$40,$40,$40,$20,$10,$00 ; char 40: (
  68+ 4F7F 40 20 10 00
  69+ 4F83 40 20 10 10          defb $40,$20,$10,$10,$10,$20,$40,$00 ; char 41: )
  69+ 4F87 10 20 40 00
  70+ 4F8B 00 20 A8 70          defb $00,$20,$a8,$70,$a8,$20,$00,$00 ; char 42: *
  70+ 4F8F A8 20 00 00
  71+ 4F93 00 20 20 F8          defb $00,$20,$20,$f8,$20,$20,$00,$00 ; char 43: +
  71+ 4F97 20 20 00 00
  72+ 4F9B 00 00 00 00          defb $00,$00,$00,$00,$60,$20,$40,$00 ; char 44: ,
  72+ 4F9F 60 20 40 00
  73+ 4FA3 00 00 00 F8          defb $00,$00,$00,$f8,$00,$00,$00,$00 ; char 45: -
  73+ 4FA7 00 00 00 00
  74+ 4FAB 00 00 00 00          defb $00,$00,$00,$00,$00,$60,$60,$00 ; char 46: .
  74+ 4FAF 00 60 60 00
  75+ 4FB3 00 08 10 20          defb $00,$08,$10,$20,$40,$80,$00,$00 ; char 47: /
  75+ 4FB7 40 80 00 00
  76+ 4FBB 70 88 98 A8          defb $70,$88,$98,$a8,$c8,$88,$70,$00 ; char 48: 0
  76+ 4FBF C8 88 70 00
  77+ 4FC3 20 60 20 20          defb $20,$60,$20,$20,$20,$20,$70,$00 ; char 49: 1
  77+ 4FC7 20 20 70 00
  78+ 4FCB 70 88 08 10          defb $70,$88,$08,$10,$20,$40,$f8,$00 ; char 50: 2
  78+ 4FCF 20 40 F8 00
  79+ 4FD3 F8 10 20 10          defb $f8,$10,$20,$10,$08,$88,$70,$00 ; char 51: 3
  79+ 4FD7 08 88 70 00
  80+ 4FDB 10 30 50 90          defb $10,$30,$50,$90,$f8,$10,$10,$00 ; char 52: 4
  80+ 4FDF F8 10 10 00
  81+ 4FE3 F8 80 F0 08          defb $f8,$80,$f0,$08,$08,$88,$70,$00 ; char 53: 5
  81+ 4FE7 08 88 70 00
  82+ 4FEB 30 40 80 F0          defb $30,$40,$80,$f0,$88,$88,$70,$00 ; char 54: 6
  82+ 4FEF 88 88 70 00
  83+ 4FF3 F8 08 10 20          defb $f8,$08,$10,$20,$40,$40,$40,$00 ; char 55: 7
  83+ 4FF7 40 40 40 00
  84+ 4FFB 70 88 88 70          defb $70,$88,$88,$70,$88,$88,$70,$00 ; char 56: 8
  84+ 4FFF 88 88 70 00
  85+ 5003 70 88 88 78          defb $70,$88,$88,$78,$08,$10,$60,$00 ; char 57: 9
  85+ 5007 08 10 60 00
  86+ 500B 00 30 30 00          defb $00,$30,$30,$00,$30,$30,$00,$00 ; char 58: :
  86+ 500F 30 30 00 00
  87+ 5013 00 30 30 00          defb $00,$30,$30,$00,$30,$10,$20,$00 ; char 59: ;
  87+ 5017 30 10 20 00
  88+ 501B 10 20 40 80          defb $10,$20,$40,$80,$40,$20,$10,$00 ; char 60: <
  88+ 501F 40 20 10 00
  89+ 5023 00 00 F8 00          defb $00,$00,$f8,$00,$f8,$00,$00,$00 ; char 61: =
  89+ 5027 F8 00 00 00
  90+ 502B 40 20 10 08          defb $40,$20,$10,$08,$10,$20,$40,$00 ; char 62: >
  90+ 502F 10 20 40 00
  91+ 5033 70 88 08 10          defb $70,$88,$08,$10,$20,$00,$20,$00 ; char 63: ?
  91+ 5037 20 00 20 00
  92+ 503B 70 88 08 68          defb $70,$88,$08,$68,$a8,$a8,$70,$00 ; char 64: @
  92+ 503F A8 A8 70 00
  93+ 5043 70 88 88 88          defb $70,$88,$88,$88,$f8,$88,$88,$00 ; char 65: A
  93+ 5047 F8 88 88 00
  94+ 504B F0 88 88 F0          defb $f0,$88,$88,$f0,$88,$88,$f0,$00 ; char 66: B
  94+ 504F 88 88 F0 00
  95+ 5053 70 88 80 80          defb $70,$88,$80,$80,$80,$88,$70,$00 ; char 67: C
  95+ 5057 80 88 70 00
  96+ 505B E0 90 88 88          defb $e0,$90,$88,$88,$88,$90,$e0,$00 ; char 68: D
  96+ 505F 88 90 E0 00
  97+ 5063 F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$f8,$00 ; char 69: E
  97+ 5067 80 80 F8 00
  98+ 506B F8 80 80 F0          defb $f8,$80,$80,$f0,$80,$80,$80,$00 ; char 70: F
  98+ 506F 80 80 80 00
  99+ 5073 70 88 80 B8          defb $70,$88,$80,$b8,$88,$88,$78,$00 ; char 71: G
  99+ 5077 88 88 78 00
 100+ 507B 88 88 88 F8          defb $88,$88,$88,$f8,$88,$88,$88,$00 ; char 72: H
 100+ 507F 88 88 88 00
 101+ 5083 70 20 20 20          defb $70,$20,$20,$20,$20,$20,$70,$00 ; char 73: I
 101+ 5087 20 20 70 00
 102+ 508B 38 10 10 10          defb $38,$10,$10,$10,$10,$90,$60,$00 ; char 74: J
 102+ 508F 10 90 60 00
 103+ 5093 88 90 A0 C0          defb $88,$90,$a0,$c0,$a0,$90,$88,$00 ; char 75: K
 103+ 5097 A0 90 88 00
 104+ 509B 80 80 80 80          defb $80,$80,$80,$80,$80,$80,$f8,$00 ; char 76: L
 104+ 509F 80 80 F8 00
 105+ 50A3 88 D8 A8 A8          defb $88,$d8,$a8,$a8,$88,$88,$88,$00 ; char 77: M
 105+ 50A7 88 88 88 00
 106+ 50AB 88 C8 A8 98          defb $88,$c8,$a8,$98,$88,$88,$88,$00 ; char 78: N
 106+ 50AF 88 88 88 00
 107+ 50B3 70 88 88 88          defb $70,$88,$88,$88,$88,$88,$70,$00 ; char 79: O
 107+ 50B7 88 88 70 00
 108+ 50BB F0 88 88 F0          defb $f0,$88,$88,$f0,$80,$80,$80,$00 ; char 80: P
 108+ 50BF 80 80 80 00
 109+ 50C3 70 88 88 88          defb $70,$88,$88,$88,$a8,$90,$68,$00 ; char 81: Q
 109+ 50C7 A8 90 68 00
 110+ 50CB F0 88 88 F0          defb $f0,$88,$88,$f0,$a0,$90,$88,$00 ; char 82: R
 110+ 50CF A0 90 88 00
 111+ 50D3 78 80 80 70          defb $78,$80,$80,$70,$08,$08,$f0,$00 ; char 83: S
 111+ 50D7 08 08 F0 00
 112+ 50DB F8 20 20 20          defb $f8,$20,$20,$20,$20,$20,$20,$00 ; char 84: T
 112+ 50DF 20 20 20 00
 113+ 50E3 88 88 88 88          defb $88,$88,$88,$88,$88,$88,$70,$00 ; char 85: U
 113+ 50E7 88 88 70 00
 114+ 50EB 88 88 88 88          defb $88,$88,$88,$88,$88,$50,$20,$00 ; char 86: V
 114+ 50EF 88 50 20 00
 115+ 50F3 88 88 88 88          defb $88,$88,$88,$88,$a8,$a8,$50,$00 ; char 87: W
 115+ 50F7 A8 A8 50 00
 116+ 50FB 88 88 50 20          defb $88,$88,$50,$20,$50,$88,$88,$00 ; char 88: X
 116+ 50FF 50 88 88 00
 117+ 5103 88 88 88 50          defb $88,$88,$88,$50,$20,$20,$20,$00 ; char 89: Y
 117+ 5107 20 20 20 00
 118+ 510B F8 08 10 20          defb $f8,$08,$10,$20,$40,$80,$f8,$00 ; char 90: Z
 118+ 510F 40 80 F8 00
 119+ 5113 70 40 40 40          defb $70,$40,$40,$40,$40,$40,$70,$00 ; char 91: [
 119+ 5117 40 40 70 00
 120+ 511B 00 80 40 20          defb $00,$80,$40,$20,$10,$08,$00,$00 ; char 92: \
 120+ 511F 10 08 00 00
 121+ 5123 70 10 10 10          defb $70,$10,$10,$10,$10,$10,$70,$00 ; char 93: ]
 121+ 5127 10 10 70 00
 122+ 512B 20 50 88 00          defb $20,$50,$88,$00,$00,$00,$00,$00 ; char 94: ^
 122+ 512F 00 00 00 00
 123+ 5133 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$FC ; char 95: _ (underscore)
 123+ 5137 00 00 00 FC
 124+ 513B 40 20 10 00          defb $40,$20,$10,$00,$00,$00,$00,$00 ; char 96: `
 124+ 513F 00 00 00 00
 125+ 5143 00 00 70 08          defb $00,$00,$70,$08,$78,$88,$78,$00 ; char 97: a
 125+ 5147 78 88 78 00
 126+ 514B 80 80 80 B0          defb $80,$80,$80,$b0,$c8,$88,$f0,$00 ; char 98: b
 126+ 514F C8 88 F0 00
 127+ 5153 00 00 70 80          defb $00,$00,$70,$80,$80,$88,$70,$00 ; char 99: c
 127+ 5157 80 88 70 00
 128+ 515B 08 08 08 68          defb $08,$08,$08,$68,$98,$88,$78,$00 ; char 100: d
 128+ 515F 98 88 78 00
 129+ 5163 00 00 70 88          defb $00,$00,$70,$88,$f8,$80,$70,$00 ; char 101: e
 129+ 5167 F8 80 70 00
 130+ 516B 30 48 40 E0          defb $30,$48,$40,$e0,$40,$40,$40,$00 ; char 102: f
 130+ 516F 40 40 40 00
 131+ 5173 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$70,$00 ; char 103: g
 131+ 5177 78 08 70 00
 132+ 517B 80 80 B0 C8          defb $80,$80,$b0,$c8,$88,$88,$88,$00 ; char 104: h
 132+ 517F 88 88 88 00
 133+ 5183 20 00 20 20          defb $20,$00,$20,$20,$20,$20,$20,$00 ; char 105: i
 133+ 5187 20 20 20 00
 134+ 518B 08 00 18 08          defb $08,$00,$18,$08,$08,$88,$70,$00 ; char 106: j
 134+ 518F 08 88 70 00
 135+ 5193 80 80 90 A0          defb $80,$80,$90,$a0,$c0,$a0,$90,$00 ; char 107: k
 135+ 5197 C0 A0 90 00
 136+ 519B 60 20 20 20          defb $60,$20,$20,$20,$20,$20,$70,$00 ; char 108: l
 136+ 519F 20 20 70 00
 137+ 51A3 00 00 D0 A8          defb $00,$00,$d0,$a8,$a8,$88,$88,$00 ; char 109: m
 137+ 51A7 A8 88 88 00
 138+ 51AB 00 00 B0 C8          defb $00,$00,$b0,$c8,$88,$88,$88,$00 ; char 110: n
 138+ 51AF 88 88 88 00
 139+ 51B3 00 00 70 88          defb $00,$00,$70,$88,$88,$88,$70,$00 ; char 111: o
 139+ 51B7 88 88 70 00
 140+ 51BB 00 00 F0 88          defb $00,$00,$f0,$88,$f0,$80,$80,$00 ; char 112: p
 140+ 51BF F0 80 80 00
 141+ 51C3 00 00 78 88          defb $00,$00,$78,$88,$78,$08,$08,$00 ; char 113: q
 141+ 51C7 78 08 08 00
 142+ 51CB 00 00 B0 C8          defb $00,$00,$b0,$c8,$80,$80,$80,$00 ; char 114: r
 142+ 51CF 80 80 80 00
 143+ 51D3 00 00 70 80          defb $00,$00,$70,$80,$70,$08,$f0,$00 ; char 115: s
 143+ 51D7 70 08 F0 00
 144+ 51DB 40 40 E0 40          defb $40,$40,$e0,$40,$40,$48,$30,$00 ; char 116: t
 144+ 51DF 40 48 30 00
 145+ 51E3 00 00 88 88          defb $00,$00,$88,$88,$88,$98,$68,$00 ; char 117: u
 145+ 51E7 88 98 68 00
 146+ 51EB 00 00 88 88          defb $00,$00,$88,$88,$88,$50,$20,$00 ; char 118: v
 146+ 51EF 88 50 20 00
 147+ 51F3 00 00 88 88          defb $00,$00,$88,$88,$a8,$a8,$50,$00 ; char 119: w
 147+ 51F7 A8 A8 50 00
 148+ 51FB 00 00 88 50          defb $00,$00,$88,$50,$20,$50,$88,$00 ; char 120: x
 148+ 51FF 20 50 88 00
 149+ 5203 00 00 88 98          defb $00,$00,$88,$98,$68,$08,$70,$00 ; char 121: y
 149+ 5207 68 08 70 00
 150+ 520B 00 00 F8 10          defb $00,$00,$f8,$10,$20,$40,$f8,$00 ; char 122: z
 150+ 520F 20 40 F8 00
 151+ 5213 10 20 20 40          defb $10,$20,$20,$40,$20,$20,$10,$00 ; char 123: {
 151+ 5217 20 20 10 00
 152+ 521B 20 20 20 20          defb $20,$20,$20,$20,$20,$20,$20,$00 ; char 124: |
 152+ 521F 20 20 20 00
 153+ 5223 20 10 10 08          defb $20,$10,$10,$08,$10,$10,$20,$00 ; char 125: }
 153+ 5227 10 10 20 00
 154+ 522B 00 28 50 00          defb $00,$28,$50,$00,$00,$00,$00,$00 ; char 126: ~
 154+ 522F 00 00 00 00
 155+ 5233 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 127: (delete) - here end the standard ASCII (0-127)
 155+ 5237 00 00 00 00
 156+ 523B 78 84 CC 84          defb %01111000,%10000100,%11001100,%10000100,%10110100,%10000100,%01111000,%00000000 ; char 128 (open face)
 156+ 523F B4 84 78 00
 157+ 5243 78 FC B4 FC          defb %01111000,%11111100,%10110100,%11111100,%10110100,%11001100,%01111000,%00000000 ; char 129 (full face)
 157+ 5247 B4 CC 78 00
 158+ 524B 48 FC FC FC          defb %01001000,%11111100,%11111100,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 130 (hearts)
 158+ 524F FC 78 30 00
 159+ 5253 00 20 70 F8          defb %00000000,%00100000,%01110000,%11111000,%11111000,%01110000,%00100000,%00000000 ; char 131 (diamonds)
 159+ 5257 F8 70 20 00
 160+ 525B 70 20 A8 F8          defb %01110000,%00100000,%10101000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 132 (clubs)
 160+ 525F A8 20 70 00
 161+ 5263 20 70 F8 F8          defb %00100000,%01110000,%11111000,%11111000,%10101000,%00100000,%01110000,%00000000 ; char 133 (spades)
 161+ 5267 A8 20 70 00
 162+ 526B 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 134
 162+ 526F FC 30 30 30
 163+ 5273 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 135
 163+ 5277 3C 30 30 30
 164+ 527B 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 136
 164+ 527F F0 30 30 30
 165+ 5283 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00000000,%00000000,%00000000 ; char 137
 165+ 5287 F0 00 00 00
 166+ 528B 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00000000,%00000000,%00000000 ; char 138
 166+ 528F 3C 00 00 00
 167+ 5293 30 30 30 FC          defb %00110000,%00110000,%00110000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 139
 167+ 5297 FC 00 00 00
 168+ 529B 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00111100,%00110000,%00110000,%00110000 ; char 140
 168+ 529F 3C 30 30 30
 169+ 52A3 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00110000,%00110000,%00110000 ; char 141
 169+ 52A7 FC 30 30 30
 170+ 52AB 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11110000,%00110000,%00110000,%00110000 ; char 142
 170+ 52AF F0 30 30 30
 171+ 52B3 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%11111100,%00000000,%00000000,%00000000 ; char 143
 171+ 52B7 FC 00 00 00
 172+ 52BB 30 30 30 30          defb %00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000,%00110000 ; char 144
 172+ 52BF 30 30 30 30
 173+ 52C3 0C 1C 18 38          defb %00001100,%00011100,%00011000,%00111000,%01110000,%01100000,%11100000,%11000000 ; char 145
 173+ 52C7 70 60 E0 C0
 174+ 52CB C0 E0 60 70          defb %11000000,%11100000,%01100000,%01110000,%00111000,%00011000,%00011100,%00001100 ; char 146
 174+ 52CF 38 18 1C 0C
 175+ 52D3 CC CC 78 30          defb %11001100,%11001100,%01111000,%00110000,%00110000,%01111000,%11001100,%11001100 ; char 147
 175+ 52D7 30 78 CC CC
 176+ 52DB 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 148
 176+ 52DF 20 20 20 20
 177+ 52E3 00 00 00 3C          defb %00000000,%00000000,%00000000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 149
 177+ 52E7 20 20 20 20
 178+ 52EB 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 150
 178+ 52EF 20 20 20 20
 179+ 52F3 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 151
 179+ 52F7 00 00 00 00
 180+ 52FB 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00000000,%00000000,%00000000,%00000000 ; char 152
 180+ 52FF 00 00 00 00
 181+ 5303 20 20 20 FC          defb %00100000,%00100000,%00100000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 153
 181+ 5307 00 00 00 00
 182+ 530B 20 20 20 3C          defb %00100000,%00100000,%00100000,%00111100,%00100000,%00100000,%00100000,%00100000 ; char 154
 182+ 530F 20 20 20 20
 183+ 5313 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00100000,%00100000,%00100000,%00100000 ; char 155
 183+ 5317 20 20 20 20
 184+ 531B 20 20 20 E0          defb %00100000,%00100000,%00100000,%11100000,%00100000,%00100000,%00100000,%00100000 ; char 156
 184+ 531F 20 20 20 20
 185+ 5323 00 00 00 FC          defb %00000000,%00000000,%00000000,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 157
 185+ 5327 00 00 00 00
 186+ 532B 20 20 20 20          defb %00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000,%00100000 ; char 158
 186+ 532F 20 20 20 20
 187+ 5333 04 08 08 10          defb %00000100,%00001000,%00001000,%00010000,%00100000,%01000000,%01000000,%10000000 ; char 159
 187+ 5337 20 40 40 80
 188+ 533B 80 40 40 20          defb %10000000,%01000000,%01000000,%00100000,%00010000,%00001000,%00001000,%00000100 ; char 160
 188+ 533F 10 08 08 04
 189+ 5343 84 48 48 30          defb %10000100,%01001000,%01001000,%00110000,%00110000,%01001000,%01001000,%10000100 ; char 161
 189+ 5347 30 48 48 84
 190+ 534B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 162
 190+ 534F 00 00 FC FC
 191+ 5353 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111100,%11111100,%11111100,%11111100 ; char 163
 191+ 5357 FC FC FC FC
 192+ 535B 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 164
 192+ 535F FC FC FC FC
 193+ 5363 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 193+ 5367 00 00 00 00
 194+ 536B FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%00000000,%00000000,%00000000,%00000000 ; char 166
 194+ 536F 00 00 00 00
 195+ 5373 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 167
 195+ 5377 FC FC 00 00
 196+ 537B 80 80 80 80          defb %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000 ; char 168
 196+ 537F 80 80 80 80
 197+ 5383 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000,%11100000 ; char 169
 197+ 5387 E0 E0 E0 E0
 198+ 538B F8 F8 F8 F8          defb %11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000,%11111000 ; char 170
 198+ 538F F8 F8 F8 F8
 199+ 5393 04 04 04 04          defb %00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100,%00000100 ; char 171
 199+ 5397 04 04 04 04
 200+ 539B 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100,%00011100 ; char 172
 200+ 539F 1C 1C 1C 1C
 201+ 53A3 7C 7C 7C 7C          defb %01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100,%01111100 ; char 173
 201+ 53A7 7C 7C 7C 7C
 202+ 53AB FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 174
 202+ 53AF 84 84 84 FC
 203+ 53B3 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%11100000,%11100000,%11100000 ; char 175
 203+ 53B7 E0 E0 E0 E0
 204+ 53BB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00011100,%00011100,%00011100 ; char 176
 204+ 53BF 1C 1C 1C 1C
 205+ 53C3 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 177
 205+ 53C7 00 00 00 00
 206+ 53CB E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 178
 206+ 53CF 00 00 00 00
 207+ 53D3 E0 E0 E0 E0          defb %11100000,%11100000,%11100000,%11100000,%00011100,%00011100,%00011100,%00011100 ; char 179
 207+ 53D7 1C 1C 1C 1C
 208+ 53DB 1C 1C 1C 1C          defb %00011100,%00011100,%00011100,%00011100,%11100000,%11100000,%11100000,%11100000 ; char 180
 208+ 53DF E0 E0 E0 E0
 209+ 53E3 78 78 78 78          defb %01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000,%01111000 ; char 181
 209+ 53E7 78 78 78 78
 210+ 53EB CC CC CC CC          defb %11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100,%11001100 ; char 182
 210+ 53EF CC CC CC CC
 211+ 53F3 FC FC 00 00          defb %11111100,%11111100,%00000000,%00000000,%00000000,%00000000,%11111100,%11111100 ; char 183
 211+ 53F7 00 00 FC FC
 212+ 53FB 00 00 FC FC          defb %00000000,%00000000,%11111100,%11111100,%11111100,%11111100,%00000000,%00000000 ; char 184
 212+ 53FF FC FC 00 00
 213+ 5403 30 30 CC CC          defb %00110000,%00110000,%11001100,%11001100,%00110000,%00110000,%11001100,%11001100 ; char 185
 213+ 5407 30 30 CC CC
 214+ 540B 54 A8 54 A8          defb %01010100,%10101000,%01010100,%10101000,%01010100,%10101000,%01010100,%10101000 ; char 186
 214+ 540F 54 A8 54 A8
 215+ 5413 64 30 98 CC          defb %01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100 ; char 187
 215+ 5417 64 30 98 CC
 216+ 541B CC 64 30 98          defb %11001100,%01100100,%00110000,%10011000,%11001100,%01100100,%00110000,%10011000 ; char 188
 216+ 541F CC 64 30 98
 217+ 5423 30 98 CC 64          defb %00110000,%10011000,%11001100,%01100100,%00110000,%10011000,%11001100,%01100100 ; char 189
 217+ 5427 30 98 CC 64
 218+ 542B 64 CC 98 30          defb %01100100,%11001100,%10011000,%00110000,%01100100,%11001100,%10011000,%00110000 ; char 190
 218+ 542F 64 CC 98 30
 219+ 5433 20 20 F8 20          defb %00100000,%00100000,%11111000,%00100000,%00100000,%00000000,%11111000,%00000000 ; char 191 (Â±)
 219+ 5437 20 00 F8 00
 220+ 543B C0 30 08 30          defb %11000000,%00110000,%00001000,%00110000,%11000000,%00000000,%11111000,%00000000 ; char 192 (â¥)
 220+ 543F C0 00 F8 00
 221+ 5443 18 60 80 60          defb %00011000,%01100000,%10000000,%01100000,%00011000,%00000000,%11111000,%00000000 ; char 193 (â¤)
 221+ 5447 18 00 F8 00
 222+ 544B 3C 20 20 20          defb %00111100,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 222+ 544F A0 60 20 00
 223+ 5453 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 223+ 5457 00 00 00 00
 224+ 545B 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 224+ 545F 70 00 00 00
 225+ 5463 00 00 54 A8          defb %00000000,%00000000,%01010100,%10101000,%00000000,%11111100,%00000000,%00000000 ; char 197
 225+ 5467 00 FC 00 00
 226+ 546B 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 226+ 546F 54 A8 00 00
 227+ 5473 00 80 C0 E0          defb %00000000,%10000000,%11000000,%11100000,%11100000,%11000000,%10000000,%00000000 ; char 199
 227+ 5477 E0 C0 80 00
 228+ 547B FC 78 30 00          defb %11111100,%01111000,%00110000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 200
 228+ 547F 00 00 00 00
 229+ 5483 00 04 0C 1C          defb %00000000,%00000100,%00001100,%00011100,%00011100,%00001100,%00000100,%00000000 ; char 201
 229+ 5487 1C 0C 04 00
 230+ 548B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00110000,%01111000,%11111100 ; char 202
 230+ 548F 00 30 78 FC
 231+ 5493 20 70 F8 20          defb %00100000,%01110000,%11111000,%00100000,%00100000,%00100000,%00100000,%00000000 ; char 203 (up arrow)
 231+ 5497 20 20 20 00
 232+ 549B 3C 1C 1C 24          defb %00111100,%00011100,%00011100,%00100100,%01000000,%10000000,%00000000,%00000000 ; char 204 (up right arrow)
 232+ 549F 40 80 00 00
 233+ 54A3 00 10 18 FC          defb %00000000,%00010000,%00011000,%11111100,%00011000,%00010000,%00000000,%00000000 ; char 205 (right arrow)
 233+ 54A7 18 10 00 00
 234+ 54AB 00 00 80 40          defb %00000000,%00000000,%10000000,%01000000,%00100100,%00011100,%00011100,%00111100 ; char 206 (down right arrow)
 234+ 54AF 24 1C 1C 3C
 235+ 54B3 00 20 20 20          defb %00000000,%00100000,%00100000,%00100000,%00100000,%11111000,%01110000,%00100000 ; char 207 (down arrow)
 235+ 54B7 20 F8 70 20
 236+ 54BB 00 00 04 08          defb %00000000,%00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000 ; char 208 (down left arrow)
 236+ 54BF 90 E0 E0 F0
 237+ 54C3 00 20 60 FC          defb %00000000,%00100000,%01100000,%11111100,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 237+ 54C7 60 20 00 00
 238+ 54CB F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 238+ 54CF 08 04 00 00
 239+ 54D3 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 239+ 54D7 F0 44 38 00
 240+ 54DB 00 04 78 A8          defb %00000000,%00000100,%01111000,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 240+ 54DF 28 28 28 00
 241+ 54E3 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00011100,%00100000,%00100000,%00100000 ; char 213
 241+ 54E7 1C 20 20 20
 242+ 54EB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11100000,%00010000,%00010000,%00010000 ; char 214
 242+ 54EF E0 10 10 10
 243+ 54F3 10 10 10 E0          defb %00010000,%00010000,%00010000,%11100000,%00000000,%00000000,%00000000,%00000000 ; char 215
 243+ 54F7 00 00 00 00
 244+ 54FB 20 20 20 1C          defb %00100000,%00100000,%00100000,%00011100,%00000000,%00000000,%00000000,%00000000 ; char 216
 244+ 54FF 00 00 00 00
 245+ 5503 00 00 00 1C          defb %00000000,%00000000,%00000000,%00011100,%00111100,%00110000,%00110000,%00110000 ; char 217
 245+ 5507 3C 30 30 30
 246+ 550B 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00110000,%00110000,%00110000 ; char 218
 246+ 550F F0 30 30 30
 247+ 5513 30 30 30 F0          defb %00110000,%00110000,%00110000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 247+ 5517 E0 00 00 00
 248+ 551B 30 30 30 3C          defb %00110000,%00110000,%00110000,%00111100,%00011100,%00000000,%00000000,%00000000 ; char 220
 248+ 551F 1C 00 00 00
 249+ 5523 00 30 48 48          defb %00000000,%00110000,%01001000,%01001000,%01001000,%00110000,%00000000,%00000000 ; char 221
 249+ 5527 48 30 00 00
 250+ 552B 00 30 78 78          defb %00000000,%00110000,%01111000,%01111000,%01111000,%00110000,%00000000,%00000000 ; char 222
 250+ 552F 78 30 00 00
 251+ 5533 00 30 78 FC          defb %00000000,%00110000,%01111000,%11111100,%11111100,%01111000,%00110000,%00000000 ; char 223
 251+ 5537 FC 78 30 00
 252+ 553B FC F8 F0 E0          defb %11111100,%11111000,%11110000,%11100000,%11100000,%11000000,%10000000,%10000000 ; char 224
 252+ 553F E0 C0 80 80
 253+ 5543 FC 7C 3C 1C          defb %11111100,%01111100,%00111100,%00011100,%00011100,%00001100,%00000100,%00000100 ; char 225
 253+ 5547 1C 0C 04 04
 254+ 554B 04 04 0C 1C          defb %00000100,%00000100,%00001100,%00011100,%00011100,%00111100,%01111100,%11111100 ; char 226
 254+ 554F 1C 3C 7C FC
 255+ 5553 80 80 C0 E0          defb %10000000,%10000000,%11000000,%11100000,%11100000,%11110000,%11111000,%11111100 ; char 227
 255+ 5557 E0 F0 F8 FC
 256+ 555B 00 04 0C D8          defb %00000000,%00000100,%00001100,%11011000,%11110000,%11100000,%11000000,%00000000 ; char 228 (checkmark)
 256+ 555F F0 E0 C0 00
 257+ 5563 00 CC 78 30          defb %00000000,%11001100,%01111000,%00110000,%01111000,%11001100,%00000000,%00000000 ; char 229 (x)
 257+ 5567 78 CC 00 00
 258+ 556B 70 88 88 88          defb %01110000,%10001000,%10001000,%10001000,%01110000,%00100000,%01110000,%00100000 ; char 230 (female)
 258+ 556F 70 20 70 20
 259+ 5573 00 1C 0C 74          defb %00000000,%00011100,%00001100,%01110100,%10010000,%10010000,%01100000,%00000000 ; char 231 (male)
 259+ 5577 90 90 60 00
 260+ 557B F8 84 84 84          defb %11111000,%10000100,%10000100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 232 (new doc)
 260+ 557F 84 84 84 FC
 261+ 5583 00 F0 FC 84          defb %00000000,%11110000,%11111100,%10000100,%10000100,%10000100,%10000100,%11111100 ; char 233 (folder)
 261+ 5587 84 84 84 FC
 262+ 558B 30 78 FC 48          defb %00110000,%01111000,%11111100,%01001000,%01001000,%01001000,%01001000,%01111000 ; char 234 (trash bin)
 262+ 558F 48 48 48 78
 263+ 5593 FC 84 84 84          defb %11111100,%10000100,%10000100,%10000100,%11111100,%10110100,%10110100,%11111100 ; char 235 (floppy disk)
 263+ 5597 FC B4 B4 FC
 264+ 559B 00 00 D4 D8          defb %00000000,%00000000,%11010100,%11011000,%11010100,%11010100,%00000000,%00000000 ; char 236 (OK)
 264+ 559F D4 D4 00 00
 265+ 55A3 30 78 FC 78          defb %00110000,%01111000,%11111100,%01111000,%01111000,%01001000,%01001000,%01001000 ; char 237 (home)
 265+ 55A7 78 48 48 48
 266+ 55AB 78 84 A4 A4          defb %01111000,%10000100,%10100100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 238 (clock)
 266+ 55AF B4 84 78 00
 267+ 55B3 00 00 08 F4          defb %00000000,%00000000,%00001000,%11110100,%10101000,%10000000,%00000000,%00000000 ; char 239 (key)
 267+ 55B7 A8 80 00 00
 268+ 55BB 20 30 78 B0          defb %00100000,%00110000,%01111000,%10110000,%10100000,%10001000,%01110000,%00000000 ; char 240 (undo)
 268+ 55BF A0 88 70 00
 269+ 55C3 00 FC CC B4          defb %00000000,%11111100,%11001100,%10110100,%10000100,%10000100,%11111100,%00000000 ; char 241 (letter)
 269+ 55C7 84 84 FC 00
 270+ 55CB 60 90 90 F0          defb %01100000,%10010000,%10010000,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 242 (lock)
 270+ 55CF F0 F0 F0 00
 271+ 55D3 08 14 14 F0          defb %00001000,%00010100,%00010100,%11110000,%11110000,%11110000,%11110000,%00000000 ; char 243 (unlock)
 271+ 55D7 F0 F0 F0 00
 272+ 55DB FC FC 84 B4          defb %11111100,%11111100,%10000100,%10110100,%10010100,%10010100,%10000100,%11111100 ; char 244 (calendar)
 272+ 55DF 94 94 84 FC
 273+ 55E3 00 04 38 58          defb %00000000,%00000100,%00111000,%01011000,%01101000,%01110000,%10000000,%00000000 ; char 245 (diameter)
 273+ 55E7 68 70 80 00
 274+ 55EB 78 84 84 84          defb %01111000,%10000100,%10000100,%10000100,%01101100,%00011000,%00001000,%00000000 ; char 246 (baloon)
 274+ 55EF 6C 18 08 00
 275+ 55F3 30 28 28 28          defb %00110000,%00101000,%00101000,%00101000,%00100000,%01100000,%11100000,%01000000 ; char 247 (note)
 275+ 55F7 20 60 E0 40
 276+ 55FB 20 68 E4 E4          defb %00100000,%01101000,%11100100,%11100100,%11100100,%01101000,%00100000,%00000000 ; char 248 (audio on)
 276+ 55FF E4 68 20 00
 277+ 5603 20 60 E0 E0          defb %00100000,%01100000,%11100000,%11100000,%11100000,%01100000,%00100000,%00000000 ; char 249 (audio off)
 277+ 5607 E0 60 20 00
 278+ 560B 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11110000,%10010000 ; char 250 (pointer)
 278+ 560F F8 FC F0 90
 279+ 5613 78 84 B4 A4          defb %01111000,%10000100,%10110100,%10100100,%10110100,%10000100,%01111000,%00000000 ; char 251 (Â©)
 279+ 5617 B4 84 78 00
 280+ 561B 30 48 40 E0          defb %00110000,%01001000,%01000000,%11100000,%01000000,%01001000,%10110000,%00000000 ; char 252 (Â£)
 280+ 561F 40 48 B0 00
 281+ 5623 78 84 F0 48          defb %01111000,%10000100,%11110000,%01001000,%01001000,%00111100,%10000100,%01111000 ; char 253 (Â§)
 281+ 5627 48 3C 84 78
 282+ 562B 00 00 20 00          defb %00000000,%00000000,%00100000,%00000000,%11111000,%00000000,%00100000,%00000000 ; char 254 (Ã·)
 282+ 562F F8 00 20 00
 283+ 5633 FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 255 (cursor)
 283+ 5637 FC FC FC FC
 284+ 563B                      ; here ends the ASCII table
 285+ 563B
# file closed: ../include/vdp/6x8fonts-r16.asm
  93  563B                  INCLUDE "../include/vdp/8x8fonts-r18.asm"
# file opened: ../include/vdp/8x8fonts-r18.asm
   1+ 563B              ; ------------------------------------------------------------------------------
   2+ 563B              ; LM80C - 8x8 CHARSET - R1.8
   3+ 563B              ; ------------------------------------------------------------------------------
   4+ 563B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 563B              ; designed by Leonardo Miliani. More info at
   6+ 563B              ; www DOT leonardomiliani DOT com
   7+ 563B              ; ------------------------------------------------------------------------------
   8+ 563B              ; Code Revision:
   9+ 563B              ; R1.0 - 20190615 - First revision: ASCII chars (from 0 to 255) - actually, they are 6x8 pixels
  10+ 563B              ; R1.1 - 20190616 - Converted to 8x8 pixels
  11+ 563B              ; R1.2 - 20191013 - Added new graphic chars and reorganized previous ones
  12+ 563B              ; R1.3 - 20191015 - More graphic chars
  13+ 563B              ; R1.4 - 20191202 - Fixed char 11/12, added new special chars
  14+ 563B              ; R1.5 - 20191210 - Changed several graphic chars
  15+ 563B              ; R1.6 - 20200125 - Removed double chars, changed with new ones
  16+ 563B              ; R1.7 - 20200228 - adopted more usual hexadecimal & binary prefixes
  17+ 563B              ; R1.8 - 20200524 - New style for char #252
  18+ 563B              ; ------------------------------------------------------------------------------
  19+ 563B              ;
  20+ 563B              ;-------------------------------------------------------------------------------
  21+ 563B              ;
  22+ 563B              ;               8 x 8    C  H  A  R  S  E  T
  23+ 563B              ;
  24+ 563B              ;-------------------------------------------------------------------------------
  25+ 563B              ;
  26+ 563B              ;       8X8 CHARS, DESIGNED FOR GRAPHICS 1 MODE
  27+ 563B
  28+ 563B              CHRST88 equ $
  29+ 563B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 0 (null char)
  29+ 563F 00 00 00 00
  30+ 5643 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 1 F1
  30+ 5647 00 00 00 00
  31+ 564B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 2 F2
  31+ 564F 00 00 00 00
  32+ 5653 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 3 CTRL-C
  32+ 5657 00 00 00 00
  33+ 565B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 4 F3
  33+ 565F 00 00 00 00
  34+ 5663 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 5 F4
  34+ 5667 00 00 00 00
  35+ 566B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 6 F5
  35+ 566F 00 00 00 00
  36+ 5673 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 7 (bell)
  36+ 5677 00 00 00 00
  37+ 567B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 8 DEL key (backspace)
  37+ 567F 00 00 00 00
  38+ 5683 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 9 (H. tab)
  38+ 5687 00 00 00 00
  39+ 568B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 10 (line feed)
  39+ 568F 00 00 00 00
  40+ 5693 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 11 (unused)
  40+ 5697 00 00 00 00
  41+ 569B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 12 Form feed (clear screen)
  41+ 569F 00 00 00 00
  42+ 56A3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 13 RETURN key (carriage return)
  42+ 56A7 00 00 00 00
  43+ 56AB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 14 CTRL key
  43+ 56AF 00 00 00 00
  44+ 56B3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 15 CTRL-O
  44+ 56B7 00 00 00 00
  45+ 56BB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 16 C=/Graphic key
  45+ 56BF 00 00 00 00
  46+ 56C3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 17 CTRL-Q
  46+ 56C7 00 00 00 00
  47+ 56CB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 18 CTRL-R
  47+ 56CF 00 00 00 00
  48+ 56D3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 19 CTRL-S
  48+ 56D7 00 00 00 00
  49+ 56DB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 20 SHIFT key
  49+ 56DF 00 00 00 00
  50+ 56E3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 21 CTRL-U
  50+ 56E7 00 00 00 00
  51+ 56EB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 22 F6 key
  51+ 56EF 00 00 00 00
  52+ 56F3 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 23 F7 key
  52+ 56F7 00 00 00 00
  53+ 56FB 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 24 HELP key
  53+ 56FF 00 00 00 00
  54+ 5703 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 25 HOME key
  54+ 5707 00 00 00 00
  55+ 570B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 26 INSERT key
  55+ 570F 00 00 00 00
  56+ 5713 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 27 ESCAPE key
  56+ 5717 00 00 00 00
  57+ 571B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 28 CRSR LEFT key (cursor left)
  57+ 571F 00 00 00 00
  58+ 5723 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 29 CRSR RIGHT key (cursor right)
  58+ 5727 00 00 00 00
  59+ 572B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 30 CRSR UP key (cursor up)
  59+ 572F 00 00 00 00
  60+ 5733 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 31 CRSR DOWN key (cursor down)
  60+ 5737 00 00 00 00
  61+ 573B 00 00 00 00          defb $00,$00,$00,$00,$00,$00,$00,$00 ; char 32 SPACE key
  61+ 573F 00 00 00 00
  62+ 5743 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00000000,%00010000,%00000000 ; char 33 - !
  62+ 5747 10 00 10 00
  63+ 574B 28 28 28 00          defb %00101000,%00101000,%00101000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 34 - "
  63+ 574F 00 00 00 00
  64+ 5753 28 28 FE 28          defb %00101000,%00101000,%11111110,%00101000,%11111110,%00101000,%00101000,%00000000 ; char 35 - #
  64+ 5757 FE 28 28 00
  65+ 575B 10 3C 50 38          defb %00010000,%00111100,%01010000,%00111000,%00010100,%01111000,%00010000,%00000000 ; char 36 - $
  65+ 575F 14 78 10 00
  66+ 5763 00 62 64 08          defb %00000000,%01100010,%01100100,%00001000,%00010000,%00100110,%01000110,%00000000 ; char 37 - %
  66+ 5767 10 26 46 00
  67+ 576B 00 30 48 30          defb %00000000,%00110000,%01001000,%00110000,%01001010,%01000100,%00111010,%00000000 ; char 38 - &
  67+ 576F 4A 44 3A 00
  68+ 5773 08 10 20 00          defb %00001000,%00010000,%00100000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 39 - '
  68+ 5777 00 00 00 00
  69+ 577B 08 10 20 20          defb %00001000,%00010000,%00100000,%00100000,%00100000,%00010000,%00001000,%00000000 ; char 40 - (
  69+ 577F 20 10 08 00
  70+ 5783 20 10 08 08          defb %00100000,%00010000,%00001000,%00001000,%00001000,%00010000,%00100000,%00000000 ; char 41 - )
  70+ 5787 08 10 20 00
  71+ 578B 00 10 54 38          defb %00000000,%00010000,%01010100,%00111000,%00111000,%01010100,%00010000,%00000000 ; char 42 - *
  71+ 578F 38 54 10 00
  72+ 5793 00 10 10 7C          defb %00000000,%00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%00000000 ; char 43 - +
  72+ 5797 10 10 00 00
  73+ 579B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00001000,%00010000 ; char 44 - ,
  73+ 579F 00 18 08 10
  74+ 57A3 00 00 00 7C          defb %00000000,%00000000,%00000000,%01111100,%00000000,%00000000,%00000000,%00000000 ; char 45 - -
  74+ 57A7 00 00 00 00
  75+ 57AB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00011000,%00011000,%00000000 ; char 46 - .
  75+ 57AF 00 18 18 00
  76+ 57B3 00 02 04 08          defb %00000000,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%00000000 ; char 47 - /
  76+ 57B7 10 20 40 00
  77+ 57BB 38 44 4C 54          defb %00111000,%01000100,%01001100,%01010100,%01100100,%01000100,%00111000,%00000000 ; char 48 - 0
  77+ 57BF 64 44 38 00
  78+ 57C3 10 30 50 10          defb %00010000,%00110000,%01010000,%00010000,%00010000,%00010000,%01111100,%00000000 ; char 49 - 1
  78+ 57C7 10 10 7C 00
  79+ 57CB 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 50 - 2
  79+ 57CF 10 20 7C 00
  80+ 57D3 7C 08 10 08          defb %01111100,%00001000,%00010000,%00001000,%00000100,%01000100,%00111000,%00000000 ; char 51 - 3
  80+ 57D7 04 44 38 00
  81+ 57DB 08 18 28 48          defb %00001000,%00011000,%00101000,%01001000,%01111100,%00001000,%00001000,%00000000 ; char 52 - 4
  81+ 57DF 7C 08 08 00
  82+ 57E3 7C 40 78 04          defb %01111100,%01000000,%01111000,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 53 - 5
  82+ 57E7 04 44 38 00
  83+ 57EB 38 44 40 78          defb %00111000,%01000100,%01000000,%01111000,%01000100,%01000100,%00111000,%00000000 ; char 54 - 6
  83+ 57EF 44 44 38 00
  84+ 57F3 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%00100000,%00100000,%00000000 ; char 55 - 7
  84+ 57F7 20 20 20 00
  85+ 57FB 38 44 44 38          defb %00111000,%01000100,%01000100,%00111000,%01000100,%01000100,%00111000,%00000000 ; char 56 - 8
  85+ 57FF 44 44 38 00
  86+ 5803 38 44 44 3C          defb %00111000,%01000100,%01000100,%00111100,%00000100,%01000100,%00111000,%00000000 ; char 57 - 9
  86+ 5807 04 44 38 00
  87+ 580B 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00011000,%00000000,%00000000 ; char 58 - :
  87+ 580F 18 18 00 00
  88+ 5813 00 18 18 00          defb %00000000,%00011000,%00011000,%00000000,%00011000,%00001000,%00010000,%00000000 ; char 59 - ;
  88+ 5817 18 08 10 00
  89+ 581B 04 08 10 20          defb %00000100,%00001000,%00010000,%00100000,%00010000,%00001000,%00000100,%00000000 ; char 60 - <
  89+ 581F 10 08 04 00
  90+ 5823 00 00 7E 00          defb %00000000,%00000000,%01111110,%00000000,%01111110,%00000000,%00000000,%00000000 ; char 61 - =
  90+ 5827 7E 00 00 00
  91+ 582B 20 10 08 04          defb %00100000,%00010000,%00001000,%00000100,%00001000,%00010000,%00100000,%00000000 ; char 62 - >
  91+ 582F 08 10 20 00
  92+ 5833 38 44 04 08          defb %00111000,%01000100,%00000100,%00001000,%00010000,%00000000,%00010000,%00000000 ; char 63 - ?
  92+ 5837 10 00 10 00
  93+ 583B 78 84 BC AC          defb %01111000,%10000100,%10111100,%10101100,%10111000,%10000000,%10000100,%01111000 ; char 64 - @
  93+ 583F B8 80 84 78
  94+ 5843 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%00000000 ; char 65 - A
  94+ 5847 7C 44 44 00
  95+ 584B 78 44 44 78          defb %01111000,%01000100,%01000100,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 66 - B
  95+ 584F 44 44 78 00
  96+ 5853 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 67 - C
  96+ 5857 40 44 38 00
  97+ 585B 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01000100,%01000100,%01111000,%00000000 ; char 68 - D
  97+ 585F 44 44 78 00
  98+ 5863 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01111100,%00000000 ; char 69 - E
  98+ 5867 40 40 7C 00
  99+ 586B 7C 40 40 70          defb %01111100,%01000000,%01000000,%01110000,%01000000,%01000000,%01000000,%00000000 ; char 70 - F
  99+ 586F 40 40 40 00
 100+ 5873 38 44 40 40          defb %00111000,%01000100,%01000000,%01000000,%01011100,%01000100,%00111000,%00000000 ; char 71 - G
 100+ 5877 5C 44 38 00
 101+ 587B 44 44 44 7C          defb %01000100,%01000100,%01000100,%01111100,%01000100,%01000100,%01000100,%00000000 ; char 72 - H
 101+ 587F 44 44 44 00
 102+ 5883 38 10 10 10          defb %00111000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 73 - I
 102+ 5887 10 10 38 00
 103+ 588B 3C 04 04 04          defb %00111100,%00000100,%00000100,%00000100,%00000100,%01000100,%00111000,%00000000 ; char 74 - J
 103+ 588F 04 44 38 00
 104+ 5893 44 44 48 70          defb %01000100,%01000100,%01001000,%01110000,%01001000,%01000100,%01000100,%00000000 ; char 75 - K
 104+ 5897 48 44 44 00
 105+ 589B 40 40 40 40          defb %01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01111100,%00000000 ; char 76 - L
 105+ 589F 40 40 7C 00
 106+ 58A3 42 66 5A 42          defb %01000010,%01100110,%01011010,%01000010,%01000010,%01000010,%01000010,%00000000 ; char 77 - M
 106+ 58A7 42 42 42 00
 107+ 58AB 44 64 54 4C          defb %01000100,%01100100,%01010100,%01001100,%01000100,%01000100,%01000100,%00000000 ; char 78 - N
 107+ 58AF 44 44 44 00
 108+ 58B3 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 79 - O
 108+ 58B7 44 44 38 00
 109+ 58BB 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01000000,%01000000,%00000000 ; char 80 - P
 109+ 58BF 78 40 40 00
 110+ 58C3 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%01010100,%01001000,%00110100,%00000000 ; char 81 - Q
 110+ 58C7 54 48 34 00
 111+ 58CB 78 44 44 44          defb %01111000,%01000100,%01000100,%01000100,%01111000,%01001000,%01000100,%00000000 ; char 82 - R
 111+ 58CF 78 48 44 00
 112+ 58D3 3C 40 40 38          defb %00111100,%01000000,%01000000,%00111000,%00000100,%00000100,%01111000,%00000000 ; char 83 - S
 112+ 58D7 04 04 78 00
 113+ 58DB 7C 10 10 10          defb %01111100,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 84 - T
 113+ 58DF 10 10 10 00
 114+ 58E3 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 85 - U
 114+ 58E7 44 44 38 00
 115+ 58EB 44 44 44 44          defb %01000100,%01000100,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 86 - V
 115+ 58EF 44 28 10 00
 116+ 58F3 42 42 42 42          defb %01000010,%01000010,%01000010,%01000010,%01011010,%01011010,%00100100,%00000000 ; char 87 - W
 116+ 58F7 5A 5A 24 00
 117+ 58FB 44 44 28 10          defb %01000100,%01000100,%00101000,%00010000,%00101000,%01000100,%01000100,%00000000 ; char 88 - X
 117+ 58FF 28 44 44 00
 118+ 5903 44 44 44 28          defb %01000100,%01000100,%01000100,%00101000,%00010000,%00010000,%00010000,%00000000 ; char 89 - Y
 118+ 5907 10 10 10 00
 119+ 590B 7C 04 08 10          defb %01111100,%00000100,%00001000,%00010000,%00100000,%01000000,%01111100,%00000000 ; char 90 - Z
 119+ 590F 20 40 7C 00
 120+ 5913 38 20 20 20          defb %00111000,%00100000,%00100000,%00100000,%00100000,%00100000,%00111000,%00000000 ; char 91 - [
 120+ 5917 20 20 38 00
 121+ 591B 00 40 20 10          defb %00000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000000 ; char 92 - \
 121+ 591F 08 04 02 00
 122+ 5923 38 08 08 08          defb %00111000,%00001000,%00001000,%00001000,%00001000,%00001000,%00111000,%00000000 ; char 93 - ]
 122+ 5927 08 08 38 00
 123+ 592B 10 28 44 00          defb %00010000,%00101000,%01000100,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 94 - ^
 123+ 592F 00 00 00 00
 124+ 5933 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%01111110,%00000000 ; char 95 _ (underscore)
 124+ 5937 00 00 7E 00
 125+ 593B 20 10 08 00          defb %00100000,%00010000,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 96 - `
 125+ 593F 00 00 00 00
 126+ 5943 00 00 38 04          defb %00000000,%00000000,%00111000,%00000100,%00111100,%01000100,%00111100,%00000000 ; char 97 - a
 126+ 5947 3C 44 3C 00
 127+ 594B 40 40 40 78          defb %01000000,%01000000,%01000000,%01111000,%01000100,%01000100,%01111000,%00000000 ; char 98 - b
 127+ 594F 44 44 78 00
 128+ 5953 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%01000000,%01000100,%00111000,%00000000 ; char 99 - c
 128+ 5957 40 44 38 00
 129+ 595B 04 04 04 3C          defb %00000100,%00000100,%00000100,%00111100,%01000100,%01000100,%00111100,%00000000 ; char 100 - d
 129+ 595F 44 44 3C 00
 130+ 5963 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01111100,%01000000,%00111000,%00000000 ; char 101 - e
 130+ 5967 7C 40 38 00
 131+ 596B 18 24 20 70          defb %00011000,%00100100,%00100000,%01110000,%00100000,%00100000,%00100000,%00000000 ; char 102 - f
 131+ 596F 20 20 20 00
 132+ 5973 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00111000 ; char 103 - g
 132+ 5977 44 3C 04 38
 133+ 597B 40 40 58 64          defb %01000000,%01000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 104 - h
 133+ 597F 44 44 44 00
 134+ 5983 00 10 00 10          defb %00000000,%00010000,%00000000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 105 - i
 134+ 5987 10 10 10 00
 135+ 598B 08 00 18 08          defb %00001000,%00000000,%00011000,%00001000,%00001000,%00001000,%01001000,%00110000 ; char 106 - j
 135+ 598F 08 08 48 30
 136+ 5993 40 40 48 50          defb %01000000,%01000000,%01001000,%01010000,%01100000,%01010000,%01001000,%00000000 ; char 107 - k
 136+ 5997 60 50 48 00
 137+ 599B 30 10 10 10          defb %00110000,%00010000,%00010000,%00010000,%00010000,%00010000,%00111000,%00000000 ; char 108 - l
 137+ 599F 10 10 38 00
 138+ 59A3 00 00 54 6A          defb %00000000,%00000000,%01010100,%01101010,%01001010,%01000010,%01000010,%00000000 ; char 109 - m
 138+ 59A7 4A 42 42 00
 139+ 59AB 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000100,%01000100,%01000100,%00000000 ; char 110 - n
 139+ 59AF 44 44 44 00
 140+ 59B3 00 00 38 44          defb %00000000,%00000000,%00111000,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 111: o
 140+ 59B7 44 44 38 00
 141+ 59BB 00 00 78 44          defb %00000000,%00000000,%01111000,%01000100,%01000100,%01111000,%01000000,%01000000 ; char 112: p
 141+ 59BF 44 78 40 40
 142+ 59C3 00 00 3C 44          defb %00000000,%00000000,%00111100,%01000100,%01000100,%00111100,%00000100,%00000100 ; char 113: q
 142+ 59C7 44 3C 04 04
 143+ 59CB 00 00 58 64          defb %00000000,%00000000,%01011000,%01100100,%01000000,%01000000,%01000000,%00000000 ; char 114: r
 143+ 59CF 40 40 40 00
 144+ 59D3 00 00 38 40          defb %00000000,%00000000,%00111000,%01000000,%00111000,%00000100,%01111000,%00000000 ; char 115: s
 144+ 59D7 38 04 78 00
 145+ 59DB 20 20 70 20          defb %00100000,%00100000,%01110000,%00100000,%00100000,%00100100,%00011000,%00000000 ; char 116: t
 145+ 59DF 20 24 18 00
 146+ 59E3 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%01001100,%00110100,%00000000 ; char 117: u
 146+ 59E7 44 4C 34 00
 147+ 59EB 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01000100,%00101000,%00010000,%00000000 ; char 118: v
 147+ 59EF 44 28 10 00
 148+ 59F3 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01010100,%01010100,%00101000,%00000000 ; char 119: w
 148+ 59F7 54 54 28 00
 149+ 59FB 00 00 44 28          defb %00000000,%00000000,%01000100,%00101000,%00010000,%00101000,%01000100,%00000000 ; char 120: x
 149+ 59FF 10 28 44 00
 150+ 5A03 00 00 44 44          defb %00000000,%00000000,%01000100,%01000100,%01001100,%00110100,%00000100,%00111000 ; char 121: y
 150+ 5A07 4C 34 04 38
 151+ 5A0B 00 00 7C 08          defb %00000000,%00000000,%01111100,%00001000,%00010000,%00100000,%01111100,%00000000 ; char 122: z
 151+ 5A0F 10 20 7C 00
 152+ 5A13 18 20 20 40          defb %00011000,%00100000,%00100000,%01000000,%00100000,%00100000,%00011000,%00000000 ; char 123: {
 152+ 5A17 20 20 18 00
 153+ 5A1B 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 124: |
 153+ 5A1F 10 10 10 00
 154+ 5A23 30 08 08 04          defb %00110000,%00001000,%00001000,%00000100,%00001000,%00001000,%00110000,%00000000 ; char 125: }
 154+ 5A27 08 08 30 00
 155+ 5A2B 20 54 08 00          defb %00100000,%01010100,%00001000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 126: ~
 155+ 5A2F 00 00 00 00
 156+ 5A33 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 127 (delete) - end the standard ASCII (0-127)
 156+ 5A37 00 00 00 00
 157+ 5A3B 3C 42 A5 81          defb %00111100,%01000010,%10100101,%10000001,%10100101,%10011001,%01000010,%00111100 ; char 128 (open face)
 157+ 5A3F A5 99 42 3C
 158+ 5A43 3C 7E DB FF          defb %00111100,%01111110,%11011011,%11111111,%11011011,%11100111,%01111110,%00111100 ; char 129 (full face)
 158+ 5A47 DB E7 7E 3C
 159+ 5A4B 6C FE FE FE          defb %01101100,%11111110,%11111110,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 130 (hearts)
 159+ 5A4F 7C 38 10 00
 160+ 5A53 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%01111100,%00111000,%00010000,%00000000 ; char 131 (diamonds)
 160+ 5A57 7C 38 10 00
 161+ 5A5B 10 38 54 FE          defb %00010000,%00111000,%01010100,%11111110,%01010100,%00010000,%01111100,%00000000 ; char 132 (clus)
 161+ 5A5F 54 10 7C 00
 162+ 5A63 10 38 7C FE          defb %00010000,%00111000,%01111100,%11111110,%11010110,%00010000,%01111100,%00000000 ; char 133 (spades)
 162+ 5A67 D6 10 7C 00
 163+ 5A6B 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 134
 163+ 5A6F FF 18 18 18
 164+ 5A73 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 135
 164+ 5A77 1F 18 18 18
 165+ 5A7B 00 00 00 F8          defb %00000000,%00000000,%00000000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 136
 165+ 5A7F F8 18 18 18
 166+ 5A83 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00000000,%00000000,%00000000 ; char 137
 166+ 5A87 F8 00 00 00
 167+ 5A8B 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00000000,%00000000,%00000000 ; char 138
 167+ 5A8F 1F 00 00 00
 168+ 5A93 18 18 18 FF          defb %00011000,%00011000,%00011000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 139
 168+ 5A97 FF 00 00 00
 169+ 5A9B 18 18 18 1F          defb %00011000,%00011000,%00011000,%00011111,%00011111,%00011000,%00011000,%00011000 ; char 140
 169+ 5A9F 1F 18 18 18
 170+ 5AA3 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00011000,%00011000,%00011000 ; char 141
 170+ 5AA7 FF 18 18 18
 171+ 5AAB 18 18 18 F8          defb %00011000,%00011000,%00011000,%11111000,%11111000,%00011000,%00011000,%00011000 ; char 142
 171+ 5AAF F8 18 18 18
 172+ 5AB3 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; char 143
 172+ 5AB7 FF 00 00 00
 173+ 5ABB 18 18 18 18          defb %00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000,%00011000 ; char 144
 173+ 5ABF 18 18 18 18
 174+ 5AC3 03 07 0E 1C          defb %00000011,%00000111,%00001110,%00011100,%00111000,%01110000,%11100000,%11000000 ; char 145
 174+ 5AC7 38 70 E0 C0
 175+ 5ACB C0 E0 70 38          defb %11000000,%11100000,%01110000,%00111000,%00011100,%00001110,%00000111,%00000011 ; char 146
 175+ 5ACF 1C 0E 07 03
 176+ 5AD3 C3 E7 7E 3C          defb %11000011,%11100111,%01111110,%00111100,%00111100,%01111110,%11100111,%11000011 ; char 147
 176+ 5AD7 3C 7E E7 C3
 177+ 5ADB 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 148
 177+ 5ADF 10 10 10 10
 178+ 5AE3 00 00 00 1F          defb %00000000,%00000000,%00000000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 149
 178+ 5AE7 10 10 10 10
 179+ 5AEB 00 00 00 F0          defb %00000000,%00000000,%00000000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 150
 179+ 5AEF 10 10 10 10
 180+ 5AF3 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 151
 180+ 5AF7 00 00 00 00
 181+ 5AFB 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00000000,%00000000,%00000000,%00000000 ; char 152
 181+ 5AFF 00 00 00 00
 182+ 5B03 10 10 10 FF          defb %00010000,%00010000,%00010000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 153
 182+ 5B07 00 00 00 00
 183+ 5B0B 10 10 10 1F          defb %00010000,%00010000,%00010000,%00011111,%00010000,%00010000,%00010000,%00010000 ; char 154
 183+ 5B0F 10 10 10 10
 184+ 5B13 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00010000,%00010000,%00010000,%00010000 ; char 155
 184+ 5B17 10 10 10 10
 185+ 5B1B 10 10 10 F0          defb %00010000,%00010000,%00010000,%11110000,%00010000,%00010000,%00010000,%00010000 ; char 156
 185+ 5B1F 10 10 10 10
 186+ 5B23 00 00 00 FF          defb %00000000,%00000000,%00000000,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 157
 186+ 5B27 00 00 00 00
 187+ 5B2B 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000,%00010000 ; char 158
 187+ 5B2F 10 10 10 10
 188+ 5B33 01 02 04 08          defb %00000001,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000 ; char 159
 188+ 5B37 10 20 40 80
 189+ 5B3B 80 40 20 10          defb %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001 ; char 160
 189+ 5B3F 08 04 02 01
 190+ 5B43 81 42 24 18          defb %10000001,%01000010,%00100100,%00011000,%00011000,%00100100,%01000010,%10000001 ; char 161
 190+ 5B47 18 24 42 81
 191+ 5B4B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 162
 191+ 5B4F 00 00 FF FF
 192+ 5B53 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; char 163
 192+ 5B57 FF FF FF FF
 193+ 5B5B 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 164
 193+ 5B5F FF FF FF FF
 194+ 5B63 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; char 165
 194+ 5B67 00 00 00 00
 195+ 5B6B FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; char 166
 195+ 5B6F 00 00 00 00
 196+ 5B73 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 167
 196+ 5B77 FF FF 00 00
 197+ 5B7B C0 C0 C0 C0          defb %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000 ; char 168
 197+ 5B7F C0 C0 C0 C0
 198+ 5B83 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; char 169
 198+ 5B87 F0 F0 F0 F0
 199+ 5B8B FC FC FC FC          defb %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100 ; char 170
 199+ 5B8F FC FC FC FC
 200+ 5B93 03 03 03 03          defb %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011 ; char 171
 200+ 5B97 03 03 03 03
 201+ 5B9B 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; char 172
 201+ 5B9F 0F 0F 0F 0F
 202+ 5BA3 3F 3F 3F 3F          defb %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111 ; char 173
 202+ 5BA7 3F 3F 3F 3F
 203+ 5BAB FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 174
 203+ 5BAF 81 81 81 FF
 204+ 5BB3 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; char 175
 204+ 5BB7 F0 F0 F0 F0
 205+ 5BBB 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; char 176
 205+ 5BBF 0F 0F 0F 0F
 206+ 5BC3 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; char 177
 206+ 5BC7 00 00 00 00
 207+ 5BCB F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; char 178
 207+ 5BCF 00 00 00 00
 208+ 5BD3 F0 F0 F0 F0          defb %11110000,%11110000,%11110000,%11110000,%00001111,%00001111,%00001111,%00001111 ; char 179
 208+ 5BD7 0F 0F 0F 0F
 209+ 5BDB 0F 0F 0F 0F          defb %00001111,%00001111,%00001111,%00001111,%11110000,%11110000,%11110000,%11110000 ; char 180
 209+ 5BDF F0 F0 F0 F0
 210+ 5BE3 3C 3C 3C 3C          defb %00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100,%00111100 ; char 181
 210+ 5BE7 3C 3C 3C 3C
 211+ 5BEB C3 C3 C3 C3          defb %11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011,%11000011 ; char 182
 211+ 5BEF C3 C3 C3 C3
 212+ 5BF3 FF FF 00 00          defb %11111111,%11111111,%00000000,%00000000,%00000000,%00000000,%11111111,%11111111 ; char 183
 212+ 5BF7 00 00 FF FF
 213+ 5BFB 00 00 FF FF          defb %00000000,%00000000,%11111111,%11111111,%11111111,%11111111,%00000000,%00000000 ; char 184
 213+ 5BFF FF FF 00 00
 214+ 5C03 33 33 CC CC          defb %00110011,%00110011,%11001100,%11001100,%00110011,%00110011,%11001100,%11001100 ; char 185
 214+ 5C07 33 33 CC CC
 215+ 5C0B 55 AA 55 AA          defb %01010101,%10101010,%01010101,%10101010,%01010101,%10101010,%01010101,%10101010 ; char 186
 215+ 5C0F 55 AA 55 AA
 216+ 5C13 66 33 99 CC          defb %01100110,%00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100 ; char 187
 216+ 5C17 66 33 99 CC
 217+ 5C1B CC 99 33 66          defb %11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011,%01100110 ; char 188
 217+ 5C1F CC 99 33 66
 218+ 5C23 33 99 CC 66          defb %00110011,%10011001,%11001100,%01100110,%00110011,%10011001,%11001100,%01100110 ; char 189
 218+ 5C27 33 99 CC 66
 219+ 5C2B 66 CC 99 33          defb %01100110,%11001100,%10011001,%00110011,%01100110,%11001100,%10011001,%00110011 ; char 190
 219+ 5C2F 66 CC 99 33
 220+ 5C33 10 10 7C 10          defb %00010000,%00010000,%01111100,%00010000,%00010000,%00000000,%01111100,%00000000 ; char 191 (Â±)
 220+ 5C37 10 00 7C 00
 221+ 5C3B 60 18 06 18          defb %01100000,%00011000,%00000110,%00011000,%01100000,%00000000,%01111110,%00000000 ; char 192 (â¥)
 221+ 5C3F 60 00 7E 00
 222+ 5C43 06 18 60 18          defb %00000110,%00011000,%01100000,%00011000,%00000110,%00000000,%01111110,%00000000 ; char 193 (â¤)
 222+ 5C47 06 00 7E 00
 223+ 5C4B 3E 20 20 20          defb %00111110,%00100000,%00100000,%00100000,%10100000,%01100000,%00100000,%00000000 ; char 194 (square root)
 223+ 5C4F A0 60 20 00
 224+ 5C53 30 48 48 30          defb %00110000,%01001000,%01001000,%00110000,%00000000,%00000000,%00000000,%00000000 ; char 195 (Â°)
 224+ 5C57 00 00 00 00
 225+ 5C5B 60 10 30 40          defb %01100000,%00010000,%00110000,%01000000,%01110000,%00000000,%00000000,%00000000 ; char 196 (Â²)
 225+ 5C5F 70 00 00 00
 226+ 5C63 00 00 2A 54          defb %00000000,%00000000,%00101010,%01010100,%00000000,%01111110,%00000000,%00000000 ; char 197
 226+ 5C67 00 7E 00 00
 227+ 5C6B 00 54 A8 00          defb %00000000,%01010100,%10101000,%00000000,%01010100,%10101000,%00000000,%00000000 ; char 198 (â)
 227+ 5C6F 54 A8 00 00
 228+ 5C73 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11100000,%11000000,%10000000,%00000000 ; char 199
 228+ 5C77 E0 C0 80 00
 229+ 5C7B FE 7C 38 10          defb %11111110,%01111100,%00111000,%00010000,%00000000,%00000000,%00000000,%00000000 ; char 200
 229+ 5C7F 00 00 00 00
 230+ 5C83 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00000111,%00000011,%00000001,%00000000 ; char 201
 230+ 5C87 07 03 01 00
 231+ 5C8B 00 00 00 00          defb %00000000,%00000000,%00000000,%00000000,%00010000,%00111000,%01111100,%11111110 ; char 202
 231+ 5C8F 10 38 7C FE
 232+ 5C93 10 38 7C 10          defb %00010000,%00111000,%01111100,%00010000,%00010000,%00010000,%00010000,%00000000 ; char 203 (up arrow)
 232+ 5C97 10 10 10 00
 233+ 5C9B 1E 0E 0E 12          defb %00011110,%00001110,%00001110,%00010010,%00100000,%01000000,%00000000,%00000000 ; char 204 (up right arrow)
 233+ 5C9F 20 40 00 00
 234+ 5CA3 00 08 0C FE          defb %00000000,%00001000,%00001100,%11111110,%00001100,%00001000,%00000000,%00000000 ; char 205 (right arrow)
 234+ 5CA7 0C 08 00 00
 235+ 5CAB 00 40 20 12          defb %00000000,%01000000,%00100000,%00010010,%00001110,%00001110,%00011110,%00000000 ; char 206 (down right arrow)
 235+ 5CAF 0E 0E 1E 00
 236+ 5CB3 10 10 10 10          defb %00010000,%00010000,%00010000,%00010000,%01111100,%00111000,%00010000,%00000000 ; char 207 (down arrow)
 236+ 5CB7 7C 38 10 00
 237+ 5CBB 00 04 08 90          defb %00000000,%00000100,%00001000,%10010000,%11100000,%11100000,%11110000,%00000000 ; char 208 (down left arrow)
 237+ 5CBF E0 E0 F0 00
 238+ 5CC3 00 20 60 FE          defb %00000000,%00100000,%01100000,%11111110,%01100000,%00100000,%00000000,%00000000 ; char 209 (left arrow)
 238+ 5CC7 60 20 00 00
 239+ 5CCB F0 E0 E0 90          defb %11110000,%11100000,%11100000,%10010000,%00001000,%00000100,%00000000,%00000000 ; char 210 (up left arrow)
 239+ 5CCF 08 04 00 00
 240+ 5CD3 38 44 F0 40          defb %00111000,%01000100,%11110000,%01000000,%11110000,%01000100,%00111000,%00000000 ; char 211 (euro)
 240+ 5CD7 F0 44 38 00
 241+ 5CDB 00 02 7C A8          defb %00000000,%00000010,%01111100,%10101000,%00101000,%00101000,%00101000,%00000000 ; char 212 (greek pi)
 241+ 5CDF 28 28 28 00
 242+ 5CE3 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001000,%00010000,%00010000,%00010000 ; char 213
 242+ 5CE7 08 10 10 10
 243+ 5CEB 00 00 00 C0          defb %00000000,%00000000,%00000000,%11000000,%00100000,%00010000,%00010000,%00010000 ; char 214
 243+ 5CEF 20 10 10 10
 244+ 5CF3 10 10 20 C0          defb %00010000,%00010000,%00100000,%11000000,%00000000,%00000000,%00000000,%00000000 ; char 215
 244+ 5CF7 00 00 00 00
 245+ 5CFB 10 10 08 07          defb %00010000,%00010000,%00001000,%00000111,%00000000,%00000000,%00000000,%00000000 ; char 216
 245+ 5CFF 00 00 00 00
 246+ 5D03 00 00 00 07          defb %00000000,%00000000,%00000000,%00000111,%00001111,%00011100,%00011000,%00011000 ; char 217
 246+ 5D07 0F 1C 18 18
 247+ 5D0B 00 00 00 E0          defb %00000000,%00000000,%00000000,%11100000,%11110000,%00111000,%00011000,%00011000 ; char 218
 247+ 5D0F F0 38 18 18
 248+ 5D13 18 18 38 F0          defb %00011000,%00011000,%00111000,%11110000,%11100000,%00000000,%00000000,%00000000 ; char 219
 248+ 5D17 E0 00 00 00
 249+ 5D1B 18 18 1C 0F          defb %00011000,%00011000,%00011100,%00001111,%00000111,%00000000,%00000000,%00000000 ; char 220
 249+ 5D1F 07 00 00 00
 250+ 5D23 00 3C 42 42          defb %00000000,%00111100,%01000010,%01000010,%01000010,%01000010,%00111100,%00000000 ; char 221
 250+ 5D27 42 42 3C 00
 251+ 5D2B 00 3C 7E 7E          defb %00000000,%00111100,%01111110,%01111110,%01111110,%01111110,%00111100,%00000000 ; char 222
 251+ 5D2F 7E 7E 3C 00
 252+ 5D33 00 18 3C 7E          defb %00000000,%00011000,%00111100,%01111110,%01111110,%00111100,%00011000,%00000000 ; char 223
 252+ 5D37 7E 3C 18 00
 253+ 5D3B FF FE FC F8          defb %11111111,%11111110,%11111100,%11111000,%11110000,%11100000,%11000000,%10000000 ; char 224
 253+ 5D3F F0 E0 C0 80
 254+ 5D43 FF 7F 3F 1F          defb %11111111,%01111111,%00111111,%00011111,%00001111,%00000111,%00000011,%00000001 ; char 225
 254+ 5D47 0F 07 03 01
 255+ 5D4B 01 03 07 0F          defb %00000001,%00000011,%00000111,%00001111,%00011111,%00111111,%01111111,%11111111 ; char 226
 255+ 5D4F 1F 3F 7F FF
 256+ 5D53 80 C0 E0 F0          defb %10000000,%11000000,%11100000,%11110000,%11111000,%11111100,%11111110,%11111111 ; char 227
 256+ 5D57 F8 FC FE FF
 257+ 5D5B 00 02 06 6C          defb %00000000,%00000010,%00000110,%01101100,%01111000,%01110000,%01100000,%00000000 ; char 228 (checkmark)
 257+ 5D5F 78 70 60 00
 258+ 5D63 00 66 3C 18          defb %00000000,%01100110,%00111100,%00011000,%00111100,%01100110,%00000000,%00000000 ; char 229 (x)
 258+ 5D67 3C 66 00 00
 259+ 5D6B 38 44 44 44          defb %00111000,%01000100,%01000100,%01000100,%00111000,%00010000,%00111000,%00010000 ; char 230 (female)
 259+ 5D6F 38 10 38 10
 260+ 5D73 07 03 3D 44          defb %00000111,%00000011,%00111101,%01000100,%01000100,%01000100,%00111000,%00000000 ; char 231 (male)
 260+ 5D77 44 44 38 00
 261+ 5D7B 78 44 42 42          defb %01111000,%01000100,%01000010,%01000010,%01000010,%01000010,%01000010,%01111110 ; char 232 (new doc)
 261+ 5D7F 42 42 42 7E
 262+ 5D83 00 F8 FF 81          defb %00000000,%11111000,%11111111,%10000001,%10000001,%10000001,%10000001,%11111111 ; char 233 (folder)
 262+ 5D87 81 81 81 FF
 263+ 5D8B 10 7C FE 54          defb %00010000,%01111100,%11111110,%01010100,%01010100,%01010100,%01010100,%01111100 ; char 234 (trash bin)
 263+ 5D8F 54 54 54 7C
 264+ 5D93 FF 81 81 81          defb %11111111,%10000001,%10000001,%10000001,%10111101,%10101101,%10101101,%11111111 ; char 235 (floppy disk)
 264+ 5D97 BD AD AD FF
 265+ 5D9B 00 EA AA AC          defb %00000000,%11101010,%10101010,%10101100,%10101100,%10101010,%11101010,%00000000 ; char 236 (OK)
 265+ 5D9F AC AA EA 00
 266+ 5DA3 18 7E FF 7E          defb %00011000,%01111110,%11111111,%01111110,%01111110,%01100110,%01100110,%01100110 ; char 237 (home)
 266+ 5DA7 7E 66 66 66
 267+ 5DAB 3C 42 91 91          defb %00111100,%01000010,%10010001,%10010001,%10011101,%10000001,%01000010,%00111100 ; char 238 (clock)
 267+ 5DAF 9D 81 42 3C
 268+ 5DB3 00 02 05 FD          defb %00000000,%00000010,%00000101,%11111101,%10100101,%10100010,%00000000,%00000000 ; char 239 (key)
 268+ 5DB7 A5 A2 00 00
 269+ 5DBB 08 0C 3E 4C          defb %00001000,%00001100,%00111110,%01001100,%01001000,%01000010,%01000010,%00111100 ; char 240 (undo)
 269+ 5DBF 48 42 42 3C
 270+ 5DC3 00 FF C3 A5          defb %00000000,%11111111,%11000011,%10100101,%10011001,%10000001,%11111111,%00000000 ; char 241 (letter)
 270+ 5DC7 99 81 FF 00
 271+ 5DCB 38 44 44 7C          defb %00111000,%01000100,%01000100,%01111100,%01111100,%01111100,%01111100,%00000000 ; char 242 (lock)
 271+ 5DCF 7C 7C 7C 00
 272+ 5DD3 06 09 09 F8          defb %00000110,%00001001,%00001001,%11111000,%11111000,%11111000,%11111000,%00000000 ; char 243 (unlock)
 272+ 5DD7 F8 F8 F8 00
 273+ 5DDB FF FF 81 AD          defb %11111111,%11111111,%10000001,%10101101,%10100101,%10100101,%10000001,%11111111 ; char 244 (calendar)
 273+ 5DDF A5 A5 81 FF
 274+ 5DE3 01 1A 24 4A          defb %00000001,%00011010,%00100100,%01001010,%01010010,%00100100,%01011000,%10000000 ; char 245 (diameter)
 274+ 5DE7 52 24 58 80
 275+ 5DEB 7E 81 81 81          defb %01111110,%10000001,%10000001,%10000001,%10000001,%01110110,%00001100,%00000100 ; char 246 (baloon)
 275+ 5DEF 81 76 0C 04
 276+ 5DF3 0C 0A 0A 0A          defb %00001100,%00001010,%00001010,%00001010,%00001000,%00011000,%00111000,%00010000 ; char 247 (note)
 276+ 5DF7 08 18 38 10
 277+ 5DFB 12 31 F5 F5          defb %00010010,%00110001,%11110101,%11110101,%11110101,%11110101,%00110001,%00010010 ; char 248 (audio on)
 277+ 5DFF F5 F5 31 12
 278+ 5E03 10 30 F0 F0          defb %00010000,%00110000,%11110000,%11110000,%11110000,%11110000,%00110000,%00010000 ; char 249 (audio off)
 278+ 5E07 F0 F0 30 10
 279+ 5E0B 40 60 70 78          defb %01000000,%01100000,%01110000,%01111000,%01111100,%01111110,%01111000,%01001000 ; char 250 (pointer)
 279+ 5E0F 7C 7E 78 48
 280+ 5E13 3C 42 99 A1          defb %00111100,%01000010,%10011001,%10100001,%10100001,%10011001,%01000010,%00111100 ; char 251 (Â©)
 280+ 5E17 A1 99 42 3C
 281+ 5E1B 18 24 20 78          defb %00011000,%00100100,%00100000,%01111000,%00100000,%00100010,%01011100,%00000000 ; char 252 (Â£)
 281+ 5E1F 20 22 5C 00
 282+ 5E23 3C 42 78 24          defb %00111100,%01000010,%01111000,%00100100,%00100100,%00011110,%01000010,%00111100 ; char 253 (Â§)
 282+ 5E27 24 1E 42 3C
 283+ 5E2B 00 00 10 00          defb %00000000,%00000000,%00010000,%00000000,%01111100,%00000000,%00010000,%00000000 ; char 254 (Ã·)
 283+ 5E2F 7C 00 10 00
 284+ 5E33 FF FF FF FF          defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; char 255 (cursor)
 284+ 5E37 FF FF FF FF
 285+ 5E3B
# file closed: ../include/vdp/8x8fonts-r18.asm
  94  5E3B                  INCLUDE "../include/vdp/logo-fonts.asm"
# file opened: ../include/vdp/logo-fonts.asm
   1+ 5E3B              ; ------------------------------------------------------------------------------
   2+ 5E3B              ; LM80C - LOGO CHARSET - R1.1
   3+ 5E3B              ; ------------------------------------------------------------------------------
   4+ 5E3B              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5E3B              ; designed by Leonardo Miliani. More info at
   6+ 5E3B              ; www DOT leonardomiliani DOT com
   7+ 5E3B              ; ------------------------------------------------------------------------------
   8+ 5E3B              ; Code Revision:
   9+ 5E3B              ; R1.0 - 20200124 - First revision: logo chars
  10+ 5E3B              ; R1.1 - 20200229 - Adopted usual hexadecimal & binary prefixes
  11+ 5E3B              ; ------------------------------------------------------------------------------
  12+ 5E3B
  13+ 5E3B              LOGOFONT:   equ $
  14+ 5E3B 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000 ; 0
  14+ 5E3F 00 00 00 00
  15+ 5E43 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111 ; 1
  15+ 5E47 FF FF FF FF
  16+ 5E4B FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00000000,%00000000,%00000000,%00000000 ; 2
  16+ 5E4F 00 00 00 00
  17+ 5E53 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111 ; 3
  17+ 5E57 0F 0F 0F 0F
  18+ 5E5B 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11111111,%11111111,%11111111,%11111111 ; 4
  18+ 5E5F FF FF FF FF
  19+ 5E63 F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000 ; 5
  19+ 5E67 F0 F0 F0 F0
  20+ 5E6B 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%00001111,%00001111,%00001111,%00001111 ; 6
  20+ 5E6F 0F 0F 0F 0F
  21+ 5E73 00 00 00 00              defb %00000000,%00000000,%00000000,%00000000,%11110000,%11110000,%11110000,%11110000 ; 7
  21+ 5E77 F0 F0 F0 F0
  22+ 5E7B F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%00000000,%00000000,%00000000,%00000000 ; 8
  22+ 5E7F 00 00 00 00
  23+ 5E83 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%00000000,%00000000,%00000000,%00000000 ; 9
  23+ 5E87 00 00 00 00
  24+ 5E8B 00 00 00 FC              defb %00000000,%00000000,%00000000,%11111100,%11111111,%00000111,%00000011,%00000000 ; 10
  24+ 5E8F FF 07 03 00
  25+ 5E93 00 00 00 3F              defb %00000000,%00000000,%00000000,%00111111,%11111111,%11100000,%11000000,%00000000 ; 11
  25+ 5E97 FF E0 C0 00
  26+ 5E9B 18 18 1F 19              defb %00011000,%00011000,%00011111,%00011001,%00011001,%00011111,%00011000,%00011000 ; 12
  26+ 5E9F 19 1F 18 18
  27+ 5EA3 18 18 F8 98              defb %00011000,%00011000,%11111000,%10011000,%10011000,%11111000,%00011000,%00011000 ; 13
  27+ 5EA7 98 F8 18 18
  28+ 5EAB 18 18 1C 1F              defb %00011000,%00011000,%00011100,%00011111,%00001111,%00000000,%00000000,%00000000 ; 14
  28+ 5EAF 0F 00 00 00
  29+ 5EB3 00 00 00 0F              defb %00000000,%00000000,%00000000,%00001111,%00011111,%00011100,%00011000,%00011000 ; 15
  29+ 5EB7 1F 1C 18 18
  30+ 5EBB 00 00 00 F0              defb %00000000,%00000000,%00000000,%11110000,%11111000,%00111000,%00011000,%00011000 ; 16
  30+ 5EBF F8 38 18 18
  31+ 5EC3 18 18 38 F8              defb %00011000,%00011000,%00111000,%11111000,%11110000,%00000000,%00000000,%00000000 ; 17
  31+ 5EC7 F0 00 00 00
  32+ 5ECB 00 00 00 FF              defb %00000000,%00000000,%00000000,%11111111,%11111111,%00000000,%00000000,%00000000 ; 18
  32+ 5ECF FF 00 00 00
  33+ 5ED3 0F 0F 0F 0F              defb %00001111,%00001111,%00001111,%00001111,%11111111,%11111111,%11111111,%11111111 ; 19
  33+ 5ED7 FF FF FF FF
  34+ 5EDB F0 F0 F0 F0              defb %11110000,%11110000,%11110000,%11110000,%11111111,%11111111,%11111111,%11111111 ; 20
  34+ 5EDF FF FF FF FF
  35+ 5EE3 FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%11110000,%11110000,%11110000,%11110000 ; 21
  35+ 5EE7 F0 F0 F0 F0
  36+ 5EEB FF FF FF FF              defb %11111111,%11111111,%11111111,%11111111,%00001111,%00001111,%00001111,%00001111 ; 22
  36+ 5EEF 0F 0F 0F 0F
  37+ 5EF3 00 30 78 78              defb %00000000,%00110000,%01111000,%01111000,%00110000,%00000000,%00000000,%00000000 ; 23
  37+ 5EF7 30 00 00 00
  38+ 5EFB
# file closed: ../include/vdp/logo-fonts.asm
  95  5EFB
  96  5EFB              ; include workspace equates
  97  5EFB                  INCLUDE "../include/workspace/workspace-r1.1.asm"
# file opened: ../include/workspace/workspace-r1.1.asm
   1+ 5EFB              ; ------------------------------------------------------------------------------
   2+ 5EFB              ; LM80C 64K - WORKSPACE EQUATES - R1.1
   3+ 5EFB              ; ------------------------------------------------------------------------------
   4+ 5EFB              ; The following code is intended to be used with LM80C Z80-based computer
   5+ 5EFB              ; designed by Leonardo Miliani. Code and computer schematics are released under
   6+ 5EFB              ; the therms of the GNU GPL License 3.0 and in the form of "as is", without no
   7+ 5EFB              ; kind of warranty: you can use them at your own risk.
   8+ 5EFB              ; You are free to use them for any non-commercial use: you are only asked to
   9+ 5EFB              ; maintain the copyright notices, include this advice and the note to the
  10+ 5EFB              ; attribution of the original version to Leonardo Miliani, if you intend to
  11+ 5EFB              ; redistribuite them.
  12+ 5EFB              ; https://www.leonardomiliani.com
  13+ 5EFB              ;
  14+ 5EFB              ; Please support me by visiting the following links:
  15+ 5EFB              ; Main project page: https://www.leonardomiliani.com
  16+ 5EFB              ; Schematics and code: https://github.com/leomil72/LM80C
  17+ 5EFB              ; Videos about the computer: https://www.youtube.com/user/leomil72/videos
  18+ 5EFB              ; Hackaday page: https://hackaday.io/project/165246-lm80c-color-computer
  19+ 5EFB              ; ------------------------------------------------------------------------------
  20+ 5EFB
  21+ 5EFB              ; set starting of RAM based on computer model
  22+ 5EFB                  IFDEF LM80C64K
  23+ 5EFB ~            SERBUF_START    equ     END_OF_FW       ; RAM starts here
  24+ 5EFB                  ELSE
  25+ 5EFB              SERBUF_START    equ     $8000           ; RAM starts here
  26+ 5EFB                  ENDIF
  27+ 5EFB
  28+ 5EFB              ;-------------------------------------------------------------------------------
  29+ 5EFB              serInPtr        equ     SERBUF_START + SER_BUFSIZE
  30+ 5EFB              serRdPtr        equ     serInPtr+2
  31+ 5EFB              serBufUsed      equ     serRdPtr+2
  32+ 5EFB              basicStarted    equ     serBufUsed+1
  33+ 5EFB              bufWrap         equ     (SERBUF_START + SER_BUFSIZE) & $FF
  34+ 5EFB              TEMPSTACK       equ     CURPOS - 3      ; top of BASIC line input buffer so is "free ram" when BASIC resets
  35+ 5EFB
  36+ 5EFB              ; BASIC WORK SPACE LOCATIONS
  37+ 5EFB              ; THE INTERPRETER ALLOCATES THE FOLLOWING RAM CELLS
  38+ 5EFB              ; TO STORE IMPORTANT VALUES USED FOR SOME SPECIFIC FUNCTIONS:
  39+ 5EFB              ; THEY CAN BE VECTOR (ADDRESSES) FUNCTIONS, SYSTEM DATAS (I.E. VARIABLES)
  40+ 5EFB              ; AND SO ON. THE FIRST CELLS ARE FILLED WITH VALUES STORED INTO ROM AT $(INITAB) ADDRESS
  41+ 5EFB              WRKSPC          equ     basicStarted+$01; (3) BASIC Work space
  42+ 5EFB              NMIUSR          equ     WRKSPC+$03      ; (3) NMI exit point routine
  43+ 5EFB              USR             equ     NMIUSR+$03      ; (3) "USR (x)" jump  <-- in (USR+$01)/(USR+$02) the user can store the address of a specific machine language routine
  44+ 5EFB              OUTSUB          equ     USR+$03         ; (1) "out p,n"
  45+ 5EFB              OTPORT          equ     OUTSUB+$01      ; (2) Port (p)
  46+ 5EFB              DIVSUP          equ     OTPORT+$02      ; (1) Division support routine
  47+ 5EFB              DIV1            equ     DIVSUP+$01      ; (4) <- Values
  48+ 5EFB              DIV2            equ     DIV1+$04        ; (4) <-   to
  49+ 5EFB              DIV3            equ     DIV2+$04        ; (3) <-   be
  50+ 5EFB              DIV4            equ     DIV3+$03        ; (2) <-inserted
  51+ 5EFB              SEED            equ     DIV4+$02        ; (35) Random number seed  <-- starting address of a seed table
  52+ 5EFB              LSTRND          equ     SEED+$23        ; (4) Last random number
  53+ 5EFB              INPSUB          equ     LSTRND+$04      ; (1) INP A,(x) Routine
  54+ 5EFB              INPORT          equ     INPSUB+$01      ; (2) PORT (x)
  55+ 5EFB              LWIDTH          equ     INPORT+$02      ; (1) Terminal width
  56+ 5EFB              COMMAN          equ     LWIDTH+$01      ; (1) Width for commas
  57+ 5EFB              NULFLG          equ     COMMAN+$01      ; (1) Null after input byte flag
  58+ 5EFB              CTLOFG          equ     NULFLG+$01      ; (1) Control "O" flag
  59+ 5EFB              CHKSUM          equ     CTLOFG+$01      ; (2) Array load/save check sum
  60+ 5EFB              NMIFLG          equ     CHKSUM+$02      ; (1) Flag for NMI break routine
  61+ 5EFB              BRKFLG          equ     NMIFLG+$01      ; (1) Break flag
  62+ 5EFB              RINPUT          equ     BRKFLG+$01      ; (3) Input reflection
  63+ 5EFB              STRSPC          equ     RINPUT+$03      ; (2) Pointer to bottom (start) of string space - default is 100 bytes below the top of memory
  64+ 5EFB              LINEAT          equ     STRSPC+$02      ; (2) Current line number. -1 means "direct mode", while -2 means cold start.
  65+ 5EFB              HLPLN           equ     LINEAT+$02      ; (2) Current line with errors
  66+ 5EFB              KEYDEL          equ     HLPLN+$02       ; (1) delay before key auto-repeat starts
  67+ 5EFB              AUTOKE          equ     KEYDEL+$01      ; (1) delay for key auto-repeat
  68+ 5EFB              FNKEYS          equ     AUTOKE+$01      ; (128) default text of FN keys
  69+ 5EFB              BASTXT          equ     FNKEYS+$80      ; (3) Pointer to start of BASIC program in memory
  70+ 5EFB              ; - - - - - - - - - - - - - - - - - - -   the above are locations pre-filled by the firmware at startup
  71+ 5EFB              BUFFER          equ     BASTXT+$03      ; (5) Input buffer
  72+ 5EFB              STACK           equ     BUFFER+$05      ; (85) Initial stack
  73+ 5EFB              CURPOS          equ     STACK+$55       ; (1) Character position on line
  74+ 5EFB              LCRFLG          equ     CURPOS+$01      ; (1) Locate/Create flag for DIM statement
  75+ 5EFB              TYPE            equ     LCRFLG+$01      ; (1) Data type flag: 0=numeric, non-zero=string
  76+ 5EFB              DATFLG          equ     TYPE+$01        ; (1) Literal statement flag
  77+ 5EFB              LSTRAM          equ     DATFLG+$01      ; (2) Last available RAM location for BASIC
  78+ 5EFB              DOSBFR          equ     LSTRAM+$02      ; (2) Start of temporary buffer used by DOS for load/save files (32 bytes below the I/O buffer)
  79+ 5EFB              IOBUFF          equ     DOSBFR+$02      ; (2) Start of I/O buffer used by DOS to store/retrieve disk sectors
  80+ 5EFB              DOSER           equ     IOBUFF+$02      ; (1) Error from DOS
  81+ 5EFB              TMPDBF          equ     DOSER+$01       ; (36) Secondary buffer for DOS
  82+ 5EFB              TMSTPT          equ     DOSER+$24       ; (2) Temporary string pointer
  83+ 5EFB              TMSTPL          equ     TMSTPT+$02      ; (12) Temporary string pool
  84+ 5EFB              TMPSTR          equ     TMSTPL+$0C      ; (4) Temporary string
  85+ 5EFB              STRBOT          equ     TMPSTR+$04      ; (2) Bottom of string space
  86+ 5EFB              CUROPR          equ     STRBOT+$02      ; (2) Current operator in EVAL
  87+ 5EFB              LOOPST          equ     CUROPR+$02      ; (2) First statement of loop
  88+ 5EFB              DATLIN          equ     LOOPST+$02      ; (2) Line of current DATA item
  89+ 5EFB              FORFLG          equ     DATLIN+$02      ; (1) "FOR" loop flag
  90+ 5EFB              LSTBIN          equ     FORFLG+$01      ; (1) Last byte entered
  91+ 5EFB              READFG          equ     LSTBIN+$01      ; (1) Read/Input flag
  92+ 5EFB              BRKLIN          equ     READFG+$01      ; (2) Line of break
  93+ 5EFB              NXTOPR          equ     BRKLIN+$02      ; (2) Next operator in EVAL
  94+ 5EFB              ERRLIN          equ     NXTOPR+$02      ; (2) Line of error
  95+ 5EFB              CONTAD          equ     ERRLIN+$02      ; (2) Where to CONTinue
  96+ 5EFB              TMRCNT          equ     CONTAD+$02      ; (4) TMR counter for 1/100 seconds
  97+ 5EFB              CTC0IV          equ     TMRCNT+$04      ; (3) CTC0 interrupt vector
  98+ 5EFB              CTC1IV          equ     CTC0IV+$03      ; (3) CTC1 interrupt vector
  99+ 5EFB              CTC2IV          equ     CTC1IV+$03      ; (3) CTC2 interrupt vector
 100+ 5EFB              CTC3IV          equ     CTC2IV+$03      ; (3) CTC3 interrupt vector
 101+ 5EFB              ; - - - - - - - - - - - - - - - - - - -   VIDEO REGISTERS - FROM HERE...
 102+ 5EFB              SCR_SIZE_W      equ     CTC3IV+$03      ; (1) screen width (it can be either 40 chars or 32 chars/bytes)
 103+ 5EFB              SCR_SIZE_H      equ     SCR_SIZE_W+$01  ; (1) screen height (it can be 24/48/192: 24 for text, 48 for MC, 192 for graphics)
 104+ 5EFB              SCR_MODE        equ     SCR_SIZE_H+$01  ; (1) screen mode (0=text, 1=G1, 2=G2, 3=MC, 4=ExG2)
 105+ 5EFB              SCR_NAM_TB      equ     SCR_MODE+$01    ; (2) video name table address
 106+ 5EFB              SCR_CURS_X      equ     SCR_NAM_TB+$02  ; (1) cursor X
 107+ 5EFB              SCR_CURS_Y      equ     SCR_CURS_X+$01  ; (1) cursor Y
 108+ 5EFB              SCR_CUR_NX      equ     SCR_CURS_Y+$01  ; (1) new cursor X position
 109+ 5EFB              SCR_CUR_NY      equ     SCR_CUR_NX+$01  ; (1) new cursor Y position
 110+ 5EFB              SCR_ORG_CHR     equ     SCR_CUR_NY+$01  ; (1) original char positioned under the cursor
 111+ 5EFB              CRSR_STATE      equ     SCR_ORG_CHR+$01 ; (1) state of cursor (1=on, 0=off)
 112+ 5EFB              LSTCSRSTA       equ     CRSR_STATE+$01  ; (1) last cursor state
 113+ 5EFB              PRNTVIDEO       equ     LSTCSRSTA+$01   ; (1) print on video buffer (1=on / 0=off) set to off on graphic only modes
 114+ 5EFB              CHR4VID         equ     PRNTVIDEO+$01   ; (1) char for video buffer
 115+ 5EFB              FRGNDCLR        equ     CHR4VID+$01     ; (1) foreground color as set by SCREEN or COLOR commands
 116+ 5EFB              BKGNDCLR        equ     FRGNDCLR+$01    ; (1) background color as set by SCREEN or COLOR commands
 117+ 5EFB              TMPBFR1         equ     BKGNDCLR+$01    ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 118+ 5EFB              TMPBFR2         equ     TMPBFR1+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 119+ 5EFB              TMPBFR3         equ     TMPBFR2+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 120+ 5EFB              TMPBFR4         equ     TMPBFR3+$02     ; (2) word for general purposes use (temp. buffer for 1 or 2 bytes)
 121+ 5EFB              VIDEOBUFF       equ     TMPBFR4+$02     ; (40) buffer used for video scrolling and other purposes
 122+ 5EFB              VIDTMP1         equ     VIDEOBUFF+$28   ; (2) temporary video word
 123+ 5EFB              VIDTMP2         equ     VIDTMP1+$02     ; (2) temporary video word
 124+ 5EFB              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO VPD OUT OF THIS RANGE,
 125+ 5EFB                                                      ; OTHERWISE YOU WILL HAVE TO CHECK THE POINTER IN "CLR_RAM_REG" FUNCTION
 126+ 5EFB              ; - - - - - - - - - - - - - - - - - - -   SOUND & KEYBOARD REGISTERS - FROM HERE...
 127+ 5EFB              CHASNDDTN       equ     VIDTMP2+$02     ; (2) sound Ch.A duration (in 1/100s)
 128+ 5EFB              CHBSNDDTN       equ     CHASNDDTN+$02   ; (2) sound Ch.B duration (in 1/100s)
 129+ 5EFB              CHCSNDDTN       equ     CHBSNDDTN+$02   ; (2) sound Ch.C duration (in 1/100s)
 130+ 5EFB              KBDNPT          equ     CHCSNDDTN+$02   ; (1) temp cell used to flag if input comes from keyboard
 131+ 5EFB              KBTMP           equ     KBDNPT+$01      ; (1) temp cell used by keyboard scanner
 132+ 5EFB              TMPKEYBFR       equ     KBTMP+$01       ; (1) temp buffer for last key pressed
 133+ 5EFB              LASTKEYPRSD     equ     TMPKEYBFR+$01   ; (1) last key code pressed
 134+ 5EFB              STATUSKEY       equ     LASTKEYPRSD+$01 ; (1) status key, used for auto-repeat
 135+ 5EFB              KEYTMR          equ     STATUSKEY+$01   ; (2) timer used for auto-repeat key
 136+ 5EFB              CONTROLKEYS     equ     KEYTMR+$02      ; (1) flags for control keys (bit#0=SHIFT; bit#1=CTRL; bit#2=C=)
 137+ 5EFB              ; - - - - - - - - - - - - - - - - - - -   ...TO HERE. DO NOT ADD ANYTHING RELATED TO PSG OUT OF THIS RANGE,
 138+ 5EFB                                                      ; OTHERWISE YOU WILL HAVE TO CHANGE THE POINTER IN "initPSG" FUNCTION
 139+ 5EFB              SERIALS_EN      equ     CONTROLKEYS+$01 ; (1) serial ports status: bit 0 for Port1 (A), bit 1 for Port2 (B): 0=OFF, 1=ON
 140+ 5EFB              SERABITS        equ     SERIALS_EN+$01  ; (1) serial port A data bits
 141+ 5EFB              SERBBITS        equ     SERABITS+$01    ; (1) serial port B data bits
 142+ 5EFB              DOS_EN          equ     SERBBITS+$01    ; (1) DOS enable/disable (1/0)
 143+ 5EFB              ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 144+ 5EFB                                                      ; from here there are the RAM locations that
 145+ 5EFB                                                      ; are saved during SAVE
 146+ 5EFB              PROGND          equ     DOS_EN+$01      ; (2) End of program
 147+ 5EFB              VAREND          equ     PROGND+$02      ; (2) End of variables
 148+ 5EFB              ARREND          equ     VAREND+$02      ; (2) End of arrays
 149+ 5EFB              NXTDAT          equ     ARREND+$02      ; (2) Next data item
 150+ 5EFB              FNRGNM          equ     NXTDAT+$02      ; (2) Name of FN argument
 151+ 5EFB              FNARG           equ     FNRGNM+$02      ; (4) FN argument value
 152+ 5EFB              FPREG           equ     FNARG+$04       ; (3) Floating point register
 153+ 5EFB              FPEXP           equ     FPREG+$03       ; (1) Floating point exponent
 154+ 5EFB              SGNRES          equ     FPEXP+$01       ; (1) Sign of result
 155+ 5EFB              PBUFF           equ     SGNRES+$01      ; (13) Number print buffer
 156+ 5EFB              MULVAL          equ     PBUFF+$0D       ; (3) Multiplier
 157+ 5EFB              PROGST          equ     MULVAL+$03      ; (100) Start of program text area
 158+ 5EFB              STLOOK          equ     PROGST+$64      ; Start of memory test
 159+ 5EFB
# file closed: ../include/workspace/workspace-r1.1.asm
  98  5EFB
  99  5EFB              ; END OF ASSEMBLY SOURCE
 100  5EFB              ;-------------------------------------------------------------------------------
 101  5EFB
# file closed: LM80C-firmware-r3.21.asm

Value    Label
------ - -----------------------------------------------------------
0x823D   CHCSNDDTN
0x823B   CHBSNDDTN
0x80A8   NMIFLG
0x4E2C   CLCN323
0x4E03   CLCN325
0x4DE1   CLCN322
0x4DDE   CLCN321
0x4DCA   CLCN32Z
0x4DA2   CLCN32T
0x4D9D   DIV_32_16SB
0x4D9A   DIV_32_16OF
0x4D89   DIV_32_16LP
0x4D74   DV16_16_LP
0x4D63   DIV_16_8LP
0x4D54   DIV_8_8LOOP
0x4D42   MU32_2
0x4D37   MUL_32L
0x4D28   EXMUL16
0x4D1F   MLP1
0x4D18   MLP
0x4CF8 X TSTBIT
0x4CB1   BINIT
0x4CC4   CHKBIN
0x4C93   BITOUT2
0x4C8F   BITOUT
0x4C81   ZEROSUP
0x4C7B X BIN2
0x4C63   NOSUB7
0x4C67   HEXIT
0x4C43   HEXLP
0x4C48   HEXLP1
0x4C70   HXERR
0x4C50   GETHEX
0x4C33   ADD301
0x4C23   ADD30
0x4C0D   HEX4
0x4C0B   HEX3
0x4BFC   HEX1
0x4BFE   HEX2
0x4BAB   CNFRQN
0x4B7C   RNDKTX
0x4B3E   MSWROK
0x4B27   FRMTOK
0x4AD5   MSPTOK
0x4ABF   INITFN
0x4AAB X INITDSK
0x4AF5   FRMTXT
0x4A9E   CFINIT
0x4ADD   MSTTXT
0x4B58   DSKRNM
0x4A8B   DSKFRM
0x819D   TPHL
0x4A4B   ABRTXT
0x4A2F   ERASED
0x4A3D   ABRTDS
0x4B8A   CNFREQ
0x4A21   ERSTX
0x4BAD   CHKFLNM
0x49A3   SVERR
0x499C   SVEND
0x49A8   TXTSVG
0x4975   SAVE1
0x498A   SAVEST
0x49D4   DOS_ERR
0x48D2   LDERR
0x48FD   GET3AR
0x48CB   LDEND
0x48D7   TXTLDG
0x49DB   CHK1AR
0x4BB7   CHKFN1
0x48B6   LOADST
0x48E8   LDSVPT
0x488B   CHKDOS
0x4853   PRTEND
0x4847   PRTK1
0x4844   OPNQT1
0x482C   CLSQT1
0x4888   CHKEY5
0x4814   PTCHR1
0x4885   CHKEY4
0x481C   CLSQT
0x47DF   PRTK3
0x47F7   PRTCHR
0x482E   OPNQT
0x47E2   CNTLTK
0x47CD   LDKEY
0x487C   CHKEY2
0x4846   PRTCKEY
0x4877   CHKEY1
0x47B6 X PRTK2
0x47B4   PRTK4
0x47A0   CPKYEND
0x4798   CPKEY1
0x4790   CPKEY3
0x4789   CPKEY2
0x4779   CPKEY
0x476B   DECLN1
0x4855   SETREP
0x473B   KEYCH
0x47A2   LSTKEYS
0x4719   HLPERR
0x46F7   DIRMOD
0x46BE   EXNRM
0x46B0   ENCHB
0x4685   SRLCNT
0x466D   STRPAR
0x4650   SETPAR2
0x4641   BITS8
0x4636   BITS7
0x4645   SETPAR
0x462C   BITS6
0x4609   SET_CTC
0x46DB   CTC_CFG
0x46E6   SCERR1
0x45F8   SET_PT
0x45DF   CKBPS
0x46C5   SUP_BPS
0x45D3   SETSER
0x45C6   DEFSER
0x457B   CNTSER3
0x455E   CNTRX2
0x4569   CNTSER2
0x452B   SERLED
0x4525   SRPT2
0x4502   RPTRSSR
0x44F5   RSTSERS
0x452F   CNTSER
0x44F1   CHKZSER
0x44E2   SERVAR
0x46EA   SCERR
0x8213   SIOBFR
0x8212   STPBT
0x8211   PARBT
0x8210   DATABT
0x820E   BPS
0x820D   PRTNUM
0x449C   RPTCVBF
0x448D   RPCLTMB
0x4480   CNTVALY
0x4450   CNTCL7
0x442C   CNTCL6
0x4408   CNTCL5
0x43E6   CNTCL4
0x43C0   CNTCL3
0x439C   CNTCL2
0x447A   VALIDY
0x4378   CNTCL1
0x4475   VALIDX
0x4349   PLTCRL
0x433A   DLSZ
0x4352   ENDCRL
0x430D   RPTCL1
0x42FA   RPTCRL
0x4356   DRWCRL
0x8217   DC
0x8215   YI
0x8213   XI
0x820F   YC
0x820D   XC
0x4289   DXGR
0x42B2   ENDDRAW
0x4259   CNTDRW
0x423D   RPTDRW
0x423A   STRE2
0x422D   ER2
0x4D49   negHL
0x420A   Y1GR
0x41E0   X1GR
0x4D46   absHL
0x4494   CLRVDBF
0x4485   CLRTMBF
0x8219   DX
0x8217   SY
0x8215   SX
0x8213   E2
0x8211   ER
0x820F   Y2
0x820D   X2
0x8207   Y1
0x8205   X1
0x4D50   DIV_8_8
0x414A   PXLSET
0x4126   CNTPLT1
0x4146   NOGD
0x4152   XY2HL
0x40C1   PNTEND
0x40CB   CTPOINT
0x4078   PAINT5
0x4047   PAINT3
0x4088   CHECKPY
0x4034   PAINT2
0x4105   CNTPLOT
0x4004   MNPAINT
0x4001   PAINT1
0x4000   PAINT11
0x4087   CHECKPA
0x3FF2   PAINT0
0x407F   EXITPAI
0x3FE5   NXTLOOP
0x4083   EXITPA2
0x40DF   PNTRTN
0x44A3   CLRPRM
0x8211   ORGSP
0x8210 X SPB
0x820F X SPA
0x820D   PNT
0x3F77   GPCPCH1
0x3F6C X GPCPCHR
0x3F52   GPNTCO1
0x3F48 X GPNTCOL
0x3F3D   RPGPNT
0x3F28   GPNT
0x3F13   CNTGPT2
0x3F94   CKCOL
0x8213   TMPHL
0x8211   NUMCHR
0x820F   CHRPNT
0x820D   TMPADR
0x8205   MIXCOL
0x8207   TMPCLR
0x820B   GY
0x8209   GX
0x44BC   GMERR
0x3EAD   CHKG2M
0x3EA7   CHKCLR0
0x3E72   RPTLDCL
0x3E68   LOADCLR
0x3E7D   SETBRCL
0x3E96   MIXCLRS
0x3E61   CLREX2
0x3E58   CLRG2
0x3E4F   CLRG1
0x3E45   CLRTXT
0x3E48   CLRMC
0x3EA3   CHKCLR1
0x3D9D   CKMAGN
0x3DEA   CHKSCAR
0x3D92 X SETVDP
0x3DAB   SCVDP
0x3D6E   RPTPS
0x3D69 X DIR_PAU
0x3D43 X RECWRD
0x3D1F X ARET
0x3CFA   ATNTAB
0x3CF0   ATN1
0x3CA9   SINTAB
0x3C8D   SIN1
0x3CA5   QUARTR
0x3CA1   HALFPI
0x3C3A   RND2
0x3C1E   RND1
0x3C4B   RNDTAB
0x809B   LSTRND
0x3C43   RESEED
0x8078   SEED
0x3BCA   SUMLP
0x3BC1   SMSER1
0x3B91   EXPTAB
0x3B39   POWER2
0x3B1C   POWER1
0x3AFE   NEGAFT
0x3AC9   EXPTEN
0x3AD6   NOENED
0x3AAB   SUPTLZ
0x3AB7   DOEBIT
0x3A86   TRYAGN
0x3A77   DIGTXT
0x3AEC   POWERS
0x3A66   MAKNUM
0x3A41   GTSIXD
0x3A4A   INRNG
0x3A2C   SIXDIG
0x3AD9   RNGTST
0x3AD3   JSTZER
0x3A1D   SPCFST
0x825E   PBUFF
0x39C7   MULTEN
0x39BC   ENDCON
0x39C6   SCALPL
0x39B0   SCALMI
0x39F0   EDIGIT
0x399B   EXPLP
0x39AD   CONEXP
0x39A9   DPOINT
0x39CE   ADDIG
0x3985   MANLP
0x397D   CNVNUM
0x395E   MLDBLP
0x3936   DCBCDE
0x38FF   CMPFP
0x38C7   DETHLB
0x38C0   INCHL
0x3873   RETREL
0x3853   MLSP10
0x3846   OVTST1
0x384B   OVTST2
0x384C   OVTST3
0x37F8   RESDIV
0x806A   DIVSUP
0x37E5   DIVLP
0x8076   DIV4
0x806B   DIV1
0x806F   DIV2
0x8073   DIV3
0x37B2   DIV10
0x374A   NOMADD
0x3739   MUL8LP
0x375C   BYTSFT
0x3730   MULT8
0x826B   MULVAL
0x3828   ADDEXP
0x370E   FPMULT
0x3705   MULLN2
0x39E5   RSCALE
0x3BB2   SUMSER
0x37C0   DVBCDE
0x36C0   LOGTAB
0x36BC   UNITY
0x36AA   SHRLP
0x36A7   SHRITE
0x369A   SCALLP
0x825D   SGNRES
0x366B   FPROND
0x365A   RONDB
0x363E   NORMAL
0x363A   SAVEXP
0x3646   PNORM
0x3621   CONPOS
0x36AE   SHRT1
0x3659   RONDUP
0x3678   PLUCDE
0x3613   MINCDE
0x3698   SCALE
0x38D0   SIGNS
0x35ED   NOSWAP
0x35D0   SUBCDE
0x35CA   SUBPHL
0x35D3   FPADD
0x3AE8   HALF
0x35C1   ROUND
0x35BE X ENDINK2
0x35A3   CHKINK
0x359F   SRTINK
0x35B5   ENDINK
0x358B   INKEY2
0x357C   CMP_A
0x352A   NOS3
0x3511   NOS2
0x34FE   NOS1
0x34CE   SNDOVR
0x3521   WRTSND
0x3499   SND1
0x342B   RPVOLCG
0x3437   VOLCH
0x3390   PKEPRMS
0x337A   SYSRET
0x336C   NOSYSPR
0x332E   NMIINT
0x333A   NMIVR1
0x3324   NMIEINT
0x3320   NMI2
0x332B   NMIDINT
0x32FE   DISNMI
0x330F   NM1
0x8068   OTPORT
0x32C7   WAITLP
0x32C6   NOXOR
0x8067   OUTSUB
0x32D0   SETIO
0x809F   INPSUB
0x80A0   INPORT
0x328F   VAL2
0x3292   VAL3
0x3285   VAL1
0x3639   RESZER
0x3250   RSTSTR
0x329B   MIDNUM
0x321C   LVINSTR
0x3226   CNTZIN
0x31C6   RP2INST
0x31EF   CNT1INS
0x319F   RPTINST
0x3211   RZINSTR
0x821B   DY
0x318E   EMPTINS
0x8215   TF
0x8213   TP
0x8211   PT2
0x820D   PT
0x820B   ADRS2
0x8209   LNS2
0x8207   ADRS1
0x8205   LNS1
0x3115   ALLFOL
0x310D   MID1
0x4CD2   BINERR
0x310B   RIGHT1
0x3296   LFRGNM
0x32E6   MAKINT
0x30EA X GTFLNM
0x30DB   GETLEN
0x30C4   POPHL
0x30A5   GETSTR
0x309C   TSALP
0x3092   SSTSA
0x30AB   GSTRHL
0x2FFF   GRBARY
0x3036   SCNEND
0x2FDF   GNXARY
0x3010   STRADD
0x2FE0   ARRLP
0x2FCA   SMPVAR
0x300D   STPOOL
0x2FB9   GRBLP
0x2FAB   GARBLP
0x2F9C   TESTOS
0x2F80   GRBDON
0x2F6F   PRSLP
0x2F64   PRNUMS
0x2F45   TSTOPL
0x2F39   CRTSTE
0x2F2A   QTSTLP
0x2F14   MKTMST
0x309B   TOSTRA
0x2F17   CRTMST
0x2F7E   TESTR
0x3103   TOPOOL
0x2EF5   STR1
0x2F1D   SVSTAD
0x2EDE   CHEKFN
0x2E56   PASSA
0x3881   RETINT
0x2FA8   GARBGE
0x2E41   FRENUM
0x2E20   ENDTMR
0x2DEC   FNDELP
0x2E0B   ENDDIM
0x2DCA   ZERARY
0x3956   MLDEBC
0x2DAC   DEFSIZ
0x2DA4   CRARLP
0x2D84   BSERR
0x2DE7   FINDEL
0x2D6B   NXTARY
0x2D89   CREARY
0x2D57   FNDARY
0x2D2F   SCPTLP
0x2D0D   ZEROLP
0x2D1E   RETNUL
0x2D1B   RETADR
0x2CDC   FNTHR
0x2CE7   CFEVAL
0x2CCE   FNDVAR
0x375A   POPHRT
0x8255   FNARG
0x2D29   SBSCPT
0x2CB4   NSCFOR
0x2D51   ARLDSV
0x2CA4   NOTSTR
0x2C89   ENDNAM
0x2C95   CHARTY
0x2C88   SVNAM2
0x2C71   GTFNAM
0x8193   LCRFLG
0x2C5E   DIMRET
0x387C   FLGREL
0x3875   FLGDIF
0x2C25   CMPSTR
0x30AC   GSTRDE
0x30A8   GSTRCU
0x2C3D   CMPRES
0x2BFB   CMPLG1
0x2BF9   CMPLOG
0x2BE2   PXOR1
0x2BD5 X PAND1
0x2BDA   POR1
0x2E46   ACPASS
0x38AB   FPBCDE
0x2BBA   CNTLGC
0x2BA0   SGNEXP
0x2B97   GOFUNC
0x2B8F   FNVAL
0x2B50   FRMEVL
0x2B48   RETNUM
0x3893   INVSGN
0x2B34   EVLPAR
0x2B5E   FNOFST
0x2E88   DOFN
0x2C47   EVNOT
0x2B3C   MINUS
0x4CA7   BINTFP
0x4C37   HEXTFP
0x2B11   NOTAMP
0x2B4D   CONVAR
0x389B   STAKFP
0x2ACF   STKTHS
0x305B   CONCAT
0x2BE7   TSTRED
0x81D4   CUROPR
0x2AA7   FOPRND
0x2A8B   RLTLP
0x2A7E   EVAL3
0x81DF   NXTOPR
0x2A7B   EVAL2
0x2AE6   OPRND
0x2A72   EVAL1
0x2A6B   OPNPAR
0x2A61   TSTSTR
0x2A4D   KILFOR
0x38B9   LOADFP
0x35C4   ADDPHL
0x38A8   PHLTFP
0x2A15   NEXT1
0x2A07   FANDT
0x29DE   EXTIG
0x29C3   MORDT
0x3971   ASCTFP
0x29B7   LTSTND
0x2F27   DTSTR
0x299D   ITMSEP
0x29A0   STRENT
0x29AC   INPBIN
0x29EE   FDTLP
0x2982   ANTVLU
0x2956   NEDMOR
0x295A   GTVLUS
0x294E   NXTITM
0x2929   NOPMPT
0x2ED0   IDTEST
0x81DC   READFG
0x28FE   BADINP
0x28EC   REDO
0x28DD   SPCLP
0x28D6   DOSPC
0x32E0   FNDNUM
0x28B6   ZONELP
0x28A3   CNTEND
0x2F68   PRS1
0x2F23   CRTST
0x3A0F   NUMASC
0x2880   PRNTST
0x28E5   NEXITM
0x28A8   DOCOM
0x28C1   DOTAB
0x2839   PRNTLP
0x2832   MRPRNT
0x281B   IF0
0x2824   IF1
0x2812   IFGO
0x27F6   ONGOLP
0x27F5   ONGO
0x32E3   GETINT
0x38C2   FPTHL
0x38C5   DETHL4
0x2EFF   SAVSTR
0x30C6   BAKTMP
0x81CE   TMPSTR
0x27D6   MVSTPT
0x27CE   CRESTR
0x8259   FPREG
0x27A7   LETSTR
0x27DF   LETNUM
0x2A62   CHKTYP
0x2A6F   EVAL
0x8194   TYPE
0x2C6C   GETVAR
0x277E   NXTSTT
0x277B   NXTSTL
0x2774   NXTDTA
0x276F   RETLIN
0x2731   RUNLIN
0x26EA   STORED
0x26A0   GTLNLP
0x269D   GETLN
0x38E5   CMPNUM
0x3912   FPINT
0x825C   FPEXP
0x267C   DEPINT
0x2679 X POSINT
0x34D4   NOISUP
0x2676   FPSINT
0x266E   CHKLTR
0x80A6   CHKSUM
0x2661 X ACCSUM
0x2642   ERRINT
0x81E1   ERRLIN
0x2631   NOLIN
0x261B   INPBRK
0x80A9   BRKFLG
0x2605   STALL
0x260F   BRK
0x8251   NXTDAT
0x25F2   UPDATA
0x25F1   RESTNL
0x25B4   ONJMP
0x25B3   IFJMP
0x261E   ENDPRG
0x258C   RUNCNT
0x2588   PUTFID
0x386A   TSTSGN
0x257F   SAVSTP
0x38B6   BCDEFP
0x2A5D   GETNUM
0x2A60   TSTNUM
0x2543   FORFND
0x2527   FORSLP
0x81D6   LOOPST
0x250C   CNTWTSP
0x2500   WTSPC
0x24F8   LVSRLN
0x24ED   SRCLN1
0x24CA   OUTWRD
0x24D8   NXTLN
0x24B1   LSTLP3
0x24AE   LSTLP2
0x24A2   LST07
0x249F   LST08
0x4066   PAINT4
0x2474   LST02
0x2471   LST05
0x2434   LST06
0x245D   LST03
0x2438   LSTNOT
0x2419   LST01H
0x247D   LISTLP
0x24EC   SRCLN
0x24E6   SRCHLIN
0x2416   LST01
0x2445   LSTALL
0x3D20   GETINP
0x4CD7   MONOUT
0x23C1   SND2VID
0x23AE   INCLEN
0x8192   CURPOS
0x80A2   LWIDTH
0x23B2   DINPOS
0x2F9A   POPAF
0x2383   CHKSYN
0x2374   OUTIT
0x2377   OUTNBS
0x4CFF   OUTNCR
0x2360   PUTBUF
0x288F   ENDINP
0x235A   GMNCR
0x2365   PUTCTL
0x2325   PROCES
0x23CF   CLOTST
0x22FD   KILIN
0x22F2   DELCHR
0x230C   MORINP
0x22FA   OTKLN
0x22E6   ECHDEL
0x80A4   NULFLG
0x22D2   DODEL
0x22B9   NXTCHR
0x22B3   TSTREM
0x22B0   SETLIT
0x2292   NOCHNG
0x2289   NOSPC
0x229A   MATCH
0x2278   NXTBYT
0x2268   GETNXT
0x2266   SEARCH
0x229E   RETNAD
0x224D   FNDWRD
0x22C9   ENDBUF
0x22C2   CPYLIT
0x22A2   MOVDIR
0x2223   CRNCLP
0x8195   DATFLG
0x80AA   RINPUT
0x21FE   DOAGN
0x8253   FNRGNM
0x81DA   FORFLG
0x81E3   CONTAD
0x81C0   TMSTPT
0x81C2   TMSTPL
0x824D   VAREND
0x81D2   STRBOT
0x81DD   BRKLIN
0x21CF   INTVAR
0x21A2   SRCHLP
0x8135   BASTXT
0x2193   FNDEND
0x2187   PTRLP
0x21CB   RUNFST
0x217A   MOVBUF
0x2182   SETPTR
0x214C   SFTPRG
0x215B   INEWLN
0x274B   ULERR
0x2144   LINFND
0x219F   SRCHLN
0x81DB   LSTBIN
0x25AC   EXCUTE
0x221A   CRUNCH
0x2303   GETLIN
0x20F0   GETCMD
0x20E2   POPNOK
0x39FC   LINEIN
0x80B1   HLPLN
0x20DE   PTLN
0x20C1   ERRIN
0x2887   STTLIN
0x80A5   CTLOFG
0x209B   NRERR
0x2098   IMERR
0x2095   TMERR
0x2092   OVERR
0x208F   UFERR
0x208C   DDERR
0x2089   NFERR
0x2086   DZERR
0x81D8   DATLIN
0x207D   DATSNR
0x207B   LDG1ND
0x206A   LDG1
0x205D   EXITGM
0x209D   ERROR
0x2058   OMERR
0x824F   ARREND
0x2040   CHKSTK
0x2035   MOVLP
0x2032   MOVSTR
0x2049   ENFMEM
0x202F   MOVUP
0x2026   INDFND
0x2010   LOKFOR
0x200C   BAKSTK
0x2006   BRKMSG
0x2001   OKMSG
0x2000   ZERBYT
0x1FFC   INMSG
0x1FF5   ERRMSG
0x1F73 X DEFFNKS
0x1F71   AUTORP
0x2303   TTYLIN
0x2697   FCERR
0x2BB3   POR
0x2BB8   PXOR
0x2BB0   PAND
0x3624   BNORM
0x3B0C   POWER
0x3761   DINT
0x3769   MOD
0x37BE   DIV
0x370C   MULT
0x35CE   PSUB
0x39EB   PADD
0x1EFE   PRITAB
0x00EA   ZLEFT
0x00E2   ZINSTR
0x00E1   ZPOINT
0x00CB   ZSGN
0x00CA   ZLTH
0x00C9   ZEQUAL
0x00C8   ZGTR
0x00C7   ZOR
0x00C3 X ZDINT
0x00C2 X ZMOD
0x00C1 X ZDIV
0x00C0 X ZTIMES
0x00BF   ZMINUS
0x00BE   ZPLUS
0x00BD   ZSTEP
0x00BC   ZNOT
0x00BB   ZTHEN
0x00BA   ZSPC
0x00B9   ZFN
0x00B8   ZTO
0x00B7   ZTAB
0x00B6   ZNEW
0x00B0   ZPRINT
0x00AF   ZELSE
0x008E   ZREM
0x008C   ZGOSUB
0x0088   ZGOTO
0x0083   ZDATA
0x0081   ZFOR
0x0080   ZEND
0x21BF   NEW
0x492F   SAVE
0x4895   LOAD
0x26C1   CLEAR
0x23EA   LIST
0x2648   CONT
0x2836   PRINT
0x4CDA   RESET
0x334E   SYS
0x3D36   WIDTH
0x3EB6   GPRINT
0x32F4   NMI
0x471E   KEY
0x3D22   CLS
0x4700   HELP
0x44C1   SERIAL
0x3FA7   PAINT
0x42B6   CIRCLE
0x417D   DRAW
0x40EA   PLOT
0x3DFA   COLOR
0x3D60   PAUSE
0x3409   VOLUME
0x3442   SOUND
0x33B6   LOCATE
0x3536   VREG
0x33E8   SREG
0x33AB   VPOKE
0x3D49   DOKE
0x33A6   POKE
0x2E5B   DEF
0x32B2   WAIT
0x4A54   DISK
0x49F4   ERASE
0x49B9   FILES
0x27E6   ON
0x32AC   POUT
0x2614   STOP
0x2777   REM
0x2750   RETURN
0x2721   GOSUB
0x25DC   RESTOR
0x2804   IF
0x270D   RUN
0x2732   GOTO
0x278C   LET
0x2949   READ
0x2C67   DIM
0x290F   INPUT
0x2775   DATA
0x2A12   NEXT
0x2513   FOR
0x2616   PEND
0x1E90   WORDTB
0x1CFF   WORDS
0x3237   MID
0x322D   RIGHT
0x3107   LEFT
0x4C75   BIN
0x4BE4   HEX
0x30F7   CHR
0x30E6   ASC
0x3267   VAL
0x2EEF   STR
0x4565   RXEND
0x30D7   LEN
0x3137   INSTR
0x4097   POINT
0x3571   INKEY
0x355D   SSTAT
0x3552   VSTAT
0x3383   VPEEK
0x3D3E   DEEK
0x337C   PEEK
0x3CD3   ATN
0x3CBE   TAN
0x3D7F   SCREEN
0x3C5D   SIN
0x3C57   COS
0x3B51   EXP
0x36CD   LOG
0x3BE2   RND
0x3B03   SQR
0x2E53   POS
0x32A0   INP
0x2E25   FRE
0x820F   PT1
0x8064   USR
0x388F   ABS_
0x393D   INT
0x2E0F   TMR
0x3879   SGN
0x1CBB   FNCTAB
0x20E3   PRNTOK
0x472B   RESFN
0x1C2F   BRKRET
0x813D   STACK
0x1C44   BFREE
0x3A04   PRNTHL
0x1C3B   BLNSPC
0x1C93   DOSMSG
0x1C1C   SETTP1
0x21C0   CLRPTR
0x80AD   STRSPC
0x8196   LSTRAM
0x1BEC   NODOS
0x237D   CPDEHL
0x2083   SNERR
0x269C   ATOH
0x1BC7   SETTOP
0x1BA3   MLOOP
0x82D2   STLOOK
0x1BB5   TSTMEM
0x25CC   GETCHR
0x2202   PROMPT
0x1CB0   MEMMSG
0x1B8D   MSIZE
0x1BA0   MNOASK
0x3450   CTSNDC
0x826E   PROGST
0x2899   PRNTCRLF
0x21E5   CLREG
0x24C0   FNDTOK
0x1FF5   INITBE
0x1F1C   INITAB
0x1B72   SYSINIT
0x805E   WRKSPC
0x2E47   ABPASS
0x287C   PRNTNB
0x2682   DEINT
0x1B6B   CSTART
0x1C2C   WARMST
0x1B64   STARTB
0x1915 X ERRORS
0x1B4F   D8MSG
0x1913 X D8PTR
0x1B43   D7MSG
0x1911 X D7PRT
0x1B2F   D6MSG
0x190F X D6PTR
0x1B25   D5MSG
0x190D X D5PTR
0x1B20   D4MSG
0x190B X D4PTR
0x1B1B   D3MSG
0x396C   NOMLAD
0x1909 X D3PRT
0x1B0D   D2MSG
0x1907 X D2PRT
0x1B01   D1MSG
0x1905 X D1PRT
0x1AF1   D0MSG
0x1903 X D0PTR
0x1AE0   NRMSG
0x1901 X NRPRT
0x1ACA   IMMSG
0x18FF X IMPRT
0x1AC0   HPMSG
0x18FD X HPPTR
0x1AAA   SOMSG
0x1A91   SAMSG
0x18F9 X SAPTR
0x1A7C   SCMSG
0x18F7 X SCPTR
0x18F5 X GMPRT
0x1A60   BNMSG
0x18F3 X BNPTR
0x1A55   HXMSG
0x18F1 X HXPTR
0x1A45   MOMSG
0x18EF X MOPTR
0x18ED X UFPTR
0x1A20   CNMSG
0x18EB X CNPTR
0x1A05   STMSG
0x18E9 X STPTR
0x18FB X SOPTR
0x19F5   LSMSG
0x18E7 X LSPTR
0x19E1   OSMSG
0x4D35   MU32_1
0x18E5 X OSPTR
0x19D2   TMMSG
0x18E3 X TMPTR
0x19BE   IDMSG
0x18E1 X IDPTR
0x19AD   DZMSG
0x18DF X DZPTR
0x1998   DDMSG
0x18DD X DDPTR
0x198A   BSMSG
0x18DB X BSPTR
0x197B   ULMSG
0x487F   CHKEY3
0x18D9 X ULPTR
0x196D   OMMSG
0x18D7 X OMPTR
0x1964   OVMSG
0x18D5 X OVPTR
0x194E   FCMSG
0x18D3 X FCPTR
0x1942   ODMSG
0x18D1 X ODPTR
0x192D   RGMSG
0x18CF X RGPTR
0x1926   SNMSG
0x18CD X SNPTR
0x1915   NFMSG
0x18CB X NFPTR
0x18CB   ERRTBL
0x003E   D3
0x0038   D0
0x0036   NR
0x0034   IM
0x0032   HP
0x0030   SO
0x002E   SA
0x002C   SC
0x002A   GM
0x0028   BN
0x0026 X HX
0x0024   MO
0x0022   UF
0x0020   CN
0x001E   ST
0x28DB   ASPCS
0x001C   LS
0x001A   OS
0x0018   TM
0x0016   ID
0x0014   DZ
0x0012   DD
0x0010   BS
0x000E   UL
0x000C   OM
0x000A   OV
0x0008   FC
0x0006   OD
0x0004   RG
0x0002   SN
0x0000   NF
0x007F   DEL
0x001B   ESC
0x0015   CTRLU
0x0013   CTRLS
0x0012   CTRLR
0x0011   CTRLQ
0x000F   CTRLO
0x0007   CTRLG
0x18B4   RSTIOBF
0x18B3   CLRBUFF
0x18A9 X CHK_NAM_LV
0x18A8   CHK_C_CF
0x1A2F   UFMSG
0x4C1A   BYT2ASC
0x186F   PRN_WHEX1
0x186D X PRN_WHEX
0x1884   BYTEHEX
0x1864   PRN_HEX1
0x1863 X PRN_HEX
0x185A   PRNTSIZ
0x4DCE   CLCN32
0x1835   CHKNMVAL3
0x1894   CHK_NAM
0x1825   CHKNMVAL2
0x8207   DKNMPT
0x8138   BUFFER
0x181F   CHKNMVAL1
0x8209   DKLNPT
0x1810   CHKDSKVAL2
0x180F   CHKDSKVALE
0x17FA   CHKDSKVAL1
0x17D9   CH0TO9E
0x17D1   CH0TO9
0x17C0   RND8
0x1790   FNDFREDIR5
0x179C   FNDFREDIR3
0x1771   FNDFREDIR2
0x1767   FNDFREDIR1
0x1740   CHKSTNM7
0x173A X CHKSTNM5
0x1743   FLNTEXS
0x1745   FLEXST
0x171A   CHKSTNM6
0x1710   CHKSTNM3
0x1725   CHKSTNM10
0x16F1   CHKSTNM8
0x16EB X CHKSTNM2
0x16E5   CHKSTNM1
0x16CE   FIL_ERA2
0x16C3   FIL_ERA1
0x16D1   FIL_ERA3
0x169B   FIL_ERA6
0x16A2   FIL_ERA5
0x1646   FIL_ERASE
0x163A   LDFL5
0x1641   LDFLEX
0x1603   LDFL3
0x15E3   LDFL2
0x15DF   LDFL1
0x15C3   LDFL4
0x157E   LODFILE
0x1572   SAVFL12
0x154D X SAVFL11
0x1579   SAVFLEXT
0x152D   SAVFL4
0x151B   SAVFL10
0x14FF   SAVFL2
0x14D7   SAVFL9
0x183C   DE2HL
0x148E X SAVFL7
0x148A   SAVFL6
0x4D6F   DIV_16_16
0x1477   SAVFL1
0x824B   PROGND
0x146F   SAVFL3
0x1747   FNDFREDIR
0x16DB   FILE_EXIST
0x1841   HL2DE
0x141A   SAVFILE
0x1406 X EXITFLS
0x184A   PRN16ASCII
0x4D2A   MUL_U32
0x1846   PRN32ASCII
0x13B7   LSTFILES7
0x139E X LSTFILES5
0x24FA   TSTSPC
0x25F7   TSTBRK
0x1385 X LSTFILES8
0x1850   PRN16ASCIX
0x1364   LSTFILES21
0x1367   LSTFILESPR
0x140B   FILETP
0x135C   LSTFILES20
0x1340   LSTFILES3
0x132D   LSTFILES4
0x1327 X LSTFILES2
0x1321   LSTFILES1
0x13C7   PNTSTATS
0x12F5   INPR1
0x2F65   PRS
0x17DC   CHKDSKVAL
0x12D3   LST_FILES
0x12C9   TLFLSTX
0x12B8   ALFLSTXT
0x12AD   TLSCTTX
0x12A1   DSKNMTX
0x819C   DOSER
0x0046   D7
0x1292   DOSVERSERR
0x0040   D4
0x128E   LODERR
0x0048   D8
0x128A   FLNTFND
0x003A   D1
0x1286   NAMERR
0x0044   D6
0x1282   DUPLERR
0x0042   D5
0x127E   DSKFULL
0x1299   RET_ERR
0x003C   D2
0x16D6   WRT_ERR
0x124F   DSK_RNM
0x1249   DOS_FT8
0x1236   DOS_FT9
0x1243   DOS_FT10
0x121C   DOS_FTA
0x1247   DOS_FT7
0x238E   OUTC
0x127A   D2ERR
0x17A5   RND_ID
0x11D3 X DOS_FT5
0x1297   D1ERR
0x1814   CHKNMVAL
0x11AB   DOS_FT2
0x118F X DOS_FT0
0x1190   DOS_FT1
0x1182   DOS_FTC
0x4D84   DIV_32_16
0x8198   DOSBFR
0x18BF   CLRDOSBF
0x18AA   CLRIOBF
0x111A   DSK_INIT
0x81B8   ENDMEM
0x81B6   SRTMEM
0x81B4   TPBF4
0x8211   RADIUS
0x81B2   TPBF3
0x81B0   TPBF2
0x81AE   TPBF1
0x81AC   RAM_PTR
0x81AA   LSB_SCT
0x81A8   MSB_SCT
0x81A7   SCT_SIZ
0x81A5   BYT_SIZ
0x81A3   NTR_NBR
0x81A1   DIR_SCT
0x819D   DIR_STRT
0x819D   TMPDBF
0x1118   DSKDIRADR
0x1109   DFSCT0
0x10F8   CF_WR_SEC2
0x10F6   CF_WR_SEC1
0x1105   CF_WR_EXIT
0x10DD   CF_WR_SEC
0x10D0   CF_RD_SECT
0x10DA   CF_RD_EXIT
0x3AC7   OUTEXP
0x819A   IOBUFF
0x10C4   CF_RD_CMD
0x10B1   CF_RD_SEC
0x10A5   CF_STANDBY
0x10A2 X CR_DV_ERR
0x10A3   CR_DV_RD_E
0x819F   DAT_STRT
0x1096   CR_DV_RD_1
0x138E   LSTFILES6
0x106F   CF_SETSTR
0x1062   CF_DAT_RDY
0x1060   RETERR
0x1053   CF_CMDRDY
0x1091   CR_DEV_RDY
0x1043   CF_NOP
0x102D   CF_INIT
0x0057   CF_CMD
0x0057   CF_STAT
0x0056   CF_LBA3
0x0055   CF_LBA2
0x0054   CF_LBA1
0x0053   CF_LBA0
0x0052   CF_SECCNT
0x0051   CF_FTR
0x0051 X CF_ERR
0x0050   CF_DATA
0x0F05   CNTFNK
0x0F18   PRNTFNK
0x0F0B   PUTCHRBUF1
0x0EF1   LDFNKEYCHR
0x80B5   FNKEYS
0x80AF   LINEAT
0x1C52   SIGNON
0x0ED8 X LVKBRDCHK
0x0ED1   PNT2VD
0x0EC4   PUTCHRBUF
0x0EB2   SNDKEYTOBFR
0x0ED9   PRNTFNKEY
0x0EAA   CHKFNK
0x0F25   FNKEYSORD
0x0EA4   CNTKBCK
0x0003   CTRLC
0x80B4   AUTOKE
0x3627   BNRMLP
0x0E91   SENDKEY
0x0E62   SETNEWAUTO
0x0ED4   LVKBRDCHK2
0x80B3   KEYDEL
0x0E72   CHKAUTO
0x8244   KEYTMR
0x0E84   NEWKEY
0x0FAD   KBMAP_ALT
0x0FED   KBMAP_CTRL
0x0E29   CHKALT
0x0E30   LOADMAP
0x0F6D   KBMAP_SFT
0x0E20   CHKCTRL
0x0F2D   KBMAP
0x0E0C   CHKLN
0x8243   STATUSKEY
0x8242   LASTKEYPRSD
0x0DF4   ENDCTRLCK
0x0DEE   TESTCTRL
0x0E0A   FINDKEY
0x0DE1   TESTALT
0x8240   KBTMP
0x0DF8   NOKEYPRSD
0x0DB2   RPTKBDRD
0x0DAE   CHECKKBD
0x0DA0   CHECKCTRL
0x8246   CONTROLKEYS
0x0D92   CHECKALT
0x0D52   CNTCHKSND
0x0D17   CHKSNDCH
0x0CE5   RPTWLCMBP
0x0CFB   NOBPDAT
0x0CE2   SENDSND
0x0CF3   WLCBPDAT
0x0D08   WRTSNDREG
0x0D03   SETSNDREG
0x0CC9   SNDREGCFG
0x0CB5   CLRPSGREGS
0x0CB1   EMPTSNDBFR
0x0B63 X VDPMODESETEX2
0x0B5B X VDPMODESETMC
0x0B53 X VDPMODESET2
0x2F24   QTSTR
0x0B4B X VDPMODESET1
0x0B39   SENDCHRPTRNS
0x563B   CHRST88
0x0B37   NXTCHAR
0x4E3B   CHRST68
0x0B18   LDREGVLS
0x0B43   VDPMODESET
0x0B01   RSTVDPRAMREG
0x8239   CHASNDDTN
0x0AF2   EMPTVRM
0x0A86 X CNTNULL2
0x0A79   RPTNLLSRC2
0x4D10   MUL16
0x0A54   ADDNEWLINE
0x0A21   SNDCHRTOBFR
0x0A08   CNTNULL
0x09F8   RPTNLLSRC
0x0A40   PRNTRETURN
0x820B   TMPBFR4
0x8209   TMPBFR3
0x8207   SRTTXT
0x8207   TMPBFR2
0x09CE   RPTEMPTYROW
0x09B3   WRITEBUF
0x098A   LOADNEXTCOL
0x820D   VIDEOBUFF
0x0978   SCROLLNXTRW
0x8237   VIDTMP2
0x8235   VIDTMP1
0x0957   EXITCURSOR_ON
0x0941   EXITCURSORDOWN
0x0921   EXITCURSORRGHT
0x091B   CONTCRSRGT
0x0908   CHCKYPOS2
0x08ED   EXITCURSORUP
0x08C4   CHKYPOS
0x08B1   EXITCURSORLEFT
0x08AE   CONTCRSLFT
0x089D   CHCKYPOS
0x08B3   MVCRS2LFT
0x086E   MVBKSP
0x0881   LVBKSP
0x0020   SPC
0x0839 X ENDINSRT
0x0834   NXTINST
0x4D05   CMP16
0x0823   CHKHL
0x8209   ENDTXT
0x0A61   ENDOFLN
0x8205   CUR_POS
0x0801   PUTCRSCHR
0x0960   SCROLLUP
0x07C1   SETCRSRY
0x104C   CF_BUSY
0x07C2   SETCSRCOORDS
0x07D4   EXITCHAR2VID
0x0798   NXTCPCK
0x078B   RPTCPCK
0x07E1   PLACEHOLDER
0x000A   LF
0x0805   INSERTKEY
0x001A   INSRT
0x0924   CURSORDOWN
0x001F   CRSDN
0x08EF   CURSORRIGHT
0x001D   CRSRGT
0x08D6   CURSORUP
0x001E   CRSUP
0x088A   CURSORLEFT
0x001C   CRSLFT
0x0847   BACKSPACE
0x3E17   CNTCKCL
0x0008   BKSP
0x09DA   CRGRETURN
0x000C   CS
0x0019   HOME
0x075A   CHRTBL
0x4D60   DIV_16_8
0x0749   HL2XY
0x0A87   POS_TB_CRS_32
0x073B   CONT_POS_CURS
0x0AB7   POS_TB_CRS_40
0x8200   LSTCSRSTA
0x81FF   CRSR_STATE
0x06F3   MOVSHOWCRS
0x0708   NEWCRSRCOORD
0x071D   RSTCHRCRS
0x0726   LOAD_CRSR_POS
0x06DC   READ_VSTAT
0x06D1   WRITE_VREG
0x06BC   WRITE_VIDEO_LOC
0x06A7   READ_VIDEO_LOC
0x06ED   MOVCRS
0x81FC   SCR_CUR_NX
0x0000   NLLCR
0x81FD   SCR_CUR_NY
0x069D   ATHOME
0x06E3   POS_CURSOR
0x0690   CLEARVIDBUF
0x067D   RPTFLL1
0x066A   SNDCLRSET
0x0666   STARTEMPTY
0x0630   CLRG2PTNTBL
0x0615   RPTEMPTYBUF
0x060F   LDCOLSTOEMPTY
0x064F   EMPTYMC
0x061E   EMPTYG2
0x05EC   LVCKSPLK
0x05EE   DOCOLDRESET
0x0D5D   READKBLN
0x05D9 X CHKSPCK
0x05CA   SNDLOGPT
0x3684   COMPL
0x5E3B   LOGOFONT
0x0CDF   NOBEEP
0x0CD9   WLCMBEEP
0x0595   RPT100
0x05AB   BEEPOFF
0x059F   SETBEEP
0x056B   DEC_D
0x824A   DOS_EN
0x8205   TMPBFR1
0x055A   RPT104
0x05B3   LOADLOGOCHRS
0x0552   RPT103
0x0B6B   LM80CLOGO
0x053C   RPT102
0x0CBC   RSTPSG
0x0539   RPT101
0x05D4   CLRTABLE
0x0587   ERASECLRTBL
0x0674   SETNAMETABLE
0x0B0E   SET_GFX_MODE2
0x81FE   SCR_ORG_CHR
0x05F5   EMPTYVIDBUF
0x0474   LDCLRTBMD1
0x8203   FRGNDCLR
0x0687   SETVDPADRS
0x0505   ENDVDPSET
0x81F8   SCR_NAM_TB
0x80A3   COMMAN
0x81F6   SCR_SIZE_H
0x81F5   SCR_SIZE_W
0x8204   BKGNDCLR
0x81FB   SCR_CURS_Y
0x04FC   LDCLRTBEX2
0x81FA   SCR_CURS_X
0x0B22   LOADCHARSET
0x0412 X TXTMD
0x04C2   EXG2MD
0x049F   MCMD
0x047D   G2MD
0x043C   G1MD
0x81F7   SCR_MODE
0x0AFB   CLR_RAM_REG
0x0B06   SET_GFX_MODE
0x0AE7   EMPTY_VRAM
0x0383   RESTMR
0x0388   CTCCONF
0x035A X SIO_B_SETS
0x0354   SIO_A_SETS
0x0349   COUNTER
0x0347   DEC_E
0x0343   LEDLIGHT
0x1B61   WARM
0x1B5E   COLD
0x0959   CURSOR_OFF
0x031F   ECHO_CHAR
0x0312   CHECKWARM
0x02FB   CORW
0x0944   CURSOR_ON
0x03D0   MSGTXT2
0x0307   COLDSTART
0x805D   basicStarted
0x0394   MSGTXT1
0x4CF0   INITST
0x03ED   initVDP
0x0510   SHOW_LOGO
0x0CAB   initPSG
0x035E   initCTC
0x0339   HELLOWRLD
0x02B1 X INIT_HW2
0x818F   TEMPSTACK
0x0D72   KEYBOARD
0x0D0D   MNGSNDS
0x07E2   FLASHCURSOR
0x029A   CHKCRSR
0x0294   INCTMR3
0x81E5   TMRCNT
0x028B   CH3_TIMER
0x027D   RAWPRINT
0x026C   TX_EMP
0x0269   TXA_EXIT
0x0255   RXA_EXIT
0x023F   NOTRDWRAP
0x805A   serRdPtr
0x8000   SERBUF_START
0x0214   NOTWRAP
0x0058   bufWrap
0x8058   serInPtr
0x0208   NOTFULL
0x805C   serBufUsed
0x01EB   SIO_B_EI
0x01F1   SIO_RXEN
0x01E3   SIO_A_EI
0x01D9   SIO_RXDI
0x01B5 X B_RTS_ON
0x01BB   SIO_RTS_ON
0x01AD   A_RTS_ON
0x8249   SERBBITS
0x019D   SIO_RTS_OFF
0x8248   SERABITS
0x0181   EMPTYCHBBFR
0x01D3   SIO_B_DI
0x0197   B_RTS_OFF
0x46EF   SOERR
0x015D   CHABFREMPTY
0x014F   EMPTYCHABFR
0x8247   SERIALS_EN
0x01CB   SIO_A_DI
0x1A6B   GMMSG
0x0778   CHAR2VID
0x8201   PRNTVIDEO
0x823F   KBDNPT
0x0120   CNTRXCHA
0x000D   CR
0x8202   CHR4VID
0x0131   LVRXCHA
0x01FD   CHARINTOBFR
0x8241   TMPKEYBFR
0x018F   A_RTS_OFF
0x00EC   FMVEREND
0x00D0 X FWVER
0x8061   NMIUSR
0x81F2   CTC3IV
0x81EF   CTC2IV
0x81EC   CTC1IV
0x81E9   CTC0IV
0x0278   CKINCHAR
0x0018 X RST18
0x022A   RXA
0x0010 X RST10
0x0136   SPEC_RXA_CNDT
0x0100   RX_CHA_AVAIL
0x0259   TXA
0x0008 X RST08
0x0168   SPEC_RXB_CNDT
0x0165   RX_CHB_AVAIL
0x02AE   INIT_HW
0x0000 X RST00
0x0005   SER_EMPTYSIZE
0x0050   SER_FULLSIZE
0x0058   SER_BUFSIZE
0x0041   PSG_DAT
0x0040   PSG_REG
0x0032   VDP_SET
0x0030   VDP_DAT
0x0021   SIO_DB
0x0020   SIO_DA
0x0023   SIO_CB
0x0022   SIO_CA
0x0013   CTC_CH3
0x0012   CTC_CH2
0x0011   CTC_CH1
0x0010   CTC_CH0
0x0003   PIO_CB
0x0002 X PIO_CA
0x0001   PIO_DB
0x0000 X PIO_DA
